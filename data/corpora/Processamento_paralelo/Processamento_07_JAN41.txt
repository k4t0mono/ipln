Técnicas de Simulação Distribuída permitem executar um mesmo modelo de simulação sobre múltiplos computadores.

Para tanto, o modelo de simulação é particionado unidades denominadas de Processos Lógicos (PL) que podem ou não cooperar em tempo de execução.

Em geral, a simulação distribuída explora principalmente o realismo de modelos, diminuindo as preocupações com desempenho.

Neste contexto, o uso da ociosidade do recurso de processamento de multicomputadores, com o objetivo de reduzir o tempo total de execução de modelos, abre espaço para pesquisas.

Deste modo, este trabalho discute a execução distribuída de modelos de simulação cujos PL's não cooperam em tempo de execução, e apresenta a especificação e protótipo de um ambiente (ferramenta) de suporte para a execução distribuída de PL's.

O objetivo geral é a redução do tempo total gasto para o exercício de modelos distribuindo a execução dos PL's entre múltiplos nodos de um multicomputador de propósito geral, usufruindo assim da ociosidade destes recursos.

Técnicas de simulação permitem imitar o comportamento de sistemas reais através da construção e exercício de modelos de representação.

A possibilidade de visualizar o comportamento de sistemas através de modelos, podendo inclusive realizar interferências sem riscos para o sistema real, está entre os benefícios da simulação.

Mais do que isso, modelos são passíveis de manipulações que seriam difíceis de executar na entidade real que ele representa, quer pela impraticabilidade de fazê- las, quer pelo ônus demasiado.

No entanto, as técnicas de simulação demandam, em geral, o tratamento de grande volume de dados.

Este é um dos fatores que motivam o desenvolvimento de estudos em Simulação Paralela e Distribuída.

A Simulação Paralela prevê a execução de modelos de simulação em recursos baseados em arquiteturas paralelas.

No entanto, tais recursos geralmente são de acesso mais restrito se comparados a recursos computacionais de propósito geral interligados (multicomputadores).

Já a Simulação Distribuída visa a distribuição da execução de um modelo em multicomputadores.

No escopo da DIS (Distributed Interactive Simulation), existe uma valorização do realismo em detrimento do desempenho.

Em contrapartida, os recursos computacionais que compõem ambientes distribuídos apresentam grande ociosidade, podendo chegar a uma média de 99%.

Isto ocorre em função de que a maioria desses  recursos são usados para realizar atividades pouco exigentes tais como edição de textos, navegação na Internet, entre outros.

Esta ociosidade motiva o desenvolvimento de trabalhos que exploram a multicomputadores na simulação distribuída para a redução do tempo total de execução de modelos.

Neste contexto, este trabalho discute a execução distribuída de modelos de simulação compostos por Processos Lógicos (PL) que não cooperam em tempo de execução.

Um PL representa uma parte ou componente que integra um mesmo modelo de representação.

PL's de um mesmo modelo podem ser definidos para cooperar ou não cooperar uns com os outros em tempo de execução.

Ambientes de suporte a modelos cujos PL's cooperam em tempo de execução são bastante explorados no escopo da DIS, o que não ocorre com modelos compostos por PL's não cooperantes.

Na execução distribuída de PL's não cooperantes um dos principais fatores que dificulta o uso de multicomputadores é a necessidade de gerenciamento da distribuição e precedência de execução dos PL's.

Embora esta atividade possa ser feita no trato direto com os protocolos e sistemas operacionais, esta é uma tarefa que consome esforço considerável, e que se repete na implementação de cada novo modelo.

Deste modo, este trabalho apresenta a especificação e implementação de uma ferramenta de suporte à execução distribuída de modelos particionados em PL's não cooperantes.

O objetivo geral é a redução do tempo e esforço gasto para a construção e para o exercício (execução) desses modelos.

Para isso, a ferramenta abstrai do projetista aspectos de modelagem, de gerenciamento de distribuição e execução dos PL's.

O artigo esta organizado da seguinte forma.

A seção 2 apresenta alguns trabalhos relacionados.

A seção 3 apresenta a especificação de requisitos e aspectos de implementação do ambiente.

A seção 4 apresenta um estudo de caso, seguida das conclusões na seção 5 e perspectivas.

Em geral, as pesquisas em simulação distribuída direcionam esforços para o tratamento de modelos cujos PL's cooperam em tempo de execução.

Esta seção apresenta alguns ambientes de simulação distribuída que gerenciam PL's cooperantes.

JavaSim  pode ser visto como um núcleo de simulação que implementa mecanismos genéricos necessários para distribuir a simulação em uma rede de estações de trabalho.

Para o suporte à distribuição, é necessário que, em cada estação de trabalho, seja executada uma instância do núcleo do JavaSim.

As entidades do modelo de simulação são mapeadas para elementos autônomos.

Cada elemento autônomo é um objeto com thread de execução própria e uma fila de mensagens a ser tratada.

Assim, JavaSim gerencia a criação e destruição de elementos autônomos, a troca de mensagens entre elementos autônomos distribuídos, e o escalonamento de eventos.

Em relação à sincronização, o ambiente oferece os métodos de conservador e otimista.

Embora a ferramenta JavaSim suporte a simulação distribuída, ela foi concebida para modelos de simulação cujas partes distintas (elementos autônomos) permanecem em execução até o término da simulação e que cooperam (troca de mensagens).

ASDA (Ambiente de Simulação Distribuída Automática), é um ambiente de simulação voltado à avaliação de desempenho de sistemas computacionais.

ASDA oferece ao usuário um ambiente automático para desenvolvimento de simulações distribuídas.

O ASDA utiliza o conceito de Processos Lógicos para Particionamento de modelos.

Também prevê a cooperação entre os PL's, em tempo de execução, por meio de protocolos de troca de mensagens.

Illium  é uma Ferramenta de Simulação de Modelos Dinâmicos de Projeto de Software.

Ela permite a construção e simulação de modelos dinâmicos de projetos de desenvolvimento de software.

Basicamente, esta ferramenta tem como objetivo obter o entendimento das relações existentes entre os componentes de um projeto de software.

Illium utiliza uma estratégia de simulação contínua, denominada dinâmica de sistemas, que é uma técnica para descrição de sistemas complexos.

Esta técnica permite identificar e modelar relações de causa e efeito e ciclos de realimentação presentes em um sistema, tendo seus aspectos estruturais representados através de diagramas de fluxos.

Embora tais ambientes sejam de alguma forma voltados para simulação distribuída, nenhum deles é apropriado para simular modelos cujos PL's não cooperem em tempo de execução.

Ou seja, eles são projetados o gerenciamento da cooperação entre PL's após o seu disparo, e não para o controle da ordem de disparo de PL's em diferentes etapas da execução de um mesmo modelo.

No contexto da simulação distribuída, a divisão de modelos em PL's não cooperantes altera algumas características em comparação com o uso de PL's cooperantes em tempo de execução.

Por exemplo, o retorno (resultado) da execução de um PL1 pode ser utilizado como parâmetro de entrada para um PL2 a ser executado em seguida.

Na inexistência de uma relação deste tipo, os PL's são então totalmente independentes, não existindo nenhuma restrição para sua execução simultaneamente.

Em conseqüência, deve haver um controle sobre o momento (ou ordem) em que os PL's são executados  quando o resultado de um é utilizado como parâmetro de outro, por exemplo.

Estes dois fatores principais nortearam o trabalho de especificação dos requisitos do ambiente de suporte a execução distribuída de modelos apresentado neste trabalho.

Para isso, este ambiente provê recursos tanto para construção (modelagem) bem como para execução desses PL's.

Na implementação do ambiente, a modelagem e a execução foram implementadas em dois módulos distintos.

O Módulo de Modelagem (MM) tem como finalidade oferecer apoio ao projetista para configurar a hierarquia de execução dos PL's de um modelo, o cadastro de PL's, recuperação/alteração de modelos para novas execuções, reuso de PL's em modelos distintos, entre outros.

Para isso, o MM permite visualizar o modelo em construção através de uma interface na qual o projetista define os requisitos necessários à construção e execução do modelo.

O diagrama demonstra a seqüência de atividades para construção de um modelo.

As três primeiras atividades podem ser realizadas de forma independente.

São elas, cadastro dos nodos (máquinas) que participarão do processamento, cadastro de PL's, e especificação da hierarquia de execução dos PL's.

A função de cadastro dos IP's (Internet Protocol) permite ao projetista identificar os nodos da rede que irão participar da simulação.

A função de cadastro de PL's permite ao projetista criar uma base de PL's ainda não vinculadas à um modelo em particular.

Deste modo, os mesmos PL's podem ser associados a diferentes modelos sem a necessidade de novo cadastro (permite o reuso).

Ao iniciar o processo de construção de um modelo, o projetista inicialmente fornece informações sobre número de níveis que o modelo possui e o número de nós que compõem cada nível.

Ambos, número de níveis e número de nós, são baseados na estrutura de grafos de precedência.

Ele é utilizado para especificar a ordem (nível) de execução de PL's e a dependência entre eles (se existir).

Ou seja, o resultado da execução de um PL pode ser utilizado como parâmetro de entrada para disparo de um outro PL.

Com base nestas informações, o módulo de modelagem cria uma estrutura visual que representa as restrições de precedência estabelecidas pelo projetista.

O identificador de cada PL é gerado no momento do seu cadastro.

Na configuração dos parâmetros requeridos pelo PL para o disparo de sua execução, o projetista deve indicar um valor, ou o ID de um PL com execução anterior.

Assim, o valor retornado pela execução deste PL pode ser fornecido como parâmetro para execução do PL seguinte.

Este fato justifica a necessidade de gerenciamento da relação de dependência e hierarquia entre os PL's de um modelo.

Representa o grafo de um modelo simples composto por 3 PL's onde o PL 48 recebe como parâmetro de entrada o retorno do PL 50 e um literal 5'.

E o PL 49 recebe como parâmetro de entrada o retorno do PL 48.

Demonstra o formato do arquivo de configuração gerado a partir do grafo.

Este arquivo é utilizado pelo módulo de execução do ambiente para o exercício do modelo.

O arquivo possui as seguintes informações (nessa ordem e separadas por ";"), endereço IP de cada máquina participante da execução distribuída, ID do PL, caminho absoluto do código do PL, número de parâmetros do PL, nível do PL na estrutura do modelo (grafo), local de execução (local/remoto), e os parâmetros para disparo do PL.

Cada linha faz referência a um parâmetro.

Um parâmetro pode ser literal ou de retorno.

Um literal é um valor definido pelo projetista.

Um retorno é o resultado da execução de outro PL.

Nesse caso, o valor representa o ID do PL que possui o resultado a ser utilizado.

O Módulo de Execução (ME) tem como objetivo geral o gerenciamento da execução distribuída dos PL's de acordo com a configuração estabelecida durante o uso do MM, e repassada ao ME através do arquivo de configuração.

Apresenta a arquitetura do ME que é composto por três partes principais, Manager, Sender, Slave.

O Manager é encarregado da leitura do modelo de simulação, do envio dos PL's de acordo com os níveis pré- estabelecidos no grafo de precedência do modelo, e do escalonamento de cada máquina que vai fazer a execução de cada PL.

Para cada PL do modelo que será executado, Manager cria uma instância da classe LPThread que requisita serviços de Sender, controla os parâmetros do PL, entre outras atividades.

Uma LPThread é criada para cada PL que estiver participando do escalonamento para ser executado em um dos nodos previstos para a simulação.

As LPThreads são colocadas em uma lista para a atividade de execução dos PL's.

Sender é responsável por estabelecer a conexão com a máquina escalonada para executar um PL.

Além do estabelecimento da conexão, Sender envia o PL a máquina de destino, ou apenas os parâmetros do PL, caso o PL tiver sido executado nessa máquina.

A classe SenderRecieverFile executa a transferência do conteúdo do PL para o nodo destino.

Slave representa uma máquina que participa da execução da simulação.

Cada nodo participante da simulação deve possuir um Slave ativo.

Este módulo aguarda solicitações do Sender para execução de um PL e conseqüente retorno dos resultados.

Quando todos os PL's de um nível terminam a execução, suas LPThreads são removidas da lista e a execução passa para o próximo nível do modelo.

Então o processo recomeça.

Deste modo, o ME executa simultaneamente todos os PL's de um mesmo nível, de acordo com o grafo de precedência.

O número de PL's que executam em paralelo é limitado pelo número de nodos envolvidos na simulação.

Esta seção apresenta um primeiro estudo de caso desenvolvido sobre o ambiente.

Este estudo tem como propósito a obtenção de uma primeira observação, baseada em um teste prático, da redução do tempo de processamento com a distribuição de PL's.

Embora simples, este estudo já é suficiente para perceber a redução do tempo total de execução de um modelo proporcionalmente ao aumento do número de nodos participantes.

Estão em andamento atividades para submeter modelos mais representativos na ferramenta, a partir dos quais medidas mais consistentes serão tomadas.

No estudo aqui apresentado, foi implementado um algoritmo simples para multiplicação de matrizes.

Na construção do modelo para execução distribuída foram declarados 4  níveis.

A  ferramenta  paraleliza automaticamente a execução dos PL's de cada nível na  Grafo do modelo módulo de modelagem.

O grafo de precedência que representa o modelo é apresentado.

O primeiro nível do modelo configura duas execuções do PL denominado gm1 exe'.

Este PL gera uma matriz.

Para isso, recebe dois parâmetros literais, número de linhas, e número de colunas da matriz.

O segundo nível configura 20 execuções do PL denominado selexe'.

Este PL seleciona uma linha da primeira matriz e recebe 2 parâmetros, a matriz resultante da primeira execução do PL gm1 exe, e um literal referente  ao número (índice) da linha que deve ser selecionada.

O  terceiro nível configura 20 execuções do PL denominado  mul exe'.

Este PL executa a multiplicação de uma linha da  primeira matriz com a segunda matriz.

Antes de cada  multiplicação, este PL executa o algoritmo bubble sort num  vetor com 20000 elementos para adicionar processamento  apenas.

O mul exe' recebe como parâmetro uma linha da  primeira matriz selecionada pelo PL sel exe', e a matriz  gerada pela segunda execução do PL gm1 exe.

Por fim, o  último nível do modelo executa uma vez o PL joi exe'  para montar a matriz resultante.

Na execução do modelo foram utilizadas 4 máquinas  com 64 MB de RAM, e processador Celerom 733 Mhz.

Primeiramente o modelo foi executado utilizando apenas 1 máquina.

Em seguida, foi distribuído em 2 máquinas, em 3 máquinas, e depois em 4 máquinas.

A medida do tempo de cada uma das execuções considera o intervalo entre o instante imediatamente anterior ao disparo do primeiro PL, e o instante imediatamente posterior ao encerramento da execução do último PL.

No contexto da simulação distribuída, este artigo discute o aproveitamento da ociosidade inerente aos recursos de processamento de multicomputadores na execução distribuída de modelos formados por processos lógicos paralelizáveis e não cooperantes.

Foi apresentada a concepção e implementação de um ambiente que permite ao projetista de modelos usufruir do potencial ocioso de processamento de multicomputadores sem a necessidade de direcionar esforços para controlar e monitorar a execução distribuída de PL's.

Para isso, permite a configuração de disparo e ordem de execução dos PL's que compõe um modelo (precedência).

Embora o estudo de caso apresentado tenha utilizado um modelo hipotético simples, ele teve como objetivo inicialdemonstrar a viabilidade prática do ambiente construído.

Tarefas estão em andamento para o uso do ambiente na execução de modelos que representam sistemas reais.

Como trabalhos futuros está prevista a inclusão de novas propriedades no ambiente.

Entre elas, incorporar a capacidade de disparo de modelos a partir de qualquer um dos nodos em que a ferramenta estiver sendo executada, e capacitar a ferramenta da habilidade de evitar nodos sobrecarregados ao distribuir os PL's fornecendo para cada nodo informações sobre quais PL's estão executando e em que nodo, tenham sido eles disparados do nodo local ou não.

Esta situação só acontece quando dois ou mais modelos são disparados simultaneamente a partir de diferentes nodos.

Na versão atual da implementação do ambiente o projetista precisa fornecer no arquivo de configuração o número IP dos nodos que estão participando da simulação.

Esta atividade será automatizada, reduzindo a quantidade de informações que o projetista precisa manipular na configuração de um modelo.

No escopo da simulação distribuída de sistemas paralelizáveis, também está prevista a realização de estudos com vistas ao particionamento de modelos.

Esta atividade visa incluir no ambiente mecanismos de apoio para dividir modelos em PL's não cooperantes (quando possível).

