A computação paralela distribuída realizada em sistemas LINUX é uma boa escolha para o desenvolvimento de aplicações que necessitam de desempenho elevado.

O ambiente PVM (Parallel Virtual Machine) torna viável essa alternativa, fornecendo ao desenvolvedor de software um conjunto de rotinas e facilidades para a distribuição, comunicação e controle de tarefas no ambiente distribuído.

A versão PVM 34 apresenta novas funcionalidades com relação as versões anteriores desse ambiente, visíveis pela atualização na interface de programação.

Este artigo discorre sobre essas novas funcionalidades, ressaltando suas vantagens para o desenvolvimento de programas mais eficientes.

Além disso, são apresentadas uma avaliação e análise do desempenho dessa nova versão, considerando a comparação com a versão PVM 3, ambas executadas em computadores pessoais gerenciados pelo sistema operacional LINUX.

A computação paralela é uma área da ciência da computação que tem como objetivo principal incrementar o desempenho de aplicações específicas.

Através de um conjunto de processadores, problemas que demandam altas taxas de computação são resolvidos mais rapidamente do que se estivessem sendo solucionados por computadores seqüenciais (arquiteturas de von Neumann).

Além disso, aplicações intrinsecamente paralelas encontram uma solução direta se implementadas como programas paralelos.

Uma alternativa cada vez mais empregada para a execução de aplicações paralelas é a utilização de ambientes de passagem de mensagens em sistemas distribuídos, ou, simplesmente, computação paralela distribuída.

Um exemplo de sucesso dessa abordagem é o ambiente PVM (Parallel Virtual Machine).

O PVM é um conjunto de bibliotecas e ferramentas de software que emula um sistema computacional concorrente, flexível e de propósito geral.

A grande vantagem da computação paralela distribuída é a sua excelente relação custo/benefício, se comparada à utilização de máquinas com processamento massivamente paralelo.

Atualmente, o PVM é utilizado em várias áreas de conhecimento.

São exemplos de aplicações que utilizam o sistema PVM, 

Computação dinâmica de fluídos para modelagem de alta resolução da camada do manto da terra.

Simulação de robôs móveis.

Processamento de imagens.

Análise financeira.

Análise da seqüência do genoma humano.

Tomografia computadorizada.

Projeto e análise aerodinâmico para motores.

Simulação de combates interativos distribuídos em tempo real.

Otimização de supercondutores digitais em circuitos eletrônicos e determinação de estrutura molecular de elementos.

Tais aplicações são executadas em diferentes plataformas de hardware, homogêneas e heterogêneas.

O advento de computadores pessoais (PCs) de desempenho comparado à estações de trabalho, viabiliza a utilização de PCs como ambiente de execução de aplicações paralelas.

Hoje, existem implementações do ambiente PVM para computadores pessoais executando os sistemas operacionais Windows e LINUX, viabilizando uma plataforma barata para o ensino e execução de aplicações paralelas.

Grandes universidades brasileiras tem adotado o LINUX como sistema operacional de suas redes de computadores devido à viabilidade econômica desse sistema, o seu bom desempenho e suas características de software livre com código aberto.

Este artigo discorre sobre a utilização do ambiente PVM 34 em uma rede de computadores gerenciada pelo sistema LINUX.

Nesse contexto, são apresentadas as novas alternativas para a comunicação da versão PVM 34, assim como dados que expressam o desempenho da nova versão nessas redes.

O projeto PVM foi iniciado em 1989 e desde então tem passado por várias revisões e atualizações, sendo que cada revisão é acompanhada por mudanças na implementação do projeto.

Essas revisões são realizadas visando atingir, principalmente uma interface para programas de aplicação (API) simples e eficiente.

Transparência à heterogeneidade dos recursos computacionais e possibilitar a configuração dinâmica da máquina paralela virtual.

A versão mais recente desse ambiente é a PVM 34, que surge após a versão PVM 3, trazendo novas funcionalidades e facilidades ao desenvolvedor de software.

O modelo computacional do PVM considera que uma aplicação é composta de várias tarefas, sendo que cada uma delas é responsável pela execução de uma parte do trabalho a ser efetuado.

Para viabilizar esse modelo, o sistema PVM consiste basicamente em duas partes.

A primeira parte é o PVM daemon (pvmd3 ou pvmd), que reside em todas as máquinas que fazem parte da máquina virtual e gerencia a comunicação na máquina virtual.

A segunda parte consiste na biblioteca de comunicação PVM (Libpvm), que deve ser encadeada (linked) com as aplicações que são desenvolvidas.

Essa biblioteca disponibiliza as rotinas para comunicação, gerenciamento dinâmico e sincronização entre processos.

A Libpvm consiste em um conjunto de funções (biblioteca) que implementa a interface entre a aplicação e o PVM.

Através da Libpvm, a aplicação pode conectar-se ao seu respectivo PVM daemon, e, consequentemente, unir-se à máquina virtual.

Na biblioteca de comunicação são implementadas também todas as funções para gerenciamento da troca de mensagens, rotinas para criação de buffers, codificação, envio e recebimento.

Através dessas rotinas, uma tarefa pode comunicar-se com outras tarefas.

A Libpvm, escrita na linguagem C, permite o desenvolvimento de aplicações nas linguagens C, C++ e Fortran.

As mensagens enviadas pelas tarefas PVM são rotuladas por identificadores (tag) definidos pelo usuário.

As funções de recebimento de mensagens (pe pvm_recv) verificam o identificador, permitindo ao usuário selecionar entre as múltiplas mensagens que chegam à tarefa ao mesmo tempo.

É possível também que a tarefa utilize identificadores genéricos, para receber mensagens com qualquer identificador e/ou de qualquer fonte.

Isso permite que a tarefa trabalhe no chamado modo "promíscuo", recebendo qualquer mensagem que chega a Libpvm.

Esse modo de operação pode interceptar mensagens direcionadas para outras tarefas, ocasionando perdas de mensagens e até a falha de aplicações paralelas.

A partir da versão 34, o PVM disponibiliza uma solução para esse problema, através da possibilidade de criação de contexto de comunicação.

Assim, o desenvolvedor pode garantir que uma tarefa A comunica-se isoladamente com uma tarefa B dentro de um contexto, que não pode ser violado por outras tarefas.

As rotinas de envio e recebimento de mensagens do PVM (pvm_send e pvm_recv)trabalham com contexto de mensagens através de um contexto operacional corrente, existente mesmo que a tarefa PVM não invoque explicitamente rotinas de criação e manutenção de contextos.

Da mesma forma, a versão PVM 34 encontra-se reestruturada internamente utilizando o conceito de contextos de mensagens.

O mecanismo de manipuladores de mensagens (message handlers) foi introduzido na nova versão PVM 34 visando facilitar o desenvolvimento de aplicações que necessitam de uma forma de enviar notificações para tarefas PVM e, em alguns casos, receber informações de resposta.

Além disso, aplicações que necessitam de um mecanismo de comunicação ponto-a-ponto, podem utilizar em seu código manipuladores de mensagens.

A implementação de manipuladores de mensagens no código PVM é baseado no modelo de mensagens ativas, introduzido pela Universidade de Berkeley, Califórnia.

Esse modelo visa reduzir a latência de comunicação inerente na computação distribuída.

Diferentemente de chamadas de procedimentos remotos (RPC), que resultam em várias chamadas ao sistema pelo servidor e que só executam algum trabalho quando existe a chamada remota, um programa utilizando mensagens ativas, por outro lado, encontra-se sempre realizando algum trabalho e só é interrompido quando existe informação a ser trocada.

O trabalho do manipulador de mensagens ativas é extrair a informação da mensagem e integrá-la ao ciclo de trabalho.

Assim, processamento e comunicação podem ser sobrepostos, incrementando o desempenho do sistema.

As tarefas PVM utilizam o modelo de manipuladores de mensagens através das rotinas implementadas na Libpvm pvm_addmhf e pvm_delmhf, que servem, respectivamente, para a criação e remoção de rotinas de manipulação para uma tripla fonte, que indica a tarefa emissora), o tag (envelope da mensagem) e contexto.

O desempenho de um ambiente de passagem de mensagens pode ser avaliado, através da verificação de uma medida de tempo agregada como o speed-up obtido com a execução das aplicações paralelas.

Outra alternativa é utilizar medidas específicas que buscam quantificar os tempos gastos pela biblioteca de comunicação em cada uma das etapas da troca de mensagens.

Os tempos obtidos com a utilização dessas medidas tornam-se valiosos para comparações e como subsídios para correções.

Para avaliar o desempenho do PVM 34, são utilizados benchmarks executados sobre essa versão e a versão PVM 3 3 11.

Seguindo essa abordagem, as versões PVM 3 e PVM 34 são instaladas em uma mesma plataforma de hardware, gerenciada pelo sistema operacional LINUX, distribuição slackware 4 0.

Os testes são realizados em duas máquinas Pentium 100 MHZ com 32 MB de memória RAM, do laboratório de ensino que serve aos usuários da Universidade Estadual de Ponta Grossa.

Nessa avaliação, são utilizados  benchmarks e medidas definidos por Dilon, Santos e Guyard, que servem como parâmetros para a comparação.

Os testes são executados várias vezes a fim de aumentar a amostra e fornecer dados estatisticamente corretos.

Os benchmarks são executados considerando duas classes de tamanho de mensagem.
Mensagens pequenas, que variam de 0 a 1 KByte, em uma progressão aritmética de 32 Bytes e mensagens grandes, que variam de 1 KByte a 512 KBytes, em uma progressão aritmética de 16 KBytes.

Exemplos práticos de mensagens pequenas em uma aplicação paralela são variáveis de controle, estruturas e vetores pequenos.

Exemplos de mensagens grandes são vetores, matrizes e conjunto de dados maiores, como imagens de satélite ou base de dados.

Com essa organização, pode-se observar o comportamento das versões em diferentes tamanhos de mensagens e, conseqüentemente, sob diferentes cargas nas estruturas internas.

Utiliza-se o tipo char (ponteiros de char) da linguagem C nas mensagens trocadas e nos benchmarks, implementados como tarefas PVM, é utilizada a função pvm_pkbyte, disponível através da interface da biblioteca de comunicação PVM (Libpvm).

São considerados os benchmarks ping, ping pong e um benchmark ping pong específico para observar o comportamento dos manipuladores de mensagens.

Foram executadas duas combinações para o algoritmo ping pong.

Uma combinação mede o atraso da comunicação ponto a ponto e outra mede o atraso da comunicação ponto a ponto sem considerar o tempo de preparação da mensagem.

Os benchmarks considerados neste artigo foram implementados como tarefas PVM.

Os resultados obtidos na avaliação estão ilustrados através de gráficos de linha, com o eixo x representando o tamanho das mensagens trocadas (em Bytes ou KBytes), e o eixo y representa medidas como tempo de transmissão ou throughput.

Uma parcela significativa do tempo de envio de uma mensagem, no PVM, é gasta para preparar a mensagem a ser enviada.

Esse tempo é gerado pela rotinas internas da Libpvm, responsáveis pela manutenção direta das estruturas, variáveis e buffers de transmissão e recebimento.

Assim, o desempenho dessas rotinas influencia diretamente o tempo de transmissão da mensagem, e conseqüentemente, o tempo de execução da aplicação paralela.

Com o objetivo de medir o atraso imposto pela Libpvm durante a preparação das mensagens, utiliza-se o algoritmo ping, que permite a coleta dos tempos de atraso da biblioteca de comunicação.

Dessa forma, executa-se o algoritmo ping para mensagens pequenas e mensagens grandes.

Ambas versões PVM 3 e PVM 34 obtêm um atraso linear com relação ao tamanho da mensagem, com pouca diferença nos tempos de atraso entre as versões consideradas.

A diferença média no tempo de atraso é de 4,7%, isto é, a versão PVM 34 apresenta um desempenho nas rotinas de preparação de mensagens 4,7% pior, com relação à versão PVM 3.

Nesse caso, a versão PVM 34 apresenta uma perda média de desempenho igual a 1,18 %, que corresponde, por exemplo, para o tamanho de mensagem de 512 KBytes, a um tempo de atraso igual a 10 microssegundos maior para a versão PVM 3 4.
Analisando quantitativamente os tempos de atraso, observa-se que, tanto para tamanhos de mensagens pequenas como para mensagens grandes, o tempo de atraso é superior ao observado em outros trabalhos.

Isso deve-se à configuração de hardware considerada e ao fato de que a comunicação é executada compartilhando o meio de comunicação com os servidores e roteadores do sistema.

Como considera-se a comparação entre versões, o fato de que os tempos de atraso são relativamente maiores não têm influência sobre os objetivos desta avaliação.

Durante a transmissão de uma mensagem, o atraso da biblioteca de comunicação é somado ao atraso gerado pelo protocolo de comunicação utilizado.

No PVM, as mensagens são trocadas através do protocolo TCP/IP, utilizando a interface de sockets como ponto de acesso.

Visando observar o atraso da comunicação ponto-a-ponto, utiliza-se o benchmark ping pong.

Esse benchmark é executado sobre mensagens pequenas e grandes.

Para esse caso, observa-se que a versão PVM 34 apresenta tempos maiores de atraso que a versão PVM 3 3 11, com uma diferença média de 1,38% para mensagens pequenas e 5% para mensagens grandes.

Considerando que o atraso da comunicação ponto a ponto inclui o atraso da rede de comunicação e que o protocolo de comunicação é invariável para ambas as versões, são formuladas as seguintes hipóteses sobre a perda de desempenho observada na versão PVM 34. 
A perda de desempenho verificada no atraso da comunicação ponto a ponto da versão PVM 34 é devida à má utilização do protocolo de comunicação ou a perda desempenho verificada no atraso da comunicação ponto a ponto da versão PVM 34 é devido ao gerenciamento das mensagens pela Libpvm.

Atraso da biblioteca de comunicação para mensagens menores.

Atraso da biblioteca de comunicação para mensagens grandes.

Visando encontrar resultados para comprovar ou refutar essas hipóteses, o benchmark ping pong é executado novamente, com uma modificação significativa, nesse contexto, o benchmark despreza os tempos de preparação da mensagem pela biblioteca de comunicação.

Assim, busca-se uma instrumentação de desempenho que considere apenas o atraso gerado pelo acesso ao protocolo de comunicação e o tempo de transmissão, sem o tempo de preparação da Libpvm.

Ilustram os resultados obtidos com a execução dessa variação do benchmark ping pong.

Os dados ilustram a perda média de desempenho observada, 1,06% para mensagens pequenas e 0,47% para mensagens grandes.

Calculando a diferença entre as diferenças médias para o benchmark ping pong puro e para o benchmark ping pong que despreza o tempo de preparação de mensagens tem-se os valores de 0,32% para mensagens pequenas e 4,53% para mensagens grandes.

Assim, conclui-se que a perda de desempenho nos tempos de atraso de comunicação ponto-a-ponto observada no PVM 34 não é devido a má utilização do protocolo de comunicação, ambas as versões apresentam valores de atraso semelhantes, verificados pela perda média de desempenho de 1,06% e 0,47% para as mesmas condições de hardware e tamanhos de mensagem.

Dessa forma, considerando a segunda hipótese, acredita-se que a perda de desempenho observada é devido ao gerenciamento de mensagens da versão PVM 34, que possui desempenho inferior à versão PVM 3.

O desempenho da comunicação ponto-a-ponto com a utilização de manipuladores de mensagens é observado com um benchmark ping pong.

Esse benchmark é implementado com uma tarefa mestre responsável por receber mensagens de uma tarefa escrava e tratá-las com um manipulador específico, devolvendo a mesma mensagem como resposta para a tarefa escrava.

Dessa forma, é possível observar o quanto a comunicação com manipuladores diferencia-se da comunicação ponto a ponto tradicional através de chamadas as rotinas pvm_send e pvm_recv.

Ilustra a comparação dos valores obtidos para o atraso da comunicação ponto a ponto tradicional e o atraso da comunicação com manipuladores.

Nesse caso, a diferença média de desempenho observada é de 5,5%.

Atraso comunicação ponto-a-ponto para mensagens pequenas.

As novas rotinas incorporadas à versão PVM 34 apresentam ao programador novas possibilidades para o desenvolvimento de aplicações distribuídas.

Essas novas rotinas tendem a facilitar o desenvolvimento de programas paralelos, da mesma forma que podem ser importantes para a criação de aplicações de maior portabilidade entre diferentes sistemas.

O mecanismo de contexto de mensagens incorporado a versão PVM 34 apresenta-se com um importante subsídio no desenvolvimento de aplicações que necessitam de alto sincronismo e cooperação entre processos.

A utilização de contextos de mensagens permite que exista sempre coerência no envio e recebimento de mensagens.

Além disso, esse mecanismo possibilita o desenvolvimento de ferramentas seguras de monitoramento e gerenciamento dinâmico da máquina paralela virtual.

O mecanismo de manipuladores de mensagens torna-se importante, principalmente, para aplicações baseadas no paradigma mestre e escravo, onde aplicações escravas são responsáveis por efetivar algum processamento e retornar respostas para uma aplicação mestre.

Aplicações de busca em bases de dados e sistemas inteligentes são exemplos de programas que podem ser implementados tirando proveito deste novo mecanismo.

O desempenho desse mecanismo mostra-se compatível com o desempenho das chamadas pvm_send e pvm_recv.

Dessa forma, considera-se que os manipuladores de mensagens fornecem um excelente recurso para a implementação de aplicações distribuídas, principalmente no que tange a construção de servidores baseados no modelo request-reply.

Um outra possibilidade de comunicação existente na versão PVM 34 não discutida neste artigo é a de criação de um espaço de tuplas (mailbox), que fornece um meio para a migração de aplicações paralelas baseadas em memória compartilhada para o ambiente PVM.

Dessa forma, as aplicações escritas para ambientes como o LINDA, podem ser adaptadas para o ambiente PVM sem modificar a filosofia da troca de informação e sem a necessidade da utilização do servidor de grupos (pvmgs).

Os resultados discutidos neste artigo reforçam a afirmação de que a computação paralela virtual é também viável em ambientes distribuídos baseados em computadores pessoais, constituindo um forte atrativo para aumentar a capacidade computacional efetiva de muitas corporações.

Atraso comunicação ponto a ponto para mensagens grandes.

Atraso para mensagens pequenas sem o tempo de preparação da mensagem.

Atraso para mensagens grandes sem o tempo de preparação da mensagem.

Desempenho dos manipuladores de mensagens.

