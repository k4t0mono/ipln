Este trabalho apresenta uma pesquisa sobre a adoção e utilização da tecnologia de Grades computacionais em ambientes corporativos.

Tem por objetivo enumerar quais são os requisitos necessários para essa utilização.

Para isso, faz-se um estudo dos requisitos de aplicações corporativas que poderiam ser implantadas em Grades e quais as ferramentas já existentes que endereçam esses requisitos.

Por fim, apresenta-se uma síntese relacionando os requisitos necessários para a adoção de Grades em ambientes corporativos com as ferramentas de Grade estudadas, verificando quais desses requisitos já estão satisfeitos e propondo os pontos que devem ser melhorados para futuras implementações de Grades corporativas.

A crescente utilização da tecnologia de Grades Computacionais no meio acadêmico e científico e os diversos casos de sucesso envolvendo essa tecnologia nesses meios, têm despertado o interesse de entidades corporativas quanto à possível utilização de Grades como infraestrutura para a execução de aplicações de negócios ou corporativas (bussiness aplications).

Tal interesse tem feito surgir diversas linhas de pesquisa que buscam adequar a tecnologia de Grades computacionais para que essa torne-se hábil em prover uma infraestrutura para solucionar problemas em ambientes corporativos.

À essa tendência de utilização de Grades computacionais em ambientes corporativos, convencionou-se denominar Enterprise Grid Computing, numa tradução livre, Grades Computacionais corporativas.

Ambientes corporativos possuem características diferentes de ambientes acadêmicos ou científicos, seus usuários são diferentes e até mesmo seus objetivos são diferentes.

Empresas, quase que em sua generalidade, objetivam lucro, possuem clientes que pagam por serviços que são prestados e que envolvem contratos que parametrizam essa prestação de serviços.

Na academia, o objetivo principal é o avanço da ciência, o que nem sempre é regido pelo lucro e nem sempre possui clientes externos dos quais ambientes científicos necessitam para se manter.

A tecnologia de Grades computacionais foi, incialmente, desenvolvida com base nesse ambiente científico e, conseqüentemente, nesse desenvolvimento não houve preocupação com diversas questões essenciais para o sucesso da aplicação dessa tecnologia em ambientes corporativos.

Mais recentemente, com o interesse de empresas em repetir o sucesso que a aplicação da tecnologia de Grade obteve em ambientes acadêmicos, começaram a surgir diversos estudos de como moldar uma estrutura de Grade capaz de atender às demandas do mercado corporativo.

Grades computacionais atingiram destaque por proverem recursos computacionais de alto desempenho por valores relativamente baixos em relação a estruturas de supercomputação dedicadas.

Permitem um uso mais extensivo de uma infraestrutura de computação já existente, possibilitando o aproveitamento de recursos ociosos e da agregação desses para um determinado fim.

Grades computacionais também permitem o compartilhamento de recursos distribuídos por diversos sites, promovendo de forma justa a colaboração entre instituições.

Todos os benefícios supra-citados, alcançados com a tecnologia de Grade em ambientes acadêmicos, são almejados por instituições corporativas no que diz respeito à gerência de seus recursos computacionais.

Implantar no meio corporativo essas tecnologias e atingir os avanços obtidos por elas na academia, represetaria um avanço não só econômico mas também na forma como empresas que dependem de recursos computacionais gerenciam seus recursos.

Com essa perspectiva, a transição de Grades do ambiente científico para o ambiente corporativo é um ponto chave para garantir o sucesso e adoção da tecnologia no mundo corporativo e evitar que todo esse movimento não passe pelo "efeito bolha" que diversas outras tecnologias passaram.

Por isso, é preciso estudar quais as premissas e quais os requisitos que uma Grade corporativa deve respeitar para que possa cumprir com a expectativa criada em torno da mesma.

Além disso, é preciso analisar quais são as iniciativas já propostas, quais as lições aprendidas e os avanços alcançados nessa transição e combinar esse conhecimento para alicerçar de forma sólida essa introdução para que a tecnologia de Grade possa se consolidar como uma solução para ambientes corporativos.

Este trabalho tem como objetivo o estudo dessa nova tendência que busca adaptar a tecnologia de Grades computacionais para o meio corporativo, analisar quais são os possíveis cenários de aplicação de Grades corporativas e quais os requisitos que esses cenários demandam e, conseqüentemente, quais as funcionalidades que uma Grade deve prover para atender a tais demandas.

Faz parte, também, do objetivo do trabalho fazer uma análise de quais demandas já podem ser atendidas com o atual Estado da Arte em Grades computacionais e quais são as mudanças necessárias para que uma Grade computacional possa atender plenamente as demandas ainda não contempladas, mostrando-se alguns estudos de caso de aplicação de Grades Computacionais em ambientes corporativos.

Este texto está organizado da segunite forma, no restante desse capítulo, faz-se a explanação da tecnologia de Grades coputacionais, abordando-se a conceitualização, o que a caracteriza, como é composta e quais os tipos de aplicações que a utilizam.

Faz-se um estudo sobre Grades corporativas, mostrando suas caracterísiticas e o que as diferenciam das Grades convencionais.

São mostrados diversos estudos de caso onde utilizou-se a tecnologia de Grades computacionais para servir às necessidades de um ambiente corporativo.

Termo advindo da Economia que é popularmente aplicado para designar a não consolidação de mercado de tendências tidas como fortes que receberão um grande investimento mas não tornaram-se realidade.

O crescimento da internet, acompanhado do crescente desenvolvimento tecnológico dos computadores e da disponibilidade de redes de alta velocidade a custos relativamente baixos, possibilitou o uso de recursos computacionais distribuídos como uma única abstração.

Essa abstração, que permite que diversos recursos computacionais sejam acessíveis como se fossem um, é chamada de Grade computacional  ou ainda Computação em Grade, ambos termos derivados de Grid Computing.

O uso do termo Grid vem da área de engenharia elétrica, onde ocorre o uso de recursos distribuídos heterogêneos (energia elétrica proveniente de diversos geradores geograficamente distribuídos e de diferentes capacidades) de forma trasparente, em termos de localização e acesso.

Essa definição, incialmente, dizia respeito ao uso de diversos recursos computacionais de forma cooperativa para prover poder computacional para problemas de larga escala, instrinsicamente ligados à computação de alto desempenho.

Esse conceito foi se refinando, tornando-se cada vez mais genérico, englobando utilizações além do uso para somente processamento de alto desempenho, ficando definida uma grade computacional como uma infraestrutura para compartilhamento de recursos para a solução de problemas de forma colaborativa.

Atualmente, a definição aceita para Grades classifica-as como infraestruturas para encapsulamento e virtualização de recursos, de modo que esses possam ser acessados de maneira transparente por seus usuários.

Com essa definição mais ampla, abra-se o leque de utilização de grades computacionais, estendendo seu uso para recursos que vão além do compartilhamento de ciclos de processamento, como armazenamento e compartilhamento de dados e, mais recentemente, para o provimento de serviços com a arquitetura OGSA (Open Grid Services Architecture).

Segundo Nemeth  uma Grade deve possuir algumas características.

Entre elas destacam-se, escalabilidade, heterogeneidade, compartilhamento, controle distribuído, repositório virtual de recursos, dinamicidade, transparência, segurança, economia, imagem de sistema, tolerância a falhas, aplicações, escalonamento de recursos e heurísticas de escalonamento.

Dentre as características citadas, destacam-se a heterogeneidade e transparência de uma Grade.

A maioria das grades existentes possuem recursos fisicamente distribuídos e de diferentes configurações.

Por exemplo, uma mesma grade pode encapsular computadores com processadores e arquiteturas diferenciados uns dos outros.

Esses podem estar sobre redes diversas e possuírem outras atribuições na organização, ou seja, estarem compartilhados para outras aplicações ou usuários.

Essa característica, que por um lado impulsiona o desenvolvimento de Grades computacionais, pois permite que recursos heterogêneos que são utilizados para outras tarefas possam ser compartilhados numa Grade, agregando recursos a mesma,concomitantemente, gera uma série de fatores e situações que precisam ser tratados.

Por exemplo, como disponibilidade de nodos, instabilidade de recursos e escalonamento de tarefas a serem executadas numa Grade.

O requisito de transparência de uma Grade também deve ser destacado, pois é fundamental para permitir que usuários acessem os recursos da Grade sem precisar conhecer sua estrutura interna e também, para que desenvolvedores possam construir soluções escaláveis que possam ser executadas em diversas implementações de Grades.

Do ponto de vista dos elementos que compõem uma Grade, pode-se dividi-los em três camadas, infraestrutura, middleware da grade e aplicações da grade.

A camada de infraestrutura diz respeito ao conjunto de dispositivos de software e hardware individuais que integram uma grade.

A camada do middleware da grade tem a função de agregar, gerenciar e disponibilizar os recursos da infraestrutura da grade de forma transparente aos seus usuários ou seja, é ponto central de uma Grade, responsável por intermediar as camadas de infraestrutura e aplicação.

A camada de aplicação da grade é composta por aplicações projetadas de forma que possam aproveitar os recursos oferecidos pelos middlewares de grades.

Aplicações de Grades são geralmente formadas por um conjunto de tarefas (tasks), pertencentes a um trabalho (job).

Estrutura de uma Grade Computacional.

Existem diversos tipos ou classes de aplicações para Grades.

Segue a seguir as classes mais utilizadas e que serão citadas no decorrer deste documento.

Parameter Sweep, aplicações denominadas PS (Parameter Sweep) ou de troca de parâmetros são compostas por diversas instâncias de um único programa (algoritmo), onde cada instância deste é executada com diferentes parâmetros.

Geralmente, apresentam-se como uma subclasse de Bag of Tasks.

Bag of Tasks (BoT), aplicações assim denominadas, "saco de tarefas", são aplicações nas quais não existe nenhuma dependência entre as tarefas que a compõe, não havendo relação de precedência entre elas.

Workflow, são aplicações de fluxo de execuções, nas quais existe uma certa dependência na ordem de execução das mesmas, sendo esta relação uma dependência de dados ou de controle entre as tarefas.

Em vista do sucesso obtido pela tecnologia de Grades no meio acadêmico e científico, nos quais esta é aplicada para prover meios baratos de disponibilizar alto poder computacional através do aproveitamento e compartilhamento de recursos entre instituições, diversas iniciativas comerciais surgiram, propondo o uso de Grades para ambientes corporativos.

Muitas dessas iniciativas de Grades corporativas, realmente, dizem respeito à tecnologia de Grades computacionais conforme a definição normalmente aceita no campo de Computação de Alto Desempenho.

Mas, devido à abrangência de significados que podem ser atribuídos ao termo Grid Computing e o destaque que a tecnologia vem obtendo, algumas iniciativas se intilularam como soluções de Enterprise Grid Computing somente por possuir alguma característica parecida com a definição de Grade, o que acaba gerando confusão, especialmente, àqueles indivíduos não familiarizados com Grades.

Devido a essa diversidade de aplicações do termo Enterprise Grid Computing, neste Capítulo apresenta-se-ão algumas definições para auxiliar no julgamento do que realmente pode ser considerado uma Grade computacional corporativa como sendo uma Grade computacional de fato.

Dada essa definição, faz-se um levantamento de possíveis aplicações e cenários existentes em ambientes corporativos que poderiam ser endereçados para aproveitar a tecnologia de Grades Computacionais.

Com base nesses cenários e aplicações, faz-se um estudo de quais recursos uma Grade Computacional deve possuir para que possa ser utilizada dentro de um ambiente corporativo.

Tais definições são importantes para o norteamento do restante do documento e também servem como critério para a escolha de estudos de caso de utilização de Enterprise Grid Computing apresentados no Capítulo 3.

Atualmente, academicamente falando, a definição mais aceita para Enterprise Grid Computing é dada por Nadiminti e Buyya  que definem uma Grade corporativa como, "Um sistema distribuído que tem por objetivo agregar e coordenar de forma dinâmica, recursos computacionais de uma corporação, melhorando sua utilização de modo que ocorra um aumento geral na produtividade desses recursos".

Iniciativas de empresas como Oracle, com o Oracle 10 g, IBM, com o Grid and Grow, embora apresentem características como o gerenci-amento e aproveitamento de recursos distribuídos, assemelham-se mais a um gerenciador de recursos de cluster de computadores, tais como PBS  do que uma Grade propriamente dita, conforme definições apresentadas por Foster.

Por outro lado, há de se analisar as reais necessidades de um ambiente corporativo e se as implementações que atendem aos conceitos de Grade computacional vigentes, atendem plenemante as necessidades desse ambiente.

Dependendo da necessidade desses ambientes, talvez algumas características de Grades necessitem ser suprimidas ou acresentadas para que possam atender concretamente as necessidades corporativas, o que pode levar a infinitas interpretações diferentes de como deve ser uma grade corporativa, criando diversos padrões desses softwares, o que não é positivo nem para a indústria e nem para os consumidores de software.

Portanto, faz-se necessário um levantamento das características das aplicações corporativas que serão executadas na Grade, bem como quais as características e funcionalidades que uma Grade corporativa deve possuir para atender plenamente às necessidades dessas aplicações.

Com a introdução de Grades em ambientes corporativos, abrem-se diversas possibilidades de migração de aplicações já constituídas no meio corporativo para Grades computacionais.

Dentre essas possibilidades, surgem aplicações como mineração de dados, descoberta de drogas, simulações financeiras, processamento de documentos, entre outras que podem aproveitarse da estrutura de Grade para melhorar suas implantações e execuções.

Embora a diferenciação de aplicações para Grades inseridas num ambiente acadêmico ou científico para aplicações para Grades desenvolvidas num ambiente corporativo possa ser subjetiva, existem algumas características e requisitos de aplicações que estão majoritariamente presentes em aplicações corporativas e não necessariamente presentes em aplicações científicas.

Além disso, outro fator que deve ser levado em consideração é o ambiente de desenvolvimento e os recursos humanos envolvidos nessas aplicações.

Pode-se enumerar as seguintes características para aplicações corporativas para Grades que as diferenciam de aplicações para Grades inseridas num meio acadêmico ou científico, Dependências de Bases de Dados A grande maioria das aplicações inseridas no meio corporativo, fazem parte do contexto da empresa e estão geralmente relacionadas a outras aplicações e conectadas a uma ou mais bases de dados comuns.

Tal característica implica no fato de que aplicações corporativas têm uma alta probabilidade de demandarem de dados provenientes de SGBDs (Sistema de Gerenciamento de Banco de Dados).

Atualmente, uma característica bastante comum em aplicações corporativas, tem sido o fato de essas serem baseadas no modelo de implantação em multicamadas, mais comumente no modelo MVC (Model View Controller).

Essa implementação em multicamadas implica na possibilidade de uma aplicação demandar de recursos distribuídos que se interconectam.

Isso acrescenta uma complexidade que uma Grade corporativa deve ser capaz de tratar, a capacidade de executar uma aplicação que não nececessariamente está implantada de forma centralizada.

Uma outra característica que faz parte de aplicações corporativas é a sua interatividade.

Aplicações corporativas estão cada vez mais inseridas no contexto da internet onde essas aplicações estão online e trabalham com diversos usuários "conectados" a elas.

Esses usuários agem com interatividade, fazendo requisições ao sistema que precisam ser atendidas dentro de um tempo satisfatório aos seus usuários.

O quesito segurança de informação é muito importante em ambientes corporativos.

Empresas precisam manter seus dados sobre sigilo, evitar mau uso de seus recursos computacionais, acessos indevidos, garantir a execução de suas aplicações, etc.

Logo, essa necessidade acaba tornando-se intrínsica para as aplicações corporativas que utilizarão da Grade para serem executadas.

Entre os requisitos de segurança que uma aplicação corporativa demanda, estão requisitos como confidenciabilidade de uma aplicação, o que engloba necessidades como o isolamento dessa aplicação, protocolos de comunicação seguros e controles de acesso à aplicação.

Geralmente aplicações inseridas num meio corporativo foram desenvolvidas com o fim de servir como apoio ao negócio da empresa, demandando uma garantia de funcionamento básico.

Tal garantia é ainda mais aplicada quando uma aplicação é disponibilizada na forma de um serviço serviço prestado por um empresa a terceiros.

Um exemplo de modelo de contrato para garantia de serviço é denominado SLA (Service Level Agreement).

Um SLA estabelece quais as metas de qualidade de serviço que um prestador de serviço deve garantir ao contratante desse serviço.

Pode estabelecer metas como tempo de disponibilidade de um serviço e desempenho mínimo de um serviço.

Além disso, estabelece punições ao prestador do serviço em caso de descumprimento do SLA acordado.

Uma Grade computacional inserida dentro de um ambiente corporativo, deve ter algumas características e funcionalidades modificadas ou inseridas, quando comparadas com uma Grade inserida num ambiente acadêmico.

Dentre essas características e funcionalidades, destacam-se, Devido aos requisitos de segurança que aplicações corporativas demandam, uma Grade corporativa deve ter seu domínio administrativo restrito de modo que possa existir uma autoridade capaz de controlar todos os recursos da Grade, garantindo a segurança da mesma.

Esse requisito pode ser visto como uma contradição ao conceito de Grade, onde entende-se que esta deve ter um controle administrativo descentralizado e indenpendente, mas devido às características de ambientes corporativos, tal limitação torna-se necessária para Grades corporativas.

Tal requisito, no entanto, não impede que uma grade agregue vários domínios diferentes ou que impossibilite que empresas compartilhem recursos entre si.
Somente insere uma complexidade de como esses recursos possam ser adminstrados de forma restrita, preferencialmente expressa em contratos, impedindo por exemplo, que uma outra entidade possa utilizar-se desses recursos ou interferir na administração dos mesmos ou ainda que diferentes corporações que compõem a Grade tenham suas aplicações isoladas uma das outras.

Devido à heterogeneidade de usuários de Grades corporativas, essas devem prover de mecanismos mais eficientes de controle de usuários, em comparação com Grades científicas.

São necessários mecanismos de autenticação que evitem que usuários indesejados façam uso da Grade e mecanismos capazes de diferenciar usuários de acordo com suas características técnicas, prioriedades de execução e acesso e ainda, de acordo com os requisitos de suas aplicações.

Através dessas diferenciações, Grades corporativas devem ser capazes de prover os recursos adequados a esses usuários, permitindo um gerenciamento e uso desses recursos por parte dos usuários de acordo com as particularidades dos mesmos.

Embora esse aspecto já esteja bem desenvolvido nos middlewares de Grade já existentes, numa Grade corporativa deve ser ainda mais rigoroso.

Os recursos de uma Grade corporativa devem ser permanentemente controlados.

É preciso evitar que usuários não autorizados tenham acesso a recursos exclusivos a outros usuários ou que possam comprometer a confidenciabilidade das aplicações que utilizam esses recursos.

Conforme dito anteriormente, aplicações corporativas, na maioria das vezes, apresentam requisitos de segurança mais exigentes em relação à aplicações científicas.

Um desses requisitos diz respeito à segurança para o armazenamento e tráfego de dados.

Uma Grade corporativa deve prover funcionalidades que possibilitem o tráfego e armazenamento de dados de forma que se gararanta a segurança desses dados.

Para isso, são necessários protocolos de transporte de dados que envolvam criptografia e garantam a integridade desses dados.

Para o armazenamento de dados são necessárias tecnologias que garantam a privacidade de dados, controlando permissões de acesso, permitindo que esses dados possam estar em ambientes de armazenamento distribuídos e não exclusivos, isto é, a Grade deve permitir que diversas aplicações utilizem recursos de armazenamento, compartilhados, de modo que cada aplicação tenha seu espaço isolado e seguro dos demais.

O controle da qualidade de serviço (QoS Quality of Service) é uma área que cada vez mais vem ganhando atenção em diversas linhas de pesquisa da computação.

Este controle de QoS diz respeito a uma série de requisitos que um serviço deve respeitar.

Requistos de serviço esses, expressos por um SLA.

Tratando-se de Grades corporativas, políticas que garantam o cumprimento de SLAs são especialmente necessárias quando comparadas a Grades científicas, pois envolvem aplicações que muitas vezes são essenciais ao negócio de uma corporação ou ainda aplicações que devem respeitar outro SLA acordado com terceiros à empresa.

Segundo Juhua e  e Plestys as garantias de QoS de uma Grade corporativa devem se basear em três pontos, na concepção da Grade como uma prestadora de serviços, no suporte à diversidade de demandas de QoS de seus usuários e  no suporte à heterogeneidade dos recursos da Grade.

Resumindo-se, uma Grade corporativa deve ter primeiramente um modelo de contrato de SLA que estabaleça a Grade como uma prestadora de serviços e defina os parâmetros de relacionamento entre os serviços da Grade e seus utilizadores.

Com base nesse contrato, a Grade deve prover meios de garantia de QoS em cenários onde esta é composta por recursos heterogêneos alocados para diversos fins de forma dinâmica, por usuários que usam diferentes serviços da Grade e com diferentes requisitos de QoS.

Uma forte tendência encontrada na área de Grades computacionais é o conceito de utility computing.

Segundo  utility computing no contexto de Grades diz respeito a utilização de recursos computacionais e práticas de negócio em conjunto, com o objetivo de oferecer serviços computacionais.

Quando uma Grade transforma-se num provedor de serviços, são necessários meios de contabilizar o uso dessa.

Isso inclui a definição de critérios para atribuir "preços"a recursos e unidades de medida que expressem a utilização desses recursos, levando em conta se essa utilização cumpriu os níveis de QoS acordados no SLA do serviço e meios de compensar quando a QoS do serviço não for cumprida.

Uma Grade corporativa deve possuir uma arquitetura que forneça meios para que diferentes plataformas de software, seja a nível de SO ou de linguagem de programação, possam interagir com a Grade.

Um outro ponto para o qual uma Grade deve prover interoperabilidade é no nível de middleware da Grade, permitindo que diferentes implementações de Grades possam intercomunicar-se e compartilhar recursos ou serviços entre si.

Uma Grade corporativa deve dispor de funcionalidades que permitam o uso de dados de SGBDs, seja esse acesso proveniente da própria aplicação ou seja através do middleware da Grade.

Outra alternativa seria desenvolver meios de inserção desses dados nas tasks que compõe um job de uma Grade.

Esse requisito implica numa série de desafios que devem ser levados em conta na implementação de um middleaware de Grade corporativa.

Por exemplo, é preciso construir mecanismos que garantam a integridade e confiança de transações de aplicações da Grade sobre bases de dados, mantendo a integridade e segurança desses dados.

Outro fator que representa um desafio diz respeito de como uma base de dados pode ser distribuída na Grade de modo que o custo de acesso das aplicações à base seja reduzido.

Atualmente, boa parte dos sistemas pertencentes a uma empresa estão implantados num ambiente de internet.

Esses sistemas estão disponíveis a diversos usuários que estão diretamente conectados ao sistema e interagem com este demandando respostas com uma baixa tolerância de atraso.

A maioria das estruturas de Grade existentes hoje, somente dão suporte a aplicações de modo batch, para as quais os modelos de aplicações existentes atendem satisfatoriamente.

Mas, no entanto, não possuem mecanismos que permitem uma interação entre a aplicação da Grade e seus usuários.

Para suprir tal demanda, claramente percebe-se a necessidade de uma Grade possuir um suporte às garantias de serviço acima dissertadas, de modo que o middleaware da Grade possa ter conhecimento dos parâmetros de QoS que seus recursos possam atender, permitindo assim um escalonamento dinâmico e inteligente que possa dar maiores garantias de que o tempo de resposta de aplicações online e interativas seja coerente com o SLA acordado para essas aplicações.

Termo que designa aplicações as quais não existe interação entre usuário e aplicação durante o processamento da aplicação.

O suporte para aplicações multi-camadas é permeado pelas questões já citadas, como QoS da Grade, acesso à base de dados e suporte para aplicações online, pois uma aplicação multicamada geralmente possui, entre outras, uma camada para acesso à base de dados e para interatividade com seus usuários.

Cabe a Grade, fornecer meios de alocar seus recursos de modo que o custo de acesso da aplicação a essas camadas seja minimizado.

Devido à complexidade que envolve a implantação de aplicações multicamadas numa Grade, com o atual Estado da Arte da tecnologia de Grades, atualment,e dado às limitações de redes distribuídas e, principalmente a instabilidade de Grades devido a sua dinamicidade, tal funcionalidade somente pode ser possível em Grades de domínio administrativo muito restrito e controlado, o que poderia descaracterizar o sentido de Grade computacional.

Ferramentas para facilitar o uso da Grade Conforme dito anteriormente, os recursos humanos que compõem um ambiente corporativo não são heterogêneos.

Devido a isso, uma Grade dita corporativa deve possuir ferramentas que permitam que usuários não especialistas em Grades possam utilizá-las sem que para isso precisem de um longo tempo de aprendizado.

Para uma Grade ser considerada de uso acessível, é necessário que essa implemente funcionalidades que auxiliem tanto o desenvolvimento de aplicações para Grades, bem como o escalonamento, execução e acompanhamento dessa aplicação na Grade.

Tal acessibilidade é alcançada, quando usuários não experientes em Grades possam utilizá-las através de abstrações semelhantes com que são acustumados a utlizar os demais recursos da empresa.

Como diversas empresas produtoras de software começaram a apresentar diferentes soluções de middlewares para Grades corporativas, cada uma seguindo um padrão diferente e até mesmo, em alguns casos, uma definição de conceito para Grade diferentes, crio-se um fórum com o objetivo de discutir uma padronização para Grades corporativas.

O Open Grid Forum (OGF)  é um consórcio formado por empresas, fornecedores, pesquisadores e usuários de Grades liderados por empresas como IBM, Oracle, HP, Intel e Microsoft criado com o intuito de aumentar a adoção de tecnologias de Grade no meio corporativo.

Tal fórum surgiu da junção dos antigos Global Grid Forum (GGF) e Enterprise Grid Alliance (EGA).

O OGF possui comitês para a criação de uma especifícação aberta para ferramentas de Grades.

Tais especificações visam um modelo de Grade capaz de suprir as necessidades de ambientes corporativos e possibilitar a interoperabilidade entre as diversas implementações fornecidas pela indústria de software.

Dentre essas especificações descatam-se, A OSGA refere-se a uma especificação de uma arquitetura para Grades baseadas em serviços, utilizando-se da tecnologia de Web Services como meio para comunicação e integração de serviços.

Tem como objetivo principal a definição de uma arquitetura orientada a serviços (SOA Service Oriented Architecture) para Grades computacionais.

A OSGA está organizada sobre a padronização de seis eixos de serviços os quais entende-se serem necessários para um modelo de Grade capaz de atender as necessidades corporativas.

São eles, Tem por objetivo criar um modelo de gerência de execução de aplicações capaz de atender quais recursos devem ser alocados para satisfazer as demandas da aplicação e quais são os mecanismos necessários para preparar, executar e gerenciar a execução da aplicação.

Dizem respeito à trasferência, ao acesso e à atualização de dados pela Grade.

Procura criar um modelo para repositórios de dados para Grades e a forma como os middlewares de Grade devem acessá-los, replicá-los e atualizá-los.

São serviços referentes à forma como a Grade gerencia seus recursos.

Além da gerência de recursos de uma instância da Grade em si (site local), esses serviços dizem respeito também ao gerenciamento dos recursos externos (globais) como prospecção, reserva e controle de recursos externos aos quais o site tem acesso.

São serviços que visam garantir segurança à aplicação da Grade e ao acesso aos recursos da mesma.

Visa criar protocolos para autenticação ao acesso de recursos para evitar o uso indevido destes, visa criar um modelo de certificados para a autenticação de usuários na grade e a criação de mecanismos de proteção à execução da aplicação na Grade.

São serviços que permitem o gerenciamento automático de recursos de uma Grade.

Esse auto-gerenciamento deve permitir que os recursos se autoconfigurem para funcionar de forma otimizada quando ocorrerem mudanças na grade.

Por exemplo, quando um novo recurso é adicionado, os demais devem ser capazes de se reconfigurarem, tendo na visão geral do sistema o novo recurso incluído.

São serviços que possibilitam a obtenção de informações sobre recursos da Grade e aplicações executadas na Grade.

Outro requisito importante a ser implementado pelos serviços de informação diz respeito à capacidade desses serviços em disponibilizar e adquirir informações sobre os serviços disponíveis na Grade.

A DRMAA  refere-se a uma especificação para uma API (Application Programming Interface) para a submissão e controle de jobs para gerenciadores de recursos distribuídos.

Possui modelos para métodos para linguagens orientadas a objetos e para funções, no caso de uso para linguagens procedurais.

Tal especificação procura mapear todas as operações necessárias para submeter, manipular e finalizar um job num gerenciador de recursos distribuídos, seja esse uma Grade ou não.

A DRMAA, atualmente, mostra-se bem suportada e aceita tanto no meio acadêmico quanto corporativo, possuindo implementações para softwares como PBS, Condor  sendo majoritariamente implementações para linguagens C e Java.

O OGSA-DAI (Open Grid Service Architecture Data Access Integration)  é um middleware que permite o acesso por meio de Web Services a bases de dados relacionais ou XML.

De acordo com sua especificação, permite que diversas fontes de dados distribuídos possam ser vistos e acessados pela aplicação como se esses dados estivessem organizados de forma centralizada, oferecendo funcionalidades como consulta, atualização através da aplicação sem que esta precise ter conhecimento de como esses dados estão fisicamente dispostos.

Oferece também meios de transformação e transporte desses dados da fonte à aplicação e vice-versa.

A especificação do OGSA-DAI é produto da DAIS (Database Access and Integration Services) que é um grupo de trabalho do OGF voltado a estudos para prover acesso a dados para Grades.

Atualmente o OGSA-DAI possui implementações para Grades Globus que constituem-se em APIs para a construção de aplicações clientes para o mesmo na linguagem Java.

Neste Capítulo, são apresentadas algumas ferramentas voltadas para o uso da tecnologia de Grades em ambientes corportativos ou apresenta alguma contribuição que agrega à Grade as funcionalidades e características ou vai de acordo com a arquitetura proposta pelo OGF.

Para cada caso é apresentado uma visão geral da ferramenta ou pesquisa, seguida da análise técnica do que o trabalho analisado agregou, seguido das considerações a respeito do trabalho.

Quando possível, são apresentados casos de utilização dessas ferramentas em ambientes corporativos.

De acordo com Natarajan em  o acesso a dados de SBGDs em aplicações corporativas para Grades pode ser feito de duas maneiras, encapsulando os dados necessários para o processamento da aplicação em cada tarefa a ser distribuída na Grade ou  provendo meios que permitam que cada tarefa da aplicação possa adquirir esses dados através de uma conexão ao SGBD.

Nesta seção, são apresentados dois casos onde em cada um, utilizou-se respectivamente cada uma das abordagens.

O OJAL, como seu próprio nome diz, é uma camada de abstração para a geração e controle de tarefas para o MyGrid, que é o escalonador padrão do middleware de Grade OurGrid.

Foi criado com o intuito de permitir uma API intermediária entre a aplicação e a Grade OurGrid.

Através dessa API, a aplicação pode submeter tarefas à grade sem precisar conhecer o funcionamento da mesma.

Contribuição A principal contribuição do OJAL não está relacionada ao fator de abstração da API do escalonador do MyGrid, visto que já existem diversas iniciativas com esse intuito.

Mas sim à funcionalidade de criação automática de tarefas através de dados provenientes de dados de SGBDs.

O OJAL permite que, dado um conjunto de dados num formato semelhante a uma tabela de dados (representação muito comum de dados provenientes de consultas a SGBDs) sejam criadas tarefas onde em cada uma dessas é acoplada uma partição dos dados da tabela fornecida.

Esse particionamento pode ser feito de duas maneiras, aleatória ou por chaves de particionamento.

No particionamento aleatório, o usuário fornece à API do OJAL o número de tarefas que deseja que sejam criadas a partir da tabela de dados e o OJAL particiona esses dados, procurando igualar o número de entradas (linhas) de dados que cada partição deve possuir.

Então, é criada uma tarefa para cada partição de dados.

No particionamento por chaves, o usuário informa qual(is) a chave(s) de particionamento, ou seja, qual(is) o(s) campo(s) da tabela de dados que deve ser(em) usado(s) como guia no particionamento e o OJAL particiona os dados de modo que todos os dados que contenham o mesmo valor na chave de particionamento, fiquem numa mesma tarefa.

Após a criação das tarefas, o OJAL agrupa-as num job e permite que o usuário configure os parâmetros do job, como por exemplo comando de execução, parâmetros das tarefas, etc.

Criado o Job, o mesmo é submetido ao MyGrid e após a execução das tarefas, o OJAL traz os arquivos de saída automaticamente para o usuário.

Mostra o diagrama de seqüência do OJAL durante a criação e submissão de tarefas ao MyGrid.

Diagrama de seqüência de execução do OJAL.

O OJAL, apesar de ser de uso genérico, foi desenvolvido em virtude do projeto GerpavGrid.

O projeto GerpavGrid foi realizado pela prefeitura de Porto Alegre em parceria com a PUCRS, UFCG e HP tendo como objetivo portar para o OurGrid, uma aplicação já existente (Gerpav) que trabalha no intuito de orientar os investimentos em conservação e manutenção dos pavimentos das vias públicas da cidade.

Atualmente, o GerpavGrid ainda está em uso, instalado na Procempa (órgão da prefeitura de Porto Alegre).

Graças ao OJAL, os usuários do GerpavGrid podem fazer suas simulações sem ter nenhum conhecimento do funcionamento do OurGrid, utilizando a aplicação do mesmo modo que a utilizavam antes dessa ser paralelizada.

Em termos de desempenho, a versão paralela da aplicação obteve uma aceleração de 80 em comparação ao tempo de sua sua versão seqüêncial, passando de em torno de 121 minutos para, aproximadamente, 1,5 minutos de duração.

O OJAL mostrou-se cumpridor de sua função para a aplicação que o motivou, o Gerpav-Grid.

No entanto, apresenta algumas deficiências ocasionadas pelo acoplamento da solução ao Gerpav.

Por exemplo, o OJAL não possui um modelo claro de dados para particionamento, seus critérios de particionamento foram moldados tendo-se por base os requisitos do Gerpav, o que não permite definí-lo como genérico.

Ainda, acresenta-se que este não possui uma API que permite ao usuário, fazer operações de controle sobre o job criado pelo OJAL, sendo possível apenas fazer a submissão da tarefa.

Apesar disso, traz conceitos interessantes e comprovadamente eficiêntes como sua aplicação no GerpavGrid e pode servir adequadamente a aplicações com comportamento semelhante.

Para o caso do GerpavGrid, o OJAL foi adaptado para que as tarefas acessassem o SGBD diretamente.

Essa funcionalidade do OJAL não foi tratada aqui pois foi feita especificamente para o GerpavGrid, não sendo possível aplicá-la de forma genérica.

O Projeto SpitFire  é uma iniciativa da da Data Management Work Package e da European Data Grid Project desenvolvido pelo CERN e pela Universidade de Glasgow, Escócia.

Tem por objetivo permitir a integração de aplicações de Grade com SGBDS para modelo do OGSA.

Diferentement do OJAL, este propõe um modelo de acesso a dados onde a aplicação da Grade consulta o SGBD diretamente através de suas tarefas remotas.

Seu principal foco está em fornecer esses serviços para Grades Globus e gLite, ambas endossadas pelo CERN, mas não está restrito a essas.

A contribuição que o Projeto SpitFire tra pode ser pontuada por sua arquitetura, que implementa uma linguagem de consulta a SGBDs padrão semelhante a SQL e uma API de consulta a SGBDs que permite a interoperabilidade entre uma aplicação e diversos SGBDs.

O SpitFire propõe um middleware entre a aplicação da Grade e o SGBD.

Esta camada intermediária implementa um Web Service que oferece serviços de acesso a dados de SGBDS.

A comunicação entre cliente/SpitFire é realizada sobre o protocolo HTTP, o que garante uma maior compatibilidade e garantia de acesso sob firewalls da infraestrutura onde a aplicação está sendo executada e permite a interoperabilidade entre clientes implementados em diversas linguagens de programação.

Essa arquitetura inclui mecanismos de segurança de acesso, aproveitando-se das especificações já existentes na OGSA que são implementadas pelo Globus e gLite o que acrescenta confiabilidade e acoplamento a soluções já existentes.

A arquitetura do SpitFire opera da seguinte maneira, os clientes que pretendem acessar o SGDB pelo SpitFire, conectam-se nesse através da API fornecida e esta, por sua vez, faz a conexão com o Web Service do SpitFire.

Já na etapa de conexão é realizada a autenticação e verificação do usuário na camada de servidor do SpitFire.

Através dessa conexão, o cliente faz solicitações utilizando uma linguagem padrão que independe de qual implementação de SGDB pretende acessar.

Recebida a solicitação, o SpitFire verifica qual o SGBD que o cliente quer acessar e estabelece uma conexão via JDBC (Java Database Connectivity API) com o mesmo, traduzindo as consultas feitas pelo cliente e repassando-as ao SGBD alvo.

Realizadas as consultas, o SpitFire converte o resultado da consulta (retornado no formato ResultSet) para XML e retorna ao cliente.

Na etapa final, o API do cliente disponibiliza esse resultado num formato parecido com o ResultSet.

Arquitetura do Projeto SpitFire.

É importante considerar que a abordagem proposta pelo SpitFire pode ser muito difícil de obter sucesso na prática, pois pelo fato de Grades computacionais possuirem um domínio admistrativo amplo, composto por vários sites, cada um desses sites podem implementar diferentes políticas de acesso aos seus recursos computacionais, restringindo, por exemplo, o acesso à web nesses recursos, o que inviabilizaria o uso da abordagem proposta.

O que diferencia a inciativa do Projeto SpitFire em relação a outros frameworks são as instituições que o apoiam e o fato de ter como objetivo a integração com o OGSA, especialmente o OGSA-DAI.

Dessa maneira, estando o SpitFire integrado com middlewares como Globus ou gLite, esse middlewares podem incorporar requisitos que permitam que os seus recursos computacionais tenham acesso ao serviço do SpitFire, tornando-o uma forte alternativa para prover o acesso a SGBDs a Grade.

Em termos de casos e uso, o CERN e outros centros europeus estão utilizando o SpitFire em suas aplicações em conjunto com o middleware gLite e Globus.

No entanto, não estão disponíveis nenhum documento ou artigo, mostrando detalhes ou resultados dessa utilização.

Nesta seção serão apresentados dois frameworks que têm por objetivo a construção de aplicações comerciais para Grades computacionais.

O SGF  surgiu com objetivo de aprimorar o OJAL e suprir suas deficiências.

Além disso, tem como objetivo criar uma estrutura para facilitar o uso de Grade em ambientes corporativos, provendo desde ferramentas para a implementação de aplicações no modelo BoT até ferramentas para escalonamento e controle de recursos.

A modelagem do ingframework é baseada em uma arquitetura cliente/servidor.

A camada cliente possui ferramentas herdadas do OJAL para a geração automática de tarefas a partir de dados de banco de dados, para a submissão dessas tarefas à camada servidor e ferramentas para o controle e acompanhamento das tarefas submetidas, bem como a requisição e manipulação dos resultados dessas tarefas.

A camada servidor suporta a conexão de diversos usuários (clientes) e é responsável pela submissão dos jobs desses aos ambientes de Grades.

Conforme podese observar na arquitetura do SGF, o servidor pode trabalhar com diversos ambientes de grade simultaneamente através de plugins que podem ser acoplados a este.

Cada um desses ingplugins deve possuir todos os mecanismos de escalonamento e submissão para a grade que se propõe, ficando a cargo da camada de servidor do SGF utilizar-se desses plugins para acessar os recursos da Grade, para atender as requisições de seus usuários.

Arquitetura do SGF.

Esta arquitetura permite que uma organização possa utilizar diversos ambientes de grades computacionais e, de forma autônoma, com base em critérios como permissão de usuários, disponibilidade de recursos e/ou economia de recursos, possa escolher quais os recursos que deverão ser utilizados por cada job submetido pelos seus usuários ou, ainda, dividir a execução das tarefas de um job em diversas grades de forma transparente ao usuário.

Esta abordagem abstrai ao usuário tarefas como a prospecção e reserva de recursos, bem como o escalonamento de aplicações, ficando como responsabilidade do usuário, a modelagem e implementação, do problema que deseja resolver.

Outra vantagem desta abordagem é que um job implementado através do SGF, torna-se portável a diversos ambientes que suportem o modelo de aplicações BoT e, como este job interage somente com a camada servidor do SGF, este fica protegido de possíveis mudanças nas interfaces dos middlewares das Grades computacionais.

Embora as contribuições do SGF englobem desde a integração de aplicações com banco de dados com a Grade até a submissão dessas a estruturas de Grade, o foco do SGF está na definição de um framework que crie um modelo de implementação de aplicações BoT que facilite o porte ou a construção de aplicações corporativas para Grades para usuários sem experiência nesse ambiente.

Este modelo é desenvolvido de forma que o usuário possa criar uma aplicação no modelo BoT independente da Grade em que essa será submetida.

Tal modelo apresenta uma API que permite que o usuário crie tarefas de forma manual ou através de geradores de tarefas.

Tais geradores são implementados através de Interfaces o que permite que novos geradores de tarefas sejam criados de acordo com a necessidade do usuário, funcionalidade essa não presente no OJAL.

Essa API permite também que o usuário controle e acompanhe as tarefas em execução, independentemente de qual ambiente essa está sendo executada.

Além disso, possui uma estrutura de representação de dados de banco de dados com uma API muito semelhante à da classe ResultSet do pacote java sql da linguagem Java muito utilizada por desenvolvedores de aplicações "convencionais".

Além do modelo para implementação de jobs para controle e geração de tarefas, o SGF também possui um framework para a construção da parte remota da tarefa, ou seja, do executável de cada tarefa.

Nesse framework é possível que o usuário manipule os dados de BD diretamente como objetos Java, além de gerar os resultados do processamento da tarefa no mesmo formato.

Esta abordagem possibilita que o framework possa ser facilmente incluído em aplicações convencionais já existentes, já que utiliza os conceitos de orientação a objetos presentes no mundo corporativo.

A arquitetura apresentada pelo SGF, principalmente o seu modelo de aplicação que utiliza uma abordagem orientada a objetos, mostra-se muito pertinente ao cenário corporativo.

No entanto, cabe salientar que este framework ainda está em fase de desenvolvimento, possuindo plugins somente para grades OurGrid e para computadores multi-cores o que não dá certeza da interoperabilidade da aplicação desenvolvida pelo mesmo com diversas grades, conforme anunciado pelo framework.

Além disso, não há testes exaustivos de aplicações de produção utilizando o framework, o que não garante a eficácia do mesmo nos requisitos que pretende atender.

Outro fator relevante é que o SGF suporta somente aplicações BoT que nem sempre dizem respeito à realidade corporativa, o que restringe sua utilização.

O SGF ainda não possui nenhum caso de uso significativo para ser apresentado.

O Aneka  é um framework open source desenvolvido pelo Departamento de Ciência da Computação e Engenharia de Software da Universidade de Melbourne, Austrália.

Trata-se de um aprimoramento do framework Alchemi  desenvolvido anteriormente pela mesma equipe.

O Alchemi implementa toda uma estrutura de Grade software para aproveitamento de recursos ociosos de estações de trabalho de uma instituição.

Essa estrutura vai desde a implementação de um middleware de Grade até a disponibilização de um modelo de desenvolvimento de aplicações que permite o uso da Grade de forma transparente, tanto para o usuário, tanto para a aplicação.

O Alchemi suporta dois modelos de programação, o tradicional modelo de BoT e um modelo criado para o framework orientado a objetos e baseado em threads.

Por ter foco no público corporativo, é desenvolvido sobre a plataforma Microsoft NET, a qual possui um ótimo acoplamento ao sistema operacional Windows, o qual, de acordo com os criadores do Alchemi, está presente em 90% dos computadores em empresas.

Seu modelo de implantação é conhecido como desktop grid computing que, de acordo com Chu "são sistemas que aproveitam ciclos de processamento não utilizados em estações de trabalho conectados através de uma rede local na internet, com o propósito de acelerar a performance de uma aplicação".

O Aneka trata-se da evolução desse framework, incorporando ao mesmo serviços de autenticação e segurança, suporte a modelos de aplicações com troca de mensagens e workflow e transformando a sua arquitetura em SOA.

Além disso, tem suas interfaces de serviços baseadas em Web Services e engloba a possibilidade de utilização de persistência de dados na Grade, tanto por meio de sistemas de arquivos ou banco de dados.

Conforme pode ser visto, a arquitetura do Aneka é baseada em três componentes, cliente (máquina do usuário), gerenciador de recuros (manager) que é responsável por agregar e disponibilizar os recursos computacionais representados por máquinas de desktop de uso exclusivo ou não da Grade que representam o terceiro componente dessa arquitetura.

Paralelamente ao manager, podem estar servidores para autenticação ou persistência de dados por exemplo.

No gerenciador de recursos, há um container de serviços que isola os serviços disponibilizados pelo Aneka de modo que um serviço não interfere no funcionamento dos demais, o que permite que novos serviços sejam introduzidos sem afetar a funcionalidade e desempenho dos demais e que em caso de falha de um desses serviços, os demais continuarão operando.

Embora, o Aneka apresente uma gama de funcionalidades interessantes e úteis para a implementação de uma Grade corporativa, resaltar-se-á aqui o que entende-se como a maior contribuição do framework tanto em originalidade, quanto na capacidade de tornar a programação de aplicações para Grades mais fácil e similar à programação "convecional", o modelo de construção de aplicações baseado em threads disponibilizado pelo Aneka.

Arquitetura do framework Aneka Por ser baseado no framework NET o Aneka utiliza-se da tecnologia NET Romoting que permite que o manager envie para o os executores apenas os trechos de código (métodos) que serão utilizados, de forma mais rápida e simples que a utilização de Web Services ou envio de arquivos binários.

Aproveitando-se dessa funcionalidade, Aneka cria um modelo de programação baseado em threads onde o usuário define um conjunto de execuções independentes entre si e, em tempo de execução, o manager distribui, de forma transparente, via NET Remoting, cada um desses blocos nos recursos disponíveis na Grade, disponibilizando em tempo real as dependências de dados que cada bloco demanda aos executores.

Outra contribuição relevante do Aneka e Alchemi é o fato desses serem desenvolvidos sobre a plataforma Microsoft, contrariamente da maioria de outros middlewares ou frameworks para Grades.

Como o Windows está presente na maioria das estações de trabalho das empresas, esse pode ser um fator chave para a adoção do Aneka como plataforma de Grade em meios corporativos.

O Aneka mostrou-se um framework promissor e inovador apresentando-se voltado ao público corporativo e adaptando o paradigma de desenvolvimento baseado em threads para o ambiente de Grades.

Mostrou-se altamente extensível e modular.

A questão da interoperabilidade não pode ser comprovada e da utilização da plataforma em uma Grade global, que agrega mais de uma instituição, nõ pode ser comprovada.

Embora o Aneka disponha de Web Services para prover a interoperabilidade entre sistemas e linguagens e também para permitir a comunicação com outros middlewares de Grade, foram apresentados experimentos que utilizam somente uma instância do manager do Aneka que gerencia somente recursos locais de uma instituição.

Quanto à segurança, garantias de QoS e persistência de dados, aspectos anunciados como presentes na arquitetura, ainda não há nenhum estudo mostrando o funcionamento das mesmas, sendo que essas ainda estão em fase de implantação e somente estarão disponíveis em versões futuras.

Como o Aneka ainda está em fase de adoção e é um aprimoramento do framework Alchemi, entende-se que os casos de uso do Alchemi são compatíveis com o Aneka, portanto são citados aqui.

O Alchemi possui diversos casos de uso relatados em seu web site, tanto em meios acadêmicos quanto corporativos.

Dentre esses usos, destacam-se a experiência da Tier Technologies, Estados Unidos que triplicou sua performance em atividades de processamento de imagens para reconhecimento de caracteres utilzando o Alchemi e da Satyam Computers Ltd da Índia, que utiliza a plataforma para o desenvolvimento de aplicações comerciais para seus clientes, comprovando a eficiência do framework em ambientes corporativos.

Nesta seção é apresentado um caso de utilização de Grades como serviços, onde ocorre a mercantilização de recursos.

Em cenários como esse, uma empresa fornece uma estrutura computacional disponível para utilização através de serviços os quais são contabilizados e cobrados posteriormente de acordo com o uso feito por seus clientes.

Grades que seguem essa abordagem são conhecidas como Grades Orientendas a Mercado.

Esse caso foi escolhido pois nele são explorados cenários onde são necessários controle de SLAs e QoS, privacidade de dados entre outros aspectos  bem como definidos pelo OGF.

O GEMSS Grid Project  é um projeto que desenvolveu uma Grade orientada à economia baseada em serviços para prover serviços de simulação médica para diversos hospitais espalhados na União Européia.

Esses serviços são contratados pelos seus usuários como base em um contrato de SLA que estabelece um preço pela utilização dos serviços, métricas de desempenho de QoS e penalidades em caso de descumprimento do contrato.

A arquitetura dessa Grade e, principalmente, a forma como os serviços são oferecidos, de maneira que os contratos entre prestador e consumidor dos serviços sejam respeitados, trazem lições sobre como implementar uma Grade de serviço.

A definição de todo o projeto e sua arquitetura seria demasiada longa e não caberia ao escopo deste trabalho.

Portanto, aqui serão expostas as principais contribuições que podem ser obtidas através da experiência do projeto.

A principal contribuição do GEMSS está na definição de um modelo para monetização de serviços da Grade a terceiros.

Para isso, o GEMSS criou um modelo de execução baseado em três passos para permitir que a Grade atue como uma prestadora de serviço.

De modo simplificado, esses passos podem ser descritos da seguinte maneira, primeiramente, quando um usuário faz requisição de um serviço, o GEMSS analisa qual o modelo de negócio e os contratos pertencentes ao usuário e concomitantemente realiza a verificação e autenticação desse usuário.

De acordo com essas informações, ocorre uma negociação entre o provedor de recursos e o provedor de serviços para que seja realiza a alocação dos recursos que melhor atendem ao QoS necessário para que o SLA expresso no contrato do serviço seja respeitado.

Feita essa alocação, parte-se para a última fase, que é a execução dos serviços propriamente dita.

Terminada a execução do serviço, são analisados, através do resultado de uma monitoração feita durante a execução, se os parâmetros de QoS foram respeitados.

Em caso positivo, é efetuada a cobrança do usuário pelos serviços prestados, em caso negativo, verifica-se quais as punições a serem aplicadas.

Em cada execução de um serviço, analisa-se o quão eficiente foi a negociação entre provedor de serviços e provedor de recursos para que os algoritmos de escalonamento possam se adaptar automaticamente a fim de obter as melhores heurísticas de escalonamento.

Para que todo esse processo de execução possa se realizar, o GEMSS atribui para cada recurso, um documento que indica os níveis de serviço que este recurso suporta.

Isso inclui fatores de desempenho e confiabilidade do recurso.

Com base nesses documentos é que o provedor de serviços faz a negociação, já que para esse é que foi repassado o documento de SLA que o usário contratou para tal serviço.

No que diz respeito a esse documento, foi criado um padrão para especificar SLAs para Grades, denominado WSLA.

Tal padrão, indica parâmetros como a janela de tempo que o serviço deve ser executado e o preço que se pretende pagar.

No que diz respeito ao isolamento dos dados de usuários e à privacidade dos mesmos, o GEMSS implementa uma arquitetura baseada em containers, onde cada serviço executa isolado do outro.

Além disso, possui um módulo de autenticação de usuários.

Para a garantia de privacidade dos dados que estão nos nodos executores, não foi fornecida nenhuma informação de como esse aspecto é tratado.

O GEMSS é utilizado por diversos hospitais da União Européia e pelo CERN.

Entre seus casos de uso estão simulações da área médica como de emissão de fótons em tomografia computadorizada (SPECT) e reconstrução de imagens médicas e para processamento de dados enviados.

Exemplo de Documento WSLA para contrato de serviços no GEMSS.

A experiência do GEMSS é muito interessante uma vez que mostra a viabilidade da utilização de recursos em Grade para prover serviços respeitando determinados níveis de QoS.

Além disso, abre uma oportunidade de negócio, possibilitando que empresas aproveitem seus recursos computacionais colocando-os em Grades e, então, comercializando o seu uso.

No projeto cita-se também o interesse em permitir que os recursos da Grade possam ser intercambiados por diversas instituições.

Dessa maneira, permite-se por exemplo, que o pagamento de um serviço possa ser feito pelo cedimento de recursos computacionais ao invés de dinheiro.

Assim, pode-se criar um meio justo de troca de recursos, permitindo que além de aumentar o poder computacional de uma instituição, agregando recursos de outras, ainda pode-se gerar lucro disponibilizando os recursos locais a terceiros.

Nesta seção são apresentados middlewares para Grades corporativas que foram desenvolvidos diretamente pelo meio corporativo (ao contrário dos demais casos apresentados, que eram desenvolvidos como fruto de pesquisas acadêmicas).

Essa análise se faz interessante para descobrir qual a visão que empresas renomadas, produtoras de tecnologia têm a respeito de Grades corporativas.

Também é interessante para fazer um julgamento próprio de algumas iniciativas como sendo ou não de fato relacionadas com a tecnologia de Grades computacionais.

A esse respeito, desde já, deixa-se claro que os produtos aqui apresentados não são academicamente aceitos como sendo produtos de Grades computacionais, mas sim produtos para gerenciamento de clusters de computadores.

Um exemplo que vem gerando muita confusão devido à repercussão que o produto obteve, diz respeito ao uso do termo Grid Computing pela Oracle em seu SGBD Oracle.

O que o Oracle faz é a utilização de diversos servidores, conectados por uma rede local e segura, para fazer a instalação e implantação de seu sistema de SGBD.

Este cenário poderia ser classificado como um cluster dedicado e de domínio centralizado, não como uma Grade computacional conforme descrito por Foster  em.

Outras dois produtos apresentados pela indústria são o Sun Grid Engine (SGE)  e IBM Grid and Grow, criados, respectivamente, pela Sun e IBM.

Ambos produtos são muito semelhantes e, conforme já dito anteriormente, suas características se aproximam mais a de um gerenciador de cluster do que a de middleware de Grade.

Suas arquiteturas são baseadas em um gerenciador de recursos que coordena as máquinas da rede que estão configuradas para servirem como nodos executores e implementam um serviço para receber solicitações de execução de usuários.

Conforme pode-se observar,o fluxo de execução do SGE, que é semelhante ao fluxo do Grid and Grow, essas solicitações, quando recebidas, são armazenadas numa fila de requisição.

De acordo com a prioridade de cada execução e com a disponibilidade de recursos, o gerenciador realiza o escalonamento dessas execuções.

Em caso de sucesso na execução, os dados de saída são retornados ao usuário, em caso negativo, é feita a ressubmissão da execução.

Fluxo de processamento de execução do SGE.

A respeito do tipo de aplicação que os produtos suportam, de acordo com cada fabricante, ambos suportam aplicações de batch como PS e BoT por exemplo, e aplicações de troca de mensagens, através da ferramenta MPI (Message Passing Interface.

Quanto à licensa de uso, o Grid and Grow é um software fechado e deve ser pago para utilização.

O SGE, possui uma versão em código aberto e uma versão com algumas funcionalidades adicionais e que incluí suporte que deve ser paga.

Embora os produtos analisados mostraram-se realmente como exemplos do mau uso do termo Grid Computing, algumas características presentes nos mesmos devem ser levadas em conta para futuras implementações de Grades.

Entre essas contribuições destacam-se o mecanismo de checkpoint de jobs implementado por ambos que permite que, em caso de falha parcial de um job, possa-se reaproveitar os resultados obtidos até antes da falha e reiniciar a sua execução a partir desse ponto e a implemntação da API DRMAA feita pelo SGE que permite que um modelo de job padrão possa interoperar entre diversos gerenciadores de recursos distribuídos.

Em termos de casos de uso, os exemplos de utilização fornecidos por SUN e IBM, por serem casos inseridos dentro de empresas, não mostram nenhum dado, tanto de desempenho quanto de como e para que fim os middlewares são utilizados.

Com a pesquisa realizada, pôde-se observar que a utilização de Grades computacionais em ambientes corporativos já é uma realidade.

Observa-se que já existem um número significativo de casos de uso e de inciativas para a criação de ferramentas com o objetivo de aumentar o potencial dessa utilização.

Observou-se também, que graças a OGF, existe uma tendência que leva à padronização do acesso a serviços de Grades, bem como há um esforço para criar um padrão de requisitos que devem ser levados em conta ao se desenvolver um middleware de Grade.

A arquitetura OGSA é endossada tanto pelo meio corporativo quanto pelo meio acadêmico e, tem participantes que são referência em ambos os meios, fatos que são relevantes e que pesam muito na adoção de uma tendência.

Embora nem todas as iniciativas de Grades corporativas estão levando em conta os padrões em desenvolvimento pelo OGF, percebe-se que pelo menos em quase todas as iniciativas citou-se tal padrão e pretende-se adequar a ferramenta para que torne-se compatível com o mesmo.

Em termos de participação e contribuição, salienta-se o papel que a União Européia, principalmente através do CERN, vem atuando em relação à tecnologia de Grade, mostrando-se realmente disposta a adequar as ferramentas de Grade já existentes para que essas possam servir como infraestrutura para o processamento de seus dados e como meio de colaboração, seja voluntária ou contabilizada, entre os seus centros de pesquisa.

Como muitos dos requisitos das aplicações desses centros são iguais à aplicações comerciais, pode-se esperar bons resultados advindos dessa adoção.

Analisando as iniciativas de Grades moldadas já para servirem a ambientes corporativos, destaca-se o framework Aneka, que além de prover a estrutura para a criação de uma Grade, aproveitando os recursos da empresa, apresenta um modelo de desenvolvimento que aproxima um desenvolvedor comum ao paradigma de aplicações para Grade.

Como ponto negativo, cita-se o aproveitamento da evidência que o termo Grid Computing vem tendo e do interesse gerado pela tecnologia, para uso em soluções que não se caracterizam como soluções para computação em Grade.

Para concluir, fazendo-se uma síntese relacionando as características desejáveis para uma Grade corporativa apresentados e os serviços expressos pelo OSGSA com as ferramentas estudadas, observa-se que os requisitos de restrição de domínio administrativo, controle de usuários, controle de recursos, garantias de serviço e interoperabilidade e ferramentas para desenvolvimento estão bem suportados com as ferramentas existentes.

Os requisitos de segurança de dados, garantias de serviço, contabilização de recursos e suporte a acesso a bases de dados, apresentam uma boa cobertura, embora necessitem de alguns melhoramentos nos middlewares existentes para facilitar a implementação desses numa Grade global, já que para esses requistitos todas as ferramentas propostas trabalhavam somente com Grades com recursos locais.

Nos requisitos que demandam um maior desafio, destaca-se o suporte para aplicações online e o suporte para aplicações multicamadas.

Tais características, além de serem relativamente novas na área de engenharia de software, demandam uma interconexão muito grande entre a aplicação e os recursos utilizados por essa, o que dificulta sua implantação em Grades, já que essas que foram projetadas justamente para possibilitar uma fraca interconexão entre seus recursos.

