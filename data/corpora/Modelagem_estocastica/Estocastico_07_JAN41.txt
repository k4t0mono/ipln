Este trabalho apresenta as vantagens da extensão da álgebra Tensorial Clássica (CTA, Classical Tensor Algebra), também conhecida como álgebra de Kronecker, a qual permite a definição de funções, ie, dependência funcional entre seus operadores.

Tal álgebra Tensorial estendida tem sido chamada de álgebra Tensorial Generalizada (GTA, Generalized Tensor Algebra).

Os formalismos de Redes de Autômatos Estocásticos (SAN, Stochastic Automata Networks) e Redes de Petri Estocásticas Generalizadas Superpostas (SGSPN, Superposed Generalized Stochastic Petri Nets) são representações de Kronecker.

Demonstra-se que o formalismo de SAN, o qual usa GTA, possui o mesmo escopo de aplicação do formalismo de SGSPN, o qual usa CTA.

Também prova-se que qualquer modelo em SAN com funções possui ao menos um modelo equivalente sem funções.

Na realidade, o uso de funções, e conseqüentemente o uso da GTA, não é realmente uma -necessidade-, visto que há uma equivalência de representação dos formalismos.

Entretanto, em alguns casos, o uso de funções apresenta, em relação ao custo computacional, algumas -vantagens- incontestáveis.

Apresenta-se alguns exemplos de modelagem a fim de sustentar numericamente esta afirmação.

Na segunda metade do século XIX, o matemático alemão Leopold Kronecker propôs uma nova operação baseada em tensores, uma generalização de matrizes onde mais do que duas dimensões poderiam ser representadas.

Esta extensão da álgebra Linear foi representada por um operador chamado de produto de Kronecker.

Desde então, muitos pesquisadores, principalmente físicos, têm usado o produto de Kronecker para representar operações sobre estruturas multidimensionais.

Muito antes do começo da ciência da computação, a álgebra Linear é provavelmente a mais importante aplicação das técnicas numéricas.

Entretanto, somente no fim dos anos 70, cientistas da computação prestaram atenção em extensões de Kronecker para álgebra Tensorial.

Trabalhos como de Bellman, Brewer, Amoia, De Micheli e Santomauro, e Davio foram alguns dos primeiros estudos a respeito da operação do produto de Kronecker aplicada à ciência da computação.

Estes autores e muitos outros trabalhos subseqüentes não concordaram realmente sobre o nome da operação em questão e os termos produto direto ou produto tensorial são usados para descrever exatamente a mesma operação.

Em muitos destes trabalhos, surgiram as primeiras referências para uma nova operação feita sobre tensores, soma tensorial.

Logicamente, este operador também é conhecido como soma de Kronecker ou soma direta.

As operações do produto tensorial e soma tensorial, juntamente com suas propriedades compõem a álgebra Tensorial Clássica (CTA, Classical Tensor Algebra).

Neste trabalho, prefere-se usar o termo produto tensorial e soma tensorial, visto que estes explicitam o conceito de tensor (multidimensional).

Nos anos 80, Plateau propôs o primeiro formalismo de modelagem que utiliza álgebra Tensorial como representação redes de autômatos estocásticos (SAN, Stochastic Automata Networks).

Donatelli, nos anos 90, propôs um outro formalismo de modelagem usando a álgebra Tensorial redes de Petri Estocásticas Generalizadas Superpostas (SGSPN, Superposed Generalized Stochastic Petri Nets).

Ambos os formalismos foram estabelecidos em aplicações de Kronecker baseados em representações de modelos.

Comparando estas representações de Kronecker com o método clássico (uma enorme matriz esparsa), é óbvio que a memória necessária é reduzida drasticamente.

Esta economia de memória é muito importante para reduzir o impacto do problema conhecido como explosão do espaço de estados.

Infelizmente, uma redução similar ao tempo gasto com a avaliação de soluções ainda não foi alcançada.

Recentemente, foram desenvolvidos trabalhos sobre técnicas numéricas para reduzir o custo computacional no cálculo de soluções exatas usando principalmente métodos iterativos.

Tais trabalhos alcançaram alguns ganhos importantes, porém a redução com o tempo gasto com a avaliação de soluções não é tão grande quanto a redução alcançada na necessidade de memória.

Destaca-se como grande responsável por tais ganhos a evolução da álgebra Tensorial, álgebra Tensorial Generalizada (GTA, Generalized Tensor Algebra), a qual é uma extensão da CTA.

Utilizando-se da GTA, é possível obter-se representações mais compactas e gerenciáveis.

Até o momento, diferentes métodos estruturados propuseram um maior ganho efetivo de memória e custo computacional.

O propósito principal deste trabalho é direcionar uma maior atenção para as representações de Kronecker, enfatizando algumas novas características provenientes da álgebra Tensorial Generalizada.

A atenção deste trabalho está direcionada diretamente na ótica de quem resolve os modelos.

Tem-se como objetivo provar que os operadores da GTA podem ser vistos como uma forma compacta de descrição de fórmulas complexas da CTA.

Por conseguinte, modelos descritos com representações de Kronecker podem geralmente ser descritos por operadores da GTA em uma forma mais compacta (e eficiente).

Este trabalho demonstra que o formalismo de SAN, o qual usa a GTA, possui o mesmo escopo de aplicação do formalismo de SGSPN, o qual utiliza a CTA.

Prova-se também que qualquer modelo descrito pelo formalismo de SAN com o uso de funções possui pelo menos um modelo equivalente descrito sem o uso das mesmas.

No próximo capítulo, apresenta-se de maneira informal o formalismo de Cadeias de Markov.

É apresentado a definição informal e formal do formalismo de SAN no Capítulo 3.

Para um melhor entendimento do formalismo de SGSPN, descreve-se previamente, no Capítulo 4, de maneira informal os formalismos de Redes de Petri, Redes de Petri Estocásticas e Redes de Petri Estocásticas Generalizadas.

Sendo assim, no Capítulo 5, apresenta-se a definição informal e formal do formalismo de SGSPN.

Demonstra-se, no Capítulo 6, a equivalência de representação entre os modelos em SAN que utilizam funções e os modelos em SAN que não utilizam funções, bem como a equivalência de representação entre os formalismos de SAN e SGSPN.

No Capítulo 7, demonstra-se o custo computacional utilizado nos modelos descritos por ambos os formalismos.

Além disso, apresenta-se alguns exemplos de modelagem a fim de se ilustrar uma comparação entre os custos computacionais dos mesmos.

Por fim, no Capítulo 8, analisa-se os resultados encontrados para os modelos propostos.

Neste capítulo, apresenta-se uma definição informal do formalismo de Cadeias de Markov (MC, Markov Chains).

Em seguida, apresenta-se a definição formal de MC à escala de tempo contínua (CTMC, Continuous Time Markov Chains) englobando os conceitos definidos informalmente.

Além disso, demonstra-se as regras necessárias para a obtenção do gerador infinitesimal de um modelo descrito pelo formalismo de MC, bem como um exemplo completo de obtenção do mesmo.

O formalismo de Cadeias de Markov é um formalismo matemático para modelagem de sistemas.

Através do uso de formalismo de MC, é possível descrever o funcionamento de um sistema utilizando um conjunto de estados e transições entre esses estados.

As transições entre os estados são modeladas por um processo estocástico de tempo contínuo ou discreto definidos por distribuições exponenciais ou geométricas respectivamente.

Um modelo descrito pelo formalismo de MC pode ser interpretado como uma máquina de estados, onde os nodos da mesma representam os estados e os arcos representam as transições entre os estados do modelo em MC.

No decorrer deste trabalho, adota-se a seguinte notação para a definição dos modelos em MC.

Seja, x x-ésimo estado de um modelo, onde 0 é o primeiro estado do modelo.

A seguir, apresenta-se a definição das escalas de tempo utilizadas pelo formalismo de MC.

Um modelo descrito pelo formalismo de MC pode ser classificado de acordo com a sua escala de tempom, Cadeias de Markov à escala de Tempo Contínua (CTMC, Continuous Time Markov Chains).

Cadeias de Markov à escala de Tempo Discreta (DTMC, Discrete Time Markov Chains).

Os modelos em CTMC diferem dos modelos em DTMC basicamente por suas transições entre os estados poderem ocorrer em qualquer instante de tempo e não em pontos discretos de tempo.

Segundo Stewart, apresenta-se a seguir as propriedades para a construção de um modelo descrito pelo formalismo de MC.

Os estados do modelo são discretos e enumeráveis.

A escala de tempo para a transição entre os estados do modelo pode ser de forma contínua (CTMC) ou discreta (DTMC).

A transição entre os estados do modelo depende exclusivamente do estado atual do modelo, sem importar quais foram os estados prévios ou serão os estados futuros do modelo.

A taxa (CTMC) ou probabilidade (DTMC) de transição de estados do modelo dá-se obedecendo a uma lei exponencial ou geométrica respectivamente.

A representação gráfica de um modelo em MC é feita por autômatos, onde é associado para cada estado do autômato um estado do modelo e para cada transição uma taxa (CTMC) ou uma probabilidade (DTMC).

Um modelo em MC é representado, matematicamente, por uma matriz de transição de estados.

A probabilidade de cada estado em regime estacionário (solução de um modelo em MC) é a solução do sistema da equação linear, onde Q é a matriz de transição de estados e p (vetor de probabilidade) é o autovetor correspondente ao autovalor unitário da matriz de transição.

É importante ressaltar que a soma dos elementos do vetor de probabilidade p deve ser igual a 1 Para os modelos em CTMC, a matriz de transição de estados Q é denominada de gerador infinitesimal, onde cada elemento não diagonal da linha i e coluna j da matriz representa a taxa de transição do estado i para o estado j do modelo.

Os elementos diagonais de Q representam o ajuste necessário para que a soma dos elementos de cada linha seja igual a zero.

Para os modelos em DTMC, a matriz de transição de estados P é denominada de matriz estocástica, onde cada elemento não diagonal representa a probabilidade de transição entre os estados do modelo.

Os elementos diagonais de P representam o ajuste necessário para que a soma dos elementos de cada linha seja igual a um.

O foco principal deste trabalho é o formalismo de CTMC.

Por conseguinte, as explicações e exemplos apresentados no decorrer deste trabalho fazem menção para modelos descritos à escala de tempo contínua (taxas de ocorrência) e não à escala de tempo discreta (probabilidades de ocorrência).

Apresenta um modelo em CTMC com quatro estados e seis transições.

Cada transição entre um estado e outro possui associada uma taxa de ocorrência à mesma.

Modelo em CTMC com quatro estados e seis transições A seguir, apresenta-se a definição formal do formalismo de CTMC.

Neste trabalho, considera-se a formalização de um modelo em CTMC compreendendo um conjunto finito de estados e transições.

Definição 1 T é a função de transição a qual associa uma taxa de ocorrência de uma transição de um estado para outro.

A função T possui domínio em M×M e contra-domínio nos R+, i e, a função é definida como TM×M para R+.

Seja T(x,y) taxa de ocorrência da transição do estado x para o estado y.

Note que nem toda a transição de um estado x para um estado y possui uma taxa não nula determinada pela função T(x,y).

Seja succ(x) conjunto não vazio dos estados y, tais que possua uma transição do estado x para algum estado y, O conjunto de estados sucessores de um determinado estado x é importante para a definição do método de obtenção do gerador infinitesimal, o qual será apresentado na próxima seção.

Um modelo em CTMC é representado, matematicamente, por uma matriz de transição de estados, a qual também é denominada de gerador infinitesimal.

Logo, a matriz Q é conhecida tanto como matriz de transição de estados como gerador infinitesimal.

Neste trabalho, adota-se o termo gerador infinitesimal para descrever matematicamente um modelo descrito pelo formalismo de CTMC.

Seja Q(x,y) elemento da linha expressa pelo estado x e coluna expressa pelo estado y do gerador infinitesimal Q.

A Definição 21 corresponde aos elementos não diagonais do gerador infinitesimal, os quais possuem a taxa de ocorrência da transição do estado x para o estado y.

Os elementos diagonais (ajuste diagonal das taxas de ocorrência das transições entre os estados) do gerador infinitesimal estão descritos na Definição 22.

A Definição 23 define os elementos nulos do gerador infinitesimal.

Demonstra-se nesta seção um exemplo completo de obtenção do gerador infinitesimal de um modelo descrito pelo formalismo de CTMC.

Apresenta um modelo descrito pelo formalismo de CTMC, o qual possui oito estados.

Este modelo descreve um buffer de requisições de impressão.

Este buffer faz o gerenciamento de duas impressoras laser e deskjet.

Este buffer recebe, em média, uma requisição a cada 5 minutos (12 requisições por hora).

A impressora laser leve em média 2 segundos (1800 folhas por hora) para imprimir uma folha, enquanto a impressora deskjet imprime uma folha em 5 segundos (720 folhas por hora).

Para cada hora trabalhada pela impressora deskjet, a impressora laser trabalha por 4 horas.

Modelo em CTMC com oito estados.

Os estados 0, 1, 2 e 3 representam o número de requisições no buffer (0, 1, 2 e 3 requisições respectivamente) que estão sendo atendidas pela impressora laser.

Em contra partida, os estados 4, 5, 6 e 7 representam o número de requisições no buffer (0, 1, 2 e 3 requisições respectivamente) que estão sendo atendidas pela impressora deskjet.

É possível construir o gerador infinitesimal do modelo em CTMC, a partir da identificação das taxas de ocorrência das transições de um estado para outro.

Primeiramente, identifica-se o número de estados|M|do modelo para se construir o gerador infinitesimal do mesmo.

A partir desta informação, o gerador infinitesimal será uma matriz de ordem|M|×|M|.

Através da Definição 21, preenche-se os elementos não diagonais do gerador infinitesimal, utilizando as taxas de ocorrência da transição de um estado para outro.

Sendo assim, tem o gerador infinitesimal com os elementos não diagonais preenchidos.

Posteriormente, preenche-se os elementos diagonais (ajuste diagonal das taxas de ocorrência das transições entre os estados) do gerador infinitesimal, utilizando a Definição 22.

Como a soma de cada linha do gerador infinitesimal deve ser igual a zero, o mesmo fica da seguinte maneira após o ajuste da diagonal.

Por último, aplicando a Definição 23, preenche-se os elementos nulos do gerador infinitesimal.

Logo, tem-se o gerador infinitesimal do modelo.

A partir do gerador infinitesimal completo de um modelo em CTMC, é possível obter-se a probabilidade de cada estado em regime estacionário (vetor de probabilidade p) através da resolução da equação.

Sendo assim, por exemplo, somando a probabilidade p3 (buffer encontra-se cheio e está sendo atendido pela impressora laser) com a probabilidade p7 (buffer encontra-se cheio e está sendo atendido pela impressora deskjet), tem-se a probabilidade do buffer encontrar-se cheio independentemente de qual impressora está atendendo-o.

No decorrer deste capítulo, é apresentada uma definição informal do formalismo de Redes de Autômatos Estocásticos (SAN, Stochastic Automata Network) através da descrição das primitivas utilizadas no formalismo.

Posteriormente, apresenta-se a definição formal de SAN à escala de tempo contínua englobando os conceitos definidos informalmente na Seção 31.

Para isso, mostra-se os termos necessários para a definição de um modelo em SAN.

Além disso, apresenta-se as restrições para a definição de uma SAN bem definida e as regras necessárias para a obtenção do Descritor Markoviano equivalente a mesma.

O formalismo de Redes de Autômatos Estocásticos foi proposto por Plateau.

A idéia principal do formalismo de SAN é modelar um sistema em vários subsistemas, ou seja, um sistema composto de módulos -quase independentes-.

A expressão -quase independente- denota a possibilidade de ocorrer interação entre cada subsistema.

SAN é um formalismo para modelagem de sistemas com grande espaço de estados.

Essa modularização definida pelo formalismo de SAN permite o armazenamento e a solução eficiente de sistemas complexos por evitar os prejuízos da explosão do espaço de estados que ocorre no formalismo de Cadeias de Markov, o qual SAN tem equivalência de representação.

Cada subsistema é representado por um autômato estocástico e por transições entre os estados deste autômato.

As transições entre os estados de cada autômato são modeladas por um processo estocástico de tempo contínuo ou discreto definidos por distribuições exponenciais ou geométricas respectivamente.

É interessante ressaltar que toda SAN pode ser representada por um único autômato estocástico que contém todos os estados possíveis do sistema.

Esse único autômato corresponde à cadeia de Markov equivalente ao modelo em SAN.

Note que a modelagem em SAN apresentada nesse capítulo se aplica tanto à escala de tempo contínua como à escala de tempo discreta.

Entretanto, as explicações e exemplos apresentados ao longo deste trabalho fazem referência à escala de tempo contínua (taxas de ocorrência) e não à escala de tempo discreta (probabilidades de ocorrência), visto que o foco principal deste tra balho é o formalismo de SAN à escala de tempo contínua.

A diferenciação entre as duas escalas de tempo dá-se apenas na obtenção do Descritor Markoviano de cada modelo.

Enquanto um modelo em SAN à escala de tempo contínua gera uma cadeia de Markov à escala de tempo contínua (CTMC, Continuous Time Markov Chain), um modelo em SAN descrito em escala de tempo discreta gera uma cadeia de Markov à escala de tempo discreta (DTMC, Discrete Time Markov Chain).

No decorrer deste trabalho, adota-se a seguinte notação para a definição dos modelos em SAN, sejam A i-ésimo autômato de um modelo em SAN, onde A(1) é o primeiro autômato.

X x-ésimo estado do autômatoA, onde 0(1) é o primeiro estado do autômato A(1), e identificador de um evento (local ou sincronizante), e(p) identificador de um evento e com probabilidade constante p, e identificador de um evento e com probabilidade funcional definida pela função f.

As probabilidades (pi ou f) são utilizadas quando um evento possui duas ou mais alternativas de transição.

Dessa maneira, probabilidades são utilizadas para indicar em que proporções o evento seguirá por uma transição ou por outra.

A probabilidade pode ser omitida caso esta seja igual a 1 (100%).

Outro ponto importante é que a soma das probabilidades de um evento deve ser sempre igual a 1 (100%).

A seguir, cada primitiva de modelagem é explicada detalhadamente.

Autômato estocástico é um modelo matemático de um sistema que possui entradas e saídas discretas.

O sistema pode se encontrar em qualquer um dentre o número finito dos estados do sistema ou das configurações internas.

O estado interno em que o sistema se encontra sumariza as informações sobre as entradas anteriores e indica ainda o que é necessário para determinar o comportamento do sistema para as entradas seguintes.

Baseado nessa definição, pode-se descrever um autômato estocástico como um conjunto finito de estados e um conjunto finito de transições entre esses estados.

A denominação de estocásticos atribuída a esses autômatos dá-se pela razão do tempo ser tratado como uma variável aleatória, a qual obedece a uma distribuição exponencial à escala de tempo contínua e uma distribuição geométrica à escala de tempo discreta.

O estado local do sistema modelado em SAN é o estado individual de cada autômato do modelo.

Por sua vez, o estado global do mesmo é definido pela combinação dos estados locais de todos os autômatos que compõem o modelo.

A mudança do estado global do sistema dá-se pela mudança do estado local de qualquer um dos autômatos do modelo.

A mudança de um determinado estado local para outro é feita através de transições.

As transições são construções que indicam a possibilidade de mudança entre um estado e outro.

No entanto, cada transição necessita ter ao menos um evento associado a ela para que essa possa ser disparada.

Apresenta um modelo em SAN com dois autômatos completamente independentes.

Modelo em SAN com 2 autômatos independentes.

Neste primeiro exemplo, o autômato A(1) do modelo possui três estados 0(1), 1(1) e 2(1), enquanto o autômato A(2) possui apenas dois estados 0(2) e 1(2).

Dos cinco eventos que são modelados neste exemplo, três eventos (e1, e2, e3) ocorrem no autômatoA(1), enquanto outros dois eventos (e4, e5) ocorrem no autômatoA(2).

Apresenta-se a CTMC equivalente ao modelo em SAN.

Note que no modelo não há interação entre os dois autômatos, ie, existe apenas eventos locais em cada um deles.

As definições e os tipos de eventos que podem ser utilizados nos modelos em SAN serão vistos na próxima seção.

Evento é a entidade do modelo responsável pela ocorrência de uma transição, a qual muda o estado global do modelo.

Um ou mais eventos podem estar associados a uma transição e esta é disparada através da ocorrência de qualquer um dos eventos a ela associada.

Dois tipos de eventos podem ser modelados no formalismo de SAN.

Um evento pode ser classificado como local ou sincronizante.

Os eventos locais são utilizados em SAN para alterar o estado local de um único autômato sem que essa alteração ocasione uma mudança de estado em qualquer outro autômato do modelo.

Esse tipo de evento é particularmente interessante, pois permite que vários autômatos tenham um comportamento paralelo, trabalhando independentemente sem que haja interação entre eles.

Pode-se observar exemplos de eventos locais, a qual é composta exclusivamente por esse tipo de evento.

Os eventos sincronizantes alteram o estado local de dois ou mais autômatos simultaneamente, ie, a ocorrência de um evento sincronizante em um autômato força a ocorrência deste mesmo evento nos outros autômatos envolvidos.

Através dos eventos sincronizantes, é possível fazer a interação entre autômatos.

Essa interação dá-se sob a forma de sincronismo no disparo das transições.

Cada evento deve possuir uma taxa de ocorrência e uma probabilidade associada ao mesmo.

Tanto a taxa de ocorrência como a probabilidade podem ter associados valores constantes ou valores funcionais.

Taxas e probabilidades funcionais assumem valores diferentes conforme os estados dos outros autômatos do modelo.

A classificação de um evento como local ou sincronizante é dada pela aparição do identificador do evento e no conjunto de eventos de um autômato.

Caso o identificador do evento apareça apenas no conjunto de eventos de um único autômato, o evento é classificado como evento local.

Se o mesmo identificador aparecer no conjunto de eventos de vários autômatos, o evento é classificado como evento sincronizante.

Taxas e probabilidades funcionais constituem a segunda possibilidade de interação entre autômatos nos modelos em SAN.

Outra possibilidade é a utilização de eventos sincronizantes1.

A utilização de funções para definir taxas e/ou probabilidades permite associar a um mesmo evento diferentes valores conforme o estado global do modelo.

As taxas e probabilidades funcionais são expressas por funções que levam em consideração os estados atuais dos autômatos do modelo, podendo desta forma variar seu valor conforme os estados em que se encontram os autômatos envolvidos na função.

Apresenta um modelo em SAN com 2 autômatos de três e dois estados respectivamente.

Modelo em SAN com 2 autômatos, 1 evento sincronizante e uma taxa funcional.

Taxas dos eventos do modelo em SAN apresentado.

Da mesma forma que o modelo em SAN, também utiliza-se cinco eventos no modelo em SAN.

Entretanto, o evento e4 é um evento sincronizante, visto que o mesmo está associado a mais de um autômato do modelo.

Este evento ainda possui probabilidades associadas a diferentes transições no autômato A(1).

Além disso, o evento e5 possui agora a função f associada a sua taxa de ocorrência.

Como pode-se observar na definição da função f, a taxa de ocorrência da transição do estado 0(2) para o estado 1(2) é igual a (caso o autômatoA(1) esteja no estado 0(1)), igual a (caso o autômatoA(1) esteja no estado 2(1)), e a transição não ocorrerá caso o autômatoA(1) esteja no estado 1(1).

Apresenta a CTMC equivalente ao modelo em SAN.

Assim como as taxas de ocorrência podem ser expressas por funções, o mesmo pode ocorrer com as probabilidades de cada evento.

A definição de funções usadas para expressar as probabilidades funcionais são exatamente iguais as funções usadas para definir as taxas de ocorrência.

Outros dois tipos de funções ainda são utilizadas em SAN, Função de Atingibilidade e Funções de Integração.

As expressões que definem a função de atingibilidade e as funções de integração são descritas da mesma forma que as taxas e probabilidades funcionais.

Porém, esses dois tipos de funções desempenham papéis diferenciados conforme explicados a seguir.

Função de Atingibilidade.

Devido à representação em SAN ser de forma modular e o autômato global (equivalente à cadeia de Markov) se constituir pela combinação de todos os autômatos do modelo, é necessário especificar uma função que determina os estados atingíveis do autômato global de um modelo em SAN.

A definição de quais estados podem ser atingíveis ou alcançados em um modelo em SAN é dada pela função de atingibilidade.

Essa função é definida usando-se as mesmas regras adotadas para a definição de taxas e probabilidades funcionais.

A noção de função de atingibilidade fica mais clara ao se imaginar, por exemplo, um modelo de compartilhamento de recursos, onde se tem N clientes disputando R recursos.

Este sistema pode ser modelado em SAN usando um autômato com dois estados para cada cliente.

O estado 0 representa que o recurso não está sendo utilizado pelo cliente i, enquanto o estado 1 representa que o recurso está em uso pelo cliente i.

É fácil imaginar que, se o número R de recursos for menor do que o número N de clientes, o estado global que representa todos os clientes utilizando um recurso não poderá ser atingido, pois este estado não corresponde à realidade do modelo.

Os estados que possuem tal característica são chamados de estados inatingíveis e devem ser eliminados do modelo através da função de atingibilidade, pois a probabilidade do modelo encontrar-se em algum destes estados é igual a zero.

Funções de Integração.

Define-se funções de integração para a obtenção de resultados numéricos sobre o modelo em SAN.

As funções de integração avaliam qual a probabilidade do modelo em SAN encontrar-se em um determinado estado.

Com isso, pode-se compor funções de integração que levem em conta a probabilidade do modelo se encontrar em um conjunto de estados, podendo assim se obteríndices de desempenho e confiabilidade do modelo.

Essas funções de integração são avaliadas sobre o vetor de probabilidade que contém a probabilidade do modelo se encontrar em cada um dos estados pertencente a ele.

Um exemplo de função de integração, tendo em mente o modelo de compartilhamento de recursos exposto anteriormente, é dado pela função u, onde se quer descobrir a probabilidade do autômatoA(1) não estar utilizando o recurso, ie, encontrar-se no estado 0(1).

Via de regra, todas as funções são modeladas em SAN da mesma forma, o que as diferenciam é como elas são empregadas no modelo.

Será considerada neste trabalho a formalização de um modelo em SAN compreendendo N autômatos e E eventos.

Sejam A conjunto de autômatos (|A|= N).

E conjunto de eventos (|E|= E).

F função de atingibilidade.

O conjunto de autômatosAcompreende N autômatos nomeadosA.

Sejam S conjunto de estados (locais) do autômatoA, |S| número de estados de S, S espaço de estados produto do modelo em SAN definido comoS(1)×× S(N), X um estado local do autômato A.

O estado global x de um modelo em SAN é obtido pela mudança dos estados locais dos N autômatos, x = (x(1),x(N)), onde x é o estado local de um autômato A (xS).

Sejam Note que a definição de um estado local do autômato (x) e a definição de um estado global (x) podem ser vistas como casos particulares de x(w).

Um estado local x é o caso onde w ={i}, ao passo que o estado global x é o caso onde w ={1,2,3,N}.

Os autômatosA com i E W são os parâmetros do elemento f(S(W)).

Os elementos funcionais servem para definir probabilidades e taxas funcionais conforme descritos a seguir.

Seja f(x(W)) elemento funcional3 f(S(W)) avaliado para a composição de estados x.

Elementos funcionais definem taxas e probabilidades funcionais.

Todas as taxas e probabilidades funcionais são consideradas como elementos funcionais, mesmo aqueles que possuem valor constante.

Obviamente, tal definição não representa uma restrição, visto que elementos constantes podem ser vistos como funções (constantes) com parâmetro em W =Ø.

Desta maneira, todos os elementos de um modelo em SAN podem ser considerados como funções deSR+.

O conjunto de eventosE é composto de E eventos nomeados ej, onde 62 t, elemento funcional definido de S para R+, o qual define a taxa de ocorrência do evento e.

Caracterizam os eventos envolvidos em um modelo em SAN.

Mais especificamente, a Definição 5 identifica cada evento e qual autômato é considerado como autômato mestre do evento.

Associa uma taxa de ocorrência t a um evento e.

O conjunto T contém todas as tuplas de transição (e,pi).

Uma tupla de transição (e,pi) é definida por 71 e, identificador do evento.

Elemento funcional definido de S, o qual representa a probabilidade de uma transição quando da ocorrência do evento e.

O conjunto T contém ao menos uma tupla de transição para cada evento e no conjunto de eventos E.

Q é a função de transição de S×S ? T*, a qual contem os rótulos de transição do autômato A.

Definição 9 Q é a função de transição de S para T*, a qual contem os rótulos de transição do autômato global.

Sejam Q(x,y) rótulo de transição do estado local x para y em Q, contendo uma lista de tuplas de transição (e,p) emT.

Q(x, y) rótulo de transição do estado global x para y em Q, contendo uma lista de tuplas de transição (e,p) e E [1N]) tal que o autômato A possui ao menos uma tupla de transição com o identificador do evento e em um dos elementos deQ.

A função de transição Q de um autômato A (Definição 8), informa a associação entre os estados do autômato e quais eventos podem dispará-lo.

Essa associação é feita através das tuplas de transição (e,pi) que compõem o conjunto de tuplas de transição T.

Cada tupla de transição define, além do identificador do evento, a probabilidade do evento para aquela transição.

O número de tuplas de transição associadas a um rótulo de transição é igual ao número de eventos que podem disparar a transição.

Definição 10, um evento e é classificado como 101 evento local, se |n|= 1.

Evento sincronizante, se |n|> 1.

Definição 11, o conjunto de eventos locais El é definido como El ={e E E||n|= 1}.

Definição 12, o conjunto de eventos sincronizantesEs é definido comoEs ={e E E||n|> 1}.

Definição 13, o conjunto de eventos E é definido como E =El u Es e El n Es =Ø.

A Definição 10 faz a classificação de cada evento, o qual pode ser um evento local ou um evento sincronizante.

Essa diferenciação não é feita na definição do evento, mas é necessária para a construção dos tensores do Descritor Markoviano, o qual é composto por uma parte local (eventos locais) e por outra parte sincronizante (eventos sincronizantes).

Definição 14 Um autômatoA é definido por 141 um conjunto de estadosS, 142 uma função de transiçãoQ.

Um autômato A tem como parâmetros a união dos parâmetros de todos os elementos funcionais contidos nos seus rótulos de transição.

Sejam Um evento sincronizante eé realizável no estado global x, se e somente se o conjunto de estados sucessores y E succe(x) não for vazio.

A função de atingibilidade F é um elemento funcional definido de S PARA.

A função associa aos estados globais de S o valor 1 se eles são atingíveis e o valor 0 caso contrário.

Seja R subconjunto deS que compreende todos os estados x tais queF(x) = 1.

Para se avaliar a solução estacionária de um modelo em SAN, são necessárias algumas propriedades, eg, vivacidade, irreducibilidade, ergodicidade, etc.

Para isso, algumas restrições devem ser respeitadas para assegurar tais propriedades.

Os modelos descritos em SAN que obedecem a estas restrições são conhecidos como SAN bem definidas.

Esta primeira restrição impõe que as tuplas de transição referentes a um mesmo evento e e referentes às transições de A saindo de um mesmo estado devem possuir a mesma taxa de transição.

A soma das probabilidades de todas as transições saindo desse mesmo estado deve ser igual a 1 ou a um elemento funcional avaliado sobre.

Estas restrições têm por objetivo garantir a unicidade da definição das taxas de eventos em relação ao conjunto de transições em cada um dos autômatos.

A Restrição 21 imposta aos eventos afirma que uma tupla de transição (e,p) deve aparecer uma única vez no conjunto de tuplas de uma transição e o evento e deve pertencer ao conjunto de eventos E.

Restrição 3 A função de atingibilidadeFé bem definida, se e somente se o conjunto de estados atingíveisRé um grafo de transição fortemente conexo.

A terceira restrição assegura a irredutibilidade da cadeia de Markov correspondente ao modelo em SAN e permite empregar os teoremas padrões.

Restrição 4 Uma SAN é bem definida, se e somente se todos seus autômatos são bem definidos.

Todos seus eventos são bem definidos.

Sua função de atingibilidade é bem definida.

O Descritor Markoviano é uma fórmula algébrica que permite escrever de forma compacta o gerador infinitesimal da cadeia de Markov correspondente a um modelo em SAN pelo viés de uma fórmula matemática.

Esta fórmula matemática descreve, a partir dos tensores de transição de cada autômato, o gerador infinitesimal da cadeia de Markov associado ao modelo em SAN.

Para cada autômato A é associado um tensor Ql, agrupando todas as taxas das tuplas de transição dos eventos locais do conjunto El.

Es tensores Qe+ e Qe, agrupando todas as taxas das tuplas de transição dos eventos sincronizantes do conjunto Es.

A Definição 161 corresponde aos elementos não diagonais do tensor de transição local (taxas dos eventos locais), ao passo que a Definição 162 corresponde aos elementos diagonais (ajuste diagonal das taxas dos eventos locais).

A Definição 163 define os elementos nulos do tensor de transição local.

Definição 17, os elementos do tensor das transições sincronizadas que representam a ocorrência do evento sincronizante.

A Definição 171 corresponde aos autômatos que não dizem respeito ao evento sincronizante e.

A Definição 172 define os elementos não nulos (diagonais ou não) dos tensores para o autômato mestre referentes ao evento e.

A Definição 173 define os elementos não nulos (diagonais ou não) dos tensores para os autômatos escravos referentes ao evento e.

A Definição 174 define os elementos nulos dos tensores para os autômatos envolvidos no evento e.

Definição 18 Os elementos do tensor das transições sincronizadas que representam o ajuste necessário à ocorrência do evento.

A Definição 181 corresponde aos autômatos que não dizem respeito ao evento sincronizante e.

A Definição 182 corresponde aos elementos não nulos do tensor do autômato mestre do evento e, ao passo que a Definição 183 corresponde aos autômatos escravos.

A Definição 184 corresponde aos elementos nulos dos tensores dos autômatos referentes ao evento sincronizante e (esses tensores são diagonais).

Definição 19 O gerador infinitesimal Q correspondente à cadeia de Markov associada a uma SAN bem definida é representado pela fórmula tensorial chamada Descritor Markoviano.

Uma vez que toda soma tensorial é equivalente a uma soma de produtos tensoriais particulares.

Representa os tensores de transição necessárias à escrita da equação.

A parte superior da tabela contém os tensores com as transições locais dos autômatos e corresponde à soma tensorial.

A parte inferior da tabela é subdivida nos tensores contendo as taxas de ocorrência dos eventos sincronizantes e os tensores diagonais que fazem o ajuste (tornam a soma das linhas igual a zero) dos mesmos (e-).

Nesta seção, apresenta-se um exemplo completo de obtenção do gerador infinitesimal de um modelo descrito pelo formalismo de SAN.

Demonstra-se detalhadamente a geração dos tensores envolvidos na construção do Descritor Markoviano do modelo.

Apresenta um modelo descrito pelo formalismo de SAN, o qual possui três autômatos.

Encontram-se as taxas de ocorrência dos eventos do modelo descrito.

Modelo em SAN com três autômatos.

O autômatoA(1) possui dois estados 0(1) e 1(1), um evento local e4 e um evento sincronizante e3.

Assim como, autômato A(2) possui três estados 0(2), 1(2) e 2(2), dois eventos locais e1 e e2, e dois eventos sincronizantes e3 e e5.

O autômato A(3) possui dois estados 0(3) e 1(3), um evento local e6 e um evento sincronizante e5.

Após a identificação do tipo dos eventos (locais e sincronizantes), é possível gerar os tensores necessários para a obtenção do Descritor Markoviano do exemplo apresentado.

Identificado o número de autômatos N = 3, bem como o número de eventos sincronizantes |Es|= 2 do modelo, pode-se calcular o número de tensores envolvidos no Descritor Markoviano descrito.

A seguir, demonstra-se detalhadamente a obtenção de todos os tensores envolvidos na equação (31).

Primeiramente, identifica-se o conjunto de eventos locais El ={e1,e2,e4,e6} do modelo.

Com isso, pode-se construir os tensores locais Ql correspondentes aos autômatos A.

Em seguida, identifica-se o conjunto de eventos sincronizantes Es = {e3,e5}.

A partir da identificação do mesmo, constrói-se os tensores das transições sincronizadas que representam a ocorrência dos eventos sincronizantes em cada autômato.

Sendo assim, tem-se os tensores das transições sincronizadas Qe+ correspondentes aos autômatosA.

Note que o autômato A(1) é o autômato mestre do evento sincronizante e3 e o autômato A(3) é o autômato mestre do evento sincronizante e5, pois a taxa de ocorrência de cada um está presente no respectivo tensor do autômato mestre.

Assim como, as probabilidades dos eventos se encontram no autômato escravoA(2).

Por último, constrói-se os tensores das transições sincronizadas que representam o ajuste necessário à ocorrência dos eventos sincronizantes em cada autômato.

Logo, tem-se os tensores Qe correspondentes aos autômatos A.

Uma vez obtido todos os tensores do Descritor Markoviano, pode-se obter o gerador infinitesimal Q.

Os índices de Q são compostos pela ordem lexicográfica da composição dos estados de ambos os autômatos 0(1)0(2)0(3),0(1)0(2)1(3),1(1)2(2)1(3).

O gerador infinitesimal Q do modelo descrito pelo formalismo de SAN é obtido através da equação.

Nesta seção, apresenta-se as primitivas de modelagem de maneira informal dos formalismos de Redes de Petri, Redes de Petri Estocásticas e Redes de Petri Estocásticas Generalizadas.

Uma Rede de Petri é uma abstração de um sistema real.

Ela é um modelo formal do fluxo de dados e controle do sistema modelado em questão.

As propriedades, conceitos e técnicas para modelagem de uma Rede de Petri foram desenvolvidas utilizando métodos simples e poderosos para descrição e análise do fluxo de sistema.

O formalismo de Redes de Petri (PN, Petri Nets) é utilizado principalmente em sistemas que possam apresentar atividades assíncronas e concorrentes.

Redes de Petri têm sido utilizadas principalmente para a modelagem de sistemas de eventos em que estes possam ocorrer concorrentemente, havendo obstáculos na concorrência, precedência ou freqüência desses eventos.

A estrutura de uma Rede de Petri é um grafo bipartido1 que compreende um conjunto de lugares P, um conjunto de transições T, e um conjunto de arcos direcionados A.

Os lugares são representados graficamente por círculos, as transições por barras e os arcos direcionados por setas.

Os arcos direcionados conectam os lugares às transições e as transições aos lugares.

Tem-se um exemplo da representação gráfica de uma Rede de Petri que possui 5 lugares e 6 transições.

Um lugar é uma entrada para uma transição se existe um arco direcionado do lugar para a transição em questão.

Analogamente, um lugar é uma saída de uma transição se existe um arco direcionado da transição para o lugar em questão.

Uma Rede de Petri pode ser considerada marcada quando ela possuir tokens ou marcas.

Tokens encontram-se nos lugares.

As transições, quando disparadas, consomem tokens dos lugares que as alimentam e geram marcas nos lugares por elas alimentadas.

Tokens são sinais em uma Rede de Petri representados graficamente por um ponto preto.

A quantidade e a posição dos tokens em uma Rede de Petri podem variar durante o funcionamento da mesma.

Uma Rede de Petri marcada é definida pelo número mn de tokens contidos em cada lugar pn da rede.

Uma marcação Mi de uma Rede de Petri é definida pelo conjunto de mn dos lugares da mesma, ou seja, a marcação inicial de uma Rede de Petri é M0 ={m0, m1, m2, mn}.

Tem-se um exemplo de uma Rede de Petri marcada.

Exemplo de uma Rede de Petri marcada Uma Rede de Petri é executada através do disparo de transições.

Para ocorrer o disparo de uma transição, é necessário que esta transição esteja habilitada para isto.

Uma transição é considerada habilitada para disparar quando todos os lugares de entrada dela contiverem pelo menos um token.

Analisando, nota-se que a transição t1 possui apenas o lugar p1 como entrada, e este possui pelo menos um token.

Logo, a transição t1 está habilitada e pode ser disparada.

Quando uma transição é disparada remove-se um token de cada lugar de entrada da transição em questão e então coloca-se um token em cada lugar de saída da mesma.

Disparo da transição t1 de uma Rede de Petri Cada disparo de uma transição pode modificar a distribuição dos tokens nos lugares e conseqüentemente pode produzir uma nova marcação Mj para a Rede de Petri.

Tokens são considerados entidades atômicas (indivisíveis2), ou seja, o disparo de uma transição pode desativar outros possíveis disparos, removendo tokens que poderiam ser consumidos por uma ou outra transição alimentada por um mesmo lugar de entrada.

Observando pode-se notar que após o disparo da transição t1, os lugares p2 e p3 receberam um token cada.

Por conseguinte, as transições t2 e t3 passaram a estar habilitadas para o disparo.

O disparo da transição t2 coloca um token no lugar p4 e habilita a transição t4, o disparo da transição t3 coloca um token no lugar p5 e também habilita o disparo da transição t5.

Neste momento, as transições t4, t5 e t6 estão habilitadas a serem disparadas, porém apenas uma destas três transições pode ser disparada.

A seleção do disparo é não determinística e o disparo de uma transição desativa automaticamente o disparo da outra 3.

O resultado do disparo de uma transição de uma marcação Mi pode gerar uma nova marcação Mj.

A marcação Mj é dita imediatamente atingível de Mi se ela pode ser obtida do disparo de uma transição habilitada em Mi.

Uma marcação Mk é dita atingível de Mi se existir uma seqüência de disparo de transições que levem o estado da Rede de Petri em questão de Mi para Mk.

O funcionamento de uma Rede de Petri gera uma seqüência M de marcações{M0, M1, M2, }e uma seqüência T de transições{t1, t2, }.

O disparo de uma transição tk, habilitada em Mi, pode mudar o estado da Rede de Petri de Mi para Mj e assim por diante.

Com isso, pode-se definir o conjunto de atingibilidade de uma Rede de Petri.

O termo atingibilidade também é conhecido como reachability.

O conjunto de atingibilidade (RS, Reachability Set) é composto por todas as marcações distintas de M que são atingíveis a partir de M0.

As marcações do conjunto M podem ser representadas na forma de uma árvore.

A árvore de atingibilidade é construída a partir da marcação inicial M0 da Rede de Petri em questão.

Em seguida, leva-se em conta todas as marcações imediatamente atingíveis desta marcação inicial.

Somente M1 é imediatamente atingível a partir da marcação inicial.

A partir desta nova marcação, repete-se o mesmo procedimento.

Logo, M2 e M3 são as marcações imediatamente atingíveis a partir de M1.

Considerando M2 como a nova marcação, tem-se as marcações M1, obtida anteriormente, e M4.

A marcação M3 também gera as marcações M1 e M4.

Repetindo o mesmo procedimento para M4, consegue-se as marcações M0, M2 e M3.

Desta forma, obtém-se a árvore de atingibilidade do exemplo em questão.

A construção da árvore a partir da marcação inicial M0 poderia gerar uma árvore de tamanho infinito.

Entretanto, para se representar a árvore em um tamanho finito, quando encontra-se um marcação já atingida, não expande-se a marcação em questão, considerando-a como uma marcação duplicada.

As marcações duplicadas ou estados mortos são representados pelas folhas da árvore.

As folhas da árvore de atingibilidade são marcações as quais não são mais expandidas por já terem sido obtidas anteriormente.

Os estados mortos são estados finais do sistema os quais não possuem transições habilitadas para os mesmos.

Um lugar de uma Rede de Petri pode apresentar a propriedade de limitação.

O termo limitação também é conhecido como boundedness.

Um lugar pode ser dito como k-limitado ou simplesmente limitado se o número de tokens do lugar não excede o limite k do mesmo.

No exemplo apresentado, para todos os lugares da Rede de Petri em questão, o limite k é igual a 1, pois nenhum lugar da Rede de Petri deste exemplo contém mais de 1 token.

Uma Rede de Petri também pode ser denominada limitada.

Diz-se que uma Rede de Petri é limitada se o limite de todos os lugares for menor que infinito.

Logo, pode-se concluir que a Rede de Petri é 1-limitada, pois nenhum lugar desta rede acumula mais do que 1 token em qualquer marcação possível da mesma.

Um lugar de uma Rede de Petri pode ser considerado seguro se ele tiver no máximo 1 token, ou seja, um lugar que é 1-limitado é considerado um lugar seguro.

O conceito de segurança é simplesmente uma particularização do conceito de limitação.

O termo segurança também é conhecido como safeness.

Esta propriedade é uma das mais importantes para a modelagem de sistemas digitais, visto que um lugar pode ser modelado como uma porta ou mesmo um flip-flop.

Logo, pode-se dizer que uma Rede de Petri é segura se o limite k de todos os lugares da mesma não exceder 1 token.

Como pode-se observar, a Rede de Petri apresentada é uma rede segura, pois ela é uma rede 1-limitada.

O conceito de vivacidade está definido em função das possibilidades de disparo das transições.

O termo vivacidade também é conhecido como liveness.

Vivacidade é uma propriedade fundamental para sistemas do mundo real.

Uma transição é potencialmente disparável em uma marcação M0 se existe uma marcação Mi atingível a partir de M0, ou seja, uma transição é considerada viva se esta não é passível de um impasse ou deadlock.

Impasse em uma Rede de Petri é a impossibilidade do disparo de qualquer transição da mesma.

Um exemplo de modelagem de uma Rede de Petri é o caso de compartilhamento de recursos entre componentes do sistema.

Tem-se um exemplo de modelagem de Rede de Petri para o compartilhamento de recursos com exclusão mútua.

Compartilhamento de recursos com exclusão mútua, PN.

Apresenta a Rede de Petri que representa o processo de produção em uma fábrica de água mineral.

Supõe-se que esta fábrica possua uma única máquina responsável pela manufatura da garrafa de água e da tampinha da mesma.

Portanto, quando esta máquina estiver sendo usada para fabricar as garrafas, o processo de manufatura das tampinhas deverá aguardar para que possa-se utilizar a mesma máquina, e vice-versa.

Tendo em vista a rede, o lugar p0 da rede representa o depósito de matériaprima e o lugar p9 a habilitação do sistema para a manufatura.

Os lugares p1 e p2 representam, respectivamente, os repositórios de matéria-prima para as garrafas e tampinhas.

Os lugares p3 e p4 representam o processo de manufatura das garrafas e o processo de manufatura das tampinhas respectivamente.

O lugar p7 representa a máquina responsável pela linha de produção da fábrica.

Um token neste lugar representa que a máquina está disponível.

Quando não se encontrar um token neste lugar, significa que a máquina não está disponível, ou seja, um dos dois processos está utilizando a máquina.

Os lugares p5 e p6 são, respectivamente, os depósitos das garrafas e das tampinhas.

Por último, o lugar p8 representa o processo de montagem da garrafa de água mineral.

A transição t0 representa o início do processo de manufatura.

Neste momento, é feita a distribuição de matéria-prima para os depósitos p1 e p2 para a manufatura de garrafas e tampinhas.

As transições t1 e t2 representam, respectivamente, o início dos processos de manufatura das garrafas e tampinhas.

Como o lugar p7 possui apenas um token, apenas uma das duas transições t1 ou t2 poderá ocorrer.

Quando uma dessas transições ocorrer, automaticamente o disparo da outra transição será impossibilitado, pois o token do lugar p7 será consumido.

A transição t3 representa o término da manufatura de garrafas e, conseqüentemente, a liberação da máquina.

Da mesma forma, a transição t4 libera a máquina e termina com o processo de manufatura de tampinhas.

O disparo da transição t3 colocará um token em p5 e o disparo a transição t4 colocará um token em p6.

Quando ocorrerem uma destas transições, automaticamente será colocado um token em p7, liberando a máquina para um novo processo de manufatura.

Quando ambos os lugares p5 e p6 contiverem pelo menos um token, então a transição t5 é disparada.

Quando isso ocorrer, um token é colocado no lugar p8 e outro no lugar p9, habilitando o processo de manufatura de outras garrafas e tampinhas, desde que haja matéria-prima.

Muitas outras áreas de estudo podem ser mencionadas como possíveis assuntos para a modelagem de Redes de Petri, incluindo alocação de recursos, sistemas operacionais, redes de filas, controle de tráfego, entre outros.

O formalismo de Redes de Petri é uma ferramenta de grande facilidade para modelagem de uma vasta variedade de sistemas.

Usando o formalismo de Redes de Petri, é possível descrever somente a estrutura lógica de sistemas, pois tal formalismo não inclui nenhum conceito de tempo.

Entretanto, freqüentemente, o conceito de tempo tem um papel importante na descrição do comportamento de sistemas.

A introdução do conceito de tempo no formalismo de Redes de Petri permite a descrição de um comportamento dinâmico de sistemas.

Noe e Nutt, Merlin e Farber e Zuberek usaram o conceito de tempo para a modelagem do comportamento de sistemas computacionais.

Redes de Petri Temporizadas (TPN, Timed Petri Nets), associando um tempo fixo no disparo de transições.

O formalismo de Redes de Petri Temporizadas tem como sua principal característica a associação de um atraso fixo para cada transição do modelo.

Exemplo de uma Rede de Petri Temporizada Redes de Petri Temporizadas foram o passo inicial para a criação do formalismo de Redes de Petri Estocásticas (SPN, Stochastic Petri Nets).

A possibilidade de unir a habilidade do formalismo de Redes de Petri para descrever sincronização e concorrência com um modelo estocástico é o principal atrativo para obter-se uma avaliação quantitativa de sistemas computacionais complexos.

Os primeiros estudos sobre Redes de Petri Estocásticas foram desenvolvidos por Symons, Natkin e Molloy.

As Redes de Petri Estocásticas são obtidas através da associação de um tempo distribuído exponencialmente com o disparo de cada transição da rede.

O formalismo de Redes de Petri Estocásticas (SPN, Stochastic Petri Nets) é uma ferramenta para modelagem e avaliação de desempenho de sistemas envolvendo concorrência, não-determinismo e sincronização.

Redes de Petri Estocásticas são definidas assumindo que todas as transições são temporizadas e que o atraso no disparo das transições é associado a uma variável aleatória distribuída exponencialmente.

Dada uma Rede de Petri Estocástica com uma marcação que possua diversas transições habilitadas a serem disparas, uma das transições ocorre.

Quando uma transição de uma Rede de Petri Estocástica é disparada, assim como no formalismo de Redes de Petri, uma nova marcação pode ser gerada.

Esta nova marcação pode conter transições que já encontravam-se habilitadas na marcação anterior, mas não foram disparadas.

Por causa da propriedade de ausência de memória da distribuição exponencial, pode-se assumir que a atividade associada a cada transição é recomeçada para qualquer nova marcação.

A estrutura de uma Rede de Petri Estocástica possui os mesmos elementos contidos na estrutura de uma Rede de Petri acrescido do conjunto L = {l1, l2, lm} de taxas de disparos, possivelmente dependente de marcação, associadas às transições.

Segundo Molloy, devido à propriedade de ausência de memória da distribuição exponencial do atraso dos disparos, o formalismo de Redes de Petri Estocásticas é isomórfico5 ao formalismo de Cadeias de Markov de Tempo Contínuo (CTMC).

Exemplo de uma Rede de Petri Estocástica.

É possível mostrar que uma Rede de Petri Estocástica é ergódica.

Ergódica significa que para qualquer marcação desta rede atingida a partir da marcação inicial, pode-se novamente atingir a marcação inicial.

Logo, se uma Rede de Petri Estocástica é ergódica, é possível calcular a distribuição da probabilidade de solução estacionária das marcações da mesma.

Onde Q é o gerador infinitesimal cujos os elementos são obtidos através das taxas de disparos correspondentes às transições e p é o vetor de probabilidade de solução estacionária.

Para auxiliar na construção da Cadeia de Markov equivalente à Rede de Petri Estocástica, constrói-se a árvore de atingibilidade da rede em questão.

O processo para a construção da árvore de atingibilidade de uma Rede de Petri Estocástica segue o mesmo processo da construção da árvore de uma Rede de Petri.

Representa a árvore de atingibilidade da Rede de Petri Estocástica.

A partir da árvore de atingibilidade, pode-se construir a Cadeia de Markov equivalente ao modelo.

O espaço de estados da Cadeia de Markov correspondente à árvore de atingibilidade de uma Rede de Petri Estocástica é equivalente às marcações encontradas na mesma.

Por conseguinte, a árvore de atingibilidade possui 6 marcações que são equivalentes aos estados da Cadeia de Markov.

Constata-se que a taxa de transição do estado 0 para o estado 1 é igual a t1(2).

O valor entre parênteses corresponde ao número de tokens do lugar p1 na marcação M0, visto que esta transição é dependente de m1.

Por conseguinte, a taxa de transição do estado 1 para o estado 2 e do estado 3 para o estado 4 é igual a t1(1), visto que m1 é igual a 1 em M1 e M3.

Uma transição pode ter associada a ela uma condição de disparo chamada de controlador6.

Sendo assim, um controlador associa uma condição a uma transição de modo que o disparo da mesma fique dependente da condição especificada.

Com isso, o disparo da transição fica dependente não somente do número de tokens de um lugar, mas de qualquer condição associada ao número de tokens do mesmo, eg, o número de tokens maior ou igual a uma determinada quantia de tokens de um lugar.

Assumindo que as taxas de transição a = ß = r = d = 1, pode-se obter o gerador infinitesimal Q a partir da árvore de atingibilidade.

O gerador infinitesimal é uma matriz cujos elementos qij são obtidos através do somatório das taxas de disparo das transições habilitadas na marcação Mi as quais os disparos geram a marcação Mj.

Cabe ressaltar que em se tratando de gerador infinitesimal, os elementos da diagonal principal da matriz (qii) correspondem a valores negativos de forma que a soma dos elementos de uma linha seja igual a zero.

Tem-se a matriz do gerador infinitesimal da Rede de Petri Estocástica.

Utilizando o gerador infinitesimal Q obtido em (43), pode-se resolver a equação (41) e obter os valores do vetor de probabilidade pi.

É possível, a partir do vetor de probabilidade p, obter uma avaliação quantitativa do comportamento da Rede de Petri Estocástica.

A probabilidade de uma condição em especial de uma Rede de Petri Estocástica pode ser calculada.

Onde A é o subconjunto de marcações atingíveis a partir da marcação inicial que satisfaça a condição requerida.

Também é possível calcular, através da equação, o número médio de tokens em um determinado lugar.

Onde A(i,n) é o subconjunto de marcações atingíveis a partir da marcação inicial as quais o número de tokens do lugar pi é igual a n, e k é o limite máximo de tokens do lugar em questão.

Logo, o lugar pi é k-limitado.

Como exemplo, pode-se calcular o número médio de tokens do lugar p1 da Rede de Petri Estocástica.

A taxa média de disparo da transição tj por unidade de tempo é calculada pela equação.

Como demonstração, usando a equação (46), pode-se calcular a taxa de disparo da transição t2, habilitada somente nas marcações M1, M2 e M4.

A Rede de Petri Estocástica modelada continua representando o processo de produção em uma fábrica de água mineral.

Porém, taxas de disparos estão associadas às transições da rede.

Para manter-se a relação de ergodicidade da Rede de Petri Estocástica com a Cadeia de Markov que a representa, os lugares p8 e p9 da Rede de Petri original foram retirados.

Esta Rede de Petri Estocástica possui 30 marcações, geradas a partir do disparo das transições.

Neste exemplo, supõe-se que a máquina, responsável pela manufatura da garrafa de água e pela tampinha da mesma, não suporta a produção sobreposta7 de mais do que 2 unidades de cada elemento.

Logo, o lugar p0 da rede possui apenas 2 tokens, porém a manufatura das garrafas e tampinhas depende apenas do estoque de matéria-prima destes elementos, os quais não estão sendo representados.

Os lugares p1 e p2 representam os repositórios de matéria-prima já alocada para as garrafas e para as tampinhas respectivamente.

Os lugares p3 e p4 representam, respectivamente, o processo de manufatura das garrafas e o processo de manufatura das tampinhas.

O lugar p7 representa a máquina responsável pela linha de produção da fábrica.

A máquina suporta apenas uma tarefa por vez, ou seja, um token no lugar p7 indica que a máquina está disponível.

Se este lugar não possuir um token, significa que um dos dois processos de produção está utilizando a máquina.

Os lugares p5 e p6 são os depósitos das garrafas e das tampinhas respectivamente.

Ao contrário do exemplo modelado, este exemplo não possui um lugar representando a junção da garrafa e tampinha de água mineral.

Este passo é tratado de forma abstrata na transição t5, onde esta ocorre à medida que haja tokens nos lugares p5 e p6.

Conseqüentemente, um token é retirado dos lugares p5 e p6 (depósitos de garrafas e tampinhas) e colocado no lugar p0, liberando o processo de manufatura de uma nova garrafa e nova tampinha.

A transição t0 representa o início do processo de manufatura.

Esta transição está associada a uma taxa de disparo dependente da marcação de m1.

Quando a transição t0 é disparada, um token é removido de p0 e adicionado em p1 e p2, habilitando o processo de manufatura das garrafas e tampinhas.

Como as transições t1 e t2 encontram-se em conflito, quando a máquina estiver produzindo garrafas (lugar p3), ela não estará produzindo tampinhas (lugar p4), e vice-versa.

Quando uma das transições t3 ou t4 ocorrer, um token será colocado em p7 disponibilizando a máquina para um novo processo de manufatura.

Quando ambos os lugares p5 e p6 contiverem ao menos um token cada, então a transição t5 é disparada.

Isso caracteriza o fim do processo de manufatura de garrafas e tampinhas, possibilitando uma possível continuação do processo.

Com isso, um token é colocado em p0 permitindo a produção de uma nova garrafa e tampinha.

O formalismo de Redes de Petri Estocásticas é uma ferramenta muito útil para análise de sistemas de computadores, visto que permite às atividades de sistemas serem precisamente descritas através de um gráfico.

Este gráfico pode ser convertido para um modelo Markoviano utilizado para obter-se avaliação quantitativa do sistema em questão.

Uma característica importante do formalismo de Redes de Petri Estocásticas é que ele pode ser facilmente compreendido por pessoas que não tenham familiaridade com métodos de modelagem probabilística.

Entretanto, a representação gráfica de sistemas utilizando o formalismo de Redes de Petri Estocásticas encontra-se limitada à medida que aumenta-se o tamanho e a complexidade do sistema em questão.

Além disso, o número de estados da Cadeia de Markov equivalente à Rede de Petri cresce muito rapidamente conforme a dimensão do gráfico cresce.

Portanto, o formalismo de Redes de Petri Estocásticas pode ser usado para modelar somente sistemas de tamanho limitado.

Geralmente, não é desejável associar uma variável aleatória distribuída exponencialmente para cada transição do modelo, conforme descrito no formalismo de Redes de Petri Estocásticas.

O formalismo de Redes de Petri Estocásticas Generalizadas (GSPN, Generalized Stochastic Petri Nets) associa tempo somente para alguns eventos que acredita-se ter um grande impacto na avaliação do sistema.

Um típico exemplo disso pode ser o caso em que a seqüência de operações de um sistema compreende atividades cujas durações diferem bruscamente.

Logo, é conveniente que atividades de duração desprezível 8 sejam modeladas somente do ponto de vista lógico, enquanto que atividades de duração mais longa seriam associadas a uma variável aleatória.

Através desta modelagem, reduz-se o número de estados da Cadeia de Markov equivalente ao modelo, conseqüentemente reduzindo a complexidade da solução do mesmo.

Além disso, a utilidade de uma estrutura lógica que pode ser usada em conjunto com uma estrutura temporizada permite a construção de um modelo compacto de sistemas computacionais complexos.

O formalismo de Redes de Petri Estocásticas Generalizadas permite duas classes diferentes de transições no modelo, transições imediatas e transições temporizadas.

A transição imediata dispara em tempo zero assim que encontra-se habilitada.

A transição temporizada, assim como no formalismo SPN, dispara após um tempo aleatório, distribuído exponencialmente, associado à mesma quando habilitada.

As transições temporizadas são representadas graficamente no modelo por barras espessas, e as transições imediatas por barras finas.

Obviamente, as taxas de disparos estão associadas somente às transições temporizadas, e estas podem ser dependentes da marcação do modelo em GSPN.

Tem-se um exemplo de um modelo de Rede de Petri Estocástica Generalizada.

Exemplo de uma Rede de Petri Estocástica Generalizada.

Como pode ser constatado, as transições t1, t4 e t5 são transições temporizadas, e as transições t2, t3, t6 e t7 são transições imediatas.

A transição t1 é dependente da marcação de p1.

A estrutura de uma Rede de Petri Estocástica Generalizada é a mesma utilizada pela Rede de Petri Estocástica, porém o conjunto L ={l1, l2, lm'}de taxas de disparo contém somente m' elementos, onde m' é o número de transições temporizadas da Rede de Petri Estocástica Generalizada.

No funcionamento de uma Rede de Petri Estocástica Generalizada, pode ocorrer que várias transições sejam habilitadas simultaneamente por uma marcação.

Se o conjunto de transições habilitadas H compreender somente transições temporizadas, então a transição temporizada ti (i E H) dispara com uma probabilidade, exatamente como no formalismo de Redes de Petri Estocásticas.

Se o conjunto H compreender ambas transições imediatas e temporizadas, então somente as transições imediatas serão disparadas.

Se o conjunto H compreender zero ou mais transições temporizadas e somente uma única transição imediata, esta transição imediata é que será disparada.

Quando o conjunto H compreender várias transições imediatas, é necessário descrever uma função de densidade de probabilidade que determine qual transição será disparada.

O subconjunto de H compreendendo todas as transições imediatas habilitadas junto com a distribuição de probabilidade associada as mesmas é chamada de random switch9.

Esta distribuição de probabilidade é conhecida como switching distribution10.

Diferentes marcações podem gerar um único random switch toda vez que estas marcações habilitarem o mesmo conjunto de transições imediatas sob as quais uma switching distribution (possivelmente dependente de marcação) pode ser definida.

O modelo em GSPN descrito possui sete lugares e sete transições.

Este modelo possui três transições temporizadas, t1, t4 e t5, as quais possuem como taxas de disparo m1a, ß e r respectivamente.

As transições t2, t3, t6 e t7 são transições imediatas, e por definição possuem taxas de disparo de tempo zero.

As transições t6 e t7 são transições conflitantes.

Elas são sempre habilitadas simultaneamente, logo é necessário definir uma switching distribution para cada marcação em que m7 é maior que zero.

As transições t2 e t3 também são transições conflitantes, e estas são simultaneamente habilitadas se p3 e p4 contiverem tokens.

Por conseguinte, uma switching distribution deve ser definida para cada marcação em que m2, m3 e m4 forem maiores que zero.

Como pode ser observado, não mais do que duas transições imediatas podem estar simultaneamente habilitadas para este exemplo.

Desta forma, dois random switches podem ser identificados para as transições t2 e t3, e para as transições t6 e t7.

Assim como na modelagem de Rede de Petri é necessário especificar-se a marcação inicial como parâmetro de entrada da mesma, em um modelo em GSPN também é necessário identificar os possíveis random switch da rede, e definir a switching distribution da mesma para resolver-se os conflitos das transições.

A partir da marcação inicial descrita, uma possível execução do estado do modelo em GSPN pode ser a seguinte, a transição t1 dispara com uma taxa 1/(2a), visto que esta é dependente da marcação de m1.

Com isso, um dos dois tokens contidos em p1 é movido para p2.

Instantaneamente, ambas as transições t2 e t3 podem disparar.

Como estas duas transições são conflitantes, o disparo da transição é selecionado de acordo com a switching distribution definida previamente.

Neste caso, ambas as transições possuem a mesma probabilidade.

Assume-se que a transição t2 dispara.

Logo, remove-se um token de p2 e p3, e adiciona-se um token em p5.

Conseqüentemente, as transições temporizadas t1 e t4 encontram-se habilitadas.

Se a transição t1 disparar primeiro, um token é movido de p1 para p2.

Desse modo, a transição imediata t3 é habilitada e disparada instantaneamente, visto que é a única transição habilitada deste tipo no momento.

Um token é removido de p2 e p4, e coloca-se um token em p6.

Neste momento, a marcação resultante do modelo em GSPN contém um token em p5 e p6.

Esta marcação habilita as transições t4 e t5.

Agora, assume-se que t4 dispara primeiro, então um token é movido de p5 para p7, e um token é colocado em p1.

As duas transições imediatas t6 e t7 estão simultaneamente habilitadas, e como especificado no switching distribution, cada uma das transições pode disparar com probabilidade igual a 1/2, de forma que o token de p7 pode mover-se tanto para p3 quanto para p4.

Neste instante, as transições t1 e t5 encontram-se habilitadas, e o modelo em GSPN segue o seu funcionamento.

O conjunto de atingibilidade de um modelo em GSPN pode ser dividido em dois grupos, tangible markings e vanishing markings.

As tangible markings são marcações que habilitam somente transições temporizadas.

Enquanto as vanishing markings são marcações que habilitam ao menos uma transição imediata.

Descreve os estados que compõem o conjunto de atingibilidade da rede em questão.

O conjunto de atingibilidade de um modelo em GSPN é um subconjunto do conjunto de atingibilidade da SPN associada, pois as regras de precedência introduzidas com o uso de transições imediatas não permitem que alguns estados sejam atingíveis.

As transições temporizadas t1, t4 e t5 habilitadas nas vanishing markings, por definição, nunca ocorrerão, pois as transições imediatas habilitadas com estas transições ocorrerão primeiro.

Assumindo-se que o exemplo descrito representasse uma Rede de Petri Estocástica, as transições t2, t3, t6 e t7 seriam transições temporizadas.

O conjunto de atingibilidade para esta rede possuiria 33 estados.

A árvore de atingibilidade, caso esta fosse uma SPN.

Entretanto, o conjunto de atingibilidade do modelo em GSPN descrito, possui apenas 17 estados.

Observe que algumas marcações da árvore de atingibilidade não serão atingíveis devido ao uso de transições imediatas e da switching distribution especificada para este exemplo, marcações compreendidas pela área pontilhada.

Agora que a árvore de atingibilidade está definida, pode-se construir sua Cadeia de Markov equivalente.

O espaço de estados da Cadeia de Markov corresponde às marcações da árvore de atingibilidade da rede em questão.

Logo, a árvore de atingibilidade possui 17 marcações que serão equivalentes aos 17 estados da Cadeia de Markov.

Cadeia de Markov compreendendo vanishing e tangible markings.

Os estados pontilhados da Cadeia de Markov correspondem às vanishing markings, enquanto os demais estados correspondem às tangible markings.

Como as vanishing markings são marcações que ocorrem em tempo zero, somente as tangible markings são representadas na Cadeia de Markov.

Cadeia de Markov somente com tangible markings.

Tem-se apenas as tangible markings do modelo GSPN representando a Cadeia de Markov equivalente.

Na Cadeia de Markov equivalente ao modelo em GSPN em questão, os arcos não correspondem simplesmente à taxa de disparo de uma transição.

Eles correspondem ao conjunto de taxas percorridas de um estado ao outro, ou seja, os arcos são rotulados com exatamente uma transição temporizada seguida de uma seqüência finita (possivelmente vazia) de transições imediatas.

Como pode ser observado, existem 3 possíveis conflitos entre tangible markings, t1 e t4, t1 e t5, e t4 e t5.

A probabilidade de cada transição conflitante disparar está descrita na equação (47).

Em contra partida, dois random switch são identificados nas vanishing markings, t2 e t3, e t6 e t7.

Note que M1 é a única marcação que possibilita que t2 e t3 encontrem-se em conflito.

A probabilidade de cada uma destas transições conflitantes disparar foi determinada na switching distribution descrita.

Neste caso, a probabilidade de ambas as transições dispararem é igual a 1/2.

A definição dos random switch em um modelo em GSPN pode algumas vezes requerer do desenvolvedor do modelo uma perspicácia e discernimento nas operações do sistema modelado, pois a definição da switching distribution pode ter um impacto bastante significativo nos resultados numéricos do modelo.

As marcações M7, M8, M14 e M15 são responsáveis por colocarem as transições t6 e t7 em conflito.

Determinou-se dois momentos bem específicos para solucionar o conflito destas duas transições.

Quando não houverem tokens nos lugares p3 e p4 (marcações M14 e M15), a probabilidade de ambas as transições dispararem é igual a 1/2.

Entretanto, quando m3 = 0 e m4 = 1 (marcação M7), a transição t6 será disparada.

Em contra partida, quando m3 = 1 e m4 = 0 (marcação M8), a transição t7 será disparada.

Sendo assim, seguindo o que foi especificado na modelagem do modelo em GSPN em questão, determinou-se que os lugares p3 e p4 jamais conterão dois tokens.

Note que esta limitação não é intrínseca da estrutura e da marcação inicial, mas uma conseqüência das switching distributions definidas.

Um aspecto crítico na modelagem de um modelo em GSPN é a identificação de todos os random switch do sistema e a definição de uma switching distribution -apropriada- em todas as marcações.

Representa uma variação da Rede de Petri Estocástica.

Compartilhamento de recursos com exclusão mútua, GSPN.

A Rede de Petri Estocástica modelada possui somente transições temporizadas.

Na rede as transições t1, t2 e t5 passam a ser transições imediatas, ou seja, disparam em tempo zero assim que encontram-se habilitadas.

Esta rede continua representando o processo de produção em uma fábrica de água mineral.

A switching distribution da GSPN modelada como exemplo está definida.

Switching distribution do modelo em GSPN descrito.

Esta Rede de Petri Estocástica Generalizada possui 24 marcações, geradas a partir do funcionamento da mesma.

A transição temporizada t0 habilitada nas vanishing markings, por definição, nunca ocorrerá, pois somente as transições imediatas habilitadas com esta transição poderão ocorrer.

Representa a árvore de atingibilidade do exemplo em questão.

As marcações compreendidas pela área pontilhada na árvore de atingibilidade não são atingidas pelo funcionamento da rede.

A Cadeia de Markov equivalente a este modelo em GSPN está descrita.

Cadeia de Markov compreendendo vanishing e tangible markings Os estados pontilhados da Cadeia de Markov correspondem às vanishing markings, enquanto os demais estados correspondem às tangible markings.

Somente as tangible markings são representadas na Cadeia de Markov, visto que as vanishing markings ocorrem em tempo zero.

Cadeia de Markov somente com tangible markings.

Com isso, a Cadeia de Markov equivalente encontra-se somente com 13 estados, ao contrário do modelo equivalente em SPN da mesma que possui 30 estados.

Por utilizar transições imediatas, o formalismo de Redes de Petri Estocásticas Generalizadas minimiza o espaço de estados da Cadeia de Markov equivalente a rede.

Tal característica é dependente da forma como a mesma foi modelada, de forma que somente os eventos que tenham alguma relevância na avaliação do sistema tenham um tempo de retardo associado às transições.

Nesta seção, apresenta-se também a definição formal do formalismo de Redes de Petri Estocásticas Generalizadas Superpostas, visto que este formalismo é o foco principal desta dissertação, juntamente com o formalismo de Redes de Autômatos Estocásticos.

Esta definição é uma releitura do trabalho original de SGSPN definido por Donatelli.

No Apêndice B, encontrase a definição original desenvolvida por Donatelli sobre os formalismos de Autômatos Estocásticos Superpostos e Redes de Petri Estocásticas Generalizadas Superpostas.

Donatelli propôs o formalismo de Autômatos Estocásticos Superpostos (SSA, Superposed Stochastic Automata), uma classe do formalismo de Redes de Petri Estocásticas (SPN).

Um modelo em SSA é um conjunto de máquinas de estados estocásticas (SSM, Stochastic State Machine) que interagem através da superposição de transições.

A solução de um modelo em SSA pode ser eficientemente avaliada, visto que o mesmo pode derivar automaticamente uma expressão tensorial para seu gerador infinitesimal.

Posteriormente, Donatelli estendeu o formalismo de SSA para o formalismo de SGSPN, mostrando como a solução de um modelo em SSA pode ser adaptada para funcionar no formalismo de SGSPN.

Informalmente, uma SGSPN é vista como um conjunto de componentes GSPN sincronizados por um conjunto de transições de sincronização.

Como o formalismo de SGSPN é uma classe específica do formalismo de GSPN, a definição dos elementos de uma GSPN são os mesmos para o formalismo de SGSPN.

Sendo assim, em um primeiro momento, todaSGSPN pode ser vista como simplesmente uma GSPN.

Em um segundo momento, através de uma análise mais detalhada do comportamento da SGSPN, pode-se identificar componentes GSPN (módulos) da SGSPN que se interagem através do uso de transições de sincronização.

Assim como no formalismo de SAN, o formalismo de SGSPN permite a modularização de um sistema, possibilitando o armazenamento e a solução eficiente de sistemas complexos.

Sendo assim, tal formalismo ameniza os prejuízos da explosão do espaço de estados do formalismo de CTMC, o qual SGSPN possui equivalência de representação.

A seguir, segue a notação utilizada para a definição de modelos no formalismo de SGSPN.

Sejam GSPN i-ésimo componente GSPN de um modelo descrito pelo formalismo de SGSPN, onde GSPN(1) é o primeiro componente, t identificador de uma transição (local ou de sincronização).

Diferentemente do formalismo de SAN, o formalismo de SGSPN não possui uma probabilidade associada a uma transição.

Dessa maneira, as transições disparam ou não quando encontram-se habilitadas.

Um componente GSPN é uma descrição matemática de um modelo, o qual representa um sistema com entradas e saídas discretas.

Sendo assim, o sistema modelado pode se encontrar dentre as diferentes marcações que um componenteGSPN possui.

Desta maneira, um componenteGSPN é representado por um conjunto finito de lugares e um conjunto finito de transições.

As transições podem ter uma variável aleatória associada às mesmas, a qual segue uma distribuição exponencial à escala de tempo contínua.

Os componentes GSPN possuem um comportamento -quase independente-.

Eles não são totalmente independentes, visto que eles possuem transições de sincronização, as quais são responsáveis pela interação entre os componentes.

Modelos de sistemas que possuem um conjunto de componentes GSPN sincronizados por um conjunto de transições de sincronização são denominados SGSPN.

Apresenta um modelo em SGSPN com dois componentes GSPN sincronizados por t3.

Encontram-se as taxas de ocorrência de cada transição do modelo descrito.

Modelo em SGSPN com 2 componentes GSPN sincronizados por t3.

Taxa de cada transição do modelo em SGSPN.

O componente GSPN(1) é composto pelos lugares p6 e p7, assim como o componente GSPN(2) é composto pelos lugares p1, p2, p3, p4 e p5.

Os componentes GSPN(1) e GSPN(2) interagem-se através da transição de sincronização t3.

Mostra-se a CTMC equivalente ao modelo descrito.

Apresenta-se as marcações correspondentes aos estados da CTMC.

CTMC equivalente ao modelo descrito.

Marcações do modelo em SGSPN.

Na próxima seção, apresenta-se as definições e os tipos de transições utilizadas nos modelos em SGSPN.

Transições são entidades responsáveis pela mudança de marcação em uma Rede de Petri.

Mais de um lugar pode estar associado a uma transição.

As transições são divididas em duas classes imediatas e temporizadas.

As transições imediatas não possuem uma taxa associada às mesmas, ie, quando se encontram habilitadas, elas disparam em tempo zero.

Em contra partida, as transições temporizadas possuem uma variável aleatória associada às mesmas, a qual segue uma distribuição exponencial à escala de tempo contínua.

A seguir, apresenta-se os dois tipos de transições utilizados nos modelos descritos pelo formalismo de SGSPN, transições locais e transições de sincronização.

As transições locais são responsáveis por alterarem o estado local de um único componente GSPN sem que qualquer outro componente sofra alguma mudança.

As transições locais permitem que os componentes possuam uma certa independência, possibilitando um comportamento paralelo do sistema modelado.

As transições locais podem ser transições imediatas, como também podem ser transições temporizadas.

Tem-se t2 como transição local do componente GSPN(1), bem como t1, t4 e t5 como transições locais do componente GSPN(2).

Ao contrário das transições locais, as transições de sincronização alteram o estado local de mais de um componente GSPN.

Através das transições de sincronização, é possível realizar a interação entre os componentes GSPN.

Essa sincronização ocorre sob a forma de sincronismo no disparo das transições.

As transições locais podem ser classificadas como transições imediatas ou transições temporizadas.

Entretanto, as transições de sincronização podem ser classificadas somente como transições temporizadas.

Na próxima seção, apresenta-se a definição formal do formalismo de SGSPN, bem como o método de obtenção do gerador infinitesimal de um modelo descrito pelo mesmo.

Sejam GSPN conjunto de componentesGSPN, Ts conjunto de transições de sincronização.

Definição 20, o conjunto GSPN compreende N componentes nomeados GSPN, onde i E [1N].

Cada componenteGSPN pode ser visto como um módulo -quase independente- do sistema modelado.

Estes componentes não são considerados independentes, pois os mesmos possuem transições de sincronização as quais são responsáveis pela interação entre eles.

Seja C o conjunto de condições associadas aos disparos das transições deT.

Definição 21 c E C é uma condição que pode ser associada a uma transição t E T, a qual depende das marcas dos lugares pP.

Esta condição é uma função com domínio nas marcas dos lugares p E P e contra-domínio em falso e verdadeiro.

Estas condições permitem que o disparo de uma transição tenha um dependência em relação à quantidade de tokens de um determinado lugar do mesmo componente GSPN.

Um componente GSPN é definido pela tupla (P,T, p, I, O, W, G, M0), onde P é um conjunto não vazio de lugares, T é um conjunto não vazio de transições, pT para {0,1} é a função de prioridade das transições, I e O, T para P* são funções de entrada e saída das transições para um conjunto de lugares.

WT para R+ é função de associação de um processo estocástico distribuído exponencialmente para cada transição1, GT para C é uma função, chamada de controlador2, que determina uma condição C necessária (mas não suficiente) ao disparo de cada transição t.

M0P para N é o número inicial de tokens em cada lugar.

Com isso, todo controlador depende unicamente dos estados do componente GSPN e não dos estados de outros componentes GSPN.

Uma condição de valor constante 1 (100%) pode ser associada a uma transição, ie, o disparo da transição não tem dependência com as marcas dos lugares p E P, possibilitando que esta transição seja disparada quando se encontrar habilitada.

Por definição, o disparo das transições imediatas possuem prioridade em relação ao disparo das transições temporizadas.

Note que o conjunto de transições de um componenteGSPN é composto pela união dos conjuntos de transições TT e TI, onde não há intersecção entre estes conjuntos, ie, uma transição pode pertencer somente ao conjunto de transições imediatas ou transições temporizadas.

Sejam Tl conjunto de transições locais do componenteGSPN.

Ts conjunto de transições de sincronização do componenteGSPN.

Observe que uma transição local pertence somente a um único componente GSPN.

Por sua vez, uma transição local pode ser definida como temporizada ou imediata, não há nenhuma restrição quanto à classe da transição.

Ao contrário das transições locais, as transições de sincronização pertencem no mínimo a dois conjuntos de transições de sincronização dos componentesGSPN, ie, há uma intersecção não vazia entre os conjuntos de transições de sincronização dos componentesGSPN.

Diferentemente das transições locais, as transições de sincronização, por definição, são obrigatoriamente transições temporizadas.

Não há sincronização entre os componentes GSPN através de transições imediatas.

O conjunto de transições de sincronizaçãoTs possui todas as transições responsáveis pela interação entre os componentesGSPN (módulos), de modo que exista sincronização (dependência) entre eles.

Definição 29 Uma SGSPN composta de N componentesGSPN é definida por cada um dos componentes GSPN, onde i E [1N].

Por definição, uma GSPN pode ser vista como uma SGSPN com apenas um componente GSPN (N = 1) e, por conseguinte, com o conjunto de transições de sincronização vazio.

Para se avaliar a solução estacionária de um modelo em SGSPN, são necessárias algumas propriedades, eg, vivacidade, irreducibilidade, ergodicidade, etc.

Para isso, algumas restrições devem ser respeitadas para assegurar tais propriedades.

Os modelos descritos em SGSPN que obedecem a estas restrições são denominados SGSPN bem definidas.

Restrição 5, um componente GSPN é bem definido, se e somente se caso exista outros componentes (N > 1), o conjunto de transições de sincronização Ts não deve ser vazio, ou caso o componenteGSPN for único no conjuntoGSPN (N = 1), o conjunto Ts deve ser vazio.

Em todas as marcações existe pelo menos uma transição habilitada levando a uma marcação distinta.

Primeiramente, esta restrição determina que deve haver um conjunto não vazio de transições de sincronização se houver mais do que um componenteGSPN, ou ele deve ser vazio caso haja somente um componenteGSPN no modelo.

Toda a transição t E T deve ter pelo menos um lugar de entrada e um lugar de saída.

Ela também determina que exista um número finito de marcações atingíveis, possibilitando a obtenção da cadeia de Markov equivalente do modelo.

E, por último, que não exista lugares absorventes ou mortos descritos no modelo.

Através desta restrição é possível garantir que os componentesGSPN sejam bem definidos.

Restrição 6, uma transição de sincronização.

Ts é bem definida, se e somente se t é uma transição temporizada.

Toda a transição de sincronização deve ser temporizada e, por definição, deve pertencer no mínimo a dois conjuntos de transições de sincronização dos componentes GSPN.

Entretanto, conforme visto nestas restrições, para uma transição de sincronização ser bem definida, ela também deve possuir o mesmo número de lugares de entrada e saída entre os componentes GSPN os quais ela interage.

Assim como no formalismo de SAN, é possível obter-se o Descritor Markoviano de uma SGSPN, utilizando os tensores de transição de cada componente GSPN.

Sejam RS(M0) conjunto de atingibilidade composto por todas as marcações distintas do componente GSPN a partir de uma marcação inicial M0.

RG(M0) grafo de atingibilidade do componente GSPN obtido a partir das marcações doRS(M0).

TRS(M0) conjunto de atingibilidade tangível composto somente de marcações atingíveis do componente GSPN.

TRG(M0) grafo de atingibilidade tangível do componente GSPN obtido a partir das marcações doTRS(M0).

Mkt > Ml mudança da marcação Mk para a marcação Ml devido ao disparo de t.

Definição 30, o conjunto de atingibilidade RS(M0) do componente GSPN é definido como o menor conjunto de marcações.

Definição 31, o grafo de atingibilidade RG(M0) do componente GSPN dada uma marcação inicial M0 é um grafo direcionado cujo conjunto de nodos é composto pelas marcações do conjunto de atingibilidadeRS(M0) e o conjunto de arcos ARC.

Definição 32 O conjunto de atingibilidade tangível TRS(M0) do componente GSPN é composto por todas as marcações atingíveis do RS(M0).

Definição 33 O grafo de atingibilidade tangível TRG(M0) do componente GSPN dada uma marcação inicial M0 é um grafo direcionado cujo conjunto de nodos TM é composto pelas marcações do conjunto de atingibilidade tangível TRS(M0) e o conjunto de arcos TARC.

Assim como em SAN, também utiliza-se tensores associados aos componentesGSPN para a obtenção do Descritor Markoviano do modelo descrito em SGSPN.

Os tensores necessários para a construção do Descritor Markoviano de uma SGSPN podem ser obtidos através de Autômatos Estocásticos.

Os componentes GSPN interagem entre si através de transições de sincronização, do mesmo modo que os autômatos A interagem-se através de eventos sincronizantes.

Logo, todo componente GSPN possui um TRG(M0), o qual é visto como um autômatoA, bem como a ocorrência das transições de sincronização equivalem aos eventos sincronizantes.

Sendo assim, apresenta-se a seguir os passos necessários para que a partir de uma SGSPN consiga-se obter uma SAN equivalente.

Uma SGSPN é composta por N componentesGSPN.

Cada componente GSPN possui umTRG(M0), o qual é equivalente a um autômato estocásticoA.

Definição 34 Cada nodo Mj E TM corresponde a um estado x do autômato A.

A conversão de um formalismo para outro é feita de modo direto, onde os nodos do grafo de atingibilidade tangível TRG(M0) são todos marcações atingíveis, bem como os estados de um autômato estocástico.

Com isso, pode-se identificar de um formalismo para outro a conversão entre as transições (SGSPN) e os eventos (SAN).

Definição 36, as transições locais tETl de um componente GSPN correspondem aos eventos locais eEl do autômato A.

Definição 37, as transições de sincronização t.

Ts de um componente GSPN correspondem aos eventos sincronizantes eEs do autômato A.

Sendo assim, as taxas que eram associadas às transições passam a ser associadas as tuplas de eventos nos autômatos.

Por conseguinte, consegue-se a partir de uma SGSPN construir uma SAN equivalente 3.

Logo, os tensores do Descritor Markoviano de uma SGSPN são construídos quase da mesma maneira do que os tensores construídos em SAN.

Eles não são construídos de maneira idêntica, visto que o formalismo de SAN permite que os eventos possuam diferentes probabilidades associadas aos mesmos.

Enquanto os eventos (locais ou sincronizantes) podem disparar com diferentes probabilidades de um estado para outro no formalismo de SAN, isso não ocorre no formalismo de SGSPN.

Em SGSPN, uma transição dispara ou não quando encontra-se habilitada.

Note então que as tuplas de transições (e,p) obtidas a partir do formalismo de SGSPN são na verdade tuplas de transições iguais a (e,1), visto que não há o conceito de probabilidades associadas às transições.

Logo, na construção dos tensores, este conceito é omitido, uma vez que não há diferentes probabilidades associadas aos eventos.

Desta maneira, cada autômato A (obtido a partir do grafo de atingibilidade tangível TRG(M0) do componenteGSPN de um modelo em SGSPN) possui associado 1 tensor Ql, agrupando todas as taxas de transição dos eventos locais do conjuntoEl, 2|Es|tensores Qe+ e Qe, agrupando todas as taxas de transição dos eventos sincronizantes do conjunto Es.

Definição 38 Os elementos do tensor de transição local do autômatoA.

A Definição 381 corresponde aos elementos não diagonais do tensor de transição local (taxas dos eventos locais), ao passo que a Definição 382 corresponde aos elementos diagonais (ajuste diagonal das taxas dos eventos locais).

A Definição 383 define os elementos nulos do tensor de transição local.

Note que a diferença entre as Definições 16 e 38 é única e exclusivamente a omissão da probabilidade pi(x,y) da tupla de transição (e,pi) associada ao rótulo de transiçãoQ(x,y).

O mesmo conceito vale para a obtenção dos tensores das transições sincronizadas (ocorrência do evento e ajuste da ocorrência do mesmo), ie, a probabilidade pe(x,y) também é omitida, uma vez que o conceito de diferentes probabilidades associadas às transições não existe no formalismo de SGSPN.

Definição 39 Os elementos do tensor das transições sincronizadas que representam a ocorrência do evento sincronizante e E Es.

Definição 40 Os elementos do tensor das transições sincronizadas que representam o ajuste necessário à ocorrência do evento e E Es Definição 41 O gerador infinitesimal markoviano Q correspondente à cadeia de Markov associada a uma SGSPN bem definida é representado pela fórmula tensorial chamada Descritor Markoviano.

Uma vez que toda soma tensorial é equivalente a uma soma de produtos tensoriais particulares, o Descritor Markoviano pode ser apresentado.

Outra forma de representar o Descritor Markoviano de um modelo descrito pelo formalismo de SGSPN está no Apêndice B, o qual apresenta o trabalho original desenvolvido por Donatelli.

Como pode-se notar, a equação (52) é exatamente igual a equação apresentada para o Descritor Markoviano de um modelo descrito pelo formalismo de SAN, equação (32).

Isso ocorre devido à equivalência de representação de ambos os formalismos.

Para auxiliar na compreensão do método de obtenção descrito na Seção 53, apresenta-se um modelo descrito pelo formalismo de SGSPN a fim de demonstrar a obtenção dos tensores do Descritor Markoviano do mesmo detalhadamente.

E, por conseguinte, mostrar o gerador infinitesimal correspondente ao modelo em questão.

O exemplo modelado apresenta um modelo em SGSPN que possui três componentes GSPN e duas transições de sincronização.

Apresenta-se as taxas de ocorrência das transições do modelo descrito.

O componente GSPN(1) possui dois lugares p2 e p6, e uma transição local t2.

O componente GSPN(2) possui cinco lugares p1, p3, p4, p7 e p8, e duas transições locais t1 e t6.

O componente GSPN(3) possui dois lugares p5 e p9, e uma transição local t5.

A transição de sincronização t3 é responsável pela interação entre os componentesGSPN(1) e GSPN(2), assim como a transição de sincronização t4 é responsável pela interação entre os componentesGSPN(2) eGSPN(3).

Modelo em SGSPN com três componentesGSPN e duas transições de sincronização.

A partir da identificação dos componentes e das transições (locais e de sincronização), pode-se gerar os tensores necessários para a construção do Descritor Markoviano do modelo em questão.

Uma vez identificado os componentesGSPN, constrói-se o conjunto de atingibilidadeRS(M0) de cada um.

Em seguida, a partir do RS(M0), obtém-se oT RS(M0) e, conseqüentemente, o TRG(M0) de cada componente.

Mostra os TRG(M0) de cada componenteGSPN.

As marcações correspondentes aosTRG(M0) de cada componenteGSPN.

Marcações dosTRG(M0) de cada componenteGSPN.

TRG(M0) de cada componente GSPN.

Uma vez construído os TRG(M0) de cada componente GSPN, pode-se obter o autômato estocástico equivalente dos mesmos.

Como visto nas Definições 34 e 35, os autômatos são obtidos de forma direta, onde as marcações de um componente GSPN correspondem aos estados x do autômato A e os arcos aj correspondem aos rótulos de transiçãoQ(x,y).

Logo, tem-se os autômatosA equivalentes aosTRG(M0) de cada componente GSPN.

AutômatosA equivalentes aosTRG(M0) de cada componenteGSPN.

Com isso, pode-se identificar o conjunto de eventos locais El = {e1,e2,e5,e6} do modelo equivalente em SAN.

Logo, constrói-se os tensores locais Ql correspondentes aos autômatos A.

Posteriormente, identifica-se o conjunto de eventos sincronizantes Es ={e3,e4}.

Gera-se os tensores das transições sincronizadas que representam a ocorrência dos eventos sincronizantes em cada autômato A.

Para isso, assume-se que o autômato A(1) é o autômato mestre do evento sincronizante e3 e o autômato A(3) é o autômato mestre do evento sincronizante e4.

Logo, tem-se os tensores das transições sincronizadas Qe+ correspondentes aos autômatosA.

Em seguida, constrói-se os tensores das transições sincronizadas que representam o ajuste necessário à ocorrência dos eventos sincronizantes em cada autômato.

Sendo assim, tem-se os tensores Qe correspondentes aos autômatosA.

Uma vez obtido todos os tensores do Descritor Markoviano, obtém-se o gerador infinitesimal Q do modelo descrito pelo formalismo de SGSPN resolvendo a equação.

Neste capítulo, demonstra-se a equivalência de representação entre os formalismos de SAN e SGSPN.

Entende-se como equivalência de representação entre dois modelos, a verificação de um mesmo comportamento estocástico na descrição de ambos.

Por exemplo, se dois modelos possuem a mesma cadeia de Markov, pode-se afirmar que estes modelos são equivalentes.

Como será visto na Seção 61, qualquer modelo em SAN que necessite do uso de operadores da GTA possui pelo menos um modelo equivalente que pode ser descrito somente com o uso de operadores da CTA, e vice-versa.

Logo, assume-se neste trabalho que os modelos descritos pelo formalismo SAN utilizam o uso de operadores da CTA, de forma que é possível provar a equivalência entre os formalismos de SAN e SGSPN.

Tem-se um diagrama que demonstra a equivalência entre os formalismos de SAN e SGSPN.

Diagrama de equivalência entre os formalismos de SAN e SGSPN.

Primeiramente, demonstra-se na Seção 61 a equivalência entre o uso de operadores da GTA e CTA em modelos descritos pelo formalismo de SAN.

Com isso, encaminha-se uma base para a prova de equivalência entre os formalismos de SAN e SGSPN, visto que o formalismo de SGSPN não utiliza o conceito de elementos funcionais (operadores da GTA no método de solução).

Na Seção 62, demonstra-se a equivalência dos formalismos de SAN e SGSPN, uma vez que todo modelo em SAN (GTA) possui pelo menos um modelo equivalente em SAN (CTA).

Por último, na Seção 63, apresenta-se a equivalência entre os formalismos de SAN e SGSPN, utilizando como base o formalismo de CTMC.

Em se tratando da descrição do gerador infinitesimal, o uso dos operadores da GTA é a principal diferença entre os formalismos de SAN e SGSPN.

Entretanto, o objetivo principal desta seção é provar que qualquer modelo em SAN que necessite do uso de operadores da GTA possui pelo menos um modelo equivalente que pode ser descrito somente com o uso de operadores da CTA, e vice-versa.

Qualquer modelo em SAN com taxas funcionais pode ser representado por um modelo em SAN somente com o uso de taxas constantes 1.

Basicamente, a idéia para a prova de equivalência entre os modelos em SAN com e sem funções é baseada na substituição das funções por eventos sincronizantes.

Na realidade, cada evento com uma taxa funcional (ou probabilidade funcional) pode ser substituído por tantos eventos sincronizantes quanto forem os possíveis valores avaliados para a função do mesmo.

Tal substituição pelos eventos sincronizantes deve sincronizar (geralmente com loop transitions2) todos os autômatos que a função possui dependência.

Proposição 1 (SAN (GTA) para SAN (CTA)) Todo modelo descrito pelo formalismo de SAN (GTA) possui pelo menos um modelo equivalente descrito pelo formalismo de SAN (CTA).

Prova 1 Todo evento que possui um elemento funcional associado a sua taxa de ocorrência pode ser representado através do uso de eventos sincronizantes.

Todo evento que possui um elemento funcional associado a sua probabilidade pode ser representado através do uso de eventos sincronizantes.

Proposição 2 (SAN (CTA) para SAN (GTA)) Todo modelo descrito pelo formalismo de SAN (CTA) possui pelo menos um modelo equivalente descrito pelo formalismo de SAN (GTA).

Prova 2, toda taxa de ocorrência de um evento pode ser vista como um elemento funcional de valor constante.

Teorema 1 (SAN (GTA) para SAN (CTA).

Qualquer modelo descrito pelo formalismo de SAN que necessite do uso de operadores da GTA possui pelo menos um modelo equivalente que pode ser descrito somente com o uso de operadores da CTA, e vice-versa.

Prova 3, diretamente pela Proposição 1 e Proposição 2.

Nesta seção, apresenta-se a equivalência entre os formalismos de SAN e SGSPN.

Apresenta os passos necessários da técnica de conversão entre os formalismos.

Técnica de conversão entre os formalismos de SAN e SGSPN.

Visto que todo modelo em SAN (GTA) possui pelo menos um modelo equivalente em SAN (CTA) (Teorema 1), é possível provar a equivalência entre os formalismos de SAN e SGSPN.

Sendo assim, todo modelo em SAN pode ser visto como um modelo em SAN (CTA), possibilitando a prova da equivalência entre os formalismos.

A definição original de uma SSM encontra-se no Apêndice B, a qual foi proposta por Donatelli.

Proposição 3 (SAN ? SGSPN) Todo modelo em SAN possui pelo menos um modelo correspondente em SGSPN.

Proof 1 Um modelo em SAN possui N autômatos A.

Cada autômato A possui uma máquina de estados estocástica correspondenteSSM.

Cada SSM pode ser vista como um componente GSPN, o qual possui somente transições temporizadas.

O modelo correspondente em SGSPN é composto por todos os componentes GSPN (i E [1N]).

Proposição 4 (SGSPN para SAN) Todo modelo em SGSPN possui pelo menos um modelo correspondente em SAN.

Teorema 2 (SAN, SGSPN).

Todo modelo bem definido descrito pelo formalismo de SAN possui pelo menos um modelo equivalente descrito pelo formalismo de SGSPN, e vice-versa.

Proof 3 Diretamente pela Proposição 3 e Proposição 4.

Por intermédio do formalismo de CTMC, deseja-se provar que os formalismos de SAN e SGSPN são equivalentes.

Para isso, primeiramente, demonstra-se a equivalência entre os formalismos de SAN e CTMC.

Posteriormente, demonstra-se a equivalência entre SGSPN e CTMC.

Com base nisso, pode-se afirmar que os formalismos deSAN eSGSPN são equivalentes, visto que partindo de um modelo em SAN, usando o formalismo de CTMC, é possível transformá-lo em um modelo em SGSPN, e vice-versa.

Proposição 5 (SAN para CTMC), todo modelo descrito pelo formalismo de SAN possui um modelo correspondente descrito pelo formalismo de CTMC.

Prova 4 Todo estado global do modelo em SAN corresponde a um estado do modelo em CTMC, assim como toda transição global do modelo em SAN corresponde a uma transição do modelo em CTMC.

Proposição 6 (CTMC para SAN) Todo modelo descrito pelo formalismo de CTMC possui um modelo correspondente descrito pelo formalismo de SAN.

Prova 5 Todo estado do modelo em CTMC corresponde a um estado do autômato do modelo em SAN, assim como toda transição do modelo em CTMC corresponde a um evento do modelo em SAN.

O modelo correspondente em SAN possui apenas um autômato A(1) (N = 1), o qual contém somente eventos locais.

Teorema 3 (SAN CTMC), qualquer modelo bem definido descrito pelo formalismo de SAN possui pelo menos um modelo equivalente que pode ser descrito pelo formalismo de CTMC, e vice-versa.

Prova 6, diretamente pela Proposição 5 e Proposição 6.

Proposição 7 (SGSPN para CTMC), todo modelo descrito pelo formalismo de SGSPN possui um modelo correspondente descrito pelo formalismo de CTMC.

Prova 7, um modelo em SGSPN pode ser visto como um modelo em GSPN.

Este modelo em GSPN possui um TRG equivalente, onde todo nodo do TRG corresponde a um estado do modelo em CTMC, assim como todo arco do TRG corresponde a uma transição do modelo em CTMC.

Proposição 8 (CTMC para SGSPN) Todo modelo descrito pelo formalismo de CTMC possui um modelo correspondente descrito pelo formalismo de SGSPN.

Prova 8 Todo estado do modelo em CTMC corresponde a um estado do componente do modelo em SGSPN, assim como toda transição do modelo em CTMC corresponde a uma transição do componente do modelo em SGSPN.

O modelo correspondente em SGSPN possui apenas um componente GSPN(1) (N = 1), o qual contém somente transições locais.

Há somente um token (marcação inicial) em qualquer lugar p(1)? P(1).

Teorema 4 (SGSPN CTMC), qualquer modelo bem definido descrito pelo formalismo de SGSPN possui pelo menos um modelo equivalente que pode ser descrito pelo formalismo de CTMC, e vice-versa.

Prova 9, diretamente pela Proposição 7 e Proposição 8.

Neste capítulo, demonstra-se o custo computacional envolvido no método de solução dos formalismos deSAN eSGSPN.

Posteriormente, apresenta-se alguns exemplos a fim de comparar as características de modelagem de ambos os formalismos, juntamente com o custo envolvido nos exemplos apresentados.

SAN e SGSPN são formalismos estruturados baseados em representações de Kronecker.

Ambos os formalismos possuem uma representação tensorial do gerador infinitesimal representada por um Descritor Markoviano.

Segundo Fernandes, Plateau e Stewart, o custo computacional (número de multiplicações) para se avaliar a multiplicação do vetor de probabilidade por um produto ou soma tensorial de N matrizes, onde ni é a ordem da i-ésima matriz.

Esta equação é válida se todas as matrizes forem plenas.

Porém, levando em consideração que as matrizes estão armazenadas em formato esparso, o custo computacional, onde nzi representa o número de elementos não nulos da i-ésima matriz.

A seguir, demonstra-se o custo computacional envolvido no método de solução dos formalismos de SAN e SGSPN.

A partir da equação (72), é possível calcular o custo computacional do Descritor Markoviano de um modelo em SAN, equação (31), visto que o mesmo utiliza tensores em sua resolução.

Um modelo em SAN possui N autômatos A, onde i E [1N].

Observando a equação (31), tem-se uma soma tensorial referente à parte local=1 Ql e 2|Es| produtos tensoriais referentes aos eventos sincronizantes para os N autômatos do modelo.

Logo, o custo computacional do Descritor Markoviano, descrito na equação, de um modelo em SAN é dado pela equação, onde nz(k)i representa o número de elementos não nulos do k-ésimo tensor avaliado.

Como a ordem da matriz ni é igual para todos k termos, pode-se fatorar a equação.

Sendo assim, na equação (74), tem-se a equação que representa o custo computacional para a resolução do Descritor Markoviano de um modelo em SAN.

Os tensores necessários para a construção do Descritor Markoviano de um modelo em SGSPN são obtidos através de Autômatos Estocásticos.

Os componentes GSPN interagem entre si através de transições de sincronização, do mesmo modo que os autômatos A interagem-se através de eventos sincronizantes.

Logo, todo componenteGSPN possui umTRG(M0), o qual é visto como um autômato A, bem como a ocorrência das transições de sincronização equivalem aos eventos sincronizantes.

Sendo assim, como demonstrado na Seção 53, o Descritor Markoviano de um modelo em SGSPN é equivalente ao Descritor Markoviano de um modelo em SAN.

Por conseguinte, o custo computacional envolvido no método de solução de um modelo em SGSPN com N componentes GSPN e|Ts|transições de sincronização, onde ni é o número de marcações atingíveis no componente GSPN e nz(k)i é o número de elementos não nulos do k-ésimo tensor da i-ésima matriz.

Ainda que as equações do custo computacional de ambos os formalismos sejam iguais, é importante salientar que o número de eventos sincronizantes em um modelo em SAN não é necessariamente igual ao número de transições de sincronização do modelo equivalente em SGSPN.

Na próxima seção, apresenta-se alguns exemplos a fim de comparar as características de modelagem de ambos os formalismos, bem como o custo computacional dos mesmos.

No exemplo da Seção 723, ilustra-se claramente a diferença, descrita anteriormente, do custo computacional de um sistema modelado em SAN e SGSPN.

Apresenta-se nesta seção três exemplos de modelagem.

O primeiro exemplo apresenta um modelo em SAN de uma Rede de Filas de Espera aberta com Perda e Bloqueio, seguido do modelo equivalente em SGSPN.

O segundo exemplo, modelado em SAN (com e sem o uso de operadores da GTA) e SGSPN, descreve um sistema de Compartilhamento de Recursos.

E, por último, tem-se um exemplo que descreve uma Fila com Padrão de Serviço Alternado modelada em SAN (CTA e GTA) e SGSPN.

É um exemplo de uma Rede de Filas de Espera aberta com três filas e somente uma classe de clientes.

Este modelo possui uma fila com comportamento de bloqueio (para os clientes que saem da fila 1 e vão para a fila 2) e outra fila com comportamento de perda (para os clientes que saem da fila 1 e vão para a fila 3).

As capacidades das filas são respectivamente 3, 3 e 2 clientes.

É um modelo equivalente em SAN da Rede de Filas de Espera.

Cada autômato A representa uma fila em questão.

Os estados x de um autômatoA representam o número de clientes na fila i.

Encontram-se as taxas dos eventos utilizados.

A chegada de clientes na fila 1 e a saída de clientes da fila 2 e 3 são representadas por eventos locais l1, m2 e m3 respectivamente.

Os eventos sincronizantes e12 e e13, respectivamente, RFE, SAN.

Taxas dos eventos representam a rotação de clientes da fila 1 para a fila 2 e da fila 1 para a fila 3.

O evento local m2 possui uma taxa funcional definida pela função fm2, a qual é dependente do número de clientes do autômatoA(2), visto que a fila 2 possui dois servidores.

O símbolo C2 representa o número de servidores da fila 2.

A ocorrência do evento sincronizante e12 força simultaneamente a mudança do autômato A(1) e A(2).

Este evento não pode ocorrer quando o autômato A(2) está no estado local 3(2) (fila 2 está cheia).

Por conseguinte, isto corresponde ao comportamento de bloqueio da saída de clientes da fila 1 para a fila 2.

A transição loop do último estado (2(3)) do autômato A(3) (evento e13) permite a saída de clientes da fila 1 sem uma chegada de clientes na fila 3, ie, o comportamento de perda de clientes da rotação de clientes da fila 1 para a fila 3 (fila 3 está cheia).

O modelo em SAN para este exemplo não requer o uso da GTA, visto que a função fm2 depende somente dos estados do autômato onde ela aparece.

Apresenta um modelo equivalente em SGSPN ao modelo em SAN.

Cada fila i é representada por um componente GSPN, o qual possui um par de lugares Qi e Ai.

O lugar Ai representa os clientes disponíveis (capacidade Ki) da fila i, e o lugar Qi representa os clientes que se encontram na fila i.

Como este modelo é equivalente ao modelo em SAN, as capacidades de K1, K2 e K3 são, respectivamente, iguais a 3, 3 e 2.

A transição local l1 representa a chegada de clientes na fila 1.

A transição local m2(1) e m2(2) indicam a partida de clientes da fila 2 (fila com dois servidores).

A partida de clientes da fila 3 é representada pela transição local m 3.

Note que as transições locais m2(1) e m2(2) possuem, respectivamente, os controladores g2(1) e g2(2) associados às mesmas.

A condição de cada controlador determina se a transição poderá ocorrer ou não, ie, se a condição do controlador for falsa, a respectiva transição não ocorrerá quando a mesma se encontrar habilitada.

Com isso, é possível determinar a ocorrência exclusiva das transições m2(1) e m2(2), possibilitando a ponderação da taxa de acordo com o número de servidores da fila.

A transição de sincronização t12 indica a rotação de clientes da fila 1 para a fila 2.

Analogamente, a transição de sincronização t13 representa a rotação de clientes da fila 1 para a fila 3.

A transição tl13 representa o comportamento de perda da rotação de clientes da fila 1 para a fila 3, enquanto o comportamento de bloqueio da fila 2 é expresso diretamente pelo limite de tokens (K2) do lugar A2.

A transição tl13 também possui um controlador associado à mesma, que determina a ocorrência da mesma quando a fila 3 estiver cheia.

Este exemplo possui um mesmo custo computacional para ambos os modelos descritos pelos formalismos de SAN e SGSPN, independentemente do tamanho determinado para as filas.

Mostra um modelo em SAN de um sistema de Compartilhamento de Recursos.

Neste modelo, há N processos compartilhando R recursos.

Cada processo é representado por um autômatoA, o qual contem dois estados, S (processo ocioso) e U (processo utilizando recurso).

A função fui é definida para controlar o número de processos que estão utilizando os recursos.

Cada evento local eai possui sua respectiva taxa multiplicada por uma função fui a fim de controlar o número de recursos disponíveis.

Portanto, os eventos locais eai somente ocorrem quando houver recursos disponíveis (nb [A(1)A(N)] U < R).

Como demonstrado, um modelo em SAN pode ser representado com ou sem o uso de elementos funcionais.

Tem-se o modelo equivalente em SAN ao modelo descrito, utilizando somente eventos sincronizantes.

Neste modelo, o repositório de recursos é representado pelo autômatoA(N+1) e este contem R+1 estados, os quais representam a quantidade de recursos que se encontram em uso.

Os eventos eai e eri são eventos sincronizantes entre os processos e o repositório de recursos (A(N+1)).

Mostra um exemplo em SGSPN que descreve um sistema de Compartilhamento de Recursos equivalente ao modelo em SAN (CTA).

Neste modelo, cada processo (GSPN(i=1N)) contem dois lugares, Si (processo ocioso) e Ui (processo utilizando recurso).

No componente GSPN(N+1), os tokens no lugar RS representam a quantidade de recursos disponíveis, enquanto eles representam a quantidade de recursos em uso no lugar RU.

As transições tai e tri são transições de sincronização entre cada processo e o repositório de recursos (GSPN(N+1)).

As taxas das transições de sincronização tai e tri são, respectivamente, as mesmas utilizadas pelos eventos sincronizantes eai e eri.

O custo computacional do modelo em SAN (GTA) (uso de elementos funcionais) é considerado muito inferior ao custo dos modelos em SAN (CTA) e SGSPN.

Os modelos em SAN (CTA) e SGSPN possuem o mesmo custo computacional, visto que o modelo em SAN (CTA) possui o mesmo número de autômatos e eventos sincronizantes comparado com o número de componentesGSPN e transições de sincronização do modelo em SGSPN.

Custo computacional dos modelos de Compartilhamento de Recursos.

Como demonstrado anteriormente, o formalismo de SAN permite o uso de elementos funcionais, possibilitando a construção de um modelo equivalente, onde não seja necessário o uso de eventos sincronizantes.

Sendo assim, o custo computacional do modelo descrito é dado pela equação (71), visto que todas as matrizes envolvidas no método de solução são plenas.

Logo, como o modelo em SAN (GTA) utiliza somente eventos locais, além de possuir um custo computacional menor, o mesmo permanece constante à medida que o número de recursos aumenta.

Dada uma fila de tamanho K e taxa de chegada constante.

A taxa de atendimento desta fila varia de acordo com a taxa do respectivo serviço.

Considera-se que esta fila ora é atendida pelo serviço S1, ora é atendida pelo serviço S2.

A fila pode trocar de serviço somente quando ocorrer um atendimento, ie, não há alternância de serviço quando a fila estiver vazia.

Quando o serviço S1 prestar um atendimento, ele pode permanecer atendendo ou alternar para o serviço S2.

O mesmo vale para o serviço S2.

Quando este prestar um atendimento, ele pode permanecer atendendo ou alternar para o serviço S1.

Esta fila é denominada como Fila com Padrão de Serviço Alternado (FPSA).

Apresenta um modelo em SGSPN de uma FPSA.

O componente GSPN(1) representa a fila em si, enquanto o componente GSPN(2) representa o conjunto de possíveis serviços.

O número de tokens K no lugar RA significa a capacidade máxima da fila.

Assim como, o número de tokens no lugar RU representa a quantidade de clientes na mesma.

A transição t1 representa a chegada de clientes na fila.

Os lugares S1 e S2 indicam qual o serviço que está atendendo a fila.

A transição t2 (t4) representa o atendimento de um cliente na fila e a permanência do atendimento do serviço S1 (S2), enquanto a transição t3 (t5) indica o atendimento de um cliente na fila e a troca para o serviço S2 (S1).

Representa o modelo equivalente em SAN a uma FPSA.

O autômato A(1) representa a fila em si, enquanto o autômatoA(2) representa o conjunto de possíveis serviços da mesma.

O evento local e1 indica a chegada de clientes na fila.

O evento sincronizante e2 representa a saída de clientes da fila (serviço S1), enquanto o evento sincronizante e3 também representa a saída de clientes da fila (serviço S2).

Estes eventos sincronizam a fila (autômatoA(1)) com o conjunto de possíveis serviços (autômatoA(2)).

Como pode ser observado no modelo, um cliente pode ser atendido com probabilidade p1 (permanência do serviço S1) ou com probabilidade pi2 (alternância do serviço S1 para S2), onde pi1 + pi2 = 1.

Além disso, um cliente também pode ser atendido com probabilidade pi3 (permanência do serviço S2) ou com probabilidade pi4 (alternância do serviço S2 para S1), onde pi3 +pi4 = 1.

Também é possível construir um modelo equivalente ao modelo, utilizando elementos funcionais.

O modelo em SAN descrito é equivalente a uma FPSA que utiliza elementos funcionais.

Note que agora não são mais necessários dois eventos sincronizantes e2 e e3 para o controle do serviço em questão no autômato A(2).

Apenas o evento sincronizante e2 é utilizado com o uso de elementos funcionais.

O evento e2 possui uma taxa funcional definida pela função f, a qual determina a taxa do serviço em questão, visto que a fila ora é atendida pelo serviço S1, ora pelo serviço S2.

Tem-se um gráfico que apresenta uma comparação do custo computacional de uma FPSA modelada em SAN (CTA e GTA) e SGSPN.

Custo computacional dos modelos de uma FPSA.

Custo computacional dos modelos de uma FPSA O número de matrizes envolvidas no método de solução dos modelos em SAN (CTA e GTA) é significativamente menor do que as envolvidas no modelo em SGSPN, mesmo que ambos os modelos SAN (CTA e GTA) e SGSPN tenham a mesma representação estocástica.

Em um modelo em SAN, um evento sincronizante pode possuir várias probabilidades para interagir os autômatos.

Entretanto, no modelo equivalente em SGSPN, o mesmo fenômeno é modelado por tantas transições de sincronização quanto o número de probabilidades associadas ao evento sincronizante de um estado para outro no modelo em SAN.

O modelo em SAN (CTA) possui dois eventos sincronizantes e2 e e3, onde cada evento possui duas probabilidades, ie, cada evento sincronizante equivale a duas transições de sincronização do modelo em SGSPN.

Posteriormente, o mesmo exemplo foi modelado utilizando apenas um evento sincronizante e2, o qual possui uma taxa funcional para cada serviço, definida pela função f.

Com isso, ao invés de duas transições de sincronização, este evento sincronizante torna-se equivalente as quatro transições de sincronização no modelo em SGSPN, devido à quantidade de probabilidades que o mesmo possui associada a ele.

Note que o custo computacional do modelo em SAN (GTA) é menor do que ambos os modelos equivalentes em SAN (CTA) e SGSPN.

Este fato ocorre devido ao uso da taxa funcional associada ao evento sincronizante e2.

Logo, mesmo que ambos os modelos em SAN (CTA e GTA) e SGSPN possuam a mesma representação estocástica, o número de eventos sincronizantes (somente um evento no modelo em SAN (GTA)) é menor do que o número de transições de sincronização (quatro transições no modelo em SGSPN).

Como apresentado no Capítulo 6, os formalismos de SAN e SGSPN possuem equivalência de representação.

Um modelo descrito pelo formalismo de SAN pode ser descrito pelo formalismo de SGSPN, e vice-versa.

Esta equivalência se apresenta, de certa forma evidente, devido a ambos os formalismos possuírem uma representação equivalente ao formalismo de CTMC.

Sendo assim, é possível através do formalismo de CTMC demonstrar a equivalência de representação dos formalismos de SAN e SGSPN.

Entretanto, é evidente que o custo computacional dos modelos obtidos desta forma é catastrófico, porque se passaria por um custo de memória da mesma ordem que do formalismo de CTMC, sem necessariamente beneficiar-se da redução de tempo em comparação àquela dos modelos estruturados.

Levando em consideração a equivalência proposta nesta dissertação, a conversão de um modelo de um formalismo para outroé obtida a partir de uma seqüência de passos descritos (técnica de conversão).

Por conseguinte, o modelo equivalente em SAN pode possuir um custo computacional pior do que o modelo descrito diretamente pelo formalismo de SGSPN, e vice-versa.

Portanto, um modelo equivalente possui a mesma representação semântica do sistema, mas ele nem sempre pode ser a melhor representação (legibilidade e custo computacional) do mesmo.

A legibilidade e facilidade de descrição de um sistema pelo formalismo de SAN ou SGSPN é pessoal e extremamente dependente do sistema a ser modelado.

No exemplo de Redes de Filas de Espera, é possível observar de forma direta a relação de interação entre as filas no modelo em SGSPN (transições de sincronização).

Em contra partida, no modelo em SAN, esta interação ocorre por meio de eventos sincronizantes, os quais não possuem ligação visualmente direta entre eles (a não ser por possuírem o mesmo rótulo), ie, não há nenhum arco ligando os autômatos de forma que fique explícito a rotação de clientes de uma fila para outra.

Entretanto, modelos que possuem muitas interações semelhantes entre seus componentes, podem ser facilmente modelados pelo formalismo de SAN, visto que tal formalismo permite o uso de elementos funcionais de forma a garantir uma melhor legibilidade do modelo, eg, Compartilhamento de Recursos.

Apesar da facilidade de manutenção dos modelos descritos pelo formalismo de SGSPN comparado com os modelos em SAN, esta facilidade não se reflete em vantagem, levando-se em conta o custo computacional dos modelos.

Por exemplo, no modelo em SGSPN para uma Fila com Padrão de Serviço Alternado, para aumentar a capacidade da fila, bastaria aumentar o número K de tokens no lugar RA.

Entretanto, nos modelos em SAN, isso refletiria em um aumento no número de estados no autômatoA(1) e, conseqüentemente, um acerto nos eventos locais e sincronizantes do mesmo.

Porém, como foi previamente apresentado na Seção 723, os custos computacionais dos modelos em SAN são inferiores ao custo computacional do modelo equivalente em SGSPN.

O conceito de elementos funcionais nos modelos em SAN possuem vantagens em relação ao modelo equivalente em SGSPN (FPSA).

Basicamente, um modelo em SAN permite usar um número menor de primitivas de sincronização2.

Logo, é possível dizer que o uso de elementos funcionais (número reduzido de primitivas de sincronização) para alguns modelos em SAN pode permitir significativamente um menor custo computacional do que o modelo equivalente em SGSPN.

Como verificado nos exemplos de modelagem apresentados, um modelo obtido através da técnica de conversão não é necessariamente um modelo eficiente.

A técnica de conversão entre os formalismos se dá no nível de SSM, e não diretamente pelo formalismo de CTMC.

Sendo assim, a conversão entre os modelos se encontra em um nível mais próximo (estruturado) aos utilizados pelos formalismos de SAN e SGSPN.

Isto por si só sugere um ganho em relação à equivalência através do formalismo de CTMC, mesmo que este não tenha sido verificado formalmente.

Neste sentido, como trabalho futuro, é importante desenvolver um algoritmo eficaz (não necessariamente eficiente) para a técnica de conversão, tendo em vista que modelos equivalentes preservem os ganhos computacionais obtidos através das primitivas de modelagem do formalismo.

Ressalta-se ainda a necessidade do desenvolvimento de um conversor automático de modelos entre ambos os formalismos.

Entretanto, em uma conversão automática, cabe salientar que poderá haver um impacto significativo na solução numérica do modelo.

Modelos obtidos diretamente através de uma conversão automática geralmente não são tão compactos ou legíveis quanto aqueles modelados por um desenvolvedor experiente.

Os modelos descritos em SGSPN possuem como característica marcante a verificação de modelos (model checking), enquanto que modelos em SAN possuem uma solução numérica bem mais eficiente.

Outro ponto importante a se ressaltar, é a generalização do conceito de guards a fim de que os mesmos possam possuir condições (associadas ao disparo das transições) avaliadas para outros componentes GSPN.

Esta generalização se dá de forma natural, visto que o formato tensorial apresentado para o formalismo SGSPN utiliza operadores da GTA (soma e produto tensorial generalizados).

Com isso, é possível se construir modelos descritos pelo formalismo de SGSPN, os quais possuam componentes GSPN desconexos (redes disjuntas), obtendo-se um espaço de estados produto reduzido e, conseqüentemente, um custo computacional muito menor.

O cálculo do custo computacional é baseado na solução do algoritmo Shue3, porém é natural imaginar-se o impacto que o custo computacional sofreria se aplicado a outros métodos de solução como Multi-valued Decision Diagrams (MDD) ou Decomposição Aditiva em Fatores Normais Parciais (Slice).

O uso de MDD é amplamente aplicado ao formalismo de GSPN.

Por conseguinte, é passível se imaginar o uso do mesmo ao formalismo de SAN, bem como a geração automática do formato tensorial para o formalismo de GSPN.

Outros formalismos de modelagem como PEPANETs, Gramática de Grafos Baseadas em Objetos (GGBO) e I/O Automata poderiam se beneficiar dos ganhos alcançados através do uso de operadores da GTA no formalismo de SAN.

Um outro campo de trabalhos futuros seria o estudo destes formalismos a fim de obter-se a equivalência de representação dos mesmos com o formalismo de SAN, bem com a construção de um formato tensorial eficiente para estes formalismos e a definição de algoritmos eficazes de conversão.

Por fim, pode-se concluir dizendo que o uso de funções, e conseqüentemente o uso da GTA, não é realmente uma -necessidade-, visto que há uma equivalência de representação entre os formalismos de SAN e SGSPN.

Entretanto, em alguns casos, o uso de funções apresenta, em relação ao custo computacional, algumas -vantagens- incontestáveis.

Cabe salientar que esta conclusão é um resultado extremamente original e que se insere dentre as pesquisas de ponta na área de formalismos estruturados.

A seguir, serão apresentados os conceitos de álgebra Tensorial Clássica e álgebra Tensorial Generalizada.

Em geral, para se definir o produto tensorial de duas matrizes A de dimensões (p1×p1) e B de dimensões (p2×p2), é conveniente observar que a matriz resultante do produto tensorial possui dimensões (p1p2×p1p2) e pode ser considerada como composta de p1p1 blocos cada um com dimensões (p2p2), ie, as dimensões de B.

Para se especificar um elemento em particular, basta apenas especificar o bloco e a posição dentro do bloco que o elemento em questão se encontra.

Desta forma, conforme definido anteriormente, o elemento c36 (a11b02) está no bloco (1, 1) e na posição interna (0, 2) do mesmo.

O produto tensorial C = A B é definido pela associação do elemento de C que está na posição interna (k, l) do bloco (i, j).

A soma tensorial de duas matrizes quadradas A e B é definida em relação ao produto tensorial que segue, onde nA é a ordem de A, nB é a ordem de B.

Ini é a matriz identidade de ordem ni e -+- representa a operação usual de soma de matrizes.

Portanto, a soma tensorial é definida somente por matrizes quadradas, visto que ambos os lados desta operação (soma de matrizes) devem possuir dimensões idênticas.

O valor designado para o elemento C[ik][jl] da soma tensorial C = A B é definida, onde dij é o elemento da i-ésima linha e j-ésima coluna de uma matriz identidade.

Algumas propriedades importantes das operações produto e soma tensorial definidos por Davio é álgebra Tensorial Generalizada, que é uma extensão da álgebra Tensorial Clássica.

A principal diferença da GTA em relação à CTA é o acréscimo do conceito de elementos funcionais.

Entretanto, uma matriz pode ser composta por elementos constantes (pertencentes a R) ou elementos funcionais.

Um elemento funcional é uma função avaliada em R de acordo com um conjunto de parâmetros compostos por linhas de uma ou mais matrizes.

O produto tensorial generalizado é representado pelo símbolo.

A soma tensorial generalizada também é análoga à soma tensorial clássica, e ela é representada pelo símbolo g.

Os elementos de uma soma tensorial generalizada C = A(B)g B(A).

As propriedades da GTA definidas por Fernandes, Plateau e Stewart são geralmente conhecidas como operador de Kronecker.

Embora esta propriedade possa ser deduzida da propriedade Compatibilidade com a multiplicação, ela foi definida por Fernandes, Plateau e Stewart.

Neste apêndice, apresenta-se a definição original do trabalho desenvolvido por Donatelli sobre Autômatos Estocásticos Superpostos e Redes de Petri Estocásticas Generalizadas Superpostas.

O formalismo de Redes de Petri Estocásticas (SPN) é um modelo para descrição e avaliação de desempenho de sistemas envolvendo concorrência e sincronização.

A solução de uma SPN requer a construção da Cadeia de Markov de Tempo Contínuo (CTMC, Continuous Time Markov Chain) equivalente à mesma e por conseguinte a geração de seu gerador infinitesimal.

O Autômato Estocástico Superposto (SSA, Superposed Stochastic Automata) é uma subclasse das Redes de Petri Estocásticas.

A característica distinta de uma rede Autômato Estocástico Superposto é que ela pode ser considerada como um conjunto de autômatos estocásticos combinados através de um operador de sincronização do tipo rendez-vous1.

Através de um SSA, pode-se determinar automaticamente a expressão de Kronecker para o gerador infinitesimal e produzir todas as matrizes envolvidas na expressão.

Na terminologia de Redes de Petri, uma rede Autômato Estocástico Superposto é um conjunto de SPN que emulam uma máquina de estados compostos pela superposição de transições.

A estrutura de uma Máquina de Estado Estocástica (SSM, Stochastic State Machine) compreende um conjunto de lugares P, um conjunto de transições T, um conjunto de arcos F (que é a relação de fluxo) e um conjunto de taxas associadas às transições.

Logo, a estrutura que representa uma Máquina de Estado Estocástica é SSM = (P,T,F,).

O rendez-vous não implica que as ações são causa e conseqüência, porém elas são síncronas sem existir nenhuma relação de precedência ou causalidade.

P conjunto finito não-vazio de lugares T conjunto finito não-vazio de transições taxa de distribuição de probabilidade exponencial.

Tem-se um exemplo de uma Máquina de Estado Estocástica.

A relação de fluxo possui a seguinte restrição, onde são, respectivamente, o conjunto de lugares de entrada e de saída da transição t.

Esta é uma restrição adicional do formalismo de SSM em relação ao formalismo de SPN, pois somente um certo tipo de sincronização é permitido, ainda que se permita não-determinismo, é a função de T R+, onde (t) é a taxa de distribuição de probabilidade exponencial associada à transição t.

Uma rede Autômato Estocástico Superposto é basicamente um conjunto de Máquinas de Estados Estocásticas.

Cada Máquina de Estado Estocástica pertencente a rede Autômato Estocástico Superposto é identificada como uma partição.

A estrutura que representa uma rede Autômato Estocástico Superposto.

A partição 0 é o conjunto de lugares p1, p2, p3 e p4, enquanto a partição 1 é o conjunto de lugares p5, p6, p7 e p8 da rede Autômato Estocástico Superposto representada.

Como dito anteriormente, o formalismo de SSA é uma subclasse do formalismo de SPN, porém somente um certo tipo de sincronização é permitida.

De uma forma geral, cada transição deve ter o mesmo número de arcos de entrada e de saída.

A transição t1 tem | t1 | = |t 1 |> 1, ou seja, t1 tem o mesmo número de arcos de entrada e de saída, porém maior do que um.

Esta transição é chamada de transição de sincronização (ou sincronizada), pois ela representa a sincronização entre as partições 0 e 1.

Uma maneira informal de interpretar uma rede Autômato Estocástico Superposto é que ela pode ser obtida a partir de um conjunto de Máquinas de Estados Estocásticas sincronizadas por uma transição.

Um sistema de Máquinas de Estados Estocásticas é simplesmente uma rede Autômato Estocástico Superposto, onde cada partição possui apenas um único estado inicial.

A estrutura que representa um sistema de Máquinas de Estados Estocásticas, onde (P, T, F) é uma rede SSM, e p é um lugar, marcação inicial da SSM, pertencente ao conjunto P da mesma.

Tem-se um exemplo de um sistema de Máquinas de Estados Estocásticas.

Pode-se observar que p4 é a marcação inicial da Máquina de Estado Estocástica em questão.

Um sistema de Autômatos Estocásticos Superpostos é basicamente um sistema de Máquinas de Estados Estocásticas, onde há apenas uma marcação inicial M0 composta pelas marcações iniciais p das Máquinas de Estados Estocásticas.

A estrutura que representa um sistema de Autômatos Estocásticos Superpostos, onde N = (P, T, F,) é uma rede Autômato Estocástico Superposto definida em (B2), e M0 é a marcação inicial do sistema.

Tem-se um exemplo de um sistema de Autômatos Estocásticos Superpostos.

Exemplo de um sistema de Autômatos Estocásticos Superpostos O requisito básico para a marcação inicial é tal que há exatamente um único lugar marcado em cada elemento da partição para qualquer marcação atingível do sistema.

Logo, um sistema de Autômatos Estocásticos Superpostos pode ser considerado como um conjunto de sistema de Máquinas de Estados Estocásticas superpostas através de transições.

A marcação inicial do sistema de Autômatos Estocásticos Superpostos representado é M0 = (0,0,0,1,0,0,0,1).

Este sistema possui duas partições as quais representam as duas Máquinas de Estados Estocásticas SSM0 e SSM1 respectivamente, e a transição t1 é a transição de sincronização entre SSM0 e SSM1.

O gerador infinitesimal de um Autômato Estocástico Superposto pode ser escrito como a expressão de Kronecker de processos independentes acrescidos de algumas matrizes de correção.

Considera-se as matrizes A e B como as matrizes de transição dos estados de duas Cadeias de Markov de Tempo Discreto (DTMC), o produto tensorial C = A B é a matriz de probabilidade das transições dos processos obtidos através da composição independente dos dois processos originais A e B.

Se as matrizes E e F são consideradas como os geradores infinitesimais de dois processos Markovianos de tempo contínuo, então a soma tensorial D = E F é o gerador infinitesimal do processo obtido pela composição independente dos dois processos originais E e F.

Um aspecto importante é que mesmo usando somente os geradores infinitesimais das SSM do sistema para construir o gerador infinitesimal D, o número de elementos da matriz D = E? F é igual a|E ||F |, onde|X |é igual ao número de elementos da matriz X.

O mesmo é válido para o número de elementos da matriz C = A B.

Um ponto interessante é que a solução de piD = 0, solução característica do processo Markoviano definido por D, não requer o cálculo de D, mas a solução do processo pode ser feita usando os componentes E e F.

Não há nenhuma surpresa nesta afirmação, visto que a solução de um processo estocástico, que é obtido pela composição independente de dois outros processos, pode ser avaliada pela solução isolada dos dois processos.

Plateau sugere e aplica a idéia da separação de dois processos de comportamento independente do processo dependente e expressa o gerador infinitesimal deste processo como a soma de duas partes, a primeira é a composição dos comportamentos independentes dos autômatos, e a segunda leva em conta todas as dependências entre eles.

Tem-se o exemplo de duas Máquinas de Estados Estocásticas, SSM0 e SSM1, onde as transições t1, t2 e t3 têm taxas, µ e respectivamente.

Dado um sistema de Autômatos Estocásticos Superpostos S cujas partições associadas à N sistemas de Máquinas de Estados Estocásticas, Q o gerador infinitesimal de S e Qi o gerador infinitesimal de SSMi, Donatelli mostra a relação entre os Qi e Q, interpretando o processo estocástico associado à S como a composição dependente do processo estocástico associado às SSMi.

Para ilustrar tal relação, assume-se o sistema de Autômatos Estocásticos Superpostos S, obtido pela superposição da transição t2 de SSM0 e SSM1.

Sistema SSA com uma transição de sincronização e duas SSM O gerador infinitesimal associado à SSM0 e SSM1 são representados.

Enquanto que o gerador infinitesimal Q do sistema SSA.

Retirando das matrizes Q0 e Q1 os elementos que relacionam-se com o comportamento dependente das duas SSM, obtém-se as matrizes Q'0 e Q'1.

Logo, pode-se dizer que as matrizes Q'0 e Q'1 são obtidas, respectivamente, pela remoção dos elementos que representam o disparo da transição de sincronização t2 das matrizes Q0 e Q1.

A soma tensorial das matrizes Q0 e Q1 gera a matriz Q que descreve a composição do comportamento independente de SSM0 e SSM1.

Como pode-se notar, a matriz Q difere da matriz Q somente na primeira linha, pois a primeira linha corresponde ao estado do disparo da transição de sincronização t2.

Então, a matriz Q pode ser escrita, onde K é o fator de correção (matrizes de correção).

O fator de correção K pode ser expresso como uma expressão de matrizes de Kronecker que são relacionadas aos componentes do sistema.

A matriz K pode ser escrita como K0 K1 +K2 K3, onde as matrizes K0, K1, K2 e K3.

A seguir, mostra-se o método de generalização da construção do gerador infinitesimal Q de um sistema de Autômatos Estocásticos Superpostos S a partir do processo estocástico associado às Máquinas de Estados Estocásticas.

Para demonstrar a construção do gerador infinitesimal de um sistema de Autômatos Estocásticos Superpostos de dois autômatos em uma única transição, assume-se duas Máquinas de Estados Estocásticas, onde SSM0 possui n0 estados e SSM1 possui n1 estados.

As matrizes Q0 de tamanho n0×n0 e Q1 de tamanho n1×n1 são, respectivamente, os geradores infinitesimais de SSM0 e SSM1.

A matriz Q de tamanho (n0 n1)×(n0 n1) é o gerador infinitesimal do SSA obtido pela superposição da transição t de taxa µ.

A mudança do estado h0 para o estado h0 da SSM0 pode ser expressa por h0t h'0, onde t é a transição habilitada no estado h0 cujo disparo produz o estado h0.

Com isso, através de Q0, pode-se construir a matriz Q0, onde E(h0,h0) é uma matriz cujo único elemento não nulo corresponde ao elemento de índice (h0,h'0), e E(h0,h0) também é uma matriz cujo único elemento não nulo corresponde ao elemento de índice (h0,h0).

A matriz Q1 pode ser construída da mesma maneira a partir de Q1.

Desta forma, conclui-se que as matrizes E(h0,h'0) e E(h0,h0) são as matrizes de eliminação do comportamento dependente da transição de sincronização.

Quando estas matrizes são subtraídas da matriz Qi, obtém-se a matriz Q'i que representa o comportamento independente da SSMi.

Realizando a soma tensorial entre as matrizes Q0 e Q1, tem-se a expressão do comportamento independente do processo.

O fator de correção é uma matriz de (n0 n1)×(n0 n1) elementos que determina o disparo de t quando SSM0 está no estado h0 e SSM1 está no estado h1.

Esta matriz possui somente como elementos não nulos os valores das posições.

Com isso, pode-se construir o gerador infinitesimal do sistema de Autômatos Estocásticos Superpostos com dois autômatos sincronizados em uma única transição, onde K0 e K2 são matrizes de n0×n0 elementos, os quais os únicos elementos não nulos são aqueles cujos índices são iguais a (h0,h0) e (h0,h'0) respectivamente, e K1 e K3 são matrizes de n1 ×n1 elementos, os quais os únicos elementos não nulos são aqueles cujos índices são, respectivamente, iguais a (h1,h1) e (h1,h'1).

Para este caso, assume-se que há N SSM, sendo SSMi, i = 01, associadas às matrizes Qi.

A mudança do estado hi para o estado h'i da SSMi é expressa por hith'i, considerando SSMi isolada.

Se ni é o conjunto de lugares (conseqüentemente de estados) de SSMi, então Qi é uma matriz de ni×ni elementos.

Onde Ki é uma matriz de elementos iguais a zero, exceto o elemento (hi, hi) = 1, enquanto K'i também é uma matriz de elementos iguais a zero, exceto o elemento (hi, h'i) = 1.

Note que E(hi,h'i)E(hi,hi) = K'iKi, isto é, para uma dada transição de sincronização, é necessário adicionar dois fatores de correção, e cada fator de correção é um produto de Kronecker de N matrizes.

Considera-se agora a sincronização de N SSM por duas transições de sincronização t1 e t2 de taxas iguais a µ1 e µ2.

A mudança do estado hi para o estado h'i da SSMi é expressa por hit1 h'i e do estado li para o estado l'i da SSMi é expressa por lit2¿l'i.

O conjunto de N autômatos do sistema de Autômatos Estocásticos Superpostos pode ser classificado em três grupos, autômato que é sincronizado somente pela transição t1, autômato que é sincronizado somente pela transição t2, autômato que é sincronizado por ambas as transições t1 e t2.

Com isso, pode-se definir a construção de Q'i a partir de Qi de acordo com o grupo que a SSMi se enquadra.

Representam-se as matrizes de eliminação do comportamento dependente da transição t1, enquanto representam as matrizes de eliminação do comportamento dependente da transição de sincronização t2 do autômato no grupo Gi.

As matrizes identidades foram introduzidas na expressão para levarem em conta os autômatos que não possuem sincronização com as transições em questão.

Este é o caso mais generalizado para a obtenção do gerador infinitesimal de um sistema com N autômatos que são sincronizados por um número arbitrário de transições.

A partir disso, pode-se definir uma fórmula para obter-se o gerador infinitesimal Q de um sistema de Autômatos Estocásticos Superpostos.

As matrizes do tipo ni ×ni elementos da expressão de Kronecker da fórmula em questão são os números de estados da SSMi.

Em (B9), obtém-se o gerador infinitesimal Q de um sistema de Autômatos Estocásticos Superpostos com N SSM sincronizadas por um número arbitrário de transições.

Sendo o sistema SSA em questão com N autômatos e TS transições de sincronização, então o número de matrizes envolvidas na expressão (B9) é N(1 + 2|TS |), embora muitas destas matrizes sejam matrizes identidade.

As matrizes Qi, E(t,t) e E(t,t) são matrizes temporárias usadas para a obtenção das matrizes Q'i, logo estas matrizes não entram no cálculo do número de matrizes envolvidas na expressão (B9).

É importante ressaltar que a expressão de Q é somente uma maneira mais compacta de se obter o gerador infinitesimal de um sistema de Autômatos Estocásticos Superpostos, pois o número de elementos de Q ainda é.

A solução de uma SPN requer a construção da Cadeia de Markov de Tempo Contínuo equivalente à mesma, bem como a construção do seu gerador infinitesimal e a resolução de um número de equações igual ao número de estados da SPN em questão.

Plateau mostra um método de solução para redes de autômatos estocásticos Markovianos que possui duas vantagens, não é necessário armazenar o gerador infinitesimal da Cadeia de Markov e a solução do processo é facilmente adaptável para uma implementação paralela.

Donatelli apresenta uma subclasse de SPN chamada de Autômato Estocástico Superposto (SSA).

Um Autômato Estocástico Superposto é basicamente um conjunto de Máquinas de Estados Estocásticas que interagem através de uma transição de sincronização.

Um Autômato Estocástico Superposto apresenta como desvantagem o fato de que cada componente é representado como uma máquina de estados.

Donatelli demonstra como esta mesma técnica pode ser adaptada para trabalhar com uma classe mais genérica de GSPN, conhecida como Redes de Petri Estocásticas Generalizadas Superpostas (SGSPN), onde cada componente da mesma é uma Rede de Petri Estocástica Generalizada.

De um modo geral, uma Rede de Petri Estocástica Generalizada Superposta é um conjunto de Redes de Petri Estocásticas Generalizadas sincronizadas por um subconjunto comum de transições.

O formalismo de Redes de Petri Estocásticas Generalizadas possui como principal característica a distinção das transições em duas semânticas, imediata e temporizada.

As transições imediatas disparam com uma prioridade maior do que as transições temporizadas.

Assume-se dois níveis de prioridade, prioridade 0 para as transições temporizadas e prioridade 1 para as transições imediatas.

A estrutura de uma Rede de Petri Estocástica Generalizada Superposta compreende um conjunto de lugares P, um conjunto de transições T, a função de prioridade pi, três funções de transições para um conjunto de lugares, respectivamente, definidas como os lugares de entrada, saída e inibição de uma dada transição, uma função W correspondente à taxa de disparo das transições, uma marcação inicial M0, um conjunto de partições de P e um conjunto de transições temporizadas TSTE.

O conjunto TE representa as transições temporizadas e o conjunto TI representa as transições imediatas do conjunto T.

O conjunto TE é definido como TE = {t T | p(t) = 0}, e o conjunto TI é definido como TI = {t T | p(t) = 1}.

O conjunto de atingibilidade RS(M0) de uma Rede de Petri Estocástica Generalizada Superposta é composto por marcações distintas da rede que são atingíveis a partir da marcação inicial M0.

O grafo de atingibilidade RG(M0) de uma GSPN, dada a marcação inicial da mesma, é um grafo direcionado cujo conjunto de nodos é o conjunto de atingibilidade RS(M0).

Tanto o conjunto de atingibilidade RS(M0) quanto o grafo de atingibilidade RG(M0) incluem as tangible e vanishing markings.

Entretanto, do ponto de vista de processo estocástico, há um interesse maior somente nas tangible markings.

Logo, o conjunto de atingibilidade tangível TRS(M0) de uma GSPN é o conjunto de todas as tangible markings do conjunto de atingibilidade RS(M0).

O grafo de atingibilidade tangível TRG(M0) é um grafo cujo conjunto de nodos é o conjunto de estados atingíveis.

Cada arco do grafo é rotulado com exatamente uma transição temporizada seguida de uma seqüência finita (possivelmente vazia) de transições imediatas.

Sendo assim, o grafo de atingibilidade tangível TRG(M0) de uma GSPN é um grafo cujo conjunto de nodos é o conjunto de atingibilidade tangível TRS(M0) e cujo conjunto de arcos é definido.

A Cadeia de Markov de Tempo Contínuo equivalente à GSPN de marcação inicial M0 é obtida a partir do TRG(M0), considerando cada nodo do grafo como um estado da Cadeia de Markov.

A taxa de disparo associada em cada arco da TRG(M0) de uma GSPN pode ser calculada como W(t0).

W(s)2, enquanto a taxa de disparo na Cadeia de Markov entre dois estados é determinada como a soma das taxas dos arcos entre os dois nodos correspondentes no TRG.

Tem-se um exemplo de uma Rede de Petri Estocástica Generalizada Superposta.

Como pode ser visto no exemplo apresentado, a Rede de Petri Estocástica Generalizada Superposta em questão é uma GSPN que possui duas partições.

A partição P(0) é o conjunto de lugares p1, p2, p3, p4, p5, p6, p7 e p8 da GSPN0, enquanto a partição P(1) é o conjunto de lugares p9, p10, p11, p12, e p13 da GSPN1.

O conjunto de transições de sincronização TS é igual a{t4}, onde t4 é a transição de sincronização entre as partições P(0) e P(1).

É possível, a partir da expressão de Kronecker derivada, utilizá-la também para Redes de Petri Estocásticas Generalizadas Superpostas.

Observa-se que enquanto em um SSA a transição de sincronização pode estar habilitada no máximo em um estado de cada SSMi, em uma SGSPN a transição de sincronização pode estar habilitada em mais do que um estado de cada GSPNi.

Logo, tem-se uma relação mais complexa para se determinar os fatores de correção.

O método de obtenção do gerador infinitesimal a ser apresentado possui o número de matrizes de correção dependente do número de transições de sincronização, ao invés do número de estados de cada componente GSPN que habilita as transições de sincronização.

No formalismo de SSA, explicita-se a relação entre a CTMC de uma SGSPN e a composição independente das CTMC dos componentes GSPN.

Define-se o estado M de uma SGSPN como o termo global e as N projeções Mi de M sobre os elementos da partição como o termo local.

A composição independente da CTMC das componentes GSPN produzem uma CTMC que permite uma transição de estado devido ao disparo de t' em qualquer estado (global) em que haja ao menos um estado local que habilite t', independentemente dos estados locais das outras componentes GSPN.

Através do mesmo método proposto para SSA, pode-se construir a matriz Qi obtida através do gerador infinitesimal Qi de cada componente GSPN, removendo todas as contribuições dos disparos de todas as transições tTS, seguido da correção dos elementos da diagonal principal.

A matriz Q =1i=0Qi difere do gerador infinitesimal Q da SGSPN somente nas contribuições dos disparos das transições t.

Representa os passos necessários para, a partir de uma SGSPN, obter-se um SSA equivalente.

Começando de uma SGSPN, pode-se construir N componentes GSPNi e calcular seus TRG(M0) correspondentes.

Cada TRG(M0) pode ser considerado como uma SSM e, por conseguinte, pode-se construir a SSMi = (P(SMi),T(SMi),F(SMi),W(SMi),p(SMi)) que possui tantos lugares quanto os nodos da TRG(M0), e tantas transições quanto o número de arcos.

De uma maneira informal, a função i(t) corresponde ao MAPi(t) = t' quando este for uma transição de sincronização de SSMi, sendo a taxa de disparo da transição t' associada à W(SMi)(t).

Enquanto, para as outras transições que não representam sincronização entre as GSPN, a função i(t) corresponde a t.

A transição associada a t possui taxa de disparo igual a di(t) = ¡(p),(p'),t',s.

Obtendo um SSA a partir da superposição de N SSMi sobre transições de sincronização, então cada transição t do SSA representa o disparo de t' em um certo estado da SGSPN.

Isso ocorre devido à restrição que transições de sincronização levam a estados atingíveis, logo todos os arcos em todos TRG(M0) que representam o disparo de t' possuem a mesma taxa de disparo W(t').

Tem-se um exemplo de uma SGSPN que possui uma transição de sincronização t3.

A partir da SGSPN descrita, pode se obter as duas SSM correspondentes.

A SGSPN é composta por duas GSPN que se sincronizam através da transição t3.

A SSM0 possui duas transições t3, enquanto a SSM1 possui cinco transições t3.

Estas duas SSM levam a construção de um SSA que possui dez transições de sincronização.

Este SSA não será mostrado devido aos muitos arcos que o mesmo possui, impossibilitando sua visualização com clareza.

Define-se como TSSSA o conjunto de transições de sincronização de um SSA.

O conjunto de transições de sincronização TS(SMi) de uma SSMi é definido como TS(SMi) = T(SMi)n TSSSA.

Relembrando que devido à restrição que transições de sincronização levam a estados atingíveis e que o SSA foi construído pela superposição de transições, todas as transições t TSSSA tais que (t) = t têm a mesma taxa de disparo W(t).

Pela mesma razão, todos os arcos no TRG(M0) que correspondem ao disparo de t' têm a mesma taxa de disparo W(t').

Assim como a função MAP(t) associa à transição t de uma SSM uma transição t' da SGSPN, o inverso desta função MAP1(t') associa à transição t' da SGSPN um conjunto de transições t do SSA.

Em (B11), tem-se o gerador infinitesimal de um SSA, que também é o gerador infinitesimal de uma SGSPN.

Devido à restrição das transições de sincronização da SGSPN, tem-se que W(t) = W(t') e.

Logo, há um fator de correção para cada elemento do produto cartesiano dos estados que habilitam, em cada SSMi, as transições de MAP1i (t').

Exemplo completo de obtenção do Gerador Infinitesimal.

Para melhor ilustrar o método de obtenção descrito na seção B32, apresenta-se um exemplo de uma Rede de Petri Estocástica Generalizada Superposta a fim de demonstrar passo a passo a obtenção das matrizes envolvidas na expressão e, conseqüentemente, a obtenção do gerador infinitesimal correspondente à rede em questão.

O exemplo modelado descreve o compartilhamento de um único recurso entre dois clientes.

O lugar p1 representa que o cliente 1 não está utilizando o recurso, enquanto o lugar p2 representa a utilização do recurso pelo mesmo.

O mesmo vale para o cliente 2, o lugar p3 representa a não utilização do recurso, enquanto o lugar p4 representa a utilização do mesmo.

Os lugares p5 e p6 indicam, respectivamente, se o recurso está disponível ou não.

Pode-se destacar três componentes GSPN e, por conseguinte, três partições P(0), P(1) e P(2).

A partição P(0) é composta pelos lugares p1 e p2, a partição P(1) pelos lugares p5 e p6, enquanto a partição P(2) é composta pelos lugares p3 e p4.

Após identificar as componentes GSPN, pode-se construir as componentes SSM correspondentes à SGSPN em questão.

Com isso, através das três SSM, pode-se construir o SSA equivalente.

O mesmo não será mostrado devido aos muitos arcos que possui, dificultando sua visualização com clareza.

Para se obter o gerador infinitesimal da SGSPN em questão, ainda é necessário identificar o conjunto de transições de sincronização TS da mesma, a qual possui quatro transições t1, t2, t3 e t4.

Com base nestas informações, já é possível obter o gerador infinitesimal da SGSPN utilizando a expressão apresentada.

Identificado o número de componentes SSM (N = 3), bem com o número de transições de sincronização (| TS |= 4) da SGSPN, pode-se calcular o número de matrizes envolvidas na expressão.

Analisando a parte (1) da expressão (B14), observa-se que existem três matrizes Qi (comportamento local de cada SSM).

Como a SGSPN possui quatro transições de sincronização, necessita-se de uma matriz de correção para cada transição de sincronização em cada componente SSM, ou seja, há (4 transições x 3 componentes) 12 matrizes de correção para o elemento da diagonal principal, parte (2), e 12 matrizes de correção para o efeito da transição em si, parte (3).

No total, há 24 matrizes de correção mais três matrizes do comportamento local dos componentes, perfazendo as 27 matrizes obtidas anteriormente pela fórmula em (B15).

A seguir, demonstra-se passo a passo a obtenção de todas as matrizes envolvidas na expressão.

Para se obter as matrizes Qi correspondentes ao comportamento local dos componentes SSM, necessita-se primeiramente obter o gerador infinitesimal associado à cada componente SSM.

As matrizes Q'i são todas matrizes nulas, visto que não há comportamento independente nos componentes SSM da SGSPN, pois todas as transições da rede são transições de sincronização.

O próximo passo é obter as matrizes de correção para os elementos da diagonal principal.

Como explicado anteriormente, há (4 transições x 3 componentes) 12 matrizes de correção a serem obtidas.

Analisando a parte (2) da expressão (B14), tem-se a soma de quatro matrizes.

Por fim, soma-se as quatro matrizes K(t) para se obter a matriz de correção correspondente aos elementos da diagonal principal.

Observe o sinal de negativo na parte (2) da expressão (B14), pois estes são os elementos de correção da diagonal principal.

Analogamente, o mesmo processo é feito para as matrizes de correção do efeito das transições em si, parte (3).

Logo, tem-se a soma de quatro matrizes K'(t'), onde tTS ={t'1,t'2,t'3,t'4}.

Os conjuntos MAP1i (t) correspondentes à parte (3) da expressão são os mesmos utilizados na parte (2).

Porém, estes são aplicados nas matrizes Ki(t).

Por fim, soma-se as quatro matrizes K(t) para se obter a matriz de correção correspondente aos elementos do efeito das transições em si.

Uma vez resolvida todas as três partes da expressão, obtém-se o gerador infinitesimal Q da SGSPN em questão.

A ordem dos estados é a ordem lexicográfica dos índices da matriz Q, assumindo que os componentes SSM podem se encontrar em dois estados 0 e 1.

Os estados descrevem a situação do cliente 1, recurso e cliente 2 nesta ordem, codificando como 0 (zero) a situação de não uso e 1 (um) a situação de uso.

Por exemplo, o estado 110 significa que o cliente 1 está usando o recurso, o recurso está em uso e o cliente 2 não está utilizando o recurso.

Note que apenas os estados 000, 011 e 110 do gerador infinitesimal apresentado são atingíveis.

Os demais estados, apesar de estarem representados na tabela, jamais serão atingidos.

A SGSPN apresentada poderia ter apenas um lugar para representar a utilização do recurso.

Quando este lugar possuísse um token, o recurso estaria liberado.

Caso contrário, o recurso estaria sendo utilizado quando este lugar não possuísse nenhum token.

Esta modelagem não foi possível, pois não haveria transições de sincronização, visto que as mesmas não respeitariam a restrição característica.

Logo, se a SGSPN em questão fosse modelada apenas com um lugar, esta seria simplesmente uma GSPN e não uma SGSPN.

