Sistemas Multiagentes ganharam muita atenção nos últimos anos através do surgimento de novas propostas para metodologias de desenvolvimento, linguagens de modelagem e plataformas para implementação e execução de tais sistemas, entre outras.
Tais propostas visam o amadurecimento o processo de desenvolvimento de aplicações orientadas a agentes.
Entretanto, observamos a necessidade de um método menos subjetivo para a identificação de papéis de agentes, que simultaneamente não dependesse do conhecimento técnico dos analistas de sistemas e que não envolvesse a modelagem de sistemas em si, uma vez que nesta etapa do processo de desenvolvimento, o sistema já está em construção.
Devido as vantagens fornecidas por a Modelagem de Negócio, muitas empresas começaram a fazer o uso desta disciplina para reestruturação seus processos, buscando desta forma, identificar possíveis melhorias dentro de a organização.
Dentro desse contexto, neste trabalho esta sendo proposta a introdução da Modelagem de Negócio à uma metodologia voltada a construção de sistemas multiagentes para a realização da identificação de papéis de agentes.
Junto com a introdução dessa disciplina, utilizamos conceitos provenientes do Processo Decisório com o intuito de tornar mais objetivo a etapa de identificação de papéis de agentes.
Palavras-chave -- modelagem de negócio, sistema multiagentes, metodologia de desenvolvimento, sistema de informação, papel de agente, processo decisório.
O crescimento das tecnologias de informação nas organizações leva ao aparecimento de novas siglas, novos fabricantes e produtos que vêm a substituir outros.
Dentro de estas novas mudanças podemos destacar o surgimento de novos procedimentos na área de desenvolvimento de software.
Ao longo de os últimos 20 anos, o software tem conquistado um papel essencial e crítico em nossa sociedade.
Em este sentido, a indústria do software vem experimentando um grande crescimento, tendo como conseqüências o aumento da complexidade do software e as exigências cada vez maiores do mercado.
Em a busca por soluções mais complexas e confiáveis, nos últimos anos as pesquisas relacionadas com agentes inteligentes têm proposto alternativas para o desenvolvimento de sistemas introduzindo a idéia de agentes inteligentes dentro de os sistemas de informação.
De esses estudos, muitas propostas emergem com o objetivo de facilitar e aprimorar o desenvolvimento de sistemas utilizando o conceito de agente.
Podemos entender como propostas as metodologias voltadas ao desenvolvimento de sistemas cujo paradigma é orientado a agentes, as linguagens de modelagem, as plataformas para simulação, execução e testes e os frameworks para construção de sistemas multiagentes.
Por definição, uma metodologia de desenvolvimento de software é um conjunto de procedimentos sistemáticos para a geração de modelos, que descrevem aspectos de um sistema sob desenvolvimento.
Ainda, pode ser definida como um conjunto de processos e técnicas de modelagem bem como uma seqüência de passos para gerar uma descrição (formal ou técnica) de um sistema.
Sistemas Multiagentes é o nome dado à subárea da Inteligência Artificial Distribuída que estuda o comportamento de um conjunto de agentes autônomos objetivando a solução de um problema que está além de as capacidades individuais.
Segundo Wooldridge, um agente e um sistema computacional que está situado em algum ambiente, e que e capaz de ações autônomas neste ambiente objetivando alcançar seus objetivos.
O advento dos sistemas multiagentes trouxe com si muitas disciplinas num esforço conjunto para construir aplicações distribuídas, inteligentes e robustas.
Estas disciplinas têm nos dado uma nova maneira de olhar para os sistemas distribuídos e nos deram um caminho para construir sistemas mais robustos.
Entretanto, muitos dos atuais métodos existentes de análise e projeto de aplicações não se aplicam ao paradigma multiagentes.
Em esse contexto, muitas metodologias, linguagens e ferramentas de suporte para o desenvolvimento de sistemas multiagentes têm sido propostas nos últimos anos com o objetivo de suprir a necessidade de um método eficaz para modelagem de um sistema multiagente.
De entre estas metodologias podemos destacar MASUP e MaSE, Troppos, Gaia.
Por se tratar de uma área de pesquisa relativamente nova quando comparada com a história da computação, as metodologias voltadas para o desenvolvimento de SMAs ainda possuem algumas lacunas, fazendo com que estas se tornem incompletas ou possuam procedimentos subjetivos durante a modelagem e construção dos sistemas.
Uma destas lacunas refere- se ao processo de identificação de papeis de agentes durante a etapa de modelagem.
Tal processo, muitas vezes, tem como base o conhecimento do analista que usa sua experiência ou a conveniência para a identificação de tais artefatos.
De entre as metodologias estudadas, não foi identificado nenhum metodo detalhado e objetivo para a identificação de papeis de agentes, direcionando assim, o estudo desta pesquisa, cujo intuito e preencher tal lacuna.
Em este contexto de sistemas multiagentes e de metodologias de desenvolvimento, este trabalho tem como objetivo fazer um estudo das principais metodologias de desenvolvimento de sistemas multiagentes, focando- se nas etapas de identificação e na modelagem inter e intra-agentes.
Após o estudo das metodologias, sera proposto um metodo alternativo para identificação e modelagem de agentes dentro de um sistema, procurando suprir as carências dos principais métodos já propostos.
Existem inúmeras metodologias para modelagem e construção de sistemas orientados a agentes, porém estas metodologias apresentam uma lacuna em comum, que diz respeito à identificação e especificação de papéis de agentes.
Em este sentido, emerge a questão de pesquisa deste estudo:
&quot;Como realizar a identificação e a especificação de papéis de agente durante o desenvolvimento de um sistema multiagentesf».
Uma vez definida a questão de pesquisa, definiu- se o objetivo geral e os objetivos específicos deste trabalho, os quais são apresentados a seguir.
O objetivo geral deste trabalho é realizar um estudo sobre as metodologias para sistemas multiagentes e propor um método para identificação e especificação de papéis de agentes e integras- lo ao ja existente processo de desenvolvimento de sistemas multiagentes MASUP.
Estudar e identificar os métodos para identificação de papéis de agentes utilizados por as metodologias de desenvolvimento de sistemas multiagentes.
Propor um método para a identificação de papéis de agentes tendo por base a Modelagem de Negócios.
Especificar uma ferramenta de software e desenvolver um protótipo que possibilite o uso do método proposto.
Aplicar o método proposto utilizando o protótipo da ferramenta desenvolvida e analisar os resultados.
A dissertação esta dividida em seis capítulos.
Em o capítulo 1 encontram- se a introdução ao tema, os objetivos propostos, as principais contribuições, o escopo do trabalho e por fim, a organização deste volume.
Em o Capítulo 2 é apresentado ao leitor os conceitos básicos acerca de sistemas multiagentes.
Em este capítulo são abordados os conceitos mais importantes sobre agentes de software bem como as suas características.
Também são introduzidas as características dos sistemas multiagentes, que tratam desde a organização interna, comunicação, colaboração e outras formas de interação entre os agentes que constituem um sistema de software agentificado.
Em o Capítulo 4 discorre sobre modelagem de negócio, disciplina ausente no MASUP e utilizada na proposta deste trabalho para a extensão dessa metodologia com um método para identificação de papéis de agentes tendo como base elementos do negócio, como por exemplo, o trabalhador do negócio.
Em o Capítulo 5 são apresentados ao leitor, os conceitos provenientes dos estudos relacionados a processo decisórios são apresentados bem como um framework que surgiu da junção destes conceitos e que representa o processo decisório como um todo.
Comparados com a história da Ciência da Computação, os Sistemas Multiagentes (SMA) são relativamente novos, tendo ganho grande atenção de pesquisadores nos últimos anos.
Com o crescimento da complexidade e do tamanho das aplicações, fez- se necessario um ambiente que suportasse a heterogeneidade e a distributividade das aplicações em tempo real.
Assim Surgiu a proposta dos SMAS, que representam uma solução a esse tipo de aplicação.
Bastos em, também afirma que os SMAS representam uma alternativa para resolver problemas relacionados a processos de negócio, em que se fazem necessárias a distribuição e a descentralização da tomada de decisão e execução de processos.
Em esse contexto, o principal objetivo do presente capítulo é apresentar um embasamento teórico acerca de o que são os SMAS e quais as suas características.
Motivações, áreas de aplicação e conceitos Serão apresentados nos tópicos a seguir.
Este capítulo serve como base para o próximo capítulo, onde serão estudadas algumas metodologias voltadas ao paradigma orientado a agente.
Para Oliveira, o conceito de agência deixou de ser utilizado apenas para especificar unidades computadorizadas com certos tipos de características (agentes), e passou a ser empregado também de uma maneira mais geral e abstrata, como uma nova metáfora para análise, especificação e construção de aplicações complexas.
Wooldridge afirma que um agente é um sistema computacional inserido num ambiente, e que é capaz de, através de ações autônomas nesse ambiente, atingir os seus objetivos propostos.
Assim, de acordo com muitos autores, um agente deve ter as seguintes características:
Observar e entender o ambiente em que está inserido;
Ter a capacidade de interagir com outros agentes;
Ser proativo, ou seja, ter iniciativa para tomada de ações a fim de atingir os seus objetivos.
Hoje, pode- se encontrar na literatura diversas definições acerca de o que vem a ser um agente e suas características.
Corrêa, por exemplo, define um agente como uma entidade que funciona contínua e autonomamente num ambiente onde existem outros processos e agentes.
Para Amandí, um agente é uma entidade computacional que possui um comportamento autônomo, o qual lhe permite tomar decisões para agir, levando em consideração as mudanças ocorridas no ambiente em que esta inserido e o desejo de alcançar seus objetivos.
Shoham afirma que um agente é uma entidade à qual se atribuem estados, denominados estados mentais.
Os estados mentais são:
Crenças, decisões, capacidades, objetivos, intenções, compromissos e expectativas;
Conceitos analogos ou similares aos humanos.
Sob este ponto de vista explicitado, o que faz qualquer componente de¡ Lardware ou software ser considerado um agente é precisamente o fato de que este pode ser analisado e controlado nos termos de os estados mentais.
D7Amico considera que, do ponto de Vista pratico, são agentes:
Robôs que atuam num ambiente interagindo com outros robôs ou com humanos em língua natural e utilizando sensores para captar informações do ambiente, tais como controle de motor e restrições de tempo; (
b) sistemas que interagem com outros sistemas ou com o ser humano.
Percebe- se a ação de saída gerada por o agente, visando à interação com o ambiente.
Normalmente, o agente não possui o controle total do ambiente em que participa, mas sim, uma influência sobre este.
Sendo assim, ações aparentemente idênticas podem apresentar efeitos completamente diferentes.
Isto confirma a importância da preparação do agente para possíveis falhas.
O agente tem, geralmente, um repertório de ações disponíveis capazes de modificar o seu ambiente.
Essas ações não são executadas em todas as situações.
Além disso, por ter em si pré-condições associadas, apenas as situações possíveis ocorrem.
O problema surge da decisão sobre ações precisam atuar para satisfazer, da melhor forma, os objetivos buscados por o agente.
De isso, são introduzidas as arquiteturas de agentes, confirmando o seu uso como sistemas de tomada de decisão embutidas num ambiente.
O agente é considerado como uma entidade encapsulada com capacidade de resolução de problemas e, desta forma, tem as seguintes características:
Autonomia -- capacidade de executar a maior parte de suas ações sem interferência direta de agentes humanos ou de outros agentes computacionais, possuindo controle total sobre suas ações e estado interno;
Habilidade social -- capacidade que possibilita a interação com outros agentes (computacionais ou humanos) para solucionarem problemas que de certa maneira não podem ser resolvidos por apenas um agente;
Reatividade -- capacidade de perceber seu ambiente e reagir num tempo satisfatório as mudanças, satisfazendo seus objetivos;
Proatividade -- capacidade de decisões ou principiar ações dentro de o ambiente por iniciativa própria.
A estrutura basica de um agente tem uma forma bem simples:
Ela possui uma estrutura de dados interna que ira se atualizar com a chegada de novas percepções.
Essa estrutura é utilizada nos procedimentos de tomada de decisão, os quais irão gerar ações para serem executadas (Figura 2.2).
Em a construção de programas que utilizam agentes, deve- se decidir como construir o mapeamento de percepções a ações.
Segundo Russel em, existem quatro tipos diferente de agentes, cada um possuindo aspectos diferenciados na busca da solução de problemas.
São eles:
Agentes reflexivos;
Agentes reflexivos que mantêm registro do mundo;
Agentes baseados em metas (&quot;Goal-based&quot;);
Agentes baseados na utilidade (&quot;Utility-- bastam&quot;).
Os agentes reflexivos têm como característica básica que cada condição ou percepção dispara alguma ação pré-estabelecida no programa, sendo essa relação conhecida como regra de condição-ação, por exemplo, &quot;se o carro da frente freou então começar a frear «(Figura 2.3).
Este agente faz uma simulação dos reflexos natos e das respostas aprendidas dos humanos.
Regra da Condição-Ação.
A seguir (Figura 2.4) tem- ma estrutura de um agente reflexivo, onde se percebe o relacionamento da percepção com a ação.
O segundo modelo de agentes é uma versão melhorada do anterior, onde o estado interno do agente (por exemplo, o conhecimento interno do agente e relações entre percepção e ação) é atualizado, ou seja, ocorre um registro do estado do mundo (Figura 2.5).
A estrutura deste tipo de agente mostra como a percepção corrente cornbinada com o estado interno antigo gera a atualização do estado corrente.
A parte mais interessante é a função update-state (Figura 2.6), que é responsável por a criação do novo estado interno.
O terceiro modelo é o agente baseado em metas (Figura 2.7).
Internamente, os agentes possuem uma idéia do estado atual do ambiente, sendo isso importante, porém, o agente também precisa de uma meta, em a qual terá a descrição de um estado desejável a ser atingido.
Assim, o agente pode fazer uma combinação do desejável corn os resultados de possíveis ações para tornar decisões na busca da meta.
Em algumas das vezes isso pode ser feito de forma simples, em as quais a meta é alcançada com apenas uma ação;
Em outras vezes, pode ser mais complicado, pois serão necessárias longas seqüências de ações para alcanças- la.
Note que esse tipo de agente não apenas cumpre uma ação pré-determinada:
Há uma preocupação com o futuro, &quot;o que acontecerá se eu fizer isso e aquilo?»
e &quot;isto irá me satisfazer?».
Em a Figura 2.8 te- se a estrutura deste tipo de agente.
O último tipo de agente é baseado na utilidade.
Apesar de a importância das metas, elas sozinhas não representam o bastante para se ter um comportamento de qualidade.
Em o agente baseado em metas só ha preocupação entre os estados &quot;satisfeito «e &quot;insatisfeito&quot;;
Enquanto que uma medida de performance mais geral permite uma comparação entre vários diferentes estados, de acordo com o quão satisfeito se busca estar.
Devido a o termino &quot;satisfeito «não soar de forma científica, utiliza- se o termo &quot;utilidade».
Isso quer dizer que, se há preferência por um estado, então este é mais útil para o agente.
Em o agente baseado na utilidade, existe uma preocupação com o grau de satisfação alcançado.
Isso facilita a tomada de decisões em duas situações:
Primeira, quando há metas confiitantes e somente uma de elas pode ser alcançada;
Segunda, quando há várias metas, porém, nenhuma pode ser alcançada de forma correta.
Em este caso, o fator utilidade auxiliará na busca do estado que consegue um melhor grau de satisfação para o agente.
A estrutura global do agente baseado na utilidade é ilustrada na Figura 2.10.
Segundo Jennings, para que possam agir de maneira autônoma, os agentes podem ter várias habilidades:
Percepção e interpretação de mensagens, raciocínio baseado em crenças, tomada de decisão, planejamento e habilidade para executar planos incluindo passagem de mensagens.
Jennings categoriza os agentes quanto a o nível de capacidade de resolução de problemas:
Reativos -- reagem a alterações no ambiente ou a mensagens de outros agentes.
Não têm capacidade de raciocínio sobre suas intenções, reagindo tão somente sobre regras e planos estereotipados.
Suas ações podem ser:
Atualizar a base de fatos e enviar mensagens para outros agentes ou para o ambiente.
Intencionais -- têm a habilidade de raciocínio sobre suas intenções e crenças, e sobre a criação e execução de planos de ações.
São considerados como sistemas de planejamento que selecionam objetivos -- de acordo com suas motivações, e raciocinam sobre eles -- detecção e resolução de conflitos e coincidências de objetivos, seleção e criação de planos (agendamento de ações), detecção de confiitos entre planos (alocação de recursos) e, se necessario, execução e revisão planos.
Sociais -- possuem modelos de outros agentes, sobre os quais raciocinam para tomar decisões e criar planos.
Em computação, o termo arquitetura pode compreender uma faixa razoavel de possibilidades, principalmente no aspecto complexidade.
As arquiteturas de agentes não são uma exceção e podem ser classificadas de acordo com as necessidades da aplicação, dos usuários e do grau de sofisticação ou nível de inteligência dos agentes.
Os autores\ Vooldridge e Jennings em, se baseiam na forma de construção dos agentes envolvidos para dividir as arquiteturas em três areas:
Arquiteturas deliberativas -- seque a abordagem clássica da Inteligência Artificial, onde os agentes contêm um modelo simbólico do mundo, explicitamente representado, e cujas decisões são tomadas via raciocínio lógico, baseado em casamento de padrões e manipulações simbólicas.
Esse tipo de arquitetura e utilizado nos agentes baseados em metas e agentes baseados na utilidade segundo a classificação de Russel, em.
Arquiteturas reativas -- as arquiteturas reativas são aquelas que não incluem nenhum tipo de modelo central e simbólico do mundo e não utilizam raciocínio complexo e simbólico.
Baseiam- se na proposta de que um agente pode desenvolver inteligência a partir de interações com seu ambiente, não necessitando de um modelo pré-estabelecido.
Esse tipo de arquitetura é utilizado nos agentes reflexivos e nos agentes reflexivos com estado na classificação de Russel,.
Arquiteturas híbridas -- misturam componentes das arquiteturas deliberativas e reativas, o que as tornam mais adequadas e funcionais para a construção de agentes.
Elas propõem um subsistema deliberativo, que planeja e toma decisões da maneira proposta por a Inteligência Artificial simbólica;
E um reativo, capaz de reagir a eventos que ocorrem no ambiente sem ocupar- se de raciocínios complexos.
Weiss, apresenta quatro tipos de arquiteturas para agentes, que se aproximam muito da classificação proposta por Wooldridge e Jennings em.
As decisões tomadas são implementadas em alguma forma de mapeamento direto da situação para a ação, usando regras de condição/ ação.
Camadas Apresentam a tomada de decisão por meio de camadas de software.
Agentes baseados em lógica -- nesses agentes a decisão é tomada através de dedução lógica (agentes baseados em metas e agentes baseados na utilidade segundo a classificação de Russel· Agentes reativos -- nesses agentes a decisão a tomar é implementada em alguma forma de mapeamento direto da situação para a ação (agentes reflexivos e agentes reflexivos com estado, de acordo com a classificação de Russel).
Agentes híbridos -- nesses agentes a decisão é tomada via varias camadas de software, onde cada uma esta mais ou menos explicitamente raciocinando sobre o ambiente em diferentes níveis de abstração.
Agentes de crença-desejo- intenção -- nesses agentes a decisão é tomada dependendo da manipulação de estruturas de dados representando as crenças, desejos e intenções do agente.
Embora a construção de agentes nos leva a pensar e desenvolver usando o paradigma orientado a objetos, e de que existem algumas similaridades entre agentes e objetos, estas duas entidades não são semelhantes, tanto do ponto de vista de projeto, quanto de implementação.
Em, Kendall apresenta uma definição de agentes em comparação com objetos:
&quot;Agentes são extensões de objetos, eles apresentam todas as características que os objetos possuem, porém, incorporam novas características como comportamento autônomo, pró-atividade, habilidade social, reatividade e comportamento inteligente».
Objetos são definidos como entidades computacionais que encapsulam algum estado, são capazes de executar ações, ou métodos sobre o seu estado, e de se comunicarem entre si através de troca de mensagens, tradicionalmente implementadas como chamada de métodos.
Esta é considerada a primeira diferença entre objetos e agentes.
Uma maneira de entender como os objetos têm controle sobre o seu estado interno é pensar nas técnicas de programação orientadas a objetos, onde variáveis e métodos podem ser declarados como privados, ou seja, são acessados internamente apenas por o próprio objeto.
Desta forma, o objeto tem controle sobre o seu estado interno, porém, não tem controle sobre o seu comportamento;
Pois, uma vez que um método é declarado como público e invocado por outro objeto, esse deve ser executado sem que haja interferências.
Não existe nenhum controle em relação ã decisão de executar ou não o método, já que a ação é invocada por outro objeto através da troca de mensagens.
Por isso, objetos são considerados passivos porque seus métodos são executados apenas quando alguma entidade externa faz uma requisição através de uma mensagem.
Por outro lado, agentes são considerados ativos, já que podem iniciar uma ação sem a intervenção humana ou de outro agente.
Agentes são considerados entidades autônomas, uma vez que observam o ambiente em busca de informações necessárias para executar suas ações e atingir seus objetivos Além disso, os agentes podem ser interativos, ou seja, eles são capazes de usar diversas formas de mensagens, as quais podem suportar chamadas de métodos e pedidos de informações, entre outras propriedades.
Devido a o fato de agentes serem autônomos, eles podem iniciar interações e responder a pedidos da maneira mais conveniente, já que, conforme James Odell em, agentes são objetos que podem dizer &quot;Sim «ou &quot;Não».
Esta é outra diferença entre objetos e agentes:
Agentes não apenas respondem à chamadas de métodos, mas também a eventos que ocorrem dentro de o ambiente em que estão inseridos.
Agentes proativos irão procurar no ambiente alguns eventos ou mensagens que possam determinar o tipo de ação que deverá ser executada.
Objetos são passivos, respondendo apenas a chamadas de métodos.
Entretanto, algumas técnicas foram introduzidas na programação orientada a objetos como, por exemplo, o event listener, que permite objetos a executar métodos quando algum evento ocorre.
Outra característica importante quando se discute a diferença entre objetos e agentes é que os agentes possuem a sua própria thread de controle -- no padrão de objetos existe apenas uma thread em todo o sistema.
Muitas linguagens de programação adicionaram propriedades que permitem o desenvolvimento de objetos concorrentes utilizando threads, porém isso é o mais próximo que um objeto pode chegar ao conceito de autonomia.
Quanto a a comunicação, esta é considerada assíncrona entre agentes, uma vez que não existe um fluxo de controle pré-definido.
Um agente pode realizar uma solicitação para outro e continuar com a execução do seu fluxo de ações sem que haja uma resposta.
Ja no modelo orientado a objetos, quando um objeto invoca um método de outro, ele interrompe o seu fluxo de execução até que receba uma resposta (ou que o método invocado termine sua execução).
Para Wooldridge, existem três distinções básicas entre a visão de objetos e a visão de agentes, que são resumidas da seguinte maneira:
Agentes expressam uma idéia de autonomia muito mais forte do que objetos;
Em particular, agentes decidem por eles mesmos quando executar uma ação requisitada por outro agente;
Agentes possuem um comportamento flexível (reativo, proativo e social);
E objetos possuem um comportamento restrito definido por o estado interno dos seus métodos e variáveis;
Sistemas Multiagentes são considerados multi-threaded, uma Vez que cada agente possui pelo menos uma thread em seu controle de fluxo de execução de ações.
Devido a o grande crescimento da utilização de computadores em redes -- e pode- se tomar a Internet como um importante exemplo prático deste fenômeno, onde a informação está distribuída através dos diversos nodos que a compõe, situações onde uma entidade computacional possui todo o conhecimento necessário para resolver problemas sem o auxílio de outras estão tornando- se cada vez mais raras.
Problemas como aumento da complexidade dos sistemas e a necessidade de tratamento de grandes massas de dados para a resolução de problemas têm levado pesquisadores a buscar métodos de resolução baseados em arquiteturas distribuídas.
Isso tem acontecido porque as arquiteturas distribuídas vêm se mostrado muito úteis para resolução de problemas onde a própria natureza e distribuída.
Pode- se pensar na aplicação de um modelo monolítico para a resolução de problemas numa realidade distribuída, onde os eventos ocorrem concorrentemente.
No entanto, isto requer uma complexa etapa intermediária de mapeamento que, muitas vezes, resulta num algoritmo não-computável.
De a mesma forma, a distribuição pode levar a descoberta de algoritmos computacionais que talvez não teriam sido descobertos com uma abordagem centralizada.
Em outros casos, como negociação entre empresas independentes, uma abordagem centralizada é inviável, já que cada empresa deseja manter suas informações num âmbito privado por razões mercadológicas.
Sendo um agente uma entidade que encapsula conhecimento sobre algum domínio, nada mais natural do que agrupar agentes que possuam parte do conhecimento envolvido na estratégia de resolução de um problema e que, a partir de isso, interajam com o objetivo de complementarem suas habilidades.
Assim, da mesma forma que no mundo real existem empresas com funcionários possuidores de diferentes habilidades e que, utilizando essas habilidades, desenvolvem parte das atividades necessárias ao processo produtivo, pode- se compor uma sociedade de agentes onde para cada agente seja alocada um subconjunto das habilidades requeridas por a estratégia de solução onde a cada um seja designado parte das tarefas a serem cumpridas, de acordo com sua disponibilidade de recursos (computacionais, materiais, tempo).
Pode- se distinguir duas principais classes de sistemas com múltiplos agentes:
Sistemas de Resolução Distribuída de Problemas, em os quais os agentes envolvidos são explicitamente projetados para, de maneira cooperativa, atingirem um dado objetivo, considerando- se que todos os eles são conhecidos a priori e supondo que todos são benevolentes, existindo desta forma confiança mútua em relação as suas interações;
Sistemas Abertos, em os quais os agentes não são necessariamente projetados para atingiram um objetivo comum, podendo ingressar e sair do sistema de maneira dinâmica.
Em este caso, a chegada dinâmica de agentes desconhecidos precisa ser levada em consideração, bem como a possível existência de comportamento não benevolente no curso das interações.
Dentro de esta segunda classificação, estão inseridos os Sistemas Multiagentes.
Em este tipo de sistema, investiga- se o comportamento de um conjunto de agentes autônomos, possivelmente pré-existentes, que interagem objetivando a resolução de um problema que está além de as capacidades de um único indivíduo.
Desta forma, o comportamento global do sistema deriva da interação entre os agentes que fazem parte do sistema.
A partir de isso, está envolvida a busca por uma funcionalidade neste sistema que permita que estes agentes possam coordenar seus conhecimentos, objetivos, habilidades e planos individuais de uma forma conjunta, em favor de a execução de uma ação ou da resolução de algum problema onde se faça necessária a cooperação entre os agentes Em estes casos, diz- se que o agente exibe um comportamento social.
Moulin e Chaib-Draa evidenciam as características que constituem vantagens significativas dos Sistemas Multiagentes sobre um solucionador de problemas monolítico, de entre elas:
Maior rapidez na resolução de problemas através do aproveitamento do para lelismo;
Diminuição da comunicação por transmitir somente soluções parciais em alto nível para outros agentes ao invés de dados brutos para um lugar central;
Mais flexibilidade por ter agentes de diferentes habilidades que são dinamicamente agrupados para resolver problemas;
Aumento da segurança por a possibilidade de agentes assumirem responsabilidades de agentes que falham.
A justificativa de aplicação da tecnologia de agentes na concepção de Sis temas de Informação é justificada quando o problema possui as seguintes características:
O domínio envolve distribuição intrínseca dos dados, capacidades de resolução de problemas e responsabilidades;
Necessidade de manter a autonomia de subpartes, sem a perda da estrutura organizacional;
Complexidade nas interações, incluindo negociação, compartilhamento de informação e coordenação;
Impossibilidade de descrição da solução do problema a priori, devido a a possibilidade de perturbações em tempo real no ambiente (Falhas de equipamento) e processos de negócio de natureza dinâmica.
As características da abordagem multiagentes impõem necessidades que devem ser viabilizadas para que o sistema possa ser considerado eflcaz.
Considerando o exemplo de uma organização empresarial tradicional como sendo uma sociedade de pessoas que combinam esforços para a resolução de um problema comum, pode- se dizer que essa organização constitui um exemplo de sistema de resolução de problemas de natureza distribuída.
Em esse caso, para se obter resultados favoráveis nesta empresa devem ser criadas regras para definir uma estrutura que viabilize o alcance dos seus objetivos e implementação de suas estratégias de funcionamento.
Em SMA, deve- se considerar critérios que viabilizem e garantam a coerência das ações dos agentes, visando atingir de maneira efetiva os objetivos propostos.
Moulin e Chaib-Dras propõem um framework que fornece uma estrutura de analise e classificação da maior parte das atividades de pesquisa em Sistemas Multiagentes, de o qual pode- se citar duas perspectivas:
Perspectiva do agente enfoca elementos que caracterizam o agente envolvido em SMA.
São eles:
Categorias de agente, estrutura e manutenção do conhecimento, habilidades de raciocínio, habilidades de adaptação e aprendizado e arquiteturas de agente.
Perspectiva de grupo reúne aspectos de grupo, tais como:
Organização, coordenação, cooperação, negociação, comportamento coerente, planejamento, comunicação e interação.
Dentro de a perspectiva de grupo, pode- se definir três grandes grupos de aspectos a serem considerados no projeto de SMA:
Aspectos fundamentais definem as características que devem ser viabilizadas para a garantia da compatibilidade entre as ações dos agentes que constituem o sistema.
Aspectos arqnitetnrais definem as características que devem ser providas por a arquitetura a ser adotada para a viabilização dos aspectos fundamentais dentro de o sistema.
Aspectos ambientais definem as características do ambiente em o qual os agentes do sistema estão inseridos, para que se possa determinar os tipos de técnicas de percepção que devem ser utilizadas por estes agentes.
A coerência de um Sistema Multiagentes é viabilizada por a garantia de um comportamento coerente de seus agentes, ou seja, as ações dos agentes fazem sentido em relação a os objetivos comuns do grupo.
Dentro de a perspectiva de grupo, serão examinadora, a seguir, os aspectos fundamentais a serem considerados para o desenvolvimento de sistemas multiagentes para a garantia da compatibilidade das ações dos agentes.
Atualmente, adotar a idéia de organização e de mudanças organizacionais é importante para criar Sistemas Multiagentes mais adaptáveis.
No entanto, é necessário notar a distinção entre os termos estrutura e organização, como indica.
Entende- se estrutura como sendo o padrão de relações de informação e controle entre agentes, bem como a distribuição das habilidades entre eles.
Desta forma, a estrutura provê uma visualização de como os problemas são tratados e solucionados por o grupo e o papel que cada agente desempenha dentro de o mesmo, com isso, papéis e relacionamentos são especificados para atender as condições abaixo descritas:
Cobertura -- qualquer habilidade necessária para a resolução do problema deve estar inserida no rol de habilidades de ao menos um agente;
Conectividade -- agentes devem interagir de maneira que suas habilidades sejam integradas e desempenhadas em contribuição a uma solução global;
Potencialidade -- cobertura e conectividade devem ser atingíveis dentro de limitações computacionais e de comunicação, assim como as especificações de confiabilidade do grupo.
Desta forma, cada agente desempenha um ou mais papéis específicos no sistema.
Define- se como papel aquilo que é esperado que o agente faça dentro de a organização, ou seja, um conjunto de responsabilidades bem definidas dentro de o contexto global do sistema que o agente pode cumprir com certo grau de autonomia Esta perspectiva pode tornar o projeto de sistemas paralelos e distribuídos menos complexo e de gerenciamento mais simples em relação a a maioria das metáforas tradicionais de sistemas concorrentes, que, de acordo com Zambonelli em, devem considerar:
Cada agente tem controle próprio sobre o seu processamento, sendo totalmente responsável em cumprir o seu papel;
As interdependências entre os componentes do sistema são reduzidas, uma vez que cada agente têm embutida a maior parte da funcionalidade para cumprir o seu papel.
Essa independência facilita o projeto por fornecer uma clara separação entre os níveis de componente (micronível) e do sistema (macronível).
Em muitos casos, SMAs pretendem suportar ou controlar alguma organização existente na realidade, pois sua adoção reduz a distancia entre os sistemas de software e os sistemas de mundo real, o que simplifica o desenvolvimento do sistema.
Para Zambonelli, em SMA o comportamento autônomo e proativo exibido por os agentes constituintes sugere que aplicações podem ser projetadas tomando- se como exemplo o comportamento e a estrutura de sociedades humanas.
O conceito de organização refere- se ao conjunto de compromissos globais, crenças mútuas e intenções comuns aos agentes, quando agem juntos para atingir um dado objetivo.
Estes elementos definem um conjunto de diretrizes a serem seguidas por cada um dos agentes do SMA, descrevendo uma política de interação entre eles.
Estas diretrizes podem impedir a ocorrência de situações caóticas no SMA, criando padrões comportamentais que evitam que o SMA se torne um sistema desorganizado, facilitando ou mesmo viabilizando a realização dos objetivos globais da sociedade.
Para Bond e Gasser, um sistema multiagentes pressupõe coordenação entre um conjunto existente de agentes autônomos e inteligentes.
Fundamentalmente, esta envolvida a busca por uma funcionalidade neste sistema, a qual permita que estes agentes possam coordenar seus conhecimentos, objetivos, habilidades e planos individuais de uma forma conjunta, em favor de a execução de uma ação ou da resolução de algum problema.
Para Jennings, coordenação é o processo por o qual um agente raciocina sobre suas ações locais e ações de outros agentes com o objetivo de garantir que funcione de maneira coerentel.
A definição de estratégias que conciliem os interesses individuais de cada agente para que as atividades relacionadas desenvolvam- se de modo coordenado é um dos aspectos fundamentais a serem considerados no projeto de sistemas multiagentes Jennings, em, afirma que a necessidade de coordenação entre múltiplos agentes surge do fato de que:
Existem dependências entre as ações dos agentes, ou seja, a ação de um agente pode ser pré-requisito da ação de outro agente;
Nenhum indivíduo tem competência, recursos ou informação suficiente para resolver um problema completo de forma independente;
Onde lCoerência significa quão bem um sistema comporta- se como uma unidade.
Deve ser garantido o respeito ãs restrições globais do problema;
Devem ser viabilizados procedimentos que garantam a harmonia na execução de uma tarefa de forma conjunta por mais de um agente.
A coordenação é um fator vital para o funcionamento de um SMA, pois sem coordenação os benefícios advindos da resolução distribuída de problemas desaparecem e a comunidade pode degenerar numa caótica coleção de indivíduos que agem de forma incoerente em relação a o sistema como um todo.
Para isso, basta que um único agente tenha uma visão parcial ou imprecisa do sistema e que suas ações possam interferir nas ações de outros agentes ao invés de suportas- las Segundo Lesser e Corkill apud, os objetivos do processo de coordenação visam garantir que:
Todas as partes necessárias ao sistema estejam inseridas nas capacidades funcionais de ao menos um agente;
Os agentes interajam de maneira a permitir que suas atividades sejam desenvolvidas e integradas numa solução global;
Os membros da sociedade atuem com propósitos e consistentemente;
Todos esses objetivos sejam atingíveis dentro de as limitações computacionais impostas e dos recursos disponíveis.
Durfee em identifica três fatores basicos que devem estar presentes para uma coordenação bem sucedida:
Existência de uma estrutura que permita aos agentes interagirem de forma preditiva;
Flexibilidade nas interações de tal forma que os agentes possam operar em am bientes dinâmicos e agir satisfatoriamente com uma visão parcial e imprecisa da sociedade;
Os agentes devem possuir conhecimento e capacidade de raciocínio suficiente para explorar esta estrutura e flexibilidade.
A maneira mais fácil de garantir um comportamento coerente dentro de um SMA é implantar um agente que tenha uma perspectiva mais ampla do sistema, atuando como um coordenador que, reunindo informações sobre toda a sociedade, seria responsavel por criar planos e atribuir tarefas aos membros da sociedade.
No entanto, esta não é uma abordagem prática em sistemas reais por ser muito difícil criar um agente que se mantenha informado sobre todas as intenções e crenças de todos os agentes da sociedade.
Além disso, um coordenador centralizado se tornaria um gargalo de comunicação, que degradaria a performance do sistema.
Também deve ser consideraro o fato de que, nesta abordagem, uma falha do agente coordenador comprometeria o funcionamento de todo o sistema, apesar de que, neste caso, poderiam ser adotados mecanismos de tolerância a falhas onde outro agente poderia assumir o papel de coordenador.
A partir de isso, uma problemática apresentada para o problema de sistemas multiagentes passa a ser a manutenção da coerência global sem um controle global explícito.
Para o autor, &quot;os agentes devem raciocinar a respeito de as ações, mas também sobre o processo de coordenação em si».
Uma desvantagem advinda da distribuição do controle e dos dados é a dificuldade de se ter conhecimento sobre o estado global do sistema, que está disperso através da comunidade, sendo que cada indivíduo possui uma visão parcial e imprecisa desta perspectiva.
Seghrouchni, em, elicita os principais requisitos para a coordenação, abaixo listados:
Comunicação entre os agentes;
Reconhecimento das interações potenciais entre planos;
Negociação entre os agentes.
O conceito de coordenação define aspectos gerais de interação entre agentes de forma a viabilizar a coesão entre seus comportamentos e ações em relação a os objetivos globais do sistema.
A partir de isso, apresenta- se uma taxonomia para os processos de coordenação que possui duas abordagens principais:
Cooperação -- é a coordenação entre agentes não-antagônicos2.
Negociação -- é a coordenação entre agentes competitivos ou que agem em interesse próprio.
Lux e Steiner consideram que a cooperação acontece quando vários agentes planejam e executam suas ações de uma forma coordenada, sendo que é requerida quando:
O agente não consegue encontrar um plano local que contemple o objetivo;
O conceito de não-antagônico define que os interesses dos agentes não são conflitantes.
O plano adequado ao objetivo envolve ações de outros agentes;
O agente considera que um plano pode ser melhor (de menor custo ou mais eficiente) do que um plano local;
Durante a fase de planejamento:
O agente encontra planos incompletos, que podem ser completados em cooperação com outros agentes;
Ou -- o agente encontra eventos para os quais não está habilitado a responder, mas sabe que outros agentes estão.
Os objetivos genéricos para a cooperação entre agentes de acordo com são:
Diminuição do tempo de execução de uma tarefa através do paralelismo;
Aumento do escopo de tarefas executáveis através do compartilhamento de TGCUFSOS;
Maior probabilidade de finalização de uma tarefa em função de sua dupla incumbência, a ser realizada possivelmente através de distintos métodos de execução;
Diminuição da interferência entre tarefas evitando interações prejudiciais.
O processo de planejamento constitui uma forma especializada do processo de cooperação, o qual tem como produto um conjunto de atividades organizadas com um curso de ação definido, em que estas atividades são distribuídas entre agentes capacitados a executas- las.
Esse planejamento pode ocorrer de duas formas:
Centralizada -- um único agente constrói o plano;
Distribuída -- pressupõe que o plano é construído por mais de um agente, sendo considerada quando um único agente não possui uma visão global das atividades do grupo.
Segundo Agre e Chapman, em, a utilização de planos pode ser vista de duas maneiras:
Plano como programa -- O uso de plano é a execução de determinado procedimento, sendo que esta visão implica na execução de planos de forma independente do domínio, e a construção de planos pode ser independente ou dependente do domínio, algorítmica ou baseada em casos, formalmente correta ou heurística.
Em esta visão, o plano pode ser decomposto em ações primitivas que podem ser simplesmente executadas através de um dispositivo independente do domínio.
As razões para dúvidas da visão de plano como programa são:
Possui problemas intratáveis computacionalmente;
É inadequada para um mundo caracterizado por eventos imprevisíveis, tais como as ações de outros agentes;
Requer que planos sejam muito detalhados;
Falha ao tratar problemas de relacionamento do texto do plano para a situação concreta.
Planos como comunicação -- O uso de plano é seguir instruções em linguagem natural, sendo que um plano não determina diretamente as ações de um agente.
Ao invés de isso, um plano é um recurso que o agente utiliza para decidir o que fazer.
Em esta visão, resolver qual atividade um plano sugere requer um esforço interpretativo contínuo.
A única situação completa conhecida é a situação inicial passada ao planejador.
Durante a execução, as circunstâncias que aparecem podem somente determinar ramificações condicionais ou causar um retorno do controle ao planejador se algo está obviamente errado.
A negociação representa um papel fundamental em atividades cooperativas dentro de sociedades humanas, permitindo que pessoas resolvam conflitos que interferem no comportamento cooperativo.
O processo de negociação atua sobre o melhoramento de concordância acerta de pontos de vista comuns ou planos através de compartilhamento de estruturas de informações relevantes, ocorrendo entre agentes com objetivos diferentes em o qual decisão conjunta é alcançada por dois ou mais agentes, cada um tentando alcançar seus objetivos individuais.
Para o autor, as seguintes abordagens de negociação podem ser utilizadas:
Centradas no ambiente -- foca o problema de como as regras do ambiente podem ser desenvolvidas para que os agentes em ele envolvidos, independente de suas origens, capacidades, ou intenções, interajam produtivamente e razoavelmente.
Em esse caso, o mecanismo de negociação resultante deve possuir as seguintes propriedades:
Eficiência -- os agentes não devem desperdiçar recursos para chegar a um acordo;
Estabilidade -- nenhum agente deve ter um incentivo para desviar das estratégias acordadas;
Simplicidade -- deve impor baixas demandas computacionais e de largura de banda3 sobre os agentes;
Distribuição -- não deve requerer um tomador de decisões centralizado;
Simetria -- não deve haver diferenciação no tratamento dos agentes por razões arbitrarias ou inapropriadas.
Centradas no agente -- assume que os agentes são economicamente racionais.
O conjunto de agentes deve ser pequeno e necessita ter uma linguagem e abstração do problema comuns, e têm que alcançar uma solução comum.
A que satisfará todos os seus objetivos, cuja utilidade para um agente é a quantidade que ele pagará subtraindo o custo do acordo.
Agentes discutem um conjunto de negociações, que é o conjunto de todos os acordos que têm uma utilidade positiva para todo agente.
De o processo de negociação, três situações que podem surgir são elicitadas abaixo:
Conflito -- o conjunto de negociações está vazio;
Compromisso -- agentes preferem trabalhar de maneira isolada, mas se isto não for possível, chegarão a um acordo negociado;
Cooperativo -- todos os acordos, no conjunto de negociações, são preferidos por ambos agentes prioritariamente à realização dos objetivos de forma isolada.
Dentro de um Sistema Multiagentes, uma política de cooperação se faz necessária, uma vez que e atraves desse mecanismo que os agentes expressam suas necessidades a outros agentes a fim de realizar uma determinada tarefa.
O mecanismo de cooperação de agentes visa determinar a maneira como os agentes expõem suas necessidades a outros agentes para atingirem determinados objetivos.
O processo de cooperação pode acontecer de duas maneiras:
Partilha de Tarefas (Task Sharing) e Partilha de Resultados (Result Sharing).
A primeira se caracteriza por a necessidade de agentes auxiliares durante a execução de uma tarefa por um determinado agente, enquanto que na segunda, os agentes disponibilizam informações para a sociedade, prevendo que algum outro agente tenha necessidade de elas em determinado momento.
Desta forma, na grande maioria das vezes, durante a realização de tarefas, os agentes necessitam da ajuda dos outros agentes da sociedade ou, de forma contraria, utilizam outros agentes para que o objetivo geral do sistema possa ser atingido.
Conseqüentemente, a localização de um determinado agente dentro de a sociedade se faz necessária pra que a cooperação possa ser efetuada.
As principais abordagens de arquiteturas de sociedades de agentes, onde a cooperação está em destaque são:
Em uma sociedade de agentes baseada na arquitetura quadro-negro (Blackboard) os agentes não se comunicam entre si de uma maneira direta, mas sempre através de um quadro-negro.
Este tipo de arquitetura não surgiu com o aparecimento dos sistemas multiagentes, sendo utilizada anteriormente como solução para outros paradigmas O quadro-negro é uma estrutura de dados persistente onde existe uma divisão em regiões ou níveis, visando facilitar a busca de informações.
Tal estrutura é um meio de interação entre os agentes (uma espécie de repositório), em o qual estes escrevem e lêem mensagens que serão usadas para atingir o objetivo do sistema.
Podese assim dizer que um quadro-negro é uma memória de compartilhamento global onde existe uma quantidade de informações e conhecimento usados para leitura e escrita por parte de os agentes.
Em Sistemas Multiagentes, os quadros-negros são utilizados como um repositório de perguntas e respostas.
Os agentes que necessitam de alguma informação escrevem seu pedido no quadro à espera que outros agentes respondam, a medida que acessem o mesmo.
O processo de gravação e recuperação das mensagens no quadro-negro por os agentes pode se tornar demorado demais para um sistema em tempo real.
Essa particularidade faz o uso da arquitetura quadro-negro ser inviável para sistemas dessa natureza;
Em que o tempo de resposta adequado é fundamental para satisfazer sua funcionalidade.
Em esta arquitetura (Message Passing), os agentes se comunicam diretamente uns com os outros diretamente, através de mensagem assíncronas.
Não existe o papel do quadro-negro como intermediário na interação, mas pode existir um agente facilitador de comunicação.
Desta forma, é necessário que cada agente saiba os nomes e endereços de todos os agentes que formam o sistema para que as mensagens possam ser trocadas.
Este método é mais eficiente no sentido de obter as mensagens em tempo hábil, mas por outro lado, sua implementação é dificultada por o crescimento das diferentes mensagens trocadas por os agentes que compõem a sociedade.
Para que as trocas de mensagens ocorram de maneira adequada entre os agentes é necessário estabelecer um protocolo de conversação.
O protocolo é quem dita as regras e impõe o formalismo necessário para que os as mensagens sejam encaminhadas e compreendidas por os agentes.
Considerando uma arquitetura de troca de mensagens, onde o número de agentes é muito grande, a emissão de uma mensagem do tipo broadcast levará um tempo que pode inviabilizar todo o processo de comunicação do sistema.
Diante deste problema, surgiu a arquitetura federativa (Federal system), Figura 2.14, onde os agentes da sociedade são divididos em grupos ou federações segundo um critério de agrupamento escolhido.
Junto a cada grupo de agentes encontram- se os agentes facilitadores responsáveis por receber a mensagem que chega a cada grupo e por encaminhas- la para o agente destinatário presente naquele grupo.
A vantagem deste tipo de arquitetura é que o agente facilitador tem a propriedade de identificar se a mensagem recebida que chega é destinada a algum agente de seu grupo e, sendo este o caso, fazer a devida entrega.
A arquitetura federativa propõe a diminuição do fluxo de mensagens, principalmente as desnecessárias, entre os agentes que formam a sociedade, pois os facilitadores têm a capacidade de remetê- as ao respectivo destinatário sem a necessidade de enviar- las a todos os agentes.
O presente capítulo surge como a primeira referência do embasamento teórico deste trabalho.
Em ele foram apresentadas informações acerca de o assunto de Sistemas Multiagentes bem como todas as informações que servirão como um dos pilares para a proposta de identificação de papéis de agentes inteligentes.
Desde as características mais basicas como autonomia, pro-atividade e reatividade até conceitos relacionados ao comportamento dos agentes dentro de uma sociedade e aos processos de cooperação entre os mesmos, todos terão um papel relevante durante o processo de pesquisa que dará origem ao resultado final deste estudo.
Em o capítulo seguinte, será discutido o assunto referente a metodologias voltadas ao paradigma orientado a agentes.
Metodologias para SMAS &quot;A liberação da energia atômica mudou tudo, menos nossa maneira de pensar «fi ALBERT EiNsTEiN Sistemas Multiagentes são cada vez mais usados em desenvolvimento de software.
Segundo estes representam uma alternativa para se resolver problemas em processos de negócio.
Uma grande vantagem deste tipo de sistema é a possibilidade de descentralização e distribuição na tomada de decisão.
A construção de tais sistemas necessita seguir uma metodologia de desenvolvimento.
Desta forma, muitas metodologias vêm sendo propostas ultimamente com o objetivo de facilitar a construção de tais sistemas.
De acordo com, metodologias geralmente consistem numa coleção de modelos, e associados a estes modelos, um conjunto de guidelines.
O intuito destes modelos é formalizar o sistema de maneira compreensível.
Estes modelos, no início do processo de especificação, representam o sistema de maneira abstrata, e durante o andamento das fases de analise e projeto se tornam mais detalhados, passando a ficar mais perto de a implementação.
Em as Subseções seguintes, serão apresentadas as principais metodologias para desenvolvimento de SMA e um estudo sobre o método de identificação de agentes sera realizado em cada uma de elas.
Em este capítulo serão apresentadas três metodologias para a modelagem de sistemas multiagentes que foram introduzidas no cenário acadêmico.
Para cada uma destas metodologias uma descrição sobre o seu processo é apresentada e posteriormente é realizada uma analise sobre a forma como a metodologia trata a identificação de papéis de agentes durante o processo de modelagem de um SMA.
A metodologia Multiagent Systems Engineering (MaSE) surgiu de esforços realizados por pesquisas do Instituto de Tecnologia da Força Aérea Americana.
Em, o autor destaca que o foco principal desta metodologia é auxiliar o projetista a ter um conjunto inicial de requisitos e analisar, projetar e implementar sistemas multiagentes.
A MaSE é semelhante as metodologias tradicionais de engenharia de software, porém é orientada para a construção de sistemas multiagentes.
A metodologia divide- se em duas fases:
Analise e Projeto.
A primeira é dividida nos seguintes passos:
Capturar Objetivos, Aplicar Casos de Uso e Reflnar Papéis.
Os passos de Criar Classes de Agente, Construir Conversas, Montar Classes de Agente e Projeto do Sistema são parte integrante da fase de Projeto.
A Figura 3.1 mostra uma visão geral das fases da metodologia.
Em a etapa denominada Capturar Objetivos, ocorre a identificação dos objetivos do sistema bem como a estruturação dos mesmos.
A identificação dos objetivos deve ser extraída dos requisitos definidos na especificação inicial do sistema, ou seja, devem ser capturados os objetivos de alto-nível.
Esta etapa deve ser realizada com muito cuidado, pois uma alteração tardia pode gerar um impacto indesejável no projeto.
Os objetivos são organizados por sua importancia, em que cada nível superior contém os objetivos mais gerais do sistema e os níveis inferiores contém os objetivos mais específicos, ou sub-objetivos.
A etapa chamada Aplicar CasMASUP.
os de Uso é de grande importancia para o mapeamento de papéis e para a associação de tarefas no sistema.
Em este, devem ser desenhados os comportamentos esperados para o alcance dos objetivos, por meio de diagramas de caso de uso.
Elaborados os casos de uso, estes devem ser reestruturados em diagramas de seqüência, auxiliando na determinação das comunicações requeridas por o sistema multiagentes.
Estes diagramas mostram a seqüência de eventos entre múltiplos papéis, e por conseqüência definem a comunicação mínima do sistema.
Papéis identificados nesta etapa formam um conjunto inicial que será detalhado no próximo passo com o objetivo de gerar a completa identificação dos papéis do sistema.
Os objetivos da etapa chamada Refinar Papéis são a identificação completa dos papéis necessarios ao sistema e o desenvolvimento de tarefas, definindo o comportamento dos papéis e os padrões de comunicação.
Papéis são capturados no Modelo de Papéis, onde normalmente, cada papel é associado a um único objetivo.
Todavia, segundo o autor, em, existem situações em que é útil combinar múltiplos objetivos num único papel por conveniência ou eficiência.
Definidos os papéis do sistema, tarefas devem ser criadas e associadas a cada um destes.
Deloach, em, destaca que as maiores dificuldades na metodologia MaSE são a transformação de papéis em classes de agente, a definição de conversas entre agentes e a definição dos comportamentos internos dos agentes.
Devido a isto, devem ser definidas tarefas de alto-nível que podem ser transformadas em papéis específicos de agentes, auxiliando na definição dos componentes internos dos agentes assim como no detalhamento das conversas entre agentes.
O envio de mensagens entre papéis e tarefas é especificado por tarefas concorrentes.
Estas possibilitam uma definição de alto-nível dos protocolos de interação que requerem coordenação entre múltiplos agentes.
Em a etapa seguinte, denominada Criar Classes de Agentes, devem ser identificadas as classes de agente que o sistema deverá conter.
Para tal, deve ser criado um Diagrama de Classes de Agente.
Além de a identificação dos agentes do sistema, este diagrama deve conter as conversas entre os mesmos.
A comunicação entre os papéis do sistema é herdada por as classes de agente geradas, ou seja, conversas entre papéis tornam- se conversas entre classes de agente.
Atribuídos todos os papéis, a organização geral do sistema esta definida.
Para uma organização mais eficiente, segundo o autor que afirma em, afirma que é desejável combinar dois papéis que compartilham um alto volume de tráfego de mensagens.
Em a etapa Construir Conversas, devem ser definidos os protocolos de comunicação entre os agentes.
Para modelar uma conversa, devem ser criados dois Diagramas de Classe de Comunicação, um para a classe de agente responsavel por o início da conversa, denominada conversation initiator, e outro para a classe de agente responsável por a resposta, conhecida como conversation responder, estabelecendo uma comunicação ponto a ponto.
O initiator sempre inicia uma conversa por o envio da primeira mensagem.
Quando o responder recebe uma mensagem, ele compara esta com suas conversas ativas.
Se achar a conversa correspondente, o responder transfere a conversa para um estado novo e executa quaisquer atividades ou ações requeridas.
Em caso contrário, o responder assume que a mensagem é uma requisição para iniciar uma nova conversa e compara isso com todas as conversas possíveis em que pode participar com o initiator.
Já a etapa denominada Criar Agentes é responsavel por a criação da parte interna do agente.
Enquanto o projetista pode usar arquiteturas existentes, como o BDI, ou projetar- las do início, investigações atuais derivam a arquitetura de agentes diretamente dos papéis e tarefas definidas na fase de analise.
Esta visão tem a vantagem de um mapeamento mais direto da análise para o projeto, embora perca alguma flexibilidade e potencial reuso.
Basicamente, cada tarefa de cada papel executado por um agente define um componente numa classe de agente.
A tarefa concorrente, citada na etapa de refinamento de papéis, é transformada numa combinação de componentes internos ao diagrama de estados e num conjunto de conversas.
Atividades identificadas na tarefa concorrente tornam- se métodos do componente.
Por fim, a etapa de Projeto do Sistema é considerada a mais simples da metodologia, onde a configuração do sistema a ser implementado é especificada.
Um diagrama de implantação deve ser criado, onde serão mostrados números, tipos e locais dos agentes no sistema.
Possíveis detalhes de implementação ainda não definidos devem ser decididos nesta etapa, como por exemplo, a linguagem de programação e o framework de comunicação.
Uma maneira de criar um agente proposta nesta metodologia, é a criação de tarefas de alto-nível, e que podem ser atribuídas a papéis específicos para agentes.
Os agentes também podem ser definidos através dos papéis que foram encontrados na fase de análise.
Mesmo com essas propostas, ainda não se identifica um método de identificação ou criação de agentes que seja automático ou baseado em algum artefato de alto-nível, como por exemplo, diagrama de caso de uso.
A metodologia Gaia surgiu como uma resposta que foi proposta por Wooldridge, Jennings e Kinn em para o problema introduzido no início deste capítulo:
A necessidade por uma metodologia que forneça suporte para a análise, para o projeto e desenvolvimento de aplicações sob o paradigma orientado a agentes.
Os autores afirmam que se agentes se tornaram um novo paradigma para desenvolvimento de sistema, então se faz necessaria a criação de técnicas de desenvolvimento de software direcionadas a este novo conceito de componente de software.
Os autores consideram Gaia uma metodologia apropriada para o desenvolvimento de aplicações reais de larga-escala orientadas a agentes.
Diante de essa afirmação, um conjunto de ítens são identificados como características principais seguidas por a metodologia:
Agentes são sistemas computacionais complexos, que fazem um significando uso de recursos computacionais (imagina cada agente como possuidores de recursos de um processo UNIX);
Assume- se que o objetivo é obter um sistema que maximiza alguma medida de qualidade global, mas que pode ser sub-otimizada sob o ponto de vista de componentes de sistema;
Agentes são heterogêneos, onde agentes diferentes podem ser implementados usando diferentes linguagens de programação, arquiteturas ou técnicas;
A estrutura organizacional dos agentes no sistema é estática, não sofrendo alterações em tempo de execução;
As habilidades bem como os serviços oferecidos por os agentes são estáticos, ou seja, não sofrem alterações em tempo de execução;
O sistema como um todo contém um número relativamente pequeno de tipos diferentes de agentes.
Gaia trabalha tanto com o nível intra-agente como o macro-agente, onde aspectos relacionados a organização dos agentes são trabalhados.
Essa característica representou um avanço em relação as outras metodologias quando de sua apresentação no artigo &quot;The Gaia Methodolofy for Agent--Oriented Analysis and Design», uma vez que essas apenas referenciavam as estruturas intra-agentes.
Aplicando a metodologia, o analista vai de conceitos abstratos até conceitos altamente concretos.
Cada movimento sucessivo dentro de a metodologia introduz uma maior inclinação para a implementação, e diminui o espaço de possíveis sistemas que possam ser implementados para satisfazer os requisitos iniciais.
Análise e projeto podem ser vistos como um processo crescente de desenvolvimento de modelos detalhados do sistema a ser construído.
A metodologia Gaia usa algumas terminologias e notações provenientes das fases de análise e projeto da modelagem orientada a objetos.
Entretanto, isto não é apenas uma simples tentativa para aplicar tais métodos no desenvolvimento orientado a agentes.
Ao contrário, Gaia provê um conjunto de conceitos específicos para agentes com o qual o analista ou engenheiro de sistemas poderá entender e modelar um sistema complexo.
Particularmente, essa metodologia encoraja o desenvolvedor a pensar na construção de sistemas multiagentes como um processo de projeto organizacional.
Os principais conceitos dessa metodologia podem ser divididos em duas categorias:
Abstrato e concreto;
Entidades abstratas são aquelas utilizadas durante a fase de análise para conceitualizar o sistema, mas que não necessariamente possuem alguma relação direta com o sistema.
Entidades concretas, ao contrário, são utilizadas dentro de o processo de projeto, e serão reproduzidas diretamente no sistema.
A Tabela 3.1 sumariza os conceitos abstratos e concretos explicados acima.
O papel de um agente define o que é esperado que esse realize dentro de uma organização, tanto interagindo com outros agentes bem como a própria organização em si.
Freqüentemente, um papel de agente é simplesmente definidos em termos de uma tarefa específica que esse deverá efetuar dentro de o contexto da organização como um todo.
Entretanto, para os autores, a noção de papel de agente é muito mais precisa;
Essa noção dá ao agente uma posição bem definida dentro de a organização, sendo associada também a um conjunto de comportamentos esperados.
Os modelos organizacionais dos papéis definem precisamente todos os papéis que constituem a organização computacional.
Tais modelos fazem isto em termos de funcionalidades, atividades, e responsabilidades, bem como em termos de padrões e protocolos de comunicação.
Os modelos de interação organizacional descrevem os protocolos que governam as interações entre os papéis.
Além disso, estes modelos descrevem as características e a dinâmica de cara protocolo.
De acordo com os autores Lin Padgham e Michael\ Vinikoff, a metodologia Prometheus tende a ser uma metodologia prática.
Os autores buscam com esta proposta uma metodologia que seja completa, por isso Prometheus provê tudo o que é necessário para especificar e projetar sistemas multiagentes.
O objetivo dos autores é desenvolver um processo com produtos &quot;entregaveis», o qual pudesse ser introduzido na indústria e ensinado para estudantes que não tivessem conhecimento na area de agentes para que então, desenvolvessem sistemas inteligentes.
Prometheus foi criado para ser usado por pessoas sem experiência na área de sistemas multiagentes.
Algumas de suas outras características são listadas abaixo:
Prometheus é uma metodologia detalhada, fornecendo guias detalhados de como realizar os inúmeros passos que a compreendem.
Prometheus provê suporta (embora não esteja limitado apenas para) o projeto de agentes que são baseados em objetivos e planos.
Os autores acreditam que a parte mais significante dos benefícios do uso da metodologia é proveniente da engenharia de software orientada a agentes que trata do uso de objetivos e planos para modelar os agentes.
Prometheus provê um conjunto de atividades que vão desde as especificações de requisitos até a detalhamentos do projeto.
A metodologia Prometheus compreende um conjunto de três fases, descritas abaixo e ilustradas por a Figura 3.3: System Specification (especificação de sistema) -- onde o sistema é especificado por meio de objetivos e cenários;
A interação entre o sistema e o ambiente que este estará inserido é descrito através de ações, percepções e dados externos.
Em esta fase as funcionalidades do sistema também são definidas.
Architectural design (projeto arquitetural) -- nesta fase os tipos de agentes são identificados.
Também tem- se que a estrutura do sistema como um todo é capturada por meio de um diagrama de visão geral do sistema.
Os cenários descritos na fase anterior são então traduzidos para protocolos de interações.
Detailed design (projeto detalhado) -- a terceira e última fase compreende no desenvolvimento e na definição dos detalhamentos dos agentes em capacidades, dados, eventos e planos.
Além disso, os diagramas de processos são considerados como pontes entre protocolos de interação e os planos.
A primeira fase, relativai a especificação do sistema, começa com uma simples descrição do sistema, que podem conter alguns parágrafos.
A partir de esta descrição, os requisitos do sistemas são definidos em termos de objetivos, cenários de casos de uso, funcionalidades, ações e percepções.
Estas duas últimas são relativas a interação do sistema com o ambiente em que este estara inserido.
Como identificado em, não ha uma seqüência explícita para a definição dos requisitos, porém, o trabalho realizado com uma característica pode levar idéias posteriores em outra.
Por exemplo, o autor exemplifica que modelar os objetivos do sistema é um passo inicial para a definição de casos de uso.
Entretanto, a criação dos detalhamentos dos casos de uso geralmente podem indicar sub-objetivos (criando assim uma hierarquia de objetivos) que devem ser considerados quando de a construção do sistema.
As funcionalidades do sistemas são criadas a partir de o agrupamento de objetivos.
Esse agrupamento deve levar em conta a organização e as relações entre os objetivos, para que não sejam criadas funcionalidades com objetivos diferentes.
Outro aspecto da especificação do sistema são os cenários de casos de uso.
Esses são uma descrição detalhada de uma seqüência de eventos associada a um objetivo ou a alguma resposta para um evento em particular.
A segunda etapa, que compreende o projeto arquitetural do sistema a ser construído, envolve a identificação dos tipos de agentes a serem construídos dentro de o sistema, a definição dos protocolos de interação entre os agentes e a definição da arquitetura do sistema como um todo.
A construção dos tipos de agentes é a etapa mais importante da segunda fase.
Em essa metodologia os tipos de agentes são construídos por meio de a combinação de duas ou mais funcionalidades.
Diferentes agrupamentos entre funcionalidades fornecem alternativas de projeto que são avaliadas de acordo com a coesão entre os tipos de agentes e com o grau de acoplamento entre estes.
Algumas características devem ser consideradas quando de a criação de tipos de agentes:
Se duas funcionalidades se relacionam entre si, faz sentido agrupas- las no mesmo tipo de agente, do contrário não devem ser agrupadas;
Se duas funcionalidades utilizam as mesmas informações, estas devem ser agrupadas no mesmo tipo de agente.
Por fim, na terceira fase, cujo detalhamento do projeto é definido por meio de a definição da estrutura interna dos agentes em termos de habilidadesl e dos protocolos de interação entre estes.
As habilidades são definidas em termos de eventos, planos e dados ou podendo ser definidas em função de outras habilidades, criando desta forma, uma hierarquia de relacionamento entre elas.
Os diagramas e os protocolos de interação definidos na fase anterior são transformados em diagramas de processos que representam a comunicação entre os agentes sob o ponto de vista dos mesmos.
A notação utilizada para representar os diagramas de processos é uma extensão ao diagrama de atividades da UML.
Para os autores, Tropos surge como uma metodologia que visa cobrir todas as fases do desenvolvimento de sistemas.
Esta metodologia é baseada em conceitos para realizar a modelagem e especificação de requisitos.
Tropos utiliza um framework que provê noções como atores, objetivos e dependências entre atores que são utilizados durante todo o ciclo de desenvolvimento.
Além disso, a metodologia enfatiza aspectos relacionados as fases iniciais da análise de requisitos, permitindo um melhor entendimento do ambiente onde o software ira operar.
De acordo com a afirmação dos autores, a Figura 3.4 ilustra um comparativo entre o nível de cobertura entre a metodologia Tropos e algumas outras.
A metodologia Tropos é dividida nas fases de Requisitos Iniciais, Requisitos Finais, Projeto Arquitetural, Projeto Detalhado e Implementação.
Estas fases serão detalhadas a seguir para um melhor entendimento do funcionamento da metodologia.
Durante esta fase os principais stakeholders2 são identificados, juntamente com seus respectivos interesses.
Os stakeholders são representados como atores, enquanto os seus interesses são representados como objetivos.
Em a análise dos requisitos finais, deve ser feita uma modelagem sistema, que passa a ser representado por um ator.
Em esta, o modelo conceitual é estendido incluindo um novo ator, representando o sistema, e um número de dependências com outros atores do ambiente.
Estas novas dependências assim como o refinamento dos requisitos devem ser realizados por meio de uma modelagem de metas.
A o final desta fase, as dependências representam os requisitos funcionais e não-funcionais do sistema.
Para a escolha do estilo arquitetural,' Iropos faz uso do framework NFR proposto por e de um catalogo de correlação entre estilos arquiteturais organizacionais e requisitos não-funcionais, ou atributos de qualidade.
Definido o estilo arquitetural, este deve ser aplicado aos modelos gerados na fase de Requisitos Finais.
Normalmente, nesta etapa, ocorre a inclusão de novos atores e dependências, assim como a decomposição de atores e dependências já definidos na fase anterior.
A fase de projeto detalhado serve para introduzir detalhes adicionais para cada componente da arquitetura do sistema, ou seja, esta fase tem como foco o desenvolvimento interno dos agentes.
Metas, crenças e capacidades, assim como a comunicação dos agentes são especificados com detalhe nesta fase, logo os aspectos identificados nesta etapa irão depender diretamente de características da plataforma de implementação que será adotada para a construção do sistema.
Esta fase deve estabelecer um mapeamento para a plataforma de implementação.
Em esta etapa, a modelagem de atores corresponde a codificação dos agentes no sis tema.
A construção de sistemas multiagentes também necessita seguir uma metodologia de desenvolvimento.
O RUP atualmente é conhecido como um dos processos de desenvolvimento mais aceitos na indústria de software.
Porém, o mesmo não pode ser utilizado para Sistemas Multiagentes, visto que é voltado totalmente para a orientação a objetos.
Com base nesta necessidade, foi criado o Multi-agent Systems Unified Process (MASUP) O MASUP nada mais é do que uma extensão do RUP focada no desenvolvimento de Sistemas Multiagentes.
Bastos e Ribeiro, em, salientam que o principal objetivo de tal metodologia é identificar sistematicamente a aplicabilidade de uma solução orientada a agentes durante a modelagem.
As fases de Levantamento de Requisitos, Analise e Projeto, são usadas na metodologia MASUP, pois a especificação do sistema tem seu início no Levantamento de Requisitos e, além disso, as fases de Implementação, Teste e Implantação tratariam da especificação interna dos agentes, fugindo do escopo inicial desta metodologia.
As fases de Levantamento de Requisitos, Análise e Projetos são utilizadas no MASUP, uma vez que o início da especificação do sistema ocorre na fase de requisitos.
Cabe também salientar, que as fases de implementação, teste e implantação não são abordadas por a metodologia porque estas tratariam da organização interna dos agentes, fugindo assim, do escopo inicial.
A Figura 3.5 apresenta os modelos e artefatos do MASUP.
Os requisitos no MASUP são, assim como no RUP, capturados através dos casos de uso.
Em esta fase, além de os casos de uso, também são produzidos outros artefatos, como a descrição dos casos de uso (formato textual), e diagramas de atividades de cada caso de uso.
Para a etapa de levantamento de requisitos, encontramos as seguintes atividades:
Buscar de atores e casos de uso, priorizar casos de uso, detalhar os casos de uso e estruturar o diagrama de casos de uso.
Apesar de o MASUP ser uma extensão ao RUP, a fase de levantamento de requisitos ocorre da mesma maneira nas duas metodologias.
De acordo com RUP, o propósito da fase de Análise é alcançar uma especificação mais precisa dos requisitos, produzindo assim, um modelo que representa a primeira visão do projeto.
Enquanto o modelo de casos de uso representa a visão externa do sistema, o modelo de análise descreve a visão interna do mesmo.
A fase de análise Use-Case Diagram Use-Case Model.
Ao contrário de a fase de levantamento de requisitos, nesta fase, o MASUP apresenta algumas diferenças relevantes em relação a o RUP.
Segundo a metodologia MASUP, deve- se, por exemplo, definir os agentes que compõem uma sociedade juntamente com suas funções e, além disso, devem ser representadas as interações entre os agentes necessários para a resolução das atividades definidas nos casos de uso.
As seguintes atividades fazem parte da etapa de análise do MASUP.
Re-projeto do diagrama de atividades para modelar a solução orientada a agentes para os casos de uso selecionados;
Identificação dos papéis necessários para a solução multiagentes baseada no diagrama de atividades gerado no passo anterior;
Especificação de cada papel de agente definindo suas respectivas atribuições;
Identificação dos agentes que devem executar papéis específicos;
Definição dos relacionamentos entre os agentes que compõem a arquitetura da sociedade de agentes.
Para o reprojeto dos diagramas de atividades é conveniente construir os diagramas de classes de análises, seguindo as regras do RUP.
Após esta construção, segue- se o fluxo de atividades e é feita uma análise verificando se uma solução orientada a agentes é aplicável.
Não sendo aplicada a solução orientada a agentes, continua- se o processo normal do RUP.
Caso contrário, segue- se o fluxo de atividades do modelo MASUP.
Os diagramas de atividades são remodelados após serem identificadas as atividades que são executadas por agentes, ou seja, caracterizadas por responsabilidades de tomada de decisão.
Em seguida, são identificados os papéis que caracterizam o comportamento de cada agente.
Os seguintes aspectos, segundo, são considerados na associação de um objeto de analise a um papel:
Responsabilidade: A associação ocorre quando são necessárias capacidades de tomada de decisão e autonomia.
Informação: Os atributos mantidos por o objeto definem o conhecimento do sistema em termos de informação.
Sendo assim, a associação ocorre quando o objeto mantém atributos requisitados por a solução multiagentes.
Comportamento: Como no conhecimento da informação, a associação ocorre quando o comportamento do objeto pode ser total ou parcialmente relevante para a solução multiagentes.
É importante salientar que quando mais de um agente é necessário para executar uma atividade por meio de cooperação, uma coalizão é criada.
Em os Diagramas de Atividades Estendidos AUML, os retângulos representando os objetos participantes de cada atividade que se transformam em papéis executados por agentes, recebem o estereótipo Terminados os novos diagramas de atividades, é realizada a especificação dos papéis.
Esta fase fornece o conhecimento necessário sobre os papéis usados na execução dos casos de uso especificados para o sistema multiagentes.
Identifica- se a atribuição para cada papel.
As tabelas geradas nesta fase apresentam as atribuições derivadas das atividades do caso de uso que solicitam a participação do papel, o caso de uso e a atividade em questão, e as restrições a serem observadas por o papel para a sua execução.
Especificados os papéis, são identificados os agentes.
Em o MASUP, define um agente como uma agregação de papéis cujas atribuições são complementares.
Por atribuição complementar entende- se que o agente deve mudar seu papel quando assumir outra atribuição requisitada por uma atividade do caso de uso.
Os agentes são representados por classes de agentes que especificam as atribuições, comportamento e arquitetura compartilhados por um conjunto de eles.
As informações necessárias para se definir uma classe de agente são:
Seu nome, seu número máximo de instâncias na sociedade, seus atributos, as interfaces de interação, seus papéis e suas atribuições.
As interfaces de interação fornecem os atos de comunicação que o agente é capaz de reconhecer como válido para atender a requisição de outro agente.
Elas são definidas apenas após a especificação dos cenários de interação nos diagramas de seqüência.
A classe de agente é representada por um retângulo que contém, no mínimo, o nome da classe e o número de instâncias.
Especificados os agentes, é definida a sociedade de agentes.
Em esta especificação, é necessario definir a relação hierárquica entre os agentes por meio de o Diagrama de Classes de Agentes.
As relações são identificadas dos Diagramas de Atividades Estendidos AUML, nos pontos em que os papéis são responsáveis em executar conjuntamente uma ou mais atividades, e representam canais de comunicação em que mensagens são trocadas.
As relações são representadas por setas que conectam os emissores aos receptores, contendo, opcionalmente, os seus nomes.
Elas também contêm, em cada extremidade, a multiplicidade e o papel do agente.
A relação hierárquica entre os agentes pode ser definida como:
De autoridade e de comunicação.
A primeira é dividida em duas outras, a permanente e a dependente de papel.
Em a permanente, o receptor deve necessariamente atender uma requisição do emissor.
É representada por uma linl1a sólida com a ponta da seta em negrito.
Em a dependente de papel, o receptor responde a requisição apenas quando o emissor está executando um papel específico.
É representada por uma linha sólida com uma metade de ponta de seta em negrito.
Em a relação de comunicação, o recep tor decide atender ou não a requisição.
E representada por uma linl1a sólida com uma seta.
O propósito da fase de Projeto é adaptar os resultados encontrados na fase anterior com as limitações impostas por a implementação.
Em esta fase o MASUP possui atividades que definem as interações entre os agentes e como eles vão interagir com o ambiente de implementação.
Por não forçar o uso de uma plataforma específica de implementação, o MASUP usa a noção de serviços para mapear a plataforma de implementação, demonstrando assim, como os agentes irão interagir com a mesma.
As seguintes atividades fazem parte da fase de Projeto:
Especificação dos cenários de interação dos agentes;
Complementação da especificação das classes de agentes com os atos de comunicação para a implementação das interações modeladas;
Identificação da infra-estrutura de serviços envolvida nos cenários especificados por as interações modeladas.
Em a especificação dos cenarios de interação dos agentes, é descrita a interação entre os agentes que executam, conjuntamente, uma atividade de um caso de uso.
O Diagrama de Seqüência Estendido AUML descreve estas interações, acrescentando algumas propriedades novas, que são:
O nome do agente, o número de instâncias dos agentes, os nomes das coalizões, os papéis dos agentes e as relações hierárquicas entre as instãncias dos mesmos.
Este novo diagrama deve estar em conformidade com o Diagrama de Classes de Agentes.
O Diagrama de Seqüência Estendido AUML possui setas que representam os tipos de mensagens trocadas entre os agentes.
As mensagens, neste trabalho, são expressas por os atos de comunicação da ACL.
Segundo Perotoni, em, uma mensagem enviada a um agente específico (unicast) é representada por uma linha cheia.
Uma mensagem enviada a um conjunto específico de agentes (multicast) é representada por uma linha sólida em negrito.
Quando todos os agentes de uma classe recebem uma mensagem (broadcast), esta é representada por uma linha tracejada em negrito.
O tempo de vida de um agente é representado por uma linha tracejada e uma linha dupla define sua participação na interação.
A definição de fluxos alternativos de mensagens é representada por um losango contendo uma letra &quot;k».
Especificados os Diagramas de Seqüência Estendidos A UML, a especificação das classes de agentes precisa ser atualizada.
Cada mensagem ACL envolvida na interação deve ser corretamente inserida na especificação das classes de agentes.
Atualizada a especificação das classes de agentes, a metodologia MASUP encerra o seu ciclo de execução.
É importante ressaltar que a mesma não obriga o uso particular de qualquer plataforma de implementação.
Em o que tange o assunto discutido neste trabalho, a identificação dos agentes no MASUP e baseada na escolha dos papéis que foram identificados na fase de análise ao serem encontradas atividades de tomada de decisão dentro de os diagramas de atividades derivados dos casos de uso, assim, não ha um processo automatizado de identificação dos agentes a partir de os casos de usos.
Uma decisão do analista baseada em sua experiência é a principal característica da identificação dos agentes nessa metodologia.
Embora o conceito de papel de agente esteja presente em algumas das metodologias apresentadas neste capítulo, o processo de identificação de tais elementos bem como da criação dos agentes inteligentes ainda passam por a experiência do analista, sendo resultados da aplicação de seus conhecimentos técnicos sobre um conjunto inicial de requisitos.
Esse processo de identificação de papéis se torna subjetivo uma vez que a experiência e o conhecimento das pessoas que estão modelagem o sistema orientado a agentes pode ser muito diversificado, resultando em diferentes analises para o mesmo cenários.
Diante de o fato supra-citado, surge a motivação desta dissertação que se baseia na busca por um método capaz de realizar a identificação de papéis de agentes e que seja independente do conhecimento ou experiência das pessoas envolvidas na construção de um SMA.
O capítulo a seguir traz os conceitos inerentes a Modelagem de Negócio a qual compõe um dos pilares desta pesquisa.
Modelagem de Negócios Os Sistemas de Informação (Si) estão se tornando cada vez mais essenciais e mais presentes no cotidiano das pessoas, nos mais diferenciados contextos.
Eles podem envolver desde sistemas triviais até sistemas que implementam algoritmos muito complexos.
Uma questão de grande relevância no desenvolvimento de um software é garantir que ele represente, de forma real, uma solução para o problema específico.
Expressar requisitos é uma das partes críticas no desenvolvimento de um sistema e qualquer erro pode trazer como conseqüência vários problemas futuros.
Sendo assim, diferentes tipos de projetos exigem diferentes técnicas para a organização dos requisitos.
Com o aumento da competitividade entre as empresas, torna- se cada vez mais fundamental a escolha por sistemas de informação que vão ao encontro de as necessidades do negócio.
Aspectos relacionados ao ambiente organizacional, em o qual o software está inserido, são comumente desconsiderados ou avaliados de forma incompleta.
É extremamente importante estabelecer uma correspondência entre o ambiente organizacional e o sistema de software desenvolvido para ser executado em ele.
Isso implica na avaliação de objetivos e metas organizacionais e no apontamento das formas com as quais os sistemas de software podem satisfazer- los.
Ter uma boa gestão e domínio do negócio tornaram- se itens indispensáveis para as organizações se manterem competitivas.
Para que esses sistemas auxiliem uma organização é essencial que sejam bem especificados, de forma que seus requisitos estejam alinhados ao negócio, e que permitam aos funcionarios executar as tarefas de forma adequada e eficiente.
Entretanto, especificar esses sistemas não é uma tarefa trivial.
Muitas vezes, a falta de entendimento sobre o negócio impede que as necessidades existentes sejam percebidas durante a fase da elicitação dos requisitos.
Em esse contexto, a Modelagem de Negócio surge como uma abstração da empresa e de suas atividades, com a finalidade de representar quais destas são executadas e como são articuladas para chegar aos objetivos daquela.
Busca- se auxiliar as organizações, através de seus modelos, no processo de compreenderem melhor o seu próprio negócio.
É de comum acordo entre todos os estudiosos que o sistema que resulta de um processo de desenvolvimento de software deve atender as necessidades do negócio, ou seja, que o sistema represente aquilo que o cliente esta esperando.
Porém, nem sempre essa idéia demonstra uma realidade sendo que, muitas vezes, o sistema resultante não está alinhado ao negócio da organização que o solicitou.
Um dos maiores desafios está em compreender o verdadeiro problema a ser resolvido e as vezes isso impede que as necessidades a serem atendidas sejam identificadas adequadamente.
A dificuldade na comunicação é um dos principais fatores que acarretam em problemas, tanto por parte de os engenheiros como por parte de a organização, que nem sempre possui uma visão clara das suas necessidades.
Em uma realidade em a qual os negócios estão cada vez mais automatizados e o computador faz realmente parte das organizações, compreender o negócio e como ele funciona passa a ser algo essencial e, talvez, a chave para o sucesso.
Quando uma organização decide desenvolver o seu modelo de negócio, com o objetivo de aumentar a eficiência de seus serviços, são descobertas as principais informações que possibilitam a tomada de decisões.
A modelagem de negócio emerge com esta finalidade:
Garantir que o sistema resultante é realmente o sistema solicitado por o cliente, no caso a organização, sendo que as informações presentes neste modelo ajudarão a considerar o contexto organizacional, de maneira a possibilitar a compreensão das necessidades de negócio que demandam esse sistema.
Com isso, pode- se partir, então, para a definição dos requisitos que atenderão a essas necessidades.
São divididos em três partes e são descritos individualmente como Recurso do Negócio, Processos do Negócio e Regras, que são detalhas a seguir.
São os objetos utilizados ou produzidos por o negócio, tais como materiais, informações e produtos.
Os recursos são organizados em estruturas e têm relação uns com os outros.
São manipulados (usados, consumidos, transformados, produzidos) através dos processos.
Usando como exemplo uma biblioteca, podem- se citar como recursos:
Obras (livros, teses, revistas) e fichas de identificações dos títulos, entre outros.
Atividades conduzidas no negócio, durante as quais o estado dos recursos do negócio muda.
Os processos descrevem como o trabalho é feito no negócio;
Mostram como o negócio é conduzido.
Eles são, desta forma, um conjunto de atividades de trabalho ordenado ao longo de o tempo, que possui começo e fim bem definidos com entradas e saídas.
São governado por as regras.
Exemplo (Biblioteca):
Emprestar Obras, Reservar Títulos, Devolver Obras.
Sentenças que definem ou restringem algum aspecto do negócio.
Representam um conhecimento a respeito de o negócio.
As regras definem como o negócio deve ser conduzido (como os processos devem ser executados).
Regras podem definir como os recursos devem ser estruturados e relacionados uns com os outros.
Em a abordagem da Rational (RUP -- Rational Unified Process) os autores acreditam que a notação padrão de modelagem visual, proposta por a UML, para a análise e projeto dos sistemas de software pode ser usada efetivamente para a criação de modelos.
Os analistas de negócios podem usar, para documentar o processo de negócios, a mesma notação e ferramentas que os arquitetos e projetistas usam para documentar o sistema de software.
Os autores acreditam, ainda, que falando a mesma língua os dois grupos poderão se comunicar melhor, permitindo que os sistemas de software realmente representem as necessidades do negócio.
Como, atualmente, os projetos estão sendo mais focados nos negócios, é essencial que o time de Tecnologia da Informação (Ti) tenha como base descrições não arnbíguas do funcionamento do negócio.
Sendo assim, foi definido um modelo que consiste em duas partes:
O modelo de caso de uso do negócio e o modelo de objeto de negócio.
Ambos podem ser criados usando UML.
Para auxiliar na manipulação desses modelos, a Rational propôs a utilização de uma de suas ferramentas, o Rational Rose, que possui mecanismos para diagramação tanto de modelos de sistemas quanto do modelo de negócio.
Cada diagrama, proposto em sua abordagem, fornece uma visão diferente do negócio.
Um modelo de casos de uso de negócio consiste em atores e casos de uso de negócio, onde os atores representam papéis externos para o negócio e os casos de uso representam os processos.
Diagrama de Caso de Uso de Negócio -- os casos de uso de negócio descrevem o processo do negócio, e são documentados como uma seqüência de ações que fornecem valores observáveis para um ator de negócio.
Os detalhes associados com este modelo são documentados numa especificação de casos de uso de negócio, que inclui um texto e um ou mais diagramas de atividades UML e, possivelmente, outros diagramas de casos de uso de sistema.
Descrevem o que fazer e não como o negócio pode ser resolvido.
Diagrama de Atividades -- representa a estrutura descrita textualmente na especificação dos casos de uso de negócio, ou seja, descreve o fluxo de trabalho executado em cada um de eles.
Um modelo de objetos do negócio descreve como resolver o problema em questão.
Serve como uma abstração de como os casos de uso de negócio serão executados em termos de interações de trabalhadores e entidades do negócio.
Diagrama de Classes de Negócio -- mostra as relações entre os trabalhadores e as entidades do negócio.
Diagrama de Seqüência do Negócio -- apresenta detalhes sobre a interação entre os trabalhadores e os atores do negócio.
Tambem mostra como as entidades do negócio são acessadas durante a realização do caso de uso.
Este diagrama pode fornecer, ainda, a interação de um ator do negócio com o negócio em si.
Da mesma maneira que existem diversas abordagens para a modelagem de negócio, também existem diversas notações para representar os modelos dos processos de negócio.
A Tabela 4.1 apresenta os elementos do modelo de processos de negócio bem como as respectivas representações UML de cada um destes elementos (representações referentes à ferramenta de modelagem de sistema Rational Rose).
Para documentar um processo de negócio o modelo apresenta duas visões, uma externa e outra interna.
A primeira é feita através da descrição dos casos de uso, que consiste no detalhamento passo a passo da interação entre os atores e a organização, durante a execução do processo em questão.
Esse detalhamento pode ser feito por meio de descrições textuais, para processos mais simples, ou por diagramas de atividades, em notação UML A visão interna é modelada através da realização dos casos de uso, que detalha como os trabalhadores do negócio interagem entre si e como as entidades do negócio são manipuladas durante a realização do processo.
A realização dos casos de uso é representada através dos diagramas de interação da UML.
O processo de desenvolvimento proposto por o RUP possui uma maneira concisa e direta para gerar requisitos que darão suporte as ferramentas de negócios e sistemas.
Um bom entendimento acerca de o negócio se faz importante para a construção dos sistemas corretos.
Usando a modelagem de negócio, mais valor passa a ser agregado ao desenvolvimento de sistemas, uma vez que passam- se a utilizar de papéis de pessoas e responsabilidades, bem como definições das entidades manipuladas por o negócio, formando assim uma base para a construção de sistemas.
Segundo a Rational em, é deste ponto de vista mais interno sobre o negócio, capturado no modelo de análise do negócio, que encontramos uma ligação sobre como os modelos do sistema devem ser construídos.
De o ponto de vista de arquitetura de sistemas, modelar o negócio é um processo útil se a intenção é construir algum dos sistemas abaixo descritos:
Sistemas customizados para uma ou mais companhias de um ramo específico, tais como bancos, companhias de seguro, lojas, etc;
Famílias de aplicações para o mercado, tais como sistema de estoque, cobranças, controle de trafego aéreo, etc..
Para identificar os atores do sistema de informação, deve- se iniciar a transformação do modelo de negócio para o modelo de sistemas utilizando os trabalhadores do negócio.
Com esse objetivo, os passos abaixo devem ser seguidos:
Decidir se o trabalhador do negócio será uma pessoa que irá utilizará o sistema de informação;
Caso a resposta para o passo acima seja sim, deve- se identificar um ator do sistema para o trabalhador do negócio em questão, e crias- lo no modelo de sistema, aplicando o mesmo nome;
Repetir os passos anteriores para todos os trabalhadores do negócio.
Para a identificação dos casos de uso do sistema, deve- se analisar cada realização dos casos de uso do negócio.
Com esse objetivo, os passos a seguir devem ser seguidos:
Identificar as seqüências de passos que são iniciadas por os atores do sistema (identificados anteriormente).
Criar um caso de uso do sistema para cada passo identificado na seqüência.
O nome do caso de uso passa a ser o nome da operação, ou seja, o nome descrito no passo.
Garantir que o diagrama de casos de uso atenda todos os critérios dos requisitos do sistema (provendo valores significativos para os atores e assim por diante).
Esses são os primeiros passos para partir da modelagem de negócio e chegar aos modelos do sistema.
Desta forma, os atores e casos de uso do sistema identificados podem vir a ser modificados caso se façam necessárias mudanças nos requisitos do sistema.
Um caso de uso do negócio pode ser suportado por apenas um caso de uso do sistema bem como dois ou mais, de acordo com os modelos de analise do negócio.
Para exemplificar o que foi apresentado anteriormente, um cenário do domínio bancário é apresentado, onde um cliente solicita um empréstimo para a instituição financeira, situação ilustrada por o diagrama de caso de uso do negócio na Figura 4.1.
Temos como um fluxo básico para a solicitação de empréstimo os seguintes passos:
O cliente solicita ao atendente um pedido de empréstimo.
O atendente, por sua vez, submete o pedido de empréstimo ao Sistema de Empréstimo.
O pedido de empréstimo fica disponível no sistema para que o especialista de empréstimo faça uma analise do mesmo e tome a ação de aceitas- lo ou rejeitas- lo.
Em esse contexto, têm- se dois passos:
&quot;Submeter Empréstimo «e &quot;Aprovar Empréstimo «que são iniciados respectivamente por o Atendente e Especialista de Empréstimo (conforme Figura 4.2).
Uma vez identificados os passos descritos acima, casos de uso do sistema são criados para cada passo que é iniciado por um trabalhador do negócio.
Logo, temos os casos de uso &quot;Aprovar Empréstimo «e &quot;Submeter Pedido de Empréstimo», associados aos atores do sistema, respectivamente, Especialista de Empréstimo e Atendente.
O diagrama de casos de uso do sistema para este cenário é ilustrado por a Figura 4.3.
Se a intenção é construir um sistema que automatize completamente um conjunto de processos de negócio (como, por exemplo, um sistema de e-commerce), não será mais o trabalhador do negócio que irá interagir diretamente com ele.
Ao contrário, é o ator do negócio que irá interagir diretamente com o sistema, agindo como ator de tal.
Desta forma, a maneira como o negócio é executado passa a ser diferente quando um sistema com estas características está sendo desenvolvido, uma vez que as responsabilidades outrora atribuídas ao trabalhador do negócio passam a ser parte do contexto do ator do negócio (vide Figura 4.4).
Para exemplificar, supõe- se, do exemplo anterior, que a instituição financeira deseja desenvolver uma aplicação de comércio eletrônico para os seus clientes para facilitar a interação através da internet.
Assim tem- se:
As responsabilidades do atendente são transferidas para o cliente;
Um ator do sistema que corresponde ao ator do negócio deverá ser criado;
Os trabalhadores do negócio Atendente e Sistema de Empréstimo serão unidos num só, dando origem ao Sistema de Empréstimo Aprimorado.
Modificar a realização do caso de uso de acordo com as mudanças realizadas nos passos anteriores;
Identificar os novos casos de uso do sistema ou adaptar os já existentes, baseando- se nas modificações da realização do caso de uso do negócio.
Uma entidade do negócio a ser controlada por um sistema de informação terá uma entidade correspondente no modelo de análise do sistema.
Em alguns casos, pode ser mais adequado criar entidades do sistema correspondendo aos atributos das entidades de negócio.
Como muitos trabalhadores do negócio podem Vir a acessar as entidades do negócio, conseqüentemente as entidades do sistema correspondentes podem participar de vários casos de uso do sistema de informação.
Como visto neste capítulo, a modelagem de negócio assume um papel importante durante a processo de desenvolvimento de software.
Essa importância se dá por o fato de que nesta disciplina são identificados os processos de negócios de uma organização, os quais podem endereçar melhorias dentro de a empresa quando estes vierem a ser traduzidos por um sistema de informação que os implementa.
É de comum conhecimento que a modelagem de negócio não introduz nenhum artefato que descreva aspectos de sistema, uma vez que é através de ela que são identificados os pontos de melhoria que possam vir a ser automatizados por um ou mais sistemas (não existe uma relação em que um caso de uso do negócio é implementado por um caso de uso do sistema, essa relação é muito\ rariavel de acordo com a complexidade do processo de negócio a ser implementado).
A proposta deste trabalho visa introduzir o conceito de papel de agente dentro de a modelagem de negócio através da aplicação dos conceitos do processo decisório (apresentados no capítulo à seguir) sobre as atividades do negócio, indicando assim, possíveis situações que possam ser automazidas com agentes caso o processo de negócio venha a ser implementado.
Processo Decisório O termo Decisão é uma das palavras mais pronunciadas e ouvidas;
E a sua correta aplicação é uma das coisas mais almejadas.
Segundo Pereira e Fonseca, na palavra decisão é formada por o prefixo de (prefixo latino que tem aqui o significado de parar, extrair, interromper) que se antepõe a palavra caedere (que significa cindir, cortar).
Tomada ao pé de a letra, a palavra decisão significa &quot;parar de cortar «ou &quot;deixar fluir».
Uma decisão precisa ser tomada sempre que existe um problema com mais de uma alternativa para a sua solução.
Em o dia-a-dia, praticamente em todos os instantes, as pessoas necessitam tomar decisões.
Decisões que variam da simplicidade extrema até o mais alto nível de complexidade, mas que precisam, de qualquer forma, ser tomadas.
Elas abrangem, ainda, diferentes níveis de responsabilidade, podendo afetar apenas o Decisor, ou os seus subordinados, ou a organização como um todo, ou talvez a própria nação.
Para qualquer situação, é perguntado:
Estas questões norteiam a vida de todas as pessoas e, em particular, daquelas que intervém em processos decisórios profissionalmente.
Por ser algo tão quotidiano, supõe- se que a tomada de uma decisão seja algo totalmente compreendido e conhecido.
Entretanto, tal não acontece.
O que se observa é uma quase ausência de metodologia para orientar e ou apoiar o Processo Decisório, no sentido de tornas- lo uma atividade estruturada.
Em a primordial questão sobre o que significa o termo decisão, uma possível resposta seria consideras- lo como um processo complexo e abrangente que se inicia com a percepção da necessidade de uma mudança;
Tem sua continuação com a escolha de um curso de ação entre os vários viáveis e que se finaliza com a implantação deste.
Como em todas as situações em as quais a tomada de uma decisão é necessária, esta necessidade nem sempre se apresenta de forma explícita e normalmente envolve Problemas específicos para cada situação.
Não existem conhecimentos teóricos disponíveis nem informações suficientes para sua solução.
Isto obriga o tomador de decisão a ser criativo, original e racional, valendo- se, para sua analise, dos acontecimentos passados e do conhecimento presente, a fim de prever eventuais ocorrências negativas e precaver- se para o futuro.
Em este capítulo serão apresentados conceitos referentes ao processo decisório, iniciando por uma introdução aos sistemas de apoio a decisão e suas características, e chegando até o processo de tomada de decisão propriamente dito.
Em este final constarão os estudos pertinentes para a formulação da proposta do presente trabalho.
A maior utilidade de Sistemas de Apoio a Decisão (SADE) (ou também conl1ecidos como Sistemas de Suporte à Decisão, SSD) está no suporte a problemas não-estruturados e semi-estruturados.
Se por um lado soluções estruturadas praticamente não necessitam de meios de suporte à decisão, pois o caminho elas já é conhecido antecipadamente, problemas geográficos costumam exigir tecnologias de suporte, porquanto apresentam pouco ou nenhum grau de estruturação.
A estrutura de um problema se refere ao nível de conhecimento que existe sobre as causas, as conseqüências e o processo de solução.
Tipicamente, um problema é não-estruturado quando ocorre pela primeira vez.
Por exemplo: Chuva torrencial provoca alagamento num ponto da cidade nunca atingido antes, ou barranco desliza sobre uma estrada até o momento intacta.
Problemas semi-estruturados são os que já sofreram alguma análise capaz de conduzir a conclusões parciais.
Por exemplo: Modelos de previsão de chuva.
Sua existência decorre de décadas de pesquisa e desenvolvimento tecnológico, na tentativa de se compreender a estrutura do fenômeno e predizer seu comportamento.
Já os problemas estruturados normalmente decorrem de processos criados por o Homem, em oposição aos problemas não-estruturados, que decorrem de processos do meio ambiente natural.
Segundo Sprague e Carlson, em, um sistema de suporte a decisão deve compreender um conjunto de seis objetivos, tais quais estão listados abaixo:
Apoiar os decisores em decisões difíceis, pouco definidas, tanto não-estruturadas como estruturadas;
Auxiliar a tomada de decisão em todos os níveis da organização e integrar os mesmos quando for apropriado.
De acordo com o já bem conhecido framework proposto por Anthony em, Sprague classifica as decisões como:
Planejamento estratégico -- decisões relacionadas à aplicação de políticas, escolha de objetivos e seleção de recursos,· Controle gerencial -- decisões relacionadas à garantia da efetividade na aquisição e uso dos recursos,· Controle operacional -- decisões relacionadas à garantia da efetividade na execução das operações;
Auxiliar a comunicação entre os decisores e as tomadas de decisões interdependentes.
Sprague identifica a classificação dos tipos de tomada de decisão sob o ponto de vista da comunicação dos decisores apresentada por os autores Hackatorn e Keen,:
Independente, seqüencial interdependente e agregado interdependente.
Tais classificações serão apresentadas mais adiante no texto.
Auxiliar todas as fases do processo de tomada de decisão e facilitar a interação uma tomada de decisão (também considerada abordagem racional do processo decisório) são:
Análise e Identificação da situação -- a situação do ambiente onde o problema ou a oportunidade estão inseridos deve ser claramente identificada através do levantamento de informações para que se possa chegar a uma decisão segura e precisa;
Desenvolvimento das alternativas -- em função de os levantamentos das informações, ou seja, da coleta de dados, pode- se chegar a possíveis alternativas para a resolução do problema proposto;
Comparação entre as alternativas -- levantamento das vantagens e desvantagens de cada alternativa;
Classificação dos riscos de cada alternativa -- as decisões sempre envolvem riscos, seja em grau quase nulo, em alto grau ou num grau intermediário;
Escolha da melhor alternativa -- com o conhecimento das vantagens, desvantagens e riscos, o decisor e capaz de identificar a melhor alternativa para solucionar o seu problema;
Execução e avaliação -- a alternativa escolhida fornecera resultados que deverão ser comparados e avaliados com as previsões anteriores.
Ser de fácil manipulação e dar suporte a modificações em tempo de mudanças no ambiente, nas tarefas e no próprio usuário.
Hampton coloca que existe uma grande diferença entre a abordagem racional e idealizada da decisão, e a realidade organizacional.
Porém, o autor afirma que fazer uma abordagem idealizada e totalmente racional da decisão e, a seguir, uma comparação entre o ideal e o que realmente ocorre é uma boa maneira para entender o processo decisório.
A Figura 5.1 mostra o processo decisório ideal, de acordo com o autor:
As etapas, segundo Hampton, estão descritas a seguir:
Definir o problema -- o administrador deve investigar o problema a fundo, a fim de definir- lo corretamente.
O autor exemplifica essa etapa com o trabalho de um medico:
O doutor não pode aceitar passivamente as queixas do paciente e considerar apenas as manifestações superficiais da doença.
O médico deve usar os sintomas apresentados para desencadear uma busca mais minuciosa e diagnosticar o problema.
Quando os sintomas são erroneamente definidos como problema, ou quando se define o problema de maneira que o pensamento leve a uma solução preconcebida, as chances são poucas para se visualizar uma ampla gama de possíveis soluções.
O autor afirma que existe uma tendência em se definir os problemas em termos prejudiciais, o que torna as possibilidades de solução bem menores.
Obter todos os fatos -- a primeira coisa a dizer sobre esta fase da tomada de decisão é que nem sempre o administrador obterá todos os fatos.
Para ser um administrador eflcaz, é necessário aprender a tolerar a ambigüidade, a informação incompleta, a incerteza e ainda decidir.
Em essa tarefa, o que pode ajudar é a obtenção seletiva de dados críticos que conduzem ao centro do problema.
Esta busca por novos fatos pode ser acelerada ou encurtada, de acordo com a urgência da questão.
A busca por informações chega a um ponto em que não se consegue mais esclarecimentos para o problema, momento em que a informação pode tomar mais tempo e custar mais do que o valor em si.
Formular alternativas -- muitas pessoas aceitam a primeira impressão de um problema como sendo a definição adequada para ele.
Partindo disso, formulam apenas uma ou poucas soluções alternativas, muitas vezes forçadas por a pressão da urgência.
Ponderar e escolher -- de acordo com a versão ideal da tomada de decisão racional na organização, os objetivos, estratégias, políticas, procedimentos, orçamentos e cronogramas fornecem o contexto para a mesma.
Porém, a realidade é outra, e a escolha pode ser feita sob condições incertas.
Outro problema é a possibilidade de ocorrerem conseqüências adversas e, neste caso, o processo de tomada de decisão deve esforçar- se para antecipas- las e calculas- las.
Sprague e Watson, em afirmam que, no início da década de 70, várias empresas e vários grupos de pesquisas começaram a estudar e desenvolver Sistemas de Apoio a Decisão, os quais passaram a ser caracterizados como sistemas computacionais interativos que auxiliavam no processo decisório de problemas considerados nãoestruturados.
Porém, segundo os autores, na década seguinte, varios pesquisadores e desenvolvedores de sistemas ampliaram essa definição dos SADE, tratando de incluir quaisquer sistemas capazes de dar alguma contribuição ao processo decisório, desde que possuam as seguintes características:
Serem voltados para problemas menos estruturados e menos especificados com os quais os gerentes deparam;
Combinem o uso de modelos ou técnicas analíticas a funções tradicionais de acesso e recuperação de informações;
Concentrem- se especificamente em recursos que facilitem seu uso para pessoal não-especializado em computação e· enfatizem a flexibilidade e a adaptabilidade de acomodar mudanças no ambiente e na abordagem ao processo decisório.
Problemas Estruturados -- de acordo com Shimizu, um problema é considerado estruturado ou bem definido quando sua definição e fases de operação para chegar aos resultados desejados estão claras e sua execução repetida é sempre possível.
Também se entende por problema bem-estruturado aquele em que o decisor consegue facilmente identificar uma estratégia de ação.
Temos como exemplo deste tipo:
Folha de pagamento, lançamento contábil e operação de processamento de dados em geral;
Problemas Semi--Estruturados -- os problemas semi-estruturados são aqueles com operações bem conhecidas, mas que contêm algum fator ou critério variavel que pode influir no resultado, tais como:
Problema de previsão de vendas ou problema de compras.
Outra definição encontrada para problemas semi-estruturados argumenta ser este o tipo onde existe uma estratégia de ação que pode ser encontrada;
Problemas não-estruturados -- aqui, tanto os cenários como o critério de decisão não estão fixados ou conhecidos a priori.
Um exemplo de problema não-estruturado é a operação de escolha da capa de uma revista semanal, para a qual diversas alternativas estão previstas, mas todas podem ser substituídas, na última l1ora, se algum fato importante ocorrer.
Segundo Simon, nos problemas não-estruturados, embora haja uma percepção difusa de que algo está errado, não se consegue num primeiro momento identificar e definir a natureza deste diferencial.
A estratégia de ação só será encontrada após trabalho de identificação, definição e percepção da inter-relação entre os fatores que possam vir a influenciar o problema.
Por sua vez, autores como Barros apresentam uma visão mais abrangente para este nível de classificação de problemas ou situações que demandem ação.
Para Barros, um problema é tão mais estruturado quanto mais intimamente o processo de sua representação puder ser repetido para outras situações semelhantes.
Ao contrário, quanto maior o nível de incerteza e subjetividade envolvida na situação que demande ação, menos estruturado ele será.
Vale lembrar também que a complexidade de um problema não está relacionada com a sua estruturação, uma vez que problemas complexos podem ser decompostos.
Os níveis de decisão organizacional obedecem a hierarquia padrão existente na maioria das organizações.
Esta divisão em níveis pode ser chamada de pirâmide organizacional, onde os níveis são conhecidos como estratégico, tático ou gerencial e operacional (como ilustrado na Figura 5.3).
O tipo de decisão que é tomada em cada nível requer diferente grau de agregação da informação.
E os diferentes níveis de decisão requerem diferentes informações em seus diversos tipos de produtos, tais como diagramas, gráficos, relatórios etc..
Em o nível estratégico, as decisões ocorrem no alto escalão (ou alta administração) da organização e geram atos cujo efeito é duradouro e mais difícil de inverter.
Emanam do planejamento em longo prazo da organização, conhecido como planejamento estratégico, tais como construção de uma nova fabrica, nova linha de produção, novos mercados, novos produtos, novos serviços privados ou públicos.
Esse nível de influência considera a estrutura organizacional de toda a organização e a melhor interação desta com o ambiente.
Em esse caso, o nível da informação é macro, contemplando a organização em sua totalidade, ou seja, relacionando- a com meio ambiente interno e externo.
Em o nível tático ou gerencial, as decisões táticas ocorrem nos escalões intermediários (ou corpo gestor) e geram atos de efeito com prazo mais curto, porém de menos impacto no funcionamento estratégico da organização.
Essas decisões emanam do controle tático e do planejamento gerencial da organização.
O nível tático de influência considera determinado conjunto de aspectos homogêneos da estrutura organizacional da organização.
Em esse caso, o nível da informação é em grupos (agrupada ou sintetizada), contemplando a junção de determinadas informações de uma unidade departamental, de um negócio ou atividade da organização.
Em o nível operacional, as decisões operacionais estão ligadas ao controle e as atividades operacionais da organização.
Essas decisões visam alcançar os padrões de funcionamento preestabelecidos, com controles do detalhe ou do planejamento operacional.
Criam condições para a adequada realização de trabalhos diários da organização, onde o nível operacional de influência considera uma parte bem específica da estrutura organizacional da organização.
Em esse caso, o nível da informação esta detalhado (informação analítica, singular), contemplando pormenores específicos de um dado, de uma tarefa ou atividade da organização.
Hackthorn e Keen, em, adicionaram a dimensão Interdependência das Tarefas ao framework ilustrado na Figura 5.2, baseados na teoria proposta por Thompson em 1977 sobre a relação das tarefas dentro de o ambiente administrativo, mais precisamente relacionadas à tomada de decisão.
Esta dimensão refere- se à interdependência das tarefas dentro de o processo decisório, caracterizando assim a comunicação entre os responsáveis por a tomada de decisão.
Independente -- o responsável por a tomada de decisão tem completa responsabilidade e autoridade para realizar a tomada de decisão.
Seqüencial interdependente -- um tomador de decisão faz parte do processo decisório onde a decisão é tomada e passada adiante para outra pessoa.
Agregado interdependente -- a decisão deve resultar de uma negociação e da interação entre os responsáveis por a tomada de decisão.
Este capítulo constitui o último pilar da base teórica desta dissertação.
Em ele encontramos conceitos pertinentes que serão utilizados para a formalização do método de identificação de papéis de agentes.
Dentro de o processo decisório, encontramos as três definições inerentes ao processo de tomada de decisão que compõem o framework que teve origem nos estudos de Simon.
De este framework, serão utilizadas características referentes aos tipos de problemas e interdependência entre tarefas, uma vez que, para a proposta deste trabalho, o nível em que a decisão está sendo tomada não interfere no processo de identificação de um papel de agente.
Pesquisadores e engenheiros de software estão se esforçando numa busca contínua por ferramentas e técnicas para gerenciar a complexidade inerente aos sistemas computacionais, especialmente quando estes tratam dos conceitos relacionados à sistemas multiagentes.
De este esforço surgiram várias técnicas para construção de SMAS, que vão desde propostas de linguagens para especificação e construção de tais sistemas até metodologias para análise e projeto dos mesmos.
De acordo com Wooldridge, tais metodologias podem ser divididas em dois grupos:
Aquelas que têm sua base no desenvolvimento orientado a objetos, nas metodologias para desenvolvimento orientado a ob jetos ou na adaptação destas metodologias existentes para suprir as necessidades da engenharia de software para sistemas multiagentes;
Aquelas que derivam da adaptação da engenharia do conhecimento ou outras técnicas existentes.
Traçando uma relação de algumas das metodologias existentes com o processo unificado de software, percebe- se que, nas metodologias orientadas a agentes, o processo de desenvolvimento dos sistemas está compreendido basicamente entre as etapas de requisitos e implementação.
Assim sendo, uma lacuna encontrada nas metodologias orientadas a agentes se refere à identificação de papéis de agentes durante as etapas de analise e projeto.
Nenhuma de elas propõe um método sistemático para a derivação de papéis de agentes por meio de os artefatos de entrada das mesmas, como por exemplo, as especificações de requisitos.
Tal processo de identificação acaba sendo uma análise dos diagramas e modelos do sistema e a decisão do que irá se tornar um agente, por parte de o analista de sistemas, acaba sendo tomada com base no seu conhecimento ou muitas vezes apenas por conveniência.
Dentro de o contexto acima explicitado, as seções subseqüentes deste capítulo introduzem o modelo proposto nesta dissertação que busca solucionar o problema descrito.
Em este trabalho está sendo proposto uma extensão a metodologia para sistemas multiagentes entitulada MASUP, resultado da inclusão da disciplina de modelagem de negócios no processo de desenvolvimento de sistemas multiagentes.
Tal extensão tem como objetivo preencher a lacuna existente hoje nas metodologias voltadas para o paradigma orientado a agentes que diz respeito a identificação de papéis de agentes.
Em as metodologias existentes, por não tratarem diretamente o assunto, durante o processo de modelagem e desenvolvimento de um sistema multiagentes, a identificação de papéis de agentes (ou até mesmo de agentes) que ocorre de maneira subjetiva.
Essa atividade envolve muito mais a experiência por parte de o analista, muitas vezes se baseando no seu conhecimento técnico e/ ou na conveniência, demonstrando que o entendimento do problema e o resultado final esperado pode variar consideravelmente.
Pode- se destacar como motivações deste trabalho o fato de que, com a inclusão da Modelagem de Negócio no MASUP, pretende-se fazer com que essa metodologia passe a trabalhar com soluções que outras não tratam.
Como conseqüência desta inclusão e com o processo de identificação de papéis de agentes a modelagem de negócio, almeja- se encontrar papéis de agentes para todo o negócio da organização, ou seja, quando o desenvolvimento de sistemas multiagentes se inicia na etapa de requisitos, o papéis de agentes identificados são específicos para o sistema em questão.
A o se modelar o negócio e realizar a identificação dos papéis sobre os modelos gerados, os papéis de agentes encontrados são referentes a todos os processos de negócio que foram modelados, podendo estes papéis darem suporte a um ou mais sistemas a serem implementados.
Outra motivação deste trabalho e a inexistência de uma metodologia para sistemas multiagentes que faça uso da modelagem de negócios dentro de o seu processo.
Desta forma, pretende-se com este trabalho, incorporar a modelagem de negócios ao MASUP para ser possível sua extensão para a identificação de papéis.
Vale lembrar que o escopo do que esta sendo proposto nesta dissertação trata apenas do processo de identificação de papéis de agentes por meio de a modelagem de negócios, e que as demais atividades inerentes a especificação, construção e testes de sistemas multiagentes não são aqui debatidas.
Em a Figura 6.1 é apresentada a proposta desta dissertação na forma de um diagrama de pacotes UML.
A configuração atual do MASUP compreende os pacotes Modelo de Requisitos, de Análise e de Projeto, conforme apresentado na Figura 3.5.
O pacote Modelo de Negócio e os diagramas gerados por este, representam a extensão proposta neste trabalho.
Em a seqüência, serão apresentadas as características de cada novo pacote adicionado a metodologia.
Um dos grandes problemas encontrados com a introdução da modelagem de negócio no processo de desenvolvimento de software é que os engenheiros de sistemas e analistas de negócios não se comunicam de maneira correta e eficiente uns com os outros.
Isso faz com que os artefatos de saída da modelagem de negócios não sejam utilizados adequadamente como entrada para o desenvolvimento de sistemas, e vice-versa.
O Rational Unified Process, RUP, provê uma linguagem comum a ambas partes, bem como processos que descrevem a criação e a manutenção direta da rastreabilidade entre o modelo de negócio e os modelos do sistema.
Essa disciplina permite que os processos da organização sejam documentados inicialmente na forma de casos de uso, propiciando um entendimento comum dos usuários, clientes e desenvolvedores sobre os seus processos, bem como os responsáveis por cada um destes.
Além de isto, permite um melhor entendimento dos problemas da organização, permitindo identificar oportunidades de melhorias do processo da organização.
De acordo com o RUP, as finalidades da modelagem de negócios são:
Entender a estrutura e a dinâmica da organização em a qual um sistema deve ser implantado (a organização-alvo).
Entender os problemas atuais da organização-alvo e identificar as possibilidades de melhoria.
Assegurar que os clientes, usuários e desenvolvedores tenham um entendimento comum da organização-alvo.
Para atingir essas metas, a disciplina de modelagem de negócio descreve como desenvolver uma visão da nova organização-alvo e, com base nesta visão, definir os processos, os papéis e as responsabilidades dessa organização num modelo de casos de uso de negócios e num modelo de objetos de negócios.
Complementando esses modelos, são desenvolvidos os seguintes artefatos:
Especificação suplementar de negócios e o glossário.
Trançando um relacionamento entre a disciplina de modelagem de negócio com outras disciplinas do RUP, temos os seguintes levantamentos:
A disciplina Requisitos utiliza modelos de negócios como um importante subsídio para entender os requisitos do sistema.
A disciplina Análise e Design utiliza entidades de negócios como subsídio para identificar classes de entidade no modelo de design.
A disciplina Ambiente desenvolve e mantém artefatos de suporte, como o Guia de Modelagem de Negócios.
Em o decorrer deste capítulo, segue- se o mesmo padrão utilizado para introduzir o MASUP.
Portanto, nas seções subseqüentes serão explicadas as características dos elementos introduzidos por a modelagem de negócio, bem como a maneira como são identificados os papéis e a (s) n1udança (s) sofrida (s) por a atual versão da metodologia em questão.
Esta seção descreve o exemplo utilizado para ilustrar a extensão que esta sendo proposta neste capítulo.
O exemplo mostra como se da um processo de solicitação de crédito rural numa instituição financeira nacional.
O funcionamento do processo de solicitação de crédito será explicado a seguir.
O processo tem início quando o Cliente solicita ao seu Gerente de Conta um pedido de crédito rural.
O Gerente por sua Vez aceita o pedido do Cliente e percebendo que os dados fornecidos são insuficientes, pode solicitar uma análise técnica para um Analista Financeiro.
O Analista Financeiro complementa o pedido do cliente com informações necessárias para a decisão do Gerente de Conta.
A o realizar uma análise sobre os dados fornecidos por o Cliente (ou dados complementares fornecidos por o Analista Financeiro), o Gerente da Conta pode reprovar o pedido, encerrando assim o processo de solicitação de crédito;
Ou pode aprovar diretamente o pedido realizado por o Cliente, desde que este possua alçada suficiente para tal ação.
Caso este Gerente de Conta não possua alçada, a responsabilidade por a aprovação do crédito é repassada para o Gerente da Agência, que precisa realizar a homologação do resultado da solicitação.
O Gerente da Agência deve ou não homologar a decisão tomada por o Gerente de Conta em relação a o pedido, fazendo com que o fluxo do processo de solicitação tenha seu término nesta etapa, independente da decisão tomada por o Gerente da Agência.
Este é o principal diagrama para representar de forma gráfica os processos de negócio.
Em o diagrama de casos de uso são representados somente os atores do negócio.
Devemos pensar no diagrama de casos de uso como a representação das entidades externas ao negócio e as iterações com este.
Assim, como trabalhadores do negócio são internos ao negócio, eles não são representados no modelo de casos de uso.
Embora possuam definições similares, de acordo com Arthur English, existem três pontos importantes que diferenciam um caso de uso do negócio de um caso de uso de sistema:
Escopo -- Casos de uso do negócio são focados nas operações.
Esses representam um fluxo de trabalho específico do negócio que busca alcançar um objetivo.
Processos de negócio podem envolver tanto operações manuais ou automatizadas e podem durar um período de tempo extenso.
Casos de uso de sistema são focados no sistema propriamente dito a ser implementado.
O fluxo de eventos que descrevem uma especificação de caso de uso do sistema deve ser detalhado suficientemente para ser usado como ponto de partida para a construção de cenários de teste.
Caixa-branca versus Caixa-preta -- Casos de uso do negócio são freqüentemente escritos na forma de caixa-branca (whitebor).
Eles descrevem as interações entre as pessoas e departamentos na organização que esta sendo modelada.
Casos de uso de negócio descrevem a forma como a organização trabalha atualmente e estes podem ser modificados para que as necessidades da organização seja satisfeita com o novo modelo de negócio.
Algumas perguntas do tipo podem ser feitas durante esse processo de amadurecimento do modelo de negócio:
Quais novos papéis e departamentos podem ser criados para agregar maior valor ou eliminar problemas nos processos?
Que papeis e departamentos podem ser eliminados?
Já os casos de uso de sistemas são escritos na forma de caixa-preta (blackbor).
Estes por sua vez descrevem como atores externos ao sistema interagem com o mesmo.
Os casos de uso do sistema elaboram os requisitos e possuem como principal propósito a documentação dos requisitos sob a perspectiva do cliente e não como especificar como satisfazer tais requisitos.
Trabalhadores do Negócio -- Em um diagrama de casos de uso de sistema, apenas atores interagem com os casos de uso, enquanto no diagrama de casos de uso de negócio, podemos encontrar tanto atores do negócio como trabalhadores do negócio interagindo com os casos de uso de negócio.
Um ator do negócio é alguém fora de o negócio e pode ser um papel ou outra entidade organizacional, por exemplo.
Já o trabalhador do negócio é alguém ou algum departamento interno ao negócio.
Quando a realização de um caso de uso do negócio é criada e diagramas de seqüencia e/ ou comunicação são desenvolvidos para ilustrar como os atores, trabalhadores e entidades do negócio colaboram entre si para a execução do caso de uso, os trabalhadores do negócio são transportados do modelo de casos de uso para o modelo de análise do negócio, bem como os trabalhadores adicionais que se fazem necessarios para prover as funcionalidades do caso de uso do negócio.
A Figura 6.2 apresenta um diagrama de casos de uso do negócio onde podese notar a presença de um ator do negócio, o Cliente, interagindo com dois processos de negócio definidos como:
Emitir Pedido de Crédito Rural e Solicitar Empréstimo.
Chame Emitir Pedido de Crédito Rural Solicitar Empréstimo Financeiro Financeiro.
Assim como o diagrama de casos de uso do sistema é utilizado na etapa de requisitos do MASUP, o diagrama de caso de usos do negócio também e utilizado na etapa de modelagem de negócios, entretanto, esse diagrama não sofre alterações nessa proposta, sendo assim, segue as regras e especificações da linguagem UML.
Para a continuidade deste capítulo, as seções subseqüentes utilizarão como base para a explicação da proposta o caso de uso do negócio &quot;Emitir Pedido de Crédito Rural», cuja descrição é apresentada na Figura 6.3.
O Diagrama de Atividades do Negócio é um diagrama comportamental que mostra um fluxo seqüencial de atividades.
Esse diagrama é tipicamente usado para descrever as atividades realizadas numa operação, tendo o objetivo de mostrar como um determinado processo é executado, mostrando o seu fluxo de trabalho.
A representação das atividades também pode ser Vista como um relacionamento entre os conceitos do modelo de negócio, o que faz com que informações importantes para a organização estejam representadas junto com as atividades.
A Figura 6.4 ilustra na forma de diagrama de atividades do negócio o caso de uso &quot;Emitir Pedido de Crédito Rural», apresentado na Figura 6.2.
Identifícação: UCNI Caso de uso:
Emitir Pedido de Crédito Rural Atores:
Cliente Stakeholders e Interesses:
Cliente: Ter seu pedido de empréstimo aprovado Gerentes de Conta e da Agéncia:
Manter o nivel de satisfação do seu cliente.
Pré-Condições: Cliente deve ser um correntista da instituição financeira.
Pós-condições: Cliente obtem o resultado referente a o seu pedido de crédito.
Seqüência Típica de Eventos: Seção Principal Este caso de uso inicia quando o Cliente emite um pedido de crédito rural entregando a documentação necessária ao seu Gerente de Conta.
O Gerente de Conta aceita o pedido do Cliente.
O Gerente de Conta realiza uma análise sobre o pedido de crédito.
O Gerente de Conta informa o Cliente do Resultado do seu pedido.
O caso de uso é finalizado.
Seqüências Alternativas: O Gerente de conta necessita de informações complementares 2a1.
Este subfluxo inicia quando o Gerente de Conta solicita ao Analista Financeiro uma análise técnica sobre o pedido de crédito e como resultado da análise forneça informações complementares referente a o pedido.
O diagrama de atividades do negócio é o artefato mais importante desta extensão, uma vez que é através de ele que será realizada a identificação de papéis de agentes.
Esta etapa representa a maior alteração proposta na versão atual do MASUP, ja que o processo de identificação originalmente transcorrido no workflow de análise e, com esta nova proposta, o referido processo é transferido para o workflow de negócio.
A motivação para o uso do diagrama de atividades do negocio para identificação de agentes está relacionada ao fato deste ser o principal diagrama a expressar os comportamentos e características do negócio de uma organização.
Embora o mesmo tipo de diagrama seja utilizado na fase de requisitos e analise na modelagem de sistemas nestas fases o objetivo é a busca por um modelo de sistema e uma solução computacional que dê suporte ao que é especificado na modelagem de negócio.
Os comportamentos e características do negócio tornam- se bastante importantes para a identificação de agentes uma vez que os próprios agentes são dotados de tais comportamentos e características, conforme já discutido nas seções 2.1 e 2.3.
Como descrito no Capítulo 4, a modelagem de negócio é utilizada para criar uma abstração de uma empresa e de suas atividades, com a finalidade de representar quais destas atividades são executadas e como são articuladas para atingir os objetivos da organização.
Diante desse fato, nessa etapa do desenvolvimento de software é que os processos da organização são modelados num nível de abstração mais alto em relação a os modelos criados por a disciplina de requisitos.
Por envolver conceitos de alto nível dentro de a organização (descritos na seção 4.2), com a modelagem de negócio somos capazes de identificar certos comportamentos e/ ou características nos processos de negócio que são muito difíceis de serem identificados na etapa de requisitos, uma vez que nesta etapa, o objetivo é a busca por um modelo de sistema e uma solução computacional que dê suporte ao que é especificado na modelagem de negócio.
Quando utilizamos os termos &quot;comportamentos «e &quot;características «vamos ao encontro de assuntos abordados nos capítulos anteriores.
Em referência aos comportamentos, cita- se o assunto discorrido na seção 2.1, em que apresenta- se aquelas que são, de acordo com a literatura, as principais características de um agente, tais como pró-atividade, reatividade, autonomia e por fim a habilidade social.
Ja em relação as características, fazemos referência aos conceitos estudados na seção 5.2, onde podemos definir o grau de estruturação das atividades do negócio bem como o grau de interdependência entre as mesmas.
Em a modelagem de negócio também pode- se encontrar atividades que exigem tomada de decisão por parte de os trabalhadores do negócio envolvidos em cada atividade do negócio, motivo por o qual optou- se por trabalhar com esta disciplina para a identificação de agentes.
Em a seção 4.4 é apresentada uma abordagem introduzida por o RUP que serve como guia na transformação de um modelo de negócio para um modelo de sistema, ou seja, partindo de um conceito mais abstrato e de generalização mais alta, para um modelo mais concreto e mais específico.
A o se trabalhar diretamente com a disciplina de requisitos, sem a realização da modelagem de negócio, muito se perde em relação as abstrações que são criadas por meio de os modelos do negócio em relação a organização, uma vez que, quando se parte para o desenvolvimento de software com a modelagem de requisitos, modelos para uma solução computacional para um determinado do processo de negócio ja estão sendo desenvolvidos.
O diagrama ilustrado por a Figura 6.4, que representa as atividades de um processo de negócio, provê meios para a identificação de papéis de agentes.
Esses meios passam por uma analise das atividades sob o ponto de vista das características referentes ao nível de estruturação do problema bem como do relacionamento destas atividades com outras dentro de o processo de negócio, para que numa etapa posterior, seja feita a interpretação do resultado dessa análise para avaliar a necessidade ou não de papeis de agentes.
Para uma melhor compreensão dessa proposta, e introduzida a Tabela 6.1.
Em a Tabela 6.1 cada célula da tabela identifica a solução computacional a ser utilizada como sendo a mais adequada de acordo com as características do tipo de decisão em função de o relacionamento das tarefas do processo decisório.
Temos então por 0.0.
Uma solução utilizando o paradigma orientado a objetos, O.A. Uma solução utilizando o paradigma orientado a agentes e por fim temos R.H., onde nenhum paradigma computacional se adequa uma vez que surge o raciocínio humano como base para a tomada de decisão.
Cada cenário apresentado na Tabela 6.1 será discutido na sequência, onde os motivos por os quais as soluções computacionais foram propostas são explicados e exemplificados atraves de referências bibliográficas.
Estruturada x Independente:
De acordo com a natureza das características dos problemas estruturados, a definição e as fases de operação para atingir o objetivo proposto são bem definidas, criando assim a possibilidade de execução repetidamente sem alterar o resultado esperado.
Desta forma pode- se afirmar que problemas desta ordem associados a tarefas independentes, onde apenas um tomador de decisão tem completa autoridade e responsabilidade sobre o processo decisório, requerem uma implementação sob o paradigma procedural, neste caso a orientação à objetos.
Entretanto também podem ser implementados, não obrigatoriamente, utilizando a orientação a agentes.
Assim tem- se uma seqüência de passos ja definidos a serem executados por objetos dentro de o sistema, sem a necessidade de comunicação com outras entidades de cunho decisório (outros objetos ou agentes inteligentes) dentro de o sistema.
Exemplo 1 -- Este exemplo, introduzido por o artigo, apresenta um exemplo de aplicação multiagentes que trabalha lado a lado com o decisor oferecendo soluções estratégicas para o usuário.
Tal aplicação utiliza um framework do tipo task-- sharing, uma vez que o problema principal é dividido em pequenos sub-problemas que são então atribuídos para agentes, onde estes, utilizando- se da tecnologia de sistemas inteligentes, realizam suas tarefas produzindo recomendações estratégicas de acordo com o problema fornecido.
Os agentes dessa aplicação estão classificados nesta categoria uma vez que estes utilizam algoritmos já conhecidos e que são aplicados sobre uma quantidade de informações previamente fornecida.
Exemplo 2 -- A aplicação apresentada no artigo introduz um sistema para suporte ao usuario no que se refere a leilões na internet.
A aplicação e dividida em três agentes:
O comprador, o vendedor e o agente que provê informações referente a os leilões de interesse do usuário.
O nosso alvo nessa aplicação para este exemplo é o agente responsável por o fornecimento de informações, uma vez que este age de forma autônoma no sistema buscando e recomendando os leilões que mais se aproximam das necessidades do usuario.
Tais leilões são recomendados de acordo com uma base de dados que contem regras de recomendações, classificando assim o problema a ser resolvido por este agente como estruturado, uma vez que a recomendação é criada utilizando regras já definidas no sistema, sem a necessidade de um resolução mais complexa de problemas por parte de o agente.
Exemplo 3 -- Em o artigo e apresentado um sistema musical interativo para auxiliar músicos em geral.
Tal aplicação é relativamente simples, uma vez que os agentes implementados neste sistema são responsáveis por emitirem notas musicais de acordo com as notas previamente disponibilizadas no ambiente por outros agentes.
A sucessão de notas fornecidas por os agentes tende a formar uma melodia.
Tais agentes estão classificados nesta parte uma vez que de eles apenas é exigida a autonomia, uma vez que os estes ficam observando o ambiente procurando por notas musicais para então, aplicarem um algoritmo para gerarem a próxima nota de acordo com um mecanismo de inferência que utiliza uma base de dados com notas musicais previamente cadastras e que ao longo de o funcionamento da aplicação é atualizado por os próprios agentes.
Estruturada x seqüencial Interdependente:
Em o processo de tomada de decisão onde as tarefas para a tomada da decisão são interdependentes, surge a presença de outros tomadores de decisão, e entre estes, a necessidade de comunicação, uma vez que o resultado de uma tarefa decisória é passado adiante dentro de o processo como um todo.
Problemas estruturados cujas tarefas de decisão são do tipo interdependentes podem sem implementados utilizando o paradigma orientado a agentes, ja que surge como resultado das relações entre as tarefas a comunicação entre os tomadores de decisão.
Exemplo 1 -- A aplicação apresentada no artigo apresenta uma solução orientada a agentes para subestações de energia elétrica.
Esta solução esta estruturada da seguinte forma:
Cada subestação possui um agente coordenador, responsável por a coordenação dos agentes que em ela estão ligados.
Este agente coordenador também age como uma interface provendo serviços, informações e outras funcionalidades a outras subestações que com essa mantém um canal de comunicação.
Cada dispositivo (hardware) da subestação possui um agente trabalhando a seu favor, buscando informações no ambiente, realizando backups, entre outras atividades.
O agente possui uma funcionalidade de decidir desligar o dispositivo dependendo do estado atual do mesmo e das alterações no ambiente com o intuito de não prejudicar o funcionamento.
Porém, tal decisão é repassada ao agente coordenador, que realiza uma avaliação da decisão do agente buscando encontrar possíveis mudanças negativas no ambiente, podendo este reivindicar a decisão do agente ou acatas- la.
Esta troca de informações e decisões entre os agentes se caracteriza como um seqüenciamento de tarefas decisórias, onde ambos os agentes procuram, através da intenção conjunta, manter a estabilidade dos dispositivos bem como da própria sub-estação.
Exemplo 2 -- O artigo entitulado Designing multi-agent systems:
A framework and application, apresenta uma solução multiagentes para um sistema inteligente de transporte e de informações pré-viagens.
Em a arquitetura deste sistema, foi criado um agente responsável por o recebimento do pedido do cliente e um agente responsavel por cada area relacionada ao sistema de transporte:
Informações do tempo, vôos, estradas e origem e destino do trajeto a ser realizado por o passageiro.
Após capturar o pedido, o agente repassa este pedido para cada um dos agentes especialistas, estes por sua vez, buscam os melhores resultados que estejam de acordo com as necessidades inclusas no pedido do cliente, e retornam os resultados para o agente que unificara todas as informações e indicara para o passageiro os melhores trajetos e datas para a sua viagem.
Percebe- se nesta arquitetura um seqüenciamento das atividades, onde as decisões são passadas do nível mais inferior (agentes especialistas) para o agente principal, caracterizando o problema tratado nesta aplicação como seqiíencial-interdependente.
Em relação a o tipo de problema, este problema é caracterizado como um problema estruturado uma vez que a captura de informações sobre o transporte e a criação de itinerários que melhor se adaptam a estas informações não exigem capacidade de inteligente, e sim um algoritmo estruturado para a realização desta tarefa.
Estruturada x Agregado Independente:
Em este cenário os problemas ainda são bem definidos bem como as fases de operação para obter os resultados esperados permanecem claras.
A comunicação introduzida por a forma seqüencial de execução das tarefas do processo decisório ainda persiste, o que varia deste cenário para o anterior é que a decisão deve resultar da uma negociação e da interação entre os responsáveis por a tomada de decisão.
Em o cenário anterior, parte da decisão era tomada e passada adiante, já neste cenário, a decisão é tomada por todos os responsáveis envolvidos no processo decisório.
Exemplo 1 -- O primeiro exemplo desta categoria é bem conhecido no meio acadêmio:
Trading Agent Community, ou apenas TAC.
TAC Classic é um ambiente orientado a agentes na internet para negociação de pacotes turísticos, que compreende compra e venda de passagens aereas, reservas de hotéis, pacotes de diversão, etc..
Em este jogo, como assim e chamado por seus criadores, encontramos dois tipos de agentes:
O agente responsável por a compra dos produtos escolhidos por o cliente de uma agência de turismo e os agentes que representam companhias aéreas, hotéis, etc..
A negociação para compra dos produtos ocorre através de leilões que ocorrem durante o jogo.
Esta aplicação esta classificada nesta categoria uma vez que as tarefas dos agentes pertencem ao tipo agredado-independente por causa de a negociação envolvida (uma das características de SMAs) e por possuir um problema já conhecido e que não possui fatores possam alterar o funcionamento do algoritmo que da suporte ao mesmo.
Exemplo 2 -- Em Multi-agent resource allocation for road passenger transportation, foi introduzida uma solução orientada a agentes para a alocação de recursos num sistema de transporte público.
O principal objetivo dessa aplicação é maximizar o tempo de trabalho de motoristas e o tempo de funcionamento dos veículos de transporte, nesse caso:
Exemplo 3 -- Em o artigo An integrated for developing e-commerce applications, é apresentada uma plataforma orientada a agentes cuja funcionalidade é fornecer suporte para negociações de compra e venda através da internet.
A estrutura desta plataforma é composta por dois tipos de agentes:
O agente comprador e o agente vendedor.
O agente comprador e o responsavel por capturar as necessidades do usuario, realizar buscas de produtos dentro de o ambiente multiagentes que se qualifiquem dentro de as necessidades e então iniciar um processo de negociação com o agente vendedor afim de maximizar a satisfação do usuário.
Após as negociações serem feitas, o agente comprador repassa os resultados para o usuário escolher o que vai comprar.
As necessidades do usuário podem ser variáveis do tipo preço, quantidade, disponibilidade para entrega, marca, garantia, entre outros.
Este processo realizado entre os agentes da plataforma exige uma característica importante referente a SMAS, que e a negociação.
Porém, esta negociação é do tipo estruturada, uma vez que o problema e conhecido:
Maximizar a satisfação do cliente dentro de as necessidades do mesmo;
Desta forma o problema tratado por este artigo foi classificado como estruturado e as tarefas realizadas entre os agentes definidas como agregadas e independentes, uma vez que o resultado esperado deriva da negociação entre os agentes.
Semi-Estruturada x Independente:
Em este cenário a solução para os problemas deixam de estar bem definidas e passam a ter parte da definição do resultado esperado Variável, tornando um resultado que antes ja era esperado em algo que agora passar a ser indefinido.
Problemas semi-estruturados são aqueles que algumas partes do problema podem ser resolvidas por métodos de decisão formais e/ ou por meio de a automatização, assim uma parte do problema exige um grau de inteligência para a tomada da decisão.
De essa necessidade por inteligência durante a tomada de decisão, tem- se que problemas classificados neste cenario tendem a requerer a orientação a agentes como solução computacional adequada.
Exemplo 1 -- O artigo A Multi--Agent System for Building Control apresenta uma solução chamada MASBO.
Esta aplicação realiza o controle interno de ambientes buscando uma melhor economia de energia sem afetar as preferências dos ocupantes.
Segundo os autores, MASBO surge como uma melhoria a sistemas de controle de ambientes ja existentes adicionando características de SMAs, tais como:
Aprendizagem, raciocínio e autonomia.
O principal objetivo do sistema é manter o conforto das pessoas que se fazem presente no ambiente, e para isso, o sistema deve utilizar as preferências de cada um para tomar as suas decisões, como por exemplo:
Fechar janelas, diminuir intensidade da luz, aumentar a temperatura do ambiente, entre outras.
Porém, o ambiente pode estar em constante mudança, uma vez que podem surgir novos ocupantes, sistemas de ar condicionado e iluminação podem falhar.
Podemos determinar essas mudanças no ambiente como variaveis do problema em o qual a aplicação busca solucionar, por isso MASBO esta classificado nesta categoria, pois seus agentes são autônomos e estão lidando com um problema não estruturado.
Control encontramos uma proposta orientada a agentes que busca controlar de forma eficiente plantas de energia elétrica, nesse caso, estação de armazenamento e distribuição de energia.
Diferente do artigo já apresentado que também propõe um sistema para controle de estações de energia elétrica, nesse em questão, a aplicação apresentada faz referência ao fato de que dispositivos podem falhar sem previsão e com isso o sistema deve buscar alternativas dentro de o ambiente para que o mesmo continue estável.
Esta característica demonstra que o problema a ser solucionado é do tipo semi-estruturado.
Dentro de a arquitetura da solução proposta, damos destaque a um agente que é responsavel por o gerenciamento da estação de energia, cuja alçada abrange decisões a serem tomadas referente a o estado da estação de forma autônoma toda vez que alguma mudança no ambiente é realizada.
Desta forma, temos neste sistema duas características que o classificam nesta categoria:
Um problema semi-estruturado e a autonomia do agente que gerência a estação de energia.
Exemplo 3 -- Uma solução multiagentes para o controle de recursos em Multi-Agent Application -- A Perfoimance Control Perspective.
Esta aplicação é composta por um agente que é responsável por o controle da carga de trabalho e por a alocação de recursos de acordo com a demanda numa linha de produção.
Este agente trabalha de forma autônoma procurando por modificações no ambiente que podem variar desde novas solicitações até falhas de componentes.
Tais modificações podem acontecer de maneira inesperada e sem algum aviso, fazendo com que o agente tenha que buscar em tempo de execução alternativas que mantenham o estado atual da linha de produção estável.
Este é um tipo de problema que se caracteriza como semi-estruturado, uma vez que problemas e/ ou variações dentro de a linha de produção podem ocorrer de forma inesperada, exigindo do agente um grau de solução mais complexo em relação a um problema estruturado.
Semi-Estruturada x seqüencial Interdependente:
Diferente do cenario anterior onde apenas um decisor lidava com um problema semi-estruturado, neste cenário a característica do problema requer o relacionamento entre as tarefas do processo de decisão que passa a ser seqüencial.
Assim, tem- se dois ou mais decisores interagindo de forma seqüencial para solucionar um problema que exige um grau de inteligência em relação a os problemas estruturados.
Diante de estas características, podemos afirmar que o paradigma orientado a agentes surge como única opção para a implementação computacional.
Exemplo 1 e 2 -- Em os artigos Towards Adaptive Workflow Enactment de workflow (fluxo de trabalho).
Um workflow pode ser definido como a seqüência de passos necessários para que se possa atingir a automação de processos de um negócio, de acordo com um conjunto de regras definidas, envolvendo a noção de processos, permitindo que estes possam ser transmitidos de uma pessoa para outra de acordo com algumas regras.
Pode mos considerar as atividades nesse tipo de ambiente como seqüenciais e interdependentes, uma vez que as decisões são tomadas em cada etapa e passadas adiante até que o fluxo de trabalho chegue a0 seu final.
Estes artigos estão classificados nesta categoria de acordo com o tipo de relação entre as tarefas bem como por o tipo de problema envolvido em ambas aplicações.
Como o ambiente organizacional onde uma aplicação deste tipo esta empregada geralmente sofre mudanças, o problema envolvido possui muitas variaveis (mudança de recursos, informações em constante atualização, etc) e muitas vezes tais mudanças se tornam difíceis de serem mapeadas, fazendo com que o processo de negócio implementado apresente a característica de um problema não-estruturado.
Exemplo 3 -- Uma Sistema de Apoio a Decisão orientado a agentes é apresentado no artigo Agent Coordination for Bus Fleet Management Tal solução foi criada para dar suporte a uma empresa espanhola de transporte urbano com o intuito de manter a qualidade dos serviços.
Em essa solução os ônibus são controlados por uma central, onde um agente realiza o papel de coordenador.
Cada ônibus é representado por um agente e possui um GPS que mantém a central atualizada sobre a sua posição geográfica.
O agente responsavel por o ônibus verifica constantemente a situação do serviço e havendo anormalidades podera tomar uma decisão propondo alternativas para melhorar o serviço.
Tal decisão é repassada para o agente central que verifica se essa podera afetar o funcionamento de outras linhas diminuindo assim a qualidade do serviço e, não encontrando alterações que possam prejudicar outras linhas, pode aceitar a decisão e colocas- la em pratica.
As anormalidades que podem afetar uma linha de ônibus são inúmeras, tais como congestionamento, acidentes, obras de reparação em estradas, capacidade total do ônibus atingida (necessitando de mais veículos), etc..
Lidar com estas mudanças não é uma tarefa trivial e exige uma complexidade maior de processamento por parte de os agentes uma vez que os problemas que podem ocorrer são imprevisíveis, que podem assim ser classificados como problemas não-estruturados, de acordo com a definição apresentada.
Semi-Estruturada x Agregado Independente:
Em este cenário apenas uma solução computacional é possível:
Paradigma orientado a agentes.
Problemas semi-estruturados exigem um grau de inteligência por parte de o decisor e tarefas definidas como agregadas independentes exigem uma comunicação entre os decisores envolvidos no processo de tomada de decisão.
Sendo assim, a inteligência para solucionar o problema somada a comunicação introduzida por as relações entre as tarefas nos remete à um cenário próprio de um sistema multiagentes.
Problemas não estruturados:
A natureza desde tipo de problema nos remete a cenários completamente imprevisíveis, onde a solução para o problema é completamente indefinida, muito menos o processo através de o qual se deseja passar para conseguir algum resultado desejado é conhecido.
Problemas desta ordem são complexos demais para serem projetados para uma solução computacional utilizando os paradigmas em discussão, já que o raciocínio humano se faz necessário durante o processo decisório.
Como já era esperado no decorrer deste estudo, não foram encontrados na literatura artigos que fizessem referência a soluções orientadas a agentes que dêem suporte a problemas nãoestruturados, motivo por o qual utilizamos o raciocínio humano como principal requisito para a busca de soluções de tais problemas.
Com base no que foi discorrido na sub-seção 2.3.2, verifica- se na Tabela 6.2 que as características oriundas dos sistemas multiagentes variam conforme os cenarios.
Quando identifica- se uma atividade do tipo independente, não importando o problema em questão, tem- se a autonomia como requisito, uma vez que nesses tipos de atividade não se faz necessária a interação do decisor com outros.
Entretanto, quando trabalha- se com as atividades dos tipos Seqüencial-Interdependente e Agregado-Interdependente verifica- se a necessidade de comunicação entre os decisores, ja que para estas atividades, o processo de negócio requer mais do que um decisor.
Alem disso, os requisitos não ficam restritos apenas a comunicação, requerse uma coordenação por parte de o sistema multiagentes.
As atividades seqüenciais e interdependentes, por sua natureza (conforme explicitado na sub-seção 5.2.3), requerem uma cooperação entre os decisores, já que a decisão é tomada em diferentes níveis do processo de negócio.
No caso de as atividades agregadas e interdependentes, a negociação é necessaria, uma vez que a decisão resultante do processo de negócio é resultado de uma negociação entre os decisores.
O processo de identificação de papéis de agentes tem como base as Tabelas 6.1 e 6.2.
Esse processo decorre de uma análise sobre as atividades realizadas pe los trabalhadores do negócio para que então estas sejam mapeadas em algum dos cenarios apresentados nas tabelas.
A analise a ser feita leva em conta a existência de uma tomada de decisão por parte de o trabalhador do negócio;
Não havendo uma decisão envolvida na atividade, a mesma não sera mapeada.
Quando de a necessidade de uma tomada de decisão, a atividade então passa a ser uma candidata a ser associada à um papel de agente, dependendo do cenário em que esta for mapeada.
O mapeamento das atividades que requerem tomada de decisão deve levar em conta o grau de estruturação do problema, onde identifica- se se o problema envolvido na tomada de decisão esta inserido num contexto de problema estruturado, semi-estruturado e não estruturado.
Além de o grau de estruturação do problema, para que a atividade seja caracterizada dentro de um cenário, o relacionamento das atividades também deve ser considerado.
Deve- se identificar o tipo de relacionamento entre as atividades que exigem tomada de decisão, sendo elas independentes, seqüencial-interdependentes ou agregado-interdependentes.
Em a subseção seguinte, é apresentado o diagrama de atividades do negócio estendido, onde são representadas as alterações realizadas com a identificação de papéis de agentes.
Após a utilização dos conceitos apresentados para a identificação de papéis de agentes através do diagrama de atividades do negócio, um segundo diagrama de atividades é produzido.
Em a verdade, este diagrama surge como parte da transformação do diagrama de atividades anterior, abrangendo as alterações registradas com a identificação de papéis de agentes.
Vale lembrar que a necessidade deste diagrama é diretamente relacionada com as alterações realizadas na etapa de identificação de papéis de agentes, uma vez que não há motivos para criar um diagrama de extensão sem que hajam mudanças a serem documentadas, no caso, papéis de agentes identificados.
A representação gráfica dos papéis identificados é similar à que representa atores e trabalhadores, feita através de swimlanes que utilizam o estereótipo role\&gt; como prefixo no título.
Swimlanes (raias) são usadas para definir quais são as classes (ou papéis) responsáveis por a realização de cada atividade e são especialmente úteis para a modelagem de processos empresariais.
A Figura 6.5 apresenta o diagrama de atividades estendido para o caso de uso &quot;Emitir Pedido de Crédito Rural», ilustrando os novos papéis identificados bem como o novo fluxo de atividades para este novo cenário.
Em a Figura 6.4, tem- se que a atividade &quot;Solicitar Pedido de Crédito «é executada por o ator do negócio Cliente, entretanto, esta atividade não necessita nenhuma análise para a identificação de papéis de agentes pois o objetivo desta proposta é buscar por atividades executadas apenas por o trabalhador do negócio.
Ja a atividade &quot;Aceitar Pedido de Crédito «é executada por o trabalhador do negócio Gerente de Conta;
Esta atividade é considerada de simples execução uma vez que não requer nenhum grau de decisão por parte de o trabalhador do negócio, além de representar uma interação com o ator do negócio, excluindo a necessidade de um papel de agente para executas- la.
Por outro lado, a atividade &quot;Analisar Pedido de Crédito», também executada por o trabalhador do negócio Gerente de Conta requer uma tomada de decisão:
Aprovar ou não o pedido de crédito.
O problema envolvido nessa tomada de decisão é considerado estruturado, pois a decisão é tomada com base em uma análise do Gerente de Conta sobre as informações fornecidas por o Cliente (ou das informações complementares fornecidas por o Analista Financeiro).
Porem, a decisão tomada por o Gerente de Conta, devido a alguma característica inerente ao negócio, como por exemplo o valor solicitado no empréstimo, pode necessitar de uma segunda aprovação de um nível mais superior, o que classifica esta atividade como seqüencial-interdependente.
De acordo com a tabela 6.1, atividades mapeadas dentro de o cenario problema estruturado com atividades seqüenciais e interdependentes, requerem a orientação a agentes como solução computacional adequada, desta forma, deriv se do trabalhador de negócio Gerente de Conta, um papel de agente, para executar esta atividade, o role\&gt; Gerente de Conta, conforme ilustrado na Figura 6.5.
A atividade &quot;Complementar Pedido de Credito «e executada por o trabalhador do negócio Analista Financeiro e por ser uma atividade que requer apenas uma análise, sem nenhum grau de decisão, não necessita de nenhum papel de agente para executas- la.
O trabalhador do negócio Gerente da Agência realiza a atividade &quot;Homologar Resultado da Análise do Gerente de Conta», que só é necessária quando de a falta de alçada por parte de o Gerente de Conta.
Essa atividade envolve um problema menos estruturado que a atividade &quot;Analisar Pedido de Credito «pois as variaveis a serem a analisadas por o Gerente da Agência para homologar ou não a aprovação do Gerente de Conta são desconhecidas, pois podem variar consideravelmente.
Diante desse fato, esta atividade é mapeada para um problema considerado semiestruturado.
Tambem classifica- se essa atividade como seqüencial-interdependente ja que a decisão tomada nesta atividade depende de outra previamente realizada.
Assim tem- se que a atividade &quot;Homologar Resultado da Análise do Gerente de Conta «passe a ser mapeada, conforme a tabela 6.1 no cenário de problema semi-estruturado com atividades seqüenciais e interdependentes, indicando também, a orientação a agentes como solução computacional mais apropriada para a implementação dessa atividade, dando origem ao papel de agente role\&gt; Gerente da Agência.
O trabalhador do Negócio Gerente da Agência, responsável apenas por uma atividade dentro de o processo de negócio em estudo, deixa de existir com o surgimento de um papel de agente pois a atividade outrora executada por esse trabalhador, passa a ser responsabilidade de um papel de agente.
Dentro de o processo de identificação de papéis se faz necessária também a representação gráfica dos mesmos.
Esta representação segue o padrão do RUP e é introduzida nesta proposta em forma de diagrama, o Diagrama de Papéis.
Em esse diagrama, cada entidade (ilustrada por o estereótipo mostrado na Figura 6.6) representa um papel de agente, e em ela são especificadas em forma de lista as atividades que o papel estaria executando.
O relacionamento entre as entidades do diagrama representam a idéia de comunicação entre os papéis, sem detalhar o fluxo de comunicação ou mesmo a multiplicidade de cada entidade.
O estereótipo é um componente composto por duas seções:
Em a superior, encontra- se o nome do papel e, na inferior, a lista de atividades que podem ser executadas por o mesmo.
Uma vez que os papéis forem identificados, pode- se ilustras- los visualmente através desse diagrama, artefato incluído por meio de esta proposta, uma vez que este não faz parte do conjunto de diagramas oferecidos por o MASUP.
Em esse diagrama são apresentados os papéis identificados na etapa anterior bem como os relacionamentos que definem a interação entre estes papéis.
A Figura 6.7 ilustra o diagrama com os papéis que foram identificados anteriormente.
O workflow de Negócios é antecessor ao workflow de Requisitos no processo de desenvolvimento de software proposto por o RUP.
Motivo por o qual a sua aplicação implica diretamente no que é produzido no workflow de Requisitos, mantendo a coerência e a rastreabilidade entre os artefatos manipulados por ambos.
Diante desse fato, a inclusão da Modelagem de Negócios no processo de desenvolvimento de sistemas multiagentes, mais especificamente no MASUP, implica numa mudança sobre alguns artefatos já definidos anteriormente.
Em este trabalho, o sistema a ser construído é tratado de acordo com o seguinte aspecto:
O sistema é composto por dois pacotes para a modelagem do mesmo, o pacote referente a modelagem orientada a objetos e o pacote referente a modelagem orientada a agentes.
Não identificando a necessidade de uma solução multiagentes para o sistema, este passa a ser modelado apenas por meio de o pacote da modelagem orientada a objetos.
Como o nome dos pacote já diz, o pacote da modelagem orientada a objetos abrange todos os casos de uso do sistema que não são executados ou iniciados por papéis de agentes, por outro lado, no pacote da modelagem orientada a agentes, são especificados os casos de uso onde existem interações com os papéis de agentes.
Entretanto, pode- se ter os casos de uso da orientação a objetos referenciando os casos de uso especificados na modelagem orientada a agentes, criando desta forma, uma dependência entre os dois pacotes.
A Figura 6.8 ilustra um diagrama de pacotes demonstrando a relação de dependência entre os pacotes.
Esta relação de dependência entre os pacotes não esta restrita apenas ao cenario em que casos de uso de um pacote referenciam outro, mas também quando um ator do sistema interage com um caso de uso que se encontra no pacote da modelagem orientada a agentes.
O diagrama de casos de uso do sistema é um artefato que sofre uma extensão de acordo com o propósito deste trabalho.
Em a subseção 4.4, é apresentada a proposta do processo unificado para a transição do modelo de negócio para o modelo de sistema.
Em a Figura 6.9 encontra- se o diagrama de casos de uso do sistema que derivou do diagrama estendido de atividades de negócio referente a o caso de uso do negócio Solicitar Empréstimo Financeiro.
De acordo com o método de transformação do modelo de negócio para o modelo de sistemas apresentado na subseção 4.4, cada trabalhador do negócio tornase um ator do sistema e cada atividade do negócio passa a ser um caso de uso do sistema.
Em o diagrama estendido de atividades do negócio (Figura 6.5), os dois trabalhadores do negócio Gerente de Conta e Analista Financeiro deram origem aos atores do sistema de mesmo nome.
A novidade neste diagrama esta na presença de um novo esteriótipo para representar o relacionamento de casos de uso de sistema com casos de uso executados por papéis de agentes.
Em a linguagem de modelagem UML, existe um esteriótipo de relacionamento que é denominando Essa notação é usada para representar sub-fluxos complexos e comuns a vários casos de uso, sempre usados, isto é, necessários.
Em a prática, o caso de uso &quot;incluído «é referenciado no fluxo do caso de uso que o inclui.
O caso de uso A inclui o caso de uso B quando B representa uma atividade complexa, comum a vários casos de uso.
Entretanto, este esteriótipo de inclusão passa a ser inadequado quando um caso de uso do pacote da modelagem orientada a objetos se relaciona com um caso de uso do pacote da modelagem orientada a agentes, uma vez que, ao se relacionar com um caso de uso executado por um papel de agente, o caso de uso da modelagem orientada a objeto estaria invocando o agente, motivo por o qual optou- se por a criação de um novo esteriótipo para suportar a idéia utilizada neste trabalho.
Com a introdução da Modelagem de Negócio no MASUP com o intuito de antecipar o processo de identificação de papéis de agentes, algumas modificações no restante das atividades se fazem necessárias para entrarem em conformidade com a proposta do trabalho.
O MASUP mapeia a disciplina de Análise e Projeto do RUP em dois modelos:
Workflow de Análise e workflow de Projeto, respectivamente, como ilustrado na Figura 3.5.
Em a atual estrutura do MASUP, o workflow de Requisitos, se mantém inalterada em relação a o RUP, entretanto, no workflow de Análise e Projeto é onde ocorre mudanças nas atividades quando identificada a necessidade de modelar um sistema multiagentes, caso contrário, segue- se com a proposta de modelagem definida por o RUP.
O workflow de análise requer mudanças com a identificação de papéis de agentes sendo realizada no workflow de Negócio, uma vez que neste workflow é que se encon tra as atividades referentes ao repro jeto dos diagramas de atividades e a identificação de papéis de agentes.
Atualmente, o MASUP compreende as seguintes atividades no workflow de análise:
Especificação de cada papel de agente definindo seus atributos;
Ciedade de agentes;
Reprojeto dos diagramas de atividades para modelar a solução orientada a Identificação dos papéis necessários para a solução orientada a agentes baseado Identificação dos agentes que implementarão os papéis de agentes especificados;
Definição dos relacionamentos entre os agentes compondo a arquitetura so.
Uma vez que os papéis já foram identificados no workflow de Negócio, as atividades acima necessitam ser redefinidas, de forma a entrar em conformidade com a metodologia como um todo.
Com esta reorganização, as atividades realizadas no work/ low etapa de análise passam a ser definidas de acordo com a listagem abaixo:
Refinamento dos papeis de agentes identificados na Modelagem de Negócio;
Identificação dos agentes que implementarão os papeis de agentes especificados;
A Figura 6.10 ilustra o diagrama de atividades UML para o caso de uso &quot;Aceitar Pedido de Credito», executado por o ator do sistema Gerente de Conta.
Percebe- se nessa ilustração a presença das atividades dos casos de uso executados por os papéis de agentes, &quot;Analisar Pedido de Crédito «e &quot;Homologar Resultado da Análise do Gerente de Conta», que pertencem aos casos de uso que são invocados por o caso de uso &quot;Aceitar Pedido de Crédito».
Tem- se as Figuras 6.11 e 6.12 que apresentam o diagrama de atividades dos casos de uso que são executados por os papéis de agentes.
Em estes diagramas de atividade, tem- se que, as atividades &quot;Avaliar Pedido de Crédito», Definir Resultado da Análise &quot;e «Verificar Necessidade de Homologação &quot;são executadas por o papel de agente Gerente de Conta, e que, as atividades «Analisar Resultado do Pedido &quot;e «Definir Resultado do Pedido «são executadas por o papel de agente Gerente de Conta.
Com os diagramas de atividade dos casos de uso de sistema especificados, deve- se realizar o reflnamento dos papéis de agentes identificados anteriormente (ou especificar novos papéis que foram identificados durante a etapa de análise).
O reflnamento dos papéis de agentes passa por a identificação das atividades, atribuições e restrições associadas aos papéis nos diagramas de atividades do sistema que os referenciam.
Segundo Bastos, as atribuições são derivadas das atividades dos casos de uso que requerem a participação de papéis.
As Figuras 6.13 e 6.14 apresentam as definições dos papéis de agentes Gerente de Conta e Gerente da Agência de acordo com o diagrama de atividades ilustrado por a Figura 6.10.
De acordo com Bastos, um agente é uma agregação de papéis cujas atribuições são complementares.
Por atribuições complementares entende- se que os agentes devem mudar seu papel para assumir outra atribuição necessaria para uma atividade do caso de uso.
Desta forma, no exemplo utilizado para demonstrar a proposta deste trabalho, optou- se por não agregar os papéis Gerente de Conta e Gerente da Agência num mesmo agente.
Apesar desses papéis terem acesso ao pedido de crédito, as extras manipuladas por ambos são diferentes a nível de negócio.
As Figuras 6.15 e 6.16 ilustram as especificações dos agentes Gerente de Conta e Gerente da Agência, respectivamente.
A especificação da classe de agente segue o padrão utilizado por o MASUP.
Após a especificação das classes de agentes, se faz necessária a definição dos relacionamentos entre os agentes, considerando os papéis que esses abrangem para a realização dos casos de uso do sistema, formando assim, a chamada sociedade de agentes.
Os relacionamento entre as classes de agentes representam canais de comunicação onde mensagens são trocadas Setas conectando tanto o agente receptor como o agente emissor representam relacionamento entre eles.
Em esse diagrama, o nome do relacionamento é opcional e a multiplicidade, representada no limite de cada seta, pode ser definida da seguinte forma:
Exata, um intervalo, uma ou mais ou Várias.
Em o MASUP, relações hierárquicas entre os agentes são definidas de duas diferenças formas:
Relação de autoridade (permanente ou dependente de papel) e relação de comunicação.
Em o relacionamento de autoridade permanente, o agente receptor da mensagem deve necessariamente responder ao pedido solicitado, enquanto no relacionamento dependente de papel, o receptor só responde ao pedido solicitado se o agente emissor estiver executando um determinado papel.
Em o relacionamento de comunicação, o agente receptor tem o poder de decidir se irá ou não atender ao pedido solicitado.
A Figura 6.17 ilustra o diagrama contendo a sociedade de agentes para o caso de uso Aceitar Pedido de Crédito.
Em esse exemplo, optou- se por o relacionamento dependente de papel, uma vez que o agente Gerente de a Agencia só irá realizar uma análise de um pedido de crédito se esta atividade foi solicitada por um agente executando o papel Gerente de Conta.
Como workflow de Projeto é subseqüente ao workflow de Análise, esse faz uso dos artefatos gerados por a etapa anterior.
Tendo que a proposta deste trabalho envolve a identificação de papéis de agentes, outrora realizada no workflow de Análise, 0 workflow de Projeto não requer nenhuma mudança em suas atividades, já que estas atividades são realizadas sobre os papéis de agentes bem como a sociedade de agentes já definidos.
Isso faz com que o workflow de Projeto mantenha a sua estrutura original proposta por o MASUP.
Em esta etapa devem ser definidos os cenários de interação entre os agentes.
Essas interações são descritas por meio Diagramas de Seqüencia Estendidos AUML, que incluem algumas novas propriedades que permitem a caracterização de cenários de comunicação para a solução orientada a agentes.
Mais detalhes sobre estas características podem ser encontrados em A Figura 6.18 ilustra o cenário de interação entre os papéis de agentes Gerente de Conta e Gerente da Agência para o processo de aprovação de pedido de crédito.
Em esta figura, uma mensagem do tipo request é enviada do agente GerenteConta para o agente GerenteAgencia solicitando a avaliação do pedido de crédito.
O agente GerenteAgencia realiza a avaliação do pedido, salva as informações no banco de dados e comunica o agente GerenteConta do término da sua avaliação.
Em esta etapa de projeto também devem ser identificados os serviços de infra-estrutura envolvidos no sistema multiagentes, desta forma, na figura é introduzido um objeto que provê serviços de acesso para o acesso de informações à um banco de dados.
Com os cenários de comunicação identificados através dos diagramas estendidos de seqüencia AUML, todas as mensagens encontradas devem ser inseridas apropriadamente nas classes de especificações dos agentes.
As Figuras 6.19 e 6.20 ilustram as especificações dos agentes GerenteConta e GerenteAgencia com suas respectivas mensagens identificadas anteriormente e ilustradas por a Figura 6.18.
Este capítulo apresentou uma proposta de extensão para a metodologia voltada a sistemas multiagentes chamada MASUP.
Esta extensão tem sua importância nas suas duas principais características:
A introdução da disciplina Modelagem de Negócio proposta por o RUP no processo de desenvolvimento de SMAS, tornando o MASUP um processo mais completo em relação as outras metodologias estudadas;
E um modelo para a identificação de papéis de agentes através da aplicação das características provenientes dos estudos referentes ao processo decisório sobre os elementos da nova disciplina inserida.
Visando demonstrar a aplicabilidade de forma automatizada da extensão proposta nesta dissertação, foi construído um protótipo, resultado da adaptação de um software já existente cujo objetivo é dar suporte a modelagem dos artefatos do O MASUP Modeler é uma ferramenta Case desenvolvida utilizando a linguagem de programação java e tem como finalidade dar suporte ao processo de desenvolvimento introduzido por o MASUP.
Essa ferramenta permite a manutenção dos artefatos referentes a modelagem de sistemas orientados a agentes, através da construção de diagramas de casos de uso e de atividades, especificação de papéis de agentes, classes de agentes, entre outros.
A construção da ferramenta de apoio foi realizada sobre o modelo conceitual ilustrado por a Figura 7.1.
Esse modelo representa a base da ferramenta, quaisquer implementações extras que visam o aperfeiçoamento da mesma, devem seguir este modelo.
Uma breve descrição de cada classe é apresentada abaixo:
Classe Model -- classe abstrata que representa os pacotes que podem ser implementados no protótipo.
Classe Diagram -- classe abstrata que representa qualquer diagrama disponível no protótipo.
Para a criação de um novo diagrama e para que este seja funcional, deve- se estender esta classe para que a aplicação reconheça o objeto como um diagrama e possa adicionar as funcionalidades necessárias.
Classe DiagramMenu -- classe abstrata que representa um menu para o diagrama.
Classe DiagramButton -- classe abstrata que representa um botão a ser adicionado a classe textitDiagramaMenu.
Classe DiagramElement -- classe abstrata que representa qualquer elemento a ser inserido num diagrama.
Para que a aplicação consiga adicionar as funcionalidades de um elemento de um diagrama, a classe do objeto precisa estender esta classe.
Classe RelationShip -- classe abstrata que representa qualquer tipo de relacionamento entre dois objetos do tipo DiagramElement.
Classe DrawingArea -- classe abstrata que representa a área disponível de um diagrama para a inserção e manipulação de objetos do tipo DiagramElement e RelationShip.
A Figura 7.2 apresenta a interface de interação com o usuário do MASUP Modeler.
Junto nesta figura, são ilustradas as classes acima descritas, de forma a permitir que o leitor visualize a implementação de cada uma.
Como o MASUP Modeler provê suporte a modelagem de sistemas multiagentes ao longo de o processo proposto por o MASUP, são disponibilizados para os seus usuários os seguintes artefatos:
Diagrama de Caso de Uso -- O diagrama de casos de uso é um diagrama cujo objetivo é representar um conjunto de requisitos, na forma de casos de uso, do sistema que será automatizado.
Diagrama de Atividades -- este diagrama apresenta o conjunto de atividades que compreendem o fluxo da execução de um determinado requisito do sistema.
Diagrama de Atividades Estendida -- este diagrama surge como uma extensão ao diagrama anterior, uma vez que possui uma swinlane para representar o sistema inteligente.
Diagrama de Classes de Análise -- este diagrama descreve o conjunto de objetos de um sistema bem como o relacionamento existente entre eles;
Especificação de Papel -- este diagrama apresenta a especificação de cada papel de agente, compreendendo suas atividades, restrições, atribuições e casos de uso em que o papel está presente.
Diagrama de Classe de Agentes -- este diagrama apresenta as classes de agentes bem como os relacionamento entre as mesmas, o comportamento dos agentes em relação a os mesmos.
Uma vez que o MASUP Modeler não fornecia suporte a extensão proposto neste trabalho, foram necessárias modificações na versão atual da ferramenta, para que esta pudesse servir também aos propósitos deste trabalho, ou seja, apresentar um protótipo na forma de ferramenta que realizasse de forma automatizada a identificação de papéis de agentes.
Sendo assim, alguns objetos se fazem necessarios em relação a o diagrama apresentado por a Figura 7.1, desta forma, os principais objetos desta extensão realizada são descritos abaixo e ilustrados por a Figura 7.3 (representados com a cor cinza).
Classe BusinessModel -- classe que implementa o pacote referente a modelagem de negócio;
Classe Business UseCaseDiagram -- classe que implementa o diagrama de casos de uso do negócio;
Classe BusinessActivityDiagram -- classe que implementa o diagrama de atividades do negócio;
Classe BusinessExtActivitgDiagram -- classe que implementa o diagrama estendido de atividades do negócio;
Classe BusinessRoleDiagram -- classe que implementa o diagrama de papéis do negócio.
Com a extensão do MASUP Modeler adicionando as funcionalidades que dão suporte a identificação de papéis de agentes, os seguintes diagramas passaram a ser disponibilizados no protótipo:
Diagrama de Caso de Uso do Negócio -- este diagrama envolve a apresentação dos casos de uso do negócio e a interação destes com os atores do negócio;
Diagrama de Atividades do Negócio -- este diagrama representa o fluxo de atividades necessárias para a realização de um caso de uso do negócio;
Diagrama de Atividades Estendida do Negócio -- este diagrama é uma extensão ao diagrama anterior.
Sua diferença em relação a o Diagrama de Atividades do Negócio constitui na presença de swinlanes que ao invés de representarem atores do negócio, representam papéis de agentes que foram identificados através da aplicação do método proposto neste trabalho sobre os diagramas de atividades do negócio;
Diagrama de Papéis do Negócio -- este diagrama apresenta graficamente os papéis que foram identificados através do diagrama de atividades do negócio.
Em este diagrama são apresentados os papéis bem como as atividades do negócio que cada papel executa dentro de um fluxo de atividades.
Junto com o Diagrama de Atividades Estendido do Negócio, este diagrama foi introduzido com a proposta discutida neste trabalho;
A Figura 7.4 apresenta a interface gráfica do MASUP Modeler com os artefatos que foram adicionados como resultado da extensão do protótipo com o método para a identificação de papéis de agentes.
Esta seção tem como objetivo principal ilustrar e exemplificar o uso do protótipo no que se refere ao processo de modelagem de negócio e a identificação de papéis de agentes.
A demonstração de utilização do protótipo se inicia com a construção dos artefatos para a modelagem de negócio e posteriormente ilustra como realizar de forma automatizada a identificação dos papéis de agentes utilizando os artefatos que foram gerados no passo anterior.
De acordo com a proposta apresentada no capítulo 6, o processo para a construção de um sistema, sendo ele ou não um sistema multiagentes, começa com a modelagem de negócio demonstrando os processos do negócio que poderão ser suportados com o desenvolvimento do novo sistema.
Como pode ser visto na ilustração apresentada por a Figura 7.4, o protótipo permite a criação do diagrama de caso de uso do negócio bem como do diagrama de atividades do negócio.
A Figura 7.5 apresenta o diagrama de caso de uso do negócio para o mesmo cenário utilizado para a discussão da proposta no Capítulo 6.
Uma vez tendo o diagrama de casos de uso do negócio definido e todos os processos de negócio envolvidos já identificados, devem- se ser criados os diagramas de atividades para cada um dos casos de negócio previamente identificados.
A construção do diagrama de atividade do negócio segue as mesmas diretrizes proposta por o RUP.
Com o diagrama de atividades do negócio construído, deve-ser identificar as características cada atividade presente de acordo com o tipo de problema envolvido na atividade e com o tipo de dependência desta atividade com as demais.
A Figura 7.6 ilustra o diagrama de atividades para o caso de uso do negócio &quot;Solicitar Empréstimo Financeiro «e como pode ser visto na mesma, ao lado esquerdo inferior da tela com o usuário, é disponibilizado dois menus (Problem e Task) para que o usuário possa classificar cada atividade.
O exemplo ilustrado por a Figura nos mostra a atividade do negócio &quot;Analisar Pedido de Crédito «sendo classificada como sendo um problema semi-estruturado e do tipo seqüencial-interdependente.
Todas as atividades dos diagramas de atividade do negócio devem ser classificadas, caso contrário, o protótipo não ira consideras- las no momento da identificação dos papéis de agentes.
Com a criação dos artefatos apresentados na subseção anterior, pode- se dar início ao processo de identificação dos papéis de agentes.
Basicamente, o protótipo realiza uma verificação em todas as atividades do negócio que foram classificadas na etapa anterior, e de acordo com a tabela 6.1 irá proceder com a criação dos papéis de agentes quando necessário.
Em a Figura 7.4, que ilustra os novos artefatos adicionados ao protótipo, existe uma opção no menu Identify Agent Roles fmm Model para dar início ao processo de identificação dos papéis de agentes de forma automatizada, o que representa a grande vantagem em ter um protótipo que realize tal tarefa sem a necessidade de interação humana.
Entretanto, durante o processo de identificação de papeis, o usuário pode ser questionado quando escolha se deseja que uma atividade seja realizada por um papel de agente ou não.
Isso ocorre quando o protótipo identifica que a atividade é do tipo independente, que de acordo com a Tabela 6.1 pode ser implementada por o paradigma orientado a agentes ou por o paradigma orientado a objetos, não dependendo do tipo de problema envolvido na atividade.
Tem- se na Figura 7.7 um exemplo da janela de diálogol que pede para o usuário escolher se a atividade &quot;Aceitar Pedido de Crédito «será executada por um papel de agente ou não.
Caso o usuario escolha yes, o protótipo ira criar um papel de agente para executar tal atividade, caso contrário, o protótipo segue para a próxima atividade no modelo de negócio.
Uma vez que o processo de identificação de papéis chega ao fim, o protótipo gera para o usuario alguns diagramas de acordo com o resultado obtido no processo.
O diagrama de papéis do negócio é um diagrama novo introduzido neste trabalho, e tem por objetivo apresentar os papéis que foram identificados bem como as atividades do negócio que cada um se torna responsavel, além de representar também os relacionamentos entre cada papel, que passam a representar um processo de comunicação e/ ou troca de informações entre os mesmos.
A Figura 7.8 ilustra o diagrama gerado por o protótipo para o cenário em discussão com os dois papéis que foram pode alertar o usuário sobre um problema, pedir confirmação sobre uma ação, ou solicitar que dados sejam fornecidos.
Além de o diagrama apresentado anteriormente, o protótipo apresenta ainda uma extensão ao diagrama de atividades do negócio, que pode apresentar uma swinlane representando o papel de agentes quando de a necessidade de existir uma atividade que tenha sido identificada como passível de ser executada sob o paradigma de orientação a agentes.
O protótipo de baseia no diagrama original para a criação do diagrama estendido, realizando apenas uma re-alocação das atividades nas swinlanes que foram adicionadas durante a identificação dos papéis.
Quando o protótipo identifica que não houve nenhum papel de agente necessario no diagrama de atividades, este não irá realizar a extensão do diagrama original, apenas dos diagramas em que papéis de agentes cuja presença se faz necessária.
Tem- se então a Figura 7.9 que ilustra o diagrama de atividades estendido do negócio que foi gerado a partir de o diagrama de atividades para o caso de uso &quot;Solicitar Empréstimo Financeiro».
A o analisar o diagrama, percebe- se que foram adicionadas duas novas swimlanes utilizando o estereótipo para identificar os papéis de agentes envolvidos no fluxo do negócio.
Além de essas alterações, percebe- se também que as atividades que deram origem aos papéis foram movidas para as novas swimlanes.
Até este momento, o protótipo trabalhou apenas com artefatos referente a o modelo de negócio, entretanto, com os diagramas de atividades do negócio bem como o diagrama dos papéis do negócio, o protótipo Vai mais além e já provê outros diagramas para auxiliar o usuário na modelagem e especificação do sistema, sejam eles:
Diagrama de casos de uso do sistema e especificação de papéis.
Como apresentado na seção 4.4, o RUP segure um modelo para a transição de requisitos do negócio para requisitos do sistema de urna maneira concisa.
Tendo todos os artefatos do modelo de negócio já definidos após o processo de identificação dos papéis de agentes, o protótipo faz uso dessa sugestão proposta por o RUP e implementa um algoritmo que extrai os casos de uso do sistema através dos diagramas de atividades do negócio, onde temos basicamente a transformação de atividades do negócio ern casos de uso do sistema.
As atividades do negócio que devem ser executadas por papéis de agentes são apresentadas para o usuário ern um novo estereótipo, para diferenciã- lo dos casos de uso de sistema.
Em a Figura 7.10 temos o diagrama de casos de uso do sistema que foi gerado a partir de os artefatos do negócio apresentados anteriormente, e ern detalhes na cor azul, temos os dois casos de uso que serão realizados por agentes inteligentes.
Para finalizar o processo de automatização do método proposto nesse trabalho, o protótipo ainda faz uso do diagrama de papéis do negócio para criar as especificações de papéis de agentes, que pertencem ao modelo de análise.
Entretanto vale lembrar que a especificação dos papéis criada é um esboço a partir de o modelo de negócio e deve ser posteriormente refinado por o responsavel por a análise ou implementação do sistema.
Um exemplo da especificação dos papéis pode ser visto na Figura 7.11, onde os dois papéis que foram encontrados no modelo de negócio são ilustrados.
A existência de um protótipo responsável por a automatização do método de identificação de papéis de agentes e de grande relevância para este trabalho, pois prova que o método é suscetível a automatização na forma de software com putacional, além de tornar a construção de sistemas multiagentes uma tarefa menos árdua quando de a existência de uma modelagem de negócio extremamente extensa, o que tornaria a modelagem de papeis de agentes uma atividade muito cansativa.
Role Specification Resultado dos esforços da area de Inteligência Artificial e Sistemas de Informação, o campo de estudo referente a Sistemas Multiagentes é uma abordagem recente e tem despertado grande interesse na comunidade acadêmica.
A construção de tais sistemas passa a ser uma realidade na medida em que eleva- se o interesse dos pesquisadores por este assunto e começam a surgir propostas para metodologias, linguagens e plataformas que vêm a dar suporte ao desenvolvimento de sistemas orientados a agentes.
Contudo, nas propostas existentes podemos identificar lacunas que fazem com que determinadas atividades inerentes ao desenvolvimento de sistemas se tornem uma tarefa subjetiva.
De entre as atividades que se enquadram neste cenario, destacamos o processo de identificação de papéis de agentes.
Também temos que a Modelagem de Negócio passou a ser muito bem vista por organizações devido a os benefícios que esta oferece quando utilizada de forma adequada.
Um dos benefícios mais destacados por pesquisadores e profissionais que utilizaram a modelagem de negócio é a qualidade apresentada por os sistemas que são desenvolvidos partindo de um modelo de negócio, alinhando desta forma, os objetivos da organização com a tecnologia de informação.
Além disso, a realização ou utilização da Modelagem de Negócio (não utilizada por nenhuma das metodologias para sistemas multiagentes) é considerada atualmente uma atividade essencial para aquelas empresas que desejam ter seus processos de negócio bem delimitados e com escopo bem definido.
Dentro desse contexto, este trabalho apresentou uma proposta de um método para a identificação de papéis de agentes integrada à já existente metodologia para sistemas multiagentes chamada MASUP.
O processo de identificação de papéis proposto compreende uma extensão realizada sobre o MASUP, com a inclusão da disciplina Modelagem de Negócios proposta por o RUP, e com características provenientes da área de Processo Decisório;
Fazendo com que a atividade de identificação de papéis passe a ser executada nessa disciplina, uma vez que, anteriormente a este trabalho, essa atividade de identificação de papéis era realizada na disciplina de Análise do MASUP.
Através do estudo realizado neste trabalho e da proposta introduzida por este, a identificação de papéis de agentes passa a decorrer de uma análise dos diagramas de atividades da modelagem de negócio, buscando mapear as atividades dentro de as características apresentadas no estudo referente a o Processo Decisório.
Tais características são sob dois pontos de vista:
Sob o ponto de vista referente a o grau de estruturação do problema envolvido na atividade, podendo ser descrito como não-estruturado, semi-estruturado e estruturado;
Sob o ponto de vista relativo ao grau de dependência da atividade com outras dentro de o fluxo de execução do processo do negócio, onde encontramos atividades que são independentes, seqüenciaisinterdependentes e agregado-interdependentes.
Tendo as atividades mapeadas conforme suas características, é indicada a melhor solução computacional que venha a dar suporte ao processo de negócio que esteja sendo trabalhado.
Caso a solução computacional resultante seja a orientação a agentes, o fluxo do desenvolvimento se da com o MASUP, seguindo todas as suas atividades subseqüentes a disciplina de Modelagem de Negócio.
Caso a solução computacional identificada para o problema seja a orientação a objeto, ou seja, nenhum papel de agentes foi identificado, o fluxo do desenvolvimento do sistema segue as atividades do RUP.
A proposta introduzida neste trabalho para a identificação de papéis de agentes através da modelagem de negócio visa contribuir para os estudos realizados na área de engenharia de software para sistemas multiagentes, propondo uma extensão que busca preencher uma lacuna existente no que diz respeito a identificação de papéis de agentes.
Com o estudo realizado durante este trabalhado, destacam- se as seguintes contribuições:
A criação de uma extensão mais objetiva para a identificação de papéis de agentes durante o processo de desenvolvimento de sistemas multiagentes,· a utilização da modelagem de negócio como ponto de partida para o desenvolvimento de sistemas utilizando o MASUP, tendo em ela, uma forma de definir o paradigma de desenvolvimento a ser aplicado na construção dos aplicativos que darão suporte aos processos do negócio;
A criação de novos artefatos no modelo de negócio que buscam tornar a modelagem dos sistemas multiagentes mais clara.
A continuidade deste trabalho indica uma contribuição para a área de desenvolvimento de sistemas, com o intuito de avançar as pesquisas referentes a sistemas multiagentes.
A área que abrange o estudo de sistemas multiagentes está em constante crescimento, e referente a o que foi estudado neste trabalho, são identificados como trabalhos futuros os seguintes ítens abaixo:
A identificação dos papéis de agentes é realizada sobre as atividades executadas por o trabalhador do negócio, buscando encontrar tomadas de decisão que estão inerentes aos processos de negócios modelados.
Entretanto, a modelagem de negócio pode ser estendida afim de apoiar também as decisões dos atores do negócio, desta forma, papéis de agentes também podem ser identificados através desta extensão.
A aplicação da extensão proposta deste trabalho bem como do protótipo em casos reais com o intuito de encontrar pontos de melhorias em ambos, uma vez que os exemplos utilizados para a construção da proposta e validação do protótipo são poucos.
A construção da extensão foi especificamente realizada sobre o MASUP, entretanto, esta mesma pode ser adaptada para que seja mais generalizada e possa permitir sua utilização em outras metodologias para sistemas multiagentes.
Logo, um estudo direcionado neste sentido, traria grande valor para esta proposta, visando buscar uma maior aplicabilidade deste trabalho dentro de a área de sistemas multiagentes.
O processo decisório pode envolver inúmeras variaveis de acordo com o ambiente em o qual o processo de decisão está inserido.
Avaliar e identificar outras características que podem afetar o processo de decisão torna- se um tópico interessante a ser estudado, uma vez que, o ambiente em o qual a decisão a ser tomada está inserida pode afetar o resultado esperando.
