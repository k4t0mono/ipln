O teste de um sistema de gerenciamento de workflow se faz necessário no momento em que há a necessidade de detecção de erros na execução de sistemas que apóiam processos de negócio.
Como não é viável a realização de testes exaustivos, esta pesquisa faz uso de teste estatístico para que se tenha uma confiabilidade aceitável com um conjunto de testes menor.
Sabe- se que as redes de Petri, além de possibilitarem a representação de informações estatísticas, são um formalismo muito indicado para descrever processos de negócio.
As informações relevantes ao teste estatístico de workflow são representadas utilizando redes de Petri, para então gerar casos de teste a partir de uma rede.
Este trabalho tem o objetivo de apresentar uma solução para a geração de casos de teste para sistemas de gerenciamento de workflows.
Estes casos de teste visam a interação com a interface de usuário.
Assim, neste trabalho, é apresentada uma descrição referente a a automação de workflows e ao teste destes sistemas.
A partir de esta descrição, são determinados os requisitos para a formalização de um dialeto de redes de Petri, para então ser apresentada a formalização do dialeto utilizado na pesquisa.
Além disso, é ilustrada a aplicação desta solução.
Devido a as similares necessidades verificadas no teste de desempenho em relação a o teste de sistemas de gerenciamento de workflows, um estudo da aplicação da solução desta pesquisa ao teste de desempenho é realizado.
Palavras-chave: Teste Estatístico de Software;
Sistemas de Gerenciamento de Workflow; Redes de Petri;
Teste de Desempenho.
Um processo de negócio é um conjunto de um ou mais procedimentos ou atividades relacionadas que realizam coletivamente um objetivo de negócio.
Estes procedimentos ou atividades estão normalmente inseridos dentro de o contexto de uma estrutura organizacional, que define papéis e relacionamentos funcionais.
Workflow é a automatização de um processo de negócio, por inteiro ou em parte, onde documentos, informações ou atividades são passadas de um participante a outro, de acordo com um conjunto de regras.
Um sistema que define, cria e controla a execução dos workflows com o uso de software é definido como um sistema de gerenciamento de workflow (SGWf), Workflow Management System (WfMS).
Estes conceitos são definidos por Hollingsworth.
Um sistema de workflow possibilita o gerenciamento do que se passa num processo organizacional, através da gerência de atividades e da distribuição apropriada de recursos humanos e/ ou associadas com as várias etapas do processo.
Assim sendo, diversos benefícios podem ser obtidos com a utilização de sistemas de gerenciamento de workflow nas organizações:
Redução de tempo nas transferências de informações e execução de atividades;
Maior controle e segurança do processo;
Simplificação da supervisão humana;
Maior grau de integração entre os participantes dos processos;
E melhor identificação de gargalos no processo.
Como em qualquer software, a execução de workflows pode conter falhas.
Para isso, a comparação do que a definição do processo expressa e o que realmente está acontecendo durante a execução do workflow possibilita que se determine falhas na execução.
Com isso, é objetivo desta pesquisa a geração de casos de teste para testes estatísticos em sistemas de gerência de workflows.
Como a intenção é validar a execução de workflows, este teste está focado no ponto de vista do usuário responsável por esta execução.
Assim, deve- se verificar ocorrências em que a execução não está compatível com o que a definição do processo representa, ou seja, se a gerência das atividades está se dando de maneira correta.
Devido a a diversidade de possíveis execuções do fluxo de controle de workflows, a verificação de todas as possibilidades de execução é se torna impossível.
Assim, é importante pri- orizar os pontos mais utilizados do software.
Desta forma, ao basear a geração de casos de teste em informações referentes à utilização do fluxo de controle, tem- se testes focados em submeter o SGWf a condições reais de uso.
Com isso, é possível estimar a qualidade do teste realizado do ponto de vista do usuário.
Este documento apresenta a solução encontrada em relação a o objetivo desta pesquisa.
Para isso, são discutidas as características relevantes ao teste de SGWf e formalizado um dialeto de redes de Petri que permita a representação destas características e a geração de casos de teste com base em elas.
Então, é demonstrado um experimento com base na solução desta pesquisa.
Por fim, é apresentado um estudo para a aplicação da solução desta pesquisa ao teste de desempenho, pois muitas das necessidades desta pesquisa também estão presentes no teste de desempenho.
Assim sendo, esta pesquisa apresenta a formalização de um modelo de uso para a geração de casos de teste para SGWf.
Esta formalização contempla as informações estatísticas necessárias ao teste estatístico, informações temporais, participantes, além de permitir a representação dos padrões básicos encontrados em workflows.
Este documento está organizado como segue:
O Capítulo 2 apresenta à base teórica referente a automação de workflows, descrevendo a arquitetura destes sistemas, a modelagem de workflows, juntamente com a descrição das principais características em workflows (padrões de fluxo, presença de participantes e tempo).
Em o Capítulo 3 são apresentados conceitos referentes ao teste de software, relacionando- os ao teste de um SGWf.
O Capítulo 4 apresenta o cenário da pesquisa, a caracterização do problema e os requisitos da solução.
Estes itens servem de base para a apresentação dos objetivos gerais e específicos da pesquisa, além de a questão de pesquisa que é solucionada neste trabalho.
Em o Capítulo 5, é apresentada a contribuição desta pesquisa, a formalização de um dialeto de redes de Petri capaz gerar casos de teste estatísticos para um SGWf.
Em o Capítulo 6, uma experimentação da solução é descrita, para isso um exemplo é ilustrado.
Em o Capítulo 7, é descrita uma abordagem desta solução para o teste de desempenho, para isso é apresentada uma a metodologia para geração de uma rede baseada no dialeto desta pesquisa.
Feito isto, descreve- se uma ferramenta desenvolvida para a geração de scripts de teste, juntamente com a apresentação de um exemplo.
Em o Capítulo 8, são citados os trabalhos que se relacionam com esta pesquisa.
Por fim, no Capítulo 9, encontram- se as considerações finais e a descrição dos trabalhos futuros.
Modelos de processo descrevem a estrutura de um processo de negócio do mundo real.
Eles definem todos os trajetos possíveis do processo de negócio e as atividades que necessitam ser executadas.
Um modelo de workflow é a parte automatizada do modelo do processo, devendo ser modelado de tal maneira que a estrutura do processo de negócio se reflita claramente.
O modelo de workflow é o molde para cada um dos processos instanciados.
Com isso, um sistema que gerência workflows deve administrar distintas instâncias de processo.
Uma instância de processo é composta por conjunto de instâncias de atividades.
Cada instância de atividade pode ser definida como a chamada de uma aplicação ou como um item de trabalho a ser executado por participantes do workflow, podendo ser composta por ambos os casos.
A Figura 1 demonstra o relacionamento entre os conceitos apresentados.
Pode- se verificar que o lado esquerdo da figura representa a definição do processo;
Já o direito representa a automatização e gerência do processo.
De acordo com Hollingsworth, a tecnologia de workflow está concentrada na automação de procedimentos, em os quais as atividades ou os dados são passados entre os participantes de acordo com um conjunto de regras definidas para que se alcance, ou contribua, para um objetivo de negócio.
Cada participante do workflow possui uma lista (worklist) composta por as atividades que ele deve executar (workitems).
A worklist de um usuário pode conter workitems provenientes de diversas instâncias de processo:
Uma worklist pode, por exemplo, conter duas instâncias de atividade, com a mesma definição, provenientes de diferentes processos.
Isto é representado por a Figura 2, através das atividades Atv_ 2 na worklist 1 e das atividades Atv_ 4 na worklist 2.
Além disso, o mesmo workitem pode fazer parte de diversas worklists.
Em este caso, quando o primeiro participante selecionar a atividade para executar- la, ela sairá das demais worklists onde estava presente.
Em SGWfs, as notificações de trabalho são enviadas aos participantes de forma automática.
Estes sistemas possuem tipicamente uma camada responsável por o gerenciamento destas notificações.
Com isso, a estrutura de um sistema de gerenciamento de workflow é tipicamente estruturada em três camadas.
Assim, a primeira camada funciona como um cliente do WfMS;
De a mesma forma que a segunda camada (WfMS) é o cliente do DBMS (Database management systems), Figura 3.
Segundo Leymann e Roller, fica claro que entre o usuário final e a gerência de workflows há uma camada responsável por a interação com o usuário final.
Desta forma, a interface de um sistema de workflow é encarregada do encaminhamento de todas as execuções realizadas por seus participantes ao sistema de gerenciamento de workflow.
A Workflow Management Coalition (WfMC), instituição que tem por objetivo promover e desenvolver o uso da tecnologia de workflow através de sua padronização, propõe um modelo de referência para a interoperabilidade de sistemas de workflow.
Assim, os SGWf exibem determinadas características comuns no intuito de possibilitar a integração e a interoperabilidade entre diferentes produtos.
Este modelo de referência é apresentado na Figura De acordo com Hollingsworth, os módulos que compõem o modelo de referência são:
Ferramentas de definição de processos usadas para analisar, modelar, descrever e documentar um processo do negócio.
Aplicativos clientes de workflow são módulos do software que interagem com as atividades que requerem envolvimento de usuários.
Aplicativos invocados são aplicações que podem ser chamadas para que determinada atividade seja executada.
Outros serviços de execução de workflow são diferentes ambientes de execução que interagem para que o objetivo do negócio seja alcançado.
Ferramentas de administração e supervisão têm como objetivo permitir uma visão completa do status das atividades da organização.
A comunicação entre os diferentes módulos se dá através de interfaces.
Cada um dos módulos possui uma interface de comunicação com o serviço de execução de workflow.
Estas interfaces definem o formato da comunicação.
Esta comunicação se dá através de chamadas API (Application Programming Interface).
De acordo com Hollingsworth (1995), as interfaces que ligam os diferentes módulos ao serviço de execução do workflow são:
Interface de definição do Workflow permite uma ligação entre as ferramentas de definição de processos e os ambientes onde são executados (Serviço de execução de workflow).
Fornece o acesso às seguintes propriedades:·
Estruturação do processo;·
Atividades e navegação;·
Regras e participantes;·
Condições dos gatilhos;·
Chamadas de aplicações.
Interface da aplicação do cliente do workflow (Interface 2) possibilita a comunicação entre o serviço de execução do workflow e os aplicativos clientes de workflow.
Possibilita o acesso as seguintes funções:·
Funções de estado do processo;·
Comandos de manipulação de worklist;·
Funções de controle do processo e atividade;·
Conexão/ desconexão;·
Configuração de comando.
Interface de invocação de aplicações (Interface 3) tem como foco estabelecer a ligação com as aplicações que foram projetadas para interagirem com o serviço de execução do workflow.
As Apis devem ter funções para:·
Estabelecimento de sessões;·
Funções de gerenciamento de atividades;·
Funções de manipulação de dados.
Funções de interoperabilidade (Interface 4) define uma forma padrão para a interação entre dois serviços de execução de workflow.
Esta interface deve suportar a transferência de dados de controle, informações relativas ao estado do processo de workflow.
Para isso, é necessária uma interpretação comum da definição dos processos.
As funções que podem ser usadas para a interoperabilidade entre os serviços de workflow são:·
Chamadas de atividades ou de sub-processos;·
Status dos processos/ atividades;·
Status de controle;·
Transferência de dados relevantes entre a aplicação e o workflow;·
Coordenação de pontos de sincronização;·
Leitura e escrita na definição dos processos.
Interface de administração e monitoramento (Interface 5) trata da administração e auditoria/ monitorização dos sistemas de workflow.
Têm- se como funções acessadas através das chamadas de API os seguintes itens:·
Gerência de usuários;·
Gerência de papéis;·
Funções de supervisionamento de processos;·
Controle de recursos.
Assim sendo, a comunicação entre os diferentes módulos com o serviço de execução de workflow se dá através das chamadas de API (ou WAPI, Workflow Application Programming Interface) e dos documentos padrão de troca de informações (HOLLINGSWORTH, 1995).
Os diagramas de atividades são bastante utilizados para realizar a modelagem dos aspectos dinâmicos do sistema, mostrando o fluxo de uma atividade para outra, dando ênfase ao fluxo de controle entre objetos.
O diagrama de atividades é uma ótima notação para a representação de seqüência de atividades, sendo especialmente utilizado para a representação de fluxo de trabalho.
São encontradas, também, representações de workflows utilizando redes de Petri, visto que as redes de Petri são uma classe de formalismos utilizados para a representação de processos.
Em, apresenta- se diversas vantagens em utilizar Redes de Petri para a representação de fluxo de processos:
Possibilita uma firmeza na conceituação e modelagem das redes.
O fluxo de um workflow pode possuir diversas construções.
De acordo com WfMC, o fluxo em sistemas de workflow pode apresentar sete diferentes padrões:
Parallel Routing, Sequential Routing, And- Split, And-Join, OR-Split, OR-Join e Iteration.
Segundo Russell, podem ser encontrados 43 padrões de fluxos para workflows.
Estes padrões estão classificados em diversas categorias:
Basic Control-Flow Patterns; Advanced Branching and Synchronization Patterns;
Structural Patterns; Multiple Instance Patterns;
Statebased Patterns; Cancellation Patterns.
Os padrões básicos (Basic Control-Flow Patterns) encontrados em correspondem aos seguintes padrões, encontrados em:
Sequential Routing, And- Split, And-Join, OR-Split e OR-Join.
Estes padrões são caracterizados da seguinte forma:·
Sequential Routing é caracterizado por o fato de uma instância de atividade ter o início de sua execução apenas após o término da execução da instância de atividade anterior.·
And- Split consiste num ponto no processo onde um único fluxo se divide em múltiplos fluxos do controle que podem ser executadas paralelamente, permitindo, assim, que instâncias de atividades sejam executadas simultaneamente.·
And-Join é um ponto no processo onde diferentes fluxos paralelos convergem num único fluxo de controle.
Para que a execução do fluxo prossiga, é necessário que todos os fluxos paralelos que convergem para a sincronização. (
And-Join) tenham sido completados.·
OR-Split caracteriza- se por o fato de num ponto no processo onde, baseado em dados de decisão ou de controle do workflow, é escolhido um caminho entre os possíveis a serem seguidos.·
OR-Join um ponto no workflow onde dois ou mais fluxos de execução unem- se sem que haja uma sincronização.
Ainda em, realizou- se um levantamento com quinze ferramentas distintas de gerência de workflow para determinar a quais padrões estas davam suporte.
Apenas seis, dos vinte padrões, tinham suporte de todas as ferramentas investigadas.
De estes, cinco são classificados como padrões básicos e o outro padrão é chamado de Multiple Instances With a Priori Design Time Knowledge e classificado como padrões com múltiplas instâncias.
A presença de participantes atrelados às atividades faz com que a autenticação de usuários seja algo relevante ao teste de workflows.
Isto se deve ao fato de que cada participante do workflow possui uma lista (worklist) composta por as atividades que ele deve executar (workitems).
Atv_ 2 e uma da atividade Atv_ 3 para serem executadas ao passo que a worklist do Participante 2 (Worklist 2) possui duas instâncias da atividade Atv_ 4.
O aspecto tempo, em SGWf, possui uma importância muito grande, pois o fluxo pode ter seu trajeto alterado simplesmente em função de ele.
Sistemas de workflow possibilitam que o tempo de realização de cada atividade seja controlado e procedimentos extras possam ser invocados se o tempo para a execução de determinada atividade for ultrapassado.
Atividades em workflows podem estar atreladas a exceções temporais, as quais podem ou não alterar o fluxo.
Estas exceções são chamadas de deadlines.
Um deadline pode ser síncrono ou assíncrono.
Um deadline síncrono encerra a atividade caso ela não tenha sido executada até o momento e segue o fluxo de exceção.
Um deadline assíncrono consiste na ativação de um ramo de execução do fluxo de controle em paralelo com a atividade em questão.
Pode- se encontrar ocorrências em que ambos os tipos de deadlines estejam presentes na mesma atividade.
Desta forma, o tempo do condicional do deadline síncrono deve ser superior ao do assíncrono caso ambos existam na mesma atividade, pois não faz sentido abrir um fluxo em paralelo a uma atividade que já foi encerrada.
Em este capítulo, verificou- se que SGWf possuem, claramente, uma separação entre a camada de apresentação ao usuário e a camada responsável por o gerenciamento das atividades.
Além disso, há a definição de uma interface para esta comunicação.
Estas características sugerem a possibilidade de realização de testes em SGWf independentemente da forma como é desenvolvida e/ ou estruturada a camada de apresentação ao usuário.
Assim, os casos de teste gerados devem verificar se atividades estão sendo entregues aos participantes corretos.
Desta forma, a geração de casos de teste deve conter, além de a listagem das atividades a serem executadas, a informação de qual usuário deve executar cada atividade.
Além disso, sistemas de workflows possuem características temporais.
Estas características devem ser levadas em consideração no momento do teste.
O teste deve simular o tempo gasto para a execução das atividades do workflow, a fim de validar também as exceções temporais presentes nestes sistemas.
As atividades não devem ser executadas de forma instantânea.
O atraso de atividades faz com que seja verificada a validade das ocorrências temporais presentes nos workflows.
Em o capítulo seguinte, são apresentados alguns conceitos de testes de software, relacionando- os ao teste de sistemas de gerenciamento de workflows.
Sistemas devem ser testados para que se faça um julgamento a respeito de a qualidade do software, além de descobrir problemas.
Durante a geração de código de um software, pessoas erram.
Estes erros ocasionam defeitos.
Estes defeitos ocasionam falhas na execução do software.
Em outras palavras, no momento em que um programador gera um erro na codificação, um defeito está sendo criado, que durante a execução do software ocasionará uma falha.
Desta forma, o teste tem como objetivo encontrar falhas na execução do software.
Um teste é o ato de exercitar um software com casos de teste.
Um caso de teste é um conjunto de entradas e uma lista de saídas esperadas.
A essência do teste de software é determinar um conjunto de casos de teste para o que deve ser testado.
Duas categorias fundamentais são utilizadas para identificar casos de teste:
O teste estrutural e o teste funcional.
O teste estatístico é outra técnica de teste, que tem como objetivo expor o software a condições reais de uso.
Esta técnica baseia- se em informações referentes à utilização do software para determinar os casos de teste.
O teste estrutural tem como objetivo determinar se todos os elementos lógicos e de dados do software estão funcionando corretamente.
Os casos de teste para o sistema são obtidos a partir de sua implementação.
Assim, o conjunto de casos de teste está baseado no conjunto de implementações do sistema, não estando totalmente voltado ao conjunto das especificações do software, ver Figura 5.
Utilizando o teste estrutural, os casos de teste:
Garantem que todos os caminhos independentes dentro de um módulo tenham sido exercitados;
Verificam todas as decisões lógicas para valores falso ou verdadeiro;
Executam todos os laços em suas fronteiras e dentro de seus limites operacionais;
E exercitam as estruturas de dados internas para garantir a sua validade.
Desta forma, esta categoria de teste é indicada ao teste de cada componente utilizado no sistema de gerenciamento de workflows.
Para isto, é necessário o conhecimento do código fonte do sistema.
Conhecendo o código do sistema, é possível realizar uma análise dos pontos mais críticos do software, o que qualificaria o teste.
Entretanto, para isso, exigiria- se- o acesso ao código fonte da aplicação.
Considerando que cada módulo do modelo de referência pode ser desenvolvida por diferentes fabricantes, seria complicada uma análise geral do produto.
O teste de funcional baseia- se na especificação do sistema.
Testes funcionais não levam em consideração a implementação do sistema.
Desta forma, sua realização se dá apenas em função de as entradas e das saídas do sistema, por isso este tipo de teste também é chamado de teste de caixa preta, ver Figura 6.
Os casos de teste para o sistema são obtidos a partir de sua especificação.
Assim, o conjunto de casos de teste está baseado no conjunto das especificações do sistema, não estando totalmente voltado ao conjunto de operações do software, ver Figura 7.
As categorias de erros mais evidenciadas por o teste funcional são:
Erros de interface, funções incorretas ou ausentes, erros nas estruturas de dados ou no acesso a bancos de dados externos, erros de desempenho e erros de iniciação e término.
O foco está nas entradas e nas saídas apropriadas para cada função testada.
Em o teste funcional, todos os requisitos funcionais para o sistema devem ser alcançados por o sistema:·
Todos os tipos ou classes de entradas legais devem ser aceitos por o software.·
Todas as classes de entradas ilegais devem ser rejeitadas.·
Todas as classes possíveis de saída do sistema devem ser executadas e examinadas.·
Todos os estados do sistema e suas transições devem ser executados e examinados.·
Todas as funções devem ser executadas.
Desta forma, em SGWfs, o teste funcional permite validar a interação entre os diferentes módulos do sistema, aplicando diferentes entradas e verificando suas saídas.
Ferramentas de definição de processo, por exemplo, podem ser analisadas através da interação do usuário e da verificação se os requisitos da Interface 1 estão sendo atendidos em função de as ações realizadas por o usuário.
Além disso, em sistemas de gerenciamento de workflow, pode- se verificar ocorrências em que a execução de um workflow não ocorre de acordo com a definição do seu respectivo modelo de workflow.
Esta é carregada por o SGWf e pode ser expressa através de um arquivo XPDL (XML Processing Description Language) (WfMC, 2005).
Ela contém todas as informações necessárias para a criação e gerenciamento das instâncias de workflow.
Em workflows, a variedade de possíveis execuções do fluxo de controle é muito grande, impossibilitando a realização de testes exaustivos para modelos de média e alta complexidade.
Com o objetivo de agregar qualidade do teste do ponto de vista do usuário, deve- se priorizar os pontos mais utilizados do fluxo de controle.
Assim sendo, é indicada a utilização de teste estatístico.
Esta técnica tem como objetivo expor o software a condições reais de uso.
Desta forma, ao se analisar a correta execução do fluxo, é possível simular usuários reais, fazendo com que pontos mais utilizados do fluxo recebam uma maior atenção no momento do teste.
Para isso, são necessárias informações referentes à execução do fluxo.
Estas informações são mapeadas para um modelo de uso.
Os modelos de uso empregados no teste estatístico tratam da descrição dos possíveis usos de um sistema, e suas interações com o usuário, através do emprego de um modelo de estados discretos.
Os tempos presentes no sistema também são mapeados de maneira discreta para o modelo.
Modelo de uso é um grafo onde existem estados e transições entre esses estados.
O conjunto dos estados e das transições entre os estados é chamado de estrutura do modelo.
Esta estrutura é utilizada para descrever os possíveis usos do software.
São atribuídas, à estrutura, as probabilidades que representam o uso previsto do software.
Estas probabilidades descrevem o comportamento do usuário diante de o sistema.
Assim, em testes baseados em modelos, tem- se, como entrada, a execução de determinada atividade e, como saída, a ativação da próxima atividade a ser executada.
Desta forma, o conjunto de casos de teste é dado por a seqüência de atividades a serem executadas.
Para o mapeamento de um modelo de uso, são muitas vezes empregadas cadeias de Markov, a fim de possibilitar o emprego de elementos estatísticos, para que as probabilidades de ocorrência de cada transição possam ser mapeadas.
As cadeias de Markov têm como problema a explosão na quantidade de estados, pois algumas construções de fluxo (paralelismos) não são representadas com muita eficiência por elas.
Por outro lado, as redes de Petri são uma classe de formalismos bastante utilizadas para a representação de processos, permitindo que todas as construções básicas encontradas em processos de workflow sejam representadas.
Além de o mais, este formalismo permite a representação do tempo de forma contínua, tornando a geração de casos de teste mais realista.
Desta forma, agrega- se bastante qualidade aos casos de teste gerados, devido a o fato que, em workflows, o fluxo de controle pode ser alterado apenas em função de o tempo.
Um simples atraso na execução de uma atividade pode fazer com que outra atividade seja encaminha a outro participante do fluxo.
Em as redes de Petri, é possível atrelar taxas às transições, possibilitando a geração de casos de testes através da análise do modelo.
Assim, um lugar corresponde a uma circunstância que pode ser usada como pré-e-/ ou pós-condição para tarefas.
Além disso, este formalismo foi aplicado com sucesso à análise de desempenho de sistemas cujas características principais incluem a simultaneidade e a sincronização, presentes e importantes em SGWfs.
Considerando a presença de interfaces bem definidas para a comunicação com o serviço de execução de workflow, torna- se possível a execução dos testes independentemente da implementação.
Com isso, possibilita- se também o teste de cada um dos módulos do modelo de referência.
Para tanto, a estratégia adotada deve ser o teste funcional, o qual não depende da implementação do software.
Em se tratando do teste do ponto de vista dos executores do workflow, tem- se que o teste estatístico apresenta um retrato do comportamento do usuário em relação a o processo.
O teste estatístico proporciona que se obtenha um conjunto de casos de teste que priorizam os pontos mais utilizados do sistema.
Em a tentativa de obter uma maior qualidade em seus processos, cada vez mais as empresas têm procurado estruturar- los.
Uma alternativa para isto é a utilização de SGWf.
Desta forma, além de estruturar, é possível que se realize a gerência dos processos na organização, obtendo um maior controle sobre cada um.
Entretanto, em SGWf, como em qualquer outro software, pode haver falhas na execução.
Isto implica em erros na gerência dos processos, ocasionando uma queda em sua qualidade.
Assim sendo, há a necessidade de se testar sistema de gerenciamento de workflows, pois não adianta se utilizar um SGWf para aumentar a qualidade do processo, se os workflows contém falhas na execução.
Um determinado deadline pode não estar sendo respeitado, gerando uma perda na pró-atividade do SGWf e, por exemplo, ocasionando uma ociosidade no processo.
Considerando os cinco módulos que interagem com este serviço de execução através de suas respectivas interfaces no modelo de referência, veja Figura 4, é possível acessar o serviço de execução do workflow através de qualquer uma de suas interfaces.
Desta forma, cada módulo poderia ser simulado, podendo ser realizados testes funcionais para cada uma das funcionalidades de um sistema de workflow.
Cada interface do modelo de referência é bidirecional, ou seja, permite o acesso tanto ao módulo como ao serviço de execução de workflow.
Assim, cada interface fornece dois objetivos ao teste.
Em a Tabela 1, são apresentadas quais verificações são possíveis para cada interface.
Usuários podem interagir com um sistema de workflow através de duas maneiras:
Como administradores ou como executores.
Administradores, responsáveis por a gestão e acompanhamento dos workflows, interagem com o módulo de Ferramentas de administração e supervisão do modelo de referência, o qual se comunica com o serviço de execução de workflow através da interface 5.
Usuários responsáveis por a execução dos workflows interagem com o módulo Aplicativos clientes de workflow, o qual se comunica com o serviço de execução do workflow através da interface 2.
A simulação da interação do usuário com o sistema para a realização de teste pode se dar através destas duas interfaces do modelo de referência.
Desta forma, a interface 2 possibilita que seja testado todo o controle das worklists, enquanto a interface 5 proporciona que seja verificada se a gerência e a apresentação dos dados está sendo realizada de maneira correta.
Assim sendo, para que o teste leve em consideração a presença de distintos usuários ao longo de o fluxo de controle é indicado o teste a partir de a interface 2, pois através desta interface as atividades são apresentadas do ponto de vista dos executores do workflow, sendo distribuídas através das worklists dos usuários.
A garantia de que o teste dê suporte a distintos padrões de fluxo encontrados em workflows é uma preocupação desta pesquisa.
Considerando que apenas utilizando os padrões básicos é possível a representação dos demais padrões, esta pesquisa se preocupa com a realização de testes em workflows que utilizem apenas os padrões básicos.
Em o teste estatístico, os casos de teste são específicos, pois são gerados tendenciosamente, dando maior atenção aos pontos mais utilizados na execução do software.
Além disso, em workflows, decisões podem ser tomadas apenas em função de o tempo, sem que necessariamente tenha a interação de um usuário ou aplicação.
O fluxo de controle pode ser alterado apenas em função de o tempo.
Um simples atraso na execução de uma atividade pode fazer com que outra atividade seja encaminha a outro participante do fluxo.
Sabendo que o teste estatístico pode utilizar modelos de uso, para a descrição dos possíveis usos de um sistema e suas interações com o usuário, este trabalho utiliza rede de Petri para esta descrição.
Isto se deve ao fato de que as redes de Petri permitem a representação das informações necessárias ao teste estatístico baseado em modelos utilizando tempo de forma contínua, possibilitando a geração de casos de teste mais realistas.
Além disso, este é um formalismo muito indicado para a representação de workflows.
A utilização de um dialeto de redes de Petri que possibilite a geração de casos de teste para SGWf se mostra como um caminho a ser seguido para que se atinja o objetivo desta pesquisa.
Este dialeto deve contemplar as definições necessárias ao teste estatístico e as características presentes em workflows, para então ser apresentada uma forma de tradução destas informações para uma rede definida por este dialeto.
Assim sendo, o presente trabalho tem como objetivo apresentar uma forma de geração de casos de testes para SGWf.
Estes casos de testes consideram as particularidades presentes em workflows.
Devido a a complexidade de cenários e a preocupação com a confiabilidade do teste, o presente trabalho utiliza o teste estatístico.
Além disso, a geração destes casos de teste se dá de forma automatizada.
Para isto, são realizados os seguintes objetivos específicos:
Diversas informações contidas em ele.
Como gerar, de forma automatizada, casos de teste para SGWf, aplicando técnicas estatísticas e levando em consideração os distintos padrões de fluxo, as características temporais e a presença de participantes?
Após a apresentação do cenário de pesquisa, o problema foi caracterizado e os requisitos da solução determinados.
Baseado nestes, tem- se o objetivo e a questão de pesquisa.
Em o capítulo seguinte, é apresentada e demonstrada uma abordagem ao teste de sistemas de gerenciamento de workflows.
Para isto, são descritos os requisitos da formalização para a rede de Petri.
Para então, ser demonstrada a formalização da rede.
Para a realização de testes estatísticos em SGWf, faz- se necessário a utilização de um modelo que possibilite a representação das informações estatísticas.
Para isto, esta pesquisa utiliza redes de Petri.
As redes de Petri possibilitam a inserção de informações estatísticas, possibilitando a geração de casos de testes através da análise do modelo, além de serem um formalismo bastante utilizado para a representação de processos.
A seguir, são enumerados estes requisitos para a formalização da rede a ser utilizada, para então apresentar a formalização do dialeto de rede de Petri que possibilita a geração de casos de teste para SGWf:
And-Join, OR-Split e OR-Join) Definição De a WfGSPN Uma rede de Petri compreende um conjunto de lugares P, um conjunto de transições T, e um conjunto de arcos dirigidos F.
Em a representação gráfica de redes de Petri os lugares são expressos como círculos e transições como barras.
Os arcos conectam transições aos lugares e os lugares às transições.
Os lugares podem conter tokens, que são expressos como pontos pretos.
O estado de uma rede de Petri é definido por o número de tokens contido em cada lugar e denotado por um vetor M, cujo i-ésimo componente mi representa o número de tokens no i-ésimo lugar.
O estado da rede é chamado, geralmente, de marcação da rede.
A definição de uma rede de Petri requer a especificação da marcação inicial M.
A definição de formal de redes de Petri PN (Petri Nets) é dada por:
Um lugar p é chamado de um lugar de entrada de uma transição t se e somente se existe um arco dirigido de p a t..
Um lugar p é chamado de lugar de saída de uma transição t se existe um arco dirigido de t para p.
É utilizado· t para se referenciar ao conjunto de lugares de entrada para uma transição t..
Para denotar o conjunto de lugares de saída da uma transição t utiliza- se t·.
De a mesma forma, é utilizada esta notação para se referenciar ao conjunto de transições de entrada e de saída de um lugar(· p e p·).
A execução de uma transição t consiste na retirada dos tokens dos lugares de entrada e o depósito de tokens nos lugares de saída.
A quantidade de tokens que é retirada ou depositada depende do peso de cada arco.
Peso corresponde ao número de marcações que são levadas de um lugar a uma transição, ou de uma transição a um lugar, por um dado arco.
Quando for omitido o valor do peso de um dado arco, é considerado que o peso do arco é 1.
Uma transição é dita habilitada numa dada marcação M se, e somente se, para todo os seus lugares de entrada a quantidade de tokens for igual ou maior ao peso do respectivo arco que liga o lugar à transição.
Redes de Petri estocásticas SPN (Stochastic Petri Nets) são dadas por (MARSAN;
Conte; Onde (P, T, F, M) é uma PN, e é um conjunto de taxas de ativação (execuções por unidade de tempo) associadas com as transições de PN.
O tempo de espera numa marcação M é dado por uma variável aleatória distribuída exponencialmente com média dada por:
A taxa de uma transição, a qual altera o estado da rede de Mi para Mj é (MARSAN;
Conte; Rk kHij Onde Hij é o conjunto de transições que levam do estado Mi ao estado Mj.
Este conjunto de transições é geralmente formado por apenas uma transição.
Em as redes de Petri estocástica generalizada GSPN (Generalized Stochastic Petri Nets), as transições da rede podem ser imediatas ou temporizadas.
Transições imediatas são executadas imediatamente ao serem habilitadas.
As transições temporizadas aguardam um certo tempo após sua habilitação, dado por uma função distribuída exponencialmente.
As transições imediatas são representadas por barras finas e as temporizadas por barras largas.
Sendo H o conjunto de transições ativas, e tendo apenas transições temporizadas, a transição temporizada ti H tem sua probabilidade de execução dada por Havendo apenas uma transição imediata de entre as transições ativas, esta deve ser executada antes das demais.
Caso haja mais transições imediatas, deve- se utilizar uma função de probabilidade em cada seleção de caminhos.
A função de probabilidade utilizada nos deadlines é apresentada mais adiante.
A função de probabilidade das demais seleções de caminhos presentes no processo deve ser fornecida por o conhecedor do comportamento do fluxo.
Se a probabilidade associada a uma transição imediata for zero, esta transição não pode ser executada.
Em as GSPN, a quantidade de elementos no conjunto R dado por o número de transições temporizadas na rede.
Em esta pesquisa é necessária a representação das características do fluxo, bem como os recursos (executores de atividades) presentes neste fluxo.
Para isto, decidiu- se estender as redes de Petri estocásticas generalizadas, para que possibilitem a representação das características presentes em workflows.
Assim, uma rede WfGSPN (Workflow -- Generalized Stochastic Petri Nets) que representa as informações necessárias para a geração de casos de teste para a SGWf é uma extensão de GSPN.
Em as WfGSPN, são depositados objetos nos lugares ao invés de tokens.
Objetos podem ser de dois tipos distintos:
Objetos de Execução e Objetos de Recursos. Objetos de execução correspondem aos objetos que representam as instâncias de workflow.
Os objetos de recursos representam os recursos disponíveis na rede.
Lugares de Recursos correspondem aos lugares onde se encontram apenas objetos de recursos.
Cada lugar corresponde a uma determinada classe;
Esta classe é a responsável por a criação das instâncias de recursos (objetos).
Desta forma, tem- se que Objeto de execução, Objeto de recurso e Lugar de recurso são dados por:
Objeto de execução:
Um objeto de execução é uma tupla o $= (IDObj, DataObj) onde:·
IDObj é o identificador do objeto de execução;·
DataObj é o conjunto de todos dados relevantes à instância de execução;
Objeto de Recurso:
Um objeto de recurso é um par or $= (IDRec, NRec) onde:·
IDRec é o identificador do recurso;·
NRec é o nome do recurso.
A classe do recurso é dada por a classe do Lugar de Recurso em o qual o objeto está depositado.
Sendo assim, um objeto de recurso pode apenas ser replicado em lugares de recurso que possuam a mesma classe em a qual ele estava depositado.
As definições de lugar de recurso e classe basearam- se nas definições apresentadas por Ruiz.
Em, estas definições fazem parte de uma formalização em redes de Petri para a representação de atividades em aplicações de escritório.
Lugar de Recurso: Lugar de Recurso são os lugares de rede responsáveis por o depósito dos objetos que representam os recursos necessários à execução do processo.
Lugar de recurso consiste numa tupla (IDRL, LOR, c):·
IDLR é o identificador do lugar de recurso;·
LOR consiste numa lista de objetos de recurso presentes no lugar.
Assim, tem- se que or LOR;·
c é a classe a qual pertence este lugar, sendo c Cl e Cl são o conjunto de todas as classes do processo.
Classe: Uma classe c denota o tipo de recurso presente do lugar.
Assim, se uma transição possui um lugar de recurso da classe Setor Financeiro como entrada representa que para a execução da atividade, representada por a transição, é necessário um executor do Setor Financeiro.
Lugares de recurso devem receber apenas objetos de recurso.
Objetos de recurso só podem ser depositados em lugares de recurso de mesma classe, ou seja, um objeto de recurso proveniente de um lugar de recurso cuja classe seja x pode ser depositado apenas em outro lugar de recurso cuja classe também seja x.
Habilitação: Para que uma transição possa ser executada deve haver objetos com mesmo Id (IDObj) em todos os seus lugares de entrada que não sejam lugares de recurso e com a quantidade suficiente exigida por o peso de cada arco de entrada da transição.
Arcos restauradores:
Atividades necessitam de executores (Performers) para serem executadas, porém estes executores não são alterados.
Em estas ocorrências, utiliza- se arcos restauradores.
Os arcos restauradores representam necessidades para ocorrência de uma transição que não geram efeitos nas marcações dos lugares de entrada.
Um arco restaurador é representado por uma seta dupla.
Dadas as definições apresentadas por Aalst e Hee referentes à WF-net, adaptou- se algumas destas definições para este trabalho.
Uma WfGSPN deve possuir as seguintes características:·
todo trajeto x P T é um caminho, ou parte de um caminho, de i para o.
O estado inicial da rede (estado i) é dado por o estado em o qual os objetos de execução da rede se encontram apenas no lugar i, e apenas os lugares de recursos podem conter objetos.
O estado final da rede (estado o) é dado por o estado em que os objetos de execução se encontram apenas no lugar o, os demais objetos existentes na rede se encontram apenas nos lugares de recurso.
Tempo de habilitação:
Tempo de habilitação de uma transição t é dado por o tempo que t está habilitada consecutivamente.
Assim sendo, estando a rede numa marcação M por um tempo x e estando uma transição t habilitada nesta marcação e após este tempo uma transição t é executada e a rede passa para a marcação M por um tempo y e permanecendo habilitada a transição t nesta marcação, diz- se que o tempo de habilitação da transição t é dado por x+ y.
Para esta pesquisa é importante que se possa ter acesso ao último tempo de habilitação tido por as transições.
Assim sendo, caso uma transição não esteja habilitada, seu tempo de habilitação é o mesmo da última vez em que esteve habilitada.
A o ocorrer uma nova habilitação, seu tempo de habilitação é reiniciado.
Denota- se T ime_ Active (t) o tempo de habilitação da transição t..
Este capítulo tratou de apresentar a formalização de um dialeto de redes de Petri.
Este dialeto possibilita a representação das características relevantes ao teste de SGWf.
Através deste dialeto, é possível a representação dos padrões básicos, deadlines, além de possibilitar a representação e simulação da alocação dos recursos necessários à execução de cada atividade.
Além disso, a execução da rede é baseada em informações estatísticas, possibilitando a geração de casos de teste estatísticos.
Em o capítulo seguinte, são descritos os passos para a geração da rede com base neste formalismo.
Além disso, é apresentada a forma de geração dos casos de teste.
Por fim, é descrito um exemplo.
Em este capítulo, é ilustrada a aplicação desta solução vista no capítulo anterior.
Para isto, são ilustrados os passos para a geração da rede.
Feito isto, é apresentada a aplicação desta rede, ou seja, a geração dos casos de teste a partir de ela.
Por fim, é ilustrado um exemplo.
Através das informações referentes ao processo (informações estatísticas, padrões de fluxo, participantes e questões temporais), um modelo de uso é gerado utilizando o dialeto de rede de Petri apresentado.
Exceto informações estatísticas quanto a a execução do fluxo de controle, que devem ser fornecidas, todas as demais informações estão presentes na definição do modelo de workflow.
Assim, com base nestas informações, a rede é gerada através das seguintes regras:
Determina o tempo gasto para a execução desta ocorrência, ao passo que a seleção de caminhos determina o fluxo a ser seguido em função deste tempo.
Assim, em:
Act1 $= 1, se\&gt; $= T_ DSA) atividade com deadline síncrono, (B) atividade com deadline assíncrono e (C) atividade com ambos os deadlines.
Pode- se verificar que cada construção é iniciada com lugar (es) e terminada com transição (ões), possibilitando que seja simplificado o arranjo das construções.
Isto se deve ao fato de que, basta a utilização de arcos, que correspondem diretamente às transições presentes num modelo de workflow, entre as construções para a construção da rede.
Como esta pesquisa tem o objetivo de testar workflows do ponto de vista dos usuários, apenas as atividades executadas por usuários dentro de o fluxo devem estar presentes nos casos de teste.
As atividades realizadas por usuários correspondem às transições que possuem, de entre seus lugares de entrada, lugares de recurso.
O tempo em que cada atividade é executada está relacionado ao tempo de espera em cada estado da rede.
Assim, quando uma atividade é concluída, a próxima atividade deve ser executada após o tempo de espera determinado por a rede.
Um caso de teste deve conter a seqüência de atividades a serem executadas, bem como em que tempo cada uma deve ser executada.
Cada caso de teste está dividido em passos.
Cada passo corresponde a uma atividade que um dado usuário deve executar.
Além disso, para que um usuário possa executar uma dada atividade, ele deve realizar login no sistema.
O tempo de espera em cada marcação da rede é dado por uma variável aleatória distribuída exponencialmente.
A cada estado da rede, o tempo de espera é determinado e então é definida a transição a ser executada.
Isto se dá quando houver apenas transições temporizadas ativas.
Assim, cada passo (Step) de um caso de teste é composto, respectivamente, por o tempo de qual atividade deve ser executada (Execute Activity) e por o encerramento do acesso ao sistema Act1 deve aguardar um tempo de espera x, seguida à atividade Act2 que deve aguardar um tempo de espera y.
A Figura 15 ilustra um caso de teste para este exemplo.
Os deadlines, apesar de possuírem uma seleção de caminhos em sua representação, não são tratados como tal.
Esta seleção de caminhos utiliza a função de probabilidade específica apresentada na formalização.
Dada uma atividade Act1 com um deadline síncrono de 4 unidades de tempos:
Ocorrendo o deadline, é necessário que se execute a atividade Act2;
Se não, ocorrer, o fluxo deve seguir para a atividade Act3.
Este exemplo é representado na Figura 18.
Para a geração de casos de teste, utilizou- se o exemplo de uma organização de festa.
Este exemplo foi extraído de Aalst e Hee.
Este exemplo foi simplificado para uma melhor compreensão.
Foram removidos os fluxos referentes à rejeição ao convite e à avaliação da banda, além disso o deadline para a resposta da banda faz com o fluxo retorne para o envio de um novo convite.
Em este exemplo, um cliente registra a solicitação para a organização de uma festa.
A festa necessita de um local e de música.
O local da festa pode ser indoor, com o aluguel de um salão, ou outdoor, com o aluguel de um terreno e uma tenda.
Este terreno pode, ou não, necessitar de uma permissão para a execução da festa;
Caso necessite, deve- se obter- la.
Para a execução da rede utilizou- se o framework JFern.
Para que a rede executasse como esperado foram necessárias algumas extensões, para:
Que a seleção das transições a serem executadas fosse baseada nas taxas de cada uma de elas;
Que se pudesse simular o tempo de espera de cada transição para sua execução;
Que fossem tratados os Lugares de Recurso e Objetos de Recurso, assim como Objetos de Execução;
Que fosse respeitada a definição de habilitação;
Que, nos deadlines, as funções de probabilidades fossem atualizadas em função de o tempo de habilitação;
E que o conjunto de casos de teste fosse gerado.
Em a Figura 21, é apresentada a modelagem da rede.
O conjunto R, para este exemplo, corresponde à Tabela 2.
Em este exemplo, utiliza- se o tempo de 2, 5 para o deadline síncrono.
O deadline e as seleções de caminhos possuem as seguintes funções de probabilidades:
Conf irmaAviso se (T ime_ Active (T ime_ Conf irmaAviso) Conf irmaAviso $= 1, se (T ime_ Active (T ime_ Conf irmaAviso)\&gt; $= 2,5), Conf irmaAviso $= 0, deadline_ sincrono $= 1.
As figuras 22, 23, 24 e 25 apresentam amostras de casos de teste gerados e ilustração dos caminhos percorridos por estes casos de teste.
Em esta geração de casos de teste, são descritas a seqüência de atividades que cada tipo de usuário (Performer) deve executar, ou seja, é apresentada toda a seqüência de interações dos usuários com o workflow.
Além disso, a intenção, neste exemplo, é apresentar diversos casos de teste que representam execuções independentes.
Desta forma, foi executada a mesma rede n vezes com apenas um objeto de execução no place i.
Em a identificação de qual atividade deve ser executada, apresenta- se o Id da atividade seguido do seu nome entre parênteses.
Além disso, é fornecido o tempo de espera para a execução de cada atividade.
Em este capítulo, foram apresentados os passos para a criação da rede a partir de uma definição de fluxo.
Por fim, foi ilustrado um exemplo.
Em este exemplo, foram apresentados os casos de teste gerados a partir de uma definição de processo.
Com este capítulo, verifica- se que o formalização apresentada possibilita a representação das características relevantes ao teste de SGWf.
As representações mostradas neste capítulo exploram os padrões básicos, além de definir a representação de executores das atividades, deadlines, dados relevantes do workflow, participantes presentes no workflow, identificadores de pacotes e nomes dos processos.
Em o âmbito do CPTS (Centro de Pesquisas em Teste de Software), que é uma parceria entre a Hp (Hewlett--Packard) e a PUCRS (Pontifícia Universidade Católica do Rio Grande do Sul) com o objetivo de desenvolver inovações tecnológicas e formar pesquisadores no campo de Testes de Software, analisou- se a possibilidade de adaptar esta técnica para a geração de casos de teste para o teste de desempenho.
Em o próximo capítulo, este estudo é apresentado.
Em este capítulo, é apresentada uma estratégia para modelagem de desempenho adaptada à geração de cenários do teste de desempenho.
Este estudo foi estimulado por a necessidade de se gerar cenários de testes realistas para o teste de desempenho, para isso sugere- se testes estatísticos.
Além disso, neste estudo, há a necessidade de que a alocação de recursos seja tratada, para que não haja equívocos caso determinado recurso não esteja disponível e o tempo de resposta se torne maior.
Com isso, verificou- se os requisitos para a geração de um modelo de uso para a criação de cenários de teste de desempenho eram semelhantes ao requisitos para o teste de sistemas de gerenciamento de workflows.
Como em SGWf, o teste de desempenho tem a preocupação com a validação temporal e com a utilização de informações estatísticas para a determinação dos casos de teste.
Além disso, a simulação da concorrência por os recursos disponíveis ao teste, que em workflows correspondem aos executores atrelados a cada atividade, também é relevante ao teste de desempenho.
Assim, o estudo apresentado neste capítulo trata de apresentar a metodologia utilizada para, a partir de informações referentes ao sistema, gerar um modelo de uso baseado no dialeto apresentado neste trabalho, ver Sessão 5.2.
Em, são apresentadas mais informações sobre este estudo.
Como o objetivo é simular as atividades executadas por o usuário, a fim de verificar o comportamento apresentado por a aplicação, este estudo utiliza diagramas UML (Unified Modeling Language).
Os diagramas de atividades possibilitam a modelagem das atividades executadas por os usuários e por a própria aplicação.
Desta forma, é possível simular a interação dos usuários e verificar se o sistema executou a ação esperada.
Utilizou- se, também, diagramas de casos de uso.
Assim sendo, cada caso de uso possui um diagrama de atividade atrelado, que descreve seu comportamento esperado.
Através da análise do diagrama, é possível determinar seqüências de atividades que devem ser executadas para que se tenham casos de teste.
Algumas regras para a realização da tradução de um diagrama UML numa rede Petri baseada no dialeto formalizado, ver Sessão 5.2, devem ser seguidas.
Em algumas representações, utilizou- se um quadrantes pontilhados para dar destaque ao que se deseja ilustrar, estes quadrantes não fazem parte da rede.
As representações são descritas a seguir:·
Objeto de execução: São depositados no início do fluxo, no lugar i.
Estes objetos contêm as seguintes informações:·
PApopulation: Número de usuários que devem acessar o sistema corresponde a quantos objetos existirão no lugar i.
Cada objeto presente no lugar i corresponde a um usuário que acessará o sistema.
A o final do fluxo, a última transição tem seu arco de saída com entrada do lugar o.·
Recursos: Os recursos disponíveis para o teste devem ser representados na rede através de objetos de recursos nos respectivos lugares de recurso.
Desta forma, a marcação inicial da rede M é dada por os objetos de recursos nos seus respectivos lugares de recurso e por os objetos que representam as instâncias de execução no lugar i.·
PAoccurrence: É representado através de uma transição temporizada cujo lugar de entrada é o lugar inicial (lugar i).
Como lugar de saída, tem- se o lugar que representa o início do fluxo descrito no diagrama.
Assim, esta transição tem como objetivo lançar as diversas instâncias de execução (casos de teste) na rede.
A taxa da transição corresponde ao PAoccurrence.
A representação desta construção é apresentada na Figura 26.·
Atividade: Cada atividade é representada por três transições imediatas e lugares entre estas transições:
Uma transição representa a disponibilidade de execução da atividade (transição Start);
Outra transição imediata representa o início da execução da atividade (transição Run);
E a outra transição representa o final da execução da atividade (transição End).
Esta construção é apresentada por a Figura 27.
WfGSPN.· PAextDelay:
É o tempo que um usuário espera para realizar uma nova requisição, também chamada think time, ou seja, é o tempo esperado entre a disponibilidade de uma execução e o real início da execução desta atividade.
É representado por uma transição temporizada antes da transição imediata Run, a qual representa o inicio da execução da atividade em questão, Figura 28.
WfGSPN.· PArespTime:
Indica o tempo de resposta esperado, ou seja, o tempo que determinada atividade leva para responder.
Desta forma, corresponde a uma transição temporizada após a execução da transição imediata Run, Figura 29.·
Recursos: Representam os recursos necessários a execução de uma dada atividade.
Desta forma, tem- se que um recurso é alocado quando a atividade que o necessita inicia sua execução (o início da execução é dado por a transição Run).
Assim sendo, o recurso passa a estar disponível após o término da atividade que o alocou (o final da execução é dado por a transição End), Figura 30.
Há a possibilidade de uma dada atividade alocar um recurso que será disponibilizado novamente apenas após a execução da próxima atividade, esta construção é apresentada na Figura 31.
WfGSPN.· PAprob:
Indica a probabilidade da requisição ocorrer.
É representado por uma transição imediata contendo a probabilidade do fluxo ser seguido.
As taxas presentes nas transições que representam as atividades possuem o valor 1, pois não há possibilidade de seguir mais de um caminho dentro de uma única atividade.·
Seleção de Caminhos (OR Split):
Corresponde aos pontos em que o fluxo deve seguir por um dos n caminhos possíveis.
Como estas ocorrências consistem apenas na seleção de qual caminho a seguir, utilizou- se apenas transições que representam a disponibilidade de seleção (transição Start) e escolha do caminho (transição End).
A taxa da transição (r) que representa a escolha do caminho corresponde ao PAprob.
Esta construção é apresentada por a Figura 32.·
União Simples (OR Join):
Corresponde aos pontos do fluxo onde dois ou mais sub-fluxos se unem sem que haja nenhum tipo de sincronização.
Como estas ocorrências tem apenas o objetivo de fazer com que sub-fluxos passem a seguir por um único sub-fluxo, utilizouse apenas transições que representam a chegada de um sub-fluxo (transição Start) e que representam a união num único fluxo (transição End).
Esta construção é apresentada por a Figura 33.·
Caso de uso:
A rede simula que um dado usuário ao acessar o sistema pode escolher, de acordo com a probabilidade, qual caso de uso ele irá executar.
Com isso, após o objeto de execução ter sua execução iniciada através da transição Start Inst, é realizada uma seleção de caminhos, baseada nas probabilidades representadas nos casos de uso.
Esta seleção de caminhos representa a escolha por um dos casos de uso presentes no sistema.
Após a escolha por os casos de uso, cada uma das transições End da seleção de caminhos deve ser ligada ao respectivo lugar de entrada da transição Start relativo à primeira atividade do diagrama de atividades que descreve o caso de uso em questão.
Em o final do fluxo, é utilizada uma construção de união simples para que os sub-fluxos abertos por a escolha do caso de uso convertam para um único lugar final (o).
Esta construção é apresentada por a Figura 36.
O objetivo do estudo descrito neste capítulo é, a partir de um arquivo que descreve um diagrama UML, gerar casos de teste para teste de desempenho, se preocupando com as diversas características existentes no teste de desempenho:
Simulação do delay que o usuário tem ao executar uma dada atividade e verificação do tempo de resposta do sistema.
As redes de Petri proporcionam um bom trabalho com informações estatísticas, possibilitando a modelagem das atividades do usuário do sistema.
Desta forma, as redes de Petri passam a ser o mecanismo de geração casos de teste, cada execução da rede simula a execução de um caso de teste.
Petri, ficando a cargo de a execução da rede a geração de casos de teste.
Assim, tem- se que o esquema desta solução consiste na entrada de um diagrama de casos de uso e atividades, estes diagramas são modelados numa rede de Petri.
A partir de esta rede, são gerados casos de teste, para então ser gerado o script para a execução automática do teste.
Este esquema é representado por a Figura 37.
Esta solução possibilita que a geração de casos de teste se dê de forma independente da geração do script para a ferramenta alvo.
Este trabalho buscou o auxílio apenas de ferramentas open source, que possibilitem o teste de desempenho em aplicações Web.
Desta forma, escolheu- se a ferramenta JMeter para a execução dos casos de teste.
A ferramenta JMeter possibilita que seja configurada toda a realização dos testes a partir de um arquivo de entrada.
As figuras 38 e 39 apresentam um exemplo simples de modelos de entrada um usuário de FTP (File Transfer Protocol).
Em este exemplo, definiu- se que somente 3 usuários podem acessar o servidor de FTP simultaneamente, a fim de simular a disputa por recursos.
Os casos de uso apresentados são &quot;List FTP Files «e &quot;Get File», ambos com probabilidade 0.5.
A Figura 39 mostra os diagramas correspondentes da atividade.
Considerando que neste exemplo o objetivo é submeter o sistema a diversas requisições, gerou- se uma rede com n objetos de execução no place i.
Com isso, esta rede gera um caso de teste que simula diversas execuções em paralelo do fluxo modelado.
A Figura 40 apresenta a WfGSPN extraída do modelo.
Para isso, diagramas UML são utilizados para a descrição das atividades a serem executadas no sistema.
A partir destes diagramas, é modelada uma rede baseada no dialeto WfGSPN.
A execução desta rede gera casos de teste.
A partir destes casos de teste é desenvolvido o script de teste para ser carregado por a ferramenta JMeter.
A seleção de alguns artigos originados de uma pesquisa referente a assuntos que tratam de workflows, redes de Petri e/ ou teste de software, servindo de base para um estudo dos caminhos já trilhados em torno de o objetivo deste trabalho, é apresentada neste capítulo.
Primeiramente, foi verificada a existência de diversas pesquisas baseadas em redes de Petri.
Marsan Utiliza as redes para a modelagem da arquitetura de um multiprocessador.
Em este estudo, são apresentadas redes que possibilitam a representação de características temporais, juntamente com informações estatísticas referentes ao fluxo de controle.
Yamaguchi Trabalha com uma extensão desta rede numa especificação distribuída com alocação de recursos.
Em, é apresentado um modelo baseado em redes de Petri para composição de serviços web.
Aalst apresenta diversas vantagens em utilizar redes de Petri para a representação de fluxo de processos.
Com isso, alguns trabalhos relacionados a workflows e redes de Petri foram selecionados.
Em e, verificou- se representação de workflows através de redes de Petri.
Raposo, Magalhães e Ricarte trata da representação de fluxos de processos, preocupando- se também com a alocação de recursos.
Em, é ilustrada uma ferramenta (PWFtool) para a modelagem de fluxos de processos utilizando a notação de redes de Petri.
Esta ferramenta, baseia- se na formalização apresentada por Aalst.
Lopez-Grão, Merseguer e Campos apresentada uma representação em redes de Petri para diagramas de atividades UML, preocupando- se com a representação de informações referentes ao desempenho da aplicação.
Esta representação baseia- se nas redes de Petri estocásticas generalizadas, dialeto demonstrado por Marsan Em um dado estado do fluxo, um determinado processo pode seguir sua execução por segmentos distintos do processo.
Isto sugere que cada caminho possível está atrelado a uma determinada probabilidade.
Por isso, é interessante relacionar propriedades estatísticas aos processos para que se possa ter uma idéia definida de quais pontos do fluxo requerem uma maior atenção na geração dos casos de teste.
Esta constatação leva a uma busca por ocorrências na literatura referente a redes de Petri estocásticas.
Em, utiliza- se redes de Petri estocásticas para notação de modelos estocásticos.
Esta notação baseia- se nas redes de Petri estocásticas generalizadas (MARSAN;
As GSPN também são base para a avaliação de desempenho de sistemas de paralelos/ distribuídos.
Ramaswamy explora o teste de software baseando- se, para isso, em modelos descritos através de redes de Petri.
Ho e Lin, também explora o teste de software através da geração de casos de teste a partir de modelos de redes de Petri.
Para isto, alguns segmentos presentes em modelos de software são identificados:·
Caso 1: Uma transição com dois locais diferentes na entrada mas o mesmo local na saída;·
Caso 2: Uma transição com o mesmo local na entrada mas dois locais diferentes na saída;·
Caso 3: Transições em seqüência;·
Caso 4: Duas diferentes transições com o mesmo local de entrada mas diferentes locais de saída cada uma;·
Caso 5: Duas diferentes transições com o mesmo local de entrada e o mesmo local de saída;·
Caso 6: Duas transições diferentes com locais de entrada diferentes e com o mesmo local de saída;·
Caso 7: Duas diferentes transições com locais de entrada e de saída diferentes;·
Caso 8: Uma transição cujo local de entrada é o mesmo local de saída.
Estes segmentos são semelhantes aos padrões de construção de fluxo encontrados em workflows.
O teste de workflow deve, além de considerar informações estatísticas, contemplar a validação das características presentes em workflows (usuários, distintos padrões de fluxo e tempo) de maneira conjunta.
Entretanto, não foram encontrados, na literatura, testes que abordassem a validação do fluxo de controle juntamente com questões temporais e tratando dos distintos participantes presentes no fluxo de controle.
A seguir, na Tabela 3, são apresentados alguns dos trabalhos citados que se relacionam com a pesquisa.
Aalst apresenta um dialeto de redes de Petri para a representação de workflows.
Ho e Lin trata da geração de casos de teste se preocupando com tempos discretos, entretanto não se preocupa com a validação do fluxo em função deste tempo.
Marsan, Conte e Balbo define uma classe de redes de Petri que permite a representação de informações estatísticas, juntamente com a representação de transições na rede que consomem tempo para a execução.
Ruiz apresenta um dialeto de redes de Petri que contempla a definição dos recursos necessários a execução de uma transição.
Além destes trabalhos, também faz parte da comparação a ferramenta STAGE 6.
2 para a geração de casos de teste de forma automatizada.
Esta ferramenta, desenvolvida por o CPTS, foi utilizada para a geração de casos de teste para SGWf.
Constatou- se que há diversas pesquisas circundando o objetivo deste trabalho.
Diversos trabalhos utilizam as redes de Petri como uma ferramenta de modelagem de sistemas.
Além disso, encontrou- se vantagens em utilizar este formalismo para a modelagem de sistemas de workflows.
Há também pesquisas na utilização de redes de Petri para a representação de questões temporais e estatísticas.
Verificou- se, também, trabalhos que utilizam Redes de Petri para a geração de casos de teste.
Assim sendo, esta pesquisa uniu diversas características presentes nestes trabalhos, com o objetivo de apresentar uma formalização precisa e que atendesse os requisitos desta pesquisa.
Inicialmente, mostrou- se os pontos a que um trabalho que tem por objetivo o teste de sistemas gerenciamento de workflow deve se ater.
Apresentou- se a arquitetura de um sistema de workflow, além de as características temporais presentes na execução de workflows, presentes constantemente no fluxo do processo.
A validação destas questões temporais torna os testes mais realistas, possibilitando que deadlines sejam validados.
Considerando a geração de casos de teste com base na visão do usuário responsável por a execução dos workflows, verifica- se que o indicado é a realização de testes funcionais.
Com o teste estatístico, possibilita- se validar os pontos mais percorridos no fluxo.
Para isso, apresentou- se a formalização de um dialeto de redes de Petri capaz de representar estas informações.
A seguir, demonstrou- se a validade deste dialeto a partir de a realização de um exemplo.
Para este exemplo, casos de teste foram gerados.
Estes casos de teste validam os deadlines presentes em workflows, tratam dos recursos presentes no fluxo e foram gerados com base em informações estatísticas referentes ao processo.
Sistemas de gerenciamento de workflows possuem claramente uma arquitetura bem definida, em a qual o gerenciamento das atividades ocorre uma camada abaixo de a interface de interação com o usuário.
De forma que, ao gerar casos de teste para SGWfs é possível submeter- los a esta interface de interação com o usuário ou diretamente à camada responsável por o gerenciamento das atividades.
Considerando a similaridade dos requisitos do teste de desempenho e do teste de sistemas de gerenciamento de workflows, adaptou- se a formalização apresentada para o teste de SGWf ao teste de desempenho.
Este estudo foi validado através de uma ferramenta (UpperT), que através de diagramas de atividades gera uma rede de Petri baseada no dialeto formalizado.
A partir de esta rede, casos de teste são gerados, para então serem lidos e executados por a ferramenta JMeter.
Como fruto deste trabalho, tem- se a aprovação de um artigo.
Por fim, os trabalhos que circundam esta pesquisa foram apresentados.
Com isso, pos-sibilitou- se uma comparação da solução apresentada e dos trabalhos relacionados frente a os requisitos levantados.
O dialeto formalizado nesta pesquisa é a única solução que satisfaz todos estes requisitos.
Futuramente, como forma de analisar os casos de teste gerados, deve- se realizar uma estudo sobre a cobertura dos casos de teste.
Assim, será possível uma determinar a quantidade mínima de casos de teste para que se tenha uma cobertura total do modelo.
Além disso, a partir de a experimentação, pôde- se verificar tópicos que podem dar continuidade à pesquisa.
A geração de um modelo de dados a partir de um documento de definição de processo possibilitará que a geração de casos de teste seja realização de forma simples.
Somando- se a isso, a criação de um módulo que gere scrips para serem submetidos à Interface 2 do modelo de referência possibilitará que o teste de SGWf seja realizado de forma automatizada.
Além disso, a aplicação deste formalismo ao teste de desempenho sugere que sejam analisados outros problemas com requisitos semelhantes.
