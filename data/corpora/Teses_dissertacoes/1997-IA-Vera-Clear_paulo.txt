Esta dissertação propõe uma modelagem e uma implementação de um léxico semântico para o português baseadas na teoria de semântica lexical apresentada por James Pustejovsky no livro &quot;The Generative Lexicon».
Este trabalho incorporase à área de Processamento da Linguagem Natural (PLN) através de uma investigação científica de aspectos computacionais e lingüísticos.
De o ponto de vista lingüístico e computacional, um estudo de semântica e do significado é introduzido com o intuito de efetuar uma compreensão preliminar do assunto a ser desenvolvido e situar o presente trabalho.
Posteriormente, um estudo de trabalhos relacionados ao tema desta dissertação é apresentado.
Analisando trabalhos como, é proposta uma implementação de um léxico semântico sob a teoria de Pustejovsky porque esta é uma teoria atual, computacional e com características que suprem os principais requisitos da representação do significado.
Esta proposta foi implementada através da criação de um banco de dados lexical, estruturado em árvore Trie, e de uma biblioteca de funções que provê fácil manipulação e manutenção do conhecimento semântico armazenado.
O processamento da linguagem natural é uma área de pesquisas em expansão que visa tratar a linguagem natural (LN) com o objetivo de desenvolver teorias computacionais da linguagem, usando noções de algoritmos e estruturas de dados provenientes da ciência da computação.
A linguagem natural concentra um dos aspectos fundamentais do comportamento humano, e é um componente crucial em nossas vidas.
Em sua forma escrita, serve como um enorme registro de conhecimento e, em sua forma falada, serve como nosso meio mais primário de comunicação com os outros.
Para explorar o conhecimento de natureza lingüística e possibilitar uma comunicação homemmáquina efetiva, modelos computacionais têm sido criados.
Mas esses modelos nem sempre têm obtido sucesso devido a as dificuldades em processar a língua de forma irrestrita.
Em a maioria dos sistemas que visam, de alguma forma, trabalhar com ou sobre a linguagem natural, o processamento se restringe a problemas de domínio específico, com soluções proprietárias e restritas.
Isto ocorre, em grande parte, devido a a complexidade inerente à linguagem natural, que ainda não é tratada na sua totalidade em sistemas computacionais.
Esta complexidade leva a sistemas de PLN limitações físicas, limitações temporais ou, até mesmo, limitações algorítmicas.
Estas limitações ocorrem, muitas vezes, por falta de um modelo computacional adequado.
Diversos modelos vêm sendo desenvolvidos objetivando eliminar ou diminuir tais limitações, nas várias etapas de processamento da linguagem.
Segundo, para que os sistemas de PLN se tornem robustos, devem englobar uma variedade de tratamentos de problemas ocorrentes no processamento da linguagem natural, como:
Inexatidão, incluindo erros de fala, pronúncia incorreta, palavras sobrepostas e sentenças não gramaticais;
Incompletude, incluindo construções elípticas como &quot;Eu também «e anáforas;
Imprecisão, incluindo o uso de termos relativos sem um ponto específico de referência, como em &quot;João é muito alto», e uso de termos qualitativos como &quot;Maria é linda&quot;;
Ambigüidade, onde múltiplas interpretações, em algum nível de reconhecimento, devem ser resolvidas com a utilização do conhecimento de outros níveis que o sucedem.
Estes problemas necessitam, freqüentemente, de diversas fontes de conhecimento lingüístico (léxico, morfológico, fonológico, sintático, semântico e pragmático) para serem solucionados.
O conhecimento semântico concentra uma das maiores dificuldades no tratamento computacional.
Sua representação está diretamente ligada à representação do significado.
Diversas áreas de pesquisa visam tratar o problema da representação semântica.
Entre estas áreas temos a semântica lingüística, que estuda as palavras no meio de a linguagem, a semântica lógica, que estuda as relações do signo com a realidade, e a semântica psicológica, que estuda fenômenos mentais da representação semântica.
A semântica lexical, semântica que estuda como e o que as palavras da linguagem denotam, apresenta como maiores desafios:
A explanação da natureza polimórfica da linguagem;
A caracterização da semântica dos enunciados em linguagem natural;
O entendimento do uso criativo das palavras em novos contextos;
O desenvolvimento de uma representação semântica co-composicional rica.
O presente trabalho tem como objetivo geral estudar o emprego de um modelo de estruturação semântica das palavras num léxico para a língua portuguesa, enfatizando aspectos de sua implementação.
O modelo adotado é baseado na teoria de semântica lexical de James Pustejovsky e pode ser utilizada no tratamento de problemas inerentes ao processamento da linguagem natural, tais como a desambiguação de estruturas sintáticas provenientes de uma análise gramatical, desambiguação lexical e resolução de anáforas e elipses, entre outros.
Analisando trabalhos como, optou- se por a teoria de Pustejovsky porque é uma teoria atual, computacional e com características que suprem os principais requisitos da representação do significado.
A implementação proposta, situada no âmbito dos trabalhos desenvolvidos através do projeto Lexis1 e em desenvolvimento através do projeto NALAMAS2, pode ser utilizada em diferentes corpora e, assim, ser de uso geral.
Esta implementação busca ser robusta, modular, eficaz e independente de plataforma para que possa ser incorporada, sem alterações, em sistemas de PLN.
Em este trabalho não são abordados mecanismos de explanação do conhecimento armazenado, mas sim o modo como esta informação representa a semântica de seus objetos-origem, ou seja, os itens lexicais.
Como objetivos específicos deste trabalho destacamos as seguintes atividades:
De o significado.
Implementacionais. O texto da dissertação parte do estudo de semântica, sob o enfoque lingüístico e computacional, chegando aos aspectos implementacionais de um léxico semântico Apoio CNPq 523666/94 -- 2 Apoio PROTEM -- CC, processo institucional 680081/95-0 proposto na teoria da semântica lexical de James Pustejovsky em:
O léxico gerativo.
Em o capítulo 2, apresentamos um estudo introdutório sobre semântica, destacando considerações iniciais sobre este tema, do ponto de vista computacional e lingüístico.
A relação entre representação do conhecimento e representação semântica é discutida.
Juntamente, técnicas fundamentais para representação semântica são apresentadas, com o intuito de fornecer subsídios ao entendimento e escolha do modelo de representação semântica utilizado na implementação deste trabalho.
Discutimos também, nesse capítulo, a natureza dos processos de análise e interpretação semântica.
Em o capítulo 3 relatamos o estudo de alguns sistemas de PLN que utilizam, para um processamento em nível semântico, técnicas de representação de significado.
Através desse estudo foi possível verificar nossas necessidades e determinar o objetivo e a estrutura do presente trabalho.
Em o capítulo 4 apresentamos um modelo teórico de um léxico semântico.
Esse capítulo apresenta um estudo da obra de James Pustejovsky, intitulada &quot;The Generative Lexicon».
Apresenta os níveis de conhecimento necessários para representar o significado lexical e as estruturas correspondentes a estes níveis.
Relata, também, os mecanismos gerativos que conectam estas estruturas a fim de prover uma interpretação composicional das palavras.
O capítulo 5 contém um estudo da aplicação do modelo de Pustejovsky ao Português e aspectos de sua implementação.
É apresentada uma proposta de implementação do léxico associada a uma estrutura denominada árvore Trie, bem como sua funcionalidade.
São discutidos, sucintamente, aspectos situacionais deste léxico em sistemas multi-agentes.
Em o capítulo 6, são apresentadas as conclusões obtidas através desse trabalho, entre as quais avaliações de aspectos referentes à aplicação e implementação do modelo, bem como perspectivas de continuidade do trabalho.
Finalmente, nos anexos, incluímos alguns elementos implementacionais e dados obtidos de uma aplicação.
O anexo A contém as estruturas básicas necessárias à manipulação do léxico semântico implementado, em sistemas de PLN, e as janelas da interface criada para manutenção do léxico semântico nas estações de trabalho SUN.
O anexo B contém um subconjunto dos itens lexicais necessários ao sistema de resolução de referências pronominais possessivas proposto por e as redes semânticas dos itens lexicais anteriormente citados.
Em o anexo C encontram- se os resultados obtidos de análises experimentais quanto a a capacidade de armazenamento e performance de consulta da árvore Trie, que constitui a estrutura principal do léxico semântico.
A palavra &quot;semântica», derivada do grego &quot;sêmainô «(significar), por sua vez derivada de &quot;sêma «(sinal), em sua origem é um adjetivo correspondente a &quot;sentido&quot;:
O valor semântico de uma palavra é o seu sentido.
&quot;Semântica é tudo o que se refere ao significado.
Semântica é o estudo da significação e dos mecanismos que atuam na significação dos morfemas, das palavras ou dos enunciados».
Conforme Bach, em, semântica estuda o significado nas linguagens naturais.
Esta semântica deve investigar:
E são o ponto de partida para qualquer investigação.
Relações de significado entre palavras como sinonímia, antonímia e hiponímia.
Relações entre sentenças como paráfrases, contradições, implicações e pressuposições.
Constituintes: Composicionalidade3.
Extracognitiva. Segundo Beardon, a descrição semântica tem sido formalizada a partir de os princípios de composição da linguagem.
Isso assegura que o significado4 de qualquer construção na linguagem se dá em função de significados dos seus componentes.
Os morfemas são as menores unidades que podem ter significado (são «átomos Propriedade por a qual o significado do todo é dado por o significado de suas partes.
O conceito de significado é melhor discutido na seção 2.2.3, &quot;Significado e Representação Semântica».
O estudo do contexto e não apenas do significado propriamente dito).
Conforme Woods, citado em, uma semântica se constitui de uma linguagem de representação do significado (&quot;Meaning Representation Language «ou MRL), uma especificação do significado desta linguagem e um procedimento de interpretação, para converter sentenças de uma linguagem original numa notação correspondente, na linguagem de interpretação.
Usando como exemplo um compilador Pascal para um computador PC compatível, teríamos a MRL como o código de máquina do PC, o significado da MRL sendo o efeito destas operações no PC, e o procedimento de interpretação sendo o compilador Pascal.
Uma MRL para representação da linguagem natural deve (ainda segundo (Beardon et al.
91): Prover representações distintas para todos os diferentes significados de uma sentença;
Prover uma representação única para sentenças que tenham o mesmo significado;
Ser completa (deve ser possível representar todas as sentenças significativas da língua origem);
Ser consistente (não deve ser possível construir uma representação de significado que não tenha correspondente na língua origem).
O modo como o significado de sentenças, expressões e palavras é representado na mente das pessoas é uma questão que permeia o desenvolvimento de trabalhos na área de PLN em nível semântico.
O significado de uma palavra ou expressão depende do leitor ou do ouvinte da mesma?
O significado dessa expressão depende do conhecimento que uma determinada sociedade tem sobre a mesma?
Se a resposta é sim, então o significado de uma expressão é o conhecimento que um conjunto de pessoas associa a esta expressão em seu mundo.
Logo, significado é conhecimento.
Representar o significado de palavras é representar a semântica das mesmas.
Assim, pode- se afirmar que representar a semântica das expressões é representar o conhecimento dessas unidades em determinado meio (corpus ou localidade).
Então, representação semântica seria o mesmo que representação do conhecimento e vice-versa?
Para nós, não.
A representação semântica é considerada aqui como sendo um modo de representação do conhecimento, aplicado às linguagens escritas e faladas.
É uma especialização da representação do conhecimento.
Representar o conhecimento é um processo necessário para solucionar problemas complexos, e diferentes maneiras de fazer- lo têm sido estudadas na Inteligência Artificial (Ia).
Representar conhecimento é representar verdades (fatos), em algum mundo relevante:
Uma base de conhecimentos é um conjunto de representações de fatos sobre este mundo.
Cada representação individual contida na base de conhecimentos é denominada de sentença5.
Em a representação do conhecimento existem dois níveis de representação:
O nível de conhecimento, onde os fatos são descritos, e o nível do símbolo, em que os fatos são definidos em termos de símbolos, para serem manipulados por programas.
Uma representação comum de fatos é uma sentença em linguagem natural.
Um programa que tem como entrada uma sentença (conhecimento do mundo) a transforma num conjunto de símbolos, para uma manipulação interna (nível do símbolo), e fornece uma saída.
Representar conhecimento tem por objetivo, num contexto computacional, expressar o conhecimento numa forma tratável por o computador.
Uma linguagem de representação de conhecimento é definida por dois componentes:
A sintaxe da linguagem, que descreve a configuração para as sentenças (normalmente descrita em termos de como sentenças são representadas, mas não sua real representação dentro de o computador).
A semântica, que determina os fatos no mundo a que a sentença refere.
Distinto da empregada na análise da linguagem natural.
Segundo, é desejável que um sistema de representação do conhecimento possua quatro propriedades básicas:
Adequação Representacional -- capacidade de representar todo o conhecimento de determinado domínio;
Adequação Inferencial -- capacidade de manipular as estruturas representacionais de modo a derivar novas estruturas que correspondam a novos conhecimentos;
Eficácia Inferencial -- capacidade de incorporar à estrutura de conhecimento informações adicionais, que possam ser usadas para direcionar os mecanismos de inferência para soluções mais promissoras;
Eficácia Aquisitiva -- capacidade de adquirir novas informações facilmente, tanto por meios diretos (por uma pessoa) como por o próprio sistema.
Em busca destas capacidades, inúmeras técnicas de representação de conhecimento surgem como resultado.
Infelizmente, um único sistema que apresente todas estas propriedades não foi encontrado, e muitos sistemas combinam mais de uma técnica para obter sucesso.
Entre as técnicas puras mais estudadas temos as Lógicas de Predicados, as Regras de Produção, os Sistemas Não Monotônicos, os Sistemas de Raciocínio Estatístico, as Redes Semânticas, os Frames, a Dependência Conceitual e os Roteiros (ou scripts) (Rich &amp; Knight 94).
Esta ordem de apresentação indica a dependência da técnica de uma estrutura sintática.
Por exemplo, as representações lógicas e estatísticas são puramente sintáticas.
Suas regras de inferência são procedimentos estritamente sintáticos que trabalham sobre regras bem formuladas.
Já a Dependência Conceitual é mais desvinculada de uma estrutura sintática.
Fornece não somente uma estrutura abstrata de representação do conhecimento, como também uma especificação do que os componentes numa representação devem conter.
Assim, o poder de representação dessas técnicas parece estar diretamente ligado a sua articulação com a sintaxe.
Técnicas de representação baseadas na sintaxe normalmente são utilizadas para solucionar problemas simples.
Quando aplicadas a problemas mais complexos, as soluções costumam ser mais demoradas.
Abordagens semanticamente mais fortes, como Roteiros e Dependência Conceitual, possibilitam utilizar o conhecimento em busca de uma solução mais eficaz.
Para problemas complexos, que exigem um conhecimento mais geral e completo, formas de representação mais poderosas são necessárias.
Porém, nem sempre as técnicas de representação do conhecimento para esses problemas são facilmente implementáveis:
Não são aplicadas diretamente a um processamento computacional.
Um detalhamento das principais técnicas de representação do conhecimento é apresentado a seguir.
Uma lógica é um sistema formal definido por regras de formação e regras de inferência que, em sua origem, tinha como principal objetivo formalizar a semântica da linguagem natural.
A lógica foi desenvolvida, em grande parte, como um ramo da Filosofia.
Foi sistematizada e codificada por Aristóteles e, posteriormente, aperfeiçoada por o filósofo alemão Gottlob Frege no século XIX.
Uma lógica consiste sumariamente de:
Elementos: I. Uma sintaxe que descreve como criar sentenças;
Uma semântica que explica a sistemática de como sentenças relatam o conhecimento.
Uma teoria de prova -- um conjunto de regras para dedução do conhecimento do conjunto de sentenças.
O formalismo lógico é normalmente utilizado para representação de conhecimento porque sugere, de imediato, um modo poderoso de derivar novos conhecimentos a partir de conhecimentos antigos.
Em esse formalismo, concluir que uma declaração nova é verdadeira é provar6 que ela provém de declarações que já são conhecidas.
A idéia de prova, maneira de demonstrar a verdade de uma proposição, pode ser estendida para incluir a dedução como meio de derivar respostas a perguntas e soluções a problemas.
Podemos encontrar diversos tipos de lógicas para representar conhecimento.
O sistema lógico mais elementar da lógica formal é a lógica proposicional (Nolt &amp; Rohatyn Em a lógica proposicional (também conhecida como lógica booleana), símbolos representam proposições7 (fatos).
Estes símbolos podem ser combinados usando conetivos booleanos de modo a gerar sentenças com significados mais complexos.
A sintaxe da lógica proposicional é bem simples.
Os símbolos da lógica proposicional são as constantes lógicas verdadeiro e falso, símbolos proposicionais como P e Q, os conetivos,,,¬, e os parênteses ().
Todas as sentenças são construídas por a junção destes símbolos, governada por as seguintes regras (obtidas de (Russel &amp; Norvig 95):
As constantes lógicas verdadeiro e falso são sentenças.
Um símbolo proposicional como P ou Q é uma sentença.
Parênteses sobre uma sentença produz uma sentença.
Uma sentença pode ser formada por a combinação de sentenças simples com algum dos cincos conetivos lógicos: (
e). Uma sentença como Pq é denominada conjunção. (
ou). Um sentença como Pq é denominada disjunção. (
implica). Um sentença como (Pq) R é denominada implicação. (
Pq) é o antecedente da sentença, e R é o conseqüente. (
equivalente). A sentença (Pq) (QP) é uma equivalência.¬ (
não). Uma sentença como¬ P é denominada negação de P (todos os outros conetivos combinam duas sentenças,¬ é o único que opera numa sentença simples).
Um sentença atômica é aquela que contém um único símbolo (ex.:
Uma sentença complexa é aquela que contém conetivos ou parênteses (ex.:
Pq). Um termo literal é uma sentença atômica ou uma sentença atômica negada.
A semântica da lógica proposicional também é simples.
É definida por a especificação da interpretação dos símbolos proposicionais e constantes, e por a Expressões em que se afirma ou se nega alguma coisa a respeito de um sujeito.
Uma tabela denominada Tabela Verdade.
Conforme, a lógica proposicional apresenta grandes limitações.
O exemplo 1) apresenta uma representação dos possíveis estados climáticos de um dia, representados numa lógica proposicional.
Poderíamos concluir, a partir de essa representação, que se está chovendo então não está ensolarado.
Ex. 1: Já, para afirmar que Sócrates é filósofo e Platão é filósofo e inúmeras outras pessoas são filósofos, teríamos que descrever esses fatos como uma lista exaustiva do tipo Filósofo_ PLATÃO.
Mesmo assim, não existiria relação entre todos os filósofos, e não seríamos capazes de tirar nenhuma conclusão das similaridades entre Sócrates e Platão.
Seria mais interessante representar essa característica como um predicado dos homens filósofos, como Filósofo (Sócrates).
A lógica de predicados de primeira ordem (ou First Order Logic -- FOL), lógica que apresenta esta última característica, representa conhecimentos que não podem ser representados razoavelmente na lógica proposicional.
Em essa lógica, constrói- se a representação de mundos em termos de objetos e predicados dos objetos (propriedades dos objetos ou relações entre objetos), bem como o uso de conetivos e quantificadores, que permitem que sentenças sejam escritas sobre todo o universo.
A principal idéia, na lógica de primeira ordem, é que o mundo consiste de objetos, com identidades individuais, e propriedades que distinguem esses objetos um dos outros.
Entre tais objetos, existem relações.
Algumas dessas relações são funções relações em as quais existe somente um valor para uma determinada entrada.
Como exemplo de objetos, propriedades, relações e funções temos:
Em a lógica proposicional, toda expressão é uma sentença que representa um fato.
A lógica de primeira ordem, além de sentenças, apresenta termos que representam objetos.
Símbolos constantes, variáveis e símbolos funcionais são usados para construir termos, e quantificadores e símbolos de predicados são usados para construir sentenças.
A sintaxe e a semântica da cada um destes elementos são dadas a seguir:
Os símbolos constantes devem especificar objetos no mundo.
Cada constante nomeia um único objeto, mas nem todos os objetos precisam ser nomeados.
Como exemplo, o símbolo Fernando, numa interpretação particular, poderia referenciar o presidente do Brasil de 1997.
Um símbolo de predicado se refere a uma relação particular no modelo8.
Em um dado modelo, a relação é definida por o conjunto de tuplas de objetos que satisfazem esta relação.
Como exemplo, a relação Irmão_ de seria definida por o conjunto de pessoas que fossem irmãs, num determinado modelo.
Os símbolos funcionais são relações que predizem que para qualquer objeto, um único objeto deve estar relacionado.
Em a lógica de predicados de primeira ordem, uma sentença atômica é formada de um símbolo de predicado seguido por uma lista de termos entre parênteses.
Uma sentença atômica é verdadeira se existe a relação dada por o símbolo de predicado, entre os objetos referidos por os argumentos.
Por exemplo, Irmão_ de (Paulo, Rafael).
Sentenças complexas são construídas com os conetivos lógicos, igualmente à lógica proposicional.
A semântica destas sentenças é idêntica à semântica da lógica proposicional (conforme a Tabela Verdade).
Algum mundo em que uma sentença é verdadeira sob uma interpretação particular.
A FOL contém, também, dois quantificadores padrões denominados de quantificador universal e quantificador existencial.
Estes quantificadores nos permitem expressar propriedades de coleções de objetos, em vez de realizar uma enumeração exaustiva dos mesmos.
O quantificador universal (simbolizado por substituir o nome de um objeto.
Um exemplo, obtido de, da utilização destes quantificadores é apresentado abaixo.
Ex. 2: &quot;X Gato Mamífero -- «Para todo x, se x é gato, x é mamífero».
Além de a lógica proposicional e da lógica de predicados apresentadas, existem várias outras lógicas que tentam, de forma ou outra, representar conhecimentos que não podem ser representados por essas duas lógicas.
Uma extensão dessas lógicas é a lógica modal.
A lógica modal é uma lógica que visa representar expressões da linguagem natural como &quot;ser possível», &quot;ser necessário», &quot;ser permitido», &quot;ser obrigado», entre outras, que expressam uma modalidade gramatical.
A lógica temporal, que é uma variação da lógica modal, expressa, através dos operadores modais, fatos que são verdadeiros em determinado tempo e).
Outra variação das lógicas é a lógica difusa, ou Fuzzy Logic, que é uma lógica multivalorada e monotônica que permite obter resultados exatos a partir de informações imprecisas, aproximadas ou ambíguas.
A lógica difusa, criada na década de 60 por Lotfi Zadeh (Zadeh 77), possui a capacidade de emular o raciocínio humano, avaliar dados imprecisos e ser tolerante a erros (Zadeh 77).
Sistemas baseados na lógica difusa apresentam graus de certeza de sentenças, ou graus de verdade:
&quot;um fato não é necessariamente verdadeiro ou falso no mundo, mas pode ter um grau de verdade».
Como exemplo, para a sentença &quot;Canoas é uma cidade grande «poderíamos atribuir o grau de verdade de 0,6.
O fragmento de um quadro comparativo) do poder de expressão de diferentes tipos de lógicas é apresentado na figura 2.1.
Os traços semânticos constituem uma técnica de representação do significado que relacionam propriedades semânticas a substantivos, adjetivos e verbos, indicando as categorias semânticas às quais uma palavra está associada.
Assim, os itens lexicais são descritos por uma composição de propriedades isoladas que, combinadas, formam o significado de uma palavra.
Como exemplo, teríamos:
Ex. 3: Palavra:
Solteiro; Conjunto de traços que compõe o significado:
Esta técnica apresenta um conjunto de problemas, estudados em:
Relação entre os componentes semânticos e os itens lexicais correspondentes;
Se um item léxico, como adulto, está em correspondência somente com o traço, poderíamos dizer que ele tem um único componente semântico.
Mas, uma vez que os itens lexicais são compostos de traços, essa afirmação fere o próprio princípio da análise componencial.
Ao mesmo tempo, definir um item a partir de o traço correspondente traz circularidade à definição.
Logo, a análise componencial deve deixar claro que a caracterização de um traço independe do item que lhe seria correspondente.
Representação formal dos traços;
Em geral, adota- se um formato binário, seguindo o modelo da Fonologia, em que um traço é antecedido de um sinal positivo(+) ou negativo(), indicando a presença ou ausência deste traço na composição do item.
Em este caso, em vez de traços e, teríamos apenas ou, por exemplo.
Tal estratégia, entretanto, não é adequada a palavras que indiquem gradação, como é o caso de certos conjuntos de adjetivos (exemplo:
Grande/ médio/ pequeno).
Determinação dos traços para definição de um item lexical, tanto em termos de quantidade quanto de qualidade;
Não se estabeleceu um número definitivo de componentes semânticos de um item, mas sim estratégias qualitativas que permitem a delimitação dos traços.
Definição do item por meio de uma lista de componentes, que não explica as relações entre os itens.
Em a Ia, as redes semânticas são estruturas de conhecimento desenvolvidas, inicialmente, como meio de representar o significado das palavras.
Uma rede semântica é um formalismo em que uma informação é representada por um grupo de nós, ligados entre si por meio de arcos, que simbolizam as ligações entre os nós.
Em geral, existem três tipos de elementos numa rede semântica:
As entidades (representadas por nós), as propriedades (representadas em sub- nós), e as relações (representadas nos arcos), que demostram as ligações tanto entre entidades quanto entre entidades e propriedades.
As redes semânticas podem ser vistas como uma inter-relação entre traços, de modo a permitir algumas inferências relativas ao significado dos próprios traços.
A figura 2.2 mostra o fragmento de uma rede semântica para o item Carro.
A maior vantagem das redes semânticas em relação a o modelo de traços reside no fato de se expressar uma informação de maneira estruturada, o que permite a ligação com outros itens correlatos.
Alguns problemas também permeiam essa estrutura:
De propriedades;
Complexas e volumosas.
As gramáticas semânticas são gramáticas livres do contexto, onde a escolha de símbolos não-terminais e a escolha de regras de produção são governadas por funções semânticas e sintáticas.
O resultado da análise, juntamente com a aplicação de todas as ações semânticas associadas, é o significado da frase.
Segundo Beardon uma gramática semântica é uma gramática que não testa somente a gramaticalidade de uma sentença mas também produz uma análise que relata diretamente o propósito de um sistema.
Como exemplo de uma gramática semântica para deleção de arquivo numa linguagem artificial, teríamos:
Ex. 4: S &quot;apagar «Nome_ ARQ{ delete Nome_ ARQ EXT».
Txt or&quot;». Exe or&quot;».
Doc &quot;onde uma sentença válida como «apagar texto.
Doc &quot;resultaria na ação semântica «delete texto.
Doc». A ação semântica está diretamente ligada à regra gramatical (as próprias regras gramaticais são criadas em torno de conceitos semânticos).
As principais vantagens apresentadas por as gramáticas semânticas são· quando a análise sintática estiver completa, o resultado pode ser usado imediatamente, sem o estágio adicional de processamento semântico;
Muitas ambigüidades provenientes de uma análise estritamente sintática podem ser evitadas, já que certas interpretações não farão sentido em termos semânticos e, portanto, não poderão ser geradas por uma gramática semântica;
As questões sintáticas que não afetam a semântica podem ser descartadas.
No entanto, existem desvantagens no uso de gramáticas semânticas:
A quantidade de regras exigidas pode ficar muito grande, pois generalizações sintáticas não são feitas para suprir necessidades semânticas;
Devido a esse grande número de regras gramaticais, o processo de análise pode ser dispendioso.
Enfim, gramáticas semânticas parecem ser úteis para produzir rapidamente interfaces de subconjuntos restritos de linguagem natural.
Mas, como solução global para o problema de compreensão da linguagem, não vêm sendo adotadas, por não conseguirem capturar generalizações lingüísticas que podem ser observadas na gramática em nível de sintaxe.
Um frame é uma coleção de atributos9 que descrevem uma entidade.
Estes atributos têm valores associados, aos quais podem corresponder restrições.
Os sistemas de frames são criados a partir de coleções de frames básicos que formam entre si uma espécie de hierarquia, pois valores de atributos de frames podem ser outros frames.
Cada frame representa um tipo de classe ou uma instância (um elemento) de uma classe.
Em a figura 2.3 temos alguns exemplos de frames representando classes (Pessoa, Jogador_ de_ futebol e Atacante) e frames representando instâncias (Romário).
Normalmente denominados de escaninhos (slots).
Conforme, a teoria dos conjuntos é um ponto de partida para entendermos os sistemas de frames.
A relação é_ um num sistema de frames expressa uma relação de subconjunto.
Assim, o conjunto Jogador_ de_ futebol é um subconjunto do conjunto Pessoas.
A relação instância corresponde à relação elemento_ de.
Assim, Romário é um elemento do conjunto Atacante.
Devido a o fato de uma classe expressar um conjunto, existem dois tipos de atributos associados a classes:
Atributos associados ao próprio conjunto, e atributos que devem ser herdados por cada elemento do conjunto.
Desta forma, subclasses e instâncias herdam atributos e valores de subclasses ou da classe a que estão relacionadas, a menos que um determinado elemento seja exceção, e neste caso deve ser especificado um valor diferente para esse elemento.
Já os atributos que não possuem valor default para o conjunto são especificados no frame da instância.
Em a figura 2.3, os atributos que devem ser especificados diretamente na instância ou nas subclasses estão marcados com`*' no lugar do valor.
A técnica de representação do conhecimento por frames apresenta um conjunto de vantagens consideráveis:
Captura a maneira como os especialistas pensam sobre a maior parte de seu conhecimento;
Fornece uma representação estrutural e concisa dos relacionamentos entre classes;
Permite uma definição por uma técnica de especialização, o que é de fácil compreensão para a maioria dos especialistas;
Existe uma quantidade de trabalhos já desenvolvidos para essa técnica com o objetivo de acelerar o desempenho de inferências necessárias em aplicações baseadas em conhecimento.
A Dependência Conceitual (DC) é uma teoria desenvolvida por Schank em 1975 para representar eventos expressos em sentenças em linguagem natural.
Seu objetivo é representar este conhecimento de forma que seja fácil realizar inferências sobre o mesmo e que sua representação seja independente da linguagem origem da sentença.
Os principais axiomas da teoria da dependência conceitual são:
Modos; Estas primitivas não são palavras mas sim conceitos;
Claramente produzido na representação).
Em essa teoria não é realizada uma análise de partes da sentença (palavras) para construir sua representação:
Primitivas conceituais são combinadas e, assim, formam o significado da sentença.
Em esta teoria, então, as representações dos eventos são obtidas a partir de um conjunto de atos primitivos.
Este conjunto de atos primitivos varia em diferentes exposições da teoria, mas podemos ter como conjunto básico o seguinte:
Atos Físicos ATRANS -- Transferência abstrata (por exemplo, dar).
PTRANS -- Transferência de local físico de um objeto (por exemplo, vir).
PROPLE -- Aplicação de uma força física a um objeto (por exemplo, empurrar).
Move -- Movimento de algo por seu proprietário (por exemplo, chutar).
GRASP -- Domínio de um objeto por alguém (por exemplo, agarrar).
INGEST -- Ingestão de algo por alguém (por exemplo, beber).
EXPEL -- Expulsão de algo por alguém (por exemplo, chorar).
Atos de Comunicação SPEAK -- Produção de som por alguém (por exemplo, dizer).
ATTEND -- Ativação de órgão dos sentidos por um estímulo (por exemplo, enxergar).
Atos Mentais MTRANS -- Transferência de informação mental (por exemplo, contar).
MBUILD -- Construção de novas informações a partir de informações antigas (por exemplo, decidir).
A teoria da dependência conceitual trabalha sobre conceitos.
Em ela são definidos seis tipos de conceitos:
Nominais Conceituais (Picture Producers ou PPs), Ações (ACT), Lugares (LOCs), Tempos, Modificadores de Ações (Aas) e Modificadores de Objeto (Pas).
Assim, além de os atos primitivos de ação, são também definidas quatro categorias conceituais básicas a partir de as quais as estruturas de representação podem ser criadas.
São elas:
ACT -- Ação.
Pp -- Produtor da ação (objetos).
AA -- Modificador da ação, PA -- Modificadores de PPs.
Existem, também, as estruturas de dependência, que correspondem às relações semânticas entre os conceitos subjacentes.
Essas estruturas são conceitualizações e podem servir como componentes de estruturas de dependência maiores.
Algumas das principais estruturas de dependência permitidas por a DC são (Rich &amp; Knight 94) apresentadas na figura 2.4.
Regra Exemplo Forma do Exemplo João correu.
João correu João é alto.
João alto João é médico.
João médico João é um bom menino.
João bom O cachorro de João.
João cachorro João empurrou Maria. pROPEL Maria João João
Hum&gt; tirou o livro de Maria.
Maria Descrições das Regras: Ligação de dependência) indica o tempo passado da ação;
Descrever- lo;
De informação sobre o outro;
Outras estruturas de dependência podem ser encontradas em e em.
A utilização desta técnica de representação de conhecimento leva a uma abordagem de análise chamada análise conceitual.
A análise conceitual é guiada por um dicionário, que descreve os significados das palavras na forma de estruturas de dependência conceitual.
Este dicionário, chamado verbo_ ACT, contém uma entrada para cada ambiente em que o verbo pode aparecer e onde os símbolos têm os seguintes significados:
Setas: Direção da dependência;
Setas duplas:
Ligação bidirecional entre autor e ação;
Cf: Tempos condicionais e futuro;
R: Relação de caso do receptor;
O: Relação de caso do objeto;
Atrans: Ato primitivo (transferência de posse);
Ptrans: Ato primitivo (transferência de local físico).
Um exemplo mostrando parcialmente uma entrada do dicionário pode ser visto na figura 2.5).
Como principais vantagens da utilização da DC podemos obter (Rich &amp; Knight· Facilidade de descrição das regras de inferência por meio de as quais o conhecimento pode ser manipulado;
Facilidade de construção da representação do conhecimento.
Para construir uma representação não é necessário somente usar a informação definida explicitamente numa frase, mas também um conjunto de regras associadas à informação.
Depois de aplicar essas regras, os resultados podem ser usados repetidamente, sem que as regras tenham que ser reaplicadas;
Elementos não especificados da representação de uma informação podem ser usados como foco para a compreensão de eventos posteriores, quando esses forem encontrados.
Embora existam argumentos a favor de o uso de DC, este método nem sempre é apropriado.
O conhecimento deve ser decomposto em primitivas de nível bastante baixo e isto, muitas vezes, pode ser ineficiente ou até mesmo impossível.
Também apresenta o problema de falta de generalidade, pois a teoria baseia- se fortemente na representação de eventos, o que nem sempre é suficiente para representar conhecimentos que um sistema mais complexo necessitaria.
Indica. De acordo com Bach, em, significado é algo diferente de linguagem.
Palavras referem- se a coisas, sentenças são afirmações relativas a determinado mundo.
Usamos palavras e sentenças para falarmos sobre este mundo.
Portanto, a partir de estas afirmações, Bach apresenta duas hipóteses sobre o significado:
I. Linguagem tem significado II.
Significados são coisas11 que não estão na linguagem Segundo Bach, o significado de uma expressão lingüística é o que essa expressão denota num determinado mundo.
Assim, a palavra João denota alguém em determinado mundo e, desta forma, João significa o indivíduo João.
Outros enfoques apresentam o significado como objetos mentais de alguma espécie, conceitos ou pensamentos.
Teríamos aqui duas visões diferentes do que o significado denota.
Estas teorias semânticas apresentam duas idéias diferentes mas sem uma oposição radical.
Por conseqüência, as semânticas lógicas assumem que a linguagem denota coisas num determinado mundo e as semânticas cognitivas assumem que a linguagem denota objetos cognitivos (ver figura 2.6).
A palavra` coisas 'está sendo usada como tradução de` things'.
Segundo Pustejovsky, a semântica lexical é o estudo de como e o que as palavras da linguagem denotam.
Este autor afirma que o significado de palavras deve, de alguma forma, refletir as estruturas conceituais profundas do sistema cognitivo e o domínio de operação deste sistema.
A denotação ou a referência, segundo Jackendoff em, não é suficiente para o entendimento da significação das palavras.
Segundo este autor, nem todas as palavras da língua estão ligadas a objetos do mundo real ou de outros mundos.
A compreensão integral do significado de uma palavra num enunciado é um fenômeno que se dá a partir de a compreensão do seu sentido lingüístico.
&quot;Sentido é uma noção estritamente lingüística, ligada aos sistemas das relações mantidas entre diversos mais ampla, que foge do âmbito de interpretação lingüística e remete a entidades extralinguísticas, identificando- as».
As entidades a que os referentes fazem referência podem ser objetos, indivíduos, processos ou conceitos armazenados nas mentes das pessoas.
Segundo Dias, referência representa o que não está relacionado ao sentido das palavras no contexto em que elas estão sendo utilizadas.
Segundo Gottlob Frege em, referência é o objeto real (ou objeto em algum mundo) que corresponde a uma expressão em questão, enquanto o sentido é modo como referenciar algo.
Estes conceitos, sentido e referência, estão ligados diretamente aos conceitos de intensão e extensão respectivamente e (Dias Representar a semântica de qualquer construção de uma linguagem é representar o significado de seus componentes.
Conforme, a representação do significado é um tópico tradicionalmente complexo e amplo.
Lingüistas computacionais, especialmente os ligados à Ia, trabalham em busca de computar o significado das palavras de inúmeras formas.
Métodos computacionais para representação do significado em PLN podem ser classificados como simbólicos, conexionistas, empíricos/ estatísticos, e híbridos (Wilks et al.
96). Os sistemas simbólicos são baseados em conhecimentos e trabalham com funções e algoritmos que operam estruturas de dados simbólicas.
Os sistemas conexionistas usam redes neurais para representar o conhecimento lingüístico.
Os empíricos/ estatísticos envolvem conjuntos coletados da linguagem (corpora), que são marcados e usados para criar modelos estatísticos.
Os híbridos combinam dois ou mais modelos entre os citados.
Segundo Fuchs em, a análise semântica consiste em associar a uma sentença uma representação interna que possa expressar, de alguma forma, seu significado.
Normalmente essa análise semântica é precedida por a análise sintática ou ambas são executadas paralelamente.
Em a análise semântica, as sentenças tratadas são formadas por conjuntos de palavras identificadas em processo de análise morfológica e agrupadas em estruturas na análise sintática.
Estas sentenças e estruturas constituem os indicadores para o cálculo do significado em dois níveis:
Uma semântica lexical e uma semântica gramatical.
Em a semântica lexical são utilizadas técnicas de estruturação do significado como traços semânticos e redes semânticas, estudadas na seção 2.2.2.
Mas, conforme Fuchs, uma análise semântica que se reduza a uma semântica lexical é insuficiente.
&quot;A compreensão das relações entre palavras é tão importante quanto a compreensão das próprias palavras».
Estas abordagens formais da semântica gramatical buscam descrever o significado da sentença por intermédio da tradução da estrutura sintática para uma fórmula lógico-semântica, dispondo para isso de dois tipos de informação:
As relações sintáticas e a existência de marcadores gramaticais.
Como exemplos de formalismos de representação para esta abordagem, temos os formalismos lógicos, as gramáticas semânticas e a DC.
Esta visão de semântica lexical se diferência um pouco da visão de Pustejovsky que, em sua teoria, engloba informações sobre as relações entre palavras nos próprios significados dos itens lexicais, através de um processo decomposicional destes itens em formas estruturadas.
Essas estruturas, juntamente com mecanismos gerativos, fornecem o significado através de um processo de composição de proposições bem formadas para sentenças da linguagem.
Outra abordagem de análise semântica, proveniente de, considera o processo de associação de uma ou mais representações semânticas às árvores de derivação provenientes de um análise sintática ou, até mesmo, em construção por um parser transformacional12.
Conforme Beardon, uma análise semântica pode ser utilizada no processo de seleção das estruturas geradas por a análise sintática através de informação semântica (como traços semânticos) (Beardon et al.
91). Em outros casos, como em (Silva 97), uma Usando uma gramática transformacional.
Um dicionário semântico.
Em uma teoria semântica, a interpretação semântica, segundo Bach, é um modo de designar denotações, num certo modelo13, para expressões numa linguagem.
Através de um modelo, de um conjunto de valores que denotam objetos do modelo, e de uma função de avaliação, é construída uma interpretação semântica de uma sentença numa linguagem por um processo de tradução.
Uma interpretação está relacionada ao processo de atribuição de valores-verdade a proposições geradas por o processo de tradução.
Allen, em, afirma que a interpretação semântica é o primeiro passo para determinar o significado de uma sentença:
É o processo de computação do significado independentemente de contexto.
&quot;O processo de mapeamento de uma sentença para sua forma lógica é denominado interpretação semântica, e o processo de mapeamento da forma lógica para uma linguagem de representação de conhecimento final (Knowledge representation ou Kr) é denominado interpretação contextual «(Allen 94).
Em a figura 2.7) é apresentada uma visão simplificada dos estágios de interpretação.
Para Allen, um exemplo de linguagem de representação de conhecimento seria a lógica de primeira ordem, apresentada na seção 2.2.2.1.2.
Informalmente, um modelo pode ser considerado uma representação de um contexto particular em o qual uma sentença pode ser avaliada.
Para Allen, uma função de interpretação atribui significados a estruturas definidas no domínio de interpretação.
O domínio de interpretação contém objetos de todos os tipos referidos num modelo, incluindo objetos físicos, tempos, lugares, eventos e situações.
A função de interpretação e o domínio de interpretação definem formalmente um modelo:
Excelente método para estudar o significado independente de contexto.
Russel, em, associa ao conceito de interpretação o processo de estabelecimento da correspondência entre sentenças e fatos.
É atribuída a alguma sentença uma interpretação semântica que exprime fatos de determinado mundo.
Uma sentença é verdadeira, sob uma interpretação particular, se o fato que esta sentença representa existe.
Independente do tipo de processo (análise ou interpretação), o processamento da linguagem natural em nível semântico tem por finalidade realizar a correspondência entre situações do mundo real e as reconhecidas em nível sintático, buscando definir uma notação precisa, se possível formal, para o significado de sentenças em linguagem natural, e desenvolver um método para traduzir estas sentenças para a notação utilizada (Grishman De acordo com Fuchs, em, o processo de compreensão de textos envolve o processo de interpretação.&amp;&amp;&amp;
&quot;Compreender um texto é, além de a simples reconstituir um todo significante e coerente, e ser capaz de interpretar a mensagem depende fortemente do tipo de aplicação.»
Assim, conclui- se que os processos de análise e interpretação semântica são, em grande parte, dependentes da aplicação.
O processo de análise parece estar ligado a uma decomposição de estruturas lingüísticas e associação de significados, e pode ser um processo em nível lexical ou em nível gramatical.
Já o processo de interpretação semântica parece ser um processo mais complexo, aplicado a sentenças e dependente de um processo de análise prévia.
A definição formal de interpretação semântica está, normalmente, associada ao conceito de modelo e de uma função de avaliação de expressão através de valores-verdade.
Mas, quaisquer que sejam esses processos, uma estrutura básica quase sempre deve existir:
O dicionário semântico, que fornece o conhecimento básico para o funcionamento dos mesmos.
Em este trabalho, por não apresentarem um distinção conceitual explícita, os termos` léxico 'e` dicionário' serão usados indistintamente.
Este capítulo realiza um estudo da tese de doutorado de Maria Carmelita Padua Dias, desenvolvida no Departamento de Letras da PUC/Rio com o título &quot;O Léxico em sistemas de Análise e Geração Automática de Textos em Língua Portuguesa», onde é apresentado um modelo de estruturação para um léxico para o português.
Os elementos aqui reunidos foram obtidos de.
O objetivo de Maria Carmelita é propor um modelo de estruturação para um léxico contido num sistema de interação entre usuários e sistemas computacionais.
O modelo se origina de reflexões acerca de a organização subjacente a um modelo humano de estruturação lexical e tem como aplicação prática tratar automaticamente os itens lexicais de uma linguagem de interface que gera explicações e respostas em língua portuguesa, atendendo a consultas expressas na mesma língua.
A linguagem de interface usada como base para o trabalho de Carmelita faz parte de um projeto interdisciplinar, desenvolvido por pesquisadores dos Departamentos de Informática e Letras da PUC/Rio.
O projeto é denominado LINX, e visa à elaboração de um sistema de comunicação entre usuários e bases de conhecimentos em lógica, através de uma linguagem natural.
O modelo proposto por Carmelita baseia- se fortemente na Semântica Conceitual exposta por Jackendoff integrado com o modelo de enquadres de Barsalou, e tem como objetivo fornecer um modelo léxico para sistemas computacionais que interpretem e gerem textos em língua portuguesa.
Este léxico contém grande parte das informações semânticas e é composto por um dicionário e um módulo que define as relações entre os itens lexicais.
O léxico interage com a Base de Conhecimentos, responsável por as informações acerca de o assunto tratado, e estabelece a correspondência entre a língua portuguesa e a linguagem de representação do conhecimento da Base.
A figura 3.1) ilustra as interações e o funcionamento do sistema LINX.
Semântica Conceitual é o rótulo usado por Jackendoff para nomear uma teoria segundo a qual o significado é um tipo de representação mental.
Esta teoria tem por objetivo formalizar o modo como os conceitos armazenados na mente humana podem ser representados formalmente e mostrar como a representação destes conceitos se relaciona com a semântica lingüística.
Essa teoria focaliza conceitos internos, isto é, conceitos oriundos da mente.
Jackendoff, conforme, defende que existe uma enorme gama de conceitos, expressos por sentenças, e que não é possível que estas sentenças sejam codificadas mentalmente por uma lista;
Devem, em vez de isto, constituir um conjunto finito de primitivas mentais, combinadas de acordo com princípios que também são um conjunto finito.
Este autor assume que a unidade básica para formação de um conceito sentencial são os conceitos das palavras da sentença, os conceitos lexicais, e estes também não podem ser uma lista de exemplos, mas sim um conjunto de esquemas, governados por determinados princípios.
Tomemos o conceito de &quot;mesa&quot;:
Exemplos de mesas não são suficientes para avaliarmos se novos objetos são mesas ou não.
Portanto, deve haver um modo esquematizado de representar cada conceito, de forma que possa ser comparado com as representações de objetos recém-conhecidos.
Entre os passos para esquematização de um conceito, segundo Jackendoff, temos 1) Individualização É a definição dos limites de uma entidade que é representada por um item da língua, de forma a permitir que aquele item corresponda a um conceito individual.
Consta dos seguintes passos:
Determinação da categoria cognitiva, mentalmente (ex.:
Coisa ou evento).
Determinação das características desse item enquanto representante de uma classe de entidades (aquilo que é semelhante na classe).
Determinação das características individuais.
Categorização Diz respeito a julgar se um objeto tem uma série de características específicas que o tornam candidato a pertencer a um conjunto.
Corresponde à inclusão numa determinada classe.
O modelo proposto por Maria Carmelita fundamenta- se em princípios da teoria da Semântica Conceitual apresentada por Jackendoff.
Como o sistema abrange objetivos diversos, algumas adaptações e acréscimos a este modelo foram inseridos, de modo a garantir a eficácia computacional.
A principal adaptação realizada por Carmelita foi a utilização da proposta de enquadres de Barsalou.
Os principais pontos do modelo são:
O léxico é composto de um dicionário e de uma rede de relações.
É um modelo lexical autônomo.
A representação dos itens lexicais é feita segundo o modelo de Jackendoff.
Faz- se utilização do modelo de enquadres de Barsalou como sistema de regras preferenciais.
Valores default são usados dentro de enquadres dos itens.
Há possibilidade de colocar em evidência um aspecto específico do item.
A seguir, cada um destes pontos é comentado.
O modelo de léxico é composto de um dicionário, com uma lista dos itens utilizados na interpretação das perguntas e na geração das respostas, e de uma série de regras que mostram relações entre esses itens.
Entre estas relações encontram- se a superordenação (itens mais genéricos) e a sub-ordenação.
Jackendoff considera o léxico como uma &quot;parte do componente de regras de correspondência «entre estruturas sintáticas, conceituais e fonológicas.
Não existe lugar para um componente lexical em separado, pois o léxico tem como função estabelecer a correspondência entre fragmentos provenientes dos módulos fonológico, sintático e conceitual.
Em a linguagem de interface em que o sistema se situa, o modelo proposto por Carmelita é um modelo lexical autônomo.
O léxico serve como ligação entre a língua utilizada na comunicação com o usuário e as informações manipuladas por o sistema.
A presença de um componente lexical independente permite que o léxico cumpra a sua função de estabelecer a comunicação entre o usuário e o sistema, possibilitando a correspondência entre conceitos expressos por itens lexicais e os símbolos das fórmulas lógicas usados na Base de Conhecimento.
A representação do significado lexical do sistema de Carmelita seguiu os parâmetros delimitados por Jackendoff e o sistema de enquadres de Barsalou.
A formalização de Jackendoff mostra como podem ter sido construídas as estruturas conceituais lexicais das palavras, e praticamente reduz todos os verbos a uma mesma estrutura conceitual lexical, relacionada com o espaço, ou se originando desta idéia.
Entretanto, Carmelita evidência que, somente esta representação, não satisfaz os requisitos do sistema, pois existem diferenças marcantes no uso das palavras da língua.
Como exemplo, um mesmo verbo, quando aplicado a sentenças diferentes (exemplo:
&quot;bater o bolo «ou &quot;bater uma radiografia&quot;), pode ter valores semânticos diferentes.
Jackendoff trata da construção básica dos conceitos lexicais, mas não fornece elementos para tratar o significado das palavras como elas realmente são usadas.
Assim, o sistema de regras preferenciais fornece um modo prático de uso e interpretação de itens lexicais.
Enquadres, segundo Barsalou), são definidos como conjuntos de atributos abstratos co-ocorrentes, que adotam valores diferentes para instâncias diferentes.
Estes enquadres, no léxico, são usados como unidades organizacionais.
Enquadres (semelhante aos frames) são estruturas de dados que representam o cenário de uma situação estereotipada.
Podem ser comparados à noção de conjuntos da matemática, onde um enquadre é o agrupamento de elementos que partilham de mesmas propriedades numa única classe, ou sob um único rótulo.
Segundo Minsky), um enquadre é uma estrutura em forma de rede, com nós e relações.
Os nós mais altos representam características consideradas verdadeiras a respeito de uma determinada situação.
Os nós mais baixos são compostos de escaninhos (slots), espaços a serem preenchidos com uma informação específica.
A descrição de um objeto num enquadre é composta de uma série de escaninhos, cada um de eles associado a um objeto e instanciado por um valor para aquele aspecto.
Por exemplo, para um enquadre simples como &quot;mesa «deve haver um escaninho para número de pernas e outro para formato do tampo.
O sistema de enquadres desenvolvido por Barsalou é bastante eficaz na atribuição de condições que compõem os conceitos dos itens lexicais.
As entidades são representadas, no léxico do sistema, por intermédio de enquadres compostos por seus atributos, ou seja, por características do item, instanciadas por um valor.
Por exemplo, os aspectos das entidades que se referem aos animais são:
&quot;habitat», &quot;locomoção», &quot;alimentação», etc..
Características comuns para a totalidade ou para a maioria dos exemplares de um item são denominadas características default, isto é, são típicas daquele item e presentes até provar- se o contrário.
Porém, uma prova em contrário não invalida o exemplar do item.
Este conceito é de grande importância para o sistema, pois permite a inferência de uma informação que por acaso esteja faltando e possibilita a desambiguação de itens lexicais.
Existem dois dicionários que interagem para formar o dicionário efetivamente utilizado no sistema LINX.
Um dos dicionários contém palavras gerais, que podem ser usadas com qualquer domínio.
São palavras de uso freqüente na língua, como verbos (supor, ser, estar), e palavras funcionais (determinantes e quantificadores -- todos, algum, o).
O outro dicionário, composto de palavras de conteúdo, contém itens ligados ao domínio da Base de Conhecimentos do sistema.
As palavras constantes no dicionário estão dispostas na forma de entradas de itens lexicais, as quais comportam uma série de informações necessárias tanto para o procedimento semântico quanto para a formação das sentenças.
As entradas lexicais são compostas de cinco divisões, ou campos, cada uma com um tipo de informação acerca de o item.
A figura 3.2 traz o modelo de entrada lexical do dicionário da linguagem de interface do sistema LINX.
Em o primeiro campo, além de o item propriamente dito, vem a informação da classe de palavra a que o mesmo pertence, para restringir o preenchimento sintático das sentenças.
As classes de palavras do sistema são adaptações das classes gramaticais das palavras convencionais, em maior número, para facilitar a tarefa da gramática.
As informações sintáticas variam conforme a classe gramatical do item lexical.
No caso de os substantivos, basta a simples informação de classe da palavra, pois o módulo gramatical tem regras de estruturação de sintagmas nominais e transporta substantivos para a posição de núcleos de sintagmas nominais.
As entradas dos verbos devem deixar transparecer os ambientes sintáticos em que ocorrem, ou seja, a existência de sujeito, a existência ou não de complementos e seus tipos.
Em o terceiro campo, são armazenadas apenas informações morfológicas flexionais.
As palavras derivadas estão dispostas no dicionário como qualquer outra palavra, sem levar em conta sua formação, pois o sistema não faz distinção entre palavras primitivas ou derivadas.
O quarto campo, da estrutura conceitual, contém a informação semântica.
A estruturação semântica segue dois parâmetros:
A semântica conceitual de Jackendoff e a concepção de enquadre segundo Barsalou.
Ambos os modelos sofreram adaptações para servir ao propósito do léxico da linguagem no ambiente LINX.
Os verbos são representados por estruturas conceituais inspiradas no modelo de Jackendoff e indicam &quot;eventos «e &quot;estados».
Indicam também os componentes que têm, ou não, uma realização sintática como argumentos.
Alguns itens da estrutura não aparecem na estrutura sintática superficial e, os que aparecem, são acrescidos de um índice que remete às estruturas sintáticas do segundo campo, indicando o mapeamento da semântica para a sintaxe.
Incluem- se nas estruturas conceituais também as condições semânticas impostas a sujeitos e complementos de verbos.
Em os substantivos, as representações indicam a categoria ontológica, sua especificação dentro de as hierarquias de classes da base de conhecimentos, a informação possibilitada por a representação de enquadres, além de dados que possibilitam a integração das entidades que são representadas por substantivos com os outros itens lexicais, como os traços ou.
Os adjetivos também têm suas categorias ontológicas indicadas (em geral,), os aspectos de que são valores e restrições análogas àquelas dos substantivos.
Preposições e conjunções em geral indicam ou mas, muitas vezes, têm uma existência apenas sintática e a estrutura conceitual vazia.
Artigos, pronomes relativos e interrogativos e quantificadores, funcionam como substitutos ou modificadores de substantivos, não tendo uma representação conceitual própria.
O quinto campo das entradas lexicais armazena informações pragmáticas, que são pertinentes à Base de Conhecimentos que está sendo utilizada por o sistema.
Um exemplo de representação de um verbo numa entrada lexical usada por Carmelita é dado na figura 3.3.
Segundo, a delimitação da informação contida numa Base de Conhecimentos, preparada para ter como instrumento de interação uma interface em língua natural, e da informação que vai contida no léxico dessa linguagem, precisam ser estabelecidas com rigor, para que as fronteiras de uma e outra não se sobreponham, ou só se sobreponham quando conveniente.
A Base de Conhecimentos deve ter todos, e apenas15 Conforme Carmelita, seria conveniente que a Base de Conhecimento não contivesse dados que a sobrecarregassem e que não vão ser objetos da busca de conhecimento, mas somente subsídios para o bom andamento do diálogo.
E explicações.
A função da Base de Conhecimentos é armazenar todo o conteúdo que é necessário para a manutenção de interação e definir o escopo do diálogo.
Em ela, por exemplo, estão guardados todos os dados específicos sobre os animais, o que comem, como se locomovem, onde habitam, quem são seus inimigos, se são domesticados, se transmitem doenças, se possuem algo, etc..
Esse tipo de informação não consta no léxico.
Já o léxico encerra os dados que auxiliam na interpretação e geração de perguntas e elaboração de respostas, não sendo responsável por o conteúdo que será objeto de perguntas.
Manter este tipo de informação subjacente no léxico é interessante porque liberta parte das informações contidas na Base de Conhecimentos, ao mesmo tempo em que mantém a integração entre os itens lexicais utilizados na linguagem de interface, seja através da Base de Conhecimentos, seja através do próprio léxico.
Conforme, os métodos simbólicos tradicionais têm sido usados para a análise da linguagem escrita, sendo que métodos mais robustos devem ser usados para uma análise da linguagem falada.
A proposta apresentada em (Wermter &amp; Weber 96) é uma solução híbrida de redes conexionistas e métodos simbólicos para o tratamento da linguagem falada, pois redes conexionistas são robustas para o tipo de entrada imprevisível encontrada neste caso.
O sistema SCREEN (Symbolic Connectionist Robust Enterprise for Natural Language) proposto em (Wermter &amp; Weber 96) analisa elocuções reais.
O sistema aprende representações sintáticas, semânticas e pragmáticas, e está habilitado a produzir hipóteses baseadas na fala de entrada, podendo determinar qual hipótese é a mais provável.
Em o SCREEN, é usado um plano de representação de cinco origens de conhecimento -- uma descrição básica de sintaxe e semântica de palavras, uma descrição abstrata sintática e semântica de sentenças e uma descrição de ações de diálogos (que descreve a intenção de uma elocução).
Com base neste plano, analisa- se a linguagem falada através do uso de categorias sintáticas, semânticas e de ações de diálogos.
Assumem- se, para cada palavra, categorias básicas;
Para cada sentença, categorias abstratas;
E uma ação de diálogo para cada elocução.
Através destas categorias, apresentadas parcialmente na figura 3.5), o plano de representação aprende através de uma arquitetura modular conexionista híbrida.
A entrada para o sistema SCREEN é um arquivo de hipóteses de palavras geradas por um reconhecedor de fala.
A saída do sistema é um arquivo de hipóteses sintáticas, semânticas e de diálogo, que são usadas para desenvolver várias hipóteses de elocuções.
O processamento do sistema não é incremental.
Isto é, os componentes de processamento podem iniciar seus processos antes que outros componentes completem o processamento da elocução.
Segundo Wermter, o &quot;processamento não incremental e robusto é relevante para modelos computacionais de processamento da linguagem falada pois é o que ocorre no processamento humano da linguagem».
O sistema SCREEN é formado por seis componentes principais (figura 3.6 proveniente de), e cada componente contém módulos básicos.
Os componentes trabalham a hipótese de palavras geradas por o reconhecedor de fala e constróem seqüências de hipóteses de palavras, determinam a hipótese mais provável, analisam a hipótese com base na sintaxe, semântica e ações de diálogo, corrigem ruídos e geram a interpretação mais provável para um processamento futuro.
Cada módulo básico constituinte de um componente contém redes conexionistas do tipo feedforward (isto é, redes conexionistas simples recorrentes) ou uma representação simbólica de conhecimento.
A aprendizagem das redes se dá através de técnicas de aprendizagem supervisionada.
O componente de construção de seqüência de fala recebe hipóteses de palavras individuais provenientes de um reconhecedor de fala e constrói hipóteses parciais de sentenças possíveis.
O componente de avaliação de fala contém módulos para computar a aceitabilidade da seqüência de palavras numa hipótese parcial de sentença.
Este componente usa conhecimento sintático, semântico e acústico para escolher a melhor hipótese.
Em o componente de categoria, conhecimentos sintáticos, semânticos e de ações de diálogo são identificados e generalizados para marcar inícios e finais de sintagmas.
Esse componente contém diversos módulos que usam conhecimento sobre categorias para realizar análise sintática e semântica de palavras e sintagmas, numa hipótese de sentença.
O componente de correção contém os módulos que detectam e corrigem os erros que ocorrem freqüentemente numa linguagem falada espontânea, derivadas de interjeições, pausas e erros de pronúncia.
O componente de organização de casos realiza a quebra do diálogo em segmentos de locuções e analisa partes constituintes destes segmentos através de um parser de segmentação.
Finalmente, o componente de diálogo reconhece atos de diálogo, que representam o propósito das locuções.
O componente de organização de casos determina os limites da elocução, para o componente de diálogo identificar o tipo de ação de diálogo que deve ser usado na representação da saída de hipóteses.
Este trabalho apresenta a implementação de um sistema de indexação automática de textos utilizando um modelo de representação da semântica lexical.
Este modelo de representação origina- se da teoria do léxico gerativo de James Pustejovksy (Pustejovsky 95), sendo, assim, de especial interesse ao presente trabalho.
Desenvolvido no Departamento de Ciência da Computação da Brandeis University, o sistema TextTract tem por objetivo desenvolver uma indexação semântica automática e intensiva de documentos através do reconhecimento, indexação e criação de hyperlinks em documentos eletrônicos.
Essa ferramenta utiliza técnicas robustas de processamento da linguagem para gerar estruturas de dados denominadas Webs Lexicais.
Webs Lexicais são representações normalizadas e estruturadas do núcleo semântico do texto.
A criação destas estruturas acelera a disponibilização de informação com um alto grau de indexação e referência, facilitando a navegação e a rápida busca de informação.
O sistema TextTract utiliza a integração de técnicas de representação semântica lexical com técnicas de aquisição lexical baseadas em corpus.
Com as propriedades estatísticas do texto, que são adquiridas através de etiquetas semânticas, são permitidas consultas a respeito de relações semânticas nos textos.
Esse sistema é produto direto de pesquisas para desenvolver bancos de dados lexicais inteligentes e treináveis para um fragmento substancial do Inglês e envolve a criação do CoreLex, que é um léxico estruturado de modo a refletir a semântica lexical da linguagem de um modo sistemático.
A pesquisa em direção a o CoreLex utiliza como sistema de representação semântica lexical a teoria do Léxico Gerativo de James Pustejovsky.
Conforme, o formalismo do Léxico Gerativo é necessário para descrever o conhecimento lexical, mas não é suficiente para caracterizar o modo como as palavras são usadas em domínios específicos, com significados específicos.
Escolher um domínio do núcleo do Léxico é o próximo passo para obter- se estruturas que são sensitivas a corpora específicos.
Assim, o segundo componente do núcleo do léxico é um conjunto de ferramentas de aquisição lexical, para enriquecer as estruturas do léxico.
Estas ferramentas são baseadas na combinação de técnicas estatísticas e técnicas baseadas em conhecimento.
O método de indexação lexical segue o modelo de aquisição semântica lexical dirigida ao corpus, apresentada por Pustejovsky em 1993 no artigo &quot;Lexical Semantic Techniques for Corpus Analysis&quot;).
Este modelo é baseado na noção de targeted aquisition.
Em o estágio inicial do processo de indexação, é aplicada uma função sobre um texto, com o objetivo de identificar igualdades entre o texto e uma série de propriedades.
Essas propriedades servem para identificar o máximo de constituintes sintáticos em os quais os nominais aparecem.
Cada um destes constituintes contribue com uma relação ou propriedade deste nominal.
Como exemplo, com os nominais complexos floppy disk e hard disk, aplicados ao manual de referência de um computador, obteve- se:
Em este texto o sistema estabeleceu com sucesso que os floppy disks são objetos que podem ser ejetados, protegidos, etc, enquanto hard disks são objetos que podem conter software de sistema, podem ser reparados e outras relações que os floppy disks não apresentam.
O sistema de indexação apresentado também foi expandido para criar hyperlinks de indexação para documentos.
Cada estrutura de termo é ligada a todas as ocorrências da palavra ou sentenças no texto e sub-estruturada para incluir relações e propriedades associadas aos termos que são apresentadas no documento.
Como exemplo, após executar índice de termos incluindo, além de os termos padrões, palavras compostas e nomes próprios (ver figura 3.7).
O índice gerado por o TextTract-1 mostra- se mais rico do que outros criados por geradores de índice automáticos, mas apresenta alguns problemas óbvios quanto a sua estrutura, como omissões de entradas, entradas irrelevantes ou falsas.
Fazendo- se uso da técnica de etiquetagem semântica e de um modelo mais refinado de computação, os autores consideram que é possível criar uma versão mais sofisticada, resolvendo alguns destes problemas.
Um dos maiores objetivos da pesquisa aqui descrita é desenvolver o CoreLex, um léxico semântico estruturado que reflete a semântica lexical de uma linguagem de modo sistemático e de fácil avaliação.
Este léxico incorpora a maior parte dos princípios da Teoria do Léxico Gerativo.
O conhecimento aplicado ao léxico é retirado do sistema WordNet, um trabalho que visa à implementação de um léxico semântico extensivo e usável.
O sistema, similar em objetivos e diferente em fundamentação, fornece uma enorme quantidade de conhecimento semântico lexical que pode ser minerado, reestruturado e estendido para o CoreLex.
O CoreLex oferece os recursos para os procedimentos de etiquetagem semântica contidos no núcleo do léxico.
Esses procedimentos provêem um sistema de tipos para a descrição dos itens lexicais e algoritmos para definir como os significados dos itens se relacionam uns aos outros.
Através da análise do contexto sentencial e semântico, cada item é associado a um tipo lexical do léxico e herda sua estrutura básica.
Esta estrutura é preenchida com informações mais específicas derivadas de uma busca mais detalhada no texto.
Estas informações basicamente indicam as relações entre itens lexicais e são usadas na criação do sistema de índices (hyperlinks) do texto.
James Pustejovsky descreve um formalismo para estruturação de informações semânticas referentes aos itens lexicais, na forma de uma estrutura denominada Qualia e discute como essa representação lexical pode ser usada para gerar estruturas hierárquicas que associam a informação conceitual ao conceito de um léxico global.
Pustejovsky acredita que, para modelar um léxico semântico global, quatro níveis de estruturas devem ser representados:
Sintática. Sentença.
Definem o item lexical.
Léxico. A semântica de um item lexical pode ser definida como uma estrutura com quatro componentes:
Global. A estrutura de argumentos especifica o número e o tipo de argumentos lógicos associados normalmente aos verbos, e o modo como estes argumentos são realizados sintaticamente.
Pustejovsky identifica quatro tipos de argumentos para os itens lexicais e ilustra a distinção entre os mesmos através dos verbos:
Realizados de um item lexical.
Ex. 5: João levantou tarde (o verbo levantar tem por sujeito João).
Estrutura Qualia, mas não são necessariamente expressos sintaticamente.
Ex. 6: João construiu a casa com tijolos (com tijolos poderia ser omitido, pois normalmente a construção ocorre com tijolos).
Operações de subtipagem ou especificação de discurso.
Ex. 7: Maria adoçou o café com um ótimo adoçante (o normal, provavelmente, seria adoçar com açúcar).
Expressões de modificação temporal ou espacial.
Ex. 8: Maria rumou para Porto Alegre na terça-feira.
Os argumentos verdadeiros definem os parâmetros que são necessariamente expressos na sintaxe.
Mudanças verbais entre formas polissêmicas de um verbo que resultam em expressões de argumentos verdadeiros devem ser distinguidas.
Inclusive deve- se distinguir mudanças como não-causativo/ causativo e mudanças de material e produto como no exemplo 10).
Ex. 9: A. A janela quebrou.
B. João quebrou a janela.
Ex. 10: A. Maria esculpiu a boneca com madeira.
B. Maria esculpiu na madeira uma boneca.
C. Maria esculpiu uma boneca (produto).
D. Maria esculpiu a madeira (matéria-prima).
Como a expressão de material é facultativa (veja o exemplo 10 c, que faz referência ao produto e não à matéria-prima), seu estado como argumento depende do objeto criado.
Argumentos facultativos, em mudanças como material/ produto, são denominados de argumentos padrão.
Eles são necessários para uma lógica bem formada da sentença, mas podem ser omitidos numa sintaxe superficial.
Para uma expressão cuja sintaxe se apresenta como a do exemplo 11 a, com argumentos verdadeiros A e B e um argumento padrão C, a interpretação pode ser representada esquematicamente como mostrado no exemplo 11b.
Ex. 11: B. Verbo' (A, B, C).
Se o argumento padrão não é expresso, então a representação é a mostrada no exemplo 12.
Ex. 12: Esta comparação fica visível no exemplo 10a.
Semelhante aos argumentos verdadeiros, argumentos sombra referem- se ao conteúdo semântico que não é necessariamente expresso na sintaxe, como o conteúdo semântico dos verbos adoçar e chutar no exemplo 13.
Ex. 13: A. Maria adoçou seu café.
B. João chutou o muro.
Fica &quot;oculto», no exemplo 13 a, o material utilizado para adoçar o café, enquanto que em 13b fica oculto o pé, que entra em contato com o muro.
Ao contrário de os argumentos padrão, portanto, que são expressos facultativamente, os argumentos sombra são expressos somente sob condições específicas dentro de a sentença, quando participam de uma relação de subtipo para o argumento sombra, como no exemplo 14.
Ex. 14: A. Maria adoçou seu café com adoçante (com adoçante, e não com açúcar).
B. Maria e João dançam uma valsa (valsa, e não qualquer outra dança).
C. João esbarrou em mim com seu cotovelo artrítico (caracterizando o cotovelo).
A classe final (adjuntos verdadeiros) dos tipos de argumentos é definida mais por a complementaridade do que em termos de propriedades específicas da classe.
Esses argumentos são associados a classes verbais, e não a verbos individuais.
Contém os argumentos padrão, e S-ARG contém os argumentos sombra.
Ex. 15: Por exemplo, uma representação parcial da semântica lexical para os verbos construir, adoçar e chutar pode ser ilustrada por a estrutura de argumentos nos exemplos 16, 17 e 18, respectivamente.
Ex. 16: ARG1 $= indivíduo_ animado ARG2 $= artefato D-ARG1 $= material Ex. 17: ARG1 $= humano ARG2 $= objeto_ físico D-ARG1 $= açúcar Ex. 18: ARG1 $= indivíduo_ animado ARG2 $= objeto_ físico D-ARG1 $= pé A estrutura de eventos é a estrutura que define o tipo de evento associado a um item lexical e a uma frase.
Convencionalmente, um evento associado a um verbo, numa semântica baseada em eventos, é um parâmetro lógico definido por um predicado particular ou relação que define a semântica parcial de um verbo.
Por exemplo, numa representação lexical para o verbo construir poderíamos ter:
Ex. 19: Esta representação fica mais clara no exemplo 21, onde o verbo construir tem sua estrutura de eventos definida.
1 e 2 seriam os subeventos construído e construindo do verbo construir, x é aquele que constrói e y é algo construído.
O exemplo 19 assume uma visão atômica na estrutura de eventos, onde aspectos internos (como argumentos do verbo) dos subeventos não são descritos.
Assim, é necessário definir um significado para a representação de estruturas subeventuais associadas a itens lexicais, expressando a relação entre eventos e argumentos de um verbo.
Este mecanismo é denominado Ligação de Parâmetros Ortogonais (Orthogonal Parameter Binding) e permite ligar estruturas de argumento com estruturas de eventos.
Dadas uma lista de argumentos e uma estrutura de eventos, temos:
Qualia detalhada na seção 4.2.3), sujeita ao tipo de informação de duas listas de parâmetros (lista de argumentos e lista de eventos).
Os predicados nesta nova estrutura referem- se diretamente a dois parâmetros:
Assim, para o verbo construir, teríamos a estrutura Qualia com os seguintes predicados:
Qualia, Agente $= ação_ construir (evento2, indivíduo, material)] onde o objeto, o indivíduo e o material seriam argumentos do verbo e os eventos seriam definidos na estrutura de eventos como evento1 $= Estado e evento2 $= PROCESSO.
Assume- se que os eventos podem ser classificados em três classes:
Processos, Estados e Transição.
Além disso, assume- se uma estrutura subevento para essas classes de eventos.
Em um evento semântico é necessário representar a relação entre este evento e seus próprios subeventos.
Entendemos por &quot;estrutura de eventos estendida «(a partir de as construções de van Benthen e Kamp citadas em) como uma tupla:
Onde: E:
Conjunto de eventos;
Ordem parcial parte_ de;
Ordem parcial estrita;
°: Justaposição (overlap);:
inclusão;: &quot;cabeça «de um evento (a ser explicado mais adiante).
Uma estrutura de eventos com subeventos estruturados, abaixo, é ilustrada como uma estrutura em árvore em termos de relações de um &quot;ordenamento exaustivo parte_ de».
Esta estrutura de eventos é utilizada por verbos como acompanhar, que envolve dois subeventos ocorrendo simultaneamente (um processo, acompanhar, e um estado, acompanhando).
Assim, existem dois aspectos da estrutura de eventos que necessitam ser representados numa estrutura lexical:
Os eventos específicos e seus tipos, e a restrição ordenada destes eventos.
Isto é esquematicamente ilustrado no exemplo 20.
Ex. 20: Como exemplo, o verbo construir é tipicamente analisado envolvendo um processo de desenvolvimento (construindo) e um estado resultante (construído), ordenados por a relação &quot;ordenamento exaustivo parte_ de», Ex. 21: E1 $= processo E2 $= estado Diferentemente do verbo construir, que obriga que os tipos de seus subeventos sejam Processo e Estado, o verbo acompanhar permite qualquer evento objetivo, como Transições ou Processos.
Ex. 22: E1 $= i E2 $= i Esta informação estruturada é necessária mas não é suficiente para capturar distinções lexicais feitas sistematicamente por as linguagens, com respeito a importância relativa dos subeventos de um evento.
Nota- se que a informação associada a um evento originária de um verbo pode ser mais rica do que uma estrutura de &quot;seqüência de eventos «codificada como visto acima.
Uma instância de importância para um evento e é fornecida por um marcador (HEAD marker), simbolizado por e*.
A função de um marcador numa representação sintática é indicar a importância de um determinado evento.
Informalmente, um marcador é definido como o subevento mais importante na estrutura de eventos, que contribui para o &quot;foco «da interpretação.
Podemos visualizar* como uma relação entre eventos,* (ei, ej) onde ei é a &quot;cabeça «de ej, ei ej.
Assim, headedness é uma propriedade dos subeventos, onde se discrimina sua importância relativa.
A estrutura de eventos, adicionada desta propriedade, é ilustrada abaixo.
Ex. 23: HEAD $= Ei A estrutura Qualia é um sistema de relações que caracteriza a semântica de itens lexicais.
É inspirada na interpretação de Moravcsik sobre &quot;modos de explanação (aitiae) «de Aristóteles.
Os elementos que constróem a estrutura Qualia incluem noções de constituintes, espaço, figura, superfície, manufatura, etc, e estão organizados em quatro aspectos do significado da palavra.
Cada aspecto se refere a um &quot;papel «ou função associada ao significado.
Tais papéis são denominados, respectivamente, papel constituinte, papel formal, papel télico e papel agente.
Papel &quot;Constituinte «(&quot;Const&quot;):
Material, peso, partes e elementos componenciais.
Relaciona um objeto e suas partes constituintes.
&quot;Papel Formal «(&quot;Form&quot;):
Orientação, magnitude, forma, dimensionalidade, cor, posição.
Distingue os objetos dentro de um domínio maior.
&quot;Papel Télico «(&quot;Telic&quot;):
Objetivo de um agente na performance da ação, que especifica atividades.
Este papel especifica objetivo e função.
&quot;Papel Agente «(&quot;Agent&quot;):
Criador, artefato, cadeia causal.
Especifica fatores envolvidos na origem ou construção de um objeto.
Um exemplo de estruturação do substantivo carro na forma de estrutura Qualia é ilustrado na figura 4.1.
Conforme expresso na figura, o carro x tem como partes constituintes a carroceria, o motor e as rodas;
Tem as características de um objeto físico, tem por função ser dirigido e tem por origem ser um objeto construído.
Em o exemplo da figura 4.1 os papéis da estrutura Qualia do carro não são somente listas de predicados.
Os valores dos papéis da Qualia apresentam- se como expressões com tipos bem definidos e estruturas relacionais.
Esta representação é utilizada por Pustejovsky para proporcionar um tratamento mais polimórfico da semântica e permitir interpretações distintas de itens lexicais em contextos particulares.
A estrutura Qualia contém expressões que relacionam os tipos definidos nas estruturas de argumentos e de eventos, e é equivalente a uma expressão.
Como exemplo, a expressão equivalente ao exemplo da figura 4.1 é apresentada no exemplo 24.
Ex. 24: Nota- se que as estruturas Qualia são definidas sobre outras estruturas Qualia formando, assim, uma rede de hierarquias por papéis.
Nota- se, também, que estas redes são mais poderosas do que as hierarquias Is_ A, pois as generalizações e especificações são dadas por diferentes papéis, e não somente por a função de pertinência Is_ A. Uma ilustração do poder desta rede aparece na figura 4.2.
Em o exemplo da figura 4.2, a hierarquia Is_ A apresenta um problema que normalmente ocorre neste tipo de estrutura:
Um dicionário é representado como um livro, que por sua vez constitui uma obra de literatura.
Conforme definido, livros normalmente Mais detalhes em.
Papel Agente de livro.
Segundo Pustejovsky, a estrutura de herança tem por objetivo demonstrar como a informação semântica é organizada para formar uma base de conhecimento global.
Este processo envolve a captura de relações de herança entre conceitos e a demonstração de como esses conceitos são integrados em expressões coerentes numa dada sentença.
Para representar as relações conceituais num léxico, Pustejovsky assume que existam dois tipos de mecanismos de herança:
Heranças fixas e heranças projetivas (projective).
O primeiro mecanismo inclui métodos de herança tradicionais encontrados na Ia e constitui uma rede fixa de relações que é utilizada para descobrir conceitos existentes, relacionados e associados a um determinado item lexical.
O mecanismo de herança projetiva (exemplificado mais adiante) opera gerativamente sobre a estrutura de um item lexical para criar a estrutura relacional para categorias ad hoc.
Segundo Pustejovsky, ambos os mecanismos são necessários para computar a representação semântica de um item lexical num nível de interpretação sentencial.
A definição da estrutura de herança fixa de um item lexical é formalmente definida a seguir.
Dados os conceitos Q e P num modelo de organização lexical então:
Uma conjunção de pares ordenados{, y1\&gt;| 1 i n.
O espaço de conclusão de um conjunto de seqüências é o conjunto de todos Pustejovsky afirma que a partir de estas duas definições, pode- se definir relações como é_ um, relacionando os pares anteriormente citados por um operador bem como relações de homonímia.
Mas, além de estas estruturas relacionais fixas, a semântica permite criar dinamicamente conceitos abstratos através da aplicação de certas transformações aos significados lexicais.
Por exemplo, para um predicado Q, pode- se gerar sua oposição,¬ Q. De modo similar, através de operações sobre valores de papéis Qualia, poderíamos gerar conceitos semanticamente relacionados.
Pustejovky denomina este tipo de operação de transformação projetiva e define:
Uma transformação projetiva, num predicado Q1 gera um predicado, Q2, $= Q2, onde Q2.
O conjunto de transformações inclui:¬,
negação, precedência temporal,\&gt;, sucessão temporal, $ , equivalência temporal, e act, um operador que adiciona atividade a um argumento.
O espaço de conclusão projetiva, P (R), é o conjunto de expansões projetivas geradas de todos os elementos do espaço de conclusão, na função R do A partir de esta representação final, Pustejovsky afirma que é possível gerar uma estrutura relacional que pode ser considerada o conjunto de categorias ad hoc e relações associadas com um item lexical.
Segundo Pustejovsky, com estas definições pode- se gerar, por exemplo, conceitos relacionados ao conceito de prender como escapar, capturar, soltar e voltar.
Estes conceitos constituem o espaço de conclusão projetiva para a função télica (prender (x, y) do item lexical prisioneiro.
Conforme Pustejovsky, uma interação entre os níveis semânticos (argumento, evento e Qualia) é necessária, para se construir um léxico semântico.
Pustejovsky ilustra o modo como estes níveis formam uma representação semântica integrada considerando, novamente, a semântica do verbo construir.
Para o verbo construir existem dois argumentos verdadeiros e um argumento padrão.
Além disso, nota- se o envolvimento de dois subeventos:
Um processo e um estado resultante.
Estes estão ilustrados na Qualia, na representação a seguir:
E1 $= e1:
Processo E2 $= e2:
Estado HEAD $= e1 indivíduo_ animado Formal $= objeto_ físico artefato Formal $= objeto_ físico material Formal $= massa Formal $= existir (e2, (2)) Agente $= ação_ construir,).
O processo é identificado como um papel Agente envolvendo um objeto sintático, ARG1, e um argumento_ padrão, D-ARG1, que está relacionado a um objeto lógico por o papel Constituinte de ARG-2.
O papel Formal expressa o estado resultante disto como um objeto ARG-2.
Pustejovsky acredita que, para representar os diferentes comportamentos semânticos dos substantivos polissêmicos, seja necessária uma interação entre a estrutura de argumentos e a estrutura Qualia.
Em as sentenças do exemplo 25, palavras como janela ou porta apresentam duas interpretações distintas:
Ex. 25: A. João passou por a janela.
B. Maria quebrou a janela.
C. Maria pintou a porta.
D. João passou por a porta.
Cada substantivo, no exemplo 25, tem dois significados:
Um objeto físico e uma denotação de abertura.
Pustejovsky caracteriza esta situação como um caso de &quot;dupla figuração «dos substantivos, onde todos os argumentos são logicamente parte do significado desse substantivo.
Assim, a habilidade de um item lexical reunir múltiplos significados é o que Pustejovsky denomina Paradigma Conceitual Lexical (Lexical Conceptual Paradigm ou lcp).
Substantivos como jornal, no exemplo 26, aparecem em inúmeros contextos, tendo significados diferentes (uma organização, objeto físico ou informação):
Ex. 26: A. O jornal atacou a presidente.
B. Maria derramou café no jornal.
C. João leu horríveis notícias no jornal.
Um lcp provê, então, o significado de um item lexical como uma meta-entrada.
Um lcp é representado por um tipo agrupador, construído de dois tipos básicos e um tipo composto, mostrado abaixo:
Assim, caso l e 2 sejam os significados do substantivo porta, representados respectivamente por os tipos objeto_ físico e abertura, então o lcp resultante sobre estes tipos poderia ser:
Segundo Pustejovsky, entre os tipos compostos encontrados na linguagem natural, podemos verificar as seguintes combinações:
Objeto_ físico.
Informação: Ex.:
Livros, fitas;
Evento. Evento:
Ex.: Construção, examinação;
Evento. Questão:
Ex.: Pesquisa;
Evento. Alimento:
Ex.: Almoço, jantar;
Evento. Humano:
Ex.: Nomeação;
Em um lcp, todos os tipos definidos são válidos nas expressões contidas na estrutura Qualia.
O papel Formal distingue um objeto, num conjunto maior de objetos.
Existem duas possíveis associações com o papel Formal, na Qualia:
Tipagem simples:
O valor do papel Formal é idêntico ao do tipo do argumento.
Tipagem complexa:
O valor do papel Formal define a relação entre os argumentos de diferentes tipos.
Em o primeiro caso, para itens lexicais simples, que não apresentam uma polissemia, o papel Formal representa uma restrição de tipo definida na estrutura de argumentos.
Assim, uma estrutura Qualia, para este tipo de item lexical, tem a seguinte forma esquemática:
Ex. 27: ARG1 $= x:
T=1  Formal $= x Para itens lexicais com tipos complexos, itens lexicais em que se verifica uma polissemia como livro e jornal, o valor do papel Formal da Qualia define como um argumento se relaciona com os outros argumentos.
A forma esquemática do exemplo 28 representa a estrutura Qualia para estes substantivos.
Ex. 28: ARG1 $= x:
T=1  ARG2 $= y:
T=2  tl.
T2_ lcp Formal $= P (x, y) O conhecimento do surgimento de um objeto é codificado no papel Agente de um item lexical.
A maneira como algo é criado serve para explanar distinções tais como tipos naturais e artefatos.
Se a forma lexical é um substantivo, o papel Agente é representado como um evento, onde o objeto definido é normalmente o segundo argumento da relação, como visto no exemplo 29.
Ex. 29: ARG1 $= x:
T=1  Formal $= x Agente $= P (e, x) Para tipos compostos, o papel Agente pode referenciar o argumento complexo diretamente, quando necessário, ou pode referenciar somente um dos argumentos.
Para o exemplo do livro, o papel Agente seria escrever (e, w, informação.
Objeto_ físico), forçando o primeiro caso.
O esquema do papel Agente para este tipo de item pode ser visto no exemplo 30.
ARG1 $= x:
Tl ARG2 $= y:
T2 Ex. 30: Formal $= P (x, y) Agente $= R (e, w, x.
O papel Constituinte não se refere somente às partes constituintes ou material constituinte de um objeto, mas define, para este objeto, uma relação parte-de uma estrutura maior (de a qual este objeto é parte), se existir.
A relação parte-de permite assim duas abstrações:
Uma relação que permite referenciar de que algo é constituído bem como o que isto constitui.
O exemplo 31 apresenta, para o item lexical mão, o papel Constituinte referindo a relação o que algo constitui.
Ex. 31: ARG1 $= x:
Membro Formal $= x CONST $= parte de (x, y:
Corpo) O papel Télico define qual o propósito ou função de um item lexical.
Esta função pode ser direta (algo que age diretamente, como a cerveja, que tem como papel télico beber (e, y, cerveja), onde o líquido é bebido por alguém) ou proposital (usada para realizar uma atividade particular, como a faca, que tem como papel télico cortar (e, faca, y), onde algo é cortado com a faca.
Como esquema Qualia para função direta teríamos o exemplo 32 e para função proposital teríamos o exemplo 33.
Ex. 32: Ex. 33: ARG1 $= x:
T=1  Formal $= x Télico $= R (e, y, x) ARG1 $= x:
T=1  Formal $= x Télico $= R (e, x, y) Mecanismos gerativos são mecanismos que conectam os quatro níveis de representação semântica, provendo a interpretação composicional de palavras em diferentes contextos.
A mais importante destas estratégias é uma transformação semântica, chamada de coerção de tipos.
A coerção de tipos é uma operação semântica que converte um argumento para o tipo esperado por uma função.
Isto é, coerção de tipos é uma mudança do tipo de uma expressão dentro de uma sentença.
Como exemplo, analisemos um tipo de expressão padrão objeto\&gt; para o verbo querer, e outros tipos possíveis como ação\&gt;.
A o reconhecermos a sentença &quot;João quer nadar», o tipo de expressão padrão (ou o tipo do argumento dentro de uma estrutura de representação do significado de querer) muda para ação\&gt;.
Então ocorre uma coerção de tipo.
Para ilustrar informalmente os efeitos deste mecanismo, Pustejovsky utiliza o verbo querer, apresentado no exemplo 34.
Ex. 34: A. Maria quer que João viva.
B. Maria quer viver.
C. Maria quer uma cerveja.
Em este exemplo existem dois pontos a ressaltar:
Os diferentes complementos do verbo querer e as diferentes interpretações que aparecem para o complemento (que parecem requerer uma enumeração de significados num contexto).
Assim, se a forma sintática que aparece no complemento do verbo é igual ao tipo requerido por o verbo, então a estrutura resultante é bem formada, isto é, existe uma representação semântica bem formada.
Senão, esta estrutura sofre uma coerção por o verbo, igualando- se ao tipo requerido por as restrições do tipo do verbo.
Assim, em vez de assumir uma nova entrada lexical para um determinado verbo em diferentes meios sintáticos ou em interpretações distintas, Pustejovsky assume que a semântica de um verbo deve ser expandida com elementos na sua composição, acompanhados de operações gerativas (a base de seu léxico gerativo).
Entre estas operações, temos a coerção de subtipos e a coerção de complementos verdadeiros.
Para demonstrar a propriedade formal de coerção de tipos é necessário, primeiramente, examinar o caso mais simples de coerção, denominado coerção de subtipos.
Consideremos o exemplo 35, onde tanto o sujeito como o objeto são subtipos de uma especificação de classes para os argumentos do verbo.
Ex. 35: A. Maria dirigiu uma Honda.
B. João leu a Veja.
Embora estes exemplos sejam trivialmente tratados por a sintaxe, para a semântica, deve- se estabelecer a relação entre o tipo denotado por a Sn em cada uma das posições de seus argumentos, e o tipo que é formalmente selecionado por os verbos dirigir e ler.
A relação expressa entre esses tipos é uma relação de subtipo.
Assim, é necessário assegurar que, se uma função seleciona o tipo 1 e posteriormente ocorre uma forma 2, onde 2 é um subtipo de 1, este deve também ser aceito por a função como um argumento legítimo.
Por exemplo, assumindo a representação lexical para o substantivo carro no exemplo 36, então, como Honda (definida no exemplo 37) é um subtipo de carro, estabelece- se a seguinte relação:
Honda carro veículo.
Ex. 36: ARG1 $= x:
Veículo Formal $= x Télico $= dirigir (e, y, x) Agente $= criar (e, z, x) Ex. 37: Honda ARG1 $= x:
Carro Formal $= x Télico $= dirigir (e, y, x) Agente $= criar (e, Honda_ com o, x) Assume- se que o tipo selecionado por o verbo na sentença do exemplo 35a é veículo, como ilustrado no exemplo 38 (onde veículo é um argumento de dirigir) -- esta é uma semântica parcial do verbo, voltada ao exemplo -- então, os requisitos de seleção do verbo podem ser satisfeitos somente nos casos em que existir a relação de subtipo, que associa formalmente o tipo do objeto atual com o tipo lexicalmente especificado (relaciona veículo com Honda).&amp;&amp;&amp;
Ex. 38: E1 $= e1:
Processo E2 $= e2:
Estado ARG1 $= x:
Humano ARG2 $= y:
Veículo Formal $= move (e2, y) Agente $= ação_ dirigir.
Desta forma, ao verificarmos, por exemplo, que o verbo dirigir tem como argumento veículo e Honda é um subtipo de carro, que é um veículo, então a função que aceita veículo como parâmetro deve aceitar também Honda, através de uma de coerção de subtipo do complemento do verbo.
Pustejovsky denomina coerção de complementos à coerção de tipos que envolve uma mudança estrita de um tipo para outro tipo específico, autorizada por uma dominância lexical.
Essa mudança não é arbitrária, mas encaixa o tipo existente no tipo resultante de uma operação de coerção.
Tomemos por exemplo a sentença no exemplo 39: Ex. 39: João iniciou um livro.
Para capturar a semântica dessa forma verbal, é necessário invocar uma regra de coerção, para assegurar que o tipo semântico do verbo seja satisfeito.
Para uma estrutura lexical como a associada ao verbo iniciar, mostrada no exemplo 40, o tipo do segundo argumento é um evento.
Ex. 40: Iniciar E1 $= e1:
Transição E2 $= e2:
Transição ARG1 $= x:
Humano ARG2 $= e2 Formal $= P (e2, y) Agente $= ação_ iniciar.
Em o exemplo, o complemento do verbo, um livro, faz referência na sua Qualia a informação e objeto_ físico, não satisfazendo o tipo requerido por o verbo iniciar (um livro não é um evento).
Quando algum tipo da estrutura não é diretamente satisfeito, uma coerção é aplicada para reconstruir a semântica do verbo.
Uma coerção tem sucesso somente se a Qualia do Sn possui um valor do tipo apropriado.
Para uma sentença como no exemplo 39, o tipo evento é &quot;forçado «por o complemento um livro, e se torna um evento ler, valor do papel Télico da estrutura Qualia do Sn, como explicado a seguir.
De acordo com a representação no exemplo 40, o verbo iniciar tem dois argumentos, humano e evento, conforme a árvore de representação no exemplo 41.
Ex. 41: Sentença Original Humano Sentença após início da coerção iniciar Humano um livro Evento iniciar A coerção no complemento do verbo iniciar pode ser vista como uma exigência deste verbo.
Busca- se uma expressão que denota um evento, e então encaixa- se à semântica do Sn esta expressão.
Isso é ilustrado esquematicamente no exemplo 42 onde o evento é a expressão do papel Télico do Sn um livro.
Ex. 42: Sentença Humano iniciar Evento xe um livro Desta forma, o complemento do verbo é quem constrói a semântica da sentença, quando este verbo não tem seus tipos de argumentos satisfeitos.
Isso ocorre através de uma coerção do complemento (no exemplo, o tipo do complemento passou de Sn para um evento).
Para mostrar o mecanismo de co-composição, Pustejovsky utiliza verbos polissêmicos como assar (bake), que tem dois significados:
Mudança de estado (passar do estado cru para o estado cozido) ou o significado de criar (para assar um bolo).
Para capturar a polissemia sem necessidade de recorrer a múltiplas listas de palavras, Pustejovsky propõe que o complemento do verbo carregue informações que incidam sobre o verbo, mudando seu tipo de evento.
Desta forma, a semântica para um SV como assou o bolo resulta de diversas operações.
Primeiramente, deve ocorrer a aplicação de uma função para ligar o objeto à estrutura de argumentos do verbo assar.
Em seguida, deve ocorrer um tipo de unificação de traços do papel Agente da estrutura Qualia, isto é, Qagente (assar) $= Qagente (o_ bolo).
A operação de co-composição resulta numa estrutura Qualia para o SV, que reflete aspectos dos seus constituintes.
O significado gerado resulta de uma operação que Pustejovsky denomina de Unificação Qualia.
Voltando ao exemplo do verbo assar, com sua estrutura Qualia no exemplo 43, e à estrutura Qualia de bolo no exemplo 44, ao aplicarmos uma co-composição, o resultado, no exemplo 45, é uma representação semântica do SV não ambíguo.
Ex. 43: Ex. 44: ARG1 $ :
Indivíduo_ animado ARG2 $ :
Massa AGENTE $= ação_ assar,).
Ex. 45: E1 $= processo Head $= e1 ARG1 $= x:
Alimento D_ ARG1 $= y:
Massa CONST $= y Formal $= x Agente $= ação_ fazer.
Télico $= comer (e2, z, x) assar o bolo E1 $= e1:
Processo E2 $= e2:
Estado Restr $= Head $= e1 ARG1 $= indivíduo_ animado ARG2 $= alimento D-ARG1 $= massa Agente $= ação_ assar,).
Formal $= existir (e2, (2)) Assim, de modo semelhante ao mecanismo de coerção, quem define a semântica da sentença, neste caso, é o complemento, que carrega informações necessárias para a desambiguação do verbo mas, ao invés de ter algum tipo alterado, tem uma composição de tipos para formar a semântica da sentença.
Pustejovsky apresenta este mecanismo para solucionar o problema da polissemia dos adjetivos, como no exemplo 46.
Um adjetivo pode ser polissêmico, sendo capaz de modificar indivíduos ou eventos, e a interpretação do adjetivo no contexto depende da semântica do objeto a que ele se refere.
Ex. 46: A. João é um datilógrafo veloz.
B. Motoristas velozes serão presos e multados.
Pustejovsky observa dois pontos importantes:
Um adjetivo pode ser polissêmico, sendo capaz de modificar indivíduos ou eventos, e a interpretação do adjetivo no contexto depende da semântica do objeto a que este adjetivo se referencia.
Assim, considerando a primeira sentença do exemplo 46, utilizando o adjetivo veloz como um modificador dado em x, nosso problema se refere a alcançar a interpretação &quot;João é um datilógrafo que é veloz na datilografia».
Tomemos a estrutura Qualia para datilógrafo dada no exemplo 47.
Ex. 47: ARG1 $= x:
Humano Formal $= x Télico $= datilografar (e, x) Se, em alguma estrutura, veloz está definido como um predicado de evento, então existe um modo de composição que permite uma interpretação para a sentença 46a como em 48: Ex. 48: Assim, o adjetivo é capaz de exigir uma interpretação seletiva de uma expressão de evento contida numa estrutura Qualia do substantivo principal a que ele se refere.
O que possibilita esta interpretação é o mecanismo que Pustejovsky denomina de Ligação Seletiva.
Este mecanismo trata os adjetivos como funções que são aplicadas a valores Qualia específicos do sintagma nominal.
Supondo que a sentença seja &quot;a boa faca», o adjetivo boa para faca indica que &quot;a faca corta bem».
Possuindo na estrutura de faca, no papel Télico, o evento cortar (e, x, y), onde x é uma ferramenta e y é qualquer coisa cortável, o adjetivo boa selecionaria o evento cortar para a ligação e formaria a expressão semântica da sentença conforme abaixo:
Supõe- se que exista, neste caso, uma estrutura Qualia para o adjetivo boa a qual permite selecionar eventos como argumentos.
O modelo de Pustejovsky é voltado ao Inglês, ou seja, foi apresentado tendo como foco inicial a língua inglesa.
Alguns problemas específicos devem ser estudados, para que seja aplicado ao Português.
Em o trabalho desenvolvido, semelhanças e diferenças foram encontradas entre a língua origem do modelo e o Português, no que se refere à aplicação do modelo de Pustejovsky.
Entre estas diferenças e semelhanças, temos:
Variações verbais -- as variações verbais (exemplo:
Tempo e pessoa) na língua portuguesa exigem um mapeamento mais complexo dos itens lexicais para as estruturas propostas.
Para facilitar o mapeamento direto, que exigiria uma inserção exaustiva de todas as variações verbais, os verbos são inseridos numa forma canônica (básica ou infinitiva) no léxico.
Em um processo de busca de informações semânticas, um procedimento extra léxico realizará esta transformação da forma encontrada na sentença para essa forma canônica.
Variações de grau nos substantivos -- as mudanças de grau, na língua inglesa, costumam ser realizadas através de adjetivos (ex.:
Small house para casinha).
Em a língua portuguesa, este mapeamento não parece suficiente para suprir as variações de grau.
Como alternativa de solução, os substantivos são armazenados numa forma canônica no léxico semântico, e a informação de grau é armazenada em outro dicionário.
Em o caso, num dicionário morfológico17 que tem por função preocupar- se com a composição da palavra.
Novamente, então, num processo de busca de informações semânticas, um procedimento extra léxico realizará esta transformação da forma encontrada na sentença para esta forma canônica.
Palavras que se comportam como verbo e substantivo -- o modelo proposto possibilita que palavras polissêmicas, que se comportam ora como verbo ora como Em o contexto do projeto NALAMAS já dispomos de uma estrutura de dicionário morfológico que supre esta necessidade, com características de funcionamento similares às do léxico semântico implementado ou em).
Em estes casos, o mapeamento para o léxico semântico.
Palavras que se comportam como adjetivo e substantivo -- semelhante ao problema anterior, o modelo proposto possibilita que palavras polissêmicas, que se comportam ora como substantivo ora como adjetivo, sejam mapeadas através do uso da estrutura de lcps.
Em o Português existem palavras com este comportamento (ex:
Substantivo masculino singular amarelo ou o adjetivo amarelo), sendo novamente facilitado, nestes casos, o mapeamento para o léxico semântico.
Mapeamento de expressões -- no modelo, expressões devem ser inseridas no léxico, pois expressam um significado específico.
Estas expressões são consideradas unidades que significa ligar a luz, poderíamos ter variações como turn the light on, o que não de um objeto ou ter- lo inserido no meio.
Este não é um problema explícito da diferença entre as línguas, mas um problema não apresentado no modelo.
Provavelmente, este problema deve ser resolvido num processamento sintático.
Em o presente trabalho expressões semelhantes, ou como estas, são inseridas como uma entrada lexical sem se preocupar com suas possíveis variações sintáticas.
Sua entrada é dada através da junção dos componentes da expressão por o caracter` '.
Como exemplo teríamos turn_ on como uma entrada válida no léxico.
Substantivos compostos por mais de uma palavra -- expressões como órgão governamental devem ser armazenadas no léxico pois expressam um significado.
Variações de gênero, número e grau desses itens não devem ser tratadas em nível semântico.
Essas informações devem estar relacionadas num dicionário morfológico.
Em esse dicionário, as palavras devem ser armazenadas individualmente para que, num processo de análise semântica, com informações sintáticas, possa ser realizado um tipo de transformação e então uma busca do significado no léxico semântico.
Em a presente implementação, então, essas expressões são armazenadas como uma única entrada lexical identificada por a junção das palavras origem com um caracter` '.
Como Um item lexical não é necessariamente uma palavra.
Expressões, substantivos compostos e conjunto de palavras que expressam significado próprio são também denominados itens lexicais.
Assim, um item lexical é tratado como uma unidade no processamento da linguagem, e é armazenado como objeto único no léxico semântico.
Semântico. Acentuação -- itens lexicais do Inglês não apresentam acentos.
No entanto, esta característica do Português deve ser inserida no léxico pois diferência o significado de suas palavras.
Assim, esta informação foi atribuída aos registros de informações semânticas através de uma variável que contém o tipo e a posição na palavra em que o acento aparece.
O mapeamento dos acentos para esta variável pode ser visualizado na figura 5.1, onde a pertinência de um acento é identificado por a existência ou não de um valor nos cinco bits19 designados a ele.
Este valor corresponde a posição do acento no item lexical.
Desta forma, para o item lexical ruído, os cinco primeiros bits conteriam o valor 3 em binário indicando que, neste item, existe um acento agudo na terceira letra do conjunto de caracteres que o compõe.
Tipo: Agudo Grave Til Bit:
Seguindo o modelo descrito nos capítulos anteriores, é proposta neste trabalho a implementação de um léxico semântico para língua portuguesa, sobre uma estrutura de árvore Trie20, para o armazenamento dos itens lexicais.
A estrutura Trie é utilizada porque diminui o volume de dados armazenados e agiliza o processo de busca da informação).
As informações semânticas associadas aos itens lexicais são armazenadas em listas encadeadas, a partir de uma estrutura denominada Descritor Semântico (ver figura 5.2).
Dígito Binário.
Menor unidade na notação numérica binária ou menor unidade de dado que um sistema computacional pode tratar.
Pode assumir o valor 0 ou 1 somente.
Trie (palavra derivada de tree e retrival):
Tipo especial de estrutura onde cada caractere dos itens lexicais determina um nodo da árvore.
Um item lexical pertence ao léxico semântico se este item tem um Descritor Semântico associado a seu último caractere na árvore.
Um Descritor Semântico contém os ponteiros necessários para a busca das informações semânticas relativas ao item lexical.
As informações semânticas associadas aos itens lexicais seguem o modelo de Pustejovsky, e são divididas em três estruturas básicas:
A estrutura de argumentos, a estrutura de eventos e a estrutura Qualia.
A estrutura de argumentos e a estrutura de eventos são implementadas através de uma lista de argumentos e uma lista de eventos.
A estrutura Qualia é implementada através de quatro listas de informações, uma para cada papel (agente, formal, constituinte, télico) definido no modelo apresentado.
Todas as estruturas do léxico semântico, como a árvore Trie, a lista de descritores e as listas de informações semânticas, foram implementadas em memória real linear, isto é, em vetores.
A manipulação destes vetores dá- se sobre estruturas denominadas cabeçalhos.
Os cabeçalhos contêm as informações necessárias à manipulação de todas as estruturas vetorizadas do léxico (ver estrutura dos cabeçalhos no anexo A deste trabalho).
Estes cabeçalhos fornecem informações sobre a alocação dos vetores em memória, ponteiros para os vetores de informação, tamanhos dos vetores e os arquivos associados ao sistema.
Dois cabeçalhos constituem o núcleo de dados dos sistema:
O cabeçalho da árvore Trie e o cabeçalho das informações semânticas.
A figura 5.3 apresenta estes cabeçalhos incorporados ao léxico.
Árvore Trie Linearizada Cabeçalho da TRIE Vetor de Descritores Semânticos Vetor de Argumentos Cabeçalho das Inf..
Como exemplo dos vetores endereçados por os cabeçalhos segue, na figura 5.4, um fragmento do léxico semântico com suas estruturas preenchidas.
Em a figura 5.4 os vetores &quot;Lista de Argumentos», &quot;Lista de Eventos e Lista de Informações «correspondem a listas encadeadas unidirecionais.
Estas listas são implementadas através de índices para os próximos registros (respectivamente Prox_ Arg, Prox_ Event e Prox_ Inf).
O vetor &quot;Lista de Descritores «contém uma seqüência dos descritores semânticos.
Estes descritores endereçam as listas anteriormente descritas e são endereçados por índices provenientes da árvore Trie (variável Descritor).
A &quot;Árvore Trie Linearizada «contém a implementação vetorizada da estrutura exemplificada na figura 5.2.
O endereçamento para os registros filhos apresentase através do índice Proxima_ Letra e o endereçamento para os registros irmãos apresentase através do índice Letra_ Irmã.
Nota- se que as quatro listas da estrutura Qualia (contém as informações semânticas) são implementadas numa única estrutura, denominada Lista de Informações.
Letra: M Proxima Letra:
3 Letra Irmã:
2 Descritor:
Nenhum Letra:
B Próxima Letra:
7 Letra Irmã:
4 Descritor:
Nenhum Letra:
U Próxima Letra:
15 Letra Irmã:
10 Descritor:
Nenhum Argumentos:
Argumentos: 6 Eventos:
Nenhum Ordem de Eventos:
Evento_ foco:
Informação: Emancipar (e, z, x) Prox_ Inf:
Nenhuma A implementação do léxico semântico é direcionada para trabalhar em sistemas distribuídos como um núcleo de informação.
Este léxico funciona como uma biblioteca de funções, e atua sobre um banco de dados lexical21.
Em a figura 5.5 podem ser visualizadas as possíveis utilizações do léxico num sistema multi-agentes.
Segundo, um banco de dados lexical é uma estrutura com informações lexicais armazenadas, que pode ser acessada por programas que processem a linguagem.
De acordo com, &quot;um agente é uma entidade inteligente capaz de agir e perceber um ambiente conhecido, buscando atingir seus objetivos de forma racional e intencional conforme o estado atual de seu conhecimento (estado interno), que muda através de cooperação com outros agentes no mesmo ambiente».
Este agente, voltado a um problema lingüístico, conforme esquematizado na figura controle e funções de domínio lingüístico) e informações (representação interna dos outros agentes, conhecimento de domínio lingüístico, entre outras).
Nosso trabalho está situado na implementação do que Silva denomina de domínio lingüístico do agente, onde é construída uma espécie de sistema especialista básico sobre as atividades do processamento da linguagem natural (neste caso, em nível semântico).
O domínio lingüístico leva em consideração dois tipos de conhecimento:
O procedural e o declarativo.
O conhecimento procedural é representado por as especialidades individuais do agente, e abrange os métodos, ou funções para estabelecer a necessidade de cooperação com os outros agentes presentes na sociedade.
O conhecimento declarativo constitui as estruturas de dados necessárias à execução das capacidades do agente.
Desta forma, para um agente semântico22 que utilize a implementação realizada no presente trabalho, o banco de dados lexical constitui o conhecimento declarativo e a biblioteca de funções que atuam sobre este banco de dados constitui o conhecimento procedural do domínio lingüístico do agente.
A biblioteca de funções contém os procedimentos necessários para manutenção do banco de dados lexical, bem como procedimentos de busca de informações semânticas.
Esses procedimentos são independentes de interface e podem ser utilizados por inúmeras aplicações, como as exemplificadas na figura 5.5.
Os procedimentos estão implementados para estações de trabalho SUN e encontram- se disponíveis para uso em dois arquivos:
Seman. Lib e SEMAN.
H. O arquivo SEMAN.
Lib contém os procedimentos compilados e o arquivo SEMAN.
H contém os protótipos dos procedimentos.
Estes protótipos são necessários para que sistemas possam utilizar os procedimentos já em código objeto23 na biblioteca.
Os procedimentos trabalham sobre um banco de dados lexical.
O banco de dados lexical é apresentado na forma de cinco arquivos:
Sem. Trie, sem.
Des, sem.
Inf, sem.
Arg e sem.
Eve, correspondendo, num processo de inicialização, aos vetores apresentados na seção 5.2.2.
A possibilidade de múltiplos bancos de dados lexicais estarem disponíveis ao mesmo tempo é prevista na biblioteca de funções.
Assim, os arquivos citados Não nos preocupamos aqui com o problema da granularidade dos agentes, que exigiria um maior aprofundamento do estudo em sistemas multi-agentes.
Código binário que opera diretamente uma unidade central de processamento (código de programa depois de ter sido traduzido, compilado ou montado em código de máquina).
Obrigatórias. Para utilizar a biblioteca, basta inserir o arquivo de protótipos SEMAN.
H no corpo de uma aplicação e linkar a biblioteca SEMAN.
Lib ao arquivo gerado por a compilação da mesma aplicação.
Note- se que esta aplicação também deve ser programada em linguagem C para estações SUN.
As funções, ou procedimentos implementados na biblioteca, podem ser divididos em três categorias básicas:
Procedimentos de manipulação e manutenção da árvore Trie, procedimentos de manipulação e manutenção dos descritores semânticos, e procedimentos avançados.
Entre os principais procedimentos denominados avançados temos a implementação dos mecanismos gerativos de Pustejovsky e as buscas de informação semântica de herança.
Estas funções serão apresentadas nas próximas seções.
Juntamente com a biblioteca, uma interface gráfica foi implementada.
Esta interface tem por objetivo possibilitar a manutenção do banco de dados e facilitar a visualização da semântica dos itens lexicais.
Esta interface gráfica é implementada na linguagem de programação C para as estações de trabalho SUN sobre o sistema de janelas XVIEW24.
Um conjunto das janelas criadas para esta interface pode ser visualizada no Anexo B deste trabalho.
Os procedimentos de manipulação da árvore Trie são indispensáveis para o funcionamento de qualquer sistema que utilize o léxico semântico.
A correta inicialização da árvore e a verificação de erros provenientes desta inicialização devem ser efetuadas anteriormente ao uso desta estrutura.
Entre os principais procedimentos necessários para o funcionamento e manutenção da árvore, temos:
HEAD_ TRIE_ SEM LoadTrieSem (char* name, int* erro);
Descrição: Procedimento principal de inicialização do cabeçalho da árvore Trie.
Inicializa o vetor necessário para funcionamento do léxico.
Entrada: Nome do arquivo sem extensão.
XVIEW é um sistema de janelas orientado a objeto que permite ao programador criar e utilizar objetos tais como janelas, textos, painéis, ícones entre outros para construir uma aplicação.
Seus objetos são predefinidos e são ricos em funcionalidade, o que permite que o código necessário para manipular essas janelas seja pequeno, simples e muito fácil de se compreender).
Saída: Erro $= 1: Erro de abertura do arquivo;
Erro $= 2: Erro de alocação de memória;
Erro $= 0: Não ocorreu erro.
Cabeçalho: Se não ocorreu erro de alocação, o cabeçalho da Trie contém o ponteiro para o vetor em memória correspondente ao arquivo da Trie linearizada.
Void CloseTrieSem (HEAD_ TRIE_ SEM* h);
Descrição: Procedimento de finalização do cabeçalho da Trie.
Procedimento que realiza a atualização do arquivo da Trie se ocorreu mudança como inserção, alteração e deleção no vetor de trabalho, bem como sua liberação de memória.
Entrada: Cabeçalho da árvore Trie.
Saída: Cabeçalho com valores nulos.
Int UpdateFileTrieSem (HEAD_ TRIE_ SEM* h);
Descrição: Procedimento auxiliar que realiza a atualização do arquivo da Trie se ocorreu inserções, alterações ou deleções no vetor correspondente.
Procedimento normalmente utilizado na finalização dos sistemas.
Entrada: Cabeçalho da árvore Trie.
Saída: Arquivo atualizado se não ocorreu erro.
Erro $= 0: Ocorreu sucesso.
Erro $= 1: Ocorreu erro.
HEAD_ TRIE_ SEM FindSemDescWord (char* string, HEAD_ TRIE_ SEM h, long* resp);
Descrição: Procedimento principal de busca de informações semânticas associadas à determinado item lexical no léxico semântico.
Entrada: Item lexical a ser procurado;
Cabeçalho da árvore Trie.
Saída: Resp:
Se resp diferente de 1 então resp contém o número do descritor semântico que contém as informações semânticas, senão não existe este item lexical ou chegou ao final da busca.
Cabeçalho da árvore Trie atualizado.
HEAD_ TRIE_ SEM InsertTrieSem (char* word, HEAD_ TRIE_ SEM h, HEAD_ SEM* h_ sem) Descrição:
Procedimento principal para inserção de um item lexical na árvore Trie.
Entrada: Item lexical a ser inserido;
Cabeçalho da árvore Trie;
Cabeçalho dos descritores semânticos;
Saída: Cabeçalho da árvore Trie atualizado;
Árvore Trie atualizada;
Cabeçalho dos descritores semânticos atualizado;
Descrição: Procedimento auxiliar que lista o léxico semântico, a partir de um conjunto de caracteres, para um determinado arquivo texto.
Entrada: Conjunto de caracteres;
Nome do arquivo texto a ser gerado;
Cabeçalho da árvore Trie.
Saída: Devolve 1 e gera arquivo texto se existem itens lexicais no léxico a partir de o conjunto de caracteres dado, e devolve 1 se não existem itens lexicais a partir de o conjunto de caracteres dado.
Descrição: Procedimento auxiliar que lista todo o léxico semântico.
Entrada: Nome do arquivo texto a ser gerado;
Cabeçalho da árvore Trie.
Saída: Devolve 1 e gera arquivo texto se existem itens lexicais no léxico, e devolve 1 se o léxico esta vazio.
Descrição: Procedimento auxiliar e recursivo utilizado nas listagens do léxico.
Entrada: Índice da posição atual da busca na árvore Trie;
Cabeçalho da árvore Trie;
Ponteiro para o arquivo texto a ser gerado;
Conjunto de caracteres reconhecido (até o presente momento).
Saída: Impressão do conjunto de caracteres no arquivo texto, se este designa um item lexical.
Juntamente com os procedimentos de manipulação da árvore Trie, os procedimentos de manipulação dos descritores semânticos são indispensáveis para o funcionamento de qualquer sistema que utilize o léxico semântico.
Os descritores contêm a informação semântica dos itens lexicais armazenados na árvore Trie.
Esta correspondência entre a árvore e os descritores é basicamente dada através do procedimento &quot;FindSemDescWord», onde é devolvido o número do descritor correspondente ao item lexical.
Em este módulo também é necessária a correta inicialização dos descritores e a verificação de erros provenientes desta inicialização.
Entre os principais procedimentos necessários para o funcionamento dos descritores, temos:
HEAD_ SEM LoadDescSem (char* filename, int* erro);
Descrição: Procedimento de inicialização do cabeçalho dos descritores semânticos.
Inicializa quatro dos cincos arquivos necessários para o funcionamento do dicionário.
São eles:
Arquivo de argumentos, arquivo de eventos, arquivo de descritores e o arquivo de informações Qualia.
Entrada: Nome dos arquivos sem extensão.
Saída: Erro $= 1: Erro de abertura de algum arquivo;
Erro $= 2: Erro de alocação de memória;
Erro $= 0: Não ocorreu erro.
Cabeçalho: Se não ocorreu erro de alocação, o cabeçalho contém os ponteiros para os vetores em memória correspondentes aos arquivos.
Int UpdateFileDescSem (HEAD_ SEM* h_ desc);
Descrição: Procedimento auxiliar que realiza a atualização dos arquivos de argumentos, eventos, descritores e de informação Qualia, se ocorreram inserções, alterações ou deleções nos vetores correspondentes.
Entrada: Cabeçalho dos descritores semânticos.
Saída: Arquivos atualizados se não ocorreu erro.
Erro $= 0: Ocorreu sucesso.
Erro $= 1: Ocorreu erro.
Void CloseDescSem (HEAD_ SEM* h_ sem);
Descrição: Procedimento principal de finalização do cabeçalho de descritores semânticos.
Procedimento que realiza a atualização dos arquivos, se ocorreu mudança como inserção, alteração ou deleção nos vetores de trabalho, bem como liberação de memória.
Entrada: Cabeçalho dos descritores semânticos.
Saída: Cabeçalho dos descritores com valores nulos.
Long InsertDescSem (HEAD_ SEM* h_ sem, int* erro);
Descrição: Procedimento que insere um descritor semântico no vetor de descritores semânticos endereçado por o cabeçalho dos descritores semânticos.
Entrada: Cabeçalho dos descritores semânticos.
Saída: Número do descritor semântico inserido.
Erro $= 0: Ocorreu sucesso Erro $= 1: Se ocorreu erro de alocação de memória.
Int InsertArgu (long indice, ARGSTR* v, int em um_ arg, HEAD_ SEM* h_ sem);
Descrição: Procedimento que insere argumentos no vetor de argumentos endereçado por o cabeçalho dos descritores semânticos.
Entrada: Número do descritor (índice);
Vetor de argumentos a serem inseridos;
Número de argumentos a serem inseridos;
Cabeçalho dos descritores semânticos.
Saída: Retorna 0 se ocorreu sucesso e 1 se ocorreu erro.
Int InsertEvent (long indice, int* v, int em um_ eve, HEAD_ SEM* h_ sem, int ordem);
Descrição: Procedimento que insere eventos no vetor de eventos endereçado por o cabeçalho dos descritores semânticos.
Entrada: Número do descritor (índice);
Vetor de eventos a serem inseridos;
Número de eventos a serem inseridos;
Cabeçalho dos descritores semânticos;
Ordem dos eventos.
Saída: Retorna 0 se ocorreu sucesso e 1 se ocorreu erro.
Int InsertTelicRole (long indice, char v, int em um_ telic, HEAD_ SEM* h_ sem);
Descrição: Procedimento que insere os valores da Função Télico no vetor de informações endereçado por o cabeçalho dos descritores semânticos.
Entrada: Número do descritor (índice);
Vetor de valores a serem inseridos;
Número de valores a serem inseridos;
Cabeçalho dos descritores semânticos.
Saída: Retorna 0 se ocorreu sucesso e 1 se ocorreu erro.
H_ sem);
Descrição: Procedimento que insere os valores da Função Agente no vetor de Entrada:
Número do descritor (índice);
Vetor de valores a serem inseridos;
Número de valores a serem inseridos;
Cabeçalho dos descritores semânticos.
Saída: Retorna 0 se ocorreu sucesso e 1 se ocorreu erro.
Int InsertConstRole (long indice, char v, int em um_ const, HEAD_ SEM* h_ sem);
Descrição: Procedimento que insere os valores da Função Constituintes no vetor de informações endereçado por o cabeçalho dos descritores semânticos.
Entrada: Número do descritor (índice);
Vetor de valores a serem inseridos;
Número de valores a serem inseridos;
Cabeçalho dos descritores semânticos.
Saída: Retorna 0 se ocorreu sucesso e 1 se ocorreu erro.
H_ sem);
Descrição: Procedimento que insere os valores da Função Formal no vetor de informações endereçado por o cabeçalho dos descritores semânticos.
Entrada: Número do descritor (índice);
Vetor de valores a serem inseridos;
Número de valores a serem inseridos;
Cabeçalho dos descritores semânticos.
Saída: Retorna 0 se ocorreu sucesso e 1 se ocorreu erro.
Diferentemente dos procedimentos descritos nas seções anteriores, os procedimentos avançados não são obrigatoriamente usados em todos os sistemas que utilizem o léxico.
Estes procedimentos apresentam mecanismos de busca de informações mais complexas e visam implementar os mecanismos gerativos propostos por Pustejovsky e discutidos na seção 4.5.
Assim, a utilização destes procedimentos depende da complexidade de informação semântica exigida por determinado sistema.
Entre os principais procedimentos avançados temos:
Coercion (char verb, char comp* h_ sem, HEAD_ TRIE_ SEM h, DESC_ SEM* new_ struct);
Descrição: Procedimento que realiza a junção dos descritores semânticos de dois itens lexicais.
Verifica a possibilidade da coerção.
Entrada: Item lexical correspondente ao verbo;
Item lexical correspondente ao complemento;
Cabeçalho da Trie; Cabeçalho Semântico.
Saída: Retorna 1 se foi possível a coerção e a nova estrutura gerada ou 1 se não ocorreu a coerção e junção.
HEAD_ TRIE_ SEM h, DESC_ SEM* new_ struct);
Descrição: Procedimento que realiza a junção dos descritores semânticos de dois itens lexicais.
Verifica a possibilidade da co-composição.
Entrada: Item lexical correspondente ao verbo;
Item lexical correspondente ao complemento;
Cabeçalho da Trie; Cabeçalho Semântico.
Saída: Retorna 1 se foi possível a co-composição e a nova estrutura gerada ou 1 se não ocorreu a co-composição ou junção.
HEAD_ TRIE_ SEM h, DESC_ SEM* new_ struct);
Descrição: Procedimento que realiza a junção dos descritores semânticos de dois itens lexicais.
Verifica a possibilidade da ligação seletiva.
Entrada: Item lexical correspondente ao substantivo;
Item lexical correspondente ao adjetivo;
Cabeçalho da Trie; Cabeçalho Semântico.
Saída: Retorna 1 se foi possível a ligação seletiva e a nova estrutura gerada ou 1 se não ocorreu a ligação ou junção.
Int Class (char item, HEAD_ SEM* h_ sem, HEAD_ TRIE_ SEM h, char class);
Descrição: Procedimento que devolve o valor da Função Formal de um determinado item lexical.
O valor Formal corresponde a idéia de classe pai de determinado item lexical correspondente a um nominal.
Entrada: Item lexical;
Cabeçalho da Trie; Cabeçalho Semântico.
Saída: Retorna 1 se existe valor Formal para este item e o valor ou retorna 1 se não existe valor Formal.;
Descrição: Procedimento que verifica a existência a relação semântica possui entre dois itens lexicais -- procedimento necessário ao sistema de resolução de referências pronominais possessivas apresentado em.
Entrada: Primeiro item lexical;
Segundo item lexical;
Cabeçalho da Trie; Cabeçalho Semântico.
Saída: Retorna 1 se existir a relação, ou retorna 1 se não existir relação.
Em este seção é apresentado um programa básico25, em linguagem de programação C, que exemplifica sucintamente o funcionamento do léxico semântico.
São exemplificados os processos de inicialização e finalização da árvore Trie e descritores semânticos, o processo de inserção de um item lexical e suas informações semânticas, o processo de busca de um item lexical e suas informações semânticas, e os processos de listagem do léxico para arquivos texto.
HEAD_ TRIE_ SEM h;
HEAD_ SEM h_ sem;
Int errot, erros, erroa, errol;
ARGSTR arg; Long resp, aux;
Char* v $ { &quot;Pessoas (x, y)», &quot;Leis (x, y)&quot;;
Strcpy (arg.
Classe, «x:
Localidade&quot;); Strcpy (arg.
Classe, «y:
Orgão_ governamental&quot;);
H $= LoadTrieSem (&quot;sem»,&amp; errot);
H_ sem $= LoadDescSem (&quot;sem»,&amp; erros);
Printf( «Erro na abertura dos arquivos!\
n&quot;); H $= InsertTrieSem (&quot;município», h,&amp; h_ sem);\&gt;
Printf( «Achei desc:
% d!\
n», resp);
Para um melhor entendimento deste programa é necessário que o leitor tenha noções de programação na linguagem C. Erroa $= InsertArgu (resp, arg, 2,&amp; h_ sem);\&gt;\&gt;
Aux $= h_ sem.
Descsem. Args;
Printf (&quot;Argumentos&quot;:\
n&quot;); Printf(&quot;% s\ n», h_ sem.
Argumentos. Classe);
Aux $= h_ sem.
Argumentos. Prox_ arg;
Aux $= h_ sem.
Descsem. Qualia.
Constituintes; Printf (&quot;Contitutive Role&quot;:\
n&quot;); Printf(&quot;% s\ n», h_ sem.
Informacoes. Inform);
Aux $= h_ sem.
Informacoes. Prox_ inf;
Errol $= ListAllTrieSemToFile( «lista.
Txt», h);
Errol $= ListTrieSemToFile (&quot;mun», «lista2.
Txt», h);
CloseDescSem(&amp; h_ sem);
CloseTrieSem(&amp; h);
O estudo aqui realizado envolve modelagem e implementação de um léxico semântico para a Língua Portuguesa.
É apresentado um modelo de representação semântica lexical baseado na teoria de James Pustejovsky.
O ponto de partida deste estudo constitui- se de trabalhos como (Dias principalmente, da obra &quot;The Generative Lexicon «onde é apresentada uma teoria do léxico semântico gerativo.
Inicialmente foi realizado um estudo de conceitos básicos relacionados à semântica, com o intuito de obter uma compreensão preliminar do assunto a ser desenvolvido, e assim situar o presente trabalho.
Em este estudo preliminar foram apresentadas técnicas de representação do conhecimento e do significado que contribuíram para a escolha e a compreensão do modelo a ser implementado.
Posteriormente, um estudo de trabalhos relacionados ao tema desta dissertação foi realizado.
Em este estudo pudemos notar a necessidade e a aplicabilidade do conhecimento semântico a inúmeras funções em sistemas de PLN ou, até mesmo, em sistemas de outras áreas de pesquisa.
Finalizados os estudos preliminares, um estudo aprofundado da teoria de James Pustejovsky foi realizado, como subsídio para a implementação de um léxico semântico para o português.
Nossa proposta seguiu este modelo porque o mesmo soluciona alguns dos maiores problemas comuns à representação do significado, como a ambigüidade lexical polissêmica, robustez e geratividade, de forma eficaz e computacional.
Assim, definimos um modelo a ser implementado, baseado fortemente no modelo do léxico semântico proposto por Pustejovsky em e adaptado à língua portuguesa.
A implementação do léxico é construída sobre uma estrutura em árvore Trie, que possibilita um maior poder de representação com eficácia na busca de informações, e baixa quantidade de dados armazenados.
A implementação fornece, além de a estrutura do léxico semântico, uma ferramenta poderosa de representação semântica de itens lexicais para sistemas de PLN.
Assim, juntamente com o léxico semântico, uma biblioteca de funções foi desenvolvida a fim de fornecer uma fácil manipulação e manutenção do conhecimento semântico armazenado no banco de dados lexical.
Foi avaliado brevemente o modo como esta ferramenta poderia ser incorporada num sistema multi-agentes para o processamento da linguagem natural (como ao sistema proposto por Silva em).
O estudo aqui apresentado mostra alguns pontos que não são bem trabalhados ou esclarecidos por Pustejovsky e que necessitariam de uma melhor análise:
Os mecanismos de inferência do conhecimento são pouco discutidos;
Os mecanismos gerativos de conexão dos quatro níveis semânticos, como a coerção de tipos, a ligação seletiva e a composição, não são de fácil compreensão, pois dependem de uma análise profunda dos exemplos expostos, que, muitas vezes, não se aplicam ao português, ou são escassos.
Uma aplicação direta dos léxicos semânticos é integrar sistemas de resolução de problemas inerentes à linguagem.
A resolução de anáforas é um destes problemas.
Juntamente com o colega de mestrado Ivandré Paraboni, que estuda técnicas para resolução de referências pronominais possessivas, procedimentos de busca de informações semânticas foram implementados.
Em um primeiro momento, acreditou- se que sistemas de inferência seriam indispensáveis para resolver problemas de busca de conhecimento complexos, necessários aos processos da aplicação citada.
Mas, diferente do que se pensava, as informações necessárias podem ser recuperadas através de consultas de relações simples e relações hierárquicas, que suprem a maioria dos casos apresentados de referências estudas por Paraboni.
Entre as consultas previstas por o sistema de resolução de referências pronominais possessivas temos, basicamente, consultas de subtipo, consultas de pertinência e consultas de relação entre itens lexicais.
Como exemplo de consultas, diretas e indiretas, necessárias neste caso, teríamos:
É_ UM (índios, comunidade);
Possui (comunidade, direitos);
É_ UM (material, recurso);
Essas consultas geram uma busca em profundidade na rede hierárquica proposta por Pustejovsky, onde É_ UM corresponde diretamente ao papel Formal e o Possui corresponde ao papel Constituinte dos itens lexicais.
Para esse problema, consultas simples são suficientes e são implementadas através dos procedimentos Has e Class descritos na seção 5.2.7.
Isso não significa que, em outros problemas, não sejam necessários mecanismos de inferências de conhecimento armazenado no léxico semântico (tais mecanismos, porém, já estariam fora de o escopo deste trabalho).
O modelo (proveniente da teoria do Léxico Gerativo de James Pustejovsky) e a implementação expostos neste trabalho parecem solucionar o problema de representação do significado de itens lexicais, especialmente substantivos, adjetivos e verbos, de maneira prática e computacional.
Mas, como mencionado, alguns pontos da obra de Pustejovsky apresentam- se ainda pouco detalhados (prejudicando sua compreensão).
As referências ao modelo de Pustejovsky não são suficientes para uma compreensão total de sua teoria.
Por ser uma teoria recente e desenvolvida para o Inglês (fenômenos lingüísticos apresentados nos exemplos nem sempre têm correspondentes no Português), alguns pontos merecem maiores estudos.
Tal falta de compreensão não implica uma modelagem em desacordo com a mesma.
O modelo implementado representa fielmente as estruturas e funcionalidades mencionadas por o autor.
O problema da incompreensão surge ao inserirmos no banco de dados os significados de itens lexicais mais complexos, o que não gera falta grave pois, num novo estudo, sanada a dúvida, o item poderia ser removido e reinserido.
A integração do sistema implementado a aplicações de PLN é uma tarefa a ser incentivada.
A fim de analisar aspectos de performance do sistema e aspectos de representabilidade do modelo do Pustejovsky, seria de enorme valor integrarmos a sistemas de PLN, que necessitem de informação semântica, a presente implementação.
Além de esta contribuição, os sistemas que a incorporarem se enriquecerão com o conjunto de vantagens pertinentes ao modelo de Pustejovsky.
Esta tarefa, apesar de não fazer parte dos objetivos da presente dissertação, encontra- se em andamento e vinculada aos sistemas como propostos em e.
O aperfeiçoamento da interface de manutenção do léxico semântico é, também, outro trabalho a ser realizado.
Esta interface, desenvolvida para estações de trabalho SUN, facilita que usuários insiram e modifiquem itens lexicais no banco de dados, além de prover uma visualização destes itens.
Mas esta interface apresenta limitações, visto que foi desenvolvida para resolver problemas imediatos.
Para ser amplamente usada, deve ser aperfeiçoada de modo a agilizar seus processos.
Enfim, através deste trabalho, esperamos ter contribuído para a compreensão de aspectos relacionados à semântica e sua aplicação em sistemas que processem a linguagem.
Desejamos ter fornecido uma visão clara e concisa do modelo de Pustejovsky e ter mostrado como esse modelo pode ser implementado para fornecer uma ferramenta de representação do significado a sistemas que necessitem desta informação.
Acreditamos que esta implementação seja de grande valor aos sistemas de PLN incorporados ao projeto em que ela se desenvolveu pois, como já mencionado, apresenta um conjunto de vantagens provenientes da teoria de a qual se originou.
