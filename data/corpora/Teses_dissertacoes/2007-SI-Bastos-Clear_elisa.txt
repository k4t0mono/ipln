Um produto final que represente realmente as necessidades dos usuários é, atualmente, uma busca constante das organizações de desenvolvimento de software.
Um ponto crucial para o alcance deste objetivo é realizar um processo de requisitos que considere as necessidades organizacionais do início ao fim.
O documento de especificação de requisitos (SRS) é utilizado para formalizar as necessidades dos clientes e o modelo de casos de uso (MCU) serve como base para o processo de desenvolvimento.
Sendo assim, é importante que a SRS contenha todas as funcionalidades requisitadas por os usuários e que o MCU represente- a fielmente, contendo todos os requisitos em ela estabelecidos.
Em este contexto, este trabalho apresenta um modelo de rastreabilidade entre o documento de especificação de requisitos e o modelo de casos de uso do sistema.
Este modelo foi desenvolvido com base nos modelos conceituais destes artefatos e nas necessidades organizacionais, identificadas através de um estudo de caso realizado numa organização de desenvolvimento de software.
Sua principal contribuição é auxiliar a atividade de engenharia de requisitos, mantendo a integridade entre os artefatos gerados quando de a mudança dos requisitos do sistema.
Palavras-chave: Engenharia de Requisitos, Gerência de Requisitos, Especificação de Requisitos, Modelo de Casos de Uso, SRS, Rastreabilidade.
Atualmente, as organizações de desenvolvimento de software estão cada vez mais interessadas em garantir que o software represente, realmente, uma solução para o sistema proposto.
A maneira mais eficaz de alcançar este objetivo é a utilização de um processo de requisitos bem definido, visto que o motivo da maioria dos cancelamentos ou fracassos de projetos acontece por eles não atenderem completamente às necessidades dos clientes e excederem os prazos e os orçamentos estimados.
Embora não seja fácil, determinar requisitos é uma tarefa extremamente importante, pois eles formam a base para o planejamento, o acompanhamento do desenvolvimento e a aceitação dos resultados do projeto de software.
Ter um processo bem definido significa ter maior possibilidade para se obter, entender e validar as necessidades e expectativas do cliente para, posteriormente, documentar- las.
O principal objetivo deste processo é concluir, com êxito, um acordo entre quem solicita e quem desenvolve, estabelecendo clara e rigorosamente o que deverá ser produzido.
Não utilizar requisitos é equivalente a pensar &quot;não há tempo para descobrir o que se deve construir, devemos começar a construir agora».
O documento de especificação de requisitos é utilizado para formalizar as necessidades dos clientes e o modelo de casos de uso serve como base para o processo de desenvolvimento.
Com isso, um ponto positivo para iniciar o processo de desenvolvimento é garantir que o documento de especificação de requisitos seja uma representação fiel daquilo que o usuário deseja e, com isso, desenvolver o modelo de casos de uso contendo todas as informações em ele relacionadas.
Outro ponto importante é a rastreabilidade de requisitos, que vem sendo identificada na literatura como um fator de qualidade e é vista como uma técnica fundamental no apoio às diversas atividades do projeto.
Sua utilização facilita o controle de que sistemas e software estão em conformidade às mudanças dos requisitos e.
Embora se saiba que o esforço necessário para sua aplicação pode ser elevado, como aumento de custo ou tempo, sem a utilização de mecanismos deste tipo podem surgir inconsistências durante o processo de adição, remoção ou modificação de requisitos.
Ainda, de acordo com, os requisitos não podem ser efetivamente gerenciados sem rastreabilidade.
Em este contexto, este trabalho apresenta um modelo de rastreabilidade entre o documento de requisitos, que se espera ser bem elicitado e conter todas as necessidades dos interessados, e o modelo de casos de uso, que deve conter todas as informações citadas neste documento.
Seu desenvolvimento se deu com base na literatura e no estudo de caso realizado.
Inicialmente o estudo da base teórica foi realizado e a partir de ele foram encontradas lacunas na área e vários trabalhos relacionando problemas entre a má definição e especificação dos requisitos com os resultados não satisfatórios do produto final.
A partir de isto, e considerando o contexto de que o modelo de casos de uso fornece a base para o desenvolvimento de software, buscou- se identificar a relação entre os elementos dos dois documentos a fim de propor um modelo que permitisse que eles permanecessem consistentes durante todo o processo de desenvolvimento.
Em este sentido, foram desenvolvidos um modelo de rastreabilidade e um processo de apoio contendo relacionamentos, dependências e procedimentos para sua aplicação.
Sua principal contribuição é permitir que os artefatos envolvidos desde o processo de levantamento de requisitos até o final do processo de desenvolvimento permaneçam consistentes mesmo quando alterações forem realizadas.
A fim de suportar esses artefatos, um protótipo de uma ferramenta, também implementado no contexto desta pesquisa, é apresentado.
Com esta proposta, são oferecidos subsídios para manter os dois documentos consistentes entre si e, com isso, possibilitar que o resultado do processo seja satisfatório.
A questão de pesquisa abordada no projeto aqui apresentado foi a seguinte:
Como garantir a integridade entre os artefatos do documento de especificação de requisitos e o modelo de casos de uso do sistema quando de a alteração de algum de seus elementos?
Com base na contextualização apresentada na seção anterior, o objetivo geral desta pesquisa é propor um modelo de rastreabilidade entre o documento de especificação de requisitos e o modelo de casos de uso do sistema oferecendo mecanismos que mantenham a integridade entre os artefatos gerados quando de a mudança nestes requisitos.
Para atender a este objetivo geral emergem os seguintes objetivos específicos:
û Estudo da base teórica, aprofundando conhecimentos sobre requisitos, processo de engenharia de requisitos e também em modelo de casos de uso, descrição de casos de uso, rastreabilidade e tópicos relacionados.
Este volume está organizado em oito capítulos.
O capítulo 1 corresponde a esta introdução.
Em o capítulo 2 é apresentado o referencial teórico desta pesquisa, envolvendo os principais conceitos e áreas do estudo:
Requisitos, casos de uso e rastreabilidade.
O capítulo 3 apresenta os trabalhos relacionados.
Foram selecionados artigos sobre estudos em áreas relacionadas ou complementares a pesquisa aqui apresentada.
Durante este capítulo, são feitas considerações sobre estes trabalhos.
Em o capítulo 4 é detalhado o método de pesquisa utilizado.
Em ele são descritas todas as etapas do estudo e o desenho de pesquisa é apresentado.
O capítulo 5 descreve o estudo de caso realizado numa empresa de desenvolvimento de software.
Este estudo de caso teve como finalidade identificar os elementos presentes nos documentos de especificação de requisitos e a completude de suas informações, bem como, encontrar subsídios que indicassem se os casos de uso estavam corretamente relacionados aos requisitos presentes no documento.
Em o capítulo 6 é apresentado o modelo de rastreabilidade proposto.
Em este capítulo são apresentados, também, os modelos conceituais do documento de especificação de requisitos e do modelo de casos de uso, utilizados em conjunto com o modelo de rastreabilidade para a realização do processo.
Ainda neste capítulo são apresentados todos os procedimentos que compõem o processo de rastreabilidade.
O capítulo 7 descreve a avaliação do modelo proposto através de sua aplicação num documento de especificação de requisitos e em seu respectivo modelo de casos de uso, visando verificar a aplicabilidade da proposta e suas contribuições.
Por fim, no capítulo 8 são apresentadas as considerações finais deste volume.
São descritas as contribuições deste estudo, bem como suas limitações e trabalhos futuros.
Esta seção descreve o referencial teórico deste trabalho apresentando os principais conceitos envolvidos com o tema de pesquisa.
Serão apresentados, ainda, alguns trabalhos relacionados que serviram como referência para o desenvolvimento do processo.
Antes do desenvolvimento de qualquer sistema, é necessário entender qual o seu objetivo e como seu uso poderá ajudar nas metas dos clientes ou do negócio.
Isto envolve compreender o domínio da aplicação (telecomunicações, jogos, varejo, e etc.), as restrições do sistema operacional, a especificação das funcionalidades requeridas por os stakeholders1 e as características essenciais do sistema como:
Performance, segurança, e dependência.
De acordo com e, a Engenharia de Requisitos (Er) é um termo que engloba todas as atividades envolvidas na descoberta, documentação e manutenção de um conjunto de requisitos para um sistema computacional.
O sucesso de um sistema de software é determinado por a maneira com que ele satisfaz as necessidades do cliente, onde esta satisfação é determinada por a forma com que a solução proposta está relacionada com as necessidades apontadas por os stakeholders.
O esforço de desenvolvimento é total ou parcialmente desperdiçado se o software construído não corresponde aos objetivos propostos.
Além disso, se a base tecnológica (hardware, software e dispositivos) necessária ao software não for compatível com a base existente onde ele será utilizado, o esforço de desenvolvimento pode ser completamente perdido.
Para atingir o sucesso, é fundamental identificar e documentar as necessidades e objetivos do software.
Esta tarefa exige o entendimento do ambiente onde o software será inserido, considerando as características de negócio, as possíveis mudanças e as necessidades reais envolvidas no processo.
Os requisitos estão associados aos principais problemas do desenvolvimento de software, visto que requisitos mal elicitados e mal especificados podem acarretar num resultado diferente do esperado por o usuário.
Não existe maneira incontestável de assegurar que uma especificação de software satisfaz completamente as necessidades e características desejadas por o cliente.
Em a tentativa de evitar este Um stakeholder é qualquer grupo ou indivíduo que pode afetar ou ser afetado por a obtenção dos objetivos da organização (apud).
Em esta seção será apresentado o processo de engenharia de requisitos, alguns conceitos relacionados ao tema da pesquisa e a contextualização deste trabalho no âmbito da Er.
O processo fundamental de Er varia dependendo do tipo de aplicação que será desenvolvida, do tamanho e da cultura das companhias envolvidas e do processo de aquisição de software utilizado, porém, independente do tipo de processo realizado, algumas atividades são fundamentais:
O reconhecimento do problema, a interpretação das necessidades que demandam o sistema, a modelagem, a especificação e a validação dos requisitos que atendem estas necessidades.
Como em qualquer processo, o processo de Er pode apresentar várias dificuldades.
A maior de elas é a definição precisa sobre o que construir.
Este é um problema antigo e que está presente até hoje no processo de software.
Nenhuma outra parte é mais difícil de ser corrigida tardiamente De um modo geral, segundo Nuseibeh, o processo de Er identifica os stakeholders, suas necessidades e as documenta de forma que possam ser analisadas e discutidas para a implementação.
De acordo com Pressman, uma completa compreensão dos requisitos é fundamental para um desenvolvimento de um software bem sucedido.
Não importa quão bem projetado ou quão bem codificado seja, um programa mal analisado e mal especificado desapontará o usuário e trará aborrecimentos para o desenvolvedor.
Independente do tipo de processo utilizado, algumas atividades são fundamentais:
û Elicitação:
Em esta fase são identificadas as informações sobre o sistema baseando- se nas necessidades e expectativas dos stakeholders.
Algumas vezes estas atividades são apresentadas como se ocorressem em seqüência, onde a elicitação seria a primeira a ser realizada e a documentação, em conjunto com o gerenciamento de mudanças nos requisitos, seria a última.
Entretanto a Er é sempre uma atividade cíclica, conforme é apresentado na Figura 1.
O foco deste trabalho está no resultado do processo de Er, o documento de requisitos, que define o que será implementado.
Com isso, nota- se que se este documento não tiver bem especificado, a implementação pode não ser adequada.
Os requisitos são um componente fundamental no processo de software.
Não utilizar requisitos é equivalente a pensar &quot;não há tempo para descobrir o que se deve construir, devemos começar a construir agora».
Apesar de a literatura apresentar diversas definições para requisitos, neste trabalho optou- se por utilizar a definição de Goguen que diz que os requisitos são propriedades que um software deve possuir para funcionar com sucesso no ambiente para o qual foi proposto, considerando tanto o contexto social quanto o contexto técnico do ambiente, o que tem se mostrado importante na utilização de requisitos, pois muitas das informações utilizadas por eles estão ligadas ao ambiente social dos usuários e gerentes.&amp;&amp;&amp;
Alguns dos problemas que surgem durante o processo de engenharia de requisitos, resultam da falta de uma separação entre os níveis de descrição de requisitos.
Os termos requisitos de usuário e requisitos de sistema são utilizados por para designar os requisitos abstratos de alto nível e para indicar a descrição detalhada do que o sistema deverá fazer, respectivamente.
Este trabalho está focado, principalmente, na especificação dos requisitos do sistema.
Freqüentemente os requisitos de software são classificados em funcionais (declarações das funções que o sistema deve oferecer) e não-funcionais (restrições sobre os serviços ou funções oferecidas por o sistema;
Como o software se comporta em relação a atributos observáveis como performance e confiabilidade, por exemplo.).
Essa divisão é apresentada por diversos autores como, e.
Os requisitos funcionais representam a descrição das diversas funções que os clientes e os usuários querem ou precisam que o sistema ofereça.
Dependem do tipo de software que está sendo desenvolvido.
Em princípio devem ser escritos de forma completa e consistente, onde a completeza significa que todas as funções requeridas por o usuário devem estar descritas e a consistência significa que os requisitos não devem ter definições contraditórias.
Os requisitos não-funcionais são as propriedades de um software, como manutenibilidade, usabilidade, desempenho, custos, entre outros.
Podem definir, também, restrições para o sistema, como capacidade de dispositivos E/ S (entrada/ saída) e as representações de dados utilizados nas interfaces do sistema.
Os requisitos não-funcionais surgem conforme a necessidade dos usuários, em razão de restrições de orçamento, de políticas organizacionais, por a necessidade de interoperabilidade com outros sistemas de software ou hardware, ou devido a fatores externos.
A falha em se cumprir um requisito não-funcional pode ser muito pior do que a falha em se cumprir um requisito funcional.
Muitos requisitos não-funcionais dizem respeito ao sistema como um todo.
Enquanto a falha num requisito funcional pode degradar o sistema, a falha num requisito não-funcional pode tornar todo o sistema inútil.
Por exemplo, se um sistema de aviação não atender aos seus requisitos de confiabilidade, ele não será atestado como seguro.
Em o contexto da engenharia de requisitos, este trabalho se enquadra na fase de especificação (documentação) e de gerenciamento de requisitos.
Desenvolver uma solução para um problema específico e não uma solução para um problema qualquer é uma dificuldade ainda constante nos processos de desenvolvimento de software.
A fim de solucionar este problema, foi desenvolvido um modelo de rastreabilidade que busca fornecer meios para que todas as funcionalidades levantadas sejam realmente implementadas.
Assim, este trabalho possibilita que um processo consistente de levantamento de requisitos (elicitação) contribua para um processo completo de desenvolvimento de software.
Tendo um documento de requisitos bem elicitado, que compreenda todas as funcionalidades necessárias para a satisfação do usuário, e fornecendo um processo para auxiliar que todas as funcionalidades presentes neste documento sejam completamente implementadas, as possibilidades de um resultado de sucesso crescem consideravelmente.
Este modelo permite averiguar se todas as funcionalidades descritas no documento de requisitos estão representadas no modelo de casos de uso e permite, também, verificar a consistência entre os elementos dos dois documentos durante o processo de mudança nos requisitos.
Uma vez identificados e negociados, os requisitos devem ser documentados para que possam servir de base para o restante do processo de desenvolvimento.
Um ponto importante, a ser sempre considerado, é que os requisitos devem ser escritos de forma que os stakeholders e os desenvolvedores de software possam compreender- los da mesma maneira.
A documentação pode ser representada através das especificações de requisitos, que podem ser classificadas em:
Informais, semi-formais e formais.
As informais são as representações em linguagem natural, as semi-formais podem ser representadas, por exemplo, por linguagens gráficas e as formais são representações matemáticas para o sistema.
O estudo completo sobre os tipos de especificação de requisitos pode ser conferido em.
Em este trabalho, serão utilizadas as representações informais, fazendo uso de linguagem natural e as representações semi-formais, através dos modelos e descrições de casos de uso.
Os requisitos de sistema são geralmente documentados num documento formal que é usado como meio de comunicação entre os stakeholders.
Não há um padrão de nome para este documento, em organizações distintas ele pode ter nomes diferentes como documento deste documento deve trazer informações importantes como:
Os serviços e as funções que o sistema deve fornecer, as restrições sobre as quais ele deve operar, propriedades gerais do sistema, definições de outros sistemas que interagem com ele, etc..
A IEEE define o nome &quot;Especificação de Requisitos de Software «(SRS ­ Software Requirements Specification), para este documento e este trabalho foi realizado com base neste padrão, que será apresentado a seguir.
A SRS é uma especificação para um produto de software específico, para um programa ou para um conjunto de programas que executam certas funções num determinado ambiente.
Deve ser escrito por um ou mais representantes do fornecedor, um ou mais representantes dos clientes ou por ambos.
Uma razão para que estes documentos sejam frequentemente incompletos, é que o levantamento dos requisitos geralmente segue uma rota improdutiva.
Por exemplo, alguns requisitos podem ser ignorados e, neste caso, o time de desenvolvimento desconsidera a solução, resultando num design baseado em suposições de como o sistema deve funcionar.
Documentos de requisitos mal escritos ­ muito longos ou voltados à visão de uma única pessoa, por exemplo ­ podem levar ao cancelamento de um projeto.
Alguns pontos como documentar as necessidades dos usuários, evitar deduções prematuras de design, apresentar requisitos não conflitantes e não redundantes, devem sempre ser considerados para alcançar a qualidade de uma SRS.
Uma maneira de garantir tais aspectos é permitir uma rastreabilidade entre os requisitos.
Para isto, é fundamental que todos os passos do projeto sejam documentados relatando, por exemplo, a qual requisito uma classe específica se refere, qual caso de teste reflete um requisito específico e assim por diante.
Tais cuidados podem garantir que uma mudança em determinado ponto não se torne uma catástrofe para o projeto final, já que se terá documentado quais artefatos serão atingidos com tal procedimento.
Existem diversas maneiras de escrever uma SRS, geralmente elas são adaptadas à realidade do projeto e/ ou da empresa.
Infelizmente, nem sempre seguem um padrão ideal e nem sempre consideram todos os aspectos necessários para que o documento possa ser considerado completo.
Com isso, o restante do processo fica debilitado sendo que se determinadas características foram esquecidas ou expressas de maneira inadequada, o resultado pode não ser o esperado.
Segundo a IEEE, a SRS deve estar apta a responder algumas questões, tais como:
û O que o software pretende fazer?
Analisando as questões acima, pode- se perceber que elas estão relacionadas a alguns aspectos como funcionalidade, interfaces externas, performance, atributos e limites de implementação, respectivamente.
De acordo com a IEEE para que possa ser considerada boa, uma SRS deve ser:
Correta, não ambígua, completa, consistente, superior por a importância e/ ou estabilidade, verificável, modificável e rastreável.
Em o caso onde o termo usado pode ter múltiplo significado, ele deve ser incluído num glossário onde seu significado é obtido mais especificamente.
Formatos de relatórios de saída com padrões diferentes;
Requisitos especificando adição de determinadas entradas enquanto outros especificam que será realizada a multiplicação de elas;
Requisitos descrevendo o mesmo objeto, porém usando termos diferentes para ele.
Classificação: Uma SRS ocupa um lugar de destaque por a importância e/ ou estabilidade se existem indicações no documento quanto a a importância ou estabilidade do requisito;
Verificável: Uma SRS é verificável se, e somente se, para cada um dos requisitos contidos no documento, existe um processo finito e economicamente viável através de o qual uma pessoa ou máquina possa assegurar que o produto de software atende ao requisito;
Modificável: Uma SRS é modificável se, e somente se, modificações possam ser agregadas ao documento de forma fácil, completa e consistente, com relação a sua estrutura e estilo;
Rastreável: Uma SRS é rastreável se, e somente se, a origem de cada um de seus requisitos é clara e a referência a cada um de eles é facilitada nos documentos subseqüentes do processo ou numa melhoria da documentação do sistema (através da numeração dos requisitos, por exemplo).
Além disso, a IEEE sugere várias seções a serem utilizadas neste documento.
Estas seções foram interpretadas e a partir de elas foi desenvolvido um modelo conceitual para a SRS, detalhado na seção 4.1.1, a fim de facilitar a identificação de seus elementos no momento da realização da rastreabilidade.
Kotonya &amp; Sommerville afirmam que a linguagem natural é a única notação existente passível de interpretação por todos os potencias leitores do documento de requisitos, porém, reconhecem que podem ser ambíguas e mal interpretadas.
Recomenda- se, então, que sejam usadas técnicas, no mínimo, estruturadas sempre que não se possa correr o risco de ter o requisito mal interpretado.
Assim, para este trabalho optou- se por a utilização de uma estrutura para especificação de requisitos em linguagem natural.
Seu desenvolvimento se deu num projeto de pesquisa realizado no CDPe (Centro de Desenvolvimento e Pesquisa Dell/PUCRS) e, atualmente, é utilizada em vários projetos desta empresa.
Esta estrutura é apresentada em detalhes na próxima seção.
A estrutura para especificação de requisitos em linguagem natural foi inicialmente estruturada por meio de uma pesquisa desenvolvida no Centro de Desenvolvimento e Pesquisa DELL/ PUCRS (CDPe).
A idéia de seu desenvolvimento surgiu devido a diversos desafios identificados na engenharia de requisitos em ambientes distribuídos de software, que podem ser conferidos em.
Esta estrutura é atualmente utilizada em projetos da empresa participante do estudo de caso, e por este motivo pode ser adicionada ao contexto deste trabalho.
A pesquisa tratou, especificamente, os seguintes pontos:
O modelo inclui um metamodelo de requisitos e uma estrutura textual.
O metamodelo de requisitos apresenta um conjunto de definições utilizadas para classificar as informações obtidas durante a especificação, bem como seus relacionamentos.
A estrutura textual define estruturas de frase, para cada tipo de informação, com o objetivo de simplificar sua compreensão.
O metamodelo, apresentado na Figura 2, visa tratar problemas causados por as múltiplas visões de requisitos ­ fornecendo um conjunto de definições a ser utilizado junto com a estrutura de texto ­ bem como estruturar o relacionamento entre as informações obtida.
Os autores concluíram, através de um estudo de caso, que este modelo é importante para reduzir as diferenças no nível de detalhe das especificações entre as equipes e por isso ele foi implantado e é, atualmente, utilizado na maioria dos projetos da empresa.
A estrutura de frase é composta de campos padrão que devem ser preenchidos de acordo com regras para cada categoria de informação.
Quando a estrutura de frase é preenchida, a frase final é obtida concatenando- se os campos numa ordem pré-definida.
O resultado final representa a informação desejada.
Esta estrutura tem como objetivo, neste trabalho, oferecer mais possibilidades para que a técnica de rastreabilidade entre os requisitos e os casos de uso possa ser aplicada efetivamente.
Será representado por o número correspondente à informação a ser registrada na SRS;
û Categoria da informação (obrigatório):
Categoria de acordo com o metamodelo.
Categorias válidas são:
RF (requisito funcional), RNFG (requisito não-funcional geral), RNFE (requisito não-funcional específico), RNG (regra de negócio geral), RNE (regra de negócio específica), IE (interface de entrada) e Is (interface de saída).
De acordo com a categoria de informação, algumas regras são definidas para guiar o preenchimento da estrutura.
As regras são as seguintes:
Quando preenchendo a estrutura de frases com requisitos funcionais, o campo &quot;2 -- Condição «deve conter as pré-condições;
O campo &quot;7 ­ Pós--condições «deve ser preenchido com as póscondições, conforme apresentado no metamodelo.
A frase final é obtida por a concatenação dos campos na seguinte seqüência:
1+ 3+ 4+ 5+ 6+».&quot;+
2+».&quot;+ 7+».
O preenchimento é exemplificado na Figura 4.
Para escrita de requisitos não-funcionais na estrutura de frase principal, as seguintes regras devem ser observadas:
O campo &quot;1 -- Ator «deve ser preenchido com &quot;Sistema&quot;;
As condições que se aplicam ao requisito não-funcional, se houverem, devem ser preenchidas no campo &quot;2 -- Condição&quot;;
O campo &quot;7 -- Pós-condição «deve ser deixado em branco.
A frase final é obtida por a concatenação dos campos 2+»,&quot;+ 1+ 3+ 4+ 5+ 6+».
O preenchimento é exemplificado na Figura 5.
Quando preenchendo a estrutura de frases para representação de regras de negócio, as seguintes regras se aplicam:
O campo &quot;1 -- Ator «deve ser preenchido com &quot;Sistema&quot;;
As condições que se aplicam ao requisito não-funcional, se houverem, devem ser preenchidas no campo &quot;2 Condição&quot;;
O campo &quot;7 -- Pós-condição «deve ser deixado em branco.
Interfaces devem ser representadas usando as seguintes regras:
O campo &quot;1 -- Ator «deve ser preenchido com &quot;Sistema&quot;;
O campo &quot;3 -- Ação «deve ser preenchido com &quot;deve obter «em interfaces de entrada ou com &quot;deve fornecer «em interfaces de saída;
O campo &quot;4 -- Objeto da ação «preenchido com as informações requeridas por a interface.
O campo &quot;7 -- Pós-condição «deve ser deixado em branco.
A Figura 7 apresenta uma interface de entrada.
Em este trabalho, a estrutura de frases em linguagem natural será utilizada para padronizar a descrição dos requisitos e de outras informações, apresentadas acima, a fim de facilitar a compreensão dos requisitos da mesma maneira por pessoas diferentes e, também, a fim de facilitar o mapeamento entre os elementos da SRS e do modelo de casos de uso.
A seguir, os modelos de caso de uso serão explanados.
Serão apresentadas suas características, seus elementos e informações necessárias para dar continuidade à compreensão do modelo proposto neste trabalho.
Um modelo de casos de uso (MCU) é um modelo das funções a serem realizadas por o sistema e seus limites.
Funcionam como um contrato entre os clientes e os desenvolvedores.
Os casos de uso servem como uma linha base a ser seguida durante todo o desenvolvimento do sistema e são um resultado obtido através da análise da especificação dos requisitos.
Existem muitas maneiras de modelar um sistema, cada qual servindo para uma finalidade diferente.
Entretanto, o propósito mais importante de um modelo de casos de uso é comunicar o comportamento do sistema ao cliente ou ao usuário final.
Consequentemente, o modelo deve ser de fácil compreensão.
Um caso de uso individual descreve como um ator interage com o sistema para alcançar um resultado.
Um conjunto de casos de uso, por sua vez, descreve o comportamento completo do sistema.
Entretanto, descrever cada caso de uso antes de determinar o modelo completo não é uma boa prática.
Primeiramente o modelo geral do sistema deve ser construído para, então, sucessivamente refinar- lo até que os comportamentos detalhados possam ser compreendidos.
Porém, cada caso de uso é refinado somente dentro de o contexto geral do sistema.
O conjunto completo de casos de uso, atores e suas interações constituem o modelo de casos de uso do sistema.
A seguir serão explicados, detalhadamente, os elementos que compõem um modelo de casos de uso.
O diagrama de casos de uso, Figura 8, é uma representação pictórica do sistema sendo construído e são compostos de atores, de casos de uso e de relacionamentos.
Os diagramas de casos de uso são muito úteis para a visualização do contexto geral do sistema.
A notação utilizada neste trabalho é a proposta por a UML (Unified Modeling Language) e consiste de elipses, setas e bonecos de palito.
As elipses e setas mostram o empacotamento e a decomposição dos casos de uso, não seus conteúdos.
Um ator pode ser uma pessoa, uma companhia ou organização, um programa de computador ou um sistema computacional (hardware, software ou ambos).
O importante é saber que um ator é qualquer coisa que tem um comportamento.
Ele representa o usuário do sistema.
Um ator primário é aquele que utiliza o sistema diretamente.
Este tipo de ator realiza uma ou mais das principais tarefas do sistema e é responsável por as informações inseridas e recuperadas do sistema em modelagem.
Um ator secundário é aquele que supervisiona e mantém o sistema.
Desta forma, só existem atores secundários caso exista ao menos um ator primário.
É um ator externo que provê um serviço ao SsD3.
É importante considerar que um ator pode ser primário num caso de uso e secundário em outro.
Através da generalização de atores, podem ser definidos papéis para os usuários do sistema, como mostrado na Figura 9.
SsD: Sistema sob discussão.
Vários autores propõem diversas questões para a identificação de atores.
A Tabela 1m ostra estas questões:
Os casos de uso servem como uma linha base a ser seguida durante todo o desenvolvimento do sistema e são um resultado obtido através da análise da especificação dos requisitos.
Segundo um caso de uso é uma seqüência de ações que um sistema realiza para gerar um resultado observável de valor para um ator em particular, sabendo- se que um ator é alguém ou alguma coisa de fora de o sistema que interage com ele.
Um caso de uso deve ser bastante detalhado, já que seu detalhamento será usado por todas as outras partes do desenvolvimento.
Porém este detalhamento deve ser caixa-preta, ou seja, não deve conter informações internas do sistema.
Após os atores terem sido identificados, pode- se passar para a identificação dos casos de uso.
Da mesma maneira que para os atores, são propostas diversas questões para facilitar esta identificação, mostradas na Tabela 2.
Os casos de uso se relacionam uns com os outros através dos relacionamentos de extensão (extend), de inclusão (include) e de generalização.
Um caso de uso base inclui outro caso de uso se um passo de ação no caso de uso base chama o nome do caso de uso incluído.
As associações de são usadas para evitar a duplicação de passos através de múltiplos casos de uso e, também, como uma estratégia de reuso para texto de casos de uso.
Um caso de uso de extensão estende um caso de uso base indicando qual seu caso de uso base e definindo as circunstâncias sob as quais ele o interrompe.
É importante considerar que o caso de uso base não menciona o de extensão.
Desta forma, adiciona- se comportamento ao caso de uso sem mudar o base.
A associação de generalização, por sua vez, é usada quando um caso de uso especializa um outro caso de uso mais geral, ou seja, diz- se que o caso de uso é &quot;um tipo de «outro caso de uso Segundo a UML um relacionamento de generalização entre casos de uso implica que o caso de uso filho contém todos os atributos, seqüências de comportamento, e pontos de extensão definidos no caso de uso pai, e participa de todos os seus relacionamentos.
A especificação de casos de uso tem como objetivo descrever o que eles fazem.
Apesar de normalmente esta especificação ser feita em linguagem natural, as linguagens formais também podem ser utilizadas.
Fala- se de caso de uso caixa branca quando um caso de uso é utilizado para documentar a cooperação entre as partes do sistema, quando os componentes são nomeados ou quando se consegue perceber o comportamento interno do sistema.
Entretanto, este trabalho está focado nos casos de uso caixa-preta, aqueles dentro de os quais não se pode ver.
Este tipo de caso de uso não menciona qualquer componente dentro de o SsD, ou seja, não especifica detalhes de interface ou detalhes de baixo nível na execução do sistema.
Este trabalho faz uso da linguagem natural não só para a especificação dos requisitos na SRS mas também para a especificação dos casos de uso, visto que facilita a compreensão por todos os stakeholders.
Diversos formulários(,,) são propostos na literatura para este fim, com o objetivo de estabelecer algum tipo de estruturação.
Todos eles utilizam características comuns, por vezes representadas com nomes diferentes, que são necessárias para o entendimento dos casos de uso.
O padrão proposto por Cockburn será utilizado como base para a especificação dos casos de uso desta proposta.
Seus campos são descritos a seguir.
Cockburn propõe que este nome seja escrito com uma pequena frase de verbo ativo.
Observa- se que a especificação dos casos de uso é de extrema importância para as demais fases do processo de desenvolvimento, já que é utilizada durante a elaboração de outros diagramas e, também, para a elaboração dos casos de teste.
Apesar de serem encontrados, na literatura, diversos trabalhos que fornecem &quot;melhores maneiras «para o desenvolvimento dos casos de uso, nenhum apresenta uma relação direta entre o documento de especificação de requisitos e o modelo de casos de uso.
Apenas indicam qual seria a melhor forma de realizar determinada atividade, sem indicar de onde as informações podem ser adquiridas.
De acordo com Ramesh, rastreabilidade de requisitos é «uma característica de sistemas em os quais requisitos são claramente ligados às suas fontes e aos artefatos criados durante o ciclo de vida de desenvolvimento do sistema baseado nesses requisitos.
Rastreabilidade de requisitos estabelece um elo entre mudanças das necessidades dos usuários e evolução dos sistemas de computação, sendo uma base para o gerenciamento do conhecimento organizacional».
Em a pré-rastreabilidade tem- se a rastreabilidade forward-to (para frente ­ para), que liga documentos obtidos no processo de elicitação a requisitos relevantes, e a rastreabilidade backwardfrom (para trás ­ de), que liga os requisitos às suas fontes.
Em a pós-rastreabilidade tem- se a rastreabilidade forward-from (para frente ­ de), que liga os requisitos a artefatos de desenho e implementação e a rastreabilidade backward-to (para trás ­ para), que liga os artefatos de desenho e implementação de volta aos requisitos.
A rastreabilidade é vista como uma técnica fundamental no apoio às diversas atividades do projeto, assegurando que sistemas e software estão em conformidade às mudanças dos requisitos, entretanto é citada como uma área problema por os desenvolvedores e.
Apesar de se saber que o esforço necessário para a aplicação da rastreabilidade pode ser elevado, como aumento de custo ou tempo, sem a utilização de mecanismos deste tipo podem surgir inconsistências durante o processo de adição, remoção ou modificação de requisitos.
De acordo com, os requisitos não podem ser efetivamente gerenciados sem rastreabilidade.
Além disso, o rastreamento de requisitos é reconhecido como um importante pré-requisito para o desenvolvimento de sistemas com alta qualidade, pois ajuda a manter consistentes um conjunto de informações relacionadas do processo de desenvolvimento.
Diversos trabalhos relacionam a rastreabilidade como fator de qualidade para o desenvolvimento de software,,, e.
A fim de manter um sistema de qualidade é necessário aplicar rastreamento de requisitos no processo de desenvolvimento, já que os requisitos originam a produção de outros artefatos intermediários que, ao final do desenvolvimento, deverão estar de acordo com as funcionalidades oferecidas no produto final.
Desta forma, é importante que os relacionamentos entre os requisitos e os artefatos sejam gerenciados, a fim de facilitar a manutenção e verificação do sistema.
Em são apresentadas várias situações em que a rastreabilidade pode auxiliar gerentes e desenvolvedores.
As situações mais importantes, no contexto deste trabalho, são as seguintes:
Os elos de rastreabilidade indicarão quais artefatos, além de o código, deverão ser revistos para identificação do erro.
Em este trabalho, esta situação é considerada quando for verificado, por exemplo, que um erro parte de determinado caso de uso.
Com isto, seu requisito de origem poderá ser identificado.
û Validação:
Em esta situação a rastreabilidade permite mostrar se a implementação atende ao conjunto de requisitos acordados entre clientes e desenvolvedores.
Em este trabalho, esta situação é considerada para verificar, por exemplo, se todos os requisitos estão compreendidos no modelo de casos de uso.
A existência de elos de rastreabilidade possibilita identificar as origens de cada funcionalidade presente no sistema.
A rastreabilidade, neste trabalho, será usada para garantir que todos os requisitos expressos na SRS estejam englobados no MCU.
O inverso também é verdadeiro, já que se, por ventura, forem encontradas dúvidas na especificação de determinado caso de uso estas podem ser sanadas na descrição de seu requisito de origem.
Outra aplicação importante deste conceito se dará no momento em que forem realizadas alterações no documento de especificação de requisitos.
Por intermédio da rastreabilidade, apresentada no modelo proposto, será possível alcançar todos os elementos (representados no modelo através das classes) impactados quando de esta alteração.
Em este trabalho, são consideradas as alterações correspondentes à inclusão, exclusão e substituição de requisitos.
É importante considerar que, como em, a alteração de um requisito se caracteriza quando existe mudança em sua funcionalidade.
Este capítulo apresentou conceitos referentes à engenharia de requisitos e à rastreabilidade objetivando demonstrar a importância de seu uso para as organizações de desenvolvimento de software.
Através deste estudo, percebeu- se que manter o documento de especificação de requisitos e o modelo de casos de uso consistentes entre si durante todo o processo de desenvolvimento é uma forma de permitir que o resultado represente uma solução para o sistema proposto.
Em este contexto, o próximo capítulo apresenta os trabalhos relacionados ao tema de pesquisa.
3 Estudos Relacionados Após a pesquisa bibliográfica realizada, foram encontrados alguns trabalhos relacionados ao tema de pesquisa apresentado nesta dissertação.
Este capítulo apresenta- os, juntamente com suas principais características.
O trabalho apresentado por Belgamo e Fabbri propõe uma técnica para construção do modelo de casos de uso e para análise do documento de requisitos que surgiu com a idéia de reduzir o grau de subjetividade e a necessidade de experiência do projetista.
Seu objetivo principal é auxiliar na construção de modelos de casos de uso, fornecendo procedimentos sistemáticos que direcionem a modelagem e permitam que o modelo construído não apresente tanta variação se desenvolvido por diferentes pessoas.
À medida que o modelo é construído, essa técnica também propicia condições de inspecionar o documento de requisitos (Dr).
TUCCA (Technique for Use Case model construction and Construction-based Analysis) é composta por duas técnicas de leitura:
AGRT (Actor Goal Reading Technique) e UCRT (Use Case Reading Technique) cujos propósitos são, respectivamente, determinar os atores do sistema e seus objetivos e determinar o modelo de casos de uso.
Ambas as técnicas são utilizadas por meio de passos que dão suporte à construção do MCU e incorporam, também, uma revisão do documento de requisitos.
TUCCA utiliza por padrão a SRS da IEEE como artefato básico para ambas as técnicas.
Porém, nem todas as seções da SRS são necessárias, a premissa é de que se a SRS incluir as seções Definições, Funções do Produto, Características do Usuário, Requisitos Funcionais e Requisitos Não-Funcionais já é possível a aplicação da técnica.
Contudo o campo &quot;Requisitos NãoFuncionais «não faz parte do modelo sugerido em.
Aparentemente este campo foi definido para facilitar a aplicação da técnica, entretanto, não se pode dizer que ele é proposto na srs da IEEE.
Inicialmente a técnica AGRT recebe como entrada o Dr e através de algumas diretrizes tem como saída um formulário (FAO) com uma lista de atores e seus objetivos.
Em esta lista são feitas algumas manutenções como:
Inclusão de objetivos e atores esquecidos e exclusão de redundâncias.
A técnica UCRT, por sua vez, tem como entrada o Dr e o FAO gerado e, através da aplicação de diretrizes, tem como saída o diagrama de casos de uso, as especificações dos casos de uso e um relatório de discrepâncias que conterá inconsistências encontradas durante a aplicação das técnicas.
O trabalho apresenta considerações importantes para identificação de atores e objetivos em busca de encontrar os casos de uso do sistema.
Porém apenas cita que existem sub-passos a serem aplicados para a especificação detalhada destes casos de uso.
Outro aspecto identificado nesta pesquisa foi a maneira como o requisito está descrito.
O trabalho não se preocupa em definir um padrão de escrita para os requisitos, o que pode fazer com que a técnica tenha um desempenho diferente se os requisitos não forem escritos de maneira semelhante aos do estudo de caso apresentado em.
Embora tais limitações tenham sido identificadas, este trabalho contribuiu para esta pesquisa no sentido de definir alguns relacionamentos e também na definição de procedimentos para utilização do processo proposto.
O estudo de Somé apresenta uma abordagem para dar suporte aos casos de uso, baseando- se na elicitação, clarificação, composição e simulação dos requisitos.
Oferece uma forma restrita de linguagem natural para casos de uso, dependente de contexto, e uma derivação automatizada da especificação.
O modelo de domínio é usado para capturar os conceitos do domínio relevantes ao contexto, bem como as definições das operações de pré e pós-condições em paralelo com os casos de uso.
Este trabalho considera como base o template proposto por Cockburn, onde os casos de uso são descritos usando um texto estruturado.
Não faz referências ao uso de documentos de requisitos, porém apresenta interessantes maneiras de representar condições e operações fazendo uso de uma estrutura de linguagem natural buscando, com isso, evitar alguns problemas referentes desta área.
Como o objetivo principal da pesquisa de Somé não é simplesmente a descrição dos casos de uso, alguns detalhes importantes como a representação dos requisitos nãofuncionais são deixados de lado.
Sabendo- se que os casos de uso possuem como componentes básicos condições e operações, é proposta uma forma de linguagem natural para descrição concreta destes elementos.
Para as condições é proposta uma gramática contendo explicações sobre o que são condições, o que elas descrevem e outras definições.
Para as operações de casos de uso é proposta, também, uma gramática que se refere a algumas definições feitas anteriormente na gramática para condições.
Além disso, o trabalho apresenta uma sintaxe abstrata para os casos de uso, fazendo uso da UML, onde são distinguidos dois tipos de descrição que correspondem aos dois tipos de casos de uso:
Casos de uso normais e casos de uso de extensão.
Entretanto, como seu objetivo principal é a derivação da máquina de estados, mais detalhes sobre as especificações em si não são considerados.
O trabalho de Somé contribuiu para a opção feita em utilizar uma estrutura de especificação de requisitos em linguagem natural.
Isto facilita a compreensão por todos os interessados e ao mesmo tempo oferece certa formalidade, já que a representação é estruturada.
Além disso, a sintaxe abstrata para os casos de uso, contribuiu para a definição do modelo conceitual do MCU, desenvolvido no decorrer de esta pesquisa.
O trabalho apresentado por· mia· ek propõe uma notação para cenários de casos de uso e relata sobre a necessidade de diferentes papéis nos projetos de desenvolvimento de software.
De acordo com o autor, alguns papéis requerem sentenças simples e informais com referências ao vocabulário de domínio.
Outros papéis necessitam de uma relação e de um mapeamento com elementos de interface de usuário ou mensagens circulando dentro de o sistema de desenvolvimento.
Com isso, o autor conclui que estes requisitos contraditórios sugerem que a notação dos casos de uso deve ser uma composição de varias notações com regras precisamente definidas para sua transformação.
De acordo com o descrito acima, o trabalho apresenta quatro notações baseadas em estrutura de texto, diagramas de interação e diagramas de atividades.
Além disso, é apresentado um mapeamento entre elementos específicos destas notações e um mapeamento com os elementos dos modelos de design.
O trabalho faz uso de elementos previamente definidos na UML como a notação de Caso de Uso, Diagrama de Atividades, Casos de Teste e Gráficos de Seqüência.
Ainda, apresenta um metamodelo para a representação de texto estruturado, Figura 12, que foi utilizado na composição do modelo conceitual do MCU.
Além disso, o autor propõe um mapeamento entre alguns elementos deste metamodelo e os diagramas de atividade e os nodos de decisão.
De acordo com ele, as instâncias da classe SPO (PO) Sentence serão mapeadas numa ação e cada instância da classe Conditional sentence será mapeada num nodo de decisão do diagrama de atividades.
Afirma, ainda, que todos os cenários representados textualmente serão mapeados numa ou mais atividades que conterão ações e nodos de decisão.
A pesquisa apresentada em mostra uma forma interessante de estruturação para os cenários dos casos de uso e contribuiu para o desenvolvimento do modelo conceitual do MCU, como é apresentado na seção 6.2.
Toranzo apresenta uma proposta que visa melhorar o rastreamento de requisitos.
As estratégias apresentadas são:
Fornecer uma classificação das informações a serem rastreadas;
Um metamodelo;
Um modelo intermediário de requisitos que possui muitos dos artefatos que geralmente são encontrados nos modelos de rastreamento;
E um processo que reúne e aplica as três estratégias anteriores.
Os dois últimos níveis são os que mais se enquadram no contexto deste trabalho, pois tratam de ligar tarefas a requisitos e apresentam informações relacionadas aos diversos artefatos gerados no processo de desenvolvimento.
O metamodelo proposto apresenta classes que classificam, por exemplo, os tipos de elementos, relacionamentos e associações a serem utilizadas.
São definidos seis tipos de elos que dão suporte a rastreabilidade:
Satisfação, recurso, responsabilidade, representação, alocado e agregação.
Além disso, a proposta compreende um modelo intermediário de rastreamento, Figura 14, que consolida observações da prática, de estudos de caso e da aplicação das estratégias de classificação das informações e o metamodelo de rastreabilidade.
A idéia é que este modelo possa ser encarado como base para discussão e definição de um modelo de rastreabilidade focado num projeto em particular.
Alguns relacionamentos e dependências, apresentados no modelo de rastreabilidade proposto nesta dissertação, foram identificados com o auxílio dos relacionamentos apresentados no modelo intermediário de Toranzo.
O trabalho apresentado em propõe um modelo para rastreabilidade que possibilita a captura de informações relacionadas a stakeholders (interessados), fontes (documentos que remetem a origem dos requisitos) e objetos (objetos do produto ou do processo).
Os autores agrupam os elos de rastreabilidade em duas categorias:
Relacionados ao produto e relacionados ao processo.
A primeira representa os elos que descrevem propriedades e relacionamentos dos objetos, onde estes elos são subdivididos em elos de satisfação e de dependência.
A segunda representa os elos relacionados ao histórico de ações executadas no próprio processo e estes são subdivididos em elos de evolução e de rationale.
A Figura 15 apresenta o metamodelo de rastreabilidade de requisitos proposto por e apresenta a distinção dos três níveis da rastreabilidade.
Os elos de satisfação buscam assegurar que os requisitos sejam atendidos por o sistema, ou seja, a cada requisito foi associado um componente que deverá atender- lo.
Os elos de evolução registram relacionamentos que levam de objetos existentes para objetos novos ou modificados.
O propósito dos elos de rationale é representar as motivações subjacentes aos objetos existentes ou documentar as razões para a evolução.
E, finalmente, os elos de dependência têm por propósito apoiar o gerenciamento de dependências entre objetos, frequentemente impostas por restrições de recurso, de competências ou de compatibilidade, sendo úteis para registrar a composição e hierarquia dos objetos e apoiar o gerenciamento do impacto das alterações num objeto sobre os objetos que de ele dependem.
Os elos de dependência são utilizados no modelo de rastreabilidade, proposto nesta dissertação, através das relações de dependência da UML e apresentam, também, as características de impacto propostas em.
Como visto, existem diversos trabalhos envolvidos com o tema de pesquisa, porém não diretamente ligados a ele.
Foram encontrados poucos trabalhos relacionando o documento de especificação de requisitos aos modelos de casos de uso.
Em este contexto foi apresentado o trabalho proposto por Belgamo.
Os trabalhos de Somé e· mia· ek apresentam, também, informações relevantes sobre o MCU.
Apesar de serem encontrados na literatura vários trabalhos relacionados à rastreabilidade de requisitos, nenhum de eles integra os elementos da SRS com os elementos do MCU.
Em sua maioria, os trabalhos apresentam modelos, metamodelos e relacionamentos referentes aos artefatos de todo o processo de desenvolvimento de software.
Em este sentido, a única relação indicada é a de requisitos com seus casos de uso.
E, por exemplo, são alguns dos trabalhos estudados neste contexto e, apesar de não estarem diretamente focados no assunto desta proposta, os metamodelos e relacionamentos apresentados por eles foram úteis na definição dos elos de rastreabilidade do modelo.
O próximo capítulo apresenta o método de pesquisa utilizado neste trabalho bem como considerações importantes sobre seu desenvolvimento.
Após ampla revisão teórica, percebeu- se que o problema apresentado ainda não foi abordado sob a mesma perspectiva.
Assim, esta pesquisa se caracteriza como um estudo predominantemente exploratório.
Foram utilizadas duas metodologias de apoio:
Revisão bibliográfica e o estudo de caso.
Além disso, foi realizada a aplicação do modelo proposto.
A pesquisa bibliográfica é um método que possibilita um levantamento dos trabalhos realizados anteriormente sobre o mesmo tema estudado no momento, além de fornecer subsídios para a revisão da literatura do projeto ou trabalho.
O estudo de caso é um método que pode ter por finalidade &quot;entender como e por que funcionam as coisas».
Por fim, a aplicação tem o objetivo de validar a proposta através de um exemplo prático.
A primeira etapa desta pesquisa foi a pesquisa bibliográfica, que teve como objetivo adquirir conhecimento e base teórica sobre os assuntos diretamente abordados neste trabalho.
Assim, foram realizados estudos detalhados sobre requisitos, abordando os documentos de especificação de requisitos, os modelos de casos de uso, a rastreabilidade e trabalhos relacionados ao contexto desta pesquisa.
A partir de a base teórica, partiu- se para a segunda etapa, onde foram definidos os modelos conceituais da SRS e do MCU.
A partir de eles, foi desenvolvido um modelo de integração identificando as relações entre os elementos dos dois primeiros modelos desenvolvidos.
Tendo os resultados da segunda etapa, pode- se partir para a terceira etapa.
Em esta, foi realizado um estudo de caso numa organização de desenvolvimento de software, onde se buscou avaliar a aplicabilidade da proposta, considerando que a prática realizada na empresa pudesse contribuir com a teoria estudada e com o modelo proposto, o que realmente aconteceu.
Com o estudo de caso concluído, foi possível aprimorar o modelo de integração, chegando a construção de um modelo de rastreabilidade e de um processo de apoio para sua realização.
Por fim, a quarta etapa consistiu na consolidação da proposta, que se deu na aplicação do processo de rastreabilidade, fazendo uso do modelo, numa SRS e em seus respectivos casos de uso.
Este estudo contribuiu para a avaliação da proposta e após ter sido realizado, partiu- se para o protótipo da ferramenta, que atualmente está em fase de desenvolvimento.
Todas as etapas descritas acima podem ser visualizadas no desenho de pesquisa, apresentado na Figura 16.
A proposta aqui apresentada considera que o documento de requisitos, artefato inicial deste trabalho, está completo, ou seja, abrange todas as funcionalidades desejadas por os clientes e por todos os stakeholders envolvidos no projeto.
Com base na literatura e no estudo de caso, foi proposta a adaptação de um template para o documento de especificação de requisitos (SRS) que deve ser utilizado contendo as informações sugeridas neste trabalho.
Com base neste template, deu- se continuidade à pesquisa, onde foi proposto um modelo de rastreabilidade e um processo para sua aplicação.
É importante considerar que o modelo de rastreabilidade trará mais benefícios quando os documentos da SRS e do MCU estiverem de acordo com os padrões estabelecidos neste trabalho.
Entretanto, com um mínimo de organização nestes documentos já é possível sua aplicação.
Outro ponto a ser considerado é que na segunda etapa desta pesquisa, foram desenvolvidos, em conjunto com o grupo de pesquisas em engenharia de requisitos do CDPe (Centro de Desenvolvimento Dell/PUCRS), os modelos conceituais da SRS, do MCU e um modelo de integração.
Estes modelos serviram como ponto inicial para o restante do desenvolvimento deste trabalho e à medida que a pesquisa foi evoluindo, eles foram sendo adaptados conforme as necessidades identificadas na literatura e no estudo de caso.
Estes ajustes foram discutidos e avaliados com pesquisadores e colegas do PPGCC durante o seminário de andamento e durante todo o ciclo de pesquisas envolvendo esta pesquisa de mestrado.
A seguir serão apresentadas algumas considerações sobre os modelos inicialmente desenvolvidos neste trabalho, apresentados em, e no Apêndice I. Estes modelos foram desenvolvidos como ponto de partida para alcançar as versões finais, que serão apresentados na seção 6.
A partir destes modelos foi desenvolvido, também, um modelo para a avaliação da qualidade da tradução dos requisitos para os casos de uso, que pode ser conferido no artigo apresentado em.
A partir de os campos e características apresentadas na documentação da SRS da IEEE foi construído seu modelo conceitual.
A decisão da utilização deste modelo de especificação de requisitos se deu devido a sua ampla utilização no mercado e, também, devido a sua grande aceitação no meio acadêmico.
Os elementos e seus relacionamentos, indicados nas práticas recomendadas para especificação de requisitos definidas por a IEEE, foram representados num diagrama de classes Schimidt coloca que fornece diretrizes detalhadas das informações que devem estar contidas em cada uma das seções da SRS, porém afirma que, ainda assim, existem dúvidas sobre quais informações detalhar em determinadas seções.
Um ponto comum de confusão, de acordo com Schimidt, é a diferença entre a seção &quot;Propósito «e a seção &quot;Escopo», subseções da &quot;Introdução».
Segundo ele, a primeira deve delinear a finalidade da SRS e identificar sua audiência enquanto a segunda deve identificar o software em questão, explicando o que ele fará, descrevendo sua aplicação, seus benefícios e objetivos.
Outra possível confusão geralmente ocorre em relação a as informações presentes nas seções 2 e 3, já que ambas devem incluir informações sobre as interfaces, funcionalidades e restrições do software.
Entretanto a seção 2 (Descrição Geral) não especifica os requisitos, apenas dá uma base destes que serão detalhados na seção 3 da SRS (Requisitos Específicos).
Assim, o modelo conceitual da SRS foi inicialmente desenvolvido contendo todos os elementos indicados por a documentação da IEEE.
Os elementos que fizeram parte do modelo inicial podem ser vistos na estrutura apresentada na Figura 17.
Após ter sido realizado o estudo de caso, este modelo foi adaptado conforme as necessidades identificadas.
O modelo final pode ser conferido na seção 6.1.
De a mesma forma que no modelo anterior, este foi desenvolvido em conjunto por o grupo de Engenharia de Requisitos do Centro de Desenvolvimento e Pesquisas DELL/ PUCRS (CDPe).
Este modelo teve como base o template de casos de uso de Cockburn, onde para cada campo foi definida uma classe, responsável por armazenar as devidas informações dos casos de uso.
As pesquisas realizadas em, e, contribuíram para a definição da utilização deste template e, também, para a identificação das informações que deveriam estar presentes em cada classe do modelo.
Um ponto importante é que a seção Cenário de sucesso principal, é onde será contada a história sobre o que o sistema entrega como resultado.
Antes de tentar identificar todas as exceções ou condições de falha, deve ser mostrado como o sistema funciona em caso de sucesso.
Este tipo de cenário pode gerar exceções, o que ocasiona a criação de um Fluxo alternativo para seu tratamento.
Tanto o Cenário de sucesso principal quanto o Fluxo alternativo são compostos de passos que explicam sua execução.
O nível indicado na especificação é considerado como sendo sempre &quot;Objetivo de Usuário», conforme explicado anteriormente na seção 2.5.
Outros detalhes sobre a adaptação do modelo, bem como a apresentação do modelo final, serão vistos na seção 6.2.
O modelo de integração é resultado de uma análise realizada sob os modelos conceituais da SRS e do MCU.
Através de estudos e pesquisas realizadas em artigos, relatórios e documentos, foram identificadas as relações entre os elementos de ambos os modelos para que fosse possível definir de onde poderiam ser retiradas, na SRS, as informações para as descrições dos casos de uso.
Cada elemento foi analisado individualmente e suas características foram sendo comparadas uma a uma para que fosse possível identificar as relações de umas com as outras.
Após amplas pesquisas e estudos sob exemplos e materiais teóricos encontrados na literatura, foram definidas as relações mostradas na Figura 19.
O desenvolvimento do modelo de integração se deu para que ficasse facilitada a construção do modelo de rastreabilidade.
A partir de os relacionamentos identificados neste modelo, foi possível verificar sua viabilidade de aplicação devido a o estudo de caso realizado e devido a sua aplicação em exemplos reais.
A explicação da origem e dos relacionamentos identificados para este modelo, podem ser vistos em, encontrado também no Apêndice 1.
Este capítulo apresentou o método de pesquisa utilizado bem como as etapas e considerações sobre sua evolução.
Em este sentido foram detalhadas as atividades iniciais realizadas para o desenvolvimento do modelo e do processo propostos.
Em o próximo capítulo é apresentado o estudo de caso realizado.
O estudo de caso teve como objetivo identificar características específicas relacionadas à documentação dos requisitos e os principais problemas enfrentados neste contexto, a fim de comparar e propor um modelo que englobasse tanto as características estudadas na literatura como a realidade encontrada nas empresas.
Com este propósito foram realizadas análises, através de pesquisa documental, em sete documentos de especificação de requisitos (SRS).
A seção 5.1 apresenta a descrição do estudo realizado.
A seção 5.2 apresenta o roteiro das atividades.
A seção Quanto a o processo de pesquisa, o estudo de caso foi realizado em três etapas.
A primeira etapa foi a de planejamento, onde foi desenvolvido o roteiro para realização do estudo de caso.
Para isto foram realizadas três atividades.
Primeiro foi realizado um levantamento dos objetivos do estudo e, com isso, foram relacionados tópicos a serem analisados.
Em seguida foi realizada uma reunião entre a pesquisadora e o professor orientador para fins de avaliação dos tópicos.
E, por fim, foi definido o roteiro para o estudo de caso.
A segunda etapa do estudo de caso consistiu na realização da análise da documentação.
Esta etapa, bem como todas as outras, foi realizada seguindo o roteiro estipulado.
Foram analisados sete SRS com o objetivo de identificar os elementos presentes nestes documentos e a completude de suas informações, buscando conclusões sobre as possibilidades de geração de uma especificação de casos de uso de qualidade a partir de eles.
Foi realizada uma análise em cada seção da SRS a fim de identificar possíveis falhas, falta de informações e/ ou características especificadas em locais não adequados do documento.
Ainda nesta etapa realizou- se um estudo considerando as SRS e seus respectivos casos de uso.
Este estudo foi realizado para identificar a existência ou não de informações incompletas e/ ou apenas presentes num dos documentos, visando encontrar subsídios que indicassem se o caso de uso estava realmente de acordo com a SRS e se todos os requisitos apresentados na SRS estavam também compreendidos no modelo de casos de uso.
A última etapa do estudo de caso consistiu na análise dos resultados adquiridos através da realização da etapa dois deste estudo.
Em esta etapa todos os resultados das análises feitas em cada SRS foram analisados por a pesquisadora e um relatório preliminar foi apresentado ao orientador.
Ao todo foram realizadas três reuniões entre o orientador e a pesquisadora para discussão dos resultados a fim de identificar as adaptações que seriam realizadas no modelo, inicialmente baseado na literatura.
Como resultado foi redigida esta seção que apresenta os resultados obtidos.
O estudo de caso foi desenvolvido numa unidade de desenvolvimento de software de uma organização de grande porte.
A organização possui escritórios em mais de 34 países em todo o mundo, incluindo o Brasil.
Segundo informação fornecida por a própria organização, possui em torno de 50.000 colaboradores em todo o mundo.
A unidade onde o estudo foi aplicado está localizada na cidade de Porto Alegre, estado do Rio Grande do Sul, Brasil.
Ela possui mais de 400 colaboradores trabalhando em projetos que atendem as necessidades da área de Ti da empresa.
Em esta pesquisa foram analisadas 7 (sete) SRS, chamadas doravante de SRS1, SRS2, SRS3, SRS4, SRS5, SRS6 e SRS7.
As SRS tratam de aspectos necessários para o desenvolvimento dos projetos e especificam as funcionalidades necessárias para o desenvolvimento do software.
As informações contidas nas SRS são oriundas de documentos, sem nenhuma espécie de padronização, escritos por analistas de outra unidade da empresa.
De acordo com os analistas da unidade participante do estudo de caso, as informações presentes nestes documentos quase nunca contemplam todas as informações necessárias para o desenvolvimento das SRS.
Normalmente as dúvidas são esclarecidas por telefone ou diretamente com os clientes.
A primeira etapa do estudo de caso teve como objetivo levantar informações referentes as SRS estudados.
Sendo assim, foram definidas algumas questões a serem respondidas durante o andamento das pesquisas, representando o roteiro das atividades.
Para este roteiro foram definidas três fases:
Análise individual da SRS, análise geral das SRS e análise dos resultados.
As fases de análise individual e geral das SRS foram utilizadas para a realização da etapa 2 do estudo de caso que corresponde à análise da documentação.
A fase de análise dos resultados corresponde à etapa 3 deste estudo e foi realizada após todas as etapas anteriores do roteiro terem sido finalizadas.
Os resultados obtidos após a análise são apresentados na seção 5.3.
Para a análise individual da SRS, buscou- se sanar alguns tópicos levantados durante as pesquisas realizadas.
Os tópicos são apresentados em forma de questões, apresentadas no Apêndice II.
Após ter sito realizado o estudo em todas as SRS, foram realizadas outras questões, também apresentadas no Apêndice II.
Foram analisadas 7 (sete) SRS contendo, em média, 10 requisitos funcionais e 17 requisitos não-funcionais, considerando os requisitos não-funcionais específicos.
Com relação a os casos de uso, observou- se que todos os requisitos funcionais em todas as SRS estavam relacionados a 1 (um) caso de uso, ou seja, relação de 1 pra 1 entre requisitos funcionais e casos de uso.
Nem todas as SRS apresentaram os requisitos em níveis diferenciados, o que dificultou, algumas vezes, a identificação do tipo de requisito especificado.
Após terem sido finalizadas todas as atividades, presentes no roteiro deste estudo de caso, todos os resultados foram analisados e discutidos e, a partir de isto, tiraram- se algumas conclusões, apresentadas na seção 5.3.
Em um primeiro momento, buscou- se, através da revisão bibliográfica, a determinação de melhores práticas para escrita de documentos de requisitos e de casos de uso.
Foram analisadas quais as informações importantes, de acordo com a literatura, deveriam estar presentes nos documentos de especificação de requisitos.
Além disso, foram analisadas, também, as informações indispensáveis para a composição de um modelo de casos de uso e para sua descrição.
Através deste estudo, buscou- se levantar a completude das informações analisadas nos documentos oferecidos por a empresa participante do estudo de caso e, também, identificar as diferenças entre eles, tendo em vista comparar as informações levantadas na pesquisa bibliográfica com as informações adquiridas através da realização do estudo de caso.
Sabendo- se que a prática nem sempre corresponde à teoria ideal, o estudo de caso buscou identificar se as práticas realizadas por a empresa correspondiam ao levantado na literatura.
Sendo assim, os próximos tópicos apresentam as conclusões alcançadas com o estudo de caso. Conforme
já citado no decorrer deste texto, existem vários padrões de escrita para SRS e estes podem e devem ser adaptados conforme as necessidades das empresas.
Porém, nem sempre as organizações optam por um padrão ideal ou que, pelo menos, compreendam as informações mínimas para um resultado de sucesso.
A empresa analisada neste estudo de caso, utiliza como referência o documento de especificação de requisitos da IEEE, apresentado em.
Porém, não são consideradas todas as seções deste documento e algumas, importantes, são deixadas de lado.
A Figura 20 mostra o padrão de SRS proposto por a IEEE e o padrão de SRS utilizado por a empresa.
A Tabela 3 apresenta as relações entre as seções correspondentes nos dois documentos.
Estas relações foram identificadas com base na bibliografia estudada e nas informações levantadas no estudo de caso.
Realizando uma análise detalhada na tabela de relações apresentada acima, pode- se perceber que a maioria das seções sugeridas por a IEEE e são utilizadas por a empresa.
Porém, algumas são desconsideradas.
As seções, propostas por a IEEE e não utilizadas por a empresa, bem como as seções adicionadas por a empresa, em relação a o padrão IEEE são apresentadas, respectivamente, na Tabela 4 e na Tabela 5.
Com base nas tabelas acima, percebe- se que algumas seções importantes, considerando o estudo realizado e o modelo de integração desenvolvido anteriormente, não estão inseridas no documento.
As principais seções desconsideradas no documento da empresa são:
Funções do produto, Respostas a as situações anormais e Processamento.
A seção &quot;Funções do produto «deve conter uma relação detalhada de todas as funções do sistema, contendo todos os seus objetivos e todas as informações que se fizerem necessárias para um bom entendimento sobre o produto.
A seção &quot;Respostas às situações anormais «define todas as possibilidades de exceção na execução de um determinado requisito.
A seção &quot;Processamento «descreve todas as funções realizadas por o sistema em resposta a uma entrada ou em suporte a uma saída.
Em esta seção devem estar escritas todas as informações relacionadas às entradas.
Em o estudo de caso, pôde- se perceber que as funcionalidades do produto são apresentadas, apenas, na descrição do requisito funcional, apresentada na seção &quot;Introdução/Propósito da feature «do padrão da empresa, não existindo outras seções que contextualizem sobre o objetivo do produto.
Como o requisito é escrito de uma forma padronizada, nem sempre engloba todas as informações necessárias para o entendimento da funcionalidade e se englobar pode significar que ele esteja fora de o padrão estipulado por a empresa, sendo que o padrão busca ser objetivo e claro.
Sendo assim, considera- se, com base na literatura e nos padrões estudados, que as seções acima descritas são fundamentais para os documentos de especificação de requisitos e devem estar presentes a fim de proporcionar que as informações ali contidas sejam mais abrangentes e mais compreensíveis no contexto do projeto como um todo.
Em a seção &quot;Funções do produto», por exemplo, baseando- se em Cockburn, sugere- se que seja criada uma lista &quot;ator x objetivo «que relacione todos os atores envolvidos, juntamente com seus objetivos, que devem ter sido detalhados anteriormente.
Esta abordagem também é adotada no trabalho apresentado por Belgamo.
As seções de &quot;Respostas às situações anormais «e &quot;Processamento «permitirão que as informações sejam melhor organizadas e separadas dentro de o documento.
Essas informações até podem ser encontradas nas SRS da empresa, contudo não são identificadas como tal e muitas vezes se encontram em locais inadequados e diferentes, dependendo do documento.
A seção «Seqüência de ação/reação, encontrada no padrão da empresa, geralmente apresenta a descrição de um caso de uso, correspondente a um requisito funcional.
Contudo, em alguns documentos podem ser encontrados, por exemplo, workflows ou textos descritivos explicando o funcionamento do produto.
Sugere- se que todas as informações referentes aos requisitos funcionais sejam escritas nas seções de Funções do produto, Requisitos funcionais, Entradas, Respostas a as situações anormais, Processamento e Saídas.
A principio, seria interessante que existisse um outro documento contendo o modelo de casos de uso do sistema contemplando todos os casos de uso, as relações entre eles e suas descrições De a mesma forma que para os documentos de especificação de requisitos, existem diversas propostas para o modelo de casos de uso e suas descrições.
Com base nas informações apresentadas por, e outros autores alcançou- se um vasto conhecimento teórico e, a partir deste conhecimento, buscou- se identificar as semelhanças e diferenças com a prática, através do estudo de caso.
Com base nos estudos realizados, percebeu- se que a empresa não adota um padrão de especificação de casos de uso e nem sempre utiliza estes documentos.
Considerando as SRS estudadas, a empresa faz uso da descrição dos casos de uso no mesmo documento de especificação de requisitos, na seção «Seqüência de ação/reação.
Em nenhum documento foi encontrado um modelo de casos de uso;
Em quatro documentos foram encontrados diagramas de casos de uso.
Apesar de não adotar um padrão para a descrição dos casos de uso, alguns campos são comumente utilizados nos documentos.
Considerando todas as SRS analisadas, os campos utilizados são:
Nome do caso de uso, Objetivo, Atores, Pré-condições, Pós-condições, Curso básico, Curso alternativo e Exceção.
A Figura 21 mostra o padrão para especificação de requisitos proposto por Cockburn e os campos, para descrição dos casos de uso, utilizados nos documentos da empresa.
Diferente do padrão de Cockburn, as descrições dos casos de uso apresentadas nos documentos analisados não apresentam uma padronização.
Cada campo é preenchido da maneira que o responsável considerar mais adequada.
A Tabela 6 apresenta as relações entre as seções correspondentes nas duas especificações.
Estas relações foram identificadas com base na bibliografia estudada e nas informações levantadas no estudo de caso.
Nota- se, por a tabela acima, uma relação dupla do campo &quot;Fluxo Alternativo «com os campos &quot;Curso alternativo «e &quot;Exceção».
Isto se explica por o fato de que nas especificações de casos de uso, apresentadas nos documentos analisados, a empresa, aparentemente, utiliza estes campos para objetivos diferentes.
O primeiro &quot;Curso alternativo «seria utilizado para apresentar as diversas maneiras de executar o caso de uso com sucesso, ou seja, outras opções de seguir o caminho de sucesso sem que seja a possibilidade apresentada no &quot;Curso Básico».
Já o segundo &quot;Exceção «seria utilizado para apresentar as condições em que o caso de uso poderia falhar.
Contudo, nestes documentos foram encontradas informações incorretas ou trocadas nestes dois campos mostrando, mais uma vez, a falta de um padrão.
Outro ponto analisado é a inexistência de uma relação com os passos apresentados no curso básico.
Tanto em &quot;Curso alternativo «como em &quot;Exceção «não são indicados os passos que o geraram.
Em este trabalho, optou- se, com base em Cockburn que não haja uma separação do fluxo alternativo em condições de sucesso ou falha, já que ele apresenta os pontos de extensão para o cenário de sucesso principal.
Apenas indicar o passo ao qual determinado fluxo se refere e especificálo corretamente já permite que as informações sejam compreendidas de maneira adequada.
As &quot;Pré-condições «são frases escritas, na maioria das vezes, no padrão da estrutura utilizada por a empresa.
Não existe uma relação com outros casos de uso.
Por exemplo, mesmo que uma précondição esteja diretamente ligada a outro caso de uso, esta relação não é apresentada.
As &quot;Póscondições «na maioria das vezes não são apresentadas.
Analisando a Figura 21 percebe- se que alguns campos não foram utilizados nos documentos analisados.
Estes campos podem ser vistos na Tabela 7.
O escopo do caso de uso, geralmente é o escopo do produto em desenvolvimento.
Sendo assim, o escopo estará implícito já que o documento dos casos de uso estará relacionado ao documento de especificação de requisitos.
A não ser que o nível das especificações de casos de uso fique claramente especificado num documento geral, ou em algum outro local de fácil acesso a todos os interessados, é importante que este esteja especificado no template.
A princípio o processo que está sendo desenvolvido propõe as especificações sempre no nível de usuários, conforme explicado anteriormente.
É importante que os interessados na execução do caso de uso estejam relacionados, para que se tenha uma noção sobre o contexto geral deste caso de uso e sobre quais os atingidos com sua execução.
As garantias mínimas são de ampla importância para o desenvolvimento de um caso de uso, já que em ela estarão relacionadas todas as garantias que os interessados terão se, por ventura, o caso de uso terminar sem que a transação seja totalmente concluída.
Outro campo importante é o acionador do caso de uso, que indica como este caso de uso é iniciado.
As variações tecnológicas e de dados expressam que há diversas maneiras do sistema fazer alguma coisa.
É diferente do fluxo alternativo, pois apenas são indicadas as possibilidades de execução de uma determinada ação.
Essas possibilidades podem estar relacionadas a outros casos de uso, caso exista esta necessidade.
Em as informações relacionadas devem estar descritas todas as informações adicionais que se fizerem necessárias, indicando requisitos não-funcionais e/ ou regras de negócio, por exemplo.
Sendo assim, seria interessante que a especificação de casos de uso incluísse os campos relacionados a fim de facilitar seu entendimento e de evitar a falta de informação.
Este capítulo apresentou o estudo de caso realizado numa organização de desenvolvimento de software.
Teve como objetivo analisar documentos de especificação de requisitos e casos de uso a fim de identificar semelhanças e diferenças entre as propostas da literatura e as aplicações práticas.
Este estudo contribuiu para o desenvolvimento do modelo e do processo propostos nesta dissertação.
O próximo capítulo apresenta o modelo proposto, juntamente com o processo e outros elementos importantes neste contexto.
Independentemente da natureza do projeto de software, o surgimento de novos requisitos e as mudanças dos requisitos existentes do sistema são inevitáveis.
Acrescentando- se a complexidade, o tamanho do sistema e a enorme quantidade de requisitos a gerenciar, fica claro que várias dificuldades irão surgir, tais como:
Manter consistentes todos os artefatos relacionados a um requisito quando de sua alteração, gerenciar quais os artefatos devem estar relacionados e completos quando de a inclusão de novos requisitos, garantir que o sistema implementado compreenda todos os requisitos e todas as informações previamente levantadas e documentadas.
Para evitar esses problemas existe a necessidade de gerenciar requisitos.
Para isto, o modelo proposto neste trabalho visa realizar a rastreabilidade entre o documento de especificação de requisitos e o modelo de casos de uso do sistema a fim de permitir a consistência entre seus elementos quando de a alteração de artefatos do documento de especificação de requisitos.
Este modelo busca oferecer possibilidades para que o sistema a ser desenvolvido compreenda todas as funcionalidades descritas no documento de especificação de requisitos e não mais do que o especificado.
Com isso, será possível permitir que o sistema resultante seja completamente aproveitado, reunindo todas as características necessárias para sua efetividade e satisfazendo todas as expectativas dos usuários.
Com sua utilização, é possível indicar se alguma funcionalidade, levantada no documento de requisitos, foi desconsiderada podendo gerar conflitos no resultado.
Inicialmente foram desenvolvidos os modelos conceituais da SRS, do modelo de casos de uso e de integração, apresentados no Apêndice I. Conforme explicado anteriormente, o objetivo do desenvolvimento destes modelos era ter um ponto de partida para iniciar o processo de rastreabilidade entre os documentos da SRS e do MCU.
Entretanto, estes modelos foram desenvolvidos de forma abrangente e totalmente baseados nos documentos propostos por, e.
Através das outras pesquisas e, também, do estudo de caso realizado encontrou- se a necessidade de efetuar algumas adaptações a fim de facilitar o processo de rastreabilidade.
Esta seção apresenta as adaptações realizadas no modelo conceitual da SRS e no modelo conceitual do MCU, a fim de compor um modelo de rastreabilidade específico para o processo proposto.
Também são apresentadas algumas considerações sobre a utilização do modelo de integração no auxílio à composição deste modelo.
A adaptação do modelo conceitual da SRS foi realizada com base no estudo de caso realizado, sempre tendo por base o apoio da literatura.
Após terem sido realizadas análises minuciosas em sete documentos de requisitos pôde- se concluir que algumas seções propostas por a IEEE e foram desconsideradas por a empresa que, por sua vez, adicionou outras seções a seu documento.
A fim de facilitar a aplicabilidade e a visualização do modelo de rastreabilidade, foco principal neste trabalho, optou- se por a adaptação do modelo conceitual da SRS com base no estudo de caso desenvolvido.
Assim sendo, foram mantidas as seções &quot;Funções do produto», Respostas às situações anormais &quot;e «Processamento «que são relacionadas nos documentos da IEEE e não consideradas por a empresa.
Por outro lado, passaram a ser considerados outros atributos de software adicionados por a empresa ao padrão do documento de requisitos que são &quot;Reusabilidade», &quot;Testabilidade», &quot;Eficiência», &quot;Flexibilidade», &quot;Interoperabilidade», &quot;Robustez «e &quot;Usabilidade».
As classes apresentadas no modelo conceitual da SRS representam os elementos indicados nas práticas recomendadas para especificação de requisitos de software, definidas por a IEEE e, e as associações entre estes elementos representam como eles estão relacionados.
Seus atributos foram identificados na descrição de cada elemento, encontradas em, e representam as informações referentes a cada um de eles.
A seguir é apresentada uma descrição de cada uma das classes e de seus atributos.
O nome das classes é representado por palavras em negrito e seus atributos por palavras em itálico.
RequisitosEspecificos e InformacoesSuporte.
û IntroducaoSRS:
A classe IntroducaoSRS representa a seção Introdução da SRS e contém informações que dão uma visão geral sobre o documento.
Mantém o atributo idIntroducão para armazenar o identificador da classe.
Em a SRS esta seção é composta de outras cinco seções:
Propósito, Escopo, Definições, Referências e Visão Geral representadas, respectivamente, por as classes Proposito, EscopoSRS, Definições, Referencias e VisaoGeral.
Abreviaturas que contém as definições de todos os termos, siglas e abreviaturas necessárias para interpretar apropriadamente a SRS.
Seu atributo idDefinicão mantém a identificação do A lista dento/ fora é apresentada por Cockburn como uma opção de sucesso na definição do escopo do documento, visto que, com ela, fica facilitada a identificação do que está dentro e o que está fora de o escopo de desenvolvimento.
Requisitos de Operação, Limites de Memória, Distribuição dos Requisitos, Requisitos de Adaptação de Local e Interfaces representados, respectivamente, por as classes FuncoesProduto, CaracteristicasUsuario, RestricoesGerais, SuposicoesDependencias, RequisitosOperacão, LimitesMemoria, DistribuicaoRequisitos, RequisitosAdaptacão e Interface.
Relaciona os atributos idAtor para manter uma identificação única para cada um de eles e nomeAtor que mantém seu nome.
Características do Usuário da SRS que descreve as características gerais dos usuários do sistema.
Para isto o atributo idUsuario é definido para manter a identificação do usuário, o atributo nome mantém o nome do usuário, o atributo nivel para manter o nível educacional do usuário, o atributo experiência para manter informações sobre as experiências do usuário e o atributo habilidade para descrever suas habilidades.
Suposições e Dependências da SRS que define os fatores que afetam os requisitos expressos na SRS como condições específicas de hardware.
O atributo idDependência foi definido para manter a identificação da classe e o atributo descricão foi definido para manter a descrição da informação.
SRS que fornece uma descrição geral de qualquer outro item que limite as opções dos desenvolvedores como normas reguladoras, limites de hardware, protocolos etc..
Para isto o atributo idRestricão foi definido para manter a identificação da restrição e o atributo descricão para manter sua informação.
SRS e descreve todas as operações normais e/ ou especiais requisitadas por o usuário, como rotinas de inicialização, processamento, backup's e restauração.
É criado, para isto, o atributo idOperacão que mantém a identificação de cada operação e o atributo descricão que define a operação.
SRS que especifica a memória (interna e externa) a ser, provavelmente, utilizada por o software.
É criado, para isto, o atributo idMemoria que mantém a identificação de cada limite e o atributo descricão que define esta especificação.
Distribuição dos Requisitos na SRS que identifica os requisitos que podem ser adiados até versões futuras do sistema.
Para isto foi criado o atributo idDistribuicão que mantém a identificação da classe e descricão que deve definir os motivos por os quais tal requisito pode ser adiado.
Atributo, Banco de Dados Lógico, Limites de Desenvolvimento e Requisito Funcional representados, respectivamente, ReqNaoFuncionalGeral, por as classes ReqPerformance, RegraNegGeral, Atributo, BDLog, LimitesDesenvolvimento e RequisitoFuncional.
Não-funcional Geral identificada no estudo de caso para armazenar os requisitos nãofuncionais referentes ao sistema como um todo.
Para ela, são definidos os atributos idRNFGeral que mantém sua identificação e descricão que mantém sua informação.
Performance da SRS que é responsável por especificar os requisitos numéricos estáticos e dinâmicos existentes no software.
Todos estes requisitos devem ser expressos em termos mensuráveis.
O atributo idPerformance foi criado para armazenar sua identificação e para a especificação deste requisito é utilizado o atributo descricao.
Funcionais da SRS que especifica o processamento e as saídas do software para determinadas entradas.
Para esta classe é definido o atributo idRequisitoFuncional que mantém a identificação única de cada requisito.
Esta classe é composta por outras seis subclasses:
Ator, Predicado, RespostasSA, Entrada, Processamento e Saida.
Além de estas, outras duas classes se relacionam com ela:
ReqNaoFuncionalEsp e RegraNegEsp.
A classe Ator relacionada é a mesma já especificada anteriormente, também ligada a classe FuncoesProduto.
Entretanto, neste caso, sua instância é responsável por representar o ator do requisito funcional.
Funcionais na SRS e descreve todas as funções realizadas por o sistema em resposta a uma entrada ou em suporte a uma saída.
É definido o atributo idProcessamento que mantém a identificação da classe e descricão responsável por a especificação do processamento.
Suporte da SRS responsável por tornar a SRS mais fácil de ser utilizada.
Define o atributo idInfo para manter sua identificação e o atributo descricão para manter informações necessárias para a compreensão da SRS.
Ainda são definidas duas subseções:
Tabela de Conteúdo e índice e Apêndices representadas, respectivamente, por as classes Tabela e Apendices.
A pesquisa apresentada em mostra uma forma eficiente de estruturação para os cenários dos casos de uso.
Este trabalho contribuiu para parte da adaptação do modelo conceitual do MCU.
As relações identificadas são descritas a seguir.
Sentence Subject tem por objetivo representar o sujeito da frase, ou seja, o participante de cada passo da descrição do caso de uso, representado por a classe Participante no MCU.
Estas relações foram consideradas importantes, visto que tendem a reduzir a ambigüidade da descrição dos casos de uso e tendem a facilitar, também, que esta descrição seja compreendida da mesma maneira por qualquer pessoa que a leia.
Sendo assim, a classe Passo continua a ser relacionada com a classe Participante e passa a se relacionar, também, com as classes Verbo e Objeto.
As classes Verbo e Objeto passam a se relacionar com a classe Vocabulario e, ao invés de esta classe ser relacionada com a classe Participante, optou- se por realizar este relacionamento com a classe Stakeholders.
Esta opção se deu por o fato de que todos os atores são stakeholders, de acordo com o modelo.
Ou seja, todos os atores estarão relacionados com o vocabulário.
A seguir será apresentada a descrição de todas as classes do modelo.
As classes apresentadas no modelo conceitual do MCU representam os elementos indicados na literatura, e as associações entre estes elementos representam como eles estão relacionados.
Com relação a os atributos, todas as classes possuem um identificador e uma descrição responsável por armazenar suas informações.
Contexto, Participante, InformacoesRelacionadas, Stakeholder, Acionador, GarantiaSucesso, GarantiaMinima, PreCondicão, CenarioSucessoPrincipal e FluxoAlternativo.
Contexto no template utilizado.
û InformacoesRelacionadas:
A classe InformacoesRelacionadas relaciona todas as informações adicionais necessárias.
Elas podem ser requisitos não-funcionais ou regras de negócio relacionadas ao caso de uso, bem como qualquer outra informação que se fizer necessária para a especificação.
O modelo de integração, apresentado em e no Apêndice I, foi utilizado como ponto de partida para o desenvolvimento do modelo de rastreabilidade.
A partir de os relacionamentos identificados neste modelo e no estudo de caso, foi possível chegar a um conjunto de relacionamentos entre os elementos dos modelos da SRS e do MCU.
Assim, com base inicial nestes relacionamentos, partiu- se para o desenvolvimento do modelo de rastreabilidade, que será apresentado a seguir.
Realizadas as adaptações nos modelos conceituais, partiu- se para o desenvolvimento do modelo de rastreabilidade (MR).
O objetivo deste modelo é demonstrar as relações entre os documentos da SRS e do MCU, considerando os impactos5 que por ventura possam vir a acontecer caso alguma alteração seja realizada num dos dois documentos.
Em o sentido desta dissertação, impactos acontecem quando uma alteração num elemento afeta outro.
Em este caso, diz- se que o elemento afetado por esta alteração foi impactado.
As relações foram identificadas por os estudos bibliográficos e, também, por o estudo de caso realizado, tendo como ponto de partida o modelo conceitual de integração, desenvolvido previamente.
Uma das principais dúvidas relacionadas ao modelo de rastreabilidade surgiu devido a a correspondência de um requisito com um ou mais casos de uso.
Afirma que uma feature pode estar relacionada a vários casos de uso, sabendo- se que uma feature pode ser satisfeita por um ou vários requisitos e cada um de eles irá representar um objetivo do software.
Em é relatado que um caso de uso é um serviço único (com um único objetivo) e, ainda, explica que cada caso de uso pode ser composto de vários cenários sendo que todos eles buscam satisfazer ao objetivo do caso de uso em questão.
Já em e considera- se que cada objetivo seja transformado num caso de uso, sabendo- se que cada um destes objetivos corresponde a uma grande funcionalidade do sistema.
Por o exposto em, e, com base no estudo de caso realizado e, também, por o padrão de escrita de requisitos adotado neste trabalho, foi definido que um requisito dará origem a um caso de uso.
O modelo de rastreabilidade e os impactos entre as classes são apresentados, respectivamente, por o diagrama de classes e por as relações de dependência trace6 propostas por a A fim de facilitar a leitura e a visibilidade do processo, este modelo não compreende todas as classes dos modelos conceituais da SRS e do MCU, pois por a quantidade de classes, relacionamentos e por a dificuldade de leitura ficaria inviável representar todas as dependências num único modelo.
Porém, isto não dificulta a visibilidade, visto que as classes são apresentadas com a identificação de seu diagrama de origem para que possam ser facilmente identificadas.
Os impactos podem ocorrer de três maneiras:
û Elementos da SRS impactando em elementos da SRS;
Sendo assim, as dependências entre os elementos da SRS são apresentadas no modelo conceitual da SRS;
As dependências entre os elementos da SRS e os elementos do MCU e as dependências que ocorrem por propagação entre os elementos do MCU são apresentadas no modelo de rastreabilidade.
As relações de dependência trace especificam os relacionamentos entre elementos do modelo ou conjunto de elementos que representam o mesmo conceito em diferentes modelos.
Sabendo- se que as mudanças podem ser realizadas em ambas as direções, geralmente a direção das dependências pode ser ignorada.
Com isso, são definidos os artefatos que fazem parte do processo de rastreabilidade:
O modelo conceitual da SRS, o modelo de rastreabilidade e os procedimentos de rastreabilidade para cada elemento.
A Figura 25 apresenta o modelo de rastreabilidade proposto, que também pode ser conferido em.
As classes utilizadas no modelo são classes derivadas dos modelos conceituais da SRS, do MCU, do modelo de integração e de pesquisas bibliográficas para complementação.
De o modelo conceitual da SRS, as classes participantes do processo são:
Ator, Stakeholder, Predicado, RequisitoFuncional, Saida, RespostasSA, Entrada, Processamento, Atributo, Performance, ReqNaoFuncionalGeral, RegraNegGeral, RegraNegEsp, ReqNaoFuncionalEsp, Objetivo e DistribuicaoRequisitos.
De o modelo conceitual do MCU, as classes participantes são:
CasoUso, Nome, PreCondicão, Participante, Stakeholder, GarantiaSucesso, Contexto, FluxoAlternativo, Passo, InformacoesRelacionadas e GarantiaMinima.
As classes adicionadas ao modelo para complementação, com base em, foram:
DiagramaAtividade, Atividade, NodoDecisao.
A descrição das classes derivadas dos modelos da SRS e do modelo de casos de uso já foi apresentada.
A descrição das classes adicionais é apresentada a seguir:
NodoDecisão, também oriundas de.
û Atividade:
A classe Atividade representa uma ação realizada no diagrama de atividades.
A próxima seção apresenta os relacionamentos que, junto com as classes, compõem o modelo de rastreabilidade.
Esta seção descreve os relacionamentos existentes entre as classes do modelo de rastreabilidade proposto.
Cada um dos relacionamentos é descrito devido a sua importância em processos de especificação de requisitos e casos de uso e, assim, devem ser seguidos a fim de garantir que a rastreabilidade entre os elementos possa ser realizada durante o processo.
Cada um dos relacionamentos apresentados no modelo foi identificado a partir de análises detalhadas no modelo conceitual da SRS, do MCU e de Integração, embora o estudo de caso tenha contribuído para a confirmação, adaptação e inclusão de novos relacionamentos.
A fim de representar as dependências entre os elementos, faz- se uso da relação de dependência trace prevista na UML 2.
0. Abaixo são apresentadas as descrições de todos os relacionamentos de dependência apresentados nos modelos e que fazem parte do processo de rastreabilidade.
Predicado deverá ser, também, atualizada.
