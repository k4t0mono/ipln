O ensino de Orientação a Objetos tem recebido ênfase cada vez maior nos últimos tempos devido a o crescimento da utilização de tal paradigma em empresas e em ambiente acadêmicos.
Desta forma inúmeros problemas de ensino e de utilização do mesmo tem sido identificados e relatados, e soluções para tais problemas tem sido largamente estudadas.
Ensino Colaborativo é baseado em técnicas colaborativas diversas utilizadas no processo de ensino aprendizado, com o objetivo de auxiliar o aprendizado.
Algumas destas técnicas pressupõem que alunos trabalhem em grupos, compartilhando conhecimento e ajudando uns aos outros na resolução de dúvidas e problemas.
Desta forma, alunos passam ser elementos ativos no processo de aprendizado.
Por outro lado, o professor deve organizar, acompanhar e mediar as atividades dos alunos, de forma a possibilitar esta colaboração.
Ensino Colaborativo Auxiliado por Computador (CSCL -- Computer Supported Collaborative Learning) pressupõe o uso de tecnologia para apoio às técnicas de ensino colaborativo.
Atualmente, ferramentas Internet, tais como, e-mail, ftp, Www, etc..
Tem sido bastante utilizadas neste contexto.
Diversos ambientes CSCL também têm sido especificados e desenvolvidos.
Este trabalho tem como objetivo especificar um ambiente CSCL que apoie o processo de ensino aprendizagem de OO, no contexto de um curso de projeto de software OO.
O trabalho apresenta a proposta de um curso colaborativo de projeto OO, bem como o ambiente CSCL e um protótipo de tal ambiente.
Viii Assim como a utilização do Paradigma Orientado a Objetos (OO) vem aumentando, tanto a nível empresarial quanto a nível acadêmico, a preocupação com o ensino do mesmo também vem crescendo e recebendo cada vez mais atenção nos últimos anos.
Um dos grandes problemas no ensino e, consequentemente, na adoção do paradigma OO baseia- se na influência sofrida, por alunos e desenvolvedores de software, do paradigma estruturado, que geralmente é o primeiro paradigma de desenvolvimento de software aprendido e utilizado.
Com este, e outros problemas, temos como conseqüência direta a perda dos benefícios do mesmo como, por exemplo, facilidade de manutenção, abstração de dados, Ensinar o Paradigma OO de maneira eficaz é ensinar a conceber software em termos de objetos, classes, troca de mensagens, etc..
E requer mais do que utilizar uma Linguagem de Programação Orientada a Objetos (LPOO).
Os indivíduos devem ser capazes de decompor sistemas em classes de objetos, definir as operações de cada classe e identificar eventuais colaborações existentes entre as mesmas.
Para isso, é necessário uma troca de paradigma, o que, na linguagem técnica, denomina- se adquirir o pensamento orientado a objetos (object-oriented thinking).
Outros problemas de ensino de OO dizem respeito a LPOO's e seus ambientes de desenvolvimento, metodologias de desenvolvimento de software OO e problemas de ensinoaprendizagem relativos a tópicos ensinados, professores inexperientes, etc..
Ensino colaborativo pode ser definido como um conjunto de técnicas de ensinoaprendizagem, baseadas na colaboração entre todos os participantes do processo, isto é, professores e alunos.
Estas técnicas visam favorecer a troca de experiências entre os participantes, sejam estas dúvidas, problemas, dicas, conhecimento adquirido, etc., descentralizando o conhecimento tradicionalmente concentrado na figura do professor.
Desta forma os alunos tornam- se indivíduos mais ativos no processo como um todo, sendo responsáveis por o seu próprio aprendizado.
Ensino colaborativo apoiado por computador (Computer Supported Collaborative Learning -- CSCL) é o termo utilizado para definir ensino colaborativo com o uso de tecnologias para monitorar e apoia a interação dos envolvidos no processo de ensino aprendizagem.
Algumas das tecnologias que podem ser utilizadas são redes de computadores, serviços de Internet, áudio e videoconferência, software cooperativos e ambientes de apoio ao ensino.
Este trabalho consiste na proposta de um Curso de OO, baseado em técnicas colaborativas e ensino de projeto OO, utilizando a metodologia RDD, e um ambiente CSCL para apoio e monitoramento das atividades do curso.
Com isso acredita- se que os problemas de ensino de OO possam ser transpostos de forma mais simples e eficaz, proporcionando uma melhor utilização do paradigma e de seus benefícios por parte de alunos, que desta forma podem se beneficiar de suas vantagens.
O curso é baseado em duas atividades principais:
Resolução de exercícios, por os alunos, em grupo, de forma colaborativa e discussões de soluções de alternativas para o problema, sejam essas boas soluções ou soluções erradas e inconsistentes.
Ambas as etapas podem, e devem, ser intercaladas em diferentes momentos do curso, dependendo do desenvolvimento dos alunos em relação a o aprendizado do paradigma.
A resolução de exercícios por parte de os alunos visa dar aos mesmos experiência inicial dos conceitos do paradigma OO e em desenvolvimento de software, uma vez que conceitos vistos de forma teórica podem ser aplicados na prática.
As sessões de discussão visam desenvolver o pensamento crítico dos alunos em relação a a aplicação dos conceitos, já que os alunos devem analisar soluções desenvolvidas, identificar pontos fortes e pontos problemáticos, comparar uma dada solução com a solução de seu grupo, justificar sua modelagem identificando seus pontos fortes, etc..
Desta forma, acredita- se que o aluno consiga mais facilmente fazer a troca de paradigma e adquirir o pensamento em termos de objetos.
Para descrever as atividades realizadas por alunos e professores durante o curso, foi desenvolvido um modelo de cooperação, que descreve a troca de objetos entre os participantes em diferentes momentos do processo.
Um modelo de argumentação suporta as sessões de discussão, definindo os tipos de contribuições apresentadas por os participantes, o relacionamento existente entre as diversas contribuições, ou seja, impondo uma estruturação a discussões.
O modelo de cooperação oferece um referencial conceitual para o desenvolvimento de ambientes CSCL para o curso de OO, bem como para cursos de modelagem em geral.
O objetivo do CSCL especificado é validar a estrutura do curso proposto, seu modelo de cooperação, o modelo de argumentação, determinando vantagens de utilização do mesmo para ensino de OO.
Um protótipo de um ambiente informatizado de apoio ao curso está sendo desenvolvido, e acredita- se que com a utilização de mesmo em ambientes de ensino de OO, diversos dos problemas detectados possam ser transpostos e até mesmo eliminados.
O protótipo utiliza tecnologia Internet, mais especificamente Www, Html, formulários, CGI--Scripts, como ferramentas de implementação.
Foi escolhido o ambiente Internet para implementação por esta ser, nos dias atuais, uma tecnologia bastante difundida e conhecida por os alunos, bem como por a facilidade de manipulação e utilização de suas ferramentas.
Este trabalho está estruturado como segue.
O Capítulo 2 apresenta e descreve diversos trabalhos relacionados, tanto trabalhos relativos aos problemas de ensino de OO, tais como influência do paradigma estruturado, problemas com linguagens e ambiente, problemas de ensinoaprendizagem, bem como algumas ferramentas desenvolvidas para apoiar no processo de ensino de OO.
Além disso são apresentados trabalhos de desenvolvimento cooperativo de software e de ensino colaborativo, que servem de base para a definição do curso.
O Capítulo 3 descreve a estrutura do curso, apresentando aspectos gerais e descrevendo de forma bem detalhada as etapas importantes do curso (resolução de exercícios e a discussão de soluções).
O Capítulo 4 descreve o ambiente de apoio ao curso, apresentando características gerais, e descrevendo o modelo de cooperação, o modelo de argumentação e a arquitetura funcional do ambiente.
Em o Capítulo 5 o modelo de cooperação e apresentado e explicado de maneira bastante detalhada, visando esclarecer as relações entre os objetos trocados entre alunos e professor durante o curso.
O protótipo do ambiente é apresentado no Capítulo 6, em o qual são descritos a interface e a implementação do mesmo.
Um cenário de utilização do protótipo no contexto do curso é também apresentado.
Conclusões e trabalhos futuros são apresentados no Capítulo 7.
2 Trabalhos Relacionados O paradigma de orientação a objetos é um paradigma de desenvolvimento de software relativamente novo, tendo seu ensino e adoção crescido consideravelmente nos últimos anos.
Em conseqüência, diversas questões têm sido levantadas sobre como melhor ensinar e aplicar o paradigma, a fim de proveito real de seus benefícios, tais como representação do mundo real de Algumas das questões levantadas por,,,,,,, em relação a o ensino de orientação a objetos são:
Quando introduzir o paradigma de orientação a objetos, quais os conceitos incluir num primeiro curso e quais excluir, como apresentar os conceitos do paradigma para que sejam assimilados de maneira adequada, quando ensinar a primeira linguagem de programação e técnicas de análise e projeto OO, qual a linguagem de programação utilizar, etc..
Dependendo da medida adotada em relação a estas questões, pode- se obter diferentes resultados em relação a a adoção e ao ensino do paradigma como um todo.
Escolhas inadequadas podem levar (e geralmente levam) a problemas de ensino-aprendizagem e, como conseqüência, à má adoção e utilização do paradigma.
O objetivo deste capítulo é resumir os principais problemas de ensino-aprendizagem do paradigma OO e descrever trabalhos que apresentam contribuições interessantes para amenizar/ resolver, direta ou indiretamente, estes problemas.
Em o restante deste capítulo, a Seção 2.1 descreve problemas relativos ao processo de ensino-aprendizagem de OO;
Em a Seção 2.2 estão descritos alguns trabalhos que enfocam o ensino de OO, trabalho cooperativo de software, etc..
Em a Seção 2.3 é apresentado uma breve descrição sobre ensino de colaborativo baseado em computador.
Problemas de ensino do paradigma OO A literatura relata ponderações em relação a os problemas e questões apresentados na Seção anterior, algumas de elas discutidas no decorrer de esta Seção.
São elas:
Problemas relacionados com o processo de ensino-aprendizagem, problemas em relação a a influência do paradigma estruturado, problemas levantados em linguagens de programação, ambientes de desenvolvimento de software orientado a objetos e metodologias de projeto se software orientado a objetos.
É importante ressaltar que todos estes diversos tipos de problemas estão intimamente relacionados.
Um estudo bastante aprofundado e detalhado sobre estes problemas está descrito em Trabalhos como relatam experiências acadêmicas, a nível de graduação e pós-graduação.
Os problemas apontados, muitos de eles também sentidos na prática por a autora, podem ser classificados em três grande grupos:
Problemas relativos ao processo de ensino-aprendizagem, problemas relativos à experiência prévia dos alunos e experiência no paradigma estruturado e problemas em relação a as linguagens, ambientes de programação e metodologias OO existentes.
É importante ressaltar que todos estes problemas estão intimamente relacionados uns aos outros.
De todos, a experiência prévia no paradigma estruturado é certamente o problema mais dominante e recorrente.
Vale ressaltar que não existe consenso nem na identificação dos problemas de ensino e adoção do paradigma, nem nas respostas e conclusões dos diversos autores em relação a os mesmos.
Aspectos considerados importantes e benéficos para alguns autores são considerados por outros como sendo prejudiciais no processo como um todo.
Mesmo assim, os problemas detectados por diversos autores e discutidos neste trabalho servem como base para propostas de trabalhos, ambientes de apoio e mostram a motivação dos diversos autores para o tema e também para este trabalho.
Problemas relacionados ao processo de ensino-aprendizagem Os problemas referentes ao processo de ensino-aprendizagem são aqueles que implicam diretamente dificuldades no entendimento dos conceitos do paradigma OO e na sua aplicação.
Como conseqüência existe a perda das vantagens que o paradigma pode proporcionar em termos de qualidade e produtividade no processo de desenvolvimento de software como um todo.
Como efeito, ao passar por este tipo de dificuldades, os indivíduos não conseguem perceber e aproveitar os benefícios do paradigma, não sendo justificada então sua adoção.
Em alguns casos mais graves, indivíduos passam até mesmo a considerar o paradigma OO como inadequado ao desenvolvimento de software.
Entre os fatores que causam e agravam problemas de ensino aprendizagem estão:
Falta de material bibliográfico de apoio;
Falta de experiência de professores/ instrutores;
Expectativa de retorno imediato por parte de os alunos do investimento de aprendizado;
Influência do paradigma estruturado;
Linguagens e ambientes de programação e/ ou metodologias de apoio ao aprendizado.
Os dois últimos fatores serão abordados em detalhe nas Seções 2.1.2 e 2.1.3, respectivamente.
Os demais são discutidos no restante desta Seção.
Falta de material de apoio:
Alguns professores e instrutores da área reclamam freqüentemente da falta de material de apoio adequado para utilização no ensino, mas esta questão vem se tornando nos últimos anos de menor importância à medida que inúmeros livros de OO vem sendo lançados a cada ano, bem como tutoriais e ambientes de apoio ao aprendizado.
Detectam o problema da falta de experiência e baixa qualificação dos profissionais de ensino na área de OO, muitas vezes incapazes de selecionar bibliografia de qualidade para suas aulas;
Pouca experiência dos professores e instrutores:
O ensino do paradigma OO é relativamente recente, quer a nível acadêmico quer a nível comercial.
Por um lado têm se professores que ainda não têm muita experiência prática do paradigma (conceitos, programação, técnicas de desenvolvimento, etc.).
Por outro, os professores têm pouca experiência em reconhecer e lidar com as dificuldades dos alunos na aprendizagem do paradigma.
Estas situações podem levar às seguintes conseqüências:
Seleção de bibliografia inadequada para apoio ao ensino;
Escolha de linguagens/ ambientes de programação e/ ou técnicas de desenvolvimento de software impróprias ao ensino efetivo.
Vários trabalhos relatam experiências bem e mal sucedidas de técnicas de ensino usadas por professores, sem que haja qualquer consenso sobre o assunto ou mesmo extensa validação sobre as técnicas aconselhadas.
Trabalhos como discutem os conceitos a serem apresentados em cursos básicos e avançados.
De uma maneira geral eles concordam que conceitos como abstração, classes, métodos, encapsulamento, information hiding (ocultamento de informações), herança, redefinição, polimorfismo, devem ser apresentados por serem básicos e por solidificarem as vantagens associadas ao paradigma.
Herança múltipla, que faz parte do paradigma, é considerado desnecessário e até mesmo dispensável por no contexto de um curso introdutório, que consideram este tipo de herança como um conceito avançado e que deve ser ensinado mais tarde.
Diferentes diretrizes sobre características e uso de exemplos e exercícios são discutidas sob diferentes prismas em trabalhos como.
Expectativas dos alunos:
Como forma de motivar alunos no aprendizado OO, ou empresas a investirem em tal tipo de treinamento, pode- se adotar como técnica de ensino o uso de alguma característica ou aspecto ligado à OO que dê a sensação de retorno imediato, no sentido de possibilidade de aplicação imediata dos conceitos aprendidos.
Embora em tese interessante, na prática, os resultados podem apresentar efeitos colaterais, pois os alunos acabam não conseguindo dissociar o conteúdo aprendido do contexto usado para o aprendizado.
É o caso por exemplo de usar recursos de construção de interfaces (por exemplo, usando linguagens de programação como Delphi, Power Builder ou Visual Basic), ou de conexão à Internet como usando a linguagem Java.
No caso de interfaces gráficas, na prática, os alunos constróem boas interfaces usando os recursos disponíveis, mas têm dificuldades de seguir o mesmo raciocínio para a semântica do programa.
Muitas vezes a própria linguagem não permite tal extensão, como é o caso de Visual Basic.
No caso de Java, os alunos têm até dificuldades de entender que a mesma é uma linguagem de programação que não precisa estar vinculada a Internet.
Problemas em relação a a influência do paradigma estruturado Um dos maiores problemas refere- se à influência do paradigma estruturado no ensino de OO, intimamente ligado à experiência prévia dos indivíduos e ao contato tardio com os conceitos do paradigma OO.
A referência ao paradigma estruturado em particular e principalmente à programação estruturada, ocorre uma vez que este paradigma é geralmente o primeiro ensinado/ aprendido, e o mais utilizado no desenvolvimento de software em geral.
Contudo, acredita- se que qualquer que seja o primeiro paradigma de desenvolvimento de software aprendido as mesmas dificuldades vão ser enfrentadas.
O paradigma estruturado é referenciado neste trabalho pois tem sido geralmente o primeiro paradigma com o qual os alunos tomam contato, e cujos efeitos sobre o ensino do paradigma OO são mais conhecidos e discutidos.
Diversos autores, como, afirmam que quanto maior a experiência prévia em desenvolvimento de software estruturado, mais difícil torna- se a adoção e o aprendizado efetivo do novo paradigma.
Isso porque a grande maioria dos indivíduos aprecia a experiência que possui, criando assim, uma forte barreira para o aprendizado.
Em contrapartida, segundo, indivíduos que trabalham em mais de um paradigma, adaptam- se mais facilmente ao paradigma de orientação a objetos.
Em a verdade, os problemas são decorrentes da pouca abertura das pessoas em relação a o aprendizado de novos conceitos, uma vez que já lhe foi mostrado um paradigma com o qual é possível resolver problemas.
Pressupõe- se que quanto mais tarde os indivíduos tomarem contato com o paradigma OO, mais difícil será seu aprendizado efetivo, uma vez que devem possuir mais experiência anterior no paradigma estruturado.
O grande problema é que as pessoas não se mantêm abertas a novas experiências e novos conceitos, uma vez que têm, no seu próprio ponto de vista, que &quot;retroceder «em diversos aspectos num primeiro momento, por causa de a curva de aprendizado.
Volta- se a realizar projetos e programas extremamente simples, que servem para exemplificar e colocar na prática novos conceitos aprendidos, mas que no início não resolvem problemas dos indivíduos, problemas estes resolvidos com a utilização do paradigma previamente utilizado.
Assim, diversos autores, como, apoiam o ensino e a adoção do paradigma OO como primeiro paradigma de desenvolvimento de software.
Desta forma, evita- se os vícios de modelagem e programação adquiridos na utilização do paradigma estruturado por parte de os indivíduos aprendendo o paradigma OO.
Em este contexto, questiona até mesmo se alunos devem ter uma formação no paradigma estruturado, uma vez que os benefícios de orientação a objetos são inúmeros e estão bastante claros.
Estes autores apoiam e defendem a utilização do paradigma OO em cursos introdutórios de programação e de desenvolvimento de software, como primeiro paradigma, mas até o momento não existem relatos formais de tais experiências sendo realizadas.
Este problema de &quot;troca de paradigma «é conhecido na área de ensino de OO como desenvolvimento de object oriented thinking (pensamento em termos de objetos), isto é, ser capaz de abstrair porções do mundo real em termos de objetos e trocas de mensagens entre estes objetos.
Utilizando o paradigma estruturado os indivíduos pensam, particionam o problema e desenvolvem software em termos de procedimentos, funções e estruturas de dados.
A unidade partição da realidade são processos, que devem ser sucessivamente detalhados, e organizados usando seqüência, condições e iterações.
Em a orientação a objetos, a realidade deve ser particionada em termos de objetos, que agregam responsabilidades, e cooperam uns com os outros a fim de cumprir os objetivos da aplicação.
A troca de paradigma implica a troca de unidade básica de decomposição de sistemas, usando um conjunto novo de propriedades para caracterizar e conectar as entidades, e exige uma mudança radical de pensamento, o que é bastante difícil.
Muitas vezes os alunos acreditam estar colocando em prática os conceitos de OO, quando na verdade continuam representando processos na forma de classes.
Um exemplo apresentado por mostra que geralmente seus alunos querem expandir métodos de uma classe de objetos em grandes procedimentos.
Este problema da troca de paradigma, isto é, abdicar dos conceitos e da filosofia do paradigma estruturado, pode ser agravado consideravelmente com a adoção de uma linguagem de programação orientada a objetos híbrida como primeira linguagem no ensino do paradigma, como será discutido na Seção 2.1.3 a seguir.
Problemas relativos a linguagens metodologias de projeto OO ambientes de programação A escolha da linguagem de programação e do ambiente de desenvolvimento oferecido por a mesma é um aspecto bastante importante no ensino, uma vez que uma escolha inadequada pode levar a situações problemáticas de aprendizado.
De a mesma forma, a seleção e utilização de metodologias de projetos em diferentes situações, deve ser estudada e decidida de forma bastante cautelosa, visando se beneficiar dos aspectos de tal metodologia.
Como já mencionado, muitos dos problemas identificados nesta Seção estão intimamente ligados a dificuldades relativas à experiência prévia no paradigma estruturado.
Linguagens de programação e metodologias de desenvolvimento de software OO são classificadas como puras e híbridas.
Linguagens, ambientes e metodologias ditas puras são aquelas que têm como base somente os conceitos do paradigma OO e dão apoio total e irrestrito a sua utilização e aplicação.
Por outro lado, linguagens, ambientes e metodologias ditas híbridas combinam os conceitos de OO com os de um segundo paradigma, sendo o segundo geralmente o paradigma estruturado.
Smalltalk, Eiffel são exemplos de linguagens de programação OO puras, enquanto que C+ e Delphi são exemplos de linguagens híbridas.
RDD é um exemplo de metodologia de desenvolvimento pura, e OMT e UML são exemplos de híbridas.
A escolha de linguagens de programação e metodologias puras ou híbridas caracterizam, respectivamente, duas grandes correntes de ensino de orientação a objetos:
Revolucionários e evolucionários.
Autores revolucionários, como e a autora, apoiam a utilização de linguagens e metodologias de projeto puramente orientadas a objetos.
Como estas linguagens/ técnicas incorporam facilmente os conceitos OO, os alunos começam a aplicar estes conceitos desde o primeiro momento, não sendo permitido utilizar conceitos estruturados.
Por não ter outro recurso, o aluno é forçado a decompor, descrever e conectar módulos em termos de os recursos existentes (isto é, classes, mensagens, métodos, etc.), exigindo que a troca de mentalidade ocorra o mais cedo possível.
Esta vantagem é vista como desvantagem por os autores da corrente evolucionária.
A corrente oposta, de autores evolucionários, como, apoia a utilização de linguagens e metodologias híbridas para o ensino do paradigma OO, baseando- se no fato de que é possível e interessante aprender os conceitos do paradigma OO de forma gradual e incremental, misturados com conceitos conhecidos do paradigma estruturado.
Os autores apresentam como vantagem para a utilização de conceitos conhecidos mesclados com a de novos conceitos, que aos poucos tende a migrar para a utilização do paradigma OO como um todo.
Faz uma comparação bastante interessante em relação a o aprendizado do paradigma de orientação a objetos e ao aprendizado de natação.
Atirar numa piscina um indivíduo que não sabe nadar é similar à adoção de uma metodologia pura.
De esta maneira, o indivíduo tem que aprender a nadar rapidamente para sobreviver, mas deve sofrer um durante um pequeno período de tempo para tal.
A utilização de metodologias híbridas, corresponde, no exemplo da piscina, a disponibilizar uma prancha para o indivíduo se apoiar enquanto aprende a nadar.
Em esta segunda abordagem, o indivíduo não sofre, mas por outro lado pode nunca largar a prancha, o que significaria não aprender efetivamente o paradigma de orientação a objetos.
Estas duas correntes totalmente contraditórias nos levam a crer numa atitude muito mais filosófica do que teórica ou técnica para o ensino, adoção e utilização de uma outra corrente.
Autores de ambas as correntes defendem sua escolha de maneira bastante forte e criticam a corrente contrária, alegando que é totalmente inadequada para ensino do paradigma OO.
Em relação a linguagens de programação, um dos aspectos apoiados por grande número de autores diz respeito à adoção de uma linguagem puramente OO, que não permita programação estruturada em momento algum.
Isso colabora e induz à troca de paradigma de forma brusca, mas mais rapidamente.
É importante destacar que o ensino de uma linguagem de programação OO não se resume a ensinar os construtores de mais uma linguagem de programação, mas sim uma nova forma de conceber e particionar programas.
Em este sentido, a escolha da linguagem influência muito na estrutura resultante dos programas.
Um estudo comparativo bastante aprofundado sobre duas linguagens de programação OO, a saber Smalltalk e C+ foi realizado por a autora, estando descrito em.
Esta comparação foi baseada no referencial proposto por, que analisa a orientação a objetos segundo quatro dimensões:
Encapsulamento, classificação, polimorfismo e interpretação.
Ambas as linguagens foram analisadas em relação a este referencial teórico, o que possibilitou inúmeras conclusões.
Entre as mais importantes está a que a programação OO em C+ é mais uma questão de estilo do que um paradigma de programação.
C+ é uma linguagem híbrida, mas sua filosofia concentra- se mais nos aspectos de flexibilidade e eficiência do que nos conceitos de OO propriamente ditos.
Por exemplo, o programador pode violar o encapsulamento tornando a implementação visível (utilizando classes friend, herança public, etc.), e determinar diferentes tipos de herança e ligação dinâmica.
Esses recursos nem sempre são bem utilizados por iniciantes.
Já Smalltalk, sendo uma linguagem pura, suporta fielmente os conceitos do paradigma, restringindo muitas vezes as possibilidades de programação do usuário, mas auxiliando o iniciante de maneira geral.
Em um segundo estudo, descrito em, são analisadas linguagens e ambientes de programação, metodologias de projeto OO e metodologias de ensino, propostas por diversos autores.
Este segundo trabalho complementa o primeiro, uma vez que diversos aspectos destas linguagens, ambientes e metodologias são estudados e analisados em relação a sua adequação para o ensino do paradigma como um todo.
A linguagem pura mais citada atualmente é Smalltalk, por ser uma linguagem de programação OO clássica, que contempla todos os conceitos do paradigma de forma clara e simples.
Críticas em relação a Smalltalk concentra- se em dois aspectos:
Sintaxe não convencional, que pode confundir o aluno, fazendo- o associar programação OO com a sintaxe diferente, e a vasta biblioteca de classes, que num primeiro momento pode vir a confundir e não a auxiliar.
Java também tem sido bastante utilizada, embora algumas heranças de C+, como a preocupação com a eficiência do programa, além de a confusão feita por os alunos em relação a Internet, possam atrapalhar substancialmente o processo de ensino-aprendizagem.
Em resposta a estes problemas, desenvolveu uma linguagem de programação puramente OO específica para o ensino, chamada Blue, que vem sendo utilizada com bastante sucesso, segundo o próprio autor, na Universidade de Sidney, na Austrália.
Em relação a linguagens e ambientes específicos para o ensino, autores como argumentam que os mesmos podem não ser adequados à medida que não são voltados para a manipulação de classes e objetos e, na maioria das vezes, não suportam o desenvolvimento de aplicações reais, sendo voltadas para os ditos toy-- problems (problemas brinquedo -- problemas simples que não enfocam a representação da realidade).
Como toy-- problems enfocam problemas menores, jogos, etc..
Não refletem problemas reais que podem ser solucionados de forma simples com o paradigma OO, o que é desestimulante para o aluno.
Define a união existente entre as linguagens de programação orientadas a objetos e os ambientes de programação associados, como uma das características importantes para a motivação dos alunos no sentido do aprendizado do paradigma e de linguagens de programação orientadas a objeto, e utiliza a linguagem Smalltalk e seu ambiente de programação como exemplo.
Alguns problemas em relação a ambientes de programação são relatados em e Como mencionado anteriormente, os ambientes de programação associados a estas linguagens geralmente são considerados confusos, difíceis de entender e não oferecem a ajuda necessária a usuários iniciantes.
A complexidade destes ambientes de programação, que ocorre basicamente por serem ambientes que visam dar suporte ao desenvolvimento de software, e sua utilização requer algum tempo de estudo até que o aluno esteja familiarizado com os mesmos.
Afirma que os ambientes atuais apresentam deficiências, devido a o fato dos requisitos e do potencial de um ambiente orientado a objetos e não terem sido ainda entendidos totalmente.
Classifica as deficiências relativas a ambientes de programação em dois grupos:
Suporte insuficiente a objetos e técnicas de visualização e manipulação de objetos insuficientes.
Ambientes de programação existentes têm como principal objetivo prover facilidades para o processo de desenvolvimento de software, diminuindo a incidência de erros e aumentando assim a produtividade de programação.
Por este motivo podem apresentar problemas quando utilizados como meio no processo de ensino-aprendizagem do paradigma de orientação a objetos (e qualquer outro paradigma), independente da linguagem de programação a qual está associado.
Como já foi destacado, freqüentemente o primeiro contato que os alunos possuem com o projeto de software OO é através de aprendizado de programação OO.
O ensino de programação OO permite aos professores explorar de forma concreta o funcionamento e as vantagens de utilização do novo paradigma, uma vez que os alunos começam a trabalhar e a aplicar os conceitos e vêem os resultados de maneira imediata.
Contudo, ao mesmo tempo que os alunos estão aprendendo uma nova linguagem, eles também devem estar cientes de que estão aprendendo uma nova forma de projetar aplicações.
O verdadeiro processo de ensino-aprendizado do paradigma OO diz respeito ao desenvolvimento do pensamento em termos de objetos, tornando os alunos capazes de desenvolver e conceber soluções em termos de objetos que realizam operações e cooperam entre si.
Um curso de OO deve possibilitar, além de o eventual aprendizado de uma linguagem de programação, o desenvolvimento do pensamento em termos de objetos, para que os alunos tornemse aptos a desenvolver software de acordo com a filosofia do paradigma OO independente de linguagem ou metodologia específica utilizada.
Os mesmos problemas já destacados para linguagens de programação também são encontrados no ensino de análise/ projeto de software orientado a objeto.
Autores como e discutem problemas em relação a o uso de abordagens revolucionárias e evolucionárias, respectivamente.
Metodologias híbridas como OMT e UML, apesar de muito usadas no desenvolvimento comercial de sistemas, não forçam o aluno a aplicar corretamente os conceitos de OO.
Assim, como em linguagens de programação, o desenvolvimento OO de aplicações segundo estas metodologias é mais uma questão de estilo de desenvolvimento.,
defendem o uso de técnicas puras por iniciantes.
Outras questões são o momento da apresentação de análise/ projeto OO num curso de graduação em ciência da computação, material de apoio utilizado, etc..
Trabalhos relacionados Os problemas detectados por diversos autores e apresentados na Seção anterior, refletem a necessidade de estudos e pesquisas que venham melhorar a qualidade do ensino e, consequentemente, da adoção e utilização do paradigma como um todo.
Em um primeiro momento de ensino do paradigma OO, problemas, falhas e inconsistências foram detectadas no processo de ensino-aprendizagem do paradigma, e tendem a diminuir com uma maior experiência dos professores, da criação de novas linguagens e ambientes de apoio ao ensino, de metodologias de software que reparem alguns dos problemas detectados, etc..
Em o restante desta Seção serão discutidas propostas de solução encontradas na literatura, que direta ou indiretamente, podem auxiliar na resolução de problemas relativos ao processo de ensinoaprendizagem do paradigma OO.
Em a Seção 2.2.1 são resumidas contribuições de ferramentas e técnicas de apoio ao ensino de aspectos de OO.
Em a Seção 2.2.2 são discutidas ferramentas de apoio ao desenvolvimento cooperativo de software.
Estas ferramentas enfocam a resolução colaborativa de problemas de concepção de software, e acredita- se que os mesmos benefícios podem ser obtidos no contexto de ensino de projeto de software OO.
Ensino do Paradigma OO Trabalhos que enfocam o ensino do paradigma OO são baseados em ensino do conceitos básicos do paradigma OO, ensino de linguagens de programação OO, ensino de projeto de software OO e metodologias de ensino do paradigma como um todo.
Embora grande parte destes trabalhos esteja concentrada na parte de programação e linguagens OO, experiências que enfocam ensino de projeto de software OO, visando o desenvolvimento do pensamento em termos de objetos, mostram- se mais eficazes no aprendizado do paradigma como um todo.
Isso porque atacam o ponto crucial no aprendizado de qualquer paradigma, a concepção de software.
Alguns dos trabalhos que tratam do ensino dos conceitos básicos do paradigma OO são,.
Apresenta um ambiente multimídia para ensino dos conceitos básicos de orientação a objetos, tais como, classes, objetos, encapsulamento, troca de mensagens, herança, polimorfismo, etc, bastante interessante na época em que foi proposto e utilizado, mas extremamente simples para os dias atuais.
A grande maioria dos trabalhos enfocam o ensino de linguagens de programação orientadas a objetos, variando entre diversas linguagens como Smalltalk, Java, C+, Eiffel, etc..
Muitos trabalhos fazem comparações entre as linguagens, visando definir a linguagem mais adequada para a realidade em questão.
Preocupa- se bastante com este aspecto e apresenta uma linguagem desenvolvida especificamente para fins educacionais chamada Blue.
Segundo os autores, Blue vem sendo utilizada com sucesso na Universidade de Sidney, na Austrália.
Poucos dos trabalhos apresentam experiências práticas que comprovem sucessos ou insucessos de aplicação de tais linguagens ou ambientes de ensino (e este parece ser um dos únicos consensos entre tais trabalhos).
Em relação a desenvolvimento de software orientado a objetos, nas fases de análise ou projeto, temos trabalhos de alguns autores que enfocam tal abordagem como sendo a mais importante para o aprendizado do paradigma como um todo, como,.
O ponto mais importante enfocado por estes autores é o aprendizado e desenvolvimento do pensamento em termos de objetos, através de o qual os indivíduos adquirem facilidade de reconhecer e especificar objetos em problemas em questão.
Acrescenta que não é importante aprender uma linguagem de programação OO (embora seja interessante num segundo momento) e sim aprender a especificar software através de classes de objetos, suas operações e relações, que podem ser facilmente mapeadas numa linguagem de programação OO.
Alguns dos trabalhos importantes estão descritos a seguir.
Learning Works é uma ferramenta para ensino do paradigma OO e dos construtores básicos de Smalltalk.
A ferramenta para suporte a Micromundos é centrada no ensino de análise e projeto OO, mas também pode ser utilizada para ensino de Smalltalk.
CRC Cards é de uma técnica para ensino de projeto OO, que associada com a metodologia RDD pode ser bastante interessante para ensino inicial de projeto.
Além disso, CRC Cards enfatiza a comunicação que deve existir entre os indivíduos em qualquer processo de desenvolvimento de software.
Os trabalhos descritos a seguir enfocam conceitos diferentes e partes diferentes do paradigma como um todo, mas são importantes dentro de suas áreas, a saber:
Learning Works, programação e linguagem Smalltalk, Micromundos, projeto e pensamento OO e CRC Cards, ensino de projeto de software OO.
Learning Works é uma ferramenta que pode servir tanto como apoio ao ensino dos conceitos do paradigma OO centrado na linguagem Smalltalk, quanto como ferramenta única para ensino desta linguagem específica.
Esta ferramenta tem propósitos educacionais e é largamente utilizada em disciplinas de orientação a objetos em diversas instituições de ensino do ferramenta tem como público alvo, iniciantes no paradigma de orientação a objetos e na linguagem em questão.
A ferramenta possui um módulo Autor, geralmente utilizada por instrutores ou professores para criação ou especificação do material a ser utilizado por os alunos, e um módulo Tutor, utilizado por os alunos que estão seguindo um curso específico de OO ou um tutorial por conta própria.
Um tutorial sendo explorado é chamado de Learning Book, ou livro e apresenta diretrizes de utilização e os tópicos a serem desenvolvidos.
Um livro é dividido em seções que, por sua vez, são divididas e podem ser exploradas através do acesso a páginas.
Cada página contém conteúdo a ser lido, tópicos a serem explorados e/ ou atividades a serem desenvolvidas por os alunos a fim de aprenderem determinados conceitos do paradigma OO ou construtores específicos da linguagem.
Um exemplo de uma aplicação da ferramenta Learning Works é o boxes.
Lw, que tem como objetivo principal ensinar e mostrar ao aluno como funciona o mecanismo de troca de mensagens e os tipos de mensagens possíveis em Smalltalk, através da animação das ações realizadas por o aluno nos objetos quadrado.
Este Learning Book apresenta um projeto sobre manipulação de quadrados que podem ser animados numa janela da tela.
Uma Seção do livro é dedicada ao ensino do conceito de troca de mensagens entre objetos.
Para tal, a Seção apresenta mensagens e operações que permitem desenhar/ redesenhar quadrados em diversas posições da tela, em diferentes cores e tamanhos, como mostrado na Figura 2.1.
Outra Seção deste livro suporta acesso à implementação destes objetos, enquanto uma terceira Seção oferece páginas que permitem ao usuário implementar código em Smalltalk a fim de criar novos quadrados.
As diretrizes para utilização de cada livro são apresentadas na primeira página do livro em questão.
Devem ser lidas antes de iniciar a exploração do livro a fim de melhor direcionar o aprendizado dos alunos, podendo tirar melhor proveito dos recursos contemplados na ferramenta como um todo.
Learning Works é uma das ferramentas para ensino de Smalltalk mais utilizadas.
O desenvolvimento da ferramenta iniciou- se na Universidade de Stanford, sob a supervisão de Adele Goldberg.
Atualmente é um projeto sendo desenvolvido junto a empresa Neometron.
Embora não existam relatos formais, sabe- se da larga utilização da ferramenta por diversas pessoas ligadas a área de programação OO e Smalltalk.
Contribuições da ferramenta Learning Works A ferramenta Learning Works é considerada bastante importante no que diz respeito ao ensino programação OO utilizando Smalltalk como linguagem.
Em este contexto de programação, a ferramenta contribuiu bastante no processo de ensino-aprendizagem e disseminação da linguagem Smalltalk, por ser uma ferramenta de utilização gráfica, bastante simples, mas com a conceituação e apoio ao ensino de inúmeros conceitos importantes.
Baseado em animação, ele permite que os alunos aprendam os principais mecanismos da OO através da criação e manipulação direta de instâncias de objetos.
Analisando num contexto mais global de ensino do paradigma, o ambiente começa a apresentar alguns problemas no que diz respeito aos conceitos do paradigma como um todo.
Os conceitos do paradigma apresentados no ambiente, tal como classes, mensagens, tipos de mensagens, métodos, etc..
São mostrados com a sintaxe da linguagem Smalltalk, bastante diferente da sintaxe de outras linguagens orientadas a objetos e não tradicional.
Este enfoque pode passar a alunos iniciantes a idéia de que o paradigma de orientação a objetos e seus conceitos são baseados e possuem as características da linguagem.
Como já destacado, para o aprendizado real e efetivo do paradigma OO é importante fazer uma dissociação entre os conceitos do paradigma e as características de linguagens e metodologias de desenvolvimento de software, e centrar o ensino em aspectos de projetos e desenvolvimento de software.
Assim, a ferramenta Learning Works é considerada bastante importante na área de ensino de Smalltalk, a qual se propõe, mas perde por não prever e considerar o ensino de projeto OO como o ponto principal do aprendizado.
Micromundos, alunos ou desenvolvedores de software aprendem o paradigma de objetos, seus conceitos básicos e desenvolvem o pensamento em termos de objetos através da resolução de problemas de sua própria realidade, com a qual estão acostumados a lidar, e que passa a ser vista através de classes, objetos, troca de mensagens, colaborações, etc..
O ambiente que suporta a especificação de Micromundos orientados a objetos serve como ferramenta de apoio no ensino do paradigma no contexto de uma formação (isto é, um curso), não devendo ser utilizada como ferramenta única e isolada para o ensino.
Ela auxilia principalmente no desenvolvimento do pensamento em termos de objetos por parte de os alunos.
O ambiente é formado por três conceitos distintos:
O ambiente, que permite especificar e explorar Micromundos diversos, os micromundos em si, que representam porções do mundo real e um conjunto de diretrizes ou guias, que direcionam o aluno a como melhor explorar o Micromundo em questão para um melhor aprendizado.
As diretrizes apresentadas para os alunos também auxiliam os mesmos na criação e exploração de micromundos com a utilização do ambiente desenvolvido.
A interface com algumas diretrizes para a exploração de micromundos é apresentada na Figura 2.2.
O ambiente provê ferramentas gráficas para especificação e visualização de micromundos diversos e utiliza animação para representar as colaborações entre os diversos objetos da realidade sendo modelada.
Por ser implementado utilizando Smalltalk pode também ser utilizado para o ensino da linguagem em questão.
Em é apresentado de forma sucinta um exemplo de micromundo que representa uma cidade.
Alguns dos objetos padrão a serem especificados são hotéis, hospitais, livrarias, casas, pessoas.
Sobre estes objetos devem ser definidas operações que cada um sabe realizar e as relações existentes entre os mesmos.
Diferentes tipos de aplicações podem ser exploradas sobre um micromundo, por exemplo um sistema de hotelaria ou de retirada de livros numa biblioteca.
Através da criação de objetos, definição de responsabilidades e de colaborações entre os objetos e da simulação de situações num determinado micromundo o aluno vai aprendendo como objetos e suas relações devem funcionar a fim de resolver determinados problemas de forma orientada a objetos.
Os pontos importantes enfocados por o ambiente de suporte a Micromundos são o ensinoaprendizagem do paradigma através da resolução de problemas, especificação e modelagem de soluções orientadas a objetos, simulação de situações no micromundo especificado e ensino de Smalltalk como linguagem de programação OO de forma secundária, que levam ao desenvolvimento do pensamento em termos de o paradigma de orientação a objetos como um todo.
Contribuições da ferramenta Micromundos As contribuições apresentadas por o ambiente de Micromundos fazem referência ao ensino de conceitos básicos do paradigma de orientação a objetos e ao ensino de projeto de software OO.
Os autores têm uma preocupação muito grande com o aprendizado pleno e efetivo do paradigma como um todo, e não somente ensino de Smalltalk como linguagem de programação.
Este é um dos aspectos que torna este trabalho importante e bastante confiável no que diz respeito aos aspectos de ensino aprendizagem do paradigma.
Por ser baseado no ensino de projeto e no desenvolvimento do pensamento em termos de objetos, facilita o aprendizado global do paradigma OO.
Além de a proposta do ambiente para criação e manipulação do ambiente, conta- se ainda com a idéia das guias ou diretrizes para direcionar os alunos corretamente na exploração de micromundos, o que induz a um melhor aprendizado.
A proposta de utilização de micromundos que reflitam aspectos ou situações da vida real vivenciados por os alunos é também bastante motivador.
Um ponto importante levantado por os próprios autores diz respeito a relevância e importância dos três aspectos básicos enfocados no trabalho (o ambiente, os micromundos em si e as diretrizes ou guias).
Os autores afirmam que o ambiente é muito importante, mas que a escolha dos micromundos adequados para cada tipo de classe (grupo de alunos que se está ensinando) e a especificação e utilização de diretrizes corretas e adequadas são pontos fundamentais no processo de ensino-aprendizagem.
As grandes contribuições do ambiente de micromundos devem começar a ser notadas com a utilização do ambiente em salas de aulas, cursos a nível universitário e a nível empresarial e industrial, em os quais os micromundos utilizados e as diretrizes vão ser analisados de maneira prática e concreta ­ sendo provavelmente modificados e melhorados com o tempo.
Uma outra técnica para ensino de OO é apresentada em e novamente apresentada em, chamada CRC Cards.
É possível notar a ênfase dada à questão do ensino do pensamento em termos de objetos, baseada em ensino de projeto de software OO e não de programação OO, tanto em quanto em.
CRC Cards enfoca a especificação e documentação de três dimensões num projeto de software OO:
Classes, Responsabilidades e Colaborações (que definem CRC).
CRC Cards baseia- se no princípio que objetos são entidades que realizam operações e eventualmente cooperam entre si para realizarem tais operações.
A documentação de projetos é bastante enfocada, e cartões índice, em os quais são anotadas classes com suas respectivas responsabilidades e colaborações, bem como seus atributos e descrição de funcionalidades, são o meio contemplado por a técnica para a documentação dos projetos.
CRC Cards é baseada na metodologia RDD (Responsibility--Driven Design) de, inicialmente apresentada em.
RDD enfoca projeto de software OO de uma forma mais abrangente, apresentando o suportando outros aspectos além de Classes, Responsabilidades e Colaborações.
O processo de desenvolvimento de software em RDD é auxiliado através, de diretrizes para a especificação dos conceitos importantes da metodologia.
CRC Cards e RDD são bastante afins, no que diz respeito à conceituação do paradigma OO, e podem ser utilizadas juntas no processo de ensino-aprendizagem de projeto OO e do paradigma como um todo.
A técnica de CRC Cards é interessante para ensino inicial uma vez que simplifica o projeto em três dimensões, incentiva a documentação e proporciona um meio de comunicação entre os indivíduos durante e após a especificação do projeto, além de ser uma técnica puramente orientada a objetos (isto é, que só permite especificar software em termos de classes de objetos).
A partir de 1995, Wilkinson publicou diversos artigos que tratam da utilização de CRC Cards para ensino e desenvolvimento de software OO, como,,.
CRC Cards é tratada como uma técnica informal e não como uma metodologia de ensino ou desenvolvimento de software, mas é muito interessante no que diz respeito ao processo de ensino-aprendizagem do paradigma OO.
O uso de CRC Cards se dá basicamente em ambientes de empresas que estão iniciando a utilização de metodologias OO, mas está técnica vem sendo cada vez mais utilizada.
Um dos pontos importantes enfocados por Wilkinson diz respeito à discussão dos projetos em desenvolvimento (ou já desenvolvidos) como elemento para um melhor aprendizado de OO e para aumento de qualidade dos projetos, uma vez que CRC Cards também é uma ferramenta para documentação de projetos.
À medida que um projeto vai sendo desenvolvido, isto é, vão sendo definidas e documentadas as três dimensões importantes, tem- se um conjunto de cartões índices que servem para discussão das soluções feitas até ao momento.
Com um conjunto de cartões definido, total ou parcialmente, é possível, por exemplo, trocar os cartões entre dois ou mais desenvolvedores de software para que outro indivíduo avalie a adequação do mesmo, testar cenários de execução do sistema sendo projeto, a fim de comprovar a validade do sistema, etc..
Desta forma, idéias são lançadas em relação a a qualidade das soluções apresentadas, alterações são feitas nos cartões, modificando o sistema à medida que o mesmo vai sendo desenvolvido.
Afirma que a documentação dos projetos de forma clara e precisa contribui consideravelmente para a definição de um vocabulário comum entre os envolvidos no projeto e, logo, facilita a comunicação e a discussão dos mesmos.
Desta forma, além de ser mantida a memória do projeto documentada em cartões índices, quando os mesmos começam a ser criados e discutidos vão sendo definidos termos comuns do projeto utilizados por todos os integrantes.
Algumas ferramenta que implementam a técnica são discutidas em, e enfocam a documentação de projetos.
O aspecto da comunicação entre os indivíduos envolvidos no desenvolvimento é ressaltado, tanto durante como após a etapa de desenvolvimento de projetos, embora as ferramentas em questão não contemplem tal aspecto, sendo totalmente voltadas para a documentação do projeto em cartões índices.
Contribuições da metodologia CRC Cards Uma das contribuições importantes da metodologia CRC Cards diz respeito à simplificação do processo de projeto em três dimensões de classes, responsabilidades e colaboração, que são apresentadas e exploradas por alunos ou desenvolvedores de software iniciantes no paradigma OO.
Por ser uma metodologia de ensino totalmente orientada a objetos, por ser baseada em RDD (que é uma metodologia de projeto de software OO puramente OO), alguns dos problemas relativos à troca de paradigma podem ser mais facilmente amenizados.
Um outro aspecto importante da metodologia é o incentivo dado à documentação dos projetos como um todo, desde o início do processo.
A documentação dos projetos serve, num primeiro momento como uma forma de definir o vocabulário a ser utilizado por os indivíduos envolvidos no processo, que deve ser entendido e seguido por todos.
Assim, a comunicação entre os mesmos se torna mais simples, eficaz, o que colabora para o bom andamento do projeto e num provável aumento de qualidade.
O aspecto da comunicação entre os indivíduos durante e após a especificação do projeto também é apresentado como sendo um ponto importante para o desenvolvimento do mesmo, já que tende a aumentar a qualidade dos resultados.
Além disso a verbalização das idéias, problemas e soluções numa discussão qualquer auxilia na absorção do pensamento OO.
Uma carência de trabalhos e ferramentas que enfatizem ou mesmo dêem suporte a esta importante comunicação entre os indivíduos é detectada em, o que motiva ainda mais o estudo e especificação de ferramentas para tal.
Desenvolvimento de Software Cooperativo Desenvolvimento de software por si só é uma tarefa realizada de forma cooperativa, em a qual os diversos indivíduos envolvidos realizam trabalhos diversos e cooperam entre si visando chegar a um determinado fim, que é a especificação de um sistema de software.
Em um processo de desenvolvimento de software existem diversas fases por as quais deve- se passas, a saber, análise, projeto, implementação e testes.
Durante este processo, inúmeras pessoas trabalham em determinadas tarefas, especificando e desenvolvendo módulos de software que devem se comunicar entre si quando o sistema estiver pronto.
Desta forma, para que o sistema venha a funcionar da forma desejada, os indivíduos devem comunicar- se (por exemplo, indivíduos trabalhando nos mesmos módulos ou em módulos diferentes) durante o processo de desenvolvimento e quando estes módulos estiverem praticamente desenvolvidos.
O processo de comunicação dos desenvolvedores de software, se bem gerenciado, colabora com no desenvolvimento de software em relação a a qualidade, à velocidade de desenvolvimento, e à harmonia do processo.
Em o início do processo de desenvolvimento a comunicação entre os componentes se dá a fim de definir os objetivos e propósitos do projeto, bem como para definir o vocabulário comum do projeto, que define os termos a serem utilizados na aplicação.
Esta definição do vocabulário acontece geralmente com o apoio de profissionais especialistas na área da aplicação sendo desenvolvida.
Durante o desenvolvimento da aplicação em questão os indivíduos devem se comunicar e discutir as decisões sendo tomadas.
Ao longo de um processo, as vária alternativas de modelagem, projeto, implementação vão sendo consideradas por os respectivos responsáveis, seus para os e contras discutidos, e decisões vão sendo tomadas.
Cada decisão pode influenciar o trabalho de outros grupos (por exemplo, uma decisão tomada sobre o projeto de um módulo afeta a equipe de programadores envolvidos na implementação do mesmo).
Estes grupos podem também avaliar o trabalho já executado, detectando problemas antes não considerados, implicando em revisões.
Trabalhos como enfocam estes aspectos colaborativos e propõem ferramentas para auxiliar no processo de desenvolvimento de software, dando apoio ao aspecto cooperativo de desenvolvimento de projetos, por grupos de pessoas, uma das aplicações da área de CSCW (Computer-Supported Cooperative Work, Trabalho Cooperativo Apoiado por Computador), onde indivíduos podem estar trabalhando em locais fisicamente distribuídos e em momentos diferentes.
Esta perspectiva complementa o apoio dado por ferramentas Case, que geralmente abordam apoio à elaboração de documentação geral (especificação, projeto e código), gerências de configuração e versões, geração de código, etc..
Uma das vantagens associadas a ferramentas de CSCW para auxiliar o desenvolvimento de software e a comunicação existente no processo diz respeito à documentação dos projetos e das discussões e decisões tomadas durante o processo.
O suporte à discussão de alternativas de projeto leva a produtos de maior qualidade, bem como facilita a tarefa de manutenção, quando estas decisões tiverem que ser revistas.
Sem o registro dos &quot;porquês «das decisões, estes normalmente são perdidos ao longo de o processo.
Facilitando a comunicação entre membros do grupo, um maior número de alternativas pode ser considerado, bem como um maior número de ponderações sobre elas.
É importante ressaltar que a discussão deve ser estruturada, ou seja, baseada num modelo de argumentação, que especifique algum tipo de relacionamento entre as colocações feitas por os participantes durante a discussão.
Esta comunicação estruturada permite uma melhor organização das idéias colocadas, bem como um melhor rastreamento das mesmas em consultas futuras.
Dois trabalhos importantes no contexto desta dissertação estão descritos a seguir.
A ferramenta Ícaro dá ênfase ao desenvolvimento de software via Www e preocupa- se com a comunicação de forma simples entre os desenvolvedores de software envolvidos, que facilita o processo como um todo.
A metodologia de projeto contemplada por a ferramenta Ícaro é OMT, uma metodologia de projeto orientado a objetos bastante popular.
O trabalho GroupCRC apresenta como contribuição a este trabalho principalmente o apoio dado à metodologia de ensino de projeto orientado a objetos CRC, via Www.
Um trabalho bastante interessante e muito semelhante ao sendo proposto no presente trabalho é um ambiente de desenvolvimento de software cooperativo via Www chamado ICARO.
ICARO é uma ferramenta colaborativa para suporte ao processo de desenvolvimento de software, que visa documentar as decisões tomadas durante a evolução de projetos de software orientados a objetos e todo o raciocínio feito para tal.
A motivação para a implementação da ferramenta surgiu de uma experiência prática de desenvolvimento de software de forma colaborativa realizada de forma distribuída.
Um sistema foi desenvolvido no período de 12 meses, contando com um grupo de 14 pessoas, entre elas alunos de pós-graduação e profissionais de 3 empresas de desenvolvimento de software.
Os membros do projeto estavam localizados em 4 centros de trabalho em 2 cidades diferentes.
A metodologia utilizada para o desenvolvimento do sistema nas fases de análise e projeto foi OMT e grande parte da comunicação entre os integrantes do projeto era feita através dos diagramas produzidos por alguns dos integrantes.
Os diagramas eram revisados em reuniões de revisão que produziram inúmeros pedidos de alterações em tais diagramas.
Quando um pedido de alteração era aceito, uma requisição de alteração era enviada para responsável para que a mesma fosse efetuada.
Problemas durante a revisão de tais digramas ocorreram devido a o fato dos integrantes estarem geograficamente separados.
Durante o processo de requisição de alterações, até o recebimento do diagramas com as alterações, muitas vezes atividades de projeto e programação eram suspensas à espera das versões atualizadas dos diagramas.
Além disso, uma alteração num diagrama originava inúmeros outros pedidos de alteração em cascata.
Assim, os diagramas tinham que ser constantemente distribuídos entre todos os integrantes, os quais nem sempre possuíam a versão mais atual do diagrama de o qual tinha necessidade.
Revisões em diagramas tornaram- se difíceis quando inúmeras versões do mesmo estavam em mãos dos integrantes, gerando atrasos e implementações inadequadas do sistema.
A ferramenta ICARO foi então desenvolvida para auxiliar basicamente na comunicação entre os integrantes de projetos de software.
Consiste na extensão de uma ferramenta Case, para a geração automática de páginas Html dos diagramas OMT especificados.
Estas páginas podem ser então facilmente acessadas por todos os integrantes do projeto.
O processo de comunicação entre os indivíduos, as requisições de alteração, e a disponibilização dos diagramas alterados, feitos de forma não automatizada anteriormente, foram agregadas e automatizadas via Www na ferramenta.
Programadores têm acesso local a compiladores e outras ferramentas de desenvolvimento que necessitam, e acesso remoto aos diagramas OMT que utilizam para a implementação do sistema.
Arquitetos e desenvolvedores de software têm acesso local a ferramenta Case, para geração dos diagramas de análise e projeto OMT e podem facilmente gerar páginas HMTL dos mesmos.
Qualquer integrante do projeto pode fazer acesso para consulta aos diagramas via um navegador Www.
O processo de discussão de problemas, omissões ou não entendimento dos diagramas é realizado também via Www.
Os diagramas OMT são especificados em termos de elementos gráficos, que identificam as classes/ objetos, operações e relações entre os mesmos, que podem ser selecionados por integrantes do projeto e disparar um processo de discussão e argumentação.
O argumento apresentado por o indivíduo é documentado numa página HMTL ficando disponível para consulta e argumentação por qualquer outro integrante do grupo.
A discussão se desenvolve entre os integrantes e pode ter como resultado uma solicitação de alteração do diagrama feita através de um formulário de requisição de alteração.
Esta requisição é enviada para um comitê que deve analisar e discutir o pedido e decidir, ou não, por a alteração do diagrama em questão.
Se a alteração é aceita, a mesma é enviada para a pessoa encarregada através de um pedido de alteração, que deve realizar a mesma e disponibilizar a nova versão do diagrama na Www.
Experiências de utilização do ambiente foram realizadas por em fases bastante avançadas do desenvolvimento da própria ferramenta ICARO e, como descrito no artigo, novos testes e experiências deveriam ser realizados durante o ano de 1997, mas não existem relatos na bibliografia até o presente momento.
Contribuições da ferramenta Ícaro A ferramenta Ícaro contempla diversas funcionalidades interessantes, visando transpor dificuldades ligadas à comunicação de pessoas no desenvolvimento de software, as quais podem ser adaptadas ao contexto de ensino-aprendizagem do paradigma OO.
Alguns aspectos da ferramenta Ícaro importantes no contexto deste trabalho são:
Uma das metodologias de projeto mais importantes no paradigma OO;
Embora a ferramenta Ícaro seja voltada para o desenvolvimento de software OO de forma distribuída, tendo sido desenvolvida para utilização em empresas, outros aspectos apoiados também importantes no contexto de ensino são:
Distribuição e acesso de forma simples e rápida de os/ aos diagramas de projeto desenvolvidos e apoio à discussão destes diagramas durante o desenvolvimento do projeto como um todo.
Também no contexto de ensino de projeto OO ambos estes dois aspectos são interessantes e podem ser utilizados para melhorar e tornar mais simples e rápido o processo de ensino aprendizagem do paradigma.
A questão da discussão de projetos é também extremamente benéfica para o ensino, uma vez que colabora para o desenvolvimento do processo crítico do aluno, em relação a soluções dadas a problemas específicos.
Group CRC é uma ferramenta que suporta trabalho cooperativo por computador para a área de engenharia de software.
O projeto da ferramenta GroupCRC se deu no contexto de um projeto desenvolvido na Universidade de Canterbury, New Zealand, dá ênfase resolução de problemas de CSCW, apoiando a comunicação entre pessoas no processo de desenvolvimento de software, utilizando a técnica CRC Cards.
O processo de desenvolvimento de software é um processo essencialmente baseado no trabalho de grupos de pessoas que devem, necessariamente, cooperar entre si.
Os problemas enfrentados neste processo são classificados por Churcher em problemas individuais das pessoas envolvidas tais como, problemas em relação a versões da documentação gerada, organização de tal documentação, etc., e problemas com os grupos envolvidos no processo, basicamente em relação a a comunicação e troca de informações que deve existir entre elas.
Estes dois aspectos serviram como motivação para a especificação da ferramenta GroupCRC.
GroupCRC dá suporte à criação, manutenção e reuso de cartões índices CRC, no processo de projeto de software OO, bem como a comunicação de indivíduos durante o processo.
Cartões índices são criados por os indivíduos envolvidos no processo e discutidos num momento apropriado, quando já se tem alguma documentação consistente para tal.
Além de os cartões índices é possível criar e manipular diagramas de herança, inclusive para o processo de discussão.
Cartões e diagramas são criados de forma cooperativa por todos os indivíduos.
Um mecanismo que permite manter versões do material produzido está implementado na ferramenta.
Outro mecanismo importante contemplado, diz respeito a mecanismos de awareness (consciência), que chamam a atenção para modificações feitas por qualquer indivíduo durante o processo de desenvolvimento da aplicação.
O processo de discussão contemplado pode ser realizado sobre cartões índices quaisquer do projeto ou sobre diagramas de hierarquia de classes, sobre os quais podem ser feitas anotações diversas.
Uma discussão é chamada de sessão CRC Cards e contempla um conjunto de classes sendo discutidas, sendo que cada cartão de classe tem um dono, ou um indivíduo que está &quot;segurando «o cartão.
Uma discussão pode também ser contemplada por uma simulação de cenários da aplicação, verificando- se as relações de colaboração entre as classes e as responsabilidades das mesmas.
A interação entre os indivíduos é feita através de caixas de diálogo, listas de classes, anotações nos cartões e nos diagramas e mecanismos de awareness.
O projeto é documentado, sendo possível manter- se versões do mesmo, e todo o processo de interação entre os indivíduos também é mantido, guardando- se as anotações feitas por os indivíduos no processo de discussão.
Tipos diversos de relatórios podem ser gerados a partir de um cartão índice ou de um conjunto de cartões, sendo possível ver as características e as anotações feitas sobre os mesmos.
Contribuições da ferramenta GroupCRC A ferramenta GroupCRC contempla diversas funcionalidades interessantes, tanto em relações aos problemas de comunicação de pessoas no desenvolvimento de software OO, quanto em relação a lacunas não preenchidas por a própria metodologia CRC Cards no que diz respeito à documentação dos projetos desenvolvidos.
Alguns dos pontos importante da ferramenta GroupCRC em relação a o desenvolvimento e especificação do presente trabalho são:
Mesmo tendo sido desenvolvida para desenvolvimento de software OO, no contexto engenharia de software, para utilização em empresas, vários aspectos são importantes e podem ser adaptado e utilizados no contexto de ensino:
Desenvolvimento de software cooperativo e distribuído por parte de alunos, acesso à documentação gerada de maneira simples e rápida, manutenção de versões dos cartões e diagramas de projeto desenvolvidos, apoio à discussão da documentação desenvolvida visando melhorar sua qualidade e desenvolver senso crítico e raciocínio nos alunos.
Ensino Colaborativo Apoiado por Computador O avanço da tecnologia de redes de computadores tem influenciado substancialmente no processo de ensino-aprendizagem.
Escolas, universidades e empresas estão descobrindo e desenvolvendo novas formas de ensinar/ aprender, de disponibilizar informações, de utilizar a tecnologia disponível.
O termo Collaborative Learning (Ensino Colaborativo) é o termo geral que define técnicas de ensino revolucionárias que têm como objetivo promover o aprendizado através de tarefas colaborativas, com os alunos trabalhando em grupo no desenvolvimento de tarefas específicas.
Ensino Colaborativo define o ensino/ aprendizado de uma forma ativa, em o qual professores e alunos devem se portar como elementos ativos a fim de melhor explorar e desenvolver o conhecimento mútuo.
Os alunos não devem ser ensinados, mas meios que possibilitem aos alunos desenvolverem seu próprio aprendizado e compartilhar- lo com os colegas devem ser providos por o professor.
Os alunos são participantes ativos no processo de aprendizado, uma vez que colaboram entre si, trocando idéias e conhecimento uns com os outros, durante o desenvolvimento das tarefas propostas por o professor.
Um ponto de ensino colaborativo considerado importante por a autora em relação a os alunos é que os mesmos devem construir seu próprio conhecimento através da resolução prática de exercícios, que englobem conceitos quaisquer vistos na prática.
Para auxiliar no processo de aprendizado os alunos devem colaborar entre si, discutindo problemas, alternativas de solução, etc., sendo este um processo social de relacionamento entre os alunos.
Sabe- se, por experiência, que os alunos aprendem mais através da resolução de problemas, trabalhando em grupos, compartilhando os problemas encontrados e o conhecimento adquirido durante o processo.
Este processo colaborativo possibilita aos alunos desenvolverem discussões diversas em relação a o problema, em as quais dificuldades são apontadas e decisões são tomadas visando definir soluções para tais dificuldades.
Desta forma todos os alunos dão sua contribuição no processo de seu próprio aprendizado e do aprendizado dos colegas.
O pensamento crítico do aluno também é desenvolvido através das discussões, no momento em que os alunos devem argumentar sobre as decisões a serem tomadas (ou já tomadas) durante a resolução do problema, enfatizando suas possíveis vantagens e desvantagens.
Professores também são participantes ativos.
As tarefas a ele associadas iniciam com o processo de definição e estruturação das tarefas a serem realizadas por os alunos.
As tarefas propostas devem ser motivantes para os alunos e, por isso, devem ser minuciosamente planejadas e definidas a fim de possibilitar e motivar o desenvolvimento cooperativo dos mesmos por parte de os alunos.
As tarefas do professor baseiam- se na estruturação das atividades dos alunos, levando em conta aspectos colaborativos como desenvolvimento de exercícios em grupo, discussões dos problemas e das soluções, etc..
E no acompanhamento das tarefas dos alunos durante o desenvolvimento do processo.
Durante a execução das tarefas por os alunos o professor deve estar disponível para possíveis dúvidas e questões dos alunos, mas deve acima de tudo fazer um acompanhamento mais específico do andamento do trabalho dos alunos.
Este processo de ensino colaborativo é baseado em técnicas que permitam desenvolvimento prático de trabalhos por parte de o alunos, principalmente em grupos, dentro de os quais é possível desenvolver os exercícios de forma colaborativa, com a participação de todos os alunos.
Além disso, com tarefas práticas sendo resolvidas em grupo os alunos discutem entre si os problemas e suas possíveis soluções, avaliando para os e contras de cada alternativa.
De esta maneira os alunos além de aprender os conteúdos propostos têm a oportunidade de desenvolver raciocínio lógico e crítico em relação a o processo de desenvolvimento de software.
Este processo de ensino de projeto colaborativo é bastante semelhante ao processo de desenvolvimento de software de maneira geral.
Em ambos os processos grupos de indivíduos estão reunidos e trabalham de forma cooperativa visando a resolução de uma determinada tarefa.
O que difere é que no processo de desenvolvimento de software a ênfase é dada a especificação do software enquanto que no processo de ensino colaborativo o objetivo principal é o aprendizado e o desenvolvimento do pensamento crítico do aluno, sendo o desenvolvimento de software um meio utilizado para isso.
Ensino colaborativo apoiado por computador (Computer Supported Collaborative Learning -- CSCL) é o termo usado para definir ensino colaborativo com o uso de tecnologias para monitorar e apoia a interação dos envolvidos no processo de ensino aprendizagem.
Algumas das tecnologias que podem ser utilizadas são redes de computadores, serviços de Internet, áudio e videoconferência, e software cooperativos.
O uso da tecnologia tende a ampliar os benefícios identificados em práticas de ensino cooperativo, desde em relação a a motivação do aluno quanto em relação a as práticas propriamente ditas.
Serviços de Internet, como e-mail, news, conferências eletrônicas, ftp, Www, etc, têm sido utilizados como meio para compartilhar informações e conhecimento por indivíduos envolvidos no processo de ensino-aprendizagem, ambos professores e alunos.
Diversos ambientes de ensino colaborativo tem sido especificados e implementados utilizando tais ferramentas.
As facilidade oferecidas por a tecnologia da Internet, tais como rapidez de interação entre indivíduos fisicamente distantes e de acesso a informações são extremamente importantes no processo de ensino colaborativo, uma vez que resolvem alguns dos problemas relativos ao processo de colaboração e compartilhamento.
Diversos ambientes de ensino beneficiam- se atualmente com tais vantagens.
Os ambientes atuais focam, basicamente, atividades de organização, exploração e distribuição de informações entre grupos de alunos, que é um dos aspectos enfocado por o ensino colaborativo.
Ambientes deste tipo oferece os recursos para disponibilização de material e informações diversas importantes no contexto de um curso Um dos aspectos importantes do ensino colaborativo baseia- se no suporte a interação e comunicação dos indivíduos envolvidos durante todo o processo de ensino-aprendizagem.
Algumas destas atividades são:
Comunicação entre professor e alunos, troca de experiências e conhecimento e compartilhamento de informações entre alunos num grupo, troca de idéias, dificuldades e soluções entre alunos de grupos diferentes, monitoramento dos alunos por parte de o professor, etc..
Embora estas sejam algumas das atividades mais importantes no processo é difícil encontrar na literatura (e na prática mais ainda) sistemas automatizados que contemplem tais aspectos.
Este Capítulo apresenta a estrutura de um curso de orientação a objetos, voltado para o ensino de projeto de software OO, usando RDD (Responsibility--Driven Design).
Os aspectos importantes da estrutura do curso foram definidos visando transpor os problemas de ensino do paradigma OO apresentados na Seção 2.1 do Capítulo 2, deste documento.
As decisões tomadas a respeito de a estrutura deste curso são apresentadas e justificadas neste Capítulo, embora sejam baseadas nos problemas de ensino-aprendizagem descritos no Capítulo 2.
Aspectos importantes do curso O curso é centrado no ensino de projeto OO, utilizando- se a metodologia RDD, para alunos de nível iniciante no paradigma OO.
Pressupõe- se também, pouca ou média experiência em desenvolvimento de software, embora o curso possa a ser adaptado e então aplicado a indivíduos com experiência em OO.
Dá- se ênfase a projeto de software OO, por este ser o aspecto mais importante no aprendizado tanto do paradigma OO, como já detalhado no Capítulo 2 e enfatizado por,, uma vez que desenvolve no aluno a capacidade de decompor sistemas em termos de objetos.
Os alunos devem aprender e desenvolver a capacidade de especificar uma aplicação em termos de objetos e troca de mensagens e colaborações entre os mesmos, sendo esta uma das partes mais difíceis e complicadas no processo.
O curso visa formar recursos humanos que possam trabalhar com o paradigma OO de forma plena e não só com linguagens específicas, como simples programadores.
O curso é dirigido ao ensino de alunos iniciante no paradigma OO, isto é, eles possuem pouco ou nenhum conhecimento/ experiência com os conceitos do paradigma, linguagens de programação, e/ ou técnicas de desenvolvimento de software OO.
Contudo, pressupõe- se que eles possuem bom conhecimento e experiência no mínimo em programação usando linguagens e técnicas estruturadas, o que geralmente interfere de forma prejudicial no aprendizado do paradigma OO, como já destacado no capítulo2.
O curso foi definido no contexto acadêmico, pensando- se no ensino de alunos de graduação de nível iniciante.
Nenhuma ênfase é dada neste trabalho a alunos/ indivíduos em ambientes comerciais, industriais, etc, por a falta de experiência da autora em tais ambientes.
Acredita- se contudo que a adaptação a tal contexto não apresente grande dificuldade.
A metodologia de projeto RDD foi escolhida por ser considerada bastante benéfica para o ensino básico de projeto OO,, por a apresentação simples e clara de diretrizes de projeto, por a ênfase dada à documentação de projetos, que, se bem utilizadas, tendem a guiar o aluno durante o processo de desenvolvimento de projeto.
RDD é uma metodologia de projeto OO pura, que permite especificar soluções somente em termos de objetos, não mesclando ou utilizando qualquer conceito de outros paradigmas.
A ênfase dada à documentação de projetos, através de cartões índices, embora bastante simples, permite comparar e analisar diversos projetos previamente documentados.
Aspectos benéficos no ensino de projeto OO utilizando RDD puderam ser comprovados por a autora num curso ministrado para alunos de graduação e pós-graduação na PUCRS.
É importante destacar que, embora considerada benéfica para o ensino inicial de projeto OO, RDD não é extensivamente utilizada como metodologia de desenvolvimento de software de grande porte, uma vez que não oferece recursos e diagramas adequados para documentação de soluções complexas.
Geralmente RDD é utilizada para projetos de pequeno e médio porte.
Um pequeno resumo, descrevendo os aspectos importantes da metodologia RDD e sua filosofia de desenvolvimento de software é apresentado a seguir.
Os aspectos apresentados sobre RDD na Seção 3.2 são aspetos importantes para o desenvolvimento deste trabalho, não sendo apresentados detalhes sobre toda a metodologia.
Maiores detalhes podem ser consultados em RDD -- Responsibility--Driven Design A metodologia RDD é uma metodologia de desenvolvimento de software, que contempla as fases de análise e projeto num ciclo de desenvolvimento.
Projeto de software Orientado a Objetos é definido em como um processo de transformação de uma descrição de requisitos numa especificação detalhada baseada em classes de objetos.
Esta especificação deve conter uma descrição o mais completa possível dos papéis e responsabilidades dos objetos e da maneira por a qual estes se comunicam entre si.
É importante ressaltar que:
O processo de desenvolvimento de software é totalmente interativo, sendo possível (e necessário) voltar atrás no projeto para realizar revisões visando melhorias e mais qualidade sempre que se achar necessário (como em qualquer processo de desenvolvimento de software);
O resultado do processo não é o produto final.
Em a verdade, nenhum projeto de software é final, um projeto de software está sempre sob um processo de revisão e melhoria;
O processo de projeto não é um processo rígido, nem as diretrizes apresentadas são rígidas, mas servem como base ou guias, principalmente quando não se tem muita experiência no processo.
O processo de projeto OO da metodologia RDD parte de uma descrição de requisitos da aplicação a ser modelada, que deve ser o mais completa e detalhada possível.
O processo de projeto de RDD é dividido em duas fases, a saber, fase exploratória e fase de análise.
A fase exploratória tem como objetivo a definição das classes do sistema, das responsabilidades de cada classe e das colaborações existentes entre as classes.
Em a fase de análise o projeto inicial é revisado e, em particular são identificadas hierarquias de classe, subsistemas e protocolos.
Em o contexto deste trabalho, só a fase de exploratória está sendo abordada, por abranger conceitos básicos do paradigma e de projeto OO, sendo a base para o ensino de iniciantes.
Fase Exploratória A fase exploratória tem como objetivo principal definir as classes do sistema, as responsabilidades de cada uma das classes e as colaborações existentes entre as classes.
Logo, existem três etapas chave na fase exploratória da metodologia RDD, a saber:
E/ ou servidoras num sistema;
A primeira tarefa a ser realizada na fase exploratória é a leitura da especificação dos requisitos do sistema a fim de entender o problema e o domínio da aplicação, sendo todo o processo baseado nesta descrição (que muitas vezes vai sendo alterada durante o processo).
Segue- se com a procura e definição de classes, responsabilidades e colaborações tendo- se, ao final de cada uma destas etapas, a documentação do resultado das mesmas nos cartões índices.
Em cada uma destas etapas são apresentadas diretrizes que guiam o aluno durante o processo, auxiliando/ guiando- o quando o mesmo não sabe como nem por onde continuar o projeto.
Em a Etapa de Classes as diretrizes enfatizam, num primeiro momento, a identificação de todas as possíveis classes do sistema, sem fazer restrições maiores.
A seguir, diretrizes que auxiliam a detectar as classes mais prováveis e descartar as possíveis &quot;não classes «do sistema são apresentadas.
Em este processo, algumas diretrizes enfatizam características e aspectos que podem justificar a escolha ou não de classes previamente identificadas.
Quando tem- se uma lista mais ou menos definitiva das classes do sistema apresenta- se algumas diretrizes que auxiliam na especificação de características de classes como nome, descrição, atributos, etc..
Três atividades são guiadas por as diretrizes apresentadas na Etapa de Responsabilidades:
Identificação das ações a serem realizadas/ apoiadas no sistema como um todo, num primeiro momento, listando as mesmas de forma seqüencial, distribuição das reponsabilidades encontradas nas classes definidas na etapa anterior e revisão das etapas anteriores.
Em a Etapa de Colaborações são definidas relações do tipo cliente-servidor entre as classes.
Assim, diretrizes para definição de quais classes pedem auxílio/ serviços para outras classes e quais as classes oferecem serviços sendo pedidos são apresentadas nesta etapa.
Além disso diretrizes que apoiam a revisão das etapas anteriores são apresentadas, uma vez que neste momento temos uma especificação do projeto em estado bastante avançado e mais conhecimento sobre a semântica da aplicação como um todo.
Documentação da fase exploratória Cada classe é representada num único cartão, chamado de cartão índice, em o qual são anotadas todas as informações referentes aos objetos desta classe, conforme mostrado na Figura 3.1.
Em a parte frontal do cartão estão descritos o nome da classe, as responsabilidades da mesma e as colaborações existentes com outras classes a fim de realizar as responsabilidades a que se destina.
Em a parte de trás do cartão, é colocada a descrição do propósito da classe e uma lista dos atributos eventualmente identificados durante o processo.
O nome da classe é descrito através de um substantivo ou de uma locução nominal significativa.
As responsabilidades são representadas através de uma frase que descreve seu objetivo principal.
As colaborações são representadas por o nome da classe colaboradora com determinada responsabilidade.
Estrutura do Curso O curso alterna partes teóricas, onde conceitos importantes são apresentados, e partes práticas, em a qual exercícios são propostos por o professor, realizados por os alunos e discutidos durante e após a resolução dos mesmos.
A parte teórica serve para fundamentar os conceitos do paradigma OO, bem como conceitos de desenvolvimento de software OO (projeto em especial), e a técnica de projeto específica RDD.
Para esta parte do curso podem ser utilizados recursos tradicionais, como apresentação de conceitos em sala de aula, leitura de artigos, disponibilização de material via Www, etc..
Não é dada ênfase neste trabalho à parte teórica uma vez que a contribuição deste trabalho centraliza- se na parte prática do curso, onde a teoria é aprendida por a sua aplicação em exercícios de projeto de pequeno/ médio porte.
As partes práticas são extremamente importantes no curso e contemplam o desenvolvimento cooperativo de exercícios por parte de os alunos e a discussão dos mesmos durante e após seu desenvolvimento.
Elas permitem aos alunos a aplicação prática dos conceitos vistos e o desenvolvimento de pensamento e raciocínio crítico em relação a as soluções desenvolvidas por si próprios ou por outros alunos.
Para a parte de realização de exercícios, os alunos devem se organizar em grupos e desenvolver, em sala de aula ou fora de ela, tarefas propostas por o professor, no prazo estipulado por o mesmo.
Esta parte é considerada bastante importante, uma vez que permite aos alunos colocar em prática os conceitos vistos na parte teórica do curso e a partir de esta experiência, construir e consolidar seu conhecimento a partir de a resolução de dúvidas, busca de soluções para os problemas e confirmação do conhecimento adquirido.
Além disso, como o objetivo do curso é possibilitar ao aluno o aprendizado do paradigma OO de uma formal ampla e total, nada mais importante do que trabalhar com os conceito e aspectos de tal paradigma na prática.
A discussão das soluções encontradas por os alunos para os exercícios propostos tem como objetivo principal desenvolver o senso crítico dos alunos, deixando- os aptos a discutir suas soluções, baseando- se nas decisões de projeto tomadas durante o desenvolvimento do exercício.
Em esta parte do processo, os alunos devem justificar aspectos de sua solução baseados nas diretrizes da metodologia e em requisitos do sistema sendo desenvolvido.
Parte Teórica Partes teóricas do curso devem contemplar a conceituação dos aspectos importantes para o desenvolvimento de software OO.
Devem possibilitar ao aluno o entendimento dos conceitos imprescindíveis para a realização dos exercícios propostos, em os quais os aspectos aprendidos na teoria serão colocados em prática.
Os aspectos a serem apresentados são colocados em três categorias:
Os conceitos apresentados em cada uma das categorias acima devem ser complementados com exemplos, a fim de facilitar o entendimento e o relacionamento dos mesmos com situações/ aplicações da vida real.
Mesmo sendo uma parte teórica, em a qual se tem basicamente exposição dos conceitos por parte de o professor ou leituras dirigidas, deve- se utilizar mecanismos práticos, a fim de envolver os alunos.
Os conceitos básicos do paradigma OO a serem apresentados são:
Objeto, classe, encapsulamento, troca de mensagem, herança, superclasse, subclasse, classes abstratas, redefinição, sobrecarga, hierarquia de classes, polimorfismo, entre outros.
A apresentação destes conceitos deve ser feita de forma gradual, sempre apresentado conceitos relacionados num mesmo momento ou situação, de forma a mostrar as relações existente.
O processo de desenvolvimento de software, de uma forma geral, deve ser apresentado a fim de dar aos alunos uma visão mais ampla do processo.
Alunos de nível iniciante geralmente desconhecem o processo de desenvolvimento de software como um todo, com etapas como análise, projeto, implementação, testes, manutenção, etc..
O que estes alunos conhecem é basicamente uma linguagem de programação específica (geralmente do paradigma estruturado).
É importante que os alunos comecem a aprender sobre desenvolvimento de software como um processo, que visa aumentar a qualidade, diminuir custos e tempo de manutenção, etc..
A apresentação dos conceitos importantes, durante a parte teórica, deve ser mesclada com exemplos que reflitam situações do mundo real, a fim de mostrar utilizações práticas do paradigma aos alunos.
Os conceitos devem ser apresentados de forma a descreverem a realidade do aluno, mostrando a utilização do paradigma em aplicações ou situações de seu interesse.
A parte teórica que enfoca RDD deve contemplar a filosofia e os principais aspectos da metodologia, apresentando suas fases de forma resumida.
Em a apresentação da fase exploratória, cada uma das diretrizes deve ser apresentada (podem ser agrupadas com outras diretrizes relacionadas) de forma bastante clara, que se mostre aplicações práticas da mesma.
Parte Prática A parte prática é considerada a mais importante do curso.
É nesta fase que os alunos devem aplicar os conceitos vistos, mediante a realização de um conjunto de exercícios propostos por o professor.
Outro ponto importante neste fase é a discussão da solução dos exercícios após a realização dos mesmos.
Desta forma os alunos cooperam para resolução de problemas, desenvolvem uma aplicação real e aplicam de forma prática os conceitos vistos.
Para a realização dos exercícios propostos os alunos devem se organizar em grupos, a fim de trabalharem de uma forma cooperativa, discutindo entre si possíveis alternativas de solução.
Este aspecto de grupos e colaboração entre os alunos é altamente estimulado visando desde o início integrar- los para que desenvolvam espírito de equipe e colaboração.
Em a verdade, todo o processo de desenvolvimento de software é um processo que envolve diversos indivíduos realizando tarefas em conjunto, discutindo soluções, alterando os resultados à medida que diferentes alternativas são levantadas -- e é esse processo que deve ser passado para os alunos.
Desta forma o conhecimento adquirido por um aluno é transmitido para os outros, e assim sucessivamente, e todos os alunos vão se ajudando mutuamente no processo como um todo.
Em a fase de discussão das soluções, após a realização de um exercício, os grupos devem ser dissolvidos e cada aluno deve participar apresentando contribuições individualmente.
Em este momento, cada aluno deve construir ou concretizar seu próprio conhecimento da melhor maneira possível.
Além disso, neste ponto, considera- se que os alunos já devem possuir conhecimento e um pouco de experiência no processo de desenvolvimento de software para poderem justificar as escolhas de projeto feitas por o seu grupo, para analisar partes de projetos com problemas e identificar os erros existentes, propor melhores alternativas para soluções apresentadas, etc..
A discussão dos projetos visa reforçar e consolidar o conhecimento adquirido durante a resolução de exercícios e desenvolver o pensamento crítico de cada um dos alunos.
Este processo de discussão deve acontecer de forma síncrona.
O processo de resolução de exercícios, com as definições dos tipos de exercícios contemplados no curso, bem como o processo de discussão de soluções encontram- se descritos nas seções a seguir.
Os exercícios propostos devem apresentar dificuldades de forma gradual, partindo- se de exercícios bem simples, de tamanho e complexidade reduzida, até o desenvolvimento de um projeto completo, passando- se por todas as fases de projeto.
Em os exercícios em fase inicial os grupos necessitam de um acompanhamento maior e mais rígido por parte de o professor devido a a pouca experiência que possuem nos conceitos sendo utilizados e no processo de desenvolvimento.
Assim, a princípio os exercícios devem ser simples e de baixa complexidade, e os grupos de alunos devem ser acompanhados por o professor com mais freqüência.
À medida que os alunos adquirem alguma experiência e sentem- se mais confortáveis na realização dos exercícios, os mesmos não precisam apresentar resultados parciais ao professor como forma de acompanhamento, passando a desenvolver exercícios que apresentam um maior grau de complexidade de forma independente por períodos mais longos.
Pensando desta maneira, propõe- se contemplar exercícios que suportem o trabalho dos alunos em fases diferentes de desenvolvimento e experiência em que os mesmos se encontram.
Três tipos de exercícios são definidos no curso, que devem ser utilizados em diferentes partes do processo de resolução de exercícios:
Passos, exercícios de etapa e exercícios finais.
Os tipos de exercícios possíveis e a ordem de aplicação dos mesmos são apresentados na Figura 3.3.
Cada tipo de exercício é baseado num assunto de granularidade diferente, e define um ponto de avaliação dos resultados produzidos.
Qualquer tipo de exercício, conforme definição da técnica RDD, é baseado numa especificação de requisitos.
Também, qualquer especificação de requisitos implica as atividades executadas na seguinte seqüência:
Encontrar e definir classes, definir e distribuir responsabilidades e encontrar e definir colaborações.
De acordo com o conhecimento e nível de experiência dos alunos, o professor estrutura estas atividades num conjunto de passos e exercícios de etapa, o que resulta numa avaliação de resultados parciais mais freqüentes, ou num exercício final.
Um exercício do tipo passo é definido a partir de um conjunto de diretrizes de uma etapa RDD relacionadas entre si.
Passos visam diminuir a complexidade de exercícios de etapa, uma vez que as diretrizes afins, a serem aplicadas numa etapa RDD qualquer, são agrupadas num passo, diminuindo a quantidade de tarefas a serem realizadas e a dificuldade de aplicação das mesmas.
A aplicação de todas as diretrizes, desta forma, torna- se mais simples e clara uma vez que são definidos objetivos específicos para cada passo a ser realizado.
Desta forma, os alunos devem se sentir mais confortáveis com o processo num primeiro momento, uma vez que a vasta quantidade de diretrizes está organizada de forma clara e racional.
A aplicação das diretrizes torna- se mais simples, uma vez que passos são apresentados de forma gradual para que os alunos desenvolvam seus projetos.
A aplicação gradual das diretrizes auxilia no sentido de guiar o aluno no desenvolvimento do projeto de forma orientada a objetos, e não da forma estruturada como estão acostumados.
Forçar os alunos a aplicar as diretrizes os faz refletir sobre concepção OO, ajuda a estabelecer diferenças entre OO e projeto de software estruturado, etc..
A definição de passos num exercício pode ser justificada por:
Os alunos não sabem por onde começar o desenvolvimento de um exercício de etapa, já que os mesmos compreendem diversos passos relacionados, os alunos consideram- se confortáveis com o entendimento da parte teórica dos conceitos e das diretrizes e acham as diretrizes de RDD extremamente simples e sua aplicação desnecessária, preferindo seguir sua intuição, o que geralmente leva a projetos incompletos e inconsistentes, e o professor passa a ter um controle maior sobre o desenvolvimento dos exercício por os grupos, tornando mais fácil e precoce a detecção de problemas de aprendizado e desenvolvimento, uma vez que ao final de cada passo deve ser entregue a solução para o professor.&amp;&amp;&amp;
Os passos dentro de uma etapa RDD devem ser definidos numa ordem lógica de aplicação das diretrizes, tornando mais simples o desenvolvimento dos mesmos, e liberados para os alunos nesta mesma ordem, no momento considerado oportuno e adequado por o professor.
Um passo deve ser visto como um exercício qualquer e desenvolvido com a mesma seriedade que seria aplicada a um exercício de etapa ou um exercício final de curso.
Assim sendo, os alunos devem se reunir em grupos, trabalhar em cima de as diretrizes do passo proposto por o professor e entregar a solução do passo desenvolvida, na data definida por o professor.
Desta forma os alunos começam a manter contato com o processo de desenvolvimento de software de uma forma gradual, amenizando alguns dos problemas que possam levar a problemas na especificação das soluções.
Tarefas específicas e claras são propostas aos alunos, que devem seguir a risca, neste primeiro momento, a aplicação das diretrizes de RDD.
Os grupos de alunos devem realizar um conjunto de passos em cada uma das etapas RDD.
Os passos em que os alunos apresentam dificuldades devem ser enfatizados, tanto com um reforço na parte teórica quanto com a repetição do desenvolvimento do mesmo.
A quantidade de vezes que passos devem ser desenvolvidos ou repetidos deve ser definida por o professor, de acordo com as necessidades dos grupos de alunos.
Geralmente estas necessidades são determinadas por problemas que os alunos apresentam em suas soluções.
Após a realização de um conjunto de passos para cada uma das etapa RDD os alunos começam ganhar experiência no processo e confiança em sua capacidade própria de desenvolvimento.
Em o momento oportuno, que deve ser definido por o professor, deve- se passar para o desenvolvimento de exercícios de etapa.
Cada exercício de etapa engloba conceitos referentes a uma das três etapas da fase exploratória de RDD:
Classes, responsabilidades e colaboração.
Uma mesma definição de requisitos pode (e deve) ser utilizada para realização de exercícios nas três etapas, a fim de dar a oportunidade aos alunos de ter contato com o processo incremental e interativo do desenvolvimento de software.
Um conjunto de exercícios de etapa devem ser desenvolvidos para cada uma das etapas RDD e acompanhados por o professor somente ao final do desenvolvimento do mesmo.
Uma mesma descrição de requisitos pode (e deve) ser utilizada para as três etapas, de forma seqüencial, respectivamente para as etapas de classes, responsabilidades e colaborações.
Durante o desenvolvimento de um exercício de etapa, os alunos devem trabalhar de forma mais livre e independente do que em exercício do tipo passo, embora o professor esteja sempre disponível para auxiliar- los no que for preciso.
Além disso os alunos devem ser incentivados a discutirem problemas e soluções com outros grupos, visando transpor suas dificuldades com o auxílio de outros colegas.
A o final de cada etapa os grupos devem entregar a solução encontrada para o exercício proposto, para ser analisada e verificada por o professor.
À medida que as soluções são consideradas satisfatórias por o professor, inicia- se a resolução do exercício numa nova etapa RDD, que pressupõe o mesmo processo de exercício de etapa descrito anteriormente.
A quantidade de exercícios a serem realizados em cada uma das etapas RDD deve ser definida por o professor de acordo com o desenvolvimento dos grupos em cada uma das etapas.
A definição de novos exercícios de etapa e a realização de inúmeros exercícios para cada etapa deve ser baseada nas dificuldades apresentadas por os grupos que devem ser transpostas antes da transição para a etapa RDD seguinte.
É possível a utilização de uma descrição de requisitos somente para a etapa de classes, para a realização da etapa de classes e de responsabilidades e para a realização das três etapas em de maneira seqüencial.
Para que um grupo possa passar de um exercício de etapa para outro é necessário a entrega de material ao professor, para análise e verificação da qualidade do mesmo.
A Figura 3.4 resume o processo de exercício de etapa.
A realização de exercícios finais não apresenta nenhum ponto formal de acompanhamento por parte de o professor, entre a definição e disponibilização da descrição dos requisitos do projeto em questão e a entrega do projeto desenvolvido.
Exercícios finais pressupõem que os alunos já possuem desenvoltura e experiência para realizarem sozinhos um projeto do início ao fim, passando por todas as fases da metodologia RDD.
Também não se força que mais que as diretrizes sejam aplicadas, muito menos numa ordem específica, pois os alunos, neste ponto, já devem ter desenvolvido o pensamento OO.
Um conjunto de um ou mais exercícios finais devem ser disponibilizados por o professor a fim de consolidar o aprendizado dos alunos e encerrar o processo.
Os projetos entregues, no final desta fase, servem como material para avaliação dos grupos por parte de o professor.
A realização de exercícios finais deve ser definida por o professor em função de o desenvolvimento e avanço dos grupos em relação a o processo, isto é, exercícios finais devem ser aplicados quando todos os grupos ou grande parte dos alunos mostram, através de suas soluções, capacidade para o desenvolvimento de um projeto completo, sem passos ou exercícios intermediários.
É claro que em qualquer momento durante o desenvolvimento do exercício o professor deve estar disponível para quaisquer dúvidas dos alunos.
A discussão e troca de idéias entre os grupos também é incentivada durante o desenvolvimento do projeto.
A Figura 3.5 resume o processo de exercício final.
Discussão de exercícios A discussão de exercícios é outra parte essencialmente importante da parte prática, juntamente com a resolução de exercícios.
A discussão, além de reforçar os conceitos do paradigma e o processo de projeto OO, visa desenvolver pensamento e raciocínio crítico nos alunos, uma vez que os mesmos devem criticar soluções (suas próprias e outras soluções diversas) identificando pontos positivos e problemas.
Esta prática tem como objetivo principal fazer com que os alunos desenvolvam o pensamento em termos de objetos, transpondo a maneira estruturada de especificar soluções.
Em esta parte os alunos tem oportunidade de se dar conta do aprendizado ou dos aspectos que não aprenderam.
Quando um indivíduo comunica- se ele consolida o aprendizado, se dando conta dos aspectos que aprendeu.
Conceitos até o momento não aprendidos podem ser discutidos com os colegas e o aluno tem mais uma oportunidade para aprender.
Dois tipos de discussão são previstos por o professor.
Discussões que podem acontecer durante o desenvolvimento de exercícios, dependendo das dúvidas e dificuldades dos alunos, e discussões após o desenvolvimento de exercícios, sejam eles passos, exercícios de etapa ou exercícios finais.
Os processos de discussão durante e após o desenvolvimento de exercícios são chamados respectivamente discussão de dúvidas (discussão informal) e debate ou (discussão formal).
A discussão de dúvidas é também chamada de discussão informal por não ser formalmente pensada e organizada por o professor, e sim iniciada e desenvolvida a partir de dúvidas dos alunos.
A idéia de uma discussão de dúvidas é que quando os alunos encontrem dificuldades no processo eles exponham seus problemas para o grupo, iniciando uma discussão que é desenvolvida por os alunos e professor.
A dificuldade encontrada pode ser em relação a conceitos do paradigma que os alunos não tenham entendido, ou em relação a a aplicação de conceitos do paradigma ou diretrizes da metodologia RDD.
Mas este processo seria o ideal, e não acontece desta forma devido a dificuldades tanto em sala de aula quanto extra-classe.
Em um ambiente de aula convencional, isto é, sala de aula, com grupos reunidos resolvendo o exercício proposto, o processo de discussão de dúvidas deve ser organizado e mediado por o professor, embora deva ser iniciado por dúvidas de alunos.
Em um primeiro momento os alunos tendem a dirigir suas dúvidas ao professor, que deve incentivar os demais alunos a participarem da resolução das dúvidas dos colegas.
A participação não é obrigatória, mas todos os alunos são incentivados a participar, tanto expondo seus problemas quanto tentando encontrar soluções para os problemas apresentados por colegas.
Por experiência sabe- se que num primeiro momento os alunos se mostram envergonhados tanto de expor ao grupo suas dificuldades quanto de apresentar possíveis soluções, mas com o tempo eles se acostumam e o processo torna- se mais natural, interessante e produtivo para toda a turma.
A idéia é que o professor nunca responda diretamente as dúvida dos alunos e sim repasse as mesmas para os outros, que devem tentar ajudar na solução.
Tal prática colaborativa visa eliminar a noção de que o professor é a única fonte de conhecimento ou a pessoa capaz de demonstrar como realizar uma tarefa.
O aluno torna- se um indivíduo desenvolvedor de conhecimento, sentindo- se mais útil no processo e seguro em relação a o seu aprendizado.
Além de os problemas de timidez já destacados, outro problema enfrentado neste situação é que os grupos deverão parar seu trabalho para analisar e discutir as dificuldades apresentadas.
Além disso, o processo de discussão neste contexto pode se tornar desorganizado, quando muitos alunos querem colaborar ao mesmo tempo, os somente o professor fala, quando ninguém se interessa por o problema.
Finalmente, os colegas só podem se beneficiar deste processo quando estão presentes em sala de aula.
Em momentos extra-classe, quando os alunos têm dúvidas um dos problemas está associado em encontrar o professor para expor suas dúvidas.
Em uma reunião extra-classe, temos a desvantagem de que só os alunos presentes podem se beneficiar com os esclarecimentos do professor, e que não existe troca de informações e conhecimento entre todos os alunos.
Se os alunos e professor se comunicarem via-email, visando transpor o problema de presença física e de sincronismo da comunicação, os problemas baseia- se no fato de que muitas vezes o professor não pode fornecer respostas no momento, o material dos alunos deve ser enviado para o professor também de forma eletrônica, e o mesmo nem sempre está documentado desta forma.
O maior problema é que não existe, desta forma, interação entre todos os alunos, somente poucos alunos podem se beneficiar da situação.
Embora existam alguns problemas associados a esta prática, os grupos de alunos devem ser incentivados a participar do processo visando auxiliar os colegas na definição de soluções para alguns problemas, os quais muitas vezes são problemas compartilhados por outros grupos que ou ainda não se deram conta, o sentem- se tímidos para compartilhar com os demais grupos.
Além disso, com esta prática, os alunos já vão se acostumando a discutir, a desenvolver argumentos de forma crítica, a pensar sobre as soluções alheias e sobre suas próprias soluções.
O debate ou discussão formal é induzido e organizado por o professor visando reforçar os conceitos vistos na teoria e aplicados em exercícios, e desenvolver pensamento crítico nos alunos em relação a o processo de projeto OO, para que os mesmos passem a especificar em termos de objetos e não da forma estruturada a qual estão acostumados.
Um ou mais debates devem ser realizados ao final do desenvolvimento de exercícios (seja ele um passo, um exercício de etapa ou um exercício final), quando os alunos trabalharam numa determinada realidade, desenvolveram um solução estável para tal problema e entregaram o material correspondente ao professor.
Diferente dos processos de resolução de exercícios e de discussão de dúvidas, num debate os grupos são desfeitos e cada aluno deve discutir individualmente, apresentando suas próprias contribuições para o processo.
Para um debate o professor deve reservar um período de tempo em o qual um conjunto de tópicos previamente definidos devem ser discutidos.
Pode- se reservar uma aula ou um turno em o qual todos os alunos devem estar presentes.
Em este ponto os alunos têm conhecimento e alguma experiência numa ou várias diretrizes ou fases de RDD, conhecem o problema e têm uma solução para tal.
O professor, por sua vez, possui o material entregue por os grupos de alunos, de o qual pode extrair informações sobre o aprendizado dos mesmos.
Outras informações sobre o aprendizado já foram identificadas por o professor durante o desenvolvimento de exercícios e de discussões de dúvidas.
Desta forma, o professor identifica problemas no processo de ensino-aprendizagem que devem ser atacados durante a discussão, ou identificar alternativas de desenvolvimento de partes de projetos e de projetos inteiros que podem servir de exemplo para outros grupos, sendo também discutidas no processo.
Os tópicos a serem discutidos são previamente definidos por o professor, bem como os projetos modelo que servem de base para discussão.
Um projeto modelo pode apresentar uma boa solução ou uma solução inconsistente.
Tópicos e projetos devem ser previamente distribuídos para os alunos para que os mesmos possam analisas- los com calma e preparar antecipadamente algumas das contribuições que podem apresentar.
Desta forma a discussão fica mais dinâmica, uma vez que já se tem conhecimento sobre os assuntos e sobre o projeto a ser discutido, sendo possível comparar e aplicar os tópicos sobre o próprio projeto desenvolvido por o grupo.
A discussão se desenvolve no momento marcado por o professor, com a apresentação de contribuições por os alunos para os diversos tópicos propostos.
A o discutir projetos em relação a um tópico os alunos questionam suas próprias soluções e outras alternativas possíveis, apresentam exemplos, contra-exemplos, opiniões diversas, etc..
Os problemas enfrentados nesta situação de debate são basicamente os mesmos que sem em discussão de dúvidas, quando nenhum aluno fala, ou algum aluno centraliza a discussão com suas opiniões e problemas, ou quando muitos alunos querem participar ao mesmo tempo, e muitas informações, contribuições e argumentos importantes são perdidos.
Avaliação Avaliação do Curso Uma versão simplificada do curso de RDD descrito neste Capítulo foi ministrado por a autora, de forma a validar algumas das idéias e para colher resultados práticos em relação a o ensino de tal paradigma como um todo.
Esta experiência prática serviu como base para a definição de aspectos importante para o aprendizado de projeto OO, e foi de extrema importância para a autora, por o lado docente.
O objetivo do curso foi utilizar RDD como meio para desenvolver no aluno a capacidade de pensamento em termos de objetos, tornando- o apto a especificar sistemas/ aplicações orientados a objetos.
O curso constou de uma introdução, em a qual foram apresentados os conceitos básicos do paradigma de OO, e os conceitos básicos da metodologia RDD.
A segunda parte do curso apresentou a fundo as diretrizes de desenvolvimento de software apresentadas na metodologia RDD.
Os alunos participaram através do desenvolvimento de um projeto OO utilizando os conceitos ensinados durante o curso, discutindo as decisões de projeto tomadas e avaliando o curso, no final, de forma crítica e construtiva.
O curso foi realizado em 5 turnos, aproximadamente 20 horas, em dias subsequentes, contando com 10 alunos.
Em o primeiro dia foram apresentados os conceitos do paradigma OO e os aspectos básicos de RDD.
Em os 3 dias seguintes foram apresentadas as três etapas CRC de RDD, uma em cada dia, respectivamente classes, responsabilidades e colaborações.
Cada um destes dias foi divido numa parte teórica, com a apresentação das respectivas diretrizes de RDD, uma parte de desenvolvimento de exercício, aplicando as diretrizes vistas, e uma última parte onde as soluções desenvolvidas por alguns alunos foram apresentadas e discutidas por o grupo.
Em esta última parte da aula, os alunos apresentaram suas dúvidas e trocaram idéias e discutiram as mesmas com os outros colegas.
Em o último dia do curso uma solução foi apresentada por a autora e analisada e discutida por os alunos, bem como foi realizada avaliação do curso.
Com a aplicação deste curso, foi possível validar as partes teórica e prática do curso, quando se tem apresentação de conceitos do paradigma e da metodologia RDD e da aplicação dos mesmos em situações reais.
Foi vivenciada e validada a importância da parte prática no contexto geral do curso, tanto em relação a o desenvolvimento do projeto como em relação a as discussões realizadas durante todo o processo.
A apresentação de exemplos no contexto da realidade dos alunos também foi um aspecto importante detectado por a autora.
Entre as conclusões mais importantes estão:
Importância vital do desenvolvimento de exercícios Quando na parte teórica do curso, os alunos não apresentaram ou expuseram dificuldades de entendimento quaisquer.
Somente no momento da realização de exercícios notou- se dificuldades de aplicação de alguns conceitos e diretrizes por parte de o alunos.
Durante o desenvolvimento de exercícios por parte de os alunos foi possível visualizar, na prática, inúmeros problemas de aprendizado relatados na literatura, como por exemplo:
A dificuldade de pensar em termos de objetos, a dificuldade de entender a diferença entre classes e objetos, e a instanciação/ criação de objetos, entre outros, dificuldade de entendimento dos diversos tipos de relacionamento existentes entre classes (herança, composição, etc).
Importância da discussão colaborativa como complementação do exercício A importância da discussão no contexto do aprendizado dos alunos fica clara.
A medida que os mesmos expõem e discutem seus problemas detectam conceitos não aprendidos, aprendem mais, desenvolvem projetos mais coerentes, com mais qualidade, etc..
Em um primeiro momento as dúvidas na realização de exercícios foram expostas a autora, mas com a prática de discussões ao final de cada encontro os aluno se acostumaram com esta prática e passaram a discutir problemas e soluções com toda a classe.
As discussões aconteceram somente de maneira informal, principalmente por falta de tempo para organização e aplicação de discussões formais, uma vez que o curso foi ministrado em cinco turnos numa mesma semana.
A autora sentiu falta de organização para dirigir e organizar as reflexões e dúvidas dos alunos durante a discussão, e portanto acredita que o debate de forma proposta neste curso (decrito na Seção 3.3.3.2) é extremamente benéfica.
Outro aspecto que não pode muito ser explorado por falta de tempo foi o processo de dúvidas, descrito na Seção 3.3.3.1.
O comportamento dos alunos, no entanto, à medida que se acostumarem a discutir com os colegas, permite supor que também esta forma de cooperação seria de grande valia.
Ambientes de sala de aula convencionais A ênfase das idéias do curso proposto neste trabalho é dada a práticas colaborativas, a saber, desenvolvimento de exercícios em grupos e discussão de dúvidas e soluções.
Embora consideradas benéficas ao aprendizado, estas práticas colaborativas apresentam alguns problemas quando aplicadas em ambientes de sala de aula tradicionais, que pressupõem tipicamente interações face a face.
Podemos citar por exemplo a dificuldade de realização de trabalhos em grupo por a dificuldade de conciliar agendas, a volatilidade do conhecimento trocado oralmente, a dificuldade de estruturar e mediar debates, a timidez ou dominância dos alunos, etc..
Desta forma, alguns dos benefícios que estas técnicas poderiam trazer para o processo de ensinoaprendizagem são parcialmente anulados ou totalmente perdidos.
Durante o desenvolvimento da experiência prática do curso, diversos dos problemas citados acima puderam ser detectados por a autora, e motivaram a realização de um estudo mais aprofundado sobre o assunto, descrito no restante desta Seção.
O ambiente de apoio descrito nos capítulos seguintes deste trabalho visa trazer soluções a alguns destes aspectos problemáticos, permitindo assim a realização de todos os aspectos do curso proposto neste Capítulo.
O desenvolvimento de exercícios cooperativo, com os alunos organizados em grupos, é um dos aspectos importantes do curso.
Exercícios são propostos por o professor e devem ser desenvolvidos em grupos, com os alunos do grupo cooperando entre si e ajudando uns aos outros.
A idéia é a troca de conhecimento entre os alunos, bem como compartilhamento de problemas, que geralmente são melhor resolvidos por o grupo do que por um único aluno.
Problemas são detectados em relação a dois pontos importantes durante o desenvolvimento de exercícios por parte de os alunos:
Em a elaboração de soluções do exercício e na documentação das soluções em desenvolvimento.
Encontro dos integrantes do grupo para desenvolvimento do exercício Para encontros em sala de aula é necessário levar em consideração a carga horária do curso.
Tais encontros só são possíveis se houver tempo suficiente para tal, com professor disponibilizando horas de aula.
Se não houver tempo para tal tipo de atividade em sala de aula, propõe- se a realização de exercícios como trabalho extra-classe, o que traz um outro problema:
A dificuldade de conciliar as agendas de todos os componentes do grupo.
Como conseqüência destes problemas temos que:
O tempo disponível para encontros face-a-face pode não ser suficiente para o desenvolvimento do trabalho, o que resulta em soluções incompletas, de baixa qualidade, etc.;
Os alunos acabam não realizando o trabalho em grupo, mas sim designando partes do trabalho para cada componente desenvolver sozinho, marcando somente uma reunião para juntar todas as partes;
Aparecem problemas de comunicação entre os alunos e problemas relativos a troca e a junção do material elaborado isoladamente por cada integrante do grupo.
Documentação do exercício Os problemas de documentação estão ligados à dificuldade de gerência das várias versões do material sendo desenvolvido por o grupo ao longo de a resolução do exercício.
Uma dificuldade aparece quando os componentes do grupo acabam dividindo entre si as tarefas, e produzem separadamente porções do material, encontrando- se somente para fazer a junção das partes do projeto desenvolvidas.
Outra dificuldade é a manutenção do histórico do exercício por todo o material ser documentado em papel, podendo ser perdido ou descartado a qualquer momento.
Perde- se aí a flexibilidade de se poder voltar atrás em aspectos desenvolvidos de forma errônea ou com baixa qualidade.
Também este histórico do desenvolvimento do exercício e da aprendizagem do grupo é importante no momento da discussão de exercícios.
O processo de dúvida durante a resolução de exercícios pode surgir a qualquer momento, quando os alunos não sabem o que um determinado conceito do paradigma significa ou não sabem como aplicar os conceitos vistos, tanto em relação a o paradigma OO quanto em relação a metodologia RDD.
Tanto durante reuniões em sala de aula quanto em encontros extra-classe os alunos podem entrar num processo de dúvida, que deve ser prontamente resolvido e transposto para que eles possam continuar o desenvolvimento do projeto de maneira adequada.
Dúvidas levantadas em tarefas extra-classe Em encontros extra-classe, quando um grupo encontra uma dúvida temos como problema principal a dificuldade de contatar o professor para a discussão e resolução de tal dúvida (voltamos aqui para os problemas de marcar encontros face-a-face, conciliando agendas de vários indivíduos).
Se não conversar com o professor, muitas vezes o grupo pode ter que parar o desenvolvimento do exercício, atrasando o trabalho, desperdiçando tempo de encontro face-a-face, perdendo em qualidade, etc..
Quando um grupo consegue conversar com o professor fora de o horário de aula, temos como desvantagem o aspecto que não é criada a oportunidade de compartilhamento e colaboração com os demais grupos.
Algumas destas desvantagens são:
Dúvidas levantadas durante as aulas Um problema associado à dúvidas levantadas por alunos durante as aulas diz respeito à interrupção da atividade sendo desenvolvida, seja ela apresentação de teoria por parte de o professor ou realização de exercícios por parte de o alunos.
Quando os alunos começam a expor suas dúvidas o desenvolvimento do exercício deve ser interrompido para que os demais alunos possam entender, explorar e discutir as dúvidas colocadas.
Volta neste ponto o problema de falta de tempo para encontros face-a-face, uma vez que toma- se tempo de desenvolvimento do exercício para discussão de dúvidas.
Durante a apresentação de teoria, deve acontecer algum tipo de contextualização da dúvida nos conceitos sendo apresentados por o professor, e muitas vezes se pode desviar do assunto sendo tratado.
Em ambos os casos, uma dúvida pode não interessar a todos os alunos.
Características pessoais dos alunos devem ser levadas em consideração durante a discussão de dúvidas, já que características como timidez ou dominância do aluno, pressão hierarquia que os alunos podem sentir em relação a o professor, receio dos alunos de se exporem ao grupo, etc..
Volatilidade da comunicação oral O problema da documentação de tais dúvidas bem como dos aspectos discutidos por os alunos aparece neste momento, uma vez que todo o processo se dá de forma oral.
Eventualmente o professor pode utilizar o quadro negro para fazer anotações, mas cada aluno é responsável por a manutenção de tais aspectos para si próprio, anotando pontos considerados importantes em seu caderno, por exemplo.
Com a falta de manutenção da documentação enfrentamos problemas quando um aluno não está fisicamente presente no momento da discussão de dúvidas, quando o mesmo perde a oportunidade de se beneficiar com tal discussão.
Além disso, com o tempo tem- se a perda do significado das colocações, devido a falta de contexto.
Em relação a o debate de projetos desenvolvidos, algumas dificuldades são enfrentadas por o professor, tanto em momentos que antecedem a discussão, quanto durante o debate propriamente dito.
Organização e condução do debate O professor deve organizar esta discussão de forma a ressaltar e esclarecer conceitos não entendidos por os alunos (isso pode ser detectado por o professor de forma empírica tanto durante o desenvolvimento do exercício, por as dúvidas e problemas levantados quanto a partir das soluções entregues por os grupos).
Os projetos (soluções para o problema) e os tópicos a serem discutidos devem ser enviados para os alunos.
O professor deve distribuir também o roteiro de discussão, que contém data, hora e outras informações relevantes, junto com os projetos e a ordem dos tópicos a serem discutidos.
Os problemas na organização do debate centram- se na detecção dos aspectos importantes a serem discutidos no momento da elaboração do roteiro.
A distribuição do roteiro para os alunos deve ser realizada em algum momento anterior à discussão para que cada aluno possa analisar- los e preparar algumas contribuições a serem dadas.
Volta- se ao problema de que somente alunos presentes em sala de aula recebem o roteiro da discussão e têm acesso a explicação do professor sobre o roteiro.
Durante o debate o professor tem a preocupação de como organizar a ordem de apresentação das contribuições, isto é, qual o tópico em discussão no momento, quem fala antes de quem, etc..
Como a discussão se dá num momento em o qual todos os alunos estão em sala de aula e preparados para apresentarem contribuições para o processo, temos então associados os problemas relacionados à presença física dos alunos, de visibilidade dos projetos em discussão, problemas relacionados a características pessoais e de documentação do processo de discussão.
Visibilidade dos projetos Quando projetos estão em discussão os alunos apresentam posições relacionadas aos tópicos e aos projetos em questão.
O problema é que a visualização do projeto ou de uma parte do projeto sendo discutida é inadequada, uma vez que cada aluno deve localizar em sua folha os aspectos em questão.
Por exemplo, um aluno pode estar se referindo a uma parte do projeto que um segundo aluno não consegue localizar, e então perde o contexto da discussão em função deste problema.
Colocar os projetos no quadro negro toma tempo de discussão que poderia ser utilizado de outra forma.
Volatilidade Em este processo, tem- se novamente o problema de volatilidade do conhecimento e informações trocados oralmente por os participantes já citados em 3.2.2.2, tais como presença física dos alunos para que possam se beneficiar dos aspectos da discussão, capacidade fazer anotações relevantes ao contexto, etc..
Características pessoais Novamente temos os problemas de características pessoais dos alunos, já descritas em 4 Um Ambiente de Apoio a um Curso de Projeto de Software OO Em o Capítulo 3, foi apresentada uma proposta de curso de projeto OO para iniciantes visando transpor alguns dos problemas de ensino do paradigma OO, discutidos no Capítulo 2.
Também foram destacados possíveis problemas a serem enfrentados considerando ambientes de sala de aula convencionais, sem apoio de tecnologia para permitir também interação distribuídas e/ ou assíncronas.
Em este Capítulo é apresentado um ambiente de computadorizado de apoio ao processo de ensino-aprendizagem de OO, baseado no curso proposto no Capítulo 3, a fim de eliminar/ minimizar os problemas enfrentados em ambientes de sala de aula convencionais.
Características gerais O ambiente de apoio ao curso dá suporte às principais atividades previstas durante o curso, tanto do ponto de vista do professor quanto do ponto de vista do aluno.
Estas atividades são:
Estruturação, acompanhamento e desenvolvimento de exercícios, de dúvidas e de discussões.
As principais características deste ambiente são:
É baseado num modelo de cooperação que define a estrutura geral do processo de ensino-aprendizagem, as ações dos principais envolvidos, e os objetos trocados entre os participantes;
É baseado na interação distribuída e escrita entre os participantes, estruturada com o uso de um modelo de argumentação;
Oferece um ambiente de trabalho específico para cada tipo de participante (professor/ aluno) que organiza as ações possíveis dos mesmos em seu próprio contexto de ensino-aprendizagem;
Usa Internet como plataforma de desenvolvimento, mais especificamente Www, navegadores (browsers) e ferramentas de desenvolvimento associadas (por exemplo, formulários Html, CGI Scripts);
Amplia as formas de interação entre os participantes permitindo que ela seja também distribuída e síncrona/ assíncrona.
As contribuições deste trabalho são:
Modelo de cooperação:
Define de forma efetiva as interações e objetos trocados entre professor-aluno, aluno-aluno, definindo e guiando assim as atividades e responsabilidades que cada participante pode realizar no ambiente.
O modelo também guia o desenvolvimento de um ambiente computadorizado de apoio;
Comunicação escrita:
Com as discussões sendo realizadas de forma escrita tem- se um registro definitivo das contribuições apresentadas, o que acaba com o problema da volatilidade do conhecimento trocado.
Além disso, pode auxiliar na descaracterização de aspectos pessoais, como timidez e dominância;
Ambientes de trabalho dedicado ao papel dos participantes:
Desta forma as atividades a serem realizadas por os participantes estão organizadas de forma lógica e simples, visando facilitar ainda mais a utilização do ambiente por alunos e professor.
Modelo de Argumentação: Define uma forma estruturada de comunicação entre os participantes, o que permite melhor organizar as contribuições apresentadas, reduz o grau de ruído na comunicação, e aumenta o grau de rastreabilidade das mesmas durante a discussão e em consultas futuras;
Ambiente desenvolvido em Internet:
É uma tecnologia bastante difundida atualmente, que abrange um grande número de pessoas.
Em ambientes acadêmicos, os alunos estão bastante familiarizados com o ambiente Www, e isso auxilia para o grande alcance da ferramenta de forma fácil e simples;
Modelo de Cooperação O modelo de cooperação é baseado no processo de ensino-aprendizagem de projeto OO descrito no Capítulo 3, e visa fornecer um referencial conceitual para o desenvolvimento e implementação do ambiente de apoio ao curso.
O modelo é genérico o suficiente para contemplar disciplinas de modelagem em geral (como por exemplo, banco de dados, análise e projeto de software, etc.), mas neste trabalho será enfocado exclusivamente o curso de projeto OO descrito no de cooperação de contempla o curso e que serve de base para a definição do protótipo do ambiente.
O modelo define:
Um processo global de atividades que auxilia o professor na definição, estruturação e acompanhamento de atividades de aula, os possíveis papéis que professores e alunos podem desempenhar no contexto do curso e os objetos trocados entre professores e alunos no processo de ensino-aprendizagem.
Desta forma tem- se uma organização do processo de ensino-aprendizagem, com tarefas e atividades pré-definidas, requisito fundamental para o colaborativo de ensino.
Duas formas de cooperação entre os alunos são explicitamente formalizadas por este modelo de cooperação:
Durante o desenvolvimento de exercícios, os alunos são incentivados a pedir ajuda e trocar idéias uns com os outros a fim de transporem eventuais dificuldades que estejam enfrentando e quando os alunos entregam o material para o professor, eles são estimulados, através de um processo de debate, a pensar sobre suas soluções e sobre os conceitos que aprenderam, a criticar de forma positiva diferentes soluções de projeto, e a compartilhar com os demais alunos o conhecimento que adquiriram durante o processo.&amp;&amp;&amp;
A interação dos alunos dentro de um grupo é o início do processo de colaboração, que trocam idéias e discutem entre si para a realização de um objetivo comum, mas esta interação está implícita, não sendo contemplada no modelo.
Em o grupo, os alunos discutem as dificuldades e as soluções sem nenhuma interferência do professor, da maneira que acham mais conveniente.
Em o momento da discussão de dúvidas, quando o professor incentiva a participação dos alunos, os mesmos já começam a se adaptar ao processo de discussão guiado e mediado por o professor.
Quando chega o momento do debate formal os alunos já conhecem o processo, estando parcialmente adaptados ao mesmo.
Um processo de aprendizado colaborativo requer mecanismos que permitam organizar- lo, para que professores e alunos possam melhor tirar proveito de seus benefícios.
Assim, devem ser previstas para o professor tarefas de estruturação das atividades a serem realizadas por os alunos, mecanismos de acompanhamento dos alunos e de avaliação das tarefas realizadas por os alunos.
O modelo de cooperação proposto neste trabalho contempla tais atividades.
O processo global definido no modelo de cooperação é subdividido em quatro subprocessos que correspondem a aspectos definidos no curso de projeto OO.
São eles:
Exercício, discussão formal, que contempla um debate previamente organizado de projetos, encerramento e discussão informal, que define a discussão de dúvidas levantadas por os alunos.
A Figura 4.1 mostra o processo global de atividades, onde os subprocessos são, representados por os círculos, e as setas indicam a ordem em que os mesmos podem ser executados.
O nome do subprocesso pode ser visto na primeira linha de cada círculo.
Abaixo de o nome, que é apresentado em negrito, estão descritas as atividades compreendidas em cada subprocesso.
Os três processos centrais (exercício, discussão formal e encerramento) devem ser cuidadosamente preparados por o professor, e sempre são realizados no processo global do curso.
Já o processo de discussão informal é iniciado através de problemas ou dificuldades levantadas por os alunos, e embora possa ser mediado e direcionado por o professor, em nenhum momento existe qualquer tipo de preparação prévia por parte deste.
Uma atividade definida num subprocesso pode ser realizada por o professor, por um grupo de alunos, ou por um aluno individualmente.
A o professor cabe todas as atividades estruturadoras, tais como, definição dos exercícios e dos roteiros para os debates, bem como as atividades de acompanhamento (verificação, discussão, espionagem).
Alunos desenvolvem os exercícios propostos e participam em discussão de dúvidas e em debates previamente estruturados por o professor.
As atividades de encerramento são realizadas tanto por o professor como por alunos, em grupo ou individualmente.
Os papéis dos participantes em cada um dos processos, em relação a a realização das atividades em cada subprocesso estão descritos a seguir:
Em o subprocesso Exercício tem- se as seguintes atividades definidas:
Definição do Exercício, Resolução do Exercício e Verificação de Exercício.
A Definição do Exercício é feita por o professor, e o mesmo deve ser resolvido por os alunos.
Os alunos, ao receberem a descrição do exercício, devem desenvolves- lo em grupo (Resolução), definindo uma solução para o mesmo, que deve ser entregue ao professor quando pronta.
A Verificação do Exercício é feita por o professor após a entrega do mesmo, e visa identificar pontos problemáticos e positivos em cada solução entregue, a fim de, basicamente, auxilias- lo na preparação da etapa seguinte, a saber, processo de Discussão Formal, e na eventual recondução das atividades dos alunos.
O processo de Discussão Informal pode ser iniciado tanto por o professor, através de uma Espionagem no material em desenvolvimento dos alunos, quanto por os alunos, quando encontram dificuldades ou problemas durante a resolução de um exercício, contemplado por a atividade Dúvidas.
A atividade Discussão compreende a exploração e discussão de questões de dúvidas levantadas.
O professor tem como atividades gerar uma questão de dúvida a ser discutida, redirecionar para todos os alunos dúvidas de grupos direcionadas para ele, mediar a discussão de dúvidas, etc..
Uma Discussão Formal, compreende um debate sobre diversos tópicos cuidadosamente pensado e preparado por o professor.
As atividades de uma discussão formal atribuídas ao professor são a Elaboração do Roteiro, que compreende a definição e identificação de projetos ou soluções, que servem de base para a discussão, e a definição de um conjunto de tópicos a serem discutidos e explorados por os alunos durante a discussão, e a participação no Debate, quando julgar importante e necessário.
A os alunos cabe a participação no Debate, ou seja, a atividade de discutir os tópicos definidos em relação a os projetos disponiblizados por o professor ou em relação a o seu próprio projeto, a fim de desenvolver os tópicos, melhor definir seu projeto e consolidar seu aprendizado.
O subprocesso de Encerramento compreende o fechamento de atividades como discussão formal, desenvolvimento de exercícios e do processo como um todo, tanto por parte de o professor como por parte de os alunos.
O professor deve, basicamente, resumir os processos, identificando pontos importantes em cada um de eles e propor atividades de encerramento para os alunos, tais como questionários a serem respondidos por os alunos, novos exercícios de revisão a serem resolvidos, nova data para entrega dos projetos revisados, etc..
Com a definição do processo global de atividades e da distribuição destas atividades entre professor, grupos de alunos e alunos individualmente é possível definir o conjunto de objetos gerados em cada atividade de cada subprocesso.
Além disso, a forma como estes objetos são trocados entre os participantes durante a execução de cada atividade pode ser definida, de forma que as relações entre os participantes fiquem organizadas de forma simples e clara.
O diagrama de objetos OMT que descreve os objetos trocados entre os participantes dos quatro subprocessos, bem como a relação existente entre os mesmos é apresentada na Figura 4.2.
Cada retângulo representa um objeto, sendo que seu nome é apresentado na primeira linha e seus atributos no meio.
As operação, que deveriam estar na última linha foram omitidas, por motivos de simplicação.
Note que este diagrama é apresentado de forma simplificado para facilitar a visualização e o entendimento do mesmo.
Em o capítulo 5 o mesmo é apresentado de forma mais detalhada, com todos os objetos e todas as relações entre eles devidamente mostradas e explicadas.
Projeto OO.
Modelo de Argumentação Os processos de discussão formal e informal definidos no modelo são estruturados com o uso de um modelo de argumentação, que organiza as os tipos de contribuições que os participantes podem apresentar durante uma discussão, e a maneira como estas contribuições se relacionam.
A adoção de um modelo de argumentação tem como objetivos:
Reduzir ruídos de comunicação, uma vez que as contribuições ou estão relacionadas com contribuições anteriores ou um novo assunto está sendo apresentado;
Definir uma estruturação das contribuições para que as mesmas possam ser registradas para consultas futuras, bem como a contextualização das contribuições;
Possibilitar uma melhor organização entre as contribuições apresentadas, permitindo assim mais fácil localização de aspectos interessantes para os participantes.
Uma discussão é composta por um conjunto de contribuições que são emitidas por os participantes, de forma a explorar um tópico ou questão lançada para todos.
Diferentes tipos de contribuições são possíveis, como ilustrado na Figura 4.3.
Tipos de relacionamentos diferentes fazem a ligação entre as contribuições apresentadas, de forma a estruturar as mesmas.
O início de uma discussão se dá sempre a partir de uma Questão ou de um Tópico.
Uma questão é gerada a partir de uma dúvida de aluno numa discussão informal.
Um tópico é previamente definido por o professor, numa discussão formal.
A partir de aí, posições que visam responder à questão podem ser emitidas, assim como Comentários que visam complementar as posições apresentadas ou mesmo outros Comentários.
Para discussões informais tem- se ainda os seguintes tipos de contribuições:
Dúvidas enviadas por os alunos ao professor.
Outros tipos prédefinidos de contribuições são:
Dúvida (usada em discussões informais), Sugestão De Tópico (usadas em discussões formais, enviadas por os alunos) e Comentário do Professor, que visa corrigir alguma contribuição errada enviada por um aluno.
Cada contribuição emitida por um participante está relacionada a um exercício e pode ou não fazer referência a materiais relacionados.
A Figura 4.3 mostra o diagrama básico de discussão, através de um Diagrama de Objetos de OMT.
O modelo de argumentação básico de discussões, como definidas no modelo, é apresentado na Figura 4.4 através de um Diagrama de Event Trace de OMT.
Em este diagrama, os objetos são representados por os retângulos verticais e as setas entre os mesmos representam as interação que acontecem entre os mesmos.
Particularidades dos dois tipos de discussão são apresentadas em detalhe no Capítulo 5.
Arquitetura Funcional do Ambiente Baseado neste modelo de cooperação, nos processos e nas atividades realizadas por os indivíduos envolvidos no processo do curso de projeto OO, foi especificado um ambiente de ensino-aprendizagem que contempla as atividades e funcionalidades descritas no processo.
O ambiente foi especificado com base no modelo de cooperação e contempla workspaces (Áreas de trabalho) dedicadas aos diferentes indivíduos que utilizam o ambiente (alunos e professor).
Um protótipo para validação de tal ambiente encontra- se em desenvolvimento e será descrito no A arquitetura funcional do ambiente está apresentada na Figura 4.5.
Note que a interface oferece três workspaces:
Área Pública, área do Professor e área do Aluno.
Os usuários podem fazer acesso às funcionalidades do ambiente de acordo com o papel que representam no sistema (isto é, professor ou aluno), e cada área do ambiente organiza as ações que tais usuários podem realizar.
A organização do ambiente divido em workspaces deixa o mesmo mais organizado em relação a as atividades dos participantes do processo, uma vez que as ações que podem ser realizadas por cada um destes indivíduos estão agregadas num único workspace, ao qual ele tem acesso.
Assim, a área do professor agrega todas as atividades que um professor deve realizar para que seja possível estruturar, organizar, acompanhar e mediar um exercício, discussões informal e formal e fazer o encerramento de exercícios, de discussões formais e do processo global.
Informações do Curso Informações das Aulas Informações Gerais Informações para novos Usuários Identificação de Usuários professor aluno WORKSPACE do Professor Estruturação Acompanhamento Biblioteca exercício discus.
Formal verificação discus.
Informal discus.
Formal encerramento exercícios exemplos links aluno WORKSPACE do Aluno Informações de alunos grupos senhas material verificações Desenvolvimento de Exercício descrição exerc.
A Área Pública pode ser acessada por qualquer indivíduo.
Em esta área são colocadas todas as informações sobre o curso (isto é, professor, programa, aulas, alunos cadastrados, grupos de alunos, etc).
Outras funções existentes são cadastramento de alunos e de grupos, e verificação da identificação dos usuários, para acesso as outras áreas do ambiente.
A Área do Professor agrega e implementa as atividades designadas para o professor, no contexto do curso de projeto OO.
Esta área dá acesso a todas as funcionalidades do ambiente voltadas às necessidades do professor, permitindo ao mesmo estruturar, manter e guiar aulas, exercícios, discussões, informações de alunos e grupos, e uma biblioteca de materiais e notas diversas.
A área do Professor organiza as ações do mesmo em termos de suas principais atividades, isto é, estruturação e monitoramento das atividades do alunos.
As funcionalidades do ambiente organizadas na área do professor divididas em 4 módulos, a saber estruturação, monitoramento, biblioteca de material e informações dos alunos.
A Área dos Alunos é também organizada de acordo com as ações que alunos e grupos de alunos podem realizar no ambiente.
A organização da área do Aluno reflete todo o processo de ensino-aprendizagem por o qual os alunos devem passar, e está dividido em três módulos:
Desenvolvimento de Exercício, Discussão e Encerramento.
Em o Workspace do Professor, funcionalidades para definir e visualizar exercícios e roteiros de discussões estão colocadas no módulo de Estruturação.
O módulo de Monitoramento implementa as atividades para publicação e monitoramento de desenvolvimento de exercícios, para observar e guiar discussões de dúvidas e debates.
Dois módulos de suporte às atividades do professor são a Biblioteca e o módulo de Informações sobre os Alunos.
A Biblioteca contém todo o tipo de material interessante e importante para o professor, tais como descrições de exercícios não publicados, notas tomadas durante o acompanhamento aos exercícios dos alunos, links interessantes da Internet, modelos de projetos desenvolvidos por o professor ou por os próprios alunos, etc..
O professor pode utilizar este material de acordo com a conveniência (em suas aulas, para definição de novos exercícios, etc.).
O módulo com as Informações sobre alunos organiza todos os dados referentes aos alunos, tais como grupos, materiais entregues ao professor, notas tomadas durante a avaliação do material entregue, notas, etc..
Em o Workspace de Alunos, o módulo de Desenvolvimento de Exercício lida com as atividades que alunos/ grupos de alunos realizam durante o desenvolvimento de uma solução para um exercício específico proposto por o professor.
Estas atividades incluem:
Fazer acesso à descrição do exercício, edição de material, criação e discussão de dúvidas, entrega do material desenvolvido ao professor, e acesso a notas feitas por o professor no monitoramento do seu material.
Todas estas atividades dos alunos devem ser de simples acesso durante qualquer atividade que o mesmo esteja realizando.
O módulo de Discussão ou Debate permite aos alunos analisar roteiro de discussões a serem realizadas e seguidas, os tópicos a serem discutidos, visualizar quando e quais os tópicos estão em discussão, visualizar e analisar cada contribuição da discussão, e participar de uma discussão, adicionando posições que colaboram para o desenvolvimento e exploração de um tópico.
Usando as ferramentas apresentadas no módulo de Encerramento, alunos/ grupos podem concluir ou encerrar desenvolvimento de exercícios e processos de discussão.
Em o final de uma discussão, alunos tem que desenvolver novamente e melhorar seus projetos, considerando os aspectos discutidos e aprendidos, e entregar uma versão final do exercício para o professor.
O fechamento também implementa desenvolvimento de questionários, correção do material e notas.
O modelo de cooperação subjacente à ferramenta é baseado na dinâmica do curso proposto no Capítulo 3 no ambiente de apoio ao curso já apresentado no Capítulo 4.
Este modelo define os objetos trocado entre as partes durante o processo e suas relações estruturais.
Utiliza- se diagramas de objetos e diagrama de event trace da metodologia OMT.
Tal modelo, contempla etapas definidas no curso, descritas anteriormente no Capítulo 3, tais como:
Definição do exercício, resolução de um exercício ou passo, verificação de um exercício ou passo por parte de o professor, espionagem do material dos grupos por parte de o professor, dúvidas dos grupos, discussão informal de dúvidas, preparação da discussão, encerramento da discussão, encerramento do processo como um todo.
Estas etapas foram agrupadas em subprocessos específicos do processo global, como já mostrado na Figura 4.1, e são eles:
Exercício, discussão informal, discussão formal e encerramento.
Os subprocesso e as atividades agregadas em cada um de eles encontram- se descritos a seguir.
Os objetos criados e trocados entre as partes durante o processo são apresentados em letras maiúsculas e itálicas enquanto que os atributos de tais objetos estão escritos em fonte itálico.
Subprocessos e atividades são ressaltadas através de fonte em negrito, sendo que os subprocessos são apresentados com a primeira letra maiúscula.
Exercício O subprocesso de Exercício agrupa as etapas de definição do exercício, feita por o professor, resolução do exercício proposto, por parte de os grupos de alunos e verificação do exercício baseada no material entregue por os alunos ao professor.
Cada uma destas atividades será discutida em mais detalha nas seções a seguir.
A Figura 5.1 apresenta o diagrama de objetos que resume o modelo de cooperação do subprocesso Exercícios como um todo.
Definição do exercício A definição de um exercício a ser desenvolvido por os alunos, pressupõe a escolha da descrição de um problema que deve ser modelado aplicando- se as diretrizes de uma etapa CRC (exercício parcial, exercício final de etapa) ou da metodologia RDD como um todo (exercício final de curso).
Cada Exercício definido e proposto por o professor deve ser desenvolvido integralmente passando- se por as três etapas CRC, sendo com a definição de passos para verificação ou sendo com o mesmo resolvido integralmente do início ao fim sem paradas previamente estabelecidas, isto é, para cada Exercício o aluno deve especificar um projeto integralmente.
A Figura 5.1 mostra os objetos criados durante o subprocesso Exercício e as relações existentes entre os mesmos Um Exercício é definido em função de objetivos a serem atingidos por os alunos e possui uma data de entrega.
Os tipos possíveis de exercícios são Exercício Final, que é desenvolvido no final do processo como um todo, e Exercício Etapa, que é desenvolvido no final de uma etapa CRC e eventualmente pode possuir Passos a serem seguidos, que também são um tipo de exercício.
Ambos são baseados numa descrição de requisitos de um sistema ou problema em questão.
Além disso um Exercício Etapa pode possuir diversos Passos.
Um Passo é definido em função de um conjunto de diretrizes de RDD e um conjunto de tarefas, que devem ser aplicadas sobre a descrição de requisitos do Exercício.
Cada Passo deve ser desenvolvido por os grupos de alunos e entregue ao professor e serve como um ponto de parada e de verificação dos exercícios dos alunos, sendo também um tipo de exercício.
A dinâmica da atividade definição de exercício é mostrada na Figura 5.2.
O professor define um Exercício e pode definir e agregar eventuais Passos ao mesmo.
Após esta definição o professor pode disponibilizar um Exercício De Etapa com seus Passos individualmente, à medida que achar necessário para a resolução de um Exercício como um todo, ou mesmo um Exercício Final, que deve ser resolvido integralmente de uma única vez, isto é, sem verificações intermediárias.
A partir de um ou mais Exercícios disponibilizados, com seus objetivos específicos, de uma descrição dos requisitos e uma data de entrega, os alunos que devem passar para a etapa de resolução de um exercício.
Resolução de um exercício Durante a resolução de um exercício os alunos devem se reunir em grupos e trabalhar de forma cooperativa (tanto em encontros face-a-face quanto através de comunicação remota assíncrona e desestruturada, como e-mail) a fim de atingir o conjunto de objetivos definidos por o professor para este Exercício.
À medida que a resolução do Exercício evolui, o mesmo deve ser documentado de acordo com a metodologia RDD, gerando- se um objeto chamado de Material.
Um Material descreve a resolução de um exercício, e possui um status para indicar seu estado de desenvolvimento.
Os estados possíveis para um exercício são:
Em desenvolvimento, resolvido totalmente, entregue, em verificação, verificado ok, verificado não ok.
Dependendo da fase CRC em que o grupo se encontra o Material pode possuir uma forma diferente (por exemplo, na fase de classes o material pode ser uma lista inicial de locuções nominais, classes candidatas, diagrama de hierarquia de classes, um conjunto de cartões índice, etc.).
A Figura 5.3 apresenta o diagrama de interação de resolução de exercícios.
Os grupos analisam o Exercício proposto por o professor e criam um Material que é desenvolvido por o grupo até o momento em que deve ser entregue ao professor, na data definida ou quando considerarem sua solução de bom nível.
A entrega do Material ao professor encerra a atividade de resolução de exercício.
Cada grupo possui uma área única e privada em a qual deve documentar seu Material durante a resolução e desenvolvimento de seu Exercício.
A área privada dos grupos, não pode ser consultada por outros alunos de grupos, mas o professor pode fazer acesso à mesma sem que os grupos tomem conhecimento (este processo é denominado de espionagem e encontra- se descrito a seguir).
Verificação de um exercício por parte de o professor A verificação de um exercício é feita em cima de o Material entregue por os grupos ao final de um exercício específico.
Em este momento grupos tem um Material que consideram estável que foi entregue ao professor no final da etapa de resolução do exercício.
A verificação não deve ser feita de forma rígida, não deve gerar uma avaliação nem a correção por o professor dos problemas encontrados no Material de cada um dos grupos, quando feita após Exercício De Etapa ou Passo.
O objetivo principal é detectar soluções realmente problemáticas que impeçam determinados grupos de continuar o desenvolvimento do Exercício, num novo Passo, mesmo com a realização de algumas alterações.
Quando feita após um Exercício Final, a verificação serve também para a avaliação dos grupos.
Um Material descreve a solução final do Exercício encontrada por o grupo.
O diagrama de interação que resume o processo de verificação informal é apresentado na Figura 5.4, sendo descrito a seguir.
O professor verifica o material entregue por os grupos de alunos pode gerar uma compilação ou resumo de Problemas Usuais encontrados nas soluções entregues.
Estes Problemas Usuais contêm uma descrição do problema e eventuais dicas, soluções e sugestões de leitura de material de apoio para resolução de tais problemas.
Em um momento considerado oportuno esta compilação de Problemas Usuais deve ser disponibilizada para todo os grupos de alunos por o professor, para que os mesmos possam analisar os problemas e assim, tentar melhorar suas soluções.
Para cada grupo, o professor gera uma Verificação, em a qual deve anotar os problemas encontrados (mas não corrigir- los, nem na Verificação nem no Material entregue), suas sugestões de alteração, dicas diversas, tópicos para leitura, etc..
Cada Material deve receber como status uma verificação ok ou não-ok, a fim de definir seu estado atual.
A verificação ok indica que grupo pode continuar seu trabalho, a partir de uma nova tarefa proposta por o professor (por exemplo, novo Exercício ou novo Passo) uma vez que o professor não encontrou maiores problemas no Material.
Em este caso, o professor acredita que os eventuais erros ou problemas serão detectados por o grupo na continuação do desenvolvimento do Exercício e/ ou de sua correção.
Após receberem (num momento considerado adequado por o professor) e analisarem sua Verificação os grupos devem voltar ao desenvolvimento do exercício, corrigindo o material de acordo com anotações e dicas dadas por o professor através do processo de verificação.
Continuar a resolução de um Exercício ou corrigir- lo, após uma verificação, significa criar uma nova versão do Material, de acordo com as recomendações recebidas via Verificação e Problemas Usuais disponibilizados por o professor.
Desta forma o Material anteriormente desenvolvido e entregue, (com as anotações feitas por o professor durante a verificação) fica mantido com o objetivo de documentar a evolução dos grupos.
Para os grupos com problemas, isto é verificação não-ok, o professor pode (e geralmente o faz) gerar e enviar junto com a Verificação um novo conjunto de Exercícios para reforço, a fim de sanar os problemas de modelagem encontrados no Material.
Exercícios de reforço correspondem a um novo Exercício, que deve ser realizado por o grupo, podendo ser um Exercício De Etapa ou um Passo.
A resolução de um Exercício de reforço leva de volta ao processo de resolução de um exercício e pode direcionar o aluno a um processo de dúvida e, logo, a uma Discussão Informal de eventuais problemas encontrados.
A princípio só os grupos com problemas mais graves devem realizar um ou mais Exercício de reforço, mas nada impede que todos os grupos participem deste processo.
Um processo de discussão informal inicia- se com a disponibilização de uma contribuição denominada Questão.
Esta contribuição pode ser gerada das seguintes formas:
Por um grupo de alunos, que possui um tema interessante a ser clareado ou uma dúvida a ser elucidada, por o professor que deve apresentar questões relevantes para melhorar o processo de aprendizado dos alunos, determinadas numa espionagem ou por o professor, a partir de uma dúvida de um grupo enviada diretamente ao mesmo, de forma privada.
O processo de discussão informal é compreendido por a disponibilização de Contribuições diversas por os grupos de alunos e por o professor, a fim de explorar uma determinada Questão e, assim, grupos.
O processo de dúvidas geradas por os alunos está descrito a seguir, bem como a discussão informal propriamente dita.
Em uma espionagem o professor faz acesso ao Material dos grupos, analisando- os sem que os alunos saibam, a procura de erros ou problemas específicos de cada grupo e/ ou de erros cometidos por mais de um grupo durante a resolução do Exercício.
A partir deste processo de espionagem o professor pode gerar uma ou mais Questões para serem analisadas por os grupos em relação a seu Material.
Uma Questão gerada por o professor deve servir para alertar os alunos em relação a erros ou problemas em seu Material de uma forma indireta, isto é, o professor não aponta o erro diretamente nos projetos dos alunos, mas apresenta dicas, exemplos, pontos a serem analisados por os alunos no Material para que os próprios alunos descubram os erros e, assim, construam seu aprendizado a partir de seus próprios erros, omissões e soluções.
Dúvidas Dúvidas podem surgir durante a resolução de um exercício e/ ou durante uma discussão formal, descrito na Seção 5.3, tanto em relação a conceitos de projeto apresentados em sala de aula por o professor ou em relação a a aplicação dos mesmos durante a realização de um Exercício.
Uma Dúvida pode ser gerada de forma espontânea por os alunos, a partir de um problema encontrado por o grupo durante o resolução do exercício ou da discussão formal de uma solução, ou de forma induzida, a partir de uma Questão gerada por o professor a partir de uma espionagem.
A atividade de dúvida é caracterizado por o envio de uma Dúvida por o grupo com problemas diretamente para o professor, sem que os demais grupos tenham acesso direto a mesma.
Uma Dúvida é composta de uma descrição do problema, uma ou mais perguntas, sendo um objeto sem muita estruturação.
Junto com a dúvida os alunos podem enviar ao professor e o Material desenvolvido por o grupo até o momento, a fim de facilitar o entendimento do professor em relação a o problema do grupo como um todo.
A Figura 5.7 apresenta o diagrama de interação entre os objetos num processo de dúvida.
É importante que o professor nunca responda diretamente esta Dúvida a fim de estimular o pensamento crítico dos alunos, deixando que os mesmos encontrem a solução para seu problema ou a superação de tal dúvida.
Assim sendo, o professor deve gerar uma Questão (ou mais de uma) em relação a a Dúvida de um grupo, que deve ser disponibilizada para todos os demais grupos, a fim de alertar a todos sobre este problema específico e fazer- los contribuir para a resolução.
Quando os grupos recebem uma Questão e fazem uma análise da mesma, pode- se entrar num novo processo de dúvida ou numa discussão informal em o qual os participantes trocam idéias em relação a o problema com outros grupos de maneira assíncrona.
Espera- se que com o tempo esta atividade denominada dúvida não aconteça mais, sendo esta dinâmica de discussão durante a resolução de exercícios totalmente contemplada por a discussão informal entre todos os participantes do processo, e não só entre um grupo e o professor.
Discussão Todos os alunos e o professor podem participar do processo específico de discussão informal.
As Contribuições possíveis de serem enviadas por os Participantes em o processo de discussão informal são:
Dúvida (diretamente para o professor), Questão, Posição e Comentário.
Durante todo o processo qualquer uma destas Contribuições pode ser lançada a qualquer momento por qualquer um dos Participantes.
A Figura 5.8 apresenta o diagrama de interação que resume o processo de discussão informal, mostrando as relações entre os objetos envolvidos.
Um processo de discussão informal é iniciado a partir de uma Questão lançada a todos os envolvidos no processo.
Esta Questão pode ser gerada tanto por grupos de alunos quanto por o professor.
A partir de aí é possível apresentar Contribuições diversas como por exemplo uma Posição em relação a a Questão.
Uma Posição compreende uma referência a uma Questão previamente lançada e possivelmente uma referência ao seu Material a fim de melhor descrever e/ ou clarear sua Posição como um todo.
As Posições a uma Questão podem ser rebatidas/ complementadas por Comentários diversos de outros grupos.
Um Comentário compreende uma referência à Posição específica, isto é, um Comentário complementa uma Posição visando explorar uma Questão específica.
É possível gerar um Comentário sobre um Comentário prévio de outro grupo ou do professor.
As interações no processo de discussão informal devem ser assíncronas a fim de permitir que grupos que não se encontram com ou não possuem dúvidas no desenvolvimento do Exercício e mesmo problemas no Material desenvolvido até o momento possam continuar o desenvolvimento de seu Exercício específico sem ter que disponibilizar uma porção definida de tempo para discutir e elucidar dúvidas.
Isso não quer dizer que grupos sem problemas aparentes não devem participar da discussão informal:
Os mesmos devem ser incentivados, mas não são obrigados.
Por ser um processo essencialmente informal, não possui uma finalização específica para cada Questão específica lançada por um grupo de alunos ou por o professor.
Este processo de discussão informal pode levar os grupos à atividade de dúvida descrito na Seção 5.2.2 deste Capítulo, uma vez que grupos podem detectar diversos outros problemas em seu Material e não saber como resolver- los.
Discussão formal A Discussão Formal de projetos deve servir para consolidar o aprendizado dos alunos em relação a os conceitos vistos e aplicados durante a resolução de exercícios.
Existe uma preparação da discussão por parte de o professor, que engloba as etapas de verificação de exercício dos alunos e a elaboração do roteiro, a fim de explorar de forma mais produtiva o momento da discussão propriamente dita.
A etapa de discussão propriamente dita deve ser realizada de forma síncrona, com todos os alunos da turma ao mesmo tempo, sendo que, diferente das etapas anteriores, os grupos devem ser dissolvidos e cada aluno deve expor individualmente suas próprias idéias, sugestões e contribuições.
Por ser um processo formal, a discussão deve possuir um encerramento ou finalização.
O diagrama de objetos do processo de discussão formal é apresentado na Figura 5.9.
A cooperação existente em cada uma das etapas da discussão está descrita nas Seção a seguir.
Elaboração do Roteiro A etapa de elaboração do roteiro da discussão é totalmente baseada no processo de verificação de exercícios, uma vez que o professor, através desta atividade do subprocesso anterior, detectou problemas e/ ou boas soluções que podem ser usadas durante a discussão.
O professor deve, nesta fase, escolher uma ou mais soluções a serem disponibilizadas para os alunos discutirem.
A partir de estas soluções o professor deve definir o Roteiro da discussão, definindo os objetivos a serem alcançados, o número mínimo de contribuições que os alunos devem informar, a data, o horário de início, a duração prevista da discussão, e um conjunto de tópicos a serem discutidos.
Tanto as soluções para discussão quanto o Roteiro devem ser disponibilizados para os alunos.
Um conjunto de Tópicos iniciais a serem discutidos deve ser definido por o professor, baseado nos problemas ou em boas soluções detectadas encontrados nos projetos e devem possuir uma descrição, um conjunto de perguntas relacionadas e objetivos a serem atingidos (a fim de solucionar tais problemas), sugestões de análise de partes do projeto disponibilizado para a discussão.
Um Tópico faz referência a um ou mais Cartões Índices de um Projeto.
A Figura 5.10 descreve a interação dos objetos como um todo neste processo de elaboração do roteiro de uma discussão formal.
Em este processo de definição do roteiro, os Tópicos são apenas definidos, sendo enviados para os alunos em algum momento considerado oportuno por o professor durante o processo de discussão.
Discussão O processo de discussão é um processo síncrono, iniciado na data e horário definidos no Roteiro, com a disponibilização de um ou mais Tópicos relacionados a serem analisados por os alunos em relação a o Material de seu grupo.
A Figura 5.11 resume o processo de interação entre os objetos envolvidos numa discussão formal.
A o receberem o Tópico os alunos devem analisar- lo, tanto em relação a as soluções em discussão quanto a sua própria solução, visando explorar o Tópico e responder às perguntas.
Assim, o aluno pode utilizar seu próprio Material como comparativo na discussão, o que pode levar- lo a detectar, eventualmente, problemas em sua própria solução.
A análise de um Tópico pode levar os participantes a enviarem algum tipo de contribuição, sendo possível as seguintes Contribuições:
Posição e Sugestão De Tópico.
Um tipo de contribuição exclusiva ao professor é descrita como Comentário do Professor.
Sobre uma Posição podem ser apresentados diversos Comentários, por qualquer outro participante do processo.
Em um determinado momento um aluno pode enviar para o professor uma Sugestão De Tópico em o qual ele possui dúvidas e gostaria de ver a opinião dos colegas, ou que considera importante para a discussão como um todo.
Uma Sugestão De Tópico possui uma descrição e eventualmente uma referência a um Tópico que induziu o aluno a gerar tal sugestão.
O professor deve analisar a Sugestão De Tópico recebida e registrar ou não a mesma como um Tópico para ser futuramente utilizado na discussão.
Se julgar necessário, o professor pode enviar para os alunos um tipo de comentário especial, mais rígido, descrito como Comentário do Professor, que possui a descrição de um erro grave num Comentário de aluno, erro este que pode direcionar a discussão para o lado problemático.
Este Comentário deve ser enfatizado a fim de esclarecer para todos os grupos um problema descrito por um aluno.
À medida que julgar necessário o professor deve disponibilizar novos Tópicos para serem trabalhados e discutidos por os alunos.
Encerramento O processo de encerramento engloba atividades de encerramento da discussão formal, de um exercício e do processo como um todo.
A Figura 5.12 apresenta o diagrama de objetos de tais processos.
Encerramento de uma discussão O professor deve direcionar o fim da discussão induzindo os alunos a chegarem a conclusões e em relação a a discussão realizada.
A Figura 5.13 apresenta as interações que acontecem entre os objetos no encerramento da discussão.
Um Questionário deve ser gerado e enviado aos alunos para que os mesmos respondam um conjunto de perguntas relativas aos Tópicos tratados durante a discussão.
Desta forma os alunos podem melhor organizar tópicos, conceitos, problemas e resultados tratados durante a discussão.
O Questionário deve ser analisado e trabalhado por os alunos e as respostas enviadas para o professor.
Um Resumo, contendo uma síntese dos tópicos e problemas atacados durante a discussão, pode ser gerado e disponibilizado aos grupos de alunos.
Assim sendo os alunos devem novamente se organizar em grupos e voltar a fase de desenvolvimento do exercício, levando em consideração o Resumo recebido.
Encerramento de um exercício Os alunos devem passar por os processos exercício, discussão informal e formal, inúmeras vezes, dependendo do número de exercícios aplicados, em cada uma das etapas CRC.
Uma etapa CRC deve ser encerrada quando as diretrizes de tal etapa já foram suficientemente trabalhadas e exploradas, e os alunos demonstram através dos Comentários na discussão e de seus próprios Materiais desenvoltura e alguma experiência em tal etapa.
A Figura 5.14 apresenta as interações que acontecem entre os objetos no encerramento de um exercício.
Em este momento, a Verificação realizada por o professor sobre o Material, bem como as Anotações feitas nos Cartões Índices, devem ser disponibilizadas para os grupos, para que os mesmos possam melhorar a qualidade dos mesmos.
Algum tempo deve ser disponibilizado antes do encerramento de uma etapa CRC para que os alunos possam melhorar e corrigir seus Materiais baseados na Verificação e Anotações que receberam, sendo guiados e auxiliados por o professor durante o processo de realização de exercícios.
O ponto importante é que em nenhum momento o professor deve enviar uma solução para o problema, nem para partes do problema.
Ele deve deixar que os próprios alunos decidam se o Material desenvolvido para o Exercício é considerado coerente e satisfatório, baseados na experiência adquirida no processo como um todo.
Para o encerramento de um Exercício realizado numa etapa CRC os alunos devem entregar para o professor o Material descrito num conjunto de cartões índices que definem a solução para o Exercício.
O professor ao receber a solução estável dos grupos deve analisar- las e, ou voltar ao processo de discussão (se julgar necessário devido a erros e omissões de projeto) ou encerrar a etapa CRC, deixando os Materiais dos de todos os grupos num estado ok e disponibilizando um novo Exercício a ser cumprido dentro de a nova etapa CRC.
Encerramento do processo como um todo O processo deve ser encerrado quando os alunos já passaram por todas as etapas CRC, de acordo com o modelo de cooperação descrito anteriormente.
A Figura 5.15 apresenta as interações que acontecem entre os objetos no encerramento do processo como um todo.
A fim de fechar o processo o professor deve disponibilizar um conjunto de Exercícios que devem ser realizados como um todo, isto é, sem paradas de revisão entre cada etapa CRC, neste caso os Exercícios não possuem Passos.
Os alunos devem ser acompanhados e auxiliados por o professor quando sentirem necessidade ou quando depararem- se com problemas não vistos anteriormente, mas nenhum ponto de revisão específico está previsto previamente.
Após a resolução do exercício como um todo, a entrega e verificação do mesmo por parte de o professor, deve- se passar por o processo de discussão a fim de possibilitar aos alunos uma melhor assimilação dos conceitos vistos e aplicados, ou mesmo para que os alunos tirem dúvidas que eventualmente encontraram durante o processo.
A o final, os alunos são requisitados a entregar o Material desenvolvido, documentado em Cartões Índices para verificação e possível avaliação por parte de o professor.
Um conjunto de Boas Soluções deve ser compilado por o professor, bem como os Problemas Usuais mais encontrados nos Materiais, junto com um conjunto de dicas, FAQ´ s, etc..
Que resumam o processo como um todo.
Em os Capítulos 3, 4 e 5 foram apresentados respectivamente, a estrutura de um curso de projeto de software OO, uma proposta de ambiente de apoio a este curso e o modelo de cooperação que suporta tal curso e tal ambiente.
Em este Capítulo será mostrada a estrutura e implementação de um protótipo do ambiente de apoio ao curso, que visa validar pontos importante do curso como resolução cooperativa de exercícios e discussão de soluções.
Algumas outras funcionalidade de apoio às atividades dos alunos e do professor também estão sendo implementadas (tais como bibliotecas de exercícios, e de materiais dos alunos) visando dar um suporte maior a ambos os participantes do processo.
Características Gerais Um protótipo está sendo desenvolvido usando plataforma Internet, mais especificamente Www, Html e CGI--Scripts.
A escolha de tal plataforma se deu devido a sua larga utilização nos dias atuais, bem como facilidade e simplicidade de operação por parte de os alunos, uma vez que os mesmos já se encontram bastante familiarizados com tal tecnologia.
Em a implementação do protótipo não foi considerada a implementação de mecanismos de awareness para as sessões de discussão.
A arquitetura funcional do ambiente, descrita na Seção 4.4.,
serve de base para a organização das funcionalidades deste protótipo, organizadas em três workspaces, que agregam as atividades dos participantes do processo:
Workspace Público, que pode ser acessado por qualquer indivíduo, Workspace do Professor, e Workspace de Alunos.
Todos os Workspaces foram desenvolvidos de forma ao usuário poder fazer acesso a todas as suas atividades de forma mais simples e rápida possível, fazendo acesso direto a suas opções.
Assim, temos reunidas as atividades mais comuns para um participante em determinado contexto, o que facilita a alternância entre elas.
Para isso, cada Workspace é implementado com um conjunto de frames html, que permitem a visualização e acesso a todas as atividades possíveis de cada usuário em todos os momentos da utilização do ambiente.
A figura 6.1 apresenta a página principal do Workspace público que corresponde à página inicial do ambiente.
Note que a mesma é dividida em dois frames, sendo que o frame da esquerda apresenta ao usuário as opções de atividades disponíveis e no frame da direita os dados relativos a opção selecionada.
Para os demais Workspaces, a mesma filosofia é adotada, com as atividades possíveis listadas no frame a esquerda e as informações sobre a atividade selecionada à direita.
Workspace de Alunos O Workspace de alunos agrega as atividades dos alunos de forma seqüencial, na ordem em que as mesmas ocorrem durante o curso, da forma como foram definidas no modelo de cooperação.
A organização é feita desta maneira de forma a auxiliar os alunos no processo, seguindo a ordem correta das atividades.
De a mesma forma que o Workspace Público, o Workspace de Alunos apresenta um frame à esquerda com as atividades que o aluno pode realizar e à direita uma área de atividades, em a qual os alunos realiza as operações.
Um menu com as tarefas específicas de atividades selecionas à esquerda é apresentado na parte superior do frame direito, para facilitar o acesso dos alunos a estas tarefas e a troca de tarefa de forma simples.
Assim, o aluno tem acesso rápido e fácil uma vez que estão sempre visíveis durante a realização de uma atividade.
A página principal do Workspace de Alunos é apresentada na figura 6.2.
À esquerda podem ser vistas as atividades dos alunos:
Seleção de Exercício, Desenvolvimento de Exercício, Discussão Formal e Encerramento.
Em o frame à direita é apresentada a tarefa Seleção de Exercício, que é a primeira que deve ser realizada por os alunos antes de iniciarem qualquer outra atividade.
Workspace do Professor O Workspace do Professor agrega todas as atividades que o professor pode realizar durante os diversos momentos do curso, tais como atividades de estruturação, acompanhamento, gerenciamento de bibliotecas e de informações de alunos, como descritas no modelo de cooperação subjacente.
Diferente de ambos os Workspaces apresentados anteriormente, as atividades do professor não são organizadas de forma seqüencialmente ordenada, uma vez que suas atividades não são necessariamente realizadas de forma seqüencial.
As atividades são organizadas de acordo com os diversos papéis que o professor pode assumir durante o curso:
Estruturador de atividades dos alunos, no momento em que está definindo atividades como desenvolvimento de exercício e seções de discussão;
Acompanhador, quando se encontra espionando ou fazendo verificações em exercícios e acompanhando ou mediando discussões;
Gerenciador do ambiente, quando está cadastrando grupos de alunos e alterando informações pessoais de alunos.
A figura 6.3 apresenta a página principal do Workspace do Professor.
Cenário de Utilização A seguir será apresentado um cenário de utilização, sendo mostradas algumas das atividades necessárias tanto do professor, quanto de grupos de alunos e alunos individualmente, a fim de exemplificar o processo de ensino-aprendizagem do curso.
Note que nem todas as atividades e telas do protótipo estão apresentadas.
Somente são apresentadas as telas mais importantes.
Definição do Exercício A definição de um exercício é feita por o professor e compreende a definição de uma descrição de um problema, uma data de definição e uma possível data de entrega, como pode ser visto na Figura 6.4.
Em o protótipo não foram implementados exercícios do tipo passo.
Resolução do Exercício A resolução de um exercício compreende a realização das tarefas propostas por o professor em relação a um exercício publicado por o mesmo e selecionado por o grupo.
Em um primeiro momento da resolução de um exercício os alunos devem selecionar a versão do material que irão resolver, podendo ser uma nova versão, uma versão anterior ou a versão corrente.
Depois desta escolha feita, um conjunto de atividades pode ser realizadas sobre esta versão tais como:
Criar um novo cartão, editar ou excluir um cartão já existente, visualizar todos os cartões, etc., como pode ser visto na figura 6.5.
A figura 6.6, a seguir, mostra um novo cartão índice sendo criado por o grupo de alunos.
Elaboração do Roteiro A elaboração do roteiro feita por o professor consiste na definição de aspectos como data e duração da discussão, bem como de objetivos a serem atingidos por os alunos ao final do processo.
Para isso, o professor define um conjunto de tópicos a serem discutidos e organiza a ordem de discussão dos mesmos.
A definição de um roteiro de discussão é mostrada na Figura 6.7, enquanto que a página para a definição de tópicos é mostrada na figura 6.8.
Note que nestas duas figuras temos um frame superior que apresenta um conjunto de atividades que podem ser realizadas no contexto da atividade selecionada do frame à esquerda.
Discussão Formal A discussão acontece a partir de a apresentação de contribuições por os alunos e professor, na data e horário estabelecidos no roteiro do debate.
Cada um dos tópicos definidos pode estar num dos seguintes estados:
Fechado, isto é, ainda não abertos para a discussão, em discussão e já discutido.
A Figura 6.9 mostra a página inicial de uma discussão, com o resumo da mesma e um conjunto de tópicos definidos, em diferentes estados.
Um tópico em discussão é mostrado na Figura 6.10, de uma maneira resumida, apresentando somente um resumo do tópico e o conjunto de posições apresentadas para este tópico.
Para que um participante possa incluir uma contribuição qualquer no debate o mesmo deve selecionar a contribuição à qual vai se referir e selecionar a opção adicionar contribuição e então completar o formulário adequado, visto na Figura 6.12.
Note, na Figura 6.11, que existe um encadeamento entre as contribuições apresentadas, tornando mais simples sua organização e consulta.
Encerramento O encerramento de uma discussão acontece quando todos os tópicos já foram discutidos e explorados por os alunos.
O professor deve disponibilizar um resumo dos tópicos e dos objetivos da discussão, um questionário para ser respondido por os alunos, bem como estabelecer uma nova data para a entrega do exercício, que deve ser revisado por os alunos levando em consideração os aspectos discutidos.
Implementação A implementação do protótipo está sendo desenvolvida utilizando- se Html, formulários, CGI--Scripts e Java Scripts.
É utilizado um servidor Www em ambiente Unix.
Os CGI--Scripts estão sendo desenvolvidos utilizando- se linguagem C e compilados no próprio ambiente Unix com o compilador GCC.
Não foi implementado no protótipo o mecanismo de consciência.
Por se tratar de um protótipo, a preocupação inicial foi em relação a validar aspectos do curso, tais como o desenvolvimento de exercícios e a discussão de soluções.
Também foi dada ênfase à implementação dos Workspaces agregando as atividades de professores e grupos de alunos em suas respectivas áreas, a fim de melhor organizar e tornar mais fácil o acesso às várias atividades de ambos os participantes.
Mecanismos adequados de persistência dos dados e informações não foram pesquisados neste primeiro momento, sendo todos os dados gravados em arquivos texto, sendo separados em diferentes diretórios na área do protótipo.
Um diretório principal, chamado OO, ao qual qualquer indivíduo pode fazer acesso, agrega todas as páginas do Workspace Público, que apresentam informações gerais, uma página de solicitação de cadastramento de grupos e uma página para acesso ao sistema.
O acesso ao sistema de somente indivíduos cadastrados é implementado utilizando- se o protocolo Html que permite restringir o acesso através da criação de dois arquivos:
Htpasswd, que contém o nome de todos os usuários e suas respectivas senhas, armazenadas de forma criptografadas;
E. Htaccess, que é composto por o nome dos usuários que tem direito de acesso a um determinado diretório, por uma referência ao arquivo de senhas.
O arquivo de senhas é colocado num diretório que possui restrição de acesso.
Assim, somente os usuários que possuem seu nome num arquivo.
Htaccess num determinado diretório podem fazer acesso às páginas do mesmo.
Os subdiretórios a esquerda, na estrutura de diretórios vista na Figura 6.14, guardam os arquivos.
Htpasswd para cada subdiretório à direita.
Os alunos cadastrados em grupos podem fazer acesso ao seu próprio Workspace.
Para cada grupo, no momento de seu cadastramento, é criado um diretório que dá acesso ao material do grupo para os alunos cadastrados neste grupo, e os ambos os arquivos.
Htpass e.
Htpacces são criados.
Cada grupo possui um diretório principal, em o qual encontra- se a página inicial do grupo denominada index.
Html. Um conjunto de subdiretórios, um para cada exercício sendo desenvolvido também é criado.
Cada diretório de exercício possui a versão corrente do projeto em desenvolvimento e subdiretórios para cada versão anterior do projeto.
Para o professor, também existe um diretório principal que permite acesso aos outros subdiretórios, com a página professor.
Html sendo a página principal.
Somente o professor tem acesso a esta área, em a qual são organizados dados dos grupos e alunos a serem cadastrados e grupos já cadastrados, exercício criados, links interessantes, roteiros de discussão e tópicos ainda não disponibilizados, etc..
Subdiretórios na área do professor dividem a biblioteca de links e exercícios, as informações dos alunos e as discussões.
Discussões e exercícios criados mas não disponibilizados estão colocados na área do professor.
Quando são apresentados para os alunos os mesmos são transferidos para os subdiretórios debates e exercícios, respectivamente.
Para cada debate, cujo roteiro é disponibilizado por o professor tem- se um diretório, sendo que os tópicos são também organizados em subdiretórios, em os quais são colocados sob a forma de arquivos texto todas as contribuições apresentadas por os alunos.
Todos os alunos têm direito de acesso aos diretórios dos debates no momento em que os mesmos são disponibilizados por o professor.
A estruturação de informações de discussões informais, ou dúvidas, embora não implementada até o momento deve seguir a mesma forma da discussão formal.
Estado atual da implementação Embora esta não seja a melhor forma de implementação, principalmente em termos de persistência de dados, o primeiro objetivo do protótipo é validar os benefícios que o processo de discussão de forma síncrona e distribuída, utilizando- se Internet como meio para isso, possa trazer para o aprendizado do paradigma OO.
As interfaces das páginas do protótipo cridas num primeiro momento estão sendo remodeladas para permitir aos usuários uma maior facilidade de movimentação entre as diversas tarefas e atividades que pode realizar.
As novas telas, atualmente em fase de implementação foram apresentadas nas figuras 6.1 a 6.13.
Toda a parte de cadastramento de usuários, tanto a solicitação de cadastramento por parte de um grupo de alunos, e da realização do mesmo por o professor, bem como cadastramento de novos professores, já foi implementada, e estão atualmente passando por a fase de adaptação à nova interface.
A parte de desenvolvimento de exercícios encontra- se com sua implementação completa, e permite aos alunos criar, excluir, alterar e visualizar cartões índices referentes a um exercício disponibilizado por o professor.
Em esta primeira versão, não foi implementado o mecanismo de versões do projeto.
Para o professor, encontra- se desenvolvida a parte de estruturação de exercícios e de discussões formais.
Para discussões formais pode- se criar tanto roteiro da discussão quanto tópicos e manipular- los de forma a melhor estruturar a mesma.
A próxima etapa da implementação a ser realizada é do acompanhamento de discussões, para o professor, que permitirá ao mesmo iniciar um debate, abrindo e fechando tópicos, disponibilizando novos tópicos, etc..
Para ambos os participantes as páginas que permitam aos mesmos discutir, apresentando contribuições diversas, visualizando as contribuições dos demais participantes deve ser a etapa a ser implementada a seguir.
Em este trabalho foi apresentado uma proposta de um curso colaborativo para ensino do Paradigma de Orientação a Objetos, baseado em técnicas colaborativas, tais como desenvolvimento de exercícios de forma cooperativa e discussão de soluções.
O objetivo principal de tal curso é proporcionar o aprendizado efetivo do paradigma OO, induzindo e apoiando a troca de paradigma e o desenvolvimento do pensamento orientado a objetos.
As principais etapas do curso são a resolução de exercícios por parte de os alunos, em grupo e de forma cooperativa, e a discussão de soluções possíveis para os exercícios desenvolvidos.
Foi desenvolvido e apresentado também, um modelo de cooperação que formaliza o curso, e descreve como os participantes (professor e alunos) se relacionam, de acordo com os objetos que trocam entre si.
Um modelo de argumentação define a estrutura das sessões de discussão, definindo como os diferentes tipos de contribuições apresentadas por alunos e professor se relacionam.
Um ambiente de apoio ao curso também é definido e apresentado, visando definir uma forma computadorizada de auxílio ao curso.
O protótipo do ambiente, também descrito no trabalho, servirá como uma forma de validar o curso e o ambiente definidos neste trabalho.
O protótipo, atualmente em fase de implementação, utiliza tecnologia Www, Html, formulários e CGIScripts, como meio de implementação, e tal tecnologia foi escolhida por sua ampla utilização, por a facilidade de utilização e manipulação por parte de os alunos.
Como contribuições do trabalho pode- se citar:
A estrutura do curso colaborativo, que pode vir a ser utilizado para ensino de outras disciplinas de modelagem de dados;
O modelo de cooperação, que descreve a interação entre os participantes do processo;
O modelo de argumentação, que define a discussão de forma estruturada, relacionando os diferentes tipos de contribuições;
O ambiente computadorizado de apoio ao curso, baseado no modelo de cooperação;
Como trabalhos futuros tem- se:
O término da implementação do protótipo;
A utilização do protótipo num estudo de caso real, a fim de validar o curso e seus aspectos importantes em relação a o ensino efetivo do paradigma OO e a eficácia do ambiente CSCL;
Implementação de mecanismos de awareness nas discussões do protótipo, visando melhorar as seções de discussão;
Como aprendizado durante o desenvolvimento deste trabalho é possível citar:
Aspectos importantes no contexto de ensino-aprendizagem, tais como apresentação e utilização de situações práticas para os alunos;
Aspectos colaborativos que podem auxiliar no processo de ensino-aprendizagem, tais como desenvolvimento de exercícios e seções de discussão, que podem induzir de forma mais simples e eficaz à troca de paradigma e ao desenvolvimento do pensamento orientado a objetos;
A idéia de modelos de cooperação e de modelos de argumentação para apoio e descrição de atividades colaborativas;
A utilização de tecnologia Internet e Html para implementação de ambientes de apoio ao processo de ensino aprendizagem e de cooperação em geral.
