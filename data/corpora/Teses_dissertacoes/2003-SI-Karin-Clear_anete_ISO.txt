Os avanços nas tecnologias de informação e de comunicação tem determinado novas direções no desenvolvimento de software, entre as quais podemos citar o desenvolvimento baseado em componentes e as tecnologias para componentes distribuídos.
A expectativa é que novas aplicações sejam mais facilmente construídas através da adaptação e combinação de componentes.
Desta forma, torna- se evidente a necessidade de uma infraestrutura que suporte a comunicação entre componentes distribuídos e possivelmente heterogeneos.
Embora possamos observar consideráveis avanços nas tecnologias de componentes distribuídos, pouca atenção tem sido dada ao desenvolvimento sistemático de aplicações baseadas nestas tecnologias.
Construir um sistema distribuído sem analisar detalhadamente os requisitos necessarios e as características relacionadas à distribuição pode representar um risco considerável em termos de qualidade e produtividade da aplicação resultante.
Em a prática, o desenvolvimento de aplicações que fazem uso de componentes distribuídos esta fortemente acoplado à infra-estrutura de distribuição alvo, e muitas decisões importantes somente são consideradas durante as fases de implementação ou de implantação da aplicação.
Em este documento, descrevemos uma extensão realizada no processo de desenvolvimento de UML Components, e na arquitetura de referência dos sistemas alvo deste método, a fim de tratar aspectos de distribuição já nas fases iniciais do ciclo de vida do processo.
A idéia básica foi identificar requisitos de distribuição, modelar estes requisitos desde as fases iniciais do ciclo de vida e mapear- los em termos de componentes distribuídos.
A extensão realizada no processo incluiu redefinição de atividades existentes, inclusão de novas atividades, bem como a modificação na arquitetura da aplicação resultante, a qual, além de ser composta por componentes de sistema e de negócio, passa a incorporar também componentes de distribuição.
A utilização freqüente de sistemas de software para apoio e realização de tarefas de diversas ãreas de negócio tem contribuído, cada vez mais, para a necessidade de desenvolvimento de produtos que satisfaçam ãs expectativas do negócio adequadamente e que sejam capazes de atender as mudanças decorrentes da evolução do próprio negócio.
As atividades relacionadas ao desenvolvimento de tais produtos, devem obedecer algumas considerações primordiais para o bom andamento do processo de desenvolvimento de software.
Em primeiro lugar, devem garantir a integridade dos requisitos funcionais a serem atendidos por a aplicação, através de sua correta definição e adequada implementação, além de estabelecer os requisitos não-funcionais necessários.
Em segundo lugar, deve- se dividir o projeto do sistema de software em unidades de trabalho, a fim de distribuir- las entre equipes.
Este particionamento deve explicitar claramente as dependencias entre as unidades, além de apresentar as regras e convenções arquiteturais utilizadas.
Por fim, para tornar- se competitivo, o software deverá ser flexível para possibilitar não somente sua mudança de forma rápida, mas também a configuração de diversos parãmetros visando sua reutilização.
A rápida evolução das tecnologias de hardware e de telecomunicação, a acessibilidade a informações distribuidas e remotas, a disseminação de tecnologias para a World Wide Web (Www) e os esforços na busca de padronização das atividades e recursos relacionados ao desenvolvimento de software, tem feito a indústria repensar a forma como o software é desenvolvido.
Entre as novas direções no desenvolvimento de software, destacam- se o Desenvolvimento Baseado em Componentes (DBC) e as tecnologias para componentes distribuídos.
O principal objetivo das abordagens DBC está focado na utilização de componentes interoperãveis, capazes de reduzir a complexidade e o custo envolvidos no desenvolvimento e de propiciar a reutilização destes componentes em outras aplicações.
Contudo, uma análise de métodos DBC disponiveis na literatura, tais como UML Components, Catalysis, Rational Unified Process (RUP) e Kobra, revela limitações importantes, em particular no tocante a reuso de componentes.
Também a anãlise da literatura revela que ainda são muitos os desafios a serem enfrentados para que o uso de DBC alcance amplamente os beneficios oriundos da reutilização, tais como:
Definir de forma mais precisa e amplamente aceita o que é um componente;
Aplicar efetivamente métodos DBC a fim de alcançar maior grau de maturidade destas abordagens* Fornecer subsídios para o estabelecimento de regras para a adoção e conscientização de políticas de reutilização nas organizações* Utilizar um modelo de componentes capaz de fornecer suporte a atividades de adaptação e integração de componentes -- Considerar novas tecnologias e classes de aplicação Embora possamos observar consideráveis avanços nas tecnologias de componentes distribuídos, pouca atenção tem sido dada ao desenvolvimento sistemático de aplicações baseadas nestas tecnologias.&amp;&amp;&amp;
Alguns exemplos destas tecnologias podem ser encontrados nas seguintes infra-estruturas de distribuição:
Common Object Request Broker Architecture (CORBA), Distributed Component Object Model (DCOM), Java Remote Method Invocation (RMI), entre outros.
Em a prática, enquanto o desenvolvimento de sistemas de software leva em consideração os requisitos funcionais e não-funcionais durante todas as fases do ciclo de vida, o desenvolvimento de aplicações distribuídas está fortemente acoplado à infra-estrutura de distribuição alvo, e muitas decisões importantes somente são consideradas durante as fases de implementação ou de implantação (deployment) da aplicação.
Construir uma aplicação distribuída, sem analisar detalhadamente os requisitos funcionais necessários e as características relacionadas à distribuição, pode representar um risco considerável em termos de qualidade e produtividade da aplicação resultante, pois e preciso lidar com a complexidade decorrente da comunicação e da coordenação dos componentes a serem distribuídos.
A identificação de caracteristicas especificas de distribuição desde o inicio do ciclo de vida do desenvolvimento, e a realização da modelagem das mesmas independentemente da infra-estrutura de distribuição alvo, representa uma forma de reduzir esta complexidade e de tornar o projeto do sistema mais consistente.
Além de isto, estara permitindo que as propriedades identificadas e modeladas sejam mais facilmente mapeadas para a infra-estrutura de distribuição alvo na etapa de implementação.
Os métodos DBC existentes não contemplam características outras que requisitos relacionados ao dominio, tipicamente funcionais.
Desta forma, percebe- se a necessidade de antecipar o tratamento das questões relacionadas à distribuição, projetando maiores detalhes da solução já no projeto da aplicação.
Dado o contexto e as necessidades atuais de desenvolvimento de software, tem- se a seguinte questão de pesquisa:
&quot;Identificar características de distribuição e apresentar formas de priorizar a modelagem destas características nas fases iniciais do ciclo de vida de uma abordagem de DBC.»
Em este trabalho, descrevemos uma extensão realizada em UML Components, e na arquitetura de referência dos sistemas alvo deste método, a fim de tratar aspectos de distribuição jã nas fases iniciais do ciclo de vida do desenvolvimento.
Para cada fase, UML Components propõe um conjunto de passos que resultarão na identificação de componentes relacionados ao domínio (sistema e negócio), suas respectivas interfaces, e como estes componentes interagem para compor a arquitetura da aplicação.
A extensão foi proposta com base na necessidade de identificar requisitos de distribuição, modelar estes requisitos desde as fases iniciais do ciclo de vida e mapear- los em termos de componentes distribuídos.
A extensão realizada incluiu redefinição de atividades existentes, inclusão de novas atividades, bem como a modificação na arquitetura de referência da aplicação resultante.
A arquitetura de referência, composta originalmente por componentes de sistema e de negócio, passou a incorporar também componentes de distribuição.
A proposta de extensão torna o sistema mais flexível, uma vez que a arquitetura resultante passa a contemplar camadas da aplicação com responsabilidades especificas (sistema, negócio, distribuição), bem como as partes existentes em cada camada (componentes) e os serviços disponiveis em cada parte (interfaces).
Desta forma, manteve- se a independência entre as camadas, e as responsabilidades puderam ser delegadas de maneira apropriada, favorecendo a reutilização das mesmas em outros contextos.
Como beneficos desta pesquisa buscou- se o levantamento e especificação de requisitos de distribuição de maneira independente de uma infra-estrutura de distribuição especifica.
Tambem a extensão proposta a UML Components considerou que a aplicação dos artefatos e atividades relativos a modelagem dos requisitos de distribuição pudessem ser aplicados paralelamente ao restante do processo de desenvolvimento, ou de forma independente.
Por fim, buscou- se privilegiar a manutenção e o reuso de componentes.
Para atingir os objetivos propostos, foram realizadas as seguintes atividades:
Identificar métodos DBC que pudessem servir como guia para a pesquisa;
Estabelecer conceitos e tecnicas para DBC que representassem consenso na literatura, a fim de estipular critérios a serem aplicados na avaliação de métodos DBC existentes;
Selecionar métodos DBC para avaliação segundo os critérios estipulados;
Estabelecer conceitos e tecnologias para ambientes distribuídos, a fim de identificar um conjunto inicial de requisitos de distribuição;
Estudar o metodo DBC selecionado, neste caso UML Components, identificando os pontos de convergência com o problema proposto e os pontos de melhoria, propondo as alterações necessarias;
Demonstrar a aplicação da extensão proposta através da realização de um estudo de caso, refletindo sobre os resultados obtidos.
O restante deste documento está estruturado como segue:
O Capitulo 2 apresenta a compilação de conceitos e abordagens para DBC, o conjunto de critérios estabelecidos a partir de esta compilação e a aplicação dos mesmos sobre métodos existentes.
O Capitulo 3 detalha UML Components, ressaltando características de sua arquitetura e de seu processo de desenvolvimento.
O Capítulo 4 indica conceitos relacionados a ambientes distribuídos, um conjunto de requisitos de distribuição identificado a partir destes conceitos, e detalha a tecnologia de distribuição a ser utilizada no estudo de caso, neste caso CORBA, e o mapeamento dos requisitos de distribuição para esta tecnologia.
O capítulo 5 descreve a extensão realizada em UML Components, ressaltando as adaptações realizadas na arquitetura e no processo de desenvolvimento.
O Capítulo 6 ilustra o método estendido num estudo de caso.
E, por fim, o Capítulo 7 apresenta conclusões, apontando trabalhos futuros.
As abordagens baseadas em componentes representam uma nova perspectiva para o desenvolvimento de software, e seu principal objetivo está focado na utilização de componentes interoperaveis, capazes de reduzir a complexidade e o custo envolvido no desenvolvimento, bem como propiciar a reutilização destes componentes em outras aplicações.
O DBC distingue- se do desenvolvimento de software tradicional por focar no desenvolvimento de partes independentes, composição destas partes e interoperação.
Este capitulo apresenta o ciclo de vida e atividades que devem ser consideradas no DBC, as principais caracteristicas do DBC e alguns métodos existentes.
Também é descrito um estudo comparativo realizado entre três diferentes métodos de DBC, que foi utilizado para definir o modelo de referência para esta pesquisa.
Com o intuito de aprimorar a qualidade de software e aumentar a produtividade, diversas empresas tem adotado programas de reutilização.
Para prover uma sistemática de reuso, primeiro é preciso identificar diferentes aspectos relacionados ao reuso, tanto técnicos quanto nâotécnicos e, depois, é preciso estabelecer uma politica para conscientizar a organização sobre as diferentes formas de reuso e seus possiveis beneficios.
O reuso pode ser aplicado sob duas perspectivas:
Em nivel de artefatos, buscando encontrar elementos (artefatos) que possam ser reutilizáveis em soluções futuras.
Para isso, é preciso decompor os sistemas para encontrar os artefatos futuramente reusáveis;
Em nivel de experiência, onde aproveitam- se as experiencias obtidas em projetos anteriores, diminuindo assim o tempo investido por projetistas e desenvolvedores de software no aprendizado de novas tecnologias, abordagens, artefatos, entre outros.
O processo de implantação de uma tecnologia de reuso necessita de uma gerência onde possam ser destacadas etapas para planejamento, criação, gerência e utilização.
A Figura l mostra o ciclo basico de funcionamento da gerência de reuso.
A etapa de planejamento visa definir uma estratégia de reuso e um plano para implementação dentro de a empresa.
A etapa de criação busca produzir software e produtos associados para reuso.
Em a gerência de artefatos é preciso coletar, avaliar, descrever e organizar os artefatos de software para garantir sua disponibilização nas etapas de criação e utilização.
Por último, na etapa de utilização, é onde o reuso dos artefatos propriamente dito é realizado, atraves de composição e adaptação dos artefatos existentes.
As características particulares apresentadas no uso de uma abordagem de reuso indicam a necessidade de alterações no ciclo de vida de desenvolvimento de software de modo a incorporar atividades próprias desta abordagem.
O DBC é originado a partir de o ciclo de vida para reuso e pode ser guiado por duas visões:
Desenvolvimento pi reutilização, que se preocupa com a disponibilização de artefatos (eg.
Classes abstratas, componentes, frameworks, padrões) em todos os niveis de abstração e com sua utilização em mais de uma aplicação dentro de um dominio especifico;
Desenvolvimento com reutilização, que enfatiza a busca, seleção e adaptação de componentes para a construção de uma aplicação especifica.
Em o desenvolvimento com reutilização, também chamado desenvolvimento com componentes, considera- se um conjunto de atividades relacionadas que levam à implementação de uma aplicação através da composição de componentes existentes.
Segundo, as atividades essenciais para o desenvolvimento com componentes são (Figura 3):
Seleção: Pesquisar e selecionar componentes que apresentam potencial de serem usados no desenvolvimento do sistema;
Qualificação: Garantir que o componente executa as funcionalidades necessárias;
Adaptação: Corrigir potenciais fontes de conflito entre os componentes selecionados e qualificados para compor o sistema;
Composição ou Integração:
Definir como os sistemas são formados;
Atualização ou Evolução:
Substituir versões antigas ou incluir novos componentes, com comportamento e interface similares.
Embora as atividades de desenvolvimento com componentes e desenvolvimento de componentes estejam inter-relacionadas por os seus resultados, as suas aplicações implicam processos de desenvolvimento distintos.
Em o desenvolvimento de componentes, existe uma maior tendência na realização de atividades de especificação e implementação de componentes, além de apresentar uma preocupação em prover documentação adequada para viabilizar a reutilização do componente.
Em o desenvolvimento com componentes, as atividades visam a utilização de componentes pré-existentes, devendo viabilizar uma forma sistemática para selecionar, qualificar, adaptar, integrar e atualizar os componentes numa infra-estrutura comum.
Tendo em vista que a proposta aqui apresentada enfoca o tratamento de requisitos de distribuição nas fases iniciais do ciclo de vida de desenvolvimento, visando possibilitar a construção de uma aplicação que apresente maior atendimento aos requisitos e maior compatibilidade com as caracteristicas da infra-estrutura de distribuição em a qual será disponibilizada, tem- se a necessidade de apresentar caracteristicas especificas de DBC, ressaltando aspectos que ainda se encontram em processo de maturação.
Embora muitas definições de componentes de software possam ser encontradas na literatura, ainda não há um consenso quanto a a caracterização do termo no âmbito de DBC.
De a mesma forma, ainda estamos distantes de construir aplicações baseadas em componentes de maneira sistemática.
Um estudo realizado em, Figura 4, apresenta a evolução das tecnologias que podem ser empregadas no desenvolvimento de componentes e a tendência para os próximos anos.
Dado o cenário atual de DBC, para a realização deste estudo, foram avaliados alguns conceitos de componentes e seus resultados foram compilados, a fim de caracterizar os pontos divergentes no tocante a o conceito de componentes.
Também a carência de uma sistemática na aplicação do DBC levou à compilação de alguns estudos e a definição de critérios que pudessem ser aplicados na avaliação de métodos DBC existentes, a fim de selecionar o método mais adequado para o tratamento do problema proposto.
Como já mencionado, ainda não ha um consenso quanto a a caracterização do termo componente no âmbito de DBC que seja amplamente aceito, na medida em que cada grupo acaba por definir este conceito da forma mais apropriada para o seu contexto de trabalho.
Em pode- se encontrar a afirmativa de que o termo componente tem sido foco de algumas discussões por o fato de suas definições apresentarem aspectos diferenciados de um componente.
Foram estudadas as definições apresentadas em, e, por serem objeto de referência para a maioria da literatura relacionada a DBC.
Embora apresente componentes como todo e qualquer artefato que possa ser reutilizado, outros autores, como e, conceituam componentes de uma forma menos ampla e num menor grau de abstração.
Em, e apresentada uma definição de componentes, no âmbito de reuso.
Componentes de software reusáveis são apresentados como artefatos auto-contidos e claramente identificados, capazes de descrever e/ ou executar funções especificas.
Além de isto, possuem interface clara, documentação apropriada e status de reuso definido.
Devido a falta de consenso com relação a definição de componentes, é importante avaliar os termos envolvidos nesta definição de maneira mais detalhada:
Auto-contido: Caracteristica dos componentes de poderem ser reusãveis sem a necessidade de incluir/ depender de outros componentes.
Caso exista alguma dependência, então todo o conjunto deve ser visto como o componente reutilizãvel;
Identificação: Componentes devem ser facilmente identificados, ou seja, devem estar contidos num único lugar ao inves de estarem espalhados e misturados com outros artefatos de software ou documentação.
Os componentes são tratados como artefatos por poderem assumir uma variedade de diferentes formas como, por exemplo, código fonte, documentação e codigo executável;
Funcionalidade: Componentes têm uma funcionalidade clara e especifica que realizam e/ ou descrevem.
Componentes podem realizar funções ou podem ser simplesmente descrições de funcionalidades.
Com isso se deseja também caracterizar como componente toda a documentação do ciclo de vida do software, embora esta não inclua a codificação de funcionalidades propriamente dita;
Interface: Componentes devem ter uma interface clara, que indica como podem ser reusados e conectados a outros componentes, e devem ocultar os detalhes que não são necessarios para o reuso;
Documentação: A existência de documentação é indispensável para o reuso.
O tipo de componente e sua complexidade irão indicar a conveniência do tipo de documentação;
Condição de Reuso: Componentes devem ser mantidos de modo a preservar o reuso sistemático e a condição de reuso compreende diferentes informações como, por exemplo, quem é o proprietário, quem deve ser contatado em caso de problema, qual é a situação de qualidade, entre outras.
A definição apresentada em conceitua um componente como qualquer parte do sistema de software que pode ser identificada e reusada.
O fato desta definição ser bastante genérica quanto a o que e um componente, leva a um maior grau de reuso, e, conseqüentemente, a preocupação com o reuso em todas as etapas do processo de desenvolvimento de software.
O reuso sistemático deve ter inicio independente da tecnologia disponivel.
À medida que novas tecnologias forem sendo disponibilizadas e atingirem um certo grau de maturidade, o reuso deve ser estendido de modo a abranger novos tipos de componente.
Em contrapartida à definição de, as definições de e não são tão genéricas quanto a o que é componente, especialmente por o fato de considerarem componentes como o estado seguinte de abstração depois de funções, módulos e classes.
Para, um componente e caracterizado como um conjunto independente de serviços reutilizaveis.
Por um conjunto independente entende- se que não existe um vínculo do componente com o contexto em o qual ele sera utilizado.
Por serviços reutilizaveis entende- se a capacidade que um componente apresenta de disponibilizar as habilidades, ou serviços, que podem ser acessados por outros componentes.
Esta característica implica a necessidade de uma especificação adequada do que o componente faz e da forma como se comporta quando seus serviços são utilizados.
Em um componente e considerado uma unidade de composição, com interfaces contratualmente especificadas, e apenas dependências de contexto explícitas.
Segundo o autor, um componente de software pode ser usado independente e combinado com outras partes.
O fato de ser apresentado como uma unidade de atuação independente implica na necessidade de separação do ambiente e dos demais componentes.
A necessidade de encapsular a implementação é suportada por a especificação de interfaces.
A combinação com outras partes pode ser provida através de uma especificação dos serviços que o componente provê.
Por fim, para que Condição de Reuso:
Componentes devem ser mantidos de modo a preservar o reuso sistemático e a condição de reuso compreende diferentes informações como, por exemplo, quem é o proprietário, quem deve ser contatado em caso de problema, qual é a situação de qualidade, entre outras.
A definição apresentada em conceitua um componente como qualquer parte do sistema de software que pode ser identificada e reusada.
O fato desta definição ser bastante genérica quanto a o que e um componente, leva a um maior grau de reuso, e, conseqüentemente, a preocupação com o reuso em todas as etapas do processo de desenvolvimento de software.
O reuso sistemático deve ter inicio independente da tecnologia disponivel.
À medida que novas tecnologias forem sendo disponibilizadas e atingirem um certo grau de maturidade, o reuso deve ser estendido de modo a abranger novos tipos de componente.
Em contrapartida à definição de, as definições de e não são tão genéricas quanto a o que é componente, especialmente por o fato de considerarem componentes como o estado seguinte de abstração depois de funções, módulos e classes.
Para, um componente e caracterizado como um conjunto independente de serviços reutilizaveis.
Por um conjunto independente entende- se que não existe um vínculo do componente com o contexto em o qual ele sera utilizado.
Por serviços reutilizaveis entende- se a capacidade que um componente apresenta de disponibilizar as habilidades, ou serviços, que podem ser acessados por outros componentes.
Esta característica implica a necessidade de uma especificação adequada do que o componente faz e da forma como se comporta quando seus serviços são utilizados.
Em um componente e considerado uma unidade de composição, com interfaces contratualmente especificadas, e apenas dependências de contexto explícitas.
Segundo o autor, um componente de software pode ser usado independente e combinado com outras partes.
O fato de ser apresentado como uma unidade de atuação independente implica na necessidade de separação do ambiente e dos demais componentes.
A necessidade de encapsular a implementação é suportada por a especificação de interfaces.
A combinação com outras partes pode ser provida através de uma especificação dos serviços que o componente provê.
