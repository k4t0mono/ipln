Este trabalho apresenta um método de geração de informações derivadas para análise da utilização de recursos de máquinas agregadas.
Ests informações são geradas com base nas correlações existentes entre as informações dos sistemas de gerência de recursos e monitoração utilizados no agregado.
Para validar o método, foi desenvolvido um ambiente, chamado C LANE, que implementa o método proposto e gera as informações derivadas sobre a máquina agregada.
Este ambiente foi instalado e configurado no laboratório do Centro de Pesquisa em Alto Desempenho da PUCRS, a fim de obter informações sobre as interações dos usuários com a principal máquina agregada presente no laboratório.
Em o final do trabalho são apresentadas análises sobre duas aplicações executadas no agregado principal do CPAD, chamado Amazônia, utilizando as informações derivadas geradas por o ambiente C LANE.
Palavras-chaves: Máquinas agregadas, gerência de recursos, monitoração de sistema, análise de desempenho.
A utilização de técnicas de processamento de alto desempenho é atualmente um requisito fundamental em algumas áreas de ciência e tecnologia.
Sua importância estratégica é visível devido a grande quantidade de iniciativas em pesquisa e desenvolvimento nestas áreas, financiadas por organizações do mundo todo, para a utilização das inovações e benefícios trazidos por a área de alto desempenho.
Um exemplo é a definição nos Estados Unidos de um conjunto de aplicações prioritárias -- Grand Challenges, ou grandes desafios -- que estão exigindo alto desempenho e investimentos do governo para resolver- las.
O processamento de alto desempenho depende por sua vez de técnicas e conceitos provindos do processamento paralelo e distribuído, a fim de prover o desempenho necessário a estas aplicações.
O desempenho é um critério chave no projeto, aquisição e utilização de sistemas de computação.
O principal objetivo dos engenheiros de sistemas de computação, cientistas, analistas e usuários é obter a maior desempenho por um custo reduzido.
Para alcançar este objetivo, profissionais de sistemas de computação necessitam, pelo menos, ter um conhecimento básico da terminologia e técnicas de avaliação de desempenho.
Qualquer pessoa associada com sistemas de computação deve ser capaz de determinar as necessidades de desempenho de seus sistemas e deve ser capaz também de comparar diferentes alternativas para achar a mais adequada as suas necessidades.
Os sistemas de alto desempenho disponíveis atualmente abrangem desde processadores fortemente acoplados, conhecidos como Massively Parallel Processors (MPPs), até simples redes de computadores.
A contínua inovação na tecnologia de hardware reduz o tempo de comunicação entre os processadores e a latência de acesso à hierarquia de memória para, desta forma, suportar a computação neste novo ambiente.
Infelizmente, a infra-estrutura de software (e.
g linguagens de programação, compiladores, sistemas operacionais e ferramentas de desempenho) disponível nos dias de hoje ainda não acompanha o estado da arte do multiprocessamento em hardware[ PAN91, O agregado ou máquina agregada, também conhecido como cluster, é atualmente uma das arquiteturas mais utilizadas na obtenção de alto desempenho, devido principalmente ao seu baixo custo por Mflop/ s em comparação a outras arquiteturas (e.
g MPP, SMP -- Symetrical Multiprocessors) e a sua alta escalabilidade.&amp;&amp;&amp;
A máquina agregada é composta por a máquina hospedeira, rede de interconexão e nós.
A máquina hospedeira é utilizada como porta de entrada (frontend) do agregado, ela pode ser uma máquina que seja parte do agregado ou uma máquina externa.
Normalmente esta máquina é utilizada para compilação e disparo das aplicações no agregado.
A rede de interconexão conecta a máquina hospedeira a todos os nós do agregado.
Ela pode ser uma rede padrão (e.
g Ethernet, Fast-Ethernet) ou uma rede de baixa latência (e.
g Myrinet, SCI -- Scalable Coherent Interface).
A utilização de uma rede de baixa latência apresenta normalmente ótimos resultados devido a redução do gargalo de rede, o que é comum em muitas das aplicações paralelas que utilizam intensivamente troca de mensagens, paradigma padrão em multicomputadores do tipo Non-Remote Memory Access (Norma), no entanto, possui um custo muito maior.
Os nós são responsáveis por o processamento da aplicação e podem ser de diversos tipos (e.
g PCs, servidores, estações de trabalho).
Normalmente, os nós do agregado não possuem periféricos como monitor, mouse e teclado, devido a sua utilização específica para execução de aplicações paralelas.
A utilização de máquinas agregadas para obtenção de alto desempenho vêm em crescente ascensão ao longo de os anos em relação a outras arquiteturas paralelas.
Este fato pode ser constatado através da lista TOP 500 que apresenta, duas vezes por ano (nos meses de junho e novembro), as 500 máquinas mais rápidas do mundo.
Atualmente, com base na última classificação, 41.6% da lista é composta por agregados, entre os quais 7 de eles encontram- se entre as 10 máquinas mais rápidas do mundo.
As principais vantagens encontradas nas máquinas agregadas são:
Relação custo versus benefício.
Apresenta uma ótima relação custo versus benefício, possuindo um dos menores custos por Mflop/ s (milhões de instruções de ponto flutuante por segundo) em comparação as outras arquiteturas paralelas.
Isso se deve principalmente ao fato de serem utilizadas, na sua confecção, basicamente &quot;componentes de prateleira», que, por serem produzidos em grande escala, possuem custo reduzido.
Configurabilidade. A arquitetura possui um alto grau de configurabilidade, por tratarse de uma arquitetura aberta.
A definição de seus componentes (máquina hospedeira, nós e rede de interconexão) é genérica, possibilitando diversas configurações.
Custo de manutenção.
A arquitetura possui um baixo custo de manutenção, pois os &quot;componentes de prateleira «utilizados são facilmente encontrados no mercado e possuem custo reduzido.
Entretando, as vantagens trazidas por as máquinas agregadas tais como alta configurabilidade e escalabilidade trazem também alguns desafios para o desenvolvimento de ambientes, sistemas e aplicações que devem ser utilizados neste tipo de máquina.
Alguns dos principais desafios trazidos por as máquinas agregadas são:
Gerência complexa.
As máquina agregadas agregam maior dificuldade na gerência de seus recursos.
Devido as facilidades de expansão do número de nós e dos tipos de nós que podem ser utilizados na construção de um agregado, a gerência destes recursos torna- se mais complexa pois deve ser eficiente, independentemente do número de nós e do tipo de nós utilizados.
Difícil programação.
A programação em máquinas agregadas é mais complicada do que em outras arquiteturas paralelas pois é dependente da disponibilidade de ferramentas e ambientes adequados.
Além disso, a programação em máquinas paralelas traz diversos desafios como:
Falta de determinismo, sincronização de processos, distribuição e particionamento de dados, balanceamento de carga, tolerância a falhas, heterogeneidade, entre outros.
Dificuldade na análise de desempenho.
A análise de desempenho da máquina agregada e das aplicações executadas na máquina agregada, assim como na programação, dependem também da disponibilidade de ferramentas apropriadas.
A alta escalabilidade das máquinas paralelas também dificulta a análise de desempenho devido a o grande volume de informações que deve ser analisado a fim de que todos os fatores (e.
g utilização dos recursos de cada nó, comunicação entre os processos da aplicação) sejam considerados.
Com o objetivo de simplificar a utilização do agregado para seus usuários, normalmente é utilizada uma camada de abstração chamada de middleware.
Esta camada gerência a interação do usuário e do administrador do sistema com a máquina agregada disponibilizando serviços, através de sistemas especializados, para que o usuário e o administrador possam utilizar e gerenciar de forma correta e eficiente o agregado.
Alguns dos módulos básicos pertencentes a esta camada são os sistemas de gerência de recursos, sistemas de monitoração e o ambientes de execução.
Ainda existe uma forte demanda por ferramentas que auxiliem os administradores na detecção de possíveis problemas, ou gargalos, nos sistemas de alto desempenho, e também permitam que seus usuários descubram formas de otimizar suas aplicações a fim de obter o melhor desempenho possível.
Devido a abrangência de áreas em as quais o processamento de alto desempenho é utilizado, verificamos que grande parte dos usuários de sistemas de alto desempenho possuem especialidades diversas (e.
g Eletroquímica, Biologia Molecular, Matemática Computacional), porém não possuem um conhecimento abrangemente sobre o sistema que utilizam, o qual é essencial para obtenção de melhores resultados na execução de suas aplicações.
A utilização de ferramentas de monitoração oferece a estes usuários uma compreensão maior sobre o sistema que estão utilizando e também sobre o compor- tamento das aplicações que executam neste sistema a fim de que o desempenho obtido possa ser melhorado.
A crescente utilização de agregados heterogêneos, isto é, agregados que possuem nós de diversos tipos (e.
g arquitetura, velocidade), e de máquinas agregadas com um grande número de nós aumenta a demanda por sistemas que possam gerenciar os recursos destas máquinas de forma eficiente.
Os sistemas de gerência de recursos, quando utilizados em agregados heterogêneos, devem prover mecanismos para que o usuário possa executar a sua aplicação no conjunto mais apropriado de nós do agregado em relação as necessidades da aplicação (e.
g nós com mais memória, nós com maior poder computacional, nós ligados por uma rede de interconexão de alto desempenho).
Devido a o grande número de nós encontrados nos agregados atualmente, é necessário também que o sistema de gerência seja bastante robusto e escalável a fim de que os serviços providos por o sistema sejam eficientes tanto para um número pequeno quanto para um número grande de nós.
Os serviços de gerência de recursos e monitoração de máquinas agregadas são implementados, na maioria das vezes, como sistemas independentes e utilizados para diferentes funções.
Normalmente, a gerência de recursos interage diretamente com os usuários do agregado, permitindo que estes possam acessar um grupo de nós do agregado e disparar uma aplicação nestes nós, enquanto que a monitoração é mais utilizada por o administrador da máquina agregada, pois fornece uma visualização global sobre a utilização dos recursos em todos os nós do agregado ao longo de o tempo.
Alguns sistemas de gerência de recursos também possuem, de forma integrada, um sistema de monitoração, porém as informações de monitoração são normalmente apresentadas em tempo real e não são integradas aos eventos de gerência de recursos, isto é, não existe uma correlação entre os eventos do sistema de gerência de recursos (e.
g Acreditando que a integração dos sistemas de gerência de recursos e monitoração possibilite a geração de informações derivadas para uma melhor análise da utilização do agregado e do comportamento das aplicações executadas, este trabalho propõe um método para geração de informações derivadas em máquinas agregadas, utilizando a correlação existente entre os eventos de gerência de recursos e informações de monitoração.
A utilização deste novo método é avaliada através do desenvolvimento de um ambiente para análise da utilização de recursos de máquinas agregadas, chamado C LANE.
Esta abordagem diferencia- se da monitoração que é provida por alguns sistemas de gerência de recursos pois, além de apresentar as informações de monitoração de maneira relacionada aos eventos de gerência de recursos, as informações e eventos são armazenados, possibilitando uma análise histórica sobre a utilização do agregado e sobre o desempenho das aplicações.
Desta forma, é possível realizar comparações entre diversas execuções de uma aplicação, avaliação do impacto no desempenho do sistema devido a mudança da configuração da máquina, entre outras possíveis análises.
Os principais objetivos deste trabalho são:
Descrição do método de geração de informações derivadas;
Desenvolvimento do ambiente C LANE implementando o método proposto;
Instalação deste ambiente num agregado;
Validação do ambiente através da geração de informações derivadas utilizando o ambiente C LANE.
O trabalho está dividido da seguinte forma:
O Capítulo 2 apresenta alguns dos principais sistemas de gerência de recursos e monitoração utilizados em máquinas agregadas;
Em o Capítulo 3 são descritos a proposta, motivação e objetivos deste trabalho;
O monitoração;
O Capítulo 5 apresenta a implementação do ambiente C LANE;
O Capítulo 6 relata a instalação e configuração ambiente C LANE numa máquina agregada e apresenta alguns exemplos de utilização;
E por último, o Capítulo 7 conclui e apresenta algumas idéias para trabalhos futuros.
Gerência de recursos e monitoração Os sistemas de gerência de recursos e monitoração são de grande importância para o funcionamento correto de uma máquina agregada, possibilitando que os usuários da máquina utilizem os recursos disponíveis de forma eficiente e que o administrador da máquina possa ter uma visão global sobre a utilização da máquina a fim de poder prever antecipadamente possíveis problemas, ou mesmo verificar os efeitos da troca, adição ou remoção de algum componente da máquina agregada.&amp;&amp;&amp;
Atualmente, existem diversos sistemas de gerência de recursos e monitoração para máquinas agregadas, cada um com suas peculiaridades, mas provendo o mesmo conjunto de serviços básicos.
Este capítulo apresenta alguns dos sistemas para gerência de recursos e monitoração de máquinas agregadas estudados durante o desenvolvimento deste trabalho.
Cada sistema é descrito individualmente e após o final de cada seção é apresentada uma comparação entre os sistemas descritos.
Os sistemas de gerência de recursos tem como principal funcionalidade distribuir as aplicações entre diversos computadores para minimizar o tempo de execução conjunto das aplicações executadas.
Desta forma, também propiciam a utilização efetiva e eficiente dos recursos disponíveis.
Algumas das principais funcionalidades que devem ser providas por os sistemas de gerência de recursos para clusters são:
Alocação e liberação de recursos, execução de aplicações utilizando os recursos alocados de forma interativa ou através de batch jobs, e gerência da fila de alocação usando uma política de alocação.
Outras funcionalidades que podem ser providas por os sistemas de gerência de recursos são:
Balanceamento de carga, migração de processos, suporte a várias políticas de alocação, gerência da fila de alocação baseado em prioridades, suspensão e recomeço de aplicações, entre outras.
Entre os diversos sistemas de gerência de recursos para agregados existentes atualmente, foram estudados e apresentam- se descritos abaixo os seguintes sistemas:
OpenPBS, CCS, DQS, Condor e Crono.
O OpenPBS (Open Portable Batch System) é um sistema de gerência de filas de trabalho flexível originalmente desenvolvido por a Veridian Systems para a NASA.
O sistema é utilizado em ambientes Unix de diversas plataformas conectados por uma rede, incluindo agregados heterogêneos, supercomputadores, e máquinas maciçamente paralelas (MPP).
O objetivo do sistema OpenPBS é prover controles adicionais para inicialização ou escalonamento da execução de batch jobs;
E permitir o mapeamento destas tarefas entre as diversas máquinas (hosts) existentes.
O sistema permite que um site defina os tipos de recursos existentes e como estes vários recursos podem ser utilizados por diferentes tarefas.
Algumas das principais funcionalidades do OpenPBS são:
Tarefas com prioridades configuráveis, escalonamento transparente de tarefas, fácil integração com outras aplicações através de uma Application Programmer's Interface (API), e balanceamento de carga automático baseado nas configurações de hardware e disponibilidade de recursos.
O OpenPBS provê monitoração de sistema em tempo real através de uma ferramenta interna chamada xpbsmon.
O CCS (Computing Center Software) é um sistema de gerência de recursos desenvolvido no PC2 (Paderborn Center for Parallel Computing) na Universidade de Paderborn na Alemanha.
Ele foi projetado para proporcionar um acesso amigável (userfriendly) para gerência de sistemas de computadores paralelos de alto desempenho e máquinas agregadas.
Ele suporta um grande número de plataformas de software e hard-ware e provê uma interface homogênea com o usuário.
Para administradores de sistema, o CCS provê mecanismos para especificar, organizar e gerenciar diversos sistemas de alto desempenho que são operados num centro de computação.
Os principais critérios utilizados no projeto do CCS incluem:
Robustez, portabilidade, extensibilidade e suporte eficiente a sistemas com memória compartilhada.
O CCS provê monitoração a nível de sistema e aplicação de forma integrada ao seu ambiente através das ferramentas ccsMon e SPROF.
O DQS (Distributed Queueing System) é um sistema de filas experimental baseado no Unix desenvolvido por o Supercomputer Computations Research Institute (SCRI) na Universidade do Estado da Flórida.
O desenvolvimento do DQS é patrocinado por o Departamento de Energia dos Estados Unidos e possui também uma versão comercial desenvolvida por a Genias Software GmbH chamada Codine.
O DQS é projetado como uma ferramenta de gerenciamento para auxiliar na distribuição de recursos computacionais através de uma rede e prover transparência arquitetural para ambos usuários e administradores através de um ambiente heterogêneo.
Algumas das principais características providas por o DQS incluem:
Escalonador baseado em queuecomplexes onde cada recurso computacional (e.
g memória, tipo de máquina) é associado a uma dada fila e em filas mestres redundantes evitando um ponto único de falha.
O DQS provê uma ferramenta chamada QMon que permitem monitorar a utilização da máquina agregada.
O sistema Condor foi desenvolvido na Universidade de Wisconsin em Madison e é atualmente um dos sistemas mais utilizados para aproveitamento de ciclos de CPU ociosos em máquinas agregadas.
O sistema possui um conjunto de máquinas, chamado de Condor pool, que podem ser de diferentes arquiteturas e sistemas operacionais, e são conectados por uma rede.
Para monitorar o status dos computadores individuais do agregado, alguns programas do sistema chamados de Condor daemons devem estar em execução nas máquinas do Condor pool durante todo tempo.
Um destes daemons é chamado de master e possui como única tarefa assegurar- se que o resto dos Condor daemons estejam em execução.
Se algum destes daemons &quot;morre», o master o reexecuta.
Se um destes daemons continuar &quot;morrendo», o master envia um e-mail para o administrador e não tenta mais reexecutar o daemon.
Dois outros daemons também são executados em cada máquina do Condor pool, os daemons startd e schedd.
O daemon schedd é responsável por todas as tarefas que foram submetidas a máquina.
O daemon startd monitora as informações sobre a máquina que é usada para decidir se ela está disponível para executar uma tarefa, tais como atividade no teclado e mouse, e a carga da CPU.
Visto que o sistema Condor somente utiliza ciclos ociosos para executar tarefas, o daemon startd também é responsável por sinalizar quando um usuário retorna a utilizar uma máquina que esteja executando uma tarefa do Condor e remover esta tarefa.
O Crono foi desenvolvido no Centro de Pesquisa de Alto Desempenho da PUCRS (CPAD-PUCRS/ HP) com o objetivo de prover um sistema de gerência de recursos bastante simples para agregados baseados em Gnu/ Linux.
O sistema implementa somente os serviços básicos de gerenciamento necessários para compartilhar uma máquina agregada entre diversos usuários.
O Crono é otimizado para agregados de até médio porte (64 nós) facilitando a instalação, manutenção e utilização, além de possuir também alta configurabilidade.
Algumas das principais características do sistema Crono são:
Suporte para gerenciamento concorrente de diversos agregados, suporte a alocações do tipo space-shared e time-shared, modo de execução interativo ou através de batch jobs, utiliza o algoritmo de escalonamento back-fill, possibilita a utilização de scripts de pré e pós processamento para configuração do ambiente e possibilita definir direitos de acesso para usuários e grupos de usuários.
O sistema Crono não oferece monitoração de sistema inclusa.
A Tabela 2.1 apresenta uma comparação entre os sistema de gerência de recursos apresentados nesta seção.
As seguintes características foram selecionadas para realizar a comparação entre os sistemas:
É suportado por os sistemas OpenPBS e DQS.
Os sistemas CCS, Condor e Crono possuem suporte a tolerância a falhas para todos os daemons do sistema, enquanto que os sistemas OpenPBS e DQS possuem tolerência a falhas somente nos daemons que são executados nos nós do agregado.
A existência de uma interface gráfica para interação com os usuários é presente nos sistemas OpenPBS, CCS e DQS.
Os sistemas de monitoração são projetados para coletar parâmetros de desempenho de sistema tais como:
Utilização de CPU dos nós, utilização de memória, taxa de I/ O e interrupções, e apresentar- los de uma forma que possam ser facilmente entendidos por o administrador do sistema.
Este serviço é importante para a operação confiável de grandes máquinas agregadas, pois permite que o administrador do sistema encontre problemas antecipadamente.
Além de isto, outras partes do sistema podem beneficiar- se da informação provida.
Por exemplo, a informação pode ser usada para modificar o escalonamento de tarefas, a fim de melhorar o balanceamento de carga.
Algumas das principais características que devem ser providas por uma ferramenta de monitoração são:
Baixa intrusividade Um dos principais pontos considerados no projeto e implementação de sistemas de monitoração é a intrusão gerada por o sistema de monitoração.
Para obter a melhor desempenho possível numa agregado, a aplicação paralela deve ser capaz de obter todo o poder de processamento disponível.
No entanto, o sistema de monitoração possui alguns custos de processamento e comunicação e irá competir com a aplicação em execução.
Então, para possibilitar a execução em alto desempenho na presença de monitoração, a ferramenta de monitoração deve possuir baixa intrusividade, produzindo interferência mínima.
Alta configurabilidade Devido a grande diversidade de topologias de máquinas agregadas, e o aumento do número de agregados heterogêneos, os sistemas de monitoração precisam ser altamente configuráveis.
Algumas das funcionalidades que devem ser providas por os sistemas de monitoração são:
Freqüência de monitoração ajustável, seleção das métricas de monitoração, seleção dos recursos a serem monitorados e monitoração online e histórica (offline).
Extensibilidade Extensibilidade é um ponto crítico na utilização de qualquer sistema de monitoração.
A extensão do sistema para suportar novas métricas é realmente necessária, a fim de possibilitar a captura de informações de novas tecnologias de hardware (e.
g redes Myrinet e SCI).
Esta característica é também útil para prover a junção entre o sistema de monitoração e outros sistemas, em o qual este utiliza as informações obtidas por o sistema de monitoração para executar algum serviço (e.
g sistema de balanceamento de carga), ou simplesmente para apresentar- lo (e.
g uma ferramenta gráfica de monitoração, sistema de gerência de recursos).
Existem diversos sistemas de monitoração para agregados disponíveis atualmente.
Foram estudados e apresentam- se descritos abaixo os seguintes:
PCP, Ganglia, NWS e RVision.
O Performance Co-- Pilot (PCP) foi desenvolvido por a SGI como um sistema de monitoração comercial para o IRIX.
Em fevereiro de 2000, a SGI lançou a infraestrutura do PCP como um software de código aberto (Open Source).
O objetivo era prover um framework extensível, prontamente disponível, e com diversas funcionalidades para gerenciar o desempenho de grandes sistemas de código aberto.
O PCP é composto por um framework e serviços para proporcionar monitoração de desempenho a nível de sistema e gerência de desempenho.
Ele provê uma gama de serviços que podem ser usados para monitorar e gerenciar o desempenho do sistema.
Algumas das principais funcionalidades providas por o PCP incluem interfaces públicas e frameworks extensíveis em todos os níveis, suporte a análise de dados em tempo real e retrospectiva (histórica), uma única API para todos os dados de desempenho, e cobertura sobre uma grande número de áreas de atividade (e.
g CPU, memória, roteadores Cisco, servidores Web).
Ganglia é um ambiente de monitoração inicialmente desenvolvido na Universidade da Califórnia, Berkeley Computer Science Division como uma forma de conectar os agregados de forma lógica através do campus da universidade.
Por ter sido desenvolvido na universidade, ele é completamente livre e não possui componentes proprietários.
Todos os dados são codificados em XML para garantir máxima extensibilidade e portabilidade.
Ganglia provê um sistema de monitoração em tempo real completo e um ambiente de execução que é utilizado por centenas de universidades, laboratórios privados e governamentais e implementações comerciais de agregados por o mundo.
O NWS (Network Weather Service) é um sistema distribuído que periodicamente monitora e dinamicamente prevê o desempenho que vários recursos computacionais e redes podem almejar num dado intervalo de tempo.
O serviço opera um conjunto distribuído de sensores de desempenho (monitores de rede, monitores de CPU, etc) da onde captura leituras de condições instantâneas.
Então, são utilizados modelos numéricos para gerar previsões sobre as condições para um dado período de tempo.
O NWS foi desenvolvido para ser utilizado por escalonadores dinâmicos e para prover leituras de qualidade de serviço num ambiente de rede computacional.
A metodologia de escalonamento utilizada por o sistema AppLeS faz uso extensivo de suas facilidades e protótipos implementados já foram desenvolvidos para ambientes como Legion e Globus/ Nexus.
Cada protótipo prevê o desempenho de rede de máquina a máquina (latência e vazão) e porcentagem de CPU disponível para cada máquina que é monitorada.
O atual conjunto de métodos de previsão suportados tratam medições sucessivas de cada monitor como uma série de tempo.
Os métodos iniciais recaem em três categorias:
Métodos baseados em média que usam alguma estimativa da média da amostra como previsão, métodos baseados em média que usam um estimador médio, e métodos de autoregressão.
O sistema verifica a precisão (usando o erro de predição como uma medida de precisão) para todos os previsores, e utiliza aquele que apresentou o menor erro acumulativo num dado momento para gerar a previsão.
Desta forma, o NWS automaticamente identifica a melhor técnica de previsão para um dado recurso.
Além de isto, a medida em que mais métodos são adicionados, eles são automaticamente usados para prever o desempenho dos recursos para os quais eles apresentam maior precisão.
O RVision foi desenvolvido no Centro de Pesquisa em Alto Desempenho da PUCRS (CPAD-PUCRS/ HP) com o intuito de prover uma arquitetura extensível e configurável para monitoração de agregados.
O sistema provê acesso as informações de utilização dos recursos do agregado de forma independente a cada usuário através de uma sessão de monitoração.
O sistema permite que diversas sessões de monitoração possam estar em execução, isto é, obtendo informações sobre o agregado, paralelamente.
Cada sessão é configurada através de um arquivo de descrição da sessão de monitoração.
Este arquivo permite determinar as máquinas que serão monitoradas, o conjunto de informações monitorados por máquina ou grupo de máquinas, e a freqüência em que estas informações serão capturadas.
O RVision fornece duas interfaces para prover extensibilidade do sistema.
Uma de elas é utilizada para o desenvolvimento de bibliotecas de monitoração que podem ser ligadas (linked) ao sistema e utilizadas em tempo de execução, sem a necessidade de reconfigurar o sistema.
A outra interface é utilizada para a criação de clientes de monitoração que são responsáveis por a interação do usuário com o sistema, e apresentação das informações de utilização do agregado obtidas por o RVision.
Atualmente, o RVision utiliza um modelo de monitoração centralizado, o que limita o uso do sistema a agregados de pequeno a médio porte.
A Tabela 2.2 apresenta uma comparação entre os sistema de monitoração apresentados nesta seção.
As seguintes características foram selecionadas para realizar a comparação entre os sistemas:
Suporte a adição de novas métricas.
O sistema de monitoração possibilita a inclusão de novas métricas de monitoração sem a necessidade de modificação do sistema.
Análise offline.
O sistema possibilita que as informações de monitoração sejam armazenadas localmente em cada nó do agregado, e que, no fim da monitoração, estas informações sejam agrupadas e armazenadas em disco, a fim de minimizar a utilização de rede ocorrida durante a monitoração online, e possibilitar uma análise histórica sobre a utilização de recursos.
Alta escalabilidade.
O sistema permite a monitoração de agregados com um grande número de nós (centenas de nós).
Análise de aplicações paralelas.
O sistema possibilita realizar uma análise sobre o comportamento interno de uma aplicação paralela fornecendo informações sobre o comportamento interno de cada processo e as trocas de mensagens entre os diversos processos da aplicação.
Ferramenta para visualização.
O sistema possui uma ferramenta para visualização das informações obtidas por monitoração.
O PCP, Ganglia, NWS e RVision suportam a adição de novas métricas para serem monitoradas por o sistema e também possibilitam realizar uma análise offline das informações obtidas por monitoração.
Entre os sistemas apresentados anteriormente, o RVision é o único que não possui alta escalabilidade pois implementa um modelo centralizado de monitoração.
Os sistemas PCP e Ganglia possibilitam realizar a análise de aplicações paralelas sendo executada no agregado e também disponibilizam ferramentas para visualização das informações monitoradas.
Proposta de trabalho Com base nos estudos realizados e descritos no Capítulo 2, este capítulo apresenta os principais fatores que motivaram o desenvolvimento deste trabalho, resultando na proposta do mesmo.
Além de as motivações e da proposta, são também apresentados os objetivos que pretendem ser almejados após o término deste trabalho.
O desenvolvimento de sistemas, ambientes e ferramentas especializadas provendo serviços bastante específicos é uma tendência natural na implementação dos sistemas que formam a camada de middleware em agregados.
Este modelo de implementação possibilita uma configuração mais detalhada do agregado, pois permite ao administrador selecionar entre diversos sistemas com mesmas funções, os mais apropriados (baseando- se na facilidade de utilização, complexidade, funcionalidade específica, etc) para serem utilizados na máquina agregada.
Os sistemas de gerência de recursos e monitoração são alguns dos sistemas básicos que compõem a camada de middleware.
Alguns sistemas de gerência de recursos provêm ao usuário informações obtidas por monitoração sobre a utilização dos recursos da máquinas agregada, porém a tarefa de obtenção das informações não é realizada por o sistema de gerência de recursos, e sim por um sistema de monitoração, o qual recebe requisições do sistema de gerência de recursos para obter as informações necessárias, isto é, os sistemas de gerência de recursos e monitoração são desenvolvidos como dois sistemas independentes.
Alguns sistemas de gerência de recursos utilizam as informações de monitoração para possibilitar a visualização da utilização dos recursos da máquina agregada em tempo real ou para realizar algum serviço específico (e.
g balanceamento de carga).
Devido a utilização da monitoração online, as informações normalmente são descartadas após serem utilizadas.
Os principais sistemas de monitoração para agregados disponibilizam funcionalidades para apresentação das informações monitoradas em tempo real (monitoração online), assim como para o armazenamento destas informações (análise offline).
O armazenamento das informações permite efetuar uma análise histórica sobre a utilização dos recursos do agregado durante um período determinado, possibilitando a verificação sobre a ocorrência de padrões ou comportamentos indesejados em todo o agregado.
Estes sistemas também possibilitam configurar o conjunto de informações que o sistema monitora, assim como a freqüência em que estas informações são capturadas.
Os sistemas de monitoração são úteis para prover uma visão global da utilização de recursos que formam o agregado.
Apesar de a existência de diversos sistemas de gerência de recursos e monitoração com inúmeras funcionalidades, a utilização das informações geradas por estes sistemas de forma correlacionada ainda não é pouco explorado.
Os períodos de alocação de recursos e execução de aplicações definidos por o sistema de gerência de recursos podem ser vinculados as informações sobre utilização de recursos obtidas por monitoração.
Desta forma, o usuário pode verificar como foi a utilização dos recursos alocados durante o período em que possuia acesso a estes recursos.
É possível analisar o impacto causado por as aplicações executadas por o usuário na máquina agregada através de um subconjunto das informações de monitoração que são correlacionadas as informações de alocação de recursos e execução de aplicações do usuário.
O subconjunto de informações de monitoração utilizados para análise limita- se ao conjunto de nós utilizados por o usuário e ao tempo em que os recursos estiveram alocados para este usuário.
Além de o refinamento das informações de monitoração que realmente interessam ao usuário, é possível, através do armazenamento destas informações, gerar informações derivadas sobre conjuntos de informações armazenadas, permitindo a realização de uma análise histórica sobre a utilização dos recursos e sobre o desempenho obtido nas aplicações executadas por o usuário.
A utilização de informações históricas contendo a correlação dos eventos gerados por o sistema de gerência de recursos e as informações geradas por o sistema de monitoração possibilitam a geração de informações derivadas sobre a utilização da máquina agregada.
Estas informações são importantes tanto para o administrador do sistema quanto para o usuário da máquina agregada, pois permitem que o administrador tenha uma visão global sobre a utilização da máquina agregada baseado nas aplicações executadas por os usuários, e que o usuário possa analisar o desempenho obtido por as suas aplicações referente a utilização dos recursos do agregado.
A correlação das informações de gerência de recursos e monitoração e o armazenamento destas informações em bases históricas permite:
Analisar o desempenho de cada aplicação executada no agregado, baseado na utilização dos recursos do agregado (e.
g CPU, memória);
Verificar padrões sobre a utilização do agregado por os usuários (e.
g taxa média de utilização, horários de utilização máxima, período médio de alocação das máquinas);
Permitir a identificação de comportamentos atípicos (e.
g subutilização dos nós alocados) ou problemas de desempenho das aplicações executadas no agregado;
Realizar comparações (e.
g porcentagem de CPU utilizada, tempo total de execução) entre execuções da mesma aplicação com parâmetros diferentes (e.
g nós do agregado utilizados, parâmetros específicos utilizados na aplicação);
Prever o comportamento da execução de uma aplicação, devido a análise de execuções anteriores;
A proposta deste trabalho é descrever o método de geração de informações derivadas para máquina agregadas, utilizando a correlação das informações de gerência de recursos e monitoração.
Este método será validado através do desenvolvimento de um ambiente para máquinas agregadas chamado C LANE.
O ambiente C LANE possibilitará realizar uma análise histórica sobre a utilização do agregado por seus usuários.
A fim de poder realizar a correlação das informações e armazenar- las para posteriormente gerar as informações derivadas sobre os dados históricos armazenados, o ambiente deverá ser integrado aos sistemas de gerência de recursos e monitoração.
Para visualização das informações derivadas, o ambiente proverá um ferramenta gráfica para analisar as informações históricas correlacionadas e gerar as informações derivadas, apresentando- as ao usuário.
Como forma de validação do trabalho, o ambiente será instalado num agregado e serão realizadas análises sobre as informações derivadas obtidas por o mesmo.
Os objetivos do trabalho são:
Descrição do método para geração de informações derivadas.
A descrição do método para geração de informações derivadas mostra como é realizada a correlação dos eventos de gerência de recursos com as informações de monitoração.
São descritos os eventos e informações básicas necessárias para realizar a correlação e as informações derivadas que podem ser obtidas utilizando este método.
Desenvolvimento do ambiente C LANE.
O desenvolvimento deste ambiente tem como objetivo mostrar a aplicação do método para geração de informações derivadas em máquinas agregadas.
O ambiente será composto por um módulo principal para interação com os sistema de gerência de recursos e monitoração, e uma ferramenta gráfica para apresentação das informações derivadas ao usuário.
Validação do método.
A validação do método para geração de informações derivadas será realizada através da instalação do ambiente desenvolvido numa máquina agregada.
Os dados obtidos por o ambiente servirão para demonstrar como o ambiente pode ser utilizado para prover informações importantes na análise de aplicações executadas na máquina agregada.
Método de geração de informações derivadas Este capítulo descreve o método de geração de informações derivadas para máquinas agregadas.
São apresentadas e detalhadas todas as etapas que constituem o método.
O método proposto tem como objetivo final gerar informações derivadas sobre o comportamento da máquinas agregada ao longo de o tempo, baseado nas interações do usuário com o agregado e nas informações de monitoração dos nós do agregado.
Para a geração das informações derivadas, o método utiliza algumas informações provenientes dos sistemas de gerência de recursos e monitoração de máquinas agregadas.
O método é dividido nas seguintes etapas:
Obtenção de informações.
As informações relacionadas às interações do usuário com a máquina agregada e sobre o desempenho apresentado por os recursos de cada nó do agregado são obtidas, respectivamente, a partir de os sistemas de gerência de recursos e monitoração.
Armazenamento de informações.
As informações obtidas a partir de os dois sistemas são armazenadas formando uma base de dados histórica sobre o comportamento do agregado em função de a utilização deste por seus usuários.
Correlação de informações.
As informações armazenadas são correlacionadas, gerando para cada período de interação do usuário com o agregado, um subconjunto de informações de monitoração, sobre os nós alocados por o usuário, relacionado a este período.
Geração de informações derivadas.
Após a etapa de correlação das informações, o método realiza a geração de informações derivadas baseadas na utilização dos recursos dos nós do agregado em relação as interações do usuário com a máquina agregada ao longo de o tempo.
A seguir, é apresentada de forma detalhada cada uma das etapas do método de geração de informações derivadas.
O método utiliza informações provenientes dos sistemas de gerência de recursos e monitoração.
Estes sistemas fazem parte do middleware básico de uma máquina agregada.
Alguns dos principais sistemas de gerência de recursos e monitoração para máquinas agregadas encontrados na literatura encontram- se descritos no Capítulo 2.
O sistema de gerência de recursos é utilizado para controlar o acesso dos usuários aos nós do agregado e o sistema de monitoração para prover uma visão global sobre a utilização dos recursos (e.
g CPU, memória, rede) da máquina agregada.
A partir de o estudo realizado sobre estes sistemas, foi definido um conjunto básico de informações providos por cada sistema, os quais são utilizados no método proposto.
A gerência de recursos permite que o usuário acesse um conjunto de nós da máquina agregada por um período de tempo.
Este período, em o qual o usuário possui acesso a um conjunto de nós, é chamado de período de alocação de recursos.
O seu início ocorre após uma requisição feita ao sistema de gerência de recursos, a qual é descrita neste trabalho como evento de alocação de recursos.
O fim deste período é alcançado através de uma requisição explícita feita ao sistema de gerência de recursos, ou logo após o término de um período de tempo estipulado previamente.
Este instante de tempo é definido neste trabalho como evento de liberação de recursos.
Durante o período em que os nós estiverem alocados para o usuário, este pode interagir com a máquina agregada executando as suas aplicações no conjunto de nós alocados.
Cada período de execução é chamado de período de execução de aplicação e também é composto, assim como na alocação de recursos, por dois eventos que representam o início e fim da execução da aplicação.
Em este trabalho estes eventos são identificados respectivamente como evento de execução de aplicação e evento de término de aplicação.
Durante uma alocação de recursos, o usuário pode realizar mais de uma execução de aplicação.
Cada período contém informações que são posteriormente utilizadas por o método para a geração das informações derivadas.
Abaixo, é apresentado o conjunto de informações básicas que podem ser obtidas através dos sistemas de gerência de recursos para agregados durante o período de alocação de recursos e que são utilizadas por o método.
Nome do usuário que requisitou a alocação dos recursos;
Timestamp do evento de alocação de recursos;
Timestamp do evento de liberação de recursos;
Conjunto de nós do agregado que foram alocados para o usuário.
O conjunto de informações obtidos durante o período de alocação de recursos é utilizado para identificar o período de tempo em que um conjunto de nós foi alocado a um usuário.
Os timestamps e o conjunto de nós são utilizados posteriormente para realizar a correlação destas informações com as informações de monitoração.
Abaixo, é apresentado o conjunto de informações básicas que podem ser obtidas através dos sistemas de gerência de recursos para agregados durante o período de execução de aplicação e que são utilizadas por o método.
Identificador da alocação de recursos relacionada a esta execução;
Timestamp do evento de execução de aplicação;
Timestamp do evento de término de aplicação;
Nome da aplicação executada com parâmetros;
Valor de retorno da aplicação.
O conjunto de informações obtidos durante o período de execução de aplicação é utilizado para identificar uma aplicação que foi executada durante um período de alocação de recursos.
As informações permitem verificar o início e fim da execução da aplicação e o valor retornado, a fim de identificar se a aplicação terminou normalmente ou se algum erro ocorreu durante a sua execução.
Os parâmetros usados na execução de cada aplicação também são utilizados a fim de possibilitar a diferenciação entre as diversas execuções de uma mesma aplicação durante a análise das informações derivadas.
O identificador da alocação de recursos permite obter o conjunto de máquinas em o qual a aplicação foi executada, e os timestamps da execução de aplicação são utilizados posteriormente para realizar a correlação destas informações com as informações de monitoração.
As informações de monitoração retratam a utilização dos recursos dos nós do agregado num certo instante de tempo.
Estas informações são capturadas em cada nó e apresentadas ao usuário por o sistema de monitoração de agregados.
Algumas das principais informações sobre a utilização dos recursos comumente apresentadas são:
Utilização de CPU, utilização de memória, porcentagem de pacotes perdidos na rede, entre outros.
Cada informação de monitoração é capturada num certo instante de tempo, este instante de tempo é denominado neste trabalho como evento de monitoração.
Um evento de monitoração é formado por um conjunto de informações que identificam a informação monitorada.
As informações que formam um evento de monitoração são:
Nome do nó em o qual a informação foi capturada;
Timestamp do evento de monitoração;
Nome da informação capturada (e.
g memória, cpu);
Informação capturada por o sistema de monitoração.
Em a etapa de armazenamento de informações, os conjuntos de informações de gerência de recursos e monitoração apresentados anteriormente são armazenados, a fim de gerar bases de dados históricas contendo informações sobre a interação dos usuários com o agregado através da alocação de recursos e execução de aplicações nos nós alocados, e sobre a utilização dos recursos de cada nó do agregado ao longo de o tempo.
Em esta etapa, as informações de gerência de recursos e de monitoração são armazenadas em bases de dados distintas, sem estabelecer nenhuma relação de vínculo entre os dois conjuntos de informações.
O método proposto utiliza a correlação das informações contidas nestas bases de dados históricas para geração das informações derivadas.
Uma da principais etapas do método de geração de informações derivadas baseia- se na correlação entre as informações de gerência de recursos e de monitoração que encontramse armazenadas nas bases de dados históricas.
Para isso, utiliza- se os timestamps destas informações.
O timestamp representa o instante de tempo em o qual um evento foi disparado.
Devido a o cárater distribuído das máquinas agregadas, os eventos são disparados em diversas máquinas (nós do agregado).
A fim de que não ocorram problemas na correlação dos eventos, é importante que a máquina agregada utilize algum mecanismo de sincronização de relógio (e.
g NTP), para que a ordem dos timestamps dos eventos gerados nas diversas máquinas apresentem a seqüência correta em que os eventos ocorreram.
As informações derivadas são valores gerados através da utilização de funções estatísticas (e.
g média aritmética, desvio padrão) sobre o conjunto de informações correlacionadas.
Estas estatísticas permitem a realização de uma análise do comportamento da máquina agregada em diferentes níveis de detalhamento.
A Figura 4.2 apresenta os níveis de detalhamento e as relações entre eles.
Os níveis de detalhamento são:
Nível de alocação de recursos O nível de alocação de recursos possui informações derivadas relativas a um conjunto de alocações de recursos.
Cada alocação de recursos é formada por um conjunto de execuções de aplicação, e devido a esta relação, utiliza algumas estatísticas das informações agregadas dos níveis inferiores.
As informações derivadas neste nível são geradas a partir de os atributos presentes nas informações de alocação de recursos.
Alguns exemplos de atributos utilizados para geração das informações derivadas neste nível são:
Período de tempo alocado;
Número de recursos alocados;
Número de execuções de aplicação;
Porcentagem de utilização dos nós do agregado.
Nível de execução de aplicação Este nível trata das informações derivadas relativas a um conjunto de execuções de aplicação.
Cada execução de aplicação possui um conjunto de informações relativas aos nós do agregado, referentes ao período de tempo e grupo de nós utilizados por a execução de aplicação.
Alguns exemplos de atributos utilizados para geração das informações derivadas neste nível são:
Período de tempo de execução;
Porcentagem de utilização do agregado para cada recurso monitorado.
Nível de nó do agregado O nível de nó do agregado possui informações derivadas relativas a utilização dos recursos de cada nó em relação a o tempo.
As informações de utilização são agrupadas em períodos referentes as execuções do nível acima, e de acordo com o conjunto de nós alocado no nível de alocação de recursos.
Alguns exemplos de informações utilizadas para gerar as informações derivadas neste nível são:
Porcentagem de utilização do nó para cada recurso monitorado;
Nome do nó com maior utilização sobre algum recurso monitorado.
A geração de informações derivadas sobre a correlação das interações do usuário com os dados de desempenho referentes aos nós da máquina possibilita:
Analisar o desempenho de versões mais otimizadas de uma aplicação em comparação a outras versões;
Apresentar os diversos comportamentos de uma aplicação quando utilizados parâmetros diferentes, tais como número de nós, conjunto de nós, parâmetros de entrada da aplicação, etc;
Verificar o impacto resultante no desempenho das aplicações após a modificação de algum componente da máquina agregada.
Ambiente C LANE Este capítulo descreve a arquitetura e implementação do ambiente C LANE que aplica o método para geração de informações derivadas apresentado no Capítulo 4.
São apresentados os módulos que constituem o ambiente C LANE, assim como a implementação de cada um de eles.
A arquitetura do ambiente C LANE é apresentada na Figura 5.1.
O ambiente C LANE é formado por um sistema para armazenamento e recuperação de informações chamado Clane Information Server que provê duas interfaces chamadas Information Storage Interface e Information Access Interface, e uma ferramenta gráfica chamada Clane Analysis Tool.
As informações utilizadas por o ambiente são obtidas através da integração do Clane Information Server com os sistemas de gerência de recursos e monitoração utilizando as funções disponíveis por a interface Information Storage Interface.
Através da utilização das funções providas por a interface Information Access Interface é possível recuperar as informações armazenadas por o Clane Information Server de forma correlacionada.
A ferramenta Clane Analysis Tool utiliza as informações obtidas através da Information Access Interface para geração das informações derivadas e apresentação destas informações ao usuário.
A implementação do ambiente C LANE foi realizada na plataforma Gnu/ Linux.
O módulo Clane Information Server foi implementado utilizando a linguagem C e as bibliotecas Pthreads e libXML2.
A ferramenta gráfica Clane Analysis Tool foi implementada utilizando a linguagem Java.
O Clane Information Server tem como funções principais armazenar as informações de gerência de recursos e monitoração e, através de uma requisição do usuário, realizar a correlação das informações armazenadas a fim de gerar um único conjunto de informa-ções, o qual é utilizado por a ferramenta Clane Analysis Tool para gerar as informações derivadas selecionadas por o usuário durante o momento de análise.
O Clane Information Server provê duas interfaces, chamadas de Information Storage Interface e Information Access Interface.
A Information Storage Interface é utilizada para realizar a integração do ambiente C LANE com os sistemas de gerência de recursos e monitoração.
A integração é realizada através da inserção das funções desta interface nos scripts de configuração ou código-fonte dos sistemas.
A Information Access Interface possibilita o acesso as informações armazenadas por o Clane Information Server.
As informações armazenadas são correlacionadas resultando num conjunto único de informações.
As interfaces Information Storage Interface e Information Access Interface são detalhadamente apresentadas nas próximas seções.
A arquitetura interna do Clane Information Server é apresentada na Figura 5.2.
O servidor recebe, através de uma porta UDP, requisições para armazenamento de informações de gerência de recursos ou monitoração, ou acesso as informações contidas no servidor.
As requisições são geradas por as interfaces providas por o Clane Information Server.
Estas requisições são recebidas por o módulo Request Dispatcher Module, o qual as reencaminha de acordo com o tipo de requisição recebido.
As requisições de armazenamento são tratadas por o módulo Storage Module.
Este módulo verifica o tipo de informação a ser armazenada e inclui a informação numa tabela.
As informações de monitoração são incluídas na tabela MonInfo Table, e as informações de gerência de recursos na tabela RMInfo Table.
Periodicamente, as threads MonInfoWriterThread e RMInfoWriterThread retiram as informações incluídas nas tabelas MonInfo Table e RMInfo Table respectivamente, e armazenam estas informações em disco utilizando um formato próprio do ambiente descrito abaixo.
As requisições de acesso são tratadas por o módulo Access Module, o qual, para cada requisição, dispara uma thread InformationReaderThread que realiza a leitura das informações armazenadas, executa a correlação destas informações, e envia estas informações correlacionadas ao usuário.
As informações de gerência de recursos são armazenadas num arquivo único por usuário utilizando o padrão XML.
O formato deste arquivo é descrito por o DTD (Document Type Declarations) apresentado na Figura 5.3.
O arquivo é composto por um conjunto de períodos de alocação dos recursos, cujo menor timestamp de início destes períodos é armazenado no atributo init (linha 2) do elemento allocation (linha 1), é representado por o elemento allocentry (linha 4) e possui como atributos o nome do usuário (linha 5), e os timestamps de início e fim de alocação (linhas 6 e 7).
Cada elemento allocentry é composto por parâmetros de alocação, representados por o elemento allocparams e um conjunto de execuções realizados durante o período da alocação, representado por o elemento execution.
O elemento allocparams é composto por um elemento nodes, que é o conjunto de nós alocados, e um número qualquer de elementos other.
Cada nó do conjunto de nós (nodes) é representado através do elemento node (linha 10).
O elemento other é utilizado para adicionar outros parâmetros de alocação que possam ser úteis para realizar posteriormente uma melhor análise das informações (e.
g número total de processos executados).
Ele é formado por um parâmetro e um atributo contendo a descrição deste parâmetro.
Cada execução realizada durante o período de alocação é representado por o elemento execentry.
Este elemento possui como atributos os timestamps de início de fim da execução.
A execução é composta por uma aplicação, representada por o elemento application, e opcionalmente por um ou mais parâmetros de execução, representados, cada um, por o elemento execparam.
A aplicação é formada por o nome da aplicação, os parâmetros de entrada da aplicação utilizados, e o atributo retstatus que identifica o valor de retorno da execução da aplicação.
O elemento execparam contém o parâmetro de execução utilizado e, como atributo, a descrição deste parâmetro.
Cada requisição de acesso recebida por o Clane Information Server é tratada individualmente por uma thread (InformationReaderThread).
Esta thread recebe um conjunto de filtros e valores que indicam o subconjunto de informações desejadas por o usuário.
Realizando a leitura das informações armazenadas, e aplicando estes filtros e valores, a thread gera um conjunto de informações correlacionadas que são enviadas através de um socket UDP para o usuário que requisitou as informações.
O formato do conjunto de informações correlacionadas gerado por o Clane Information Server utiliza o padrão XML.
A utilização do padrão XML para apresentar as informações correlacionadas possibilita que estas informações sejam utilizadas de maneira bastante simples também por outras ferramentas, além de a Clane Analysis Tool, devido principalmente a simplicidade trazida por o formato e ao grande número de parsers XML disponíveis para as mais diversas linguagens (e.
g Java, C, Python).
Além de estas cinco funções, são providas mais duas funções para remoção de alocações ou execuções com eventos de início já armazenados.
Estas funções devem ser utilizadas para eliminar possíveis inconsistências nas informações armazenadas devido a algum problema que possa ter ocorrido no sistema de gerência de recursos, e/ ou pode ser utilizada também para realizar uma pré-filtragem nas informações, realizando o armazenamento somente de informações com uma determinada característica (e.
g armazenar somente as execuções de aplicações que terminaram sem erro).
Estas funções são:
Todas as funções apresentadas acima também podem ser utilizadas através de ferramentas providas por o ambiente C LANE.
A descrição dos parâmetros necessários para utilização das ferramentas estão presentes no Apêndice B. 1.
As ferramentas são:
Clane Information Server. A interface Information Access Interface provê funções, através de uma biblioteca compartilhada do Gnu/ Linux, para realizar o envio de requisições ao Clane Information Server para obter acesso a informações de gerência de recursos e monitoração correlacionadas.
As funções providas por esta interface devem ser utilizadas para obter os dados de entrada para ferramentas de análise das informações correlacionadas como a Clane Analysis Tool.
O cabeçalho de cada uma das funções providas por a interface é apresentado no Apêndice A. 2.
Estas funções são utilizadas para gerar uma consulta aos dados baseados em filtros e valores enviados através de uma requisição de acesso ao Clane Information Server.
A comunicação com o Clane Information Server para o envio da requisição de acesso e o recebimento das informações correlacionadas é realizada utilizando o protocolo UDP.
As informações correlacionadas, como apresentado na Seção 5.2.1, utilizam o padrão XML e o formato destas informações é descrito através do DTD apresentado na Figura 5.5.
A interface é formada principalmente por as duas funções descritas abaixo:
Information Server, recebe as informações correlacionadas, e as armazena em disco.
Ela recebe como parâmetros o conjunto de filtros a ser enviado através da requisição de acesso e o nome do arquivo que será utilizado para armazenar as informações recebidas.
Com o objetivo de facilitar a consulta a um subconjunto de informações, foram definidos alguns filtros.
Os filtros disponíveis por a interface são:
Clanefid_ username.
Este filtro é utilizado para definir o usuário, sobre o qual será realizada a consulta para obtenção das informações correlacionadas.
Clanefid_ startalloc.
Este filtro é utilizado para definir o início do período de tempo a ser pesquisado.
Clanefid_ endalloc.
Este filtro é utilizado para definir o fim do período de tempo a ser pesquisado.
Clanefid_ appname.
Este filtro é utilizado para definir o nome de uma aplicação, a qual será utilizada para selecionar as execuções que serão incluídas nas informações correlacionadas.
Clanefid_ retstatus.
Este filtro define o status de retorno das execuções das aplicações, restringindo a consulta somente as execuções que retornaram o valor definido como parâmetro.
Clanefid_ lastalloc.
Este filtro possibilita a obtenção de informações somente sobre as N últimas alocações, onde N é o parâmetro recebido.
Clanefid_ moninfo.
Este filtro especifica uma métrica de monitoração (e.
g CPU, memória) a ser utilizada para gerar as informações correlacionadas.
O ambiente C LANE provê também uma ferramenta para obtenção das informações correlacionadas.
Ela utiliza as funções providas por a interface Information Access Interface para enviar uma requisição de acesso ao Clane Information Server, receber as informações correlacionadas, e armazenar- las em disco.
Essa ferramenta é chamada de clane_ query e recebe como parâmetros uma lista de filtros e valores a serem utilizados para os filtros relacionados, e o nome do arquivo para armazenar as informações correlacionadas.
Os parâmetros necessários para utilização da ferramenta são apresentados no Apêndice B. 2.
A ferramenta de visualização Clane Analysis Tool foi implementada utilizando- se a linguagem Java.
Esta linguagem foi escolhida principalmente por fornecer um conjunto de classes para manipulação de arquivos no formato XML, o qual é utilizado por o ambiente para representação das informações correlacionadas.
A ferramenta recebe como entrada um arquivo obtido através da utilização da ferramenta clane_ query ou por as funções da Information Access Interface.
Este arquivo possui, no formato XML, as informações correlacionadas que são utilizadas por a ferramenta para geração das informações derivadas na forma de estatísticas e gráficos.
Após a leitura do arquivo, a ferramenta apresenta uma janela principal chamada Allocation Window, mostrada na Figura 5.6, que possui uma tabela com todas as alocações de recursos presentes no arquivo de entrada.
Cada linha desta tabela refere- se uma alocação e apresenta nas colunas as seguintes informações:
Id.. Identificador da alocação atribuído internamente por a ferramenta.
Username. Nome do usuário que requisitou a alocação dos recursos.
Init Timestamp. Tempo de início da alocação com data e hora.
End Timestamp. Tempo de término da alocação com data e hora.
Nodes. Conjunto de nós que foram alocados por o usuário.
Todos os outros parâmetros extras de alocação armazenados por o ambiente são dispostos após a coluna Nodes, cada um numa nova coluna, contendo como cabeçalho o nome indicado para descrição do parâmetro.
A Figura 5.6 apresenta a adição de um parâmetro extra na tabela, o qual foi armazenado por o ambiente com a descrição cluster, e que, neste caso, refere- se ao agregado escolhido para alocação de recursos.
Em a Allocation Window é possível obter as informações referentes a cada alocação presente na tabela, ou estatísticas sobre um conjunto de alocações selecionado, selecionando, respectivamente as opções Statistics per Allocation ou Global Statistics presentes no menu View.
Cada opção apresenta uma janela com estatísticas e dados referentes a seguintes informações:
A janela Statistics per Allocation é apresentada na Figura 5.7, e mostra as informações referentes a cada alocação selecionada na janela Allocation Window.
A janela Global Statistics provê dados estatísticos, tais como, média aritmética, desvio padrão, valor máximo e mínimo, e soma total, em relação as alocações selecionadas.
A janela Global Statistics é apresentada na Figura 5.8.
Para cada alocação presente na janela Allocation Window, é possível obter o respectivo conjunto de execuções de aplicações realizadas.
Isto é realizado selecionando a opção Executions do menu View.
As execuções referentes a alocação são apresentadas numa nova janela, chamada Execution Window, a qual é mostrada na Figura 5.9.
A ja- em ela apresenta uma tabela com todos os parâmetros relativos a cada execução realizada durante a alocação, juntamente com outros parâmetros.
Estes parâmetros são:
Id.. Identificador da execução atribuído internamente por a ferramenta.
Init Timestamp. Tempo de início da execução com data e hora.
End Timestamp. Tempo de término da execução com data e hora.
Application. Nome da aplicação executada.
Parameters. Parâmetros da aplicação.
RetStatus. Valor de retorno da execução da aplicação.
Entre as colunas Id e Init Timestamp são incluídos todos os parâmetros extras, um por coluna, utilizados para executar a aplicação.
Estes parâmetros correspondem a parâmetros específicos providos por o sistema de gerência de recursos utilizado no agregado, e que foram utilizados na execução da aplicação.
A Figura 5.9 apresenta três parâmetros específicos utilizados para execução da aplicação.
Eles são cluster, execenv e noprocs e representam respectivamente o agregado que foi utilizado para disparar a aplicação, o ambiente de execução utilizado e o número de processos disparados.
Em a janela Execution Window é possível obter as informações referentes a cada execução de aplicação presente na tabela, ou estatísticas sobre um conjunto de execuções selecionado, selecionando, respectivamente, a opção Statistics per Execution ou Global Statistics presentes no menu View.
Cada opção apresenta uma janela com estatísticas e dados referentes as seguintes informações:
Resource average utilization.
Média de utilização de um recurso do agregado.
Esta informação é repetida para cada recurso diferente.
A janela Statistics per Execution é apresentada na Figura 5.10, e mostra as informações referentes a cada execução selecionada na janela Execution Window.
A janela Global Statistics provê dados estatísticos, tais como, média aritmética, desvio padrão, valor máximo e mínimo, e soma total, em relação a as execuções selecionadas.
A janela Global Statistics é apresentada na Figura 5.11.
Para cada execução presente na janela Execution Window, é possível obter o respectivo conjunto de informações sobre a utilização de recursos para cada nó do agregado ao longo de o tempo selecionando a opção Graphs do menu View.
É apresentado um gráfico para cada máquina utilizada com informações sobre a utilização dos recursos monitorados.
Esta janela é chamada de Graphs Window e é apresentada na Figura 5.12.
Em a janela Graphs Window é possível obter as informações de utilização de recursos referentes a cada máquina monitorada, ou estatísticas sobre o conjunto de máquinas utilizado, selecionando, respectivamente, a opção Statistics per Machine ou Global Statistics presentes no menu View.
As informações apresentadas em cada janela consistem aos recursos monitorados no agregado.
A janela Statistics per Machine é apresentada na Figura 5.13, e mostra as informações de utilização de recursos referentes a cada máquina.
A janela Global Statistics provê dados estatísticos, tais como, média aritmética, desvio padrão, valor máximo e mínimo, e soma total, em relação as todas máquinas.
A janela Global Statistics é apresentada na Figura 5.14.
Validação Este capítulo apresenta a instalação, configuração e algumas demonstrações de utilização do ambiente C LANE, e tem como objetivo mostrar as vantagens da utilização do método de correlação de informações, para fins de validação.
O ambiente C LANE foi instalado e configurado no laboratório do Centro de Pesquisa em Alto Desempenho da PUCRS (CPAD-PUCRS/ HP).
O ambiente foi integrado aos sistemas de gerência de recursos, Crono, e de monitoração, RVision, utilizados para gerenciar e monitorar as máquinas agregadas disponíveis no laboratório.
A integração do ambiente C LANE a estes sistemas foi simplificada devido a alta configurabilidade e flexibilidade para integração de novos serviços presentes nestes dois sistemas.
O ambiente C LANE foi configurado para armazenar informações sobre a principal máquina agregada do laboratório do CPAD chamada Amazônia.
A máquina agregada Amazônia é composta por 16 nós Hp-E60, cada um com 2 processadores Pentium III de 550 MHz e 256 MBytes de memória principal, e 8 nós Hp-E800, cada um com 2 processadores Pentium III de 1 GHz e 256 MBytes de memória principal.
A Amazônia utiliza uma rede Myrinet 2000 como rede de interconexão primária e uma rede FastEthernet como rede secundária.
Crono O sistema de gerência de recursos Crono executa um script para cada alocação iniciada (mpreps) e outro para cada final de alocação (mpostps).
Estes scripts são utilizados para realizar configurações necessárias antes da interação com o usuário, e para remover as configurações antes realizadas após o término do período de alocação.
Para registrar as informações de início e fim de alocação foram inseridas chamadas ao programa clane_ addallocation nos scripts mpreps e mpostps para registrar os eventos de início e fim da alocação de recursos.
Para simplificar a utilização da máquina agregada, o sistema Crono provê um único lançador (dispatcher) de programas, chamado crrun, o qual encapsula todos os ambientes de execução disponíveis para o usuário (e.
g MPI, PVM).
O script crrun recebe os parâmetros de execução e os reencaminha para o ambiente de execução escolhido, o qual é responsável por a execução da aplicação.
Para registrar os eventos de execução de aplicações, foram incluídas no crrun chamadas ao programa clane_ addexecution.
A conexão entre o sistema de monitoração RVision e o ambiente C LANE foi realizada através da implementação de um cliente de monitoração do RVision.
Este cliente envia ao núcleo do RVision uma descrição sobre como deverá ser realizada a monitoração, contendo algumas informações pertinentes, tais como:
Os recursos de cada nó que serão monitorados e a freqüência em que as informações sobre utilização dos recursos serão atualizadas.
Além de isto, o cliente também é responsável por receber as informações que foram obtidas por a monitoração dos recursos, as quais são repassadas por o núcleo do RVision.
Após a recepção das informações, o cliente de monitoração chama informações obtidas através da monitoração dos nós.
Este cliente de monitoração foi implementado como um daemon, devido a sua funcionalidade de apenas configurar a sessão de monitoração para a recepção dos dados, receber as informações e repassar- las ao ambiente C LANE para armazenamento.
O RVision utiliza um arquivo de descrição da sessão de monitoração para identificar o conjunto de nós e informações que devem ser monitorados.
O arquivo de descrição da sessão de monitoração utilizado é apresentado na Figura 6.1.
A sessão de monitoração utiliza uma biblioteca de monitoração (libclane) implementada especificamente para o ambiente C LANE.
Esta biblioteca captura informações de utilização de CPU para os processadores 0 e 1 (a máquina Amazônia é composta por nós SMP), e porcentagem de utilização de memória principal e Swap.
O arquivo de descrição ainda apresenta o conjunto de nós que são monitorados, a freqüência cíclica de monitoração que captura as informações periodicamente, neste caso, a cada 3 segundos, e as informações monitoradas em cada nó.
Com o objetivo de demonstrar a utilização do ambiente C LANE, o ambiente foi instalado e configurado no laboratório do CPAD como apresentado na seção anterior, e capturou informações sobre a alocação de recursos, execução de aplicações e informações de monitoração durante o mês de novembro de 2003.
A seguir são apresentadas algumas demonstrações sobre a utilização do ambiente para análise de duas aplicações executadas neste período.
O NPB (Em as Parallel Benchmarks) consiste em oito problemas derivados de importantes classes de aplicações da área aero-física.
Os oito problemas consistem em cinco kernels e três applicações de simulação de dinâmica de fluídos (CFD) implementados em MPI nas linguagens C e Fortran77/ 90.
Os cinco kernels imitam o centro de cinco métodos numéricos usados por aplicações CFD.
Cada aplicação e kernel possui cinco versões, chamadas de classes, que diferenciam- se em relação a quantidade de trabalho a ser realizado.
As classes são:
S (versão de teste), W (versão destinada a medir o desempenho de uma única máquina monoprocessada), A (versão com pouco trabalho), B (versão com quantidade intermediária de trabalho) e C (versão com bastante trabalho).
Foram analisadas as execuções das três simulações -- Block Tridiagonal (BT), Lu Decomposition (Lu) e Scalar Pentadiagonal (SP) -- e de quatro kernels -- Conjugate Gradient (CG), Embarassingly Parallel (EP), Integer Sort (Is) e Multigrid (MG) -- do NPB.
As execuções realizadas utilizaram as classes A e B dos benchmarks.
Os benchmarks BT e SP foram executados com 25 processos, pois necessitam de um número quadrático de processos para serem executadas;
E o restante com 32 processos.
O conjunto de nós utilizado para execução foi composto por 16 nós, em os quais 8 nós com 2 Pentium III de 550 MHz por nó, e 8 nós com 2 Pentium III de 1 GHz por nó, cada nó com 256 MBytes de memória principal.
Após a execução dos benchmarks, foram obtidas as informações correlacionadas e geradas as informações derivadas utilizando a Clane Analysis Tool.
A Tabela 6.1 apresenta as informações derivadas geradas por a ferramenta para as execuções.
A coluna tempo de execução refere- se ao período de tempo em segundos em o qual o programa foi executado, e as colunas CPU0, CPU1 e MEM representam a porcentagem de utilização média destes recursos no conjunto de nós do agregado.
Para todos os benchmarks, as classes A e B apresentaram um comportamento muito similar em relação a utilização de CPU0 e CPU1, entretando, a utilização de memória apresentou um aumento significativo, principalmente nos benchmarks BT e SP.
Estes dois benchmarks apresentaram também os maiores tempos de execução em relação a os outros benchmarks.
A aplicação POV-Ray é utilizada para criar imagens tridimensionais usando uma técnica de renderização chamada ray-- tracing.
A aplicação lê um arquivo contendo informação descrevendo os objetos e iluminação de uma cena e gera uma imagem da cena a partir de o ponto de visualização da câmera também descrita no arquivo.
Raytracing não é um processo rápido, mas produz imagens de alta qualidade com reflexões realísticas, sombras, perspectiva e outros efeitos.
A versão do POV-Ray utilizada realiza um particionamento estático da imagem a ser renderizada no início da aplicação.
Em a versão original, a imagem é dividida entre o número de processos a ser executado.
Com o objetivo de verificar as vantagens de uma melhor distribuição de fatias entre os escravos para obtenção de um melhor balanceamento de carga, foram criadas mais cinco versões da aplicação com um número de tarefas maior por escravo.
A aplicação foi executada com 32 processos, num conjunto de 16 nós da amazônia formados por 8 nós com 2 Pentium III de 550 MHz por nó, e 8 nós com 2 Pentium III de 1 GHz por nó, cada nó com 256 MBytes de memória principal.
Foram executadas 6 versões da aplicação PovRay, cada uma utilizando um número diferente de fatias a serem processadas.
Foram utilizadas versões com 32, 64, 128, 256, 512 e 1024 fatias.
O tamanho da imagem a ser processada foi 1600x1200 pixels, e foram escolhidas três imagens com diferentes complexidades.
Através das informações derivadas foi possível verificar o tempo de execução para cada versão da aplicação usando as três imagens, além de a utilização de CPU0, CPU1 e memória.
A Tabela 6.2 apresenta as informações derivadas sobre as execuções do POV-Ray.
A primeira coluna apresenta o número de fatias total em que a aplicação foi dividida.
A coluna tempo de execução refere- se ao período de tempo em segundos em o qual o programa foi executado, e as colunas CPU0, CPU1 e MEM representam a utilização destes recursos no conjunto de nós do agregado utilizado.
A aplicação apresentou, no geral, melhor desempenho nas três imagens conforme o aumento de fatias para cada escravo.
A imagem 1, no entanto, apresentou um sinal de estabilização quanto utilizada com a versão de 1024 fatias, demorando um pouco a mais para ser executada em comparação com a versão de 512 fatias.
É possível verificar também que a utilização de CPU foi melhor aproveitada quando aumentado o número de fatias, observado principalmente na imagem 3 (im3).
Podemos também observar que a utilização de memória não varia em relação a complexidade da imagem a ser processada, pois apresentou valores semelhantes para as três imagens.
Este trabalho apresentou um método para geração de informações derivadas sobre as interações dos usuários com máquinas agregadas, utilizando a correlação entre as informações provindas dos sistemas de gerência de recursos e monitoração.
A fim de mostrar a validade deste método, foi desenvolvido um ambiente, chamado C LANE, para:
Obtenção das informações dos sistemas de gerência de recursos e monitoração através de uma interface de integração;
Armazenamento destas informações a fim de poder criar uma base de dados histórica sobre a utilização do agregado;
Geração das informações correlacionadas através de consultas feitas ao ambiente e apresentação das informações derivadas através de uma ferramenta gráfica.
Algumas das vantagens observadas com a utilização do ambiente são:
A utilização de bases de dados históricas possibilita realizar comparações e análises entre comportamentos de utilização dos recursos obtidos a partir de diversas execuções da mesma aplicação ou de aplicações diferentes, com configurações idênticas ou distintas;
O agregado permanece em constante observação, o usuário não precisa &quot;configurar «o seu ambiente de compilação ou execução para utilizar a ferramenta;
O administrador tem acesso aos dados de desempenho das aplicações permitindo verificar padrões de comportamento e, desta forma, identificar pontos críticos para um melhor ajuste dos recursos da máquina agregada.
Algumas das desvantagens observadas em relação a o método proposto são:
O armazenamento e acesso a informações históricas pode tornar- se bastante custoso devido a o tamanho dos arquivos gerados, o qual é dependente de alguns fatores tais como:
Número de nós do agregado, freqüência de atualização das informações de monitoração, conjunto de métricas monitorado;
Para captura das informações sobre a interação dos usuários e a utilização dos recursos da máquina agregada é necessário realizar uma integração com os sistemas de gerência de recursos e monitoração, muitas vezes, necessitando realizar algumas mudanças nos códigos-fonte destes sistemas;
O método assume que cada nó do agregado é alocado a somente um usuário, isto é, as informações derivadas providas por o método podem não ser de grande utilidade quando os nós forem utilizados de forma compartilhada por mais de um usuário.
Com o intuito de dar continuidade ao trabalho, seguem abaixo algumas propostas para trabalhos futuros.
Definição de novas informações derivadas no método e implementação destas no ambiente C LANE;
Adaptação do ambiente para gerar informações relativas somente a um subconjunto dos recursos do nó, a fim de possibilitar o suporte a nós que são compartilhados por diversos usuários;
Melhorias no formato e método de armazenamento das informações, a fim de diminuir os tamanhos dos arquivos gerados por o Clane Information Server;
Melhorias na ferramenta gráfica Clane Analysis Tool.
