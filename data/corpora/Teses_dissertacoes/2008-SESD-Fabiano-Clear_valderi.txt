A computação pervasiva possibilita uma série de aplicações em a qual o usuário não precisa se preocupar com o sistema computacional e passa a se focar na sua tarefa fim, ou até mesmo deixar de se preocupar com tarefas secundárias e se concentrar numa tarefa principal.
Esta mudança é mais um passo em direção a o conceito de Computação Ubíqua (Ubiquitous/ Pervasive Computing) introduzido por Mark Weiser.
Weiser propõe, assim, uma integração contínua entre ambiente e tecnologia na tarefa de auxiliar os usuários nas suas mais variadas atividades cotidianas.
Entretanto, existe uma série de requisitos a serem analisados e verificados na elaboração de projetos de computação pervasiva.
O desenvolvimento da computação pervasiva tornará os dispositivos eletrônicos repletos de funcionalidades computacionais que serão capazes de reconhecer e responder às necessidades contextuais e individuais de cada pessoa.
Por exemplo, numa sala de aula, os alunos se adaptariam ao contexto do professor, (disciplina e do conteúdo), assim que o mesmo entrar na sala.
Para essa situação tornar- se realidade, uma característica importante desse tipo de aplicação é a capacidade de reconhecer o contexto do usuário de forma mais transparente possível, tornando os dispositivos eletrônicos do ambientes ainda menos perceptíveis para o usuário.
Este ambiente computacional pervasivo consiste de uma grande variedade de nodos de diversos tipos:
Móveis e fixos, aplicações e serviços interconectados.
Em este caso, computação pervasiva também é sinônimo de conectividade pervasiva, e reflete uma computação altamente dinâmica e distribuída.
Hoje, a concentração das pesquisas está em disponibilizar tecnologias chave, para suportar este novo ambiente computacional.
Dentro de essas necessidades, este trabalho apresenta um modelo gerenciador de descoberta de serviços pervasivos (MgDsP) para utilização em aplicações móveis, sensíveis ao contexto.
Palavras-chave: Computação pervasiva, ciência de contexto, descoberta de serviços, protocolos.
Em a visão de &quot;Mark Weiser, Computação Ubíqua, os recursos de computação seriam onipresentes na vida diária e seriam conectados com a finalidade de fornecer a informação ou serviços que os usuários requerem em qualquer lugar e em qualquer tempo».
Em esta visão, se apresenta um ambiente impregnado com dispositivos de computação e comunicação interagindo com o homem de forma tranqüila (Calm Technology), em a qual o usuário não percebe que esta interagindo com a máquina, o ambiente interage com ele de forma autônoma, interativa e relevante A última década trouxe grandes avanços nas tecnologias de computação e de comunicação móvel.
Existe hoje uma tendência de mudança no paradigma de computação, tradicionalmente estático, relativamente previsível e baseado em estações de trabalho, para um novo paradigma, altamente dinâmico, com constantes mudanças de ambientes e dispositivos causadas por a mobilidade do usuário.
Caracterizado por o uso de dispositivos móveis multifuncionais, como celulares, smartphones e PDA's (Personal Digital Assistants).
Esta mudança é mais um passo em direção a o conceito de Computação Ubíqua (Ubiquitous/ Pervasive Computing) introduzido por Mark Weiser.
Weiser, que vislumbrou novos sistemas e ambientes acrescidos de recursos computacionais capazes de prover serviços e informações quando e onde sejam desejados por os usuários (&quot;everywhere, everytime computing&quot;).
Weiser propõe, assim, uma integração contínua entre ambiente e tecnologia na tarefa de auxiliar os usuários nas suas mais variadas atividades cotidianas.
Entretanto existe uma série de requisitos.
A literatura não apresenta uma única definição para o termo computação ubíqua.
Diferentes autores, apresentam diferentes definições para este termo.
Em este trabalho o termo computação ubíqua será utilizado com a junção da computação pervasiva e da computação móvel.
A justificativa de se realizar uma diferenciação desses termos é que um dispositivo que está inserido num ambiente, não necessariamente é móvel.
Devido a isso, quando for utilizado o termo computação ubíqua, considera- se o alto grau de dispositivos inseridos da computação pervasiva juntamente com o alto grau de mobilidade da computação móvel, como pode ser visualizado na figura 1.
A Computação Pervasiva que é fundamentada em &quot;uma pessoa para muitos computadores «é possível de ser concretizada dado: --
O avanço da tecnologia das redes de comunicação, computação móvel, dispositivos embarcados, sensores, etiquetas RFID, etc. -- O incremento de eletro-eletrônicos digitais de uso diário; --
O avanço nas plataformas de computação pervasiva/ ubíqua como smart spaces, middlewares, agentes, ontologias, etc..
O objetivo da computação pervasiva é criar Ambientes Inteligentes (salas de aula, residências, escritórios, hospitais, automóveis, etc.).
Geralmente utilizam dispositivos em rede inseridos no ambiente que fornece conexão discreta e serviços diversos todo o tempo, melhorando assim o cotidiano do homem e a qualidade de vida sem conhecimento explícito sobre as comunicações e as tecnologias de computação.
A computação pervasiva (Pervasive computing), visa fornecer uma computação aonde, quando, o que e como se deseja, através da virtualização de informações, serviços e aplicações.
Em este ambiente computacional há possibilidade de existir uma grande variedade de nodos de diversos tipos, móveis ou fixos, aplicações e serviços interconectados.
O grau de utilização da arquitetura inserida indica, de maneira geral, o grau de inteligência dos computadores num ambiente pervasivo, para detectar, explorar e construir dinamicamente modelos de seus ambientes.
Em a tabela 1, observa- se o grau de utilização de arquitetura embarcada e mobilidade, comparada a computação pervasiva, móvel e ubíqua.
Em este caso, computação pervasiva também é sinônimo de conectividade pervasiva, e reflete uma computação altamente dinâmica e distribuída.
Hoje, a concentração das pesquisas está em disponibilizar tecnologias -- chave, para suportar este novo ambiente computacional.
Dentro de essas concentrações, este trabalho apresenta um modelo gerenciador de descoberta de serviços pervasivos (MgDsP) para utilização em aplicações móveis, sensíveis ao contexto, voltado para utilização em ambientes diversos, com a finalidade de adaptação em plataformas e arquiteturas de uso pervasivo.
As novas tecnologias de computação móvel e o crescente emprego de dispositivos portáteis têm tornado a computação cada vez mais presente na realização de diversas atividades humanas, favorecendo o surgimento de um novo paradigma computacional:
A Computação Ubíqua.
Em esse cenário, destacam- se as aplicações móveis, sensíveis ao contexto, que aprimoram a interação com os seus usuários ao se beneficiarem do uso de informações contextuais utilizadas na descoberta de serviços, de entre as quais, destacam- se aplicações hospitalares.
A figura 2 apresenta o funcionamento de uma aplicação pervasiva sendo utilizado num ambiente hospitalar.
Cena 1: Apresenta a enfermeira sendo detectada por sensores, bem como a localização do paciente.
A detecção é realizada por sensores localizados no carrinho utilizado por a enfermeira e a cama utilizada por o paciente.
Os sensores são detectados por o sistema pervasivo, através de dispositivos localizados no ambiente local &quot;leito do paciente «nesta ocasião (context awareness).
Essas informações são armazenadas no gerenciador do sistema pervasivo, algumas informações como a localização do paciente já estavam previamente armazenadas e disponibilizadas para uso da enfermeira.
Cena 2: Em a cena 2 a cama possui um monitor que pode ser utilizado por o paciente para entretenimento, possuindo outras finalidades, tais como acesso aos dados e informações do paciente.
O usuário que for utilizar o leito tem sua identificação previamente cadastrada ao sistema para posteriormente ser detectada e gerenciada por o sistema.
A enfermeira que está atendendo o paciente também possui prévio cadastro ao sistema pervasivo.
As informações são relacionadas posteriormente a informações relativas ao paciente.
Cena 3: O tipo de medicamento é identificado através de containers com dispositivos de comunicação que são detectados por sensores.
A o se aproximar do paciente, é identificado o medicamento mostrando no display seu nome, proporcionando assim, uma maior segurança.
Cena 4: Quando os medicamentos que estão dentro de os containers são colocados em cada cama, é realizada a identificação do tipo de medicamento utilizado por o paciente e baseado nessas informações do paciente e do medicamento o sistema prescreve a quantidade de medicação a ser consumida.
Cena 5: A última cena mostra a enfermeira saindo da zona de detecção local do leito do paciente.
O sistema gerência o monitor do paciente e faz com que volte a opção de televisão ou outra função de entretenimento solicitado por o paciente.
Ambiente inteligente é um novo paradigma que suporta arquiteturas pervasivas, introduzindo interação entre homem, máquina e seu ambiente, um ambiente é denominado Ambiente Inteligente, quando este não interfere e onde as diversas tecnologias complementam uma a outra, envolvendo o usuário ao sistema pervasivo sem a necessidade de manipulação.
A capacidade desse ambiente ter disponibilidade de serviços e características que são requeridas e previsíveis a esse ambientes torna ­ se possível quando:
Reconhecer o usuário e as circunstâncias (context user) e operar conseqüentemente sem necessidade de configuração;
Ter um conhecimento previsível baseado em conhecimento do ambiente (context awareness);
Em tempo real, dependendo da aplicação produzir novos serviços em áreas como entretenimento, segurança, trabalhos domésticos, hospitalares, provendo acesso a informações, comunicação, computação;
Permitir acessar aos muitos serviços e características do ambiente inteligente, independente da localização dos usuários e tipo de dispositivos, fornecendo assim, suporte a descoberta de serviços existentes.
Baseado nessas características para utilização de sistemas pervasivos surgem projetos como o OSGi, que trabalha na área de pesquisa e desenvolvimento em computação móvel utilizada para automóveis inteligentes.
A figura 3 apresenta a arquitetura completa de automóveis inteligentes, onde se observa um automóvel interligado ao sistema OSGi, entre diferentes tipos de dispositivos e formas de comunicação, comunicando- se a um servidor.
As informações disponibilizadas por o veiculo são navegação, diagnósticos do funcionamento do próprio veiculo, de entre outras informações.
Destaca- se, um caso ilusório de um acontecimento relacionando o veiculo a um acidente, o sistema se encarregaria de acionar outro sistema, exemplo citado no cenário anterior.
Este, por sua vez, receberia todos os dados relativos ao paciente, inclusive sua localização para um possível deslocamento de ambulâncias.
A utilização de um serviço de descoberta de serviços pervasivos proporciona comodidade e uma maior quantidade de aplicações a serem utilizadas, mas para que essas aplicações tenham desempenho e estejam disponíveis sempre que houver necessidade, há uma série de requisitos a serem verificados em seu contexto, por exemplo:
Segurança, privacidade, disponibilidade, velocidade, entre outros.
Uma aplicação pervasiva utiliza os contextos individuais e apropriados para cada usuário ou situações em que esses usuários se encontrem.
Em um ambiente hospitalar isso pode ser utilizado da seguinte forma:
Um paciente pode ter um contexto relacionado a um tipo de medicamento usado para um tipo de doença específica, tendo um contexto definido de apenas alguns profissionais habilitados a manipular essas informações, necessitando, assim, implementações mais seguras e confiáveis.
Tornando assim, a manipulação da descoberta de serviços mais complexa.
Podemos utilizar como exemplo de aumento dessa complexidade a quantidade de dispositivos que essas aplicações requerem e necessitam manipular.
O principal aspecto a ser considerado na utilização de um serviço de descoberta para sistemas ubíquos é a capacidade de oferecer suporte a mobilidade de usuários e dispositivos, permitindo a adaptação dinâmica às condições variáveis dos ambientes que o integram.
Está adaptação deve ser transparente para o usuário provendo, sempre que possível mecanismo para interação espontânea entre as aplicações do usuário e serviços, disponibilizando a troca de informações em quantidade de dispositivos e formas de comunicação heterogêneas.
O objetivo deste trabalho é apresentar um modelo gerenciador de descoberta de serviços pervasivos (MgDsP) para utilização de aplicações móveis sensíveis ao contexto.
A computação pervasiva é um novo paradigma que contempla um novo cenário computacional com aplicações e novas funcionalidades em ambientes inteligentes.
Essas aplicações são distribuídas e utilizam recursos de uma grande variedade de dispositivos interligados numa rede altamente heterogênea.
Baseado nessas características esse capítulo tem como objetivo definir alguns conceitos relacionados à descoberta de recursos, serviços, protocolos e ciência de contexto, assim como apresentar algumas definições do trabalho.
Os conceitos relacionados à descoberta de serviços são apresentados inicialmente.
Em seguida, a definição de protocolos de descoberta de serviços é apresentada.
Em o decorrer, serão apresentados conceitos e requisitos relativos à utilização de contexto em ambientes pervasivos.
Por fim, esse capítulo descreve os principais requisitos necessários para o desenvolvimento de aplicações pervasivas com descoberta de recursos sensíveis ao contexto.
Ambientes complexos, como o pervasivo, exigem mudanças nos paradigmas de projetos:
De a orientação a objetos para a programação adaptativa ao contexto (Context--aware Computing).
Software adaptativo ao contexto é aquele que usa as informações disponíveis sobre o ambiente para melhorar seu comportamento no tempo.
A dificuldade de produzir tais softwares vem do fato do projetista não poder prever todas as circunstâncias que a aplicação poderá ser usada, e tomar todas as decisões em tempo de projeto.
Isto deixa o software com vida curta, devido a as constantes atualizações de situações não previstas.
Este ambiente é dinâmico, único, com certo grau de incerteza, não -- determinístico e tem influência do contexto em que está inserido.
Em estes sistemas, o usuário deve sempre obter o que deseja (manter a funcionalidade), saber o que está acontecendo (ter controle sobre o ambiente), saber que não está sozinho.
Existem outros sistemas que cooperam, competem e se comunicam (fornecer consciência do contexto).
Portanto, o paradigma móvel/ pervasivo impõe novos requisitos de operação aos sistemas.
Entre eles:
A) Inferir intenção do usuário;
B) Gerenciar pró -- ativamente as atividades do usuário;
C) Mover estado de execução entre diversas plataformas e estados de contexto;
D) Armazenar dados e códigos disponíveis em qualquer lugar, em qualquer formato;
Ec, e).
Tendo como principal objetivo o presente trabalho o desenvolvimento de um Modelo de Gerenciador de Serviços para Plataforma Pervasiva para utilização de aplicações móveis sensíveis ao contexto.
Em um ambiente de computação pervasiva, usuários e dispositivos formam associações para cooperações dinâmicas, de acordo com seu deslocamento no ambiente.
Para isto, cada dispositivo interage com os integrantes de ambiente pervasivo através do uso e oferta de funcionalidades.
Faz- se então necessário que estes componentes tenham capacidade de descobrir, utilizar e oferecer tais funcionalidades às demais entidades presentes no ambiente.
Tais funcionalidades num sistema pervasivo são vistas como serviços disponíveis e ofertados por cada dispositivo para potenciais clientes, que entram e saem do ambiente pervasivo.
Esta característica impõe que dispositivos possam descobrir tais serviços em suas proximidades.
Este problema pode ser solucionado através de um mecanismo específico de descoberta de serviços (discovery service).
Este serviço funciona como uma espécie de serviço de diretório, onde ofertas de serviços são registradas para serem usadas por potenciais clientes.
De entre suas funções estão à oferta, descoberta, escolha e uso de serviços oferecidos por os diversos componentes presentes num dado instante.
Alguns exemplos de implementações destes serviços são o Service Location Protocol, Jini e Universal Plug and Play.
No caso de aplicações pervasivas, as implementações destes serviços devem levar em conta as características destes sistemas, como:
Dados relativos às consultas feitas por os potenciais clientes são determinados em função de o contexto do usuário, que por sua vez é altamente dinâmico;
Via de regra, não há uma infra-estrutura pré-determinada para hospedar um serviço de descoberta de serviços, como um nodo com endereço fixo;
Serviços registrados no serviço de descoberta podem desaparecer espontaneamente;
E por fim, os protocolos para descoberta de serviços devem ser sensíveis a limitações de consumo de bateria e recursos de rede, como largura de banda.
Esse trabalho trata somente da descoberta do serviço no ambiente pervasivo, outras questões relativas às formas de comunicação, tratamento de serviços, transporte dos dados entre os dispositivos, não serão tratados nesse estudo.
O objetivo não é reduzir a natural complexidade dos sistemas pervasivos adaptativos, e sim, desenvolver ferramentas que simplifiquem a sua usabilidade numa quantidade maior de dispositivos.
A rápida evolução e expansão de ambientes dotados de redes sem fio têm aumentado a necessidade por protocolos de descoberta de serviços (SDPs) mais sofisticados.
Entretanto, desde que a comunidade de redes de computadores percebeu as necessidades relativas à descoberta de serviços, diversas empresas, consórcios e um grupo de trabalho da IETF (Internet Engineering Task Force) passaram a desenvolver pesquisas nesta área.
Como resultado, uma grande variedade de protocolos de descoberta de serviços se encontra disponível atualmente, segundo:
Service Location Protocol (SLP);
Jini; Salutation;
Universal Plug and Play (UPnP);
Bluetooth Service Discovery Protocol (SDP);
Intentional Naming System (INS).
Protocolos de descoberta de serviços provêem mecanismos para descobrir dinamicamente os serviços disponíveis numa rede, fornecendo as informações necessárias para procurar serviços específicos, escolher o serviço adequado (aquele com as características desejadas), e utilizar o serviço.
Tipicamente, descoberta de serviços, envolve um cliente, um provedor de serviço e um servidor de diretórios ou busca.
Além disso, o registro e a busca de serviços são componentes importantes dos protocolos SDPs mais comuns.
Em as próximas seções serão discutidas brevemente as arquiteturas desses protocolos e interações entre as instâncias para a descoberta de serviços, registro de serviços e anúncio de serviços.
O SLP foi desenvolvido por o grupo de trabalho da IETF e está disponível em sua versão 2.
Seu objetivo é ser um padrão independente de fabricantes.
Foi projetado para redes TCP/ IP e é escalável para redes de grande porte.
Sua arquitetura é constituída de três componentes principais:
Agentes do Usuário (UA), que executam a descoberta do serviço em nome de o cliente (aplicação ou usuário);
Agentes de Serviço (SA), que anunciam a localização e características dos serviços, em nome de os próprios serviços;
E Agentes de Diretório (De a), que coletam endereços de serviços e informações recebidas dos SAs em suas bases de dados e respondem às requisições de serviços dos Uas.
A tecnologia Jini, segundo, é uma extensão da linguagem de programação Java e foi desenvolvida por a Sun Microsystems.
A abordagem da questão de como dispositivos se conectam uns com os outros para formar uma rede ad-hoc simples é tratada através de uma comunidade Jini, e também como esses dispositivos provêem serviços para outros dispositivos nessa rede.
Jini é constituído de uma arquitetura e um modelo de programação.
O princípio da arquitetura Jini é similar a do SLP.
Dispositivos e aplicações se registram com a rede Jini utilizando um processo chamado Descoberta e Adesão (Discovery and Join).
Para se unir a uma rede Jini, um dispositivo ou aplicação se registra na Tabela de Consulta (Lookup Table) de um Serviço de Consulta (Lookup Service -- Ls), que é à base de dados para todos os serviços na rede (similar ao De a no SLP).
Salutation é mais uma solução para descoberta de serviços, segundo.
É um consórcio aberto de indústrias, chamado Consórcio Salutation sendo responsável por o desenvolvimento de sua arquitetura e definição de um modelo abstrato com três componentes:
Cliente, Servidor e Salutation Manager (SLM).
O Salutation Manager gerência toda a comunicação, e faz a ponte através de diferentes meios de comunicação.
Serviços registram suas capacidades com um SLM, e clientes consultam o SLM quando necessitam de um serviço.
Depois de descobrir um serviço desejado, clientes podem solicitar a utilização do serviço através do SLM.
Salutation define seu protocolo baseado no SunRPC.
Universal Plug and Play (UPnP), foi desenvolvido por um consórcio empresarial fundado e liderado por a Microsoft.
Pode- se dizer que ele estende a tecnologia Plug and Play da Microsoft para o caso em que dispositivos podem ser acessados através de uma rede TCP/ IP.
UPnP é voltado para redes sem gerenciamento, ou seja, pequenas redes de escritório ou residências, onde ele habilita mecanismos peer- to peer para auto-configuração de dispositivos, descoberta de serviços, e controle de serviços.
UPnP é um protocolo de descoberta de serviços orientado a dispositivos.
Todas as informações sobre os serviços e comunicação estão no formato XML, que é independente de plataforma e de linguagem de programação, o que aumenta bastante a interoperabilidade entre dispositivos.
Em a atual versão do UPnP não há um serviço central de registro, como o De a no SLP ou o Ls de Jini.
Bluetooth é uma recente tecnologia de transmissão sem fio para curtas distâncias.
A pilha de protocolos Bluetooth contém o Service Discovery Protocol (SDP), que é usado para localizar serviços fornecidos por dispositivos disponíveis através do Bluetooth.
SDP é baseado na plataforma Piano da Motorola e foi projetado para atender à natureza dinâmica das comunicações ad-hoc.
O protocolo também trata a descoberta de serviços especificamente para esse ambiente, e suporta as seguintes requisições:
Busca por serviços por o tipo de serviço, busca por atributos de serviços, e busca por serviços sem um prévio conhecimento das características do serviço.
SDP não inclui funções para acessar serviços.
Uma vez que os serviços tenham sido descobertos por o SDP, eles devem ser selecionados, acessados e utilizados por mecanismos fora de o escopo do SDP, utilizando outros protocolos de descoberta de serviços como SLP ou Salutation.
SDP pode coexistir com outros protocolos de descoberta de serviço, mas não necessita de eles.
Em o Sistema de Nomes Intencionais (INS).
Aplicações podem ser serviços, que provêem funcionalidades ou dados, ou clientes, que solicitam acesso a esses serviços.
Intentional Name Resolvers (INRs) faz o roteamento das solicitações dos clientes até os serviços adequados.
Qualquer dispositivo numa rede ad-hoc pode agir como um INR, e uma rede de INRs cooperativos provêem um serviço de descoberta para um sistema completo.
INRs formam uma rede sobreposta no nível da aplicação que permite a troca de descrições de serviços e construção de caches locais baseados nestes anúncios de serviço.
Cada serviço conecta um INR e divulga uma descrição baseada em pares de atributo-valor.
Clientes se comunicam com INRs e solicitam serviços usando uma expressão de consulta.
Uma vez que as descrições de serviço são disseminadas através de rede de INRs, um novo serviço se torna conhecido para outros INRs e através de eles para os clientes.
Em sua tese, propõe um protocolo com possíveis soluções para a descoberta de serviços utilizada em redes sem fio.
Também cita a concentração em três cenários distintos:
As soluções projetadas para redes fixas adaptadas às redes sem fio, as soluções projetadas para as redes sem fio ad hoc de salto único e as soluções projetadas para as redes sem fio ad hoc de saltos múltiplos.
E por fim apresenta uma tabela de classificação que é utilizada como base de comparação entre as principais iniciativas de prover mecanismos de descoberta de serviços para as redes sem fio.
A classificação apresentada é utilizada como base de comparação entre as principais iniciativas de prover mecanismos de descoberta de serviços sem fio, onde são realizadas diversas comparações entre os protocolos apresentados anteriormente.
De acordo com, a tabela 3 mostra as principais iniciativas de prover mecanismos de descoberta de serviços para as redes sem fio.
São analisados vários aspectos relativos ao uso de protocolos em computação, móvel, pervasiva e conforme estudado no capitulo anterior, utilizando a união entre mobilidade e pervasiva, surgindo assim à computação ubíqua.
Utiliza comparações entre protocolos utilizados em redes fixas adaptadas a redes sem e soluções de redes sem fio ad hoc de saltos únicos e múltiplos.
As características analisadas são arquitetura de descoberta, escopo, descrição de serviços, métodos de busca e armazenamento do serviço, anuncio, requisição, seleção e invocação de serviços.
Também são analisadas as características de provisão de mobilidade e uma característica importante analisada nos protocolos estudados, a segurança, visto que essas aplicações exigem em sua maioria tratamentos adequadas principalmente nesse quesito.
Entre todos os trabalhos estudados verificaram- se questões relativas à adaptação ao modelo proposto.
O protocolo escolhido foi o Bluetooth Service Discovery Protocol (SDP), entre outros fatores o fato de maior relevância é que Bluetooth é uma tecnologia desenvolvida essencialmente para ser usada em sistemas embarcados onde a capacidade de memória, processamento, entre outros, são bastante limitados.
Outro fator é ter sido utilizado em parte da validação na arquitetura desenvolvida por.
Segundo o resumo descrito na seção 2.3, também pode ser facilmente adaptado a outras plataformas pervasivas de uso genérico, sendo um dos objetivos deste trabalho.
Segundo, o sistema Bluetooth foi especificado por meio de uma pilha de protocolos, formando uma pilha de cinco camadas, sendo elas:
Bluetooth Radio ­ especifica detalhes da interface com o ar, incluindo freqüência, salteamento, esquema de modulação e força da transmissão;
Baseband ­ trata sobre estabelecimento de conexão com uma piconet, endereçamento, formato do pacote, temporização e controle de energia;
Link Manager Protocol (LMP) ­ estabelece a configuração do link entre dispositivo bluetooth e gerenciamento de links em andamento, incluindo aspectos de segurança (ex..
Logical Link Control and Adaptation Protocol (L2CAP) ­ adapta os protocolos da camada superior à camada de banda base, fornecendo tanto serviços sem conexão quanto serviços orientados à conexão;
Service Discovery Protocol (SDP) ­ manipula informações do dispositivo, serviços e consultas para características de serviço entre dois ou mais dispositivos Bluetooth.
Inquiry: O dispositivo realiza um processo conhecido como inquiry.
Em este processo, ele &quot;pergunta «quais pontos de acesso estão próximos.
Todos os pontos de acesso respondem com seu endereço físico (cada módulo Bluetooth tem um endereço físico único no mundo, gravado no momento da fabricação).
O dispositivo móvel escolhe então um destes pontos de acesso.
Paging: A seguir, é iniciado um processo conhecido como paging.
Em este processo, o dispositivo móvel procura sincronizar- se com o ponto de acesso, em termos de clock offset e fase do salto em freqüência, além de outras inicializações necessárias.
Estabelecimento de um link:
Como se trata de uma aplicação que não demanda um fluxo contínuo de dados, é estabelecido um link assíncrono (ACL).
A camada responsável por estabelecer tal link é a LMP (Link Manager Protocol).
Procura por Serviços:
Depois de estabelecido um link físico, o dispositivo móvel procura descobrir por meio de o SDP (Service Discovery Protocol), quais os serviços disponíveis no ponto de acesso.
Em o caso, verificará se é possível acessar algum serviço a partir de o ponto de acesso.
Suponha- se que seja possível, pois caso contrário à aplicação não funcionaria.
L2CAP: Baseado na informação obtida por o SDP, um canal L2CAP será criado para possibilitar a comunicação entre os dois dispositivos.
Rfcomm: Um canal RFCOMM é criado sobre o canal L2CAP.
O canal RFCOMM transmite dados entre os dispositivos Bluetooth através de uma interface semelhante a um socket.
Segurança: Caso o ponto de acesso restrinja o acesso a um grupo específico de usuários, é realizado um processo de autenticação, onde o dispositivo móvel deve saber o Pin correto para acessar o serviço.
Além disso, se os dispositivos estiverem operando no modo seguro, os dados serão encriptados.
Entretanto, o quesito segurança não foi tratado nesse trabalho, disponibilizando assim, proposta para trabalhos futuros.
PPP: Para acessar um recurso de dispositivo, tendo como finalidade acessar um serviço de email, é usado o TCP/ IP.
Em o nível da aplicação do TCP/ IP, tem- se o protocolo Pop responsável por o acesso à conta de e-mail.
Este protocolo faz uso de uma conexão PPP.
O PPP, geralmente é executado a partir de um link serial (um modem numa conexão dial-up, por exemplo).
No caso de o sistema Bluetooth, o protocolo PPP rodará a partir de o canal RFCOMM, que emula similarmente um link serial.
A partir de aí, os protocolos usuais da Internet pode ser executado normalmente e, neste caso, o e-mail pode ser acessado.
TCS: Telephony control protocol-- binary (TCS BIN) é o protocolo orientado a bit que define o controle de chamada de sinalização para estabelecimento de chamadas de voz e dados entre dispositivo Bluetooth.
Ainda, TCS BIN define procedimentos de gerenciamento de mobilidade para manipular grupos de dispositivo Bluetooth TCS, entretanto esse módulo da pilha de protocolos não será utilizado no trabalho.
HCI: A camada HCI fornece uma interface de Software básica para que sejam desenvolvidas camadas superiores.
Métodos de transmissão/ recepção (send/ receive), são alguns dos métodos providos por esta camada. (
Hardware Controller Interface) que oferece uma interface necessária para:
Transmissão/ recepção de pacotes, envio de comandos ao controlador de Hardware, de entre outros.
Já a outra camada, permite a comunicação entre HCI e o Hardware.
Ela oferece o suporte necessário de maneira que a comunicação realize- se independente do Bus.
Em esta seção serão apresentados os principais conceitos e funcionalidades sobre aplicações Sensíveis a o contexto.
Seres humanos são capazes de trocar idéias e refletir sobre novas informações de maneira apropriada devido a alguns fatores, como:
O vocabulário que compartilham, os entendimentos de como as coisas funcionam e um entendimento implícito das situações do cotidiano.
Quando as pessoas se comunicam, elas são capazes de utilizar informações de situação (ou contexto) para acrescentar algo à conversação.
Infelizmente, esta capacidade não é encontrada na comunicação entre humanos e computadores, ainda.
Computadores não entendem a linguagem humana, tão pouco entende como as coisas funcionam e não podem obter de maneira independente as informações sobre situações, pelo menos não tão facilmente como os seres humanos.
Em a computação tradicional, geralmente, os usuários fornecem informações aos computadores por meio de teclado e mouse utilizando, portanto uma maneira explícita de entrada de dados.
A computação ubíqua prioriza o desenvolvimento de aplicações cujas interfaces humano computador exploram as formas naturais de interação humana (ex:
Fala gestos e escrita).
Para que os usuários não necessitem fornecer informações de maneira explícita ao computador, as aplicações precisam ser capazes de capturar contextos por meio de sensores físicos e lógicos, e fornecer serviços e informações sem que o usuário precise solicitar- los.
Face essas necessidades surgem os chamados tratamentos de contexto computacional, que serão apresentados a seguir.
Em a literatura encontram- se muitas definições para contexto.
Várias definições em contexto são encontradas como localização, identidade de pessoas e objetos próximos, e tratamento de mudanças nesses objetos.
A definição de contexto como localização e identificação de pessoas próximas do usuário, controlando informações de hora, período e temperatura do ambiente, é definida por.
Outra definição sobre contexto seria a localização e identidade do usuário e de objetos, informações físicas do ambiente e tempo.
De entre as definições existentes, a mais abrangente é fornecida em ¸ onde contexto é qualquer informação que possa ser utilizada para caracterizar a situação de uma entidade.
Entidade é uma pessoa, um lugar, ou um objeto considerado relevante para a interação entre um usuário e uma aplicação, incluindo o próprio usuário e a aplicação.
Por ser a mais abrangente e referenciada na literatura, essa definição será utilizada no decorrer deste trabalho quando forem usadas as palavras contexto ou informação de contexto.
Sistemas pioneiros em ciência de contexto utilizavam informações de localização e identificação de pessoas, via sinais infravermelhos, para prover serviços úteis a usuários, como controle de luzes e temperatura de um dado ambiente e transferência automática de chamadas telefônicas.
Para obter informações de localização, aplicações mais recentes usam as facilidades providas por o sistema GPS (Global Positioning System) para prover navegação de carros em cidades e estradas.
O sistema GPS também tem sido utilizado em sistemas de guias turísticos inteligentes capazes de escolher um vídeo ou áudio para ser exibido de acordo com informações de localização.
Porém, há muitas outras informações contextuais além de localização e identificação de pessoas e objetos.
As maiorias dos sistemas cientes de contexto ainda não incorporam noções de tempo, história, e outras pessoas além de o usuário, bem como informações disponíveis nos ambientes.
Alguns autores sugerem cinco dimensões para especificação e modelagem de informações de contexto,:
Who (identificação):
Seres humanos realizam suas atividades e recordam de fatos passados com base na presença de as pessoas que os vivenciaram.
Sendo assim, o sistema deve prover informações de contexto de todas as pessoas envolvidas numa determinada atividade;
Where (localização):
Assim como as informações de identificação, informações de contexto de localização têm sido muito utilizadas em sistemas cientes de contexto.
As pesquisas mostram um interesse particular na utilização dessa informação contextual associada a outras dimensões, por exemplo, a dimensão temporal para explorar a mobilidade de usuários ao longo de o tempo;
When (tempo):
Informações temporais têm sido usadas para indexar registros capturados ou para informar por quanto tempo um usuário esteve numa determinada localização.
Porém, o conhecimento dessas informações permite fazer inferências ajudando a interpretar as atividades humanas e estabelecer padrões de comportamento.
Por exemplo, se uma pessoa idosa passa muito tempo num banheiro, de forma incomum segundo seu histórico de atividades, há fortes indícios de ela tenha sofrido uma queda e precise de ajuda;
What (atividade):
O objetivo é obter informação, normalmente via sensores, que possibilite interpretar o que o usuário está fazendo.
Em sistemas onde várias atividades podem ser desenvolvidas, identificar o que um usuário está fazendo num determinado momento pode ser uma tarefa complexa;
Why (intenção):
Tão difícil quanto perceber o que o usuário está fazendo, é entender o porquê de sua ação.
Interpretar informações de contexto que possam caracterizar o estado de uma pessoa talvez seja o maior desafio da computação ciente de contexto.
Geralmente, as informações de contexto que exprimem a atividade e a intenção do usuário são obtidas por combinação de outras informações de contexto (ex_ Localização, identificação, tempo), ou via sensores como aqueles para medição de temperatura corporal, entonação vocal, batimento cardíaco e pressão arterial.
Segundo, contexto também pode ser classificado como:
Estático: Contexto estático corresponde ao grupo de informações que permanecem fixas durante o tempo de vida da entidade, como números de CPF e RG de uma pessoa.
Todas as outras classes de contexto são dinâmicas.
Dinâmico: Informações de contexto dinâmicas podem ser de três tipos de sentido (do inglês sensed), explícito e interpretado.
As informações de contexto dinâmicas sentidas são aquelas capturadas por meio de sensores físicos e lógicos, como localização de uma pessoa e nível de umidade de um ambiente.
Informações de contexto dinâmicas explícitas são aquelas fornecidas explicitamente por o usuário, como sua senha de acesso ou itens de sua agenda particular.
A classe de informações dinâmicas interpretadas refere- se aos contextos obtidos de um ou mais contextos por meio de uma regra de interpretação que varia de uma simples condição até algoritmos de Inteligência Artificial mais complexo.
Temperatura anormal ou relação de proximidade de entidades são exemplos de contexto dinâmico interpretado.
Dey sugere sete requisitos que um software de computação ciente de contexto deve possuir para facilitar sua utilização, conforme descrito nas seções seguintes.
Provavelmente um dos requisitos mais importantes de um software ciente de contexto é a existência de mecanismos que permitam que uma aplicação especifique quais contextos ela tem interesse (ex:
Monitoramento da localização do usuário) e que ações devem ser tomadas quando determinado contexto for obtido.
Por exemplo, ao monitorar a localização de um usuário, uma aplicação pode transferir chamadas telefônicas para o telefone celular do mesmo quando este não estiver em seu local de trabalho.
A carência de uma forma padrão para capturar e tratar informações de contexto dificulta a exploração desse tipo de informação em ambientes de computação ubíqua.
Existem duas maneiras comuns de tratar contexto:
Associar drivers de sensores diretamente nas aplicações;
Utilizar servidores que omitam os detalhes dos sensores, sem que a aplicação precise se preocupar com detalhes de baixo nível;
Quanto a a utilização da informação de contexto, a consulta direta a um sensor é apropriada quando o contexto é necessário somente uma única vez.
Quando o contexto houver necessidade de uso repetidas vezes, o mecanismo de publish/ subscribe é mais apropriado, pois uma aplicação pode definir um conjunto de condições que determinam quando ela quer ser notificada.
Existe a necessidade de estender os mecanismos de notificação e de consulta de sistemas cientes de contexto para permitir que estes recuperem contextos de ambientes distribuídos.
Informações de contexto podem passar por muitas camadas de software antes de serem entregues à aplicação devido a a necessidade de abstração (interpretação) de mais alto nível.
Por exemplo, uma aplicação de captura de informações de reunião precisa ser notificada quando uma reunião estiver para acontecer:
Em um nível mais baixo, informações de localização e identificação podem ser interpretadas para determinar as várias pessoas se encontram.
Em um nível mais alto, esta informação pode ser combinada com registros da agenda dessas pessoas para determinar se a reunião está acontecendo.
Para o desenvolvedor da aplicação, o uso de várias camadas deve ser transparente.
Para que isso aconteça, o contexto deve ser interpretado antes de ser usado por a aplicação.
Para que a interpretação seja facilmente reutilizada por várias aplicações, ela precisa ser fornecida por um framework.
Caso contrário, as aplicações deverão re-programar o mecanismo de interpretação que lhes é necessário.
Sensores utilizados para capturar informações de contexto não estão, em sua maioria, alocados no mesmo computador em o qual as aplicações cientes de contexto estão sendo executadas.
Geralmente, os sensores encontram- se fisicamente distribuídos no ambiente físico.
A comunicação distribuída deve ser transparente tanto para os sensores quanto para as aplicações no sentido de que o desenvolvedor de aplicações não necessite especificar e implementar um protocolo de comunicação e um esquema de codificação e decodificação para a transmissão de informações de contexto.
A busca contínua de componentes de captura de informação de contexto devido a o fato de uma aplicação poder solicitar uma informação de contexto a qualquer momento será necessária aos componentes que capturam contexto sejam executados de forma independente das aplicações, e também que estejam sempre disponíveis.
Portanto, os componentes devem ser executados continuamente para permitir que aplicações os consultem sempre que necessário.
Em uma conferência, por exemplo, componentes de captura de áudio podem ser requisitados continuamente para o registro de fluxos das inúmeras atividades executadas em paralelo (ex:
Palestras e tutorais).
Devido a a necessidade da disponibilidade constante dos dados, faz- se necessário manter históricos de informações de contexto.
Um histórico de contexto pode ser usado para estabelecer tendências e predizer futuros valores de contexto.
Sem o armazenamento persistente de contextos, esse tipo de análise não poderia ser realizado.
Componentes de captura devem adquirir informações de contexto mesmo quando nenhuma aplicação está interessada nas informações de contexto disponíveis naquele momento.
Pois, essas informações de contexto capturadas, podem ser utilizadas por uma aplicação que necessite do histórico de um dado de contexto, por exemplo, o histórico de localização de um usuário para predizer sua localização futura.
Para a utilização de contexto num ambiente pervasivo distribuído, torna- se indispensável o conhecimento de parâmetros e definições, que auxiliam no desenvolvimento de aplicações para esses ambientes.
A tabela 4 descreve alguns parâmetros relacionados ao desenvolvimento de middleware que utilizam aplicações voltadas ao contexto.
Segundo, existem três parâmetros de comparação:
O custo computacional que o middleware introduz quais os paradigmas de comunicação que este disponibiliza e que forma de representação de contexto é empregada.
Para que uma aplicação possa se comunicar com dispositivos de captura de contexto (ex:
Sensores), esta deve saber que tipos de informações o dispositivo pode fornecer, qual a sua localização e qual o modo de comunicação suportado.
Para que a aplicação não precise se preocupar com esses detalhes, a infra-estrutura de software subjacente precisa fornecer suporte à descoberta de recursos.
Assim que uma aplicação é iniciada, ela deve especificar o tipo de informação de contexto de seu interesse.
Com isso, o mecanismo de descoberta de recursos se responsabiliza por encontrar componentes adequados e fornecer mecanismos de acesso.
Segundo, a possibilidade de utilizar recursos previamente (estaticamente) conhecidos, diretamente (sem envolver um catálogo), é fundamental para permitir que os recursos sejam descobertos e ligados dinamicamente.
As aplicações de interesse operam em ambientes que se modificam constantemente e, para isso, precisam de um serviço de descoberta que localize dinamicamente instâncias de componentes e recursos que satisfaçam as suas necessidades.
Existem atualmente serviços que suportam a descoberta de recursos, em termos de topologia de rede ou localização.
Porém, não foram projetados para considerar especificamente informações contextuais.
Cada serviço, geralmente, possui um domínio de aplicação e uma linguagem de consulta específica.
Com o objetivo de cobrir estas lacunas, novas arquiteturas têm sido projetadas.
Uma proposta é o ONS, uma arquitetura para sistemas ubíquos e pervasivos, que provê às aplicações sensíveis ao contexto, identificação transparente de contexto e adaptação de serviços, independente de mudanças no seu contexto.
Outra proposta, Q-Cad, permite as aplicações pervasivas descobrirem e selecionarem recursos considerando o contexto corrente de execução e os requisitos de QoS.
Cita ­ se outro exemplo de trabalho, que discute a descoberta de recursos é o desenvolvido por.
Esse trabalho trata a descoberta de recursos através da arquitetura Pholo, que fornecendo suporte para o ambiente de execução do Holoparadigma.
O Holoparadigma é um modelo multiparadigma voltado para abstrair a modelagem de ambientes móveis e permitir representações mais similares ao mundo real.
Sua unidade de modelagem, o ente, permite o desenvolvimento de sistemas tanto centralizados como descentralizados e possui grande capacidade de mobilidade.
A arquitetura Pholo é dividida em cinco camadas:
Camada de rede, sistema operacional, camada de serviços, camada de execução e aplicações.
A camada de execução e a camada de serviços são as responsáveis por os serviços de computação pervasiva na arquitetura.
A primeira camada é responsável por a execução dos programas do Holoparadigma.
Essa camada é composta por dois serviços:
HoloVM e o HNS.
O HoloVM é uma máquina virtual que executa as aplicações, de forma distribuída, com suporte à comunicação entre entes, abstraindo toda a complexidade do desenvolvimento.
Já o HNS tem o controle de todos os entes em execução, através de uma estrutura em forma de árvore.
O objetivo é fornecer informações dos entes para as HoloVMs, como por exemplo, localização de um ente.
A camada de serviços é responsável por o fornecimento dos seguintes serviços:
Localização física, que informa a localização e aspectos de mobilidade dos entes;
Contexto para aquisição de informações sobre o mundo real;
Mobilidade, que consiste na movimentação de um dispositivo físico no espaço físico, na movimentação de um ente modificando o HNS e na migração de um ente (por exemplo, um serviço move- se de um dispositivo para outro);
Descoberta de serviços, que permite HoloVMs descobrirem servidores HNS e descoberta de serviços desempenhados por entes de uma aplicação.
Este capítulo descreve estudos sobre trabalhos desenvolvidos na área de computação ciente de contexto, apresentando as suas vantagens e desvantagens.
A seção 3.1 descreve sobre a Plataforma Inflaware.
A Seção 3.2 descreve sobre a arquitetura Mixis.
A Seção 3.3 apresenta o sistema Socam (Service-Oriented Context--Aware Middleware).
A Seção 3.4 apresenta o CybreMinder, uma ferramenta ciente de contexto.
A Seção 3.5 apresenta a arquitetura AROUND, que possui a característica de oferecer serviços baseados em escopo.
A Seção 3.6 apresenta o protótipo de um guia turístico para a cidade de Aalborg.
A Seção 3.7 descreve sobre o Flame2008, um sistema para integração de Web services com o intuito de obter ofertas significantes baseadas na situação e no perfil do usuário.
A Seção 3.8 apresenta a plataforma Nexus, que procura integrar vários modelos de contexto com o objetivo de construir um modelo global.
A Seção 3.9 apresenta um sistema de redirecionamento de mensagens telefônicas, o ICAMS.
A Seção 3.10 apresenta o FieldMap, uma ferramenta que permite adicionar comentários em mapas apresentados em dispositivos móveis.
A Seção 3.11 apresenta um sistema de monitoração de arritmia, denominado AMS (Arrhythmia Monitoring System).
Por fim, a Seção 3.12 apresenta uma comparação entre as ferramentas.
Há diversos projetos em andamento, Filho apresenta uma visão geral da plataforma Infraware, um middleware de suporte ao desenvolvimento e execução de aplicações móveis sensíveis contexto que está sendo concebido no âmbito dos projetos DBMWare.
A plataforma Infraware é visualizada na figura 5, é um middleware baseado em Web Services com suporte arquitetural para o desenvolvimento, construção e execução de aplicações móveis sensíveis ao contexto.
A arquitetura conceitual da Infraware estende, em vários aspectos, entre os quais a Instituto e Ericsson.
A plataforma WASP, concentra- se na interface aplicação-plataforma, definindo uma linguagem para especificar como ela deve reagir a uma correlação de eventos.
Possui vários aspectos importantes;
Entretanto não trata da questão de descoberta de novos serviços.
Entre outras funcionalidades, uma característica marcante da Infraware é o uso de conceitos WebSemântica e ontologias nesta plataforma.
Ontologias especificam modelos formais extensíveis que descrevem não somente o domínio das aplicações, também é tratado os serviços.
Essa abordagem diferenciada provê meios de configurar as interações da aplicação-plataforma em tempo de execução.
A plataforma também pode ser customizada por a adição de novos serviços e entidades estendendo- se as ontologias.
Adicionalmente, a adoção de Web Services como tecnologia de distribuição permite que aplicações acessem os serviços oferecidos através de protocolos da Internet e facilita a inclusão de novos serviços à plataforma por terceiros.
Essa flexibilidade torna a Infraware adequada ao desenvolvimento de uma larga gama de aplicações.
O atendimento integrado a esse conjunto de fatores diferência a Infraware das demais arquiteturas investigadas.
Outra aplicação que pode ser utilizada é a Mixis (Mixed Interaction Space) que basicamente funciona como um localizador através de um telefone celular, podendo ser adaptável a outros dispositivos pervasivos como Pda e Smartphones.
Além de o sistema possuir diversos drivers armazenados localmente para dispositivos móveis, quando o sistema detecta um dispositivo novo faz o download de arquivos automaticamente através da webservice.
A mixis possui vários mapas que armazenados em sua base de dados, disponibilizando ao usuário a atualização dos mapas existentes ou incluir novos mapas.
A figura 6 apresenta um exemplo do diagrama genérico de funcionamento do sistema mixis.
Este exemplo visualizado na figura 6 exemplifica o funcionamento do diagrama de uso genérico proposto por a aplicação mixis, onde a entidade controler detecta o dispositivo móvel e envia para entidade que possui configurações de câmera caso seja um dispositivo novo.
Caso os dispositivos já estejam cadastrados na base de dados as informações são enviadas diretamente para a entidade de comunicação.
Esta entidade irá receber dados via Bluetooth ou GPRS, enviando os dados para a entidade de interface para que seja disponibilizado por o receptor.
No caso de dispositivo não estiver cadastrado, os dados serão enviados para a entidade image processing que por sua vez os remete a entidade que controla os modelos com drivers disponibilizados, enviando a uma entidade que controla a interface para o receptor.
O foco principal desta aplicação é o envio e recepção de imagens.
O transmissor pode ser usado para recepção de mapas de localização, onde o receptor pode interagir com o transmissor, este por sua vez irá visualizar a localização do receptor e orientar- lo sobre o caminho a prosseguir, ou visualização de imagens de Raios-X. Um médico poderá de outro local visualizar simultaneamente de diversas direções os dados da imagem sendo recebida a figura 7 pode- se observar algumas utilizações da aplicação.
É uma aplicação que pode ser utilizada ou adaptada a outras já existentes, visto que, essa não trata em especifico da questão de descoberta de serviços.
Caso houvesse um dispositivo móvel de maior tamanho de tela, a aplicação pode transferir os dados para a tela de maior tamanho, a fim de obter uma melhor visualização das imagens.
Socam (Service-Oriented Context--Aware Middleware) é uma arquitetura para a construção de um serviço móvel ciente de contexto.
O modelo do contexto é baseado em ontologia que provê um vocabulário para representar e compartilhar conhecimento de contexto num domínio da computação onipresente.
O projeto da ontologia do contexto é composto de dois níveis hierárquicos.
Um nível contém ontologias individuais sobre vários subdomínios, por exemplo, o domínio de uma casa, um escritório ou um veículo.
Um nível mais alto contém conceitos gerais sobre as outras ontologias, esse nível é chamado de ontologia generalizada ou ontologia de alto nível.
O domínio específico de uma ontologia pode ser dinamicamente re-alocado.
Por exemplo, quando um usuário deixa sua casa para dirigir um carro, a ontologia do domínio da casa será trocada automaticamente por a ontologia do veículo.
As arquiteturas Socam é composta por os seguintes elementos:·
Provedores de contexto:
Provêem uma abstração do sensoriamento de baixo nível.
Cada provedor de contexto precisa ser registrado num serviço de registro, o SLS (Service- locating service) para que outros usuários possam descobrir esses provedores.
Os provedores de contexto podem ser externos ou internos.
Os provedores de contexto externos obtêm o contexto de fontes externas, por exemplo, um serviço de informação do tempo ou um serviço de localização outdoor.
Os provedores de contexto internos obtêm o contexto diretamente de sensores localizados num subdomínio, como uma casa, por exemplo;·
Serviço de Localização de Serviço (SLS):
Permite a usuários, agentes e aplicações descobrirem e localizarem diferentes provedores de contexto;·
Interpretador de contexto:
Provê contexto de alto nível através da interpretação de contexto de baixo nível.
De essa forma, o interpretador também é tratado como um provedor de contexto e pode ser registrado no SLS.
O interpretador de contexto é dividido em reasoner e knowledge base (KB).
O reasoner tem a função de prover contexto de alto nível baseado no contexto de baixo nível e detectar inconsistência e conflitos na base de conhecimento.
KB provê um conjunto de API para que outros componentes possam consultar adicionar, remover ou modificar conhecimento de contexto, além de conter a ontologia de um contexto de um subdomínio e suas instâncias.
Essas instâncias podem ser especificadas por os usuários, no caso de contexto definido, ou adquirido de vários provedores de contexto;·
Serviços cientes de contexto:
São aplicações que fazem uso dos diferentes níveis da arquitetura Socam.
Os desenvolvedores dessas aplicações podem predefinir regras e especificar que métodos devem ser invocados quando uma condição for verdadeira.
Todas as regras são salvas num arquivo e pré-carregadas no reasoner.
Socam foi projetado como um serviço de componentes independentes que podem ser distribuídos numa rede heterogênea e podem se comunicar entre si.
Todos os componentes são implementados em Java.
Para a comunicação entre os componentes distribuídos é usado Java RMI, que permite objetos distribuídos invocarem métodos de outros objetos remotos.
A interação entre os componentes do Socam ocorre, resumidamente, da seguinte forma:
Um provedor de contexto pode adquirir dados sobre o contexto de vários sensores heterogêneos.
Diferentes provedores de contexto registram seus serviços no SLS.
As aplicações móveis ciente de contexto são capazes de localizar um provedor e obter dados sobre um determinado contexto.
O interpretador de contexto e o serviço móvel ciente de contexto também podem ser registrados no SLS, o diagrama hierárquico pode ser visualizado através da figura 8.
O modelo Socam segue uma arquitetura semelhante ao padrão Web Service, em a qual os serviços são registrados num diretório público e podem ser encontrados e utilizados por outros serviços.
Porém, a arquitetura não é independente de linguagem de programação, pois os componentes trocam mensagens usando Java RMI, tornando difícil a integração entre servidores heterogêneos.
Além disso, as regras de contexto devem ser carregadas previamente no sistema para que passem a funcionar.
CybreMinder é uma ferramenta ciente de contexto que ajuda a criar e gerenciar lembranças.
Uma lembrança é um tipo especial de mensagem que enviamos para nós mesmos ou para outros, para informar sobre atividades futuras que devemos tratar.
Por exemplo, um colega de trabalho nos envia uma mensagem (ou seja, uma lembrança) pedindo para levarmos uma cópia do trabalho para a próxima reunião.
O CybreMinder usa informações de contexto para informar o usuário sobre uma determinada lembrança.
Uma importante informação de contexto usado por a ferramenta é a localização.
A localização pode ser em relação a algum lugar ou em relação a a outra pessoa, por exemplo:
Lembrar de comprar um presente ao chegar a um determinado lugar, também quando estiver próximo de meu colega de trabalho, me avise de comentar sobre a reunião de trabalho.
O sistema foi implementado em Java e é dividido em duas partes principais:·
criar lembranças:
O CybreMinder apresenta uma interface semelhante ao de um e-mail, com assunto, corpo da mensagem, uma lista de outras pessoas a quem a lembrança interessa nível de prioridade, data e hora de expiração e a situação (contexto) que a mensagem deve ser entregue, por exemplo, o lugar e a hora;·
entregar lembranças:
A lembrança é entregue quando a situação (contexto) associada for satisfeita ou porque o tempo expirou.
O CybreMinder decide qual a melhor forma de entregar a mensagem ao usuário.
A forma de entrega default é mostrar a lembrança num visor disponível junto com um sinal de áudio, mas isso pode ser configurado por o usuário para cada lembrança.
A lembrança pode ser entregue via e-mail, celular, handheld, entre outros.
CybreMinder também permite fazer lembranças complexas, como por exemplo, Joana precisa fazer uma chamada telefônica para Pedro quando ela chegar ao seu escritório, quando ela tiver tempo livre na sua agenda e seu amigo não estiver ocupado.
Para criar esta situação, o usuário precisa criar três situações, são elas:
Joana está em seu escritório, o nível de atividade de Pedro está baixo e Joana tem pelo menos uma hora livre antes do próximo compromisso.
Os tipos de contexto percebidos por a ferramenta são:
Agenda do usuário, ambiente físico e social.
Além disso, a determinação de situação é complexa, ou seja, a forma que o CybreMinder utiliza para programar uma situação de contexto em que a lembrança deve ser entregue, não é fácil de ser usada por um usuário comum.
Para perceber o contexto associado com a lembrança, o CybreMinder usa o Contexto Toolkit.
O Contexto Toolkit é um software que ajuda a construir aplicações cientes de contexto.
Ele promove três principais conceitos para construir aplicações cientes de contexto:
Separar a aquisição de contexto do uso de contexto;
Agregação de contexto e interpretação de contexto.
Agregação e interpretação facilitam a aplicação a obter o contexto requerido.
De. Descreve o Contexto Toolkit consistindo em três blocos básicos:·
Widget: Agregador e interpretador de contexto que pode ser visualizado através da figura 9.
Widgets são responsáveis principalmente por coletar e encapsular informação sobre um dado contexto, como localização.
Os widgets também dão suporte a serviços que permitem afetar o ambiente, como por exemplo, controlar a intensidade de luz de um local de acordo com a luminosidade detectada por os sensores;·
agregação: Responsável por unir toda informação de contexto de uma entidade particular (pessoa, lugar ou objeto).
O interpretador de contexto é usado para abstrair ou interpretar o contexto.
Por exemplo, um widget pode fornecer um contexto de localização na forma de latitude e longitude, mas uma aplicação pode requerer a localização como o nome da rua.
Em a arquitetura, isso é realizado por os interpretadores de contexto.
O mecanismo de comunicação entre os componentes é XML sobre Http;
A arquitetura AROUND provê uma infra-estrutura de localização de serviços que permite as aplicações selecionarem serviços que são associados a uma determinada área espacial.
A principal diferença entre a arquitetura AROUND e as outras aplicações LBS é que ela utiliza dois modelos distintos de seleção de serviços:·
modelo baseado em distância.
Em este modelo, o cliente seleciona os serviços localizados dentro de sua região de proximidade, ou seja, um raio é criado ao redor de a posição atual do cliente e ele seleciona os serviços de seu interesse que estiverem dentro desse raio.
A desvantagem desse modelo é que quanto maior o raio, mais coisas que não são de interesse do usuário estarão dentro de sua área de proximidade;·
modelo baseado em escopo.
Em este modelo, cada serviço tem seu escopo associado a um espaço físico.
O cliente seleciona aqueles serviços que o escopo inclui em sua própria localização, isto é, o cliente é capaz de descobrir um serviço se o mesmo estiver localizado dentro de o escopo desse serviço.
Por exemplo, um servidor de mapas de municípios de um estado que é oferecido apenas naquela região coberta por os mapas.
Em a representação da figura 10, um cliente é representado por o circulo` C'e está dentro de os escopos em torno de o circulo central visualizado na figura 10, portanto, ele pode selecionar os serviços que são oferecidos nesses escopos.
Em o modelo baseado em distância, o foco está na localização do provedor de serviço, enquanto no modelo baseado em escopo, o foco está na área geográfica definida por o uso do serviço.
Estas diferenças fazem com que cada modelo seja o melhor para um determinado tipo de serviço.
O modelo baseado em distância é o mais adequado para serviços que tenham uma forte associação com um específico ponto no espaço, como por exemplo, um restaurante.
Por outro lado, o modelo baseado em escopo é o mais adequado para serviços que não têm uma ligação com um ponto específico no espaço, tais como, serviços de mapas e previsão do tempo.
O modelo baseado em escopo, representado por a figura 11, descreve o mecanismo utilizado por a arquitetura AROUND para associar serviços com localização.
O escopo de um serviço é registrado num conjunto de contexto de localização, escopos são definidos como ambiente, na figura 11 pode ser visualizado 8 ambientes e um controlador central definido por a letra c..
Em este caso, contexto de localização é uma representação simbólica de uma área num espaço físico, como por exemplo, um departamento de um campus universitário, um laboratório dentro de um departamento, uma praça pública, um bairro, etc..
Em a arquitetura AROUND, os contextos de localização podem ser ligados por relacionamentos uni direcionados, formando um grafo, onde o objetivo é aumentar o processo de descoberta de serviços.
Relacionamentos entre contextos estabelecem um mecanismo para a propagação de consultas de um contexto fonte para um contexto destino.
Em a arquitetura, existem dois tipos de relacionamentos:·
contido: Se refere à inclusão espacial de áreas dentro de a área de outro contexto.
A figura 12 apresenta um exemplo em que um serviço &quot;A «registrado no contexto &quot;Campus «está disponível em todo lugar porque todos os outros contextos estão contidos no contexto &quot;Campus».
Por outro lado, o serviço &quot;C «está registrado no contexto «Lab.
1», portanto, esse serviço está somente disponível neste contexto;·
adjacente: Expressa a proximidade espacial entre dois contextos de localização, por exemplo, os quartos de um edifício, onde cada quarto tem um contexto de localização.
Isso permite que usuários consultem serviços próximos mesmo estando fora de o escopo.
Quando o usuário, carregando um dispositivo com um cliente AROUND, se move para uma nova área, os serviços que estão registrados nessa área são descobertos e os ícones são mostrados na tela do dispositivo do usuário.
Este pode ativar um serviço clicando no ícone.
Por exemplo, um serviço de informação de ônibus que informa os ônibus que passam na rua onde o usuário está localizado e os pontos de ônibus mais próximos.
A principal desvantagem da arquitetura AROUND é que ela não leva o contexto do usuário em consideração ao apresentar os serviços.
Apenas a localização e o deslocamento do usuário são utilizados por a ferramenta para descobrir em que área de serviço ele está.
A comunicação entre os componentes é baseada em CORBA.
Online Aalborg Guide é um protótipo construído usando o framework baseado em LBS desenvolvido no departamento de ciências da computação da Universidade de Aalborg.
O framework é usado para implementar um guia on-line para turistas que visitam a cidade de Aalborg.
As características básicas da ferramenta são:
Permite ao usuário salvar os PoI para uso posterior, como o bookmark de um Web browser;
Permite ao usuário adicionar novos PoI, submetendo o nome e a descrição do mesmo;
O usuário pode adicionar novos comentários e fotos a um PoI já existente;
Os provedores podem enviar anúncios de acordo com as preferências e localização do usuário;
Permite ao usuário encontrar o menor caminho para um PoI;
Obter informações sobre outros usuários;
O usuário pode editar o seu perfil antes e durante uma viagem;
Serviço de mapas.
Um mapa do ambiente é exibido a toda hora com uma indicação da posição do usuário e os PoI mais próximos.
O Online Aalborg Guide usa uma mistura de tecnologia push e pull, como se pode perceber por as características anteriores.
Por exemplo, os PoI mais próximos são continuamente atualizados e mostrados na tela do celular.
De essa forma, o usuário não precisa interagir com o dispositivo para ver que PoI estão próximos.
Porém, se o usuário deseja obter mais informações sobre um PoI, ele deve fazer uma requisição ao servidor e a informação é apresentada na tela do dispositivo.
O protótipo desenvolvido utiliza o celular Nokia 7650 conectado via Bluetooth a um Emtac GPS.
O programa que é instalado no celular é chamado de GPSOne.
como se pode perceber na figura 13, o Emtac GPS constantemente provê coordenadas ao celular.
Quando o celular recebe as coordenadas, o GPSOne começa a prover serviços LBS para o usuário.
O celular se conecta ao servidor através do protocolo Http.
Se o GPSOne precisa fazer o download de algum mapa raster, uma conexão ao servidor de mapas é estabelecida e o mapa é retornado no formato JPEG.
O protótipo implementado contém apenas as características que foram listadas anteriormente.
Mapas rasters são os dados mais estáticos na aplicação LBS.
Porém, esses mapas demandam uma maior capacidade de armazenamento.
Por causa de o pequeno poder de armazenamento do terminal do cliente, não é possível carregar todos os mapas.
Em o protótipo, um cachê de mapas tem sido implementado para carregar unicamente os mapas necessários dependendo da localização do usuário.
Somente os mapas ao redor de o usuário são baixados do servidor.
Depois de certo tempo, a memória do dispositivo do usuário estará cheia devido a a quantidade de mapas que foram baixados.
Uma estratégia adotada para resolver essa situação é apagar os mapas menos recentemente usados.
Flame2008 é um protótipo de uma plataforma de integração para Web services inteligentes personalizados para as olimpíadas de 2008 em Beijing.
A principal idéia desse projeto é, através de um dispositivo móvel, realizar` push' de ofertas significantes baseadas na situação atual e no perfil do usuário.
Todas as dimensões do contexto (localização, calendário, perfil, etc.) são representadas através de ontologias.
Com agregação dessas dimensões, o Flame2008 define situações que são registradas no sistema.
Por exemplo, através de uma notação em F-Logic, é possível registrar a seguinte situação:
WatchingCompetition: BeingAtEvent[ position\&gt; loc&amp; Stadium;
LocalAction\&gt; act&amp; AnyAction;
UserState\&gt; cal&amp; Leisure].
Este exemplo descreve a situação &quot;assistindo a uma competição».
O usuário se encontra nessa situação se estiver localizado no estádio executando qualquer ação e na sua agenda aquele horário está marcado como hora de lazer.
O Flame2008 pode ser composto de várias ontologias, como mostrado no exemplo anterior, pois,` loc',` act 'e` cal' são namespaces para diferentes ontologias.
Definida a situação em que o usuário se encontra e o seu perfil, o sistema se encarrega de buscar serviços que se encaixam nesses parâmetros.
O perfil é composto por interesses, preferências e dados pessoais do usuário.
Interesses são informações estáticas que não se alteram com a mudança de contexto, por exemplo, se o usuário possui interesse por música clássica e obras de arte.
As preferências podem depender da situação, por exemplo, um usuário em sua cidade pode preferir comida italiana quando vai a um restaurante, mas quando ele está viajando pode preferir experimentar a comida local.
Cada usuário pode manter seu perfil através de um conjunto de propriedades que o caracterizam.
Além disso, há sensores, que obtêm informações do ambiente atual do usuário (localização e tempo).
Os resultados são instâncias de uma ontologia de alto nível que são usadas para implicitamente construir um &quot;perfil de situação».
Ele é semanticamente comparado com os perfis de todas as situações conhecidas por o sistema, e implicitamente comparada com todos os perfis de serviços registrados.
A desvantagem é que ele não trata o relacionamento com outros usuários, ou seja, o sistema não monitora o contexto de contatos do cliente.
Além disso, a busca por produtos e serviços é baseada apenas na categoria do produto e no perfil do usuário, não se importando com outras características do produto ou propriedades do serviço.
Nexus é uma plataforma com o propósito de dar suporte a todos os tipos de aplicações cientes de contexto através de um modelo de contexto global.
Servidores de contexto podem ser integrados à plataforma para compartilhar e usufruir das informações providas por os outros servidores de contexto.
Esses servidores de contexto são chamados de modelos locais (ou modelos de contexto).
O modelo local contém diferentes tipos de informações do contexto.
Por exemplo, um modelo que representa as estradas, um modelo que representa as casas numa cidade, um modelo que representa as pessoas, entre outros.
No caso de o modelo de pessoas, são usados sensores para manter os dados atualizados no modelo.
Os servidores de contexto (context servers) presentes na camada de serviço (service tier) armazenam os modelos locais.
Para ser integrada a plataforma, os serviços devem seguir certa interface descrita em XML e registrada num serviço chamado Área Service Register (ASR) para que possam ser descobertos dinamicamente.
A camada de federação (federation tier) funciona como um mediador entre as aplicações e os servidores de contexto.
Ele possui a mesma interface dos servidores de contexto, mas não armazenam modelos.
Ele analisa a consulta da aplicação, determina os servidores de contexto que podem responder a consulta e distribui a consulta para esses serviços.
O nodo Nexus também possui a capacidade de adicionar serviços que possuem suas próprias interfaces e que usam os modelos de contexto para processar informação e fornecer- la para as aplicações.
A figura mostra quatro tipos de serviços da plataforma Nexus:
Em o topo da arquitetura estão as aplicações cientes de contexto que podem usar a plataforma de três formas diferentes:
1) aplicações podem enviar consultas e obter informações sobre o ambiente ao redor, como por exemplo, PoI e amigos próximos, etc. 2) aplicações podem registrar um evento para receber uma notificação quando certo estado do mundo ocorrer;
3) aplicações podem usar os serviços do nodo Nexus, como os serviços de navegação, para enriquecer as funcionalidades da aplicação.
A plataforma Nexus possui uma arquitetura semelhante ao padrão Web service.
Os servidores de contexto funcionam como provedores de serviços que são registrados num serviço de diretório.
O ASR funciona como um serviço de diretórios semelhante ao UDDI no padrão Web service.
Porém, na plataforma Nexus, a descoberta de serviços é realizada por o nodo Nexus na camada de federação e não por as aplicações como no padrão Web service.
A plataforma Nexus monitora o espaço físico, ou seja, o contexto do ambiente.
O Nexus é capaz de transmitir anúncios para vários usuários numa determinada área, mas não faz busca automática de produtos ou serviços de interesse do usuário.
Além disso, a plataforma não é capaz de deduzir informação a partir de os dados do contexto.
Icams. É um sistema cliente-servidor que usa celulares para tornar a comunicação mais eficiente através de informações de localização e agenda dos usuários.
O sistema usa o serviço de localização PHS (Personal Handphone System) oferecido por a companhia de telecomunicações japonesa NTT De o CoMo.
O celular atualiza a sua localização a cada 15 minutos e tem uma precisão de 100 metros.
Basicamente, o ICAMS auxilia no redirecionamento de mensagens telefônicas ou e-mail.
Os usuários do sistema ICAMS são amigos que desejam compartilhar localização e outras informações.
Quando um usuário acessa o servidor, um script PHP (Hypertext Preprocessor) consulta o banco de dados e retorna um arquivo CHTML chamado Top Page.
Este arquivo apresenta os outros usuários do sistema (os amigos) em ordem de proximidade.
Ícones e setas são usados para indicar se um amigo está se movendo e em que direção em relação a o usuário.
Quando o usuário clica no nome de um amigo no Top Page, um segundo PHP consulta o banco de dados e retorna um CHTML chamado MemberPage.
Essa página contém mais detalhes sobre aquele amigo:
Nome, o último local em que esteve, se o amigo está parado ou se movendo, à distância em relação a o usuário e as opções de contato (telefones, e-mails e outros).
O usuário pode clicar no número de telefone ou no e-mail para estabelecer uma comunicação.
Se o amigo estiver em sua casa, por exemplo, o telefone residencial é listado primeiro no MemberPage.
Mas se o amigo estiver numa reunião no trabalho, o seu e-mail de escritório será o primeiro na lista.
Através do Web browser do celular, o usuário pode entrar com sua programação (agenda) selecionando o dia, hora e conteúdo da programação.
Em seguida, o usuário pode ordenar os contatos para a programação criada em ordem de preferência.
De essa forma, seus amigos saberão qual a melhor forma de entrar em contato para cada situação do dia.
Esse sistema possui algumas desvantagens:·
baixa precisão em relação a a localização;·
informações do contexto que são analisadas por o são localização do usuário e sua agenda;·
o redirecionamento das mensagens não é automático.
FieldMap é uma ferramenta escrita em Java para mostrar mapas e permitir anexar comentários.
Ela foi construída para ser usada em PDA's, desktops e laptops.
O usuário pode adicionar novos pontos de interesse, desenhar no mapa, marcar com pontos e polígonos e adicionar comentários escritos ou por voz para ajudar a recordar sobre informações do ambiente.
Pode- se perceber que esta ferramenta não faz qualquer análise do contexto do usuário.
Apenas a localização e o caminho percorrido por o usuário são mostrados no mapa para que ele possa se orientar.
Essa ferramenta é mais utilizada na área de pesquisa em a qual o ambiente está sendo estudado, como, por exemplo, na área de arqueologia.
O AMS (Arrhythmia Monitoring System) é um trabalho na área de tele medicina com o objetivo de prever ataques cardíacos conhecidos como arritmia.
O AMS coleta sinas de um ECG (eletrocardiograma) combinado com os dados de um GPS e os transmitem a uma estação remota para visualização e monitoração.
A arquitetura do sistema é composta dos seguintes componentes:·
wearable sever:
É um pequeno coletor de dados onde o paciente fica conectado.
Ele é composto por um ECG (eletrocardiograma) que coleta as atividades elétricas do músculo cardíaco através de biosensores;·
central server:
É um pequeno servidor localizado próximo a o cliente.
Ele executa várias funções:
Compressão, tratar sinais do GPS e detectar sinais de arritmia rudimentares.
O central server é geralmente um dispositivo móvel como um Palm, que conectado ao wearable server e a um GPS, transmite esses sinais para o call center;·
call center:
É através de o qual um profissional médico monitora o sinal ECG e transmite um alerta caso detecte alguma situação de risco.
Os dados dos biosensores são armazenados num buffer e a cada 20 segundos, esse buffer é transmitido para o call center.
O sistema também possui um botão de &quot;pânico «por o qual o cliente pode enviar um alerta para o sistema central que se encarrega de chamar um serviço de emergência passando a localização do usuário.
As ferramentas estudadas neste capitulo foram comparadas conforme as características funcionais de um sistema pervasivo capaz de analisar o contexto, tanto do usuário quanto do ambiente.
A escolha utilizada para comparar as principais características entre ferramentas basearam- se em autores citados nos trabalhos descritos no capitulo 3 são elas:
1) Monitoração em tempo de execução:
Para perceber alterações no contexto, é indispensável que as informações obtidas dos sensores sejam as mais atuais possíveis;
2) Monitoração de vários tipos de contexto:
As ferramentas foram comparadas conforme a classificação do contexto descrita na seção 2.5.4;
3) Capaz de monitorar o contexto de terceiros:
Além de monitorar o próprio contexto, um sistema ciente de contexto deve ser capaz de perceber o contexto de terceiros (parentes e amigos);
4) Sistema SIG onipresente:
Essa característica permite que o usuário visualize a sua localização, a localização de seus contatos e os PoI através de um mapa digital disponível em seu dispositivo móvel;
5) Análise do perfil do usuário para o fornecimento de mapas personalizados:
Através da análise do perfil do usuário, informações sobre suas preferências podem ser extraídas para construir um mapa com os PoI que estejam de acordo com esse perfil;
6) Anúncio de produtos ou serviços:
Esta característica faz parte do contexto do ambiente e permite com que o usuário receba anúncios de produtos ou serviços que estejam próximos de sua localização.
7) Orientado a serviço:
Em o âmbito desse trabalho, essa característica não é tão importante quanto a as anteriores, porém ela permite que novos serviços heterogêneos sejam adicionados a arquitetura de forma padronizada, acrescentando mais funcionalidades ao sistema.
A tabela 5 apresenta um estudo comparativo entre as ferramentas que possuem as características citadas anteriormente.
Os campos marcados com` SIM' indicam que a ferramenta possui a determinada funcionalidade.
Os campos sem marcação indicam que a ferramenta não possui a funcionalidade especificada.
Quando alguma ferramenta possui alguma funcionalidade, mas com restrições, essas restrições são descritas no campo correspondente na tabela, segundo, estas são funcionalidades fundamentais que uma plataforma pervasiva deva possuir e algumas dessas características também serão utilizadas no modelo proposto.
Em este capítulo, foram descritos alguns sistemas cientes de contexto, como funcionam, suas principais vantagens e desvantagens.
Em seguida, uma tabela comparativa mostra quais os sistemas apresentados possuem as funcionalidades desejáveis para um sistema ciente de contexto capaz de monitorar o contexto dos usuários e realizar pesquisas por produtos dinamicamente.
O modelo de descoberta utilizado neste trabalho tem por objetivo atender a plataforma alvo num ambiente pervasivo, disponibilizando quais serviços estarão disponíveis no dispositivo do usuário.
Esse modelo é voltado para aplicações genéricas, podendo ser utilizado em diferentes cenários, tais como:
Bibliotecas onde os usuários poderiam efetuar consultas à base de dados locais sobre os livros disponíveis e localizar em que estante se encontra, através de imagens visualizadas.
CTI de hospitais, detecção de aluno em campus universitário, entre outras adaptações e utilizações em plataformas pervasivas de uso genérico.
O modelo de descoberta de serviço proposto nesse trabalho visa fornecer o desenvolvimento de um gerenciador de serviços a uma plataforma existente.
Esse modelo auxiliará no funcionamento do projeto final da plataforma pervasiva.
Essa plataforma tem como objetivo integrar dispositivos eletro-eletrônicos num ambiente pervasivo fornecendo os serviços existentes na rede pervasiva para os dispositivos integrados, além de disponibilizar os serviços desses dispositivos para a rede.
Além disso, essa plataforma deve fornecer os serviços e recursos necessários para a computação pervasiva, adapta qualquer dispositivo eletro eletrônico a um ambiente pervasivo, onde essa plataforma é capaz de disponibilizar os serviços e recursos desse dispositivo para todos os outros dispositivos e servidores conectados a rede pervasiva.
A plataforma HW/ SW é composta por quatro camadas, conforme a figura 15: Camada física, camada SO, middleware e camada de aplicação.
A camada física visa o tratamento dos dispositivos físicos e é implementada em HW.
Essa camada é dividida em quatro componentes:
Unidade de Rede, utilizada para conectar a plataforma na rede pervasiva;
Unidade de Funcionalidade Específica, utilizada para auxiliar e controlar a funcionalidade eletroeletrônica do dispositivo;
Interface E/ S, utilizada para a comunicação e interface com os usuários, ambientes e dispositivos;
Unidade de Processamento, unidade responsável gerenciamento e execução das aplicações e das outras unidades.
A camada SO tem como objetivo tratar as funcionalidades de um sistema operacional para o sistema embarcado.
É dividida em duas subcamadas, são elas, subcamada de Device Drivers que gerência os componentes da camada física e subcamada do Sistema Operacional Embarcado que gerência as tarefas da aplicação que executa no dispositivo e determina os serviços disponibilizados por o mesmo, além de tratar as limitações do sistema.
O Middleware constitui um conjunto de componentes necessários para auxiliar a integração do dispositivo com a rede pervasiva e disponibilizar os serviços necessários que compõem o middleware da arquitetura.
Essa camada é formada por seis componentes básicos:
Módulo de Comunicação, que integra o dispositivo na rede e gerência a comunicação do dispositivo com outros dispositivos;
Gerenciador de Serviços que fornece gerenciamento dos serviços e recursos desse dispositivo para a aplicação pervasiva;
Unidade de Reconfiguração que auxilia a arquitetura SW na adaptação de novos componentes SW;
Sistema de Autenticação e Controle de Segurança que ajuda na segurança do ambiente, fornecendo serviços de autenticação;
Auxiliar de Contexto que auxilia na detecção de contexto a arquitetura;
Monitor que fornece o monitoramento do dispositivo para a aplicação, informando erros e problemas.
A camada Aplicação é um fragmento das aplicações que executam no ambiente específica para o dispositivo embarcado.
Um exemplo de aplicação seria disponibilizar os serviços de uma cafeteira para o ambiente pervasivo.
O modelo proposto divide- se em dois níveis.
O nível interface consiste num protocolo de descrição de recursos/ serviços, usando XML, através de o qual algumas aplicações relacionadas ao contexto foram descritas na arquitetura desenvolvida por.
Em uma primeira análise o sistema solicitava login e senha do usuário, esse login e senha funcionariam como um arquivo cliente instalado no dispositivo do usuário, contendo também o Id do usuário.
Através do Id o sistema terá acesso ao cadastro &quot;descrição «do dispositivo e quais recursos desse dispositivo estarão disponíveis para os demais usuários da rede pervasiva.
Após o login no sistema, a plataforma existente terá a informação sobre a localização dos usuários e seus dispositivos com os recursos/ serviços disponíveis, através do registro das informações do ambiente onde foi efetuado.
Entretanto, segundo o acesso a dispositivos pervasivos através de mecanismos de login e senha, além de ter uma considerável perda de desempenho, devido a o fato da conexão e desconexão constante ao sistema, faz surgir à necessidade de interação maior do usuário.
Ficando fora de o escopo da computação pervasiva, onde o acesso tende a ser imperceptível ao usuário segundo A figura 16 tem por objetivo mostrar um exemplo do funcionamento de fluxo de dados entre os diferentes controles de serviços.
Onde primeiramente o dispositivo é detectado por o sensor da plataforma existente, gerando um fluxo de dados que é detectado por a descoberta de serviço (Ds).
O módulo (Ds) Recebe informações do dispositivo (Di), consulta à tabela de dados local (Ts) para verificação do cadastro do dispositivo.
Se o dispositivo é cadastrado no sistema, essas informações são processadas e enviadas ao servidor de contexto (SC), no servidor de contexto é realizada uma verificação dos serviços disponíveis por o dispositivo em questão e também é feita a atualizado do status no sistema, sobre quais dispositivos e serviços estão disponíveis.
Após essa atualização, o servidor de contexto retransmite para módulo de descoberta serviços às informações para serem enviadas ao modulo tabela serviços (Ts), a fim de que as informações estiverem disponibilizadas localmente, e também é enviado um aceite ao dispositivo solicitante, disponibilizando o seu acesso ao sistema.
Em o modelo proposto, o gerenciador de recursos possui diversas tarefas para realizar e é responsável tanto por a requisição dos serviços quanto para o atendimento de uma solicitação.
Para a requisição dos serviços, esse componente ainda deve fazer a busca e/ ou descoberta de serviços e a solicitação do serviço.
Já para o atendimento de uma solicitação externa, o gerenciador de serviços fica aguardando por uma solicitação.
A o receber a solicitação do recurso, ele passa a solicitação para o módulo dispositivo que busca a localização do recurso e o local com a descrição do mesmo.
Também será realizados controle com o histórico de utilização do recurso, e principalmente o controle do tempo de utilização através da classe histórico do recurso com hora inicial e hora final de uso do recurso solicitado, bem como o controle da sua localização.
A figura 17 apresenta o diagrama de classes do gerenciador de serviços.
A classe Usuário faz a solicitação de um pedido de registro do dispositivo no ambiente pervasivo.
A classe dispositivo é responsável por solicitar e buscar a localização com a descrição e o tempo de utilização do dispositivo no sistema.
A classe Localização possui os dados da localização do recurso e informações referente a o tempo de uso para cada recurso solicitado que é controlado através da classe Local.
A classe local armazena informações sobre a localização do recurso solicitado.
A classe Recurso possui a descrição dos recursos de cada dispositivo e por fim, a classe histórico recurso, que possui a finalidade de armazenar e controlar o tempo e localização dos recursos.
Pode- se visualizar na figura 18 o diagrama de classes de acesso ao sistema, quando o usuário adentrar no ambiente seu login é feito por o sistema através do cadastro do dispositivo que o mesmo possui.
A localização do usuário é registrada no local onde foi efetuado o login registro do usuário, caso o usuário troque de localização o sistema efetuará o registro de saída e entrada do ambiente, o fluxo de seqüência dessas informações foram descritos na seção 4.6.
Em a figura 19 é exemplificado o fluxo de dados relativos à seqüência em que as informações se relacionam de acordo com o proposto.
Usuário chega ao ambiente;
O sistema detecta a presença do usuário no ambiente local;
As informações são repassadas para a plataforma pervasiva, que por sua vez;
Solicita informações sobre o dispositivo cadastrado no sistema;
As informações são repassadas e processadas para o servidor de contexto;
As informações contextuais são retornadas para a plataforma;
De acordo com as informações de contexto a plataforma monta e armazena as informações do serviço disponível localmente.
A montagem descrita no ultimo fluxo de dados gerados por o modelo de seqüência é realizada localmente, podendo ser utilizado o modelo descrito por, ou um pc com o sistema instalado.
Em o caso outro usuário entrar no mesmo ambiente local, exemplo, numa mesma sala n usuários o tratamento é realizado por a plataforma do ambiente local, exceto quando for solicitado informações de recursos que não estão disponíveis localmente.
Em este caso a plataforma do ambiente local gerara um fluxo de solicitação de informações ao servidor de contexto, o mesmo retorna as informações contextuais do sistema.
Em este capitulo será descrita a aplicação, as telas geradas por o sistema e os logs gerados na validação e funcionamento do sistema.
O modelo proposto é uma aplicação distribuída que necessita de muitos recursos para atender as suas funcionalidades e suas finalidades.
Uma das finalidades dessa aplicação é atender inúmeros usuários, permitindo o cadastro de seus dispositivos e seus recursos.
A segunda finalidade é permitir alta interatividade com esses usuários, disponibilizando diversos recursos para fazer o cadastro e a visualização de suas tarefas.
Essa finalidade tem como proposta atender o requisito onipresença.
A terceira funcionalidade do modelo proposto é compartilhar recursos com outros usuários.
E por fim, a última finalidade é fornecer o rastreamento e a localização do usuário, para auxiliar- lo na descoberta de recursos presentes no mesmo ambiente.
Também poder buscar através do gerenciador de recursos a disponibilidade em outros ambientes, baseado nessas funcionalidades será apresentado um cenário para essa aplicação nas seções posteriores.
Esse cenário mostra a seguinte situação envolvendo a computação pervasiva no sétimo andar do prédio 32 &quot;Informática da PUCRS «onde há os gabinetes de professores, baias de estudantes, laboratórios de pesquisas GAPH e o GSE que são locais que estão no mesmo andar são todos ambientes distintos.
Podendo ocorrer à seguinte situação, baseando- se no modelo proposto e descrito na seção 4.2, que pode ser visualizado na figura 16 da mesma seção:
Entrada no Ambiente.
A o entrar num dos ambientes citados, o aluno será identificado por o sistema através do modulo (Di), descrito na seção 4.2;
Usuário. O usuário poderá ter um computador como dispositivo de uso cadastrado no ambiente local, e estar utilizando, disponibilizando, ou apenas possuindo vários outros dispositivos no mesmo ambiente, módulos (Ds), (SC) e (Ts);
Detecção Usuário. Após a entrada do usuário no ambiente o sistema efetuará a detecção do dispositivo cadastrado e os recursos relacionados ao mesmo, esse tratamento é realizado por o módulo (Ds), descrito na seção 4.2;
Mudança de Acesso.
Caso esse usuário resolva trocar seu dispositivo com um colega, além de as características do equipamento poderia haver mudanças também no tipo ou quantidade de recursos e serviços disponibilizados, surgindo assim à necessidade de criação e gerenciamento de acesso no sistema para realizar essas alterações.
Esse tratamento é realizado por o módulo (SC), descrito na seção 4.2.
Embora, tais funções de cadastro de usuários e dispositivos competem somente ao administrador do sistema;
Disponibilidade. O usuário poderá através do sistema verificar e utilizar os serviços disponíveis no mesmo ambiente, como exemplo, um recurso tocar som pode estar disponível no dispositivo no mesmo ambiente, essa funcionalidade se adaptaria perfeitamente ao modelo proposto por.
O modelo proposto pode adaptar- se a essa aplicação utilizando os módulos descritos na seção 4.2.
Inclusive com a utilização do módulo Ws em caso de utilização de ambientes diferentes, através da disponibilização de serviços de tocar um som de aviso no ambiente onde o usuário se encontrar, devido a a descoberta de serviços e recursos proposta por esse trabalho e tratada através do modelo descrito na seção 4.2.
Em esta seção serão apresentadas as telas geradas por o sistema na ocasião da simulação e validação da aplicação.
Podem- se observar telas relativas ao login e senha, que tem por finalidade o acesso do administrador do sistema para eventuais modificações ou alterações que podem ser feitas.
Após, é apresentado à figura 22 com o banco de dados vazio.
Esse banco de dados segue o modelo proposto na seção 4.2 representado por o módulo (SC).
Entre outras telas de cadastro de usuários, dispositivos e recursos.
E por fim, as telas com as validações geradas por o sistema proposto.
A figura 20 mostra a tela de login, tendo a finalidade apenas de entrada no sistema por um usuário que terá privilégios de administrador para o tratamento de eventuais contratempos que poderão ocorrer, por exemplo, um usuário poderá ter um dispositivo com vários tipos de serviços.
Entretanto, poderá optar em disponibilizar apenas alguns ou ter a necessidade de aumentar a quantidade de tempo disponibilizado para tal recurso ou serviço.
Após a entrada no sistema por o administrador, é disponibilizado o acesso a várias informações que podem ser visualizadas na figura 21.
Em esta tela o administrador poderá incluir, alterar e excluir um usuário, dispositivo, recurso, forma de comunicação ou local onde determinado dispositivo está sendo disponibilizado.
Em a figura 22, pode ser visualizado o banco de dados do sistema completamente vazio, somente com o cadastro das classes do sistema sem nenhum dado inserido.
Posteriormente, será apresentado nas demais figuras os acessos e controles do sistema, com as devidas inclusões, alterações.
Em o sistema proposto, essa tela é representada por o módulo (SC), módulo destinado ao armazenamento de dados referentes ao usuário no ambiente local.
A figura 23 apresenta a tela de cadastro do usuário, com a descrição dos campos nome e CPF do usuário.
Também através desta tela é possível inserir, editar e excluir dispositivo do usuário.
Em o sistema proposto essa tela é representada por o módulo (SC) que onde serão armazenados os dados referentes ao usuário.
Conforme a figura 24 pode- se visualizar a tela de cadastro de dispositivo que contém os dados com o tipo do dispositivo, um Id que deve ser único para cada dispositivo, marca e o modelo do mesmo, está tela também possui uma lista de recursos que podem inseridos, editados para posterior atualização e exclusão do mesmo, Em o sistema proposto essa tela é representada por o módulo (SC) onde serão armazenados os dados referentes ao usuário, os recursos serão armazenado no módulo (Cr).
A figura 25, mostra o cadastro de recursos que poderão ser inseridos o tipo de recurso de cada dispositivo, por exemplo, um celular pode conter como recurso câmera, filmadora ou outro recurso de acordo com a marca e modelo de cada aparelho.
Um notebook poderia ter como recurso uma quantidade x de armazenamento disponibilizado como recurso do próprio dispositivo e para uso de usuários do sistema, esse dispositivo poderia ter outros recursos como tamanho de tela maior do que normalmente um celular possui.
Através desse cadastro, também é possível especificar o tempo de uso para cada recurso, impedindo assim, que determinado usuário fique infinitamente utilizando determinado recurso.
O objetivo dessa seção é mostrar o funcionamento da aplicação, visualizar o comportamento do sistema e fornecer uma validação funcional, mostrando a realização do serviço através de telas e logs capturadas no sistema.
Para alcançar esse objetivo, seis passos são relacionados a essa aplicação para serem avaliados localmente:
Inicialização do ambiente e dos dispositivos;
Solicitação de acesso a aplicação por o administrador do sistema;
Simulação de entrada de um usuário no ambiente;
Atualização de local e data entrada no usuário no ambiente;
Verificação do dispositivo e recursos disponibilizados;
E verificação do tempo Maximo de uso de cada recurso.
Em cada simulação, serão analisado todas passo a passo as operações realizadas entre os usuários, dispositivos e recursos, onde em cada passo da simulação.
Em a figura 26, observar- se, passo 1, o console da aplicação informando que não há usuários no sistema, esse passo 1 refere- se ao log gerado após a entrada do administrador no sistema.
Quando o sistema é inicializado por o administrador, é informado que não há usuários conectados, observar- se também no log a data e horário em que foi realizado o registro.
O acesso por o administrador pode ser visualizado por o passo 2 da mesma figura 26 onde é informada a validação do login e senha, na seqüência as funções habilitadas para utilização do sistema que são mostradas, inserir, altera, exclui, sair.
Essas descrições podem ser visualizadas de acordo com as figuras 20 e 21, pode- se visualizar também o ambiente em o qual o administrador terá acesso.
Também é mostrado no log o horário que o sistema foi inicializado e posteriormente o log com horário e dados relativos a usuário conectados ao sistema, neste caso em especifico não havia usuários conectados.
A figura 27 apresenta o log de registro que o sistema gerou quando o usuário entrou no ambiente, visualiza- se o controle de horário neste caso 16:27 Hs..
Os respectivos dados do usuário contendo o Id, o Nome e CPF, também é registrado a localização do usuário que entrou no ambiente, neste caso, sala 1, um novo registro de tempo.
Entretanto esse registro de tempo relativo ao ambiente sala 1, é relativo ao fato do usuário poder se movimentar num ambiente pervasivo, tornando assim, necessário o registro de entrada e saída em ambiente diferentes.
Também pode ser visualizado o log com os dados referentes aos dispositivos que usuário possui neste caso um aparelho celular comunicando- se através de bluetooth e por fim os recursos disponíveis no dispositivo com o respectivo tempo disponibilizado para utilização, na ocasião de 1h e 30 min, ou seja, esse é o tempo limite, que outro usuário que esteja utilizando o sistema terá para utilizar o recurso, caso necessite.
Algumas características que foram definidas poderão ser modificadas, podemos destacar, por exemplo, inserção de outras características sobre o usuário foi inseridos apenas nome e CPF, apenas para efetuar a simulação e validação do sistema.
Embora não foi objetivo deste trabalho estudos, que envolvessem conceitos de tolerância a falhas.
Em a figura 28 pode ser visualizado o log de outro usuário entrando no ambiente, a localização do novo usuário agora é na sala 2, dispositivo detectado notebook com comunicações Bluetooth e wireless, os recursos disponíveis são armazenamento em disco com tempo de 2h e câmera com tempo definido de uso de 1h e 30 min..
A implementação ou melhoria da própria aplicação visando o controle do tamanho e tipo de acesso ao meio de armazenamento disponibilizado por alguns dispositivos como recursos é tema para posteriores trabalhos.
A figura 29 apresenta o log de registro do usuário efetuando busca de recursos disponíveis no sistema, informando o horário e dados pessoais como Id e nome, localização e a solicitação dos dados que está buscando registrados no log gerado por o sistema.
Em seguida são retornados através do log simulado às informações sobre os recursos encontrados, apenas 1 recurso, conforme solicitação e os dados do usuário que possui esses recursos, como:
Id, nome, a localização sala 2, dispositivo encontrado e forma de comunicação utilizada e o tempo de disponibilidade para uso desse recurso que neste caso é de 2h.
Essas informações ficam disponíveis na tabela de serviços figura16 que possui finalidade de gerenciar os serviços disponibilizados por o dispositivo do usuário e acessam seus recursos, como as informações encontradas estavam em ambientes distintos houve acesso ao servidor de contexto de uso global.
Em este caso simulado houve a utilização de um banco de dados mysql.
A seguir pode ser visualizada a figura 30, do banco de dados com registro alterados, depois de serem feitas as simulações descritas acima e confirmadas através dos logs gerados e visualizados nas figuras 26,27,28 e 29.
A figura 30 apresenta 4 passos que descrevem os registros da simulação realizada, utilizando o banco de dados mysql disponibilizado por a, validações sobre o mesmo foram detalhadas no logs gerados por o sistema figuras 26,27, 28 e 29;
Segue uma breve descrição sobre a figura 30: Em a descrição 1 da figura 30, é visualizado o registro do usuário:
Em este caso foram feitos registros que podem ser confirmados através do logs gerado por o sistema, figura 27, 28: Claudio, valderi;
Em a descrição 2 da figura 30, é visualizado o registro do dispositivo utilizado por o usuário:
Celular; Em a descrição 3 da figura 30, é visualizado o registro do recurso do dispositivo utilizado por o usuário:
Câmera, o tempo de utilização deste recurso tem por finalidade controle de utilização de determinado recurso;
Em a descrição 4 da figura 30, é visualizado o registro da localização do usuário:
Sala Em a descrição 5 da figura 30, é visualizado o registro do horário no usuário entrou no ambiente pervasivo, sala 1.
Em este capítulo, foram descritos todos os passos que envolveram a validação da proposta, foi descrito como foi implementado, testado e o funcionamento descrito através de logs e telas do modelo proposto.
Em o próximo capitulo serão descritas as considerações finais, conclusões e contribuições de pesquisa sobre esse trabalho, bem como sugestões sobre trabalhos futuros que podem contribuir com o desenvolvimento deste trabalho e com a pesquisa envolvendo a computação pervasiva.
A computação pervasiva é o atual cenário computacional que vem sendo considerado o mais recente paradigma computacional desse século.
O interesse de diversos grupos de pesquisa, tanto acadêmicos quanto industriais, para a computação pervasiva, cresce em escala global.
Esse novo cenário computacional contempla o desenvolvimento de aplicações com novas funcionalidades em ambientes inteligentes, como por exemplo, uma casa inteligente, entre outros citados ao longo desse trabalho.
A computação pervasiva disponibiliza ao usuário acesso computacional de modo invisível e onipresente.
A construção de aplicações e ambientes pervasivos, no entanto, proporciona muitos desafios.
Um desses desafios é tratar o contexto de usuários, dispositivos e recursos disponibilizados, sem desconsiderar outros fatores que englobam um sistema pervasivo.
Por isso, o presente trabalho apresentou a implementação de um modelo gerenciador de serviços para plataformas pervasivas sensíveis ao contexto que seja capaz de adaptar um ou mais dispositivos embarcados a um determinado ambiente pervasivo.
Essa plataforma pode ser facilmente integrada numa rede pervasiva e pode fornecer recursos e serviços de um ou mais dispositivos embarcados a outros dispositivos existentes no ambiente conectados a rede pervasiva.
Em esse trabalho, foram estudados alguns conceitos relacionados à computação pervasiva, e ciência ou sensibilidade ao contexto como alguns autores descrevem.
O conceito de ambientes, aplicações, dispositivos, plataformas e redes pervasivas foram mostrados para visualizar as diferenças com a computação tradicional.
Dois conceitos foram importantes na definição do trabalho.
O conceito utilizado para arquitetura pervasiva foi aplicado para todos os dispositivos pervasivos existentes no ambiente, enquanto o conceito de plataforma é baseado num dispositivo computacional genérico capaz de permitir o reuso de aplicações em software.
Os requisitos necessários para o desenvolvimento de um ambiente pervasivo foram estudados a fim de auxiliar na concepção do modelo proposto no trabalho.
Esses requisitos também foram utilizados para o estudo relacionado a arquiteturas e plataformas pervasivas.
O estudo de arquiteturas pervasivas foi importante para avaliar as necessidades que os ambientes inteligentes necessitam, em termos de serviços e recursos.
As pesquisas na área de computação pervasiva tendem a se desenvolver, devido a as várias formas de comunicações que emergem com velocidades de envio e recebimento de dados de altíssimas velocidades.
Dispositivos com funcionalidades jamais imaginadas, agregação de funcionalidades através de disponibilização de recursos e serviços.
Aplicações sensíveis ao contexto será desafio ainda fonte de muito trabalho, este trabalho propôs um modelo, que entre outras funcionalidades, sendo uma principal o fato de ser genérico suficiente para funcionar adequadamente em diversos tipos de dispositivos e formas de comunicações.
Este trabalho teve como principal objetivo apresentar um modelo gerenciador de descoberta de serviços para plataformas pervasivas com possibilidade de desenvolvimento e execução de aplicações móveis, sensíveis ao contexto:
Contribuiu para pesquisa em computação pervasiva, através do modelo proposto;
Apresentou algumas iniciativas de plataformas de suporte a aplicações móveis sensíveis ao contexto;
Descreveu o projeto conceitual da plataforma existente, um modelo de descoberta de serviços para o desenvolvimento e à construção de aplicações móveis, sensíveis ao contexto;
Apresentou um estudo de caso em que se aplica o modelo gerenciador de descoberta de serviços ao contexto proposto nesse trabalho.
Tal cenário trata de um sistema de gerenciamento adaptável a plataformas pervasivas;·
Estudou, analisou e desenvolveram componentes e serviços específicos que permitiram um tratamento eficaz para a computação pervasiva, tais como tratamento de falhas, métodos mais eficientes para segurança, comunicação entre dispositivos totalmente heterogêneos.·
Expuseram as considerações finais, avaliações sobre o trabalho realizado e uma breve discussão sobre trabalhos futuros.
Essa seção trata sobre trabalhos a serem realizados futuramente no mesmo tópico de pesquisa, também pretende expor pontos a serem mais bem estudados e verificados que não puderam ser estudados neste trabalho exaustivamente, são eles:
Adaptação e estudos exaustivos com a finalidade de utilização e adaptação a WebService;
Utilização e adaptação a sistemas pervasivos que utilizam o conceito de ontologias;
Utilização e adaptação a sistemas e plataformas pervasivas que utilizam o conceito de WebSemântica;
Definição de controle e acesso ao recurso de armazenamento, disponibilizado como recurso por alguns dispositivos;
Desenvolvimento de técnicas de adaptação de contexto local e global com uso de diferentes plataformas pervasivas, adaptadas ao modelo gerenciador proposto;
Estudo sobre utilização e adaptação do modelo a uma Rede de Sensores sem Fios (RSSFs);
Tratamento de questões relativas à segurança do modelo proposto, bem como na troca de informações entre usuários e dispositivos;
Desenvolvimento e adaptação do modelo proposto aos demais módulos propostos por a arquitetura proposta por.
