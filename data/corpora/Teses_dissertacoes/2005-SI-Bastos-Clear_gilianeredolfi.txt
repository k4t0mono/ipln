Reuso de software representa uma perspectiva interessante para obter qualidade e produtividade no processo de desenvolvimento de software.
O desenvolvimento baseado em componentes (DBC) destaca- se como uma abordagem orientada ao reuso, enfatizando o desenvolvimento de componentes para serem reusados e o desenvolvimento de aplicações através de componentes pré-existentes.
Porém, para alcançar o reuso não basta apenas existirem componentes, estes devem ser bem documentados e armazenados de forma que possam ser facilmente encontrados e entendidos.
Em este trabalho é identificado um conjunto de funcionalidades para um repositório de componentes de software oferecer suporte às atividades DBC.
Analisando- se alguns trabalhos sobre repositório de componentes, pode- se verificar que estes apresentam tais funcionalidades parcialmente.
Observa- se também a necessidade de uma arquitetura que compreenda os elementos e suas interações para suportar as funcionalidades identificadas e servir de referência para a construção de repositórios de componentes de software.
Em este contexto, este trabalho propõe uma arquitetura para repositórios de informações de componentes de software e estabelece um modelo de referência relevante para o armazenamento do componente, representando um conjunto de informações para descrever- lo em termos de suas características e funcionalidades, visando facilitar o seu entendimento e reuso.
Palavras-chave: Desenvolvimento baseado em componentes, repositórios de componentes, armazenamento, busca e recuperação de componentes.
O acelerado crescimento e a competição do mercado fazem com que as empresas se preocupem cada vez mais com a qualidade e a produtividade no processo de desenvolvimento de software.
O reuso de software é uma perspectiva interessante, pois apresenta benefícios significativos para o processo de desenvolvimento de software como produtividade, qualidade e redução de custos.
O Desenvolvimento Baseado em Componentes (DBC) se destaca como uma das abordagens orientadas ao reuso que vem despertando interesse, pois permite que empresas melhorem seus processos de desenvolvimento de software.
A abordagem DBC apresenta duas perspectivas, o desenvolvimento com componentes e o desenvolvimento de componentes.
O desenvolvimento com componentes parte do princípio que existe componentes disponíveis para o reuso.
O desenvolvimento de componente é similar ao desenvolvimento de software convencional, possuindo a preocupação com o reuso e.
Componente é um dos principais conceitos em DBC e a literatura apresenta diferentes visões quanto a sua definição, e.
A o analisar tais definições é possível verificar as diferentes visões para componentes e as características que o tornam reusáveis.
Conclui- se que componentes podem ser vistos sobre duas formas:
Como fragmentos de software, e ou como quaisquer artefatos construídos ao longo de o processo de desenvolvimento de software.
Uma visão mais ampla sobre componentes, tal como proposta em é importante, pois permite enfatizar o reuso em todas as etapas do processo de desenvolvimento e, então, expandir o ganho esperado com o reuso.
Porém a visão de componentes sob o ponto de vista de código, e possui maior ênfase na literatura atual e representa aspectos mais maduros em relação a a DBC.
Visando usufruir dos benefícios do reuso tanto na fase de projeto quanto na fase de implementação, este trabalho utiliza- se da visão mais abrangente sobre componentes.
E, buscando incorporar aspectos mais maduros em relação a componentes de código, utiliza- se de parte da definição de, a qual define que componentes devem estar de acordo com um modelo de componentes.
De este modo, componentes de software são vistos neste trabalho sob duas formas:
Como especificações, existindo na forma de diagramas ou artefatos textuais;
Ou como implementações, que podem existir na forma de código fonte ou de código executável.
Para alcançar o reuso não basta apenas existirem componentes.
Diversas questões devem ser observadas para auxiliar neste processo.
As organizações necessitam desenvolver componentes para serem reusados e guardar- los de forma que desenvolvedores e projetistas possam facilmente reusar- los.
Estas descrições devem compreender as suas características e funcionalidades com objetivo de facilitar o seu entendimento e reuso.
Outra questão são os repositórios de componentes, que permitem armazenar e gerenciar componentes suportando o desenvolvimento de/ com componentes num processo de reuso.
Estes possuem uma ampla aplicação na área de DBC por permitirem a recuperação de componentes reutilizáveis, propiciando aos desenvolvedores de aplicações ter acesso a estes componentes para o reuso.
No entanto, para eficiência do repositório e obtenção dos benefícios do reuso através de ele é necessário que este repositório seja construído considerando as necessidades de DBC.
Analisando a literatura da área, é possível levantar um conjunto de funcionalidades para repositórios de componentes de software.
De entre os trabalhos encontrados, observa- se uma preocupação restrita às questões voltadas a busca e recuperação dos componentes num repositório, e.
Isto demonstra a necessidade de abordagens mais abrangentes, preocupando- se com questões voltadas ao controle de versão dos componentes, controle de acesso e manutenção dos ususários, histórico de uso dos componentes armazenados, entre outras.
Partindo deste contexto, este trabalho estabelece um modelo de referência para descrever componentes de software para o reuso.
Este modelo de referência está baseado num levantamento na literatura e descreve os componentes de software quanto a suas características e funcionalidades.
Este trabalho realiza também um levantamento sobre funcionalidades para repositórios de componentes de software, tendo sido realizada uma pesquisa de campo numa empresa de desenvolvimento de software, com o objetivo de verificar a importância destas funcionalidades do ponto de vista dos profissionais da área.
Ainda, identifica os elementos arquiteturais e as suas interações para compor uma arquitetura que atenda todas as funcionalidades levantadas, servindo de referência para a construção de repositórios de componentes de software.
Além disso, apresenta um protótipo desenvolvido como trabalho de conclusão de um aluno do curso de Ciência da Computação da PUCRS (Pontifícia Universidade Católica do Rio Grande do Sul), visando demonstrar a aplicabilidade da arquitetura proposta.
O trabalho descrito neste documento foi desenvolvido no escopo do projeto Guidelines For Software Reuse realizado no Centro de Desenvolvimento e Pesquisa Dell/PUCRS (CDPe) 1.
O estudo realizado nesta dissertação teve como objetivo geral especificar uma arquitetura que suporte o conjunto de funcionalidades requeridas para repositórios de informações de componentes de especificação e implementação.
Especificar um modelo de referência para descrição de componentes de especificação e implementação, representando um conjunto de informações que para o entendimento e reuso do componente;
Identificar um conjunto de funcionalidades necessárias para repositórios de componentes de software suportar as atividades do desenvolvimento baseado em componentes;
Identificar os elementos arquiteturais necessários para atendimento destas funcionalidades, estabelecendo como estes elementos interagem;
Propôr uma arquitetura para repositórios de informações de componentes de software, que suporte o modelo de referência estabelecido, contendo os elementos arquiteturais identificados e as suas interações, servindo de referência para a construção de repositórios de informações sobre componentes de software.
Definir um protótipo da arquitetura proposta;
O trabalho apresentado neste documento foi realizado através de várias etapas, as quais estão representadas por a Figura 1.
As etapas estão representadas através de um diagrama de atividades UML (Unified Modeling Language).
Primeiramente foi realizado o levantamento bibliográfico e os estudos iniciais sobre o tema.
Estes permitiram identificar as carências relativas à área, as quais serviram de motivação para este trabalho e foram base para a definição dos objetivos e das atividades.
Fundado nos termos de a lei federal brasileira para tecnologia de informação Nº 8.248/91.
A seguir, foi realizado o levantamento bibliográfico e estudo do referencial teórico, incluindo uma exploração mais detalhada de DBC e componentes.
Após, definiu- se o modelo de referência para componentes de software, baseado numa pesquisa detalhada na literatura sobre as propriedades que definem um componente e as informações que o descrevem, visando facilitar o seu entendimento e reuso.
As próximas etapas incluíram a aplicação do modelo de referência num contexto de DBC, a qual permitiu avaliar as informações contidas e refinar o modelo de referência.
Paralelamente um estudo sobre repositórios de componentes foi realizado, estudando abordagens existentes para repositórios de componente de software no âmbito DBC.
A seguir, foi identificado um conjunto de funcionalidades para um repositório de componentes de software.
Para isso, foi realizada uma pesquisa detalhada nas abordagens levantadas.
Partindo do levantamento das funcionalidades para repositórios de componentes de software na literatura, foi realizada uma pesquisa de campo para observar a importância das funcionalidades identificadas na literatura sob o ponto de vista de profissionais de uma organização de desenvolvimento de software de grande porte.
A seguir, foi definida a arquitetura para repositório de informações de componentes de software, a qual representa os elementos arquiteturais e como estes elementos interagem para atender as funcionalidades identificadas.
Para a definição da arquitetura também foi considerado o modelo de referência, o qual é relevante para descrever os componentes armazenados no repositório.
Por fim, um protótipo desta arquitetura foi especificado e implementado.
Este protótipo implementa os principais elementos representados na arquitetura e demonstra a aplicabilidade da arquitetura proposta.
O restante deste documento está estruturado da seguinte forma:
O capítulo 2 fornece uma visão geral sobre DBC e discute os principais conceitos desta abordagem.
O capítulo 3 apresenta o modelo de referência para descrição de componentes de software definido através de uma pesquisa detalhada na literatura.
Ainda, relata a aplicação deste modelo de referência numa abordagem DBC, cujo objetivo envolveu a avaliação das suas informações e refinamento do mesmo.
O capítulo 4 aborda conceitos, utilidade e a importância de repositórios de componentes de software para DBC.
Apresenta funcionalidades para repositórios de componentes de software identificadas através da pesquisa na literatura.
Ainda, descreve uma pesquisa de campo permitindo observar a importância das funcionalidades identificadas na literatura sob a visão de profissionais de uma unidade de desenvolvimento de software.
Por fim, este capítulo descreve a arquitetura para um repositório de informações de componentes de software proposta.
O capítulo 5 descreve o protótipo desenvolvido.
O capítulo 6 apresenta as conclusões e trabalhos futuros para esta pesquisa.
Após, tem- se as referências bibliográficas e os anexos.
Este capítulo fornece uma visão geral sobre DBC através dos principais conceitos.
Inicia com uma análise das definições de componentes encontradas na literatura, visando discutir e clarificar o que são componentes, analisar a sua relação com a orientação a objetos, arquitetura de software, modelo e frameworks de componentes.
Por fim, apresenta as perspectivas do processo de desenvolvimento em DBC.
Para compreender a abordagem DBC é importante entender o conceito de componentes e seus aspectos relacionados.
Porém esta compreensão se torna um desafio uma vez que a literatura não apresenta um consenso sobre o que são componentes.
Em é apresentada uma análise detalhada das definições de componentes abordadas em, e.
Embora os autores concordem em alguns aspectos de suas definições, é possível identificar visões diferenciadas sobre o que é um componente.
A seguir são apresentadas as definições estudadas e os principais aspectos que as diferenciam.
Em, componente de software é definido como «uma unidade de composição com interfaces contratualmente especificadas e somente explícitas dependências de contexto.
Um componente de software pode ser usado independentemente e ser composto por outras partes».
Apresenta uma visão preocupada com componentes como um elemento de software.
Estes podem ser combinados com outros componentes através de suas interfaces, as quais escondem detalhes da implementação e fornecem informações de como um componente pode interagir com outro componente.
Por dependências de contexto entende- se a definição do que o ambiente deve fornecer ao componente para que ele funcione.
Similarmente, nos autores definem um componente como &quot;uma implementação não conhecida de funcionalidades, que pode ser composto por outras partes em conformidade com um modelo de componentes».
Em esta definição, os autores concordam com a visão apresentada em e acrescentam a preocupação de que componentes devem ser construídos de acordo com um modelo de componentes, o qual especifica padrões e convenções que devem ser seguidos por os desenvolvedores do sistema, distinguindo- os de outras formas de software empacotado.
Estes padrões e convenções dizem respeito à estrutura e às formas de interação do componente, os recursos disponíveis para o componente e de que forma esses recursos estão associados a ele.
Em, os autores apresentam componentes como &quot;um conjunto independente de serviços reutilizáveis».
Por independente entende- se um componente que pode ser usado fora de o seu contexto.
Isto implica que componentes não podem ser desenvolvidos contendo dependências entre si, de modo que a colaboração com um componente para conseguir uma solução não interfira em outro componente.
Serviços reutilizáveis implicam que um componente forneça capacidades que outros componentes desejam acessar.
Para isto, um componente deve ter uma especificação, a qual descreve o que o componente faz e como ele se comporta quando seus serviços são reutilizados.
Expressa em termos de código, sua implementação pode ser criada em linguagens e tecnologias diferentes do programa cliente.
Embora esta definição aborda a visão de serviços reutilizáveis, apresenta várias características comuns às definições anteriores de e, como a visão de interfaces, independência do componente e os tratam como unidades de composição.
Em, o autor afirma que &quot;componentes de software reutilizáveis são artefatos autocontidos, facilmente identificáveis que descrevem e/ ou executam funções específicas e que possuem interfaces claras, documentação apropriada e uma condição de reuso definida».
O termo artefato apresentado na definição do autor indica que componentes podem ter diferentes formas, como por exemplo, código fonte, documentação e código executável.
Esta definição se diferência da visão de componentes somente como elementos de software apresentados por, e, definindo componente como qualquer artefato desenvolvido durante o processo de desenvolvimento de software.
Baseado nas definições apresentadas é possível verificar que existem diferentes visões sobre componente de software.
No entanto, conclui- se que componentes podem ser vistos sobre duas formas:
Como elementos de software, e, ou como quaisquer artefatos construídos ao longo de o processo de desenvolvimento de software.
Um estudo complementar sobre as definições de componente pode ser verificado em, o qual apresenta um conjunto de características de componentes sintetizando as preocupações de cada uma das definições estudadas.
Para o contexto deste trabalho, adotou- se a definição apresentada em por ser abrangente o suficiente para enfatizar o reuso em todo o processo de desenvolvimento.
E complementou- se com as considerações abordadas por, o qual aborda componentes como implementações, quando ele diz que &quot;componentes devem estar em conformidade com um modelo de componentes».
Assim, componentes de software são vistos neste trabalho sob duas formas:
Como especificações, existindo na forma de diagramas ou artefato textual;
Ou como implementações, que podem existir na forma de código fonte ou de código executável.
2.1.1 Interfaces e Contratos Conforme definições apresentadas na seção anterior, componentes devem possuir interfaces.
Esta é uma característica importante, pois as interfaces representam o ponto de acesso ao componente.
Uma interface determina como um componente pode ser reusado e interconectado com outros componentes, pois define as operações que estão disponíveis para um componente.
Para, uma interface não oferece implementação das suas operações, apenas nomeia uma coleção de operações, oferecendo as descrições e o registro destas operações.
Isto permite que mudanças possam ser realizadas na implementação sem alteração da interface.
Técnicas para descrever interfaces, tais como IDL (Interface Definition Language) se preocupam apenas com a parte de assinatura das operações, não expressando detalhes do comportamento do componente.
A noção de contratos oferece esse detalhamento, pois especifica os serviços fornecidos por um componente e as obrigações do cliente.
Para cada operação do componente, um contrato lista as restrições que o componente necessita, as quais devem ser obedecidas por o cliente (pré-condições) e aquelas que o componente se compromete em estabelecer como retorno (pós-condições).
O desenvolvimento baseado em componentes pode ser considerado uma evolução do desenvolvimento orientado a objetos.
Porém, isso não significa que um componente deva ser desenvolvido neste paradigma, podendo conter procedimentos tradicionais ou ser criado utilizando uma abordagem de desenvolvimento estruturado.
O que considera importante é que o mesmo esteja em conformidade com as definições de componentes em relação a suas interfaces, arquitetura e funcionalidades.
Por possuírem muitas similaridades, componentes e objetos ainda são bastante confundidos, mas existem distinções entre essas abordagens.
Um objeto tem estado, o qual pode ser um estado persistente;
Já componentes não têm persistência de estado, de modo que duas instâncias do mesmo componente não teriam as mesmas propriedades.
Componentes geralmente têm granularidade maior do que objetos e classes.
Ainda, objetos são manipulados unicamente por linguagens orientadas a objetos;
Enquanto que componentes podem ser desenvolvidos em qualquer linguagem, desde que satisfaçam suas interfaces.
Porém, através dos conceitos de encapsulamento (módulos e pacotes), herança, polimorfismo, a orientação a objetos traz vantagens para o reuso de software.
Uma classe pode herdar a estrutura e comportamento de outra classe e adicionalmente ser estendida e modificada.
De o ponto de vista do reuso, é uma das principais vantagens, pois classes trabalham juntas sem ter o conhecimento da existência da outra, do mesmo modo que componentes conseguem grande independência entre si.
Em este sentido, a orientação a objetos e componente possuem uma ampla relação existindo distinções entre as duas abordagens.
Para, estas duas abordagens podem ser combinadas uma vez que, a análise, projeto e desenvolvimento da orientação a objetos constituem um conjunto de tecnologias e métodos naturalmente usados em DBC.
Analisando a arquitetura de software, a qual apresenta diversas definições na literatura (e.
g e), pode- se relacionar- la com componentes.
De forma geral, a arquitetura de software define como elementos de um sistema colaboram entre si.
Em este contexto, a relação se faz devido a a ênfase na composição entre componentes e interação de uns com os outros.
A relação entre arquitetura de software e a tecnologia de componente pode ser expressa mais claramente através das abstrações de componentes, onde embora os níveis de abstração sejam bastante distintos, os tipos de elementos a serem abstraídos são bastante similares.
Outra relação é a correlação do estilo arquitetural como uma abstração das restrições de projeto, modelo de componentes e frameworks, sendo cada vez mais conhecidos.
Ainda, ambas estão focadas respectivamente na qualidade dos atributos e na simplificação da integração de partes do sistema.
Através desta similaridade é possível verificar a importância da arquitetura de software para tecnologia de componentes.
De o ponto de vista de componente, um modelo define a estrutura de um componente.
Estas definições dizem respeito a como esses componentes podem ser acessados e como se comunicam.
Os frameworks fornecem suporte técnico específico para que esses modelos sejam implementados.
O processo de DBC apresenta desafios e problemas similares aos encontrados na engenharia de software.
De essa forma, muitos dos métodos, ferramentas e princípios da engenharia de software, são utilizados da mesma forma ou de maneira similar em DBC.
De entre as diferenças, DBC aborda a divisão de blocos monolíticos de software em componentes interoperáveis, visando reduzir a complexidade e o custo no desenvolvimento.
Ainda, DBC apresenta duas perspectivas, distinguindo o desenvolvimento de componentes para serem reutilizados e o desenvolvimento de aplicações com componentes já existentes.
O fato de componentes serem construídos para serem reusados em diferentes aplicações, possui conseqüências tais como:
Componentes devem ser bem especificados, fáceis de entender, suficientemente genéricos, fáceis de adaptar, encontrar e utilizar.
Segundo, desenvolver componentes reutilizáveis requer foco em atributos que influenciem a reusabilidade, como por exemplo, generalidade, totalidade, acoplamento/ coesão, portabilidade e qualidade.
A construção de sistemas através da combinação de componentes já desenvolvidos e testados reduz o custo e o tempo no processo de desenvolvimento desses sistemas.
O desenvolvimento com componentes parte do princípio que existem componentes disponíveis para o reuso e possui algumas restrições quanto a a seleção do componente e a forma como este será reutilizado no sistema.
Para, embora a abordagem do desenvolvimento com componentes apresente diversas vantagens, existem algumas desvantagens como a necessidade de encontrar componente que reúnam os requisitos especificados, bem como a necessidade de incluir novos procedimentos para gerenciar componentes.
Os modelos de ciclos de vida estabelecidos em engenharia de software podem ser adaptados e usados em DBC.
A Figura 3, adaptada de, apresenta o modelo cascata usando a abordagem DBC, onde as fases de identificação de requisitos e projeto são combinadas com a descoberta e a seleção de componentes.
Desta forma, caso nenhum componente seja encontrado para o reuso, surge a necessidade de criar o componente ao invés de reutilizar.
Selecionar: Escolher os componentes que combinem com os requisitos do sistema.
O componente pode não preencher completamente os requisitos do sistema, sendo necessário ajustar a arquitetura do sistema e reformular os requisitos para possibilitar o uso do componente existente.
Criar: Um novo componente pode ser criado para ser usado num sistema.
Este procedimento é pouco atrativo em função de requerer um maior esforço e período de tempo, portanto deve ser analisado os reais benefício desta criação.
Adaptar: Correção do componente selecionado para que ele atenda à especificação dos requisitos do sistema.
Embora alguns componentes possam ser integrados diretamente no sistema, outros necessitam ser adaptados antes de ser integrados.
Utilizar: Combinar e utilizar componentes através de um framework para componentes.
Atualizar: Substituir as versões antigas do componente por novas versões, onde falhas foram eliminadas ou novas funcionalidades foram adicionadas.
Este capítulo procurou apresentar DBC e os seus conceitos relacionados, analisando as diferentes visões para componentes e a sua relação com a orientação a objetos, arquitetura de software e frameworks.
Ainda, apresentou a abordagem para o desenvolvimento de componentes e o desenvolvimento com componentes.
Em este contexto, o presente trabalho parte de uma visão mais ampla sobre componentes, a qual enfatiza o reuso em todas as etapas do processo de desenvolvimento e considera componentes como especificações e implementações.
Isto permite a preocupação com componentes nas diferentes fases do ciclo de desenvolvimento de um software, expandindo o ganho esperado com o reuso.
A academia e a indústria possuem diferentes entendimentos acerca de DBC.
Enquanto pesquisadores na academia definem componentes como entidades bem definidas, a indústria vê componentes como partes de um sistema que podem ser reusados, mas não necessariamente bem definidos, com explícitas interfaces e de acordo com um modelo de componentes.
Porém, componentes bem definidos, com explícitas interfaces e de acordo com um modelo de componentes são importantes pois facilita a adaptação e aumenta a produtividade através reuso destes componentes.
Assim, como métodos de engenharia de software proporcionam os detalhes sobre como desenvolver software, existem metodologias que apóiam DBC proporcionando detalhes sobre como desenvolver componentes, tais como, Catalysis, UML Components, KobrA.
Métodos DBC não é o foco deste trabalho e estudos detalhados podem ser verificados em, e.
O presente trabalho está focado em questões relacionadas ao gerenciamento de componentes através de uma arquitetura para um repositório suportar atividades, tanto do desenvolvimento de componentes, quando atividades do desenvolvimento com componentes O próximo capítulo apresenta um estudo mais aprofundado sobre características de componentes e um modelo de referência definido, baseado neste estudo, para descrever componentes reutilizáveis.
Este capítulo apresenta um modelo de referência para descrição de componentes de software definido através de uma pesquisa detalhada na literatura.
Ainda, relata uma aplicação deste modelo de referência numa abordagem DBC, cujo objetivo envolveu a avaliação e o refinamento do mesmo.
Para que um componente seja reutilizado, é necessário compreender suas características e funcionalidades.
Estas características englobam as propriedades que definem um componente e as informações sobre o componente, permitindo descrever componentes de tal forma que possam ser entendidos e facilmente encontrados para o reuso.
Uma pesquisa na literatura foi realizada visando identificar tais características.
O resultado desta pesquisa destaca um conjunto de propriedades que caracterizam um componente e um conjunto de informações necessárias para descrever o componente com o objetivo de facilitar o reuso.
Esta pesquisa originou um modelo de referência para descrever componentes de software.
O resultado desta pesquisa e o modelo de referência definido estão apresentados neste capítulo e podem ser encontrados em detalhes em.
Inicialmente, investigou- se na literatura diversos autores sobre características de componentes.
Estas características foram sendo investigadas e relacionadas de acordo com a própria abordagem do autor, visando preservar as abordagens de cada um e permitir possíveis análises ao final da pesquisa.
Os trabalhos utilizados como referências para a pesquisa estão apresentados na coluna referência das Tabelas 1 e 2.
Após a investigação e o relacionamento entre as características de componentes, estas foram analisadas.
Foi observado que autores diferentes apresentam o mesmo conceito nomeado de forma diferente e vice-versa, ou o mesmo conceito com significados diferentes e/ ou englobando duas características.
Ainda, de entre todas as características levantadas, identificou- se que algumas agregam valor ao componente e podem ser consideradas como informações sobre ele, como por exemplo, número de vezes que o componente foi reusado, a origem do componente e a versão do componente.
Outras características definem conceitualmente um componente, como por exemplo, componentes devem apresentar funcionalidades e estas são encapsuladas em interfaces.
Desta forma, foi necessário classificar tais características e detalhar essas informações, tornando assim o conjunto de características identificadas mais claro e objetivo.
Ainda, cada característica foi descrita no seu conceito mais amplo unificando as idéias dos autores e classificadas em grupos, pois apresentavam propriedades comuns.
As seções 3.1.1 e 3.1.2 apresentam o resultado da pesquisa, as descrições de cada grupo e as características identificadas na pesquisa.
As características que definem um componente são tratadas como propriedades para um artefato de software ser considerado um componente de software reutilizável e as características que adicionam valor ao componente são tratadas como informações necessárias para descrever o componente.
Esta seção apresenta as propriedades identificadas na pesquisa.
Embora estejam descritas separadamente, estas estão relacionadas.
Por exemplo, para que o componente possa ser independente é necessário que seja autocontido e especifique claramente o que o componente provê e o que ele requer para o seu reuso através de interfaces bem definidas.
Detalhes sobre estas relações podem ser encontrados em.
Uso O grupo Uso inclui informações que contextualizam possíveis cenários e usos aos quais os componentes podem ser aplicados.
Propósito: Informação que descreve, de maneira geral, para que o componente pode ser usado, identificando qual (is) problema (s) o componente visa resolver.
Domínio de aplicação:
Informação que relaciona as possíveis situações em que um componente pode ser usado.
Em este sentido, a definição do contexto deve considerar qual o domínio e as possíveis aplicações em que os componentes podem ser integrados.
Componentes similares:
Informação que relaciona componentes que têm por finalidade atender um mesmo propósito ou propósito bastante similar.
Tipo: Informação que define a forma como o componente existe, estabelecendo através disse onde o componente pode ser usado.
Fase de Integração:
Informação que estabelece a fase do ciclo de vida em que um componente pode ser integrado a uma aplicação.
Granularidade: Informação que determina o tamanho de um componente.
Medir a granularidade ainda é uma questão em aberto.
Diferentes estratégias podem ser definidas para medir o tamanho do componente, por exemplo, o número de funcionalidades, número de casos de uso que atende, entre outras.
Maturidade O grupo Maturidade abrange um conjunto de informações que visam identificar o grau de maturidade e estabilidade do componente, através do registro do número de vezes que o componente é reusado e da identificação das suas diferentes versões.
Nível de reuso:
Informação que estabelece a maturidade do componente, através do registro do número de vezes que este componente foi utilizado para o desenvolvimento de diferentes aplicações.
Versão: Informação que define a existência de um controle numérico das diferentes versões que o componente assume ao longo de o tempo.
Este identificador numérico permite que o mecanismo de armazenamento do componente registre um histórico do componente, através da gerência das diferentes versões que o componente assume ao longo de o tempo.
Estas novas versões serão estabelecidas a partir de alterações realizadas no componente para possibilitar o seu reuso ou a alteração das suas funcionalidades.
Modelo de componentes:
Informação do componente que identifica a existência de um documento que estabelece padrões e convenções impostas aos componentes, de modo a descrever a função de cada um e como eles interagem entre si.
Estes padrões e convenções dizem respeito à estrutura e às formas de interação do componente, os recursos disponíveis para o componente e de que forma os componentes são associados aos recursos.
Especificação das interfaces:
Informação que identifica a existência de um documento de especificação das interfaces do componente.
Deve fazer parte deste documento uma descrição da funcionalidade oferecida através da interface, bem como todas as informações que especificam as interfaces, incluindo o seu nome, o nome dos métodos com seus parâmetros e respectivos tipos.
O grupo Tecnologia documenta informações relativas à implementação de um componente e da tecnologia empregada na sua construção.
Interoperabilidade: Informação que documenta como é a interação entre componentes, considerando a troca de informações entre componentes de diferentes tecnologias.
Esta informação procura compreender informações que especifiquem e/ ou restrinjam a interação entre componentes de diferentes tecnologias.
Características não-funcionais:
Informação que identifica aspectos não-funcionais do componente, podendo ser especificadas, por exemplo, questões quanto a o desempenho, segurança, confiabilidade, manipulação de erros e concorrência.
Interface gráfica:
Informação que determina se o componente apresenta uma interface gráfica.
Por exemplo, uma interface gráfica que permite o teste do componente antes da integração.
Restrições: Informação que descreve as limitações do componente impostas por a implementação realizada ou por a tecnologia empregada para o seu desenvolvimento.
Infra-estrutura: Informação que descreve a infra-estrutura em a qual o componente é executado e que, na maioria dos casos, suporta a comunicação/ interação dos componentes.
Portabilidade: Informação que especifica a plataforma em que o componente trabalha e as questões relacionadas à possibilidade de uso do componente em outras plataformas.
Desenvolvimento: Informação que especifica a linguagem de programação em que o componente é desenvolvido, bem como o ambiente de desenvolvimento, compiladores, bibliotecas e todos os demais recursos utilizados no desenvolvimento do componente.
Distribuição: Informação que identifica se o componente pode ter suas interfaces acessadas remotamente.
Tecnologias atuais suportam clientes invocando métodos remotamente.
O grupo Alteração documenta informações relativas às alterações de um componente, tanto relativo à forma como quanto se esta pode ser aplicada diretamente ao código fonte do componente ou não.
Formas de modificação:
Informação que identifica as possíveis formas de alteração do componente, informando como o componente pode ser modificado.
Acesso ao código fonte:
Informação que identifica se o componente possibilita ou não o acesso ao seu código fonte G. Controle de Qualidade O grupo Controle de qualidade estabelece informações que buscam controlar e garantir a qualidade de um componente.
Métricas: Informação que estabelece métricas usadas na avaliação do componente e os resultados obtidos.
Estas informações permitem a avaliação da qualidade do componente.
Teste: Informação que descreve as definições e teste, e/ ou outros mecanismos que permitam testar o componente isoladamente, independente da aplicação em que estiver sendo usado.
Igualmente podem ser especificados casos de teste que sejam aplicados para testar o funcionamento do componente quando integrado a determinadas aplicações, priorizando aspectos relacionados a esta integração.
Baseado na pesquisa descrita na seção 3.1 (Propriedade e Informações de Componentes de Software) foi definido um modelo de referência para descrever componentes de software.
Este modelo de referência representa as propriedades que definem conceitualmente um componente e as informações sobre ele necessárias para seu entendimento e reuso.
De forma geral, o modelo de referência visa garantir que estas propriedades e características sejam satisfeitas tanto na construção de um componente, quanto nas informações associadas a ele que devem ser armazenadas num repositório de componentes.
E, através deste conjunto de informações agregadas aos componentes semanticamente, auxiliar na seleção de componentes, permitindo rastrear e recuperar componentes dentro de o seu ciclo de vida.
Por exemplo, através de um componente de implementação poder recuperar o seu respectivo componente de especificação e vice-versa.
O modelo de referência servirá como suporte na definição da arquitetura para o repositório, estabelecendo informações sobre o componente relevantes para o registro do componente no repositório, focando no relacionamento entre os tipos de componentes para possibilitar a recuperação destes em todo o seu ciclo de vida.
A Figura 4 apresenta um diagrama de classes UML representando o modelo de referência, desta forma a informações são representadas através de classes e atributos.
A Tabela 3 apresenta uma breve descrição de cada classe representada no modelo de referência, retratando uma visão geral deste.
A tabela 3 também representa a relação entre as informações identificadas na pesquisa bibliográfica e as classes do modelo de referência, destacando como as informações identificadas na seção 3.2.2 (Informações sobre Componentes de Software) estão representadas no modelo de referência.
Classe Componente: Mantém as informações gerais do componente independente da sua natureza Versao:
Mantém as informações sobre a versão de cada componente e o histórico de alterações Funcional:
Mantém as características funcionais de cada versão do componente NaoFuncional:
Mantém as características não funcionais de cada versão do componente TipoNaoFuncional:
Mantém uma lista com os possíveis tipos de características não funcional aplicável a cada versão do componente Aplicacao:
Mantém informações sobre as aplicações que utilizaram à versão do componente Integracao:
Mantém o histórico de uso das versões do componente nas aplicações.
O objetivo é manter as informações de integração de cada versão do componente Especificacao:
Não mantém informações, apenas visa agrupar artefatos de especificações ArtefatoEspecificacao:
Mantém informações sobre artefatos de especificação que são parte de um componente do tipo especificação.
Referencia: Classe associativa criada para conter a descrição sobre a relação entre os artefatos de especificação Diagrama:
Mantém informações sobre artefatos de especificações na forma de diagramas ArtefatoTextual:
Mantém informações sobre artefatos de especificações na forma de textual Implementacao:
Mantém informações sobre componentes do tipo implementação Documentacao:
Mantém as informações sobre a documentação da implementação do componente InformacoesTeste:
Mantêm a informações referente os testes aplicados no componente.
Estas informações são relativas à como o componente foi testado e o resultado do teste.
Interfaces: Mantém informações sobre as interfaces da implementação do componente Metodos:
Mantém as informações sobre os métodos que compõem uma interface Parametros:
Classe que mantém as informações sobre os parâmetros dos métodos ParametroRetorno:
Mantém informações sobre o parâmetro de retorno do método TipoDado:
Mantém as informações sobre os tipos de dados que podem ser manipulados por o componente Excecoes:
Mantém as possíveis exceções que podem ser geradas por os métodos Relacao:
Mantêm o tipo de relação entre classes consideradas tipos de dados complexos.
Atributos: Mantém as informações sobre atributos que podem estar presente num tipo de dado Informação Nome, Origem, Propósito e Domínio de aplicação.
Versão Especificação das interfaces Portabilidade, Características não funcionais Portabilidade, Características não funcionais Nível de reuso.
Esta seção apresenta uma documentação detalhada das classes e atributos do modelo de referência.
Cada subseção detalha uma classe do modelo de referência (em negrito) e apresenta sua finalidade e seus atributos.
Os atributos (em sublinhado) são descritos através do nome de cada atributo, tipo de dado que ele armazena e uma descrição sobre atributo.
Componente Esta classe visa manter as informações gerais do componente independente da sua natureza.
Estas informações são mantidas através dos atributos Id, nome, origem, proposito e dominioAplicacão, detalhados na Tabela 4.
Tabela 4 ­ Atributos da classe Componente Nome Id nome origem proposito dominioAplicacão Tipo Descrição Atributo que mantém um identificador para o componente.
Atributo que mantém o nome no componente.
Atributo que mantém a origem do componente, visando identificar quem foi responsável por o seu desenvolvimento e uma forma de contatar- lo em caso de problemas.
Descreve o propósito para qual o componente pode ser usado, identificando o (s) problema (s) que este visa resolver.
Descreve os possíveis domínios de aplicações em que o componente pode ser usado.
Atributo que mantém o identificador da versão.
Literal que caracteriza o número atribuído a versão.
Campo de descrição de informações pertinentes à versão do componente, como por exemplo, as alterações desta versão do componente frente a anterior.
Data de liberação da versão.
Através deste atributo pode- se obter a &quot;idade «do componente.
Pessoa responsável por a versão do componente.
Atributo que mantém a localização física da versão.
Funcional Classe que visa manter as informações sobre as características funcionais de cada versão do componente, representando as funcionalidades que cada versão do componente contém.
Estas informações são mantidas através do atributo descricão detalhado na Tabela 6.
Tabela 6 ­ Atributo da classe Funcional Nome descricão Tipo Descrição Atributo que descreve uma característica funcional do componente.
NaoFuncional Classe que visa manter as informações sobre as características não-funcionais de cada versão do componente.
Estas informações são mantidas através do atributo descricão detalhado na Tabela 7.
Tabela 7 -- Atributo da classe NaoFuncional Nome descricão Tipo Descrição Atributo que descreve uma característica não-funcional do componente.
Aplicacão Esta classe visa manter as informações sobre as aplicações que utilizaram determinada versão do componente.
Estas informações são mantidas através dos atributos nome, descricão, e fonte, detalhados na Tabela 9.
Tabela 9 -- Atributos da classe Aplicacão Nome nome descricão fonte Tipo Descrição Nome da aplicação em que o componente foi integrado.
Descrição da aplicação em que o componente foi integrado.
Empresa responsável por a aplicação.
Este atributo visa manter um histórico de reuso referente a as empresas que utilizaram determinados componentes, permitindo avaliar sua confiabilidade.
Integracão Esta classe visa manter as informações sobre o histórico de utilização da versão do componente na aplicação.
Esta classe foi criada com o objetivo de guardar as informações de integração de cada versão do componente.
Estas informações são mantidas através dos atributos data e descricão, detalhados na Tabela 10.
Tabela 10 -- Atributos da classe Integracão Nome data descricão Tipo Descrição Data da integração da versão do componente na aplicação.
Comentário da integração da versão do componente em cada aplicação.
Especificacão Esta classe é uma subclasse da classe Versão, que visa agregar artefatos de especificação (classe ArtefatoEspecificacao) referentes a uma versão do componente.
ArtefatoEspecificacão Classe que mantém informações sobre os artefatos de especificação que fazem parte de um componente do tipo especificação.
Estas informações são mantidas através dos atributos nome e ferramentaDesenvolvimento, detalhados na Tabela 11.
Tabela 11 -- Atributos da classe ArtefatoEspecificacão Nome nome ferramentaDesenvolvimento Tipo Descrição Nome do artefato de especificação.
Referência à ferramenta utilizada na geração do artefato.
Diagrama Esta classe é uma subclasse de ArtefatoEspecificacão e mantém as informações sobre artefatos de especificação na forma de diagramas.
Estas informações são mantidas através dos atributos notacão e tipo, detalhados na Tabela 12.
Tabela 12 -- Atributos da classe Diagrama Nome notacão tipo Tipo Descrição Notação utilizada no diagrama.
Tipo do diagrama.
ArtefatoTextual Esta classe é uma subclasse de ArtefatoEspecificacão e mantém as informações sobre artefatos de especificação na forma de documentação.
Estas informações são mantidas através do atributo descricão detalhado na Tabela 13.
Tabela 13 -- Atributo da classe ArtefatoTextual Nome descricão Tipo Descrição Descrição do propósito do documento.
Nome descricão Tipo String Descrição Descrição do propósito do documento.
Implementacão Esta classe é uma subclasse de Versão e mantém as informações sobre componentes do tipo implementação.
Estas informações são mantidas através dos atributos codigoFonte, executavel, interfaceGrafica, usoDistribuido, linguagem, tecnologia, infraestrutura, requisitosUso e restrições, detalhados na Tabela 15.
Tabela 15 -- Atributos da classe Implementacão Nome codigoFonte executavel interfaceGrafica usoDistribuido Tipo Boolean Boolean Boolean Boolean Descrição Indica se o código fonte da versão do componente está disponível.
Indica se o executável da versão do componente está disponível.
Indica a presença de interface gráfica na versão do componente.
Indica se o componente pode ser executado de forma distribuída, pois tecnologias atuais permitem que componentes sejam integrados ao sistema permanecendo e executando no local onde estão armazenados.
Atributo que irá conter qual a linguagem que o componente foi desenvolvido.
Campo que irá referenciar qual tecnologia de componentes foi utilizado no seu desenvolvimento.
Campo descritivo que abriga a infra-estrutura através de a qual o componente executa.
Esta infra-estrutura irá oferecer serviços aos componentes como, suportar e reforçar as definições do modelo de componentes a qual ela está vinculada.
Atributo multivalorado que define os requisitos para o uso do componente.
Atributo multivalorado que descreve as limitações do componente.
Podem ser limitações impostas por a implementação ou por a tecnologia empregada em seu desenvolvimento.
Descrição sobre o conteúdo da documentação.
Referência para localização física do documento.
Interfaces Classe que mantém informações sobre as interfaces providas e requeridas de um componente de implementação.
Estas informações são mantidas através dos atributos nome, tipo, descricão e nomePacote, detalhados na Tabela 17.
Tabela 17 -- Atributos da classe Interface Nome nome Tipo Descrição Nome da interface.
Atributo que mantém se a interface é provida ou requerida, visando identificar se a funcionalidade desta interface é oferecida por o componente (provida) ou se o componente requer esta funcionalidade de outro componente para funcionar (requerida).
True determina que a interface é provida e False que é requerida.
Campo que descreve as funcionalidades disponibilizadas através da interface.
Nome do pacote em o qual a interface se encontra.
Boolean descricão nomePacote O. Metodos Classe que mantém as informações sobre os métodos da interface.
Estas informações são mantidas através dos atributos nome e descricão, detalhados na Tabela 18.
Tabela 18 -- Atributos da classe Metodos Nome nome descricão Tipo Descrição Nome do método.
Descrição da funcionalidade implementada por o método.
Nome do parâmetro na assinatura do método.
Descrição da estrutura e funcionalidade do parâmetro.
Ordem do parâmetro no método.
ParametroRetorno Classe que mantém as informações sobre o parâmetro de retorno do método.
Estas informações são mantidas através do atributo descricão detalhado na Tabela 20.
Tabela 20 -- Atributo da classe ParametroRetorno Nome descricão Tipo Descrição Descrição da estrutura e funcionalidade do parâmetro de retorno.
TipoDado Classe que mantém as informações sobre o tipo de dado que são parâmetros dos métodos ou são subclasses destes parâmetros.
Estas informações são mantidas através dos atributos nome e descricão, detalhados na Tabela 21.
Tabela 21 ­ Atributos da classe TipoDado Nome nome descricão Tipo Descrição Nome do tipo de dado.
Descrição do tipo de dado.
Exceções Classe que mantém informações sobre as possíveis exceções geradas por os métodos.
Estas informações são mantidas através do atributo descricão detalhado na Tabela 22.
Tabela 22 -- Atributo da classe Exceções Nome descricão Tipo Descrição Atributo que mantém informação sobre o comportamento das exceções do método.
Relacão Mantém o tipo de relação entre tipo de dados quando estes forem complexos.
Por exemplo, o tipo de dado sendo uma subclasse a qual se relaciona com outra classe através de uma herança.
Estas informações são mantidas através do atributo tipo detalhado na Tabela 23.
Tabela 23 -- Atributo da classe Relacão Nome tipo Tipo Descrição Mantém o tipo de relação entre tipos de dados.
Atributos Classe que mantém as informações sobre os parâmetros das classes que são tipos de dados complexos.
Estas informações são mantidas através dos atributos nome e descricão, detalhados na Tabela 24.
Tabela 24 -- Atributos da classe Atributos Nome nome descricão Tipo Descrição Nome do atributo.
Descrição do atributo.
Nome do teste.
Identificação do teste Tipo do teste (ex:
Funcional). Descrição do que foi testado e os resultados obtidos Descrição do ambiente utilizado no teste.
Versão, Implementacão e Especificacão Relacionamento de especialização onde as classes Implementacão e Especificacão são subclasses de Versao.
Devido a a classe Versão ser abstrata, somente suas subclasses podem ser instanciadas, e ao instanciar um novo objeto de Implementacão ou Especificacão se estará instanciando um novo objeto de Versão também.
Especificacão e ArtefatoEspecificacão Relacionamento de composição representando que uma especificação do componente é composta de no mínimo um artefato de especificação, e um artefato de especificação deve fazer parte de uma especificação de uma versão de componente.
ArtefatoEspecificacão, Diagrama e ArtefatoTextual Especialização que visa expressar que as classes Diagrama e ArtefatoTextual são subclasses de ArtefatoEspecificacao.
Por este motivo estes artefatos de especificação podem ser utilizados para formar uma Especificacao.
ArtefatoEspecificacão e ArtefatoEspecificacão Relacionamento de associação que é um auto-relacionamento da classe ArtefatoEspecificacao.
O objetivo deste auto-relacionamento é poder expressar a relação entre dois artefatos de especificação, por exemplo, entre um diagrama de classes e um caso de uso relacionado.
ArtefatoEspecificacão e Referência A classe Referência é uma classe associativa criada no auto-relacionamento ArtefatoEspecificacao.
Este relacionamento visa expressar que para cada autorelacionamento da classe ArtefatoEspecificacão, existirá uma descrição sobre esta relação.
Seu objetivo é manter um histórico de relações e possibilitar recuperar artefatos de especificação relacionados, ou seja, através do diagrama de classe recuperar o respectivo caso de uso que o gerou ou qualquer outro artefato que mantenha alguma relação com este.
Implementacão e InformacoesTeste Relacionamento de associação que possibilita associar nenhuma ou diversas instâncias de InfomacoesTeste a Implementacao.
Isso permite relacionar vários testes realizados sobre um componente.
Devido a a multiplicidade do relacionamento é possível que os testes sejam reaproveitados entre as diferentes versões do componente bem como possuir implementações sem casos de teste, o que diminui a qualidade e confiabilidade.
Implementacão e Documentacão Relacionamento de associação que visa associar documentações a implementação da versão do componente.
Uma implementação pode ter várias documentações, porém uma documentação é de uma única implementação.
Implementacão e Interfaces Relacionamento de associação representando que um componente deve ser composto por uma ou mais interfaces.
As interfaces disponibilizam os serviços disponibilizados por o componente, e estes serviços podem estar associados a mais de uma versão do componente.
Implementacão e Especificacão Relacionamento de associação que visa possibilitar a ligação entre a versão do componente de implementação e a de especificação, visando à busca entre esses tipos de componentes, por exemplo, através de uma versão de implementação recuperar os seus respectivos artefatos de especificação ou vice-versa.
Cada instância de Especificacão esta relacionada a várias instâncias de Implementacão ou nenhuma.
Instâncias de Implementacão podem estar relacionadas a uma instância de Especificacao.
Isto também permite ter várias implementações para uma especificação de um componente.
Interfaces e Metodos Interfaces possuem métodos e este relacionamento de associação visa atender essa ligação, onde deve existir no mínimo um método para cada interface e métodos podem ser de uma interface ou não.
A possibilidade de existir métodos que não fazem parte da interface é devido a a ligação de métodos com a classe de tipos dados.
Metodos e Parametros Métodos são compostos por parâmetros e este relacionamento de composição visa atender essa ligação.
O relacionamento permite que um método possua vários parâmetros, mas um parâmetro deve estar relacionado a somente um método e não podem existir de forma independente.
Resultados Baseado nos resultados do questionário foi possível identificar que as informações sobre as interfaces do componente tais como, nome da interface, descrição dos métodos, parâmetros, tipos de dado, a linguagem e o propósito foram consideradas informações essenciais para o reuso dos componentes.
Informações tais como versão, se o componente apresenta código-fonte ou executável foram consideradas desnecessárias para o entendimento e reuso do componente, porém consideradas importantes para o desenvolvedor escolher o componente no repositório.
Algumas informações não identificadas antes do processo de reuso foram identificadas através do questionário.
Estas informações se referem à representação de tipo de dados complexos para parâmetros, a associação de exceções aos métodos e a criação de uma classe chamada Documentacao.
Esta classe Documentacão armazena as informações relacionadas com o reuso do componente como, exemplos de códigos mostrando o uso do componente e questões relacionadas ao seu ambiente de execução.
Este capítulo apresentou um modelo de referência para descrição de componentes de software.
Este modelo é relevante para definição de uma documentação capaz de representar as informações necessárias para reutilizar o componente, e na definição de um repositório capaz de suportar atividades de DBC.
De entre os trabalhos utilizados como referência na pesquisa por propriedade e informações de componentes, e enfatizam a necessidade de estabelecer padrões de documentação bem estruturados para auxiliar no entendimento de características, funcionalidades e utilização do componente para o reuso.
Embora estes trabalhos apresentem características e algumas diretrizes para suprir tal necessidade, não apresentam um modelo.
Ainda, o modelo de referência está baseado numa pesquisa na literatura detalhada e parte das informações especificadas no modelo de referência foram avaliadas através de uma aplicação prática de reuso a qual permitiu o seu refinamento.
Esta aplicação prática foi focada em avaliar as informações sobre componentes de implementação, sendo uma das limitações deste trabalho.
O próximo capítulo apresenta a especificação de uma arquitetura para um repositório de informações de componentes de software baseada no modelo de referência definido.
Este capítulo apresenta conceitos, utilidade e a importância de repositórios de componentes de software para DBC.
Descreve uma pesquisa realizada sobre funcionalidades para repositórios de componentes darem suporte as atividades DBC Ainda, descreve uma pesquisa de campo, realizada numa unidade de desenvolvimento de software, sobre as funcionalidades identificadas.
Por fim, propõe uma arquitetura para repositórios de informações sobre componentes de software.
Definições de arquitetura de software podem ser encontradas na literatura (e.
g e).
De forma geral, uma arquitetura de software pode ser definida como a estrutura de um sistema a qual compreende os elementos do software e como estes se relacionam interna e externamente.
A arquitetura de software possui importância na melhoria da qualidade dos sistemas, representando uma abstração comum em alto nível de um sistema, além de antecipar as decisões de projeto e permitir o reuso de idéias, estilos e padrões arquiteturais.
Em este contexto, este capítulo apresenta uma arquitetura para repositórios de informações de componentes de software.
Esta arquitetura esta baseada no modelo de referência especificado no capítulo 3, num conjunto de funcionalidades levantadas na literatura e numa pesquisa de campo realizada para observar a importância destas funcionalidades sob a visão de profissionais de uma organização de desenvolvimento de software.
Esta arquitetura representa os elementos e como estes elementos se relacionam para atender tais funcionalidades, visando servir de referência para a construção de repositórios de informações de componente de software.
Um repositório de componentes é uma base de dados para o armazenamento e recuperação de componentes reutilizáveis.
Os repositórios de componente suportam o desenvolvimento de/ com componentes num processo de reuso, pois permite que desenvolvedores de aplicações armazenem e recuperem estes componentes para o reuso.
Sametinger em afirma que repositórios de componentes são importantes, pois considera impossível que os desenvolvedores estejam familiarizados com todas as informações sobre os componentes existentes ou até mesmo saber da existência destes componentes.
Para, repositórios de artefatos convencionais não são adequados para uso em DBC, pois são locais e centralizados, possuindo acessibilidade e manutenção limitada.
Afirma ainda que, para suportar atividade de reuso, os componentes devem possuir informações sobre ele armazenadas.
Em, o autor reforça esta opinião e acrescenta que estas informações englobam descrições num alto nível das características dos componentes, sendo utilizadas para melhor entender, buscar e recuperar os componentes no repositório.
Em um ambiente de desenvolvimento de software, repositórios de componentes são importantes, pois permite que desenvolvedores tenham acesso aos componentes e as suas informações rapidamente.
Segundo, a probabilidade de um desenvolvedor reusar um componente em vez de construir um novo depende essencialmente da disponibilidade do componente no repositório, do mecanismo de busca para encontrar este componente e da habilidade do programador em pesquisar no repositório.
Atualmente, se encontram na literatura da área, trabalhos que propõem repositórios para componentes, abordando técnicas, requisitos e funcionalidades desejadas para suportar características DBC.
Esta seção destaca três trabalhos, e, as quais serviram de referência para o desenvolvimento desta dissertação.
Os autores apresentam em teorias e técnicas necessárias para construção de um repositório para apoiar o processo DBC e um protótipo de um sistema de repositório para componentes.
Tais técnicas se referem à arquitetura de componentes, abordando a importância desta para realização das interações entre os componentes.
Frisam ainda a importância de um guia para produção, entrega, aquisição e composição de componentes e a necessidades da especificação dos componentes para o seu entendimento e reuso.
Por fim, apresentam um protótipo de um repositório para componentes.
As funcionalidades deste protótipo estão dividias em:
Gerenciamento de componentes, gerenciamento das informações sobre o componente, recuperação de informações e do componente para reuso.
A Figura 6 apresenta os subsistemas do protótipo dividido em módulos funcionais.
Armazenamento Busca e recuperação Controle de versão e gerenciamento de configuração Interface gráfica Controle de acesso Notificação de usuário Histórico de uso Relacionamentos Trabalhos descritos Trabalhos relacionados necessária para a heterogeneidade das diferentes formas de armazenamento dos componentes físicos.
Usuários devem ser capazes de explorar as informações dos componentes selecionados, visando encontrar componentes completos o bastante para atender os requisitos da aplicação que este será integrado.
Para, após a escolha por o componente desejado, um repositório deve permitir que seus usuários recuperem o componente físico para sua estação de trabalho e o utilizem em suas aplicações.
Braga, em, apresenta uma abordagem para busca e recuperação de componentes num ambiente de reutilização de software e afirma que para lidar com a complexidade da busca por componentes reutilizáveis, é necessário um mecanismo que combine características como:
Distribuição e heterogeneidade -- os componentes podem estar distribuídos e utilizar diferentes mecanismos de armazenamento;
Riqueza semântica para descrição dos componentes, com o objetivo de facilitar a busca;
E a flexibilidade para agregar novas informações a respeito de o componente ou agregar novos componentes a serem considerados por o mecanismo de busca.
Quando se pensa num repositório de componentes acessado por vários desenvolvedores, os quais buscam componentes que atendam dados requisitos para integrar- los em suas aplicações, é importante pensar também num controle sobre estes componentes armazenados.
Em, os autores afirmam que há necessidade de um mecanismo que controle as diversas versões de um mesmo componente, estabelecendo o relacionamento entre elas e um controle das modificações de cada versão.
Ainda, é importante para manutenção da consistência de um repositório que quaisquer intenções de modificar os componentes sejam comunicadas àquele responsável por a sua administração para que o mesmo, juntamente com outros responsáveis, possa analisar as alterações solicitadas e manter a coerência entre os diversos ativos de software.
Em, os autores afirmam que a atenção sobre esse tema ainda está aquém de a sua importância no DBC.
Os autores apresentam um estudo do processo de gerenciamento de configuração para desenvolvimento convencional e propõem adaptações para adequar- lo ao desenvolvimento baseado em componentes.
Em o trabalho apresentado em, os autores revisam os conceitos de gerenciamento de versão e configuração de software e os aplicam no contexto de desenvolvimento baseado em componentes, propondo um modelo de configuração para manter o rastro das diferentes dependências entre os componentes.
Repositórios devem suportar as interações do usuário na busca por componentes reutilizáveis.
Uma interface gráfica se faz necessária, pois permite guiar os usuários e facilitar o uso do repositório.
Deve possuir um conjunto de telas que interagem com os módulos do repositório visando inserir e obter informações sobre os componentes.
De acordo com, uma interface gráfica deve fornecer um suporte mais automatizado possível ao usuário na identificação, evolução e recuperação de componentes reutilizáveis.
Em o protótipo de um repositório apresentado em, o usuário interage com o repositório através de um conjunto de telas com botões de navegação.
Cada tela oferece opções de ajuda para auxiliar o entendimento do usuário e melhorar a interação.
Porém, é possível verificar uma tendência em repositórios serem voltados para Web, pois além de uma interface gráfica familiar aos usuários, suporta a distribuição, e.
Um repositório deve oferecer políticas de segurança que controle o acesso aos componentes e as funcionalidades do repositório.
Assim, pode- se determinar que a pesquisa por componentes no repositório esteja disponível a todos os usuários, mas somente usuários caracterizados como desenvolvedores terão acesso para recuperar estes componentes do repositório.
Um controle do acesso garante que somente pessoas autorizadas modifiquem o componente, sendo possível também manter um controle de quem acessou determinado componente, em que momento, etc..
O repositório de componentes deve possuir um mecanismo para notificar os usuários sobre as alterações realizadas nos componentes, inclusões e exclusões de componentes, e assim por diante.
Notificações podem ser disparadas por e-mail aos usuários ou grupos de usuários interessados no componente em questão.
Repositórios de componentes auxiliam no DBC, pois permite armazenar e gerenciar componentes reutilizáveis.
O estudo sobre funcionalidades apresentado na seção 4.4, contribuiu para apontar funcionalidades para repositórios de componentes de software oferecer suporte a DBC.
Analisando os trabalhos apresentados nas seções 4.3, observa- se que estes apresentam as funcionalidades identificadas de forma parcial.
A Tabela 27 apresenta o resultado da análise, observando se estes trabalhos apresentam cada funcionalidade de forma completa (Atende), se apresentam em parte(&amp; Atende parcialmente) ou se não apresentam determinada funcionalidade (Não atende).
Atendem tais funcionalidades de forma completa, preocupando- se em gerenciar os componentes e suas informações para auxiliar na busca, entendimento e reuso do componente.
Observa- se também a preocupação com sistemas de buscas que exploram as informações armazenadas sobre o componente, visando encontrar facilmente o componente desejado.
A funcionalidade interface gráfica, também é completamente atendida por os trabalhos analisados.
Tais trabalhos apresentam aspectos como interfaces adaptativas, conjunto de telas e botões de navegação, visualização de informações sobre os componentes entre outros que facilitam a interatividade com o usuário.
A funcionalidade controle de versão e gerenciamento de configuração é pouco mencionada nos trabalhos analisados, sendo apresentada de forma parcial somente em, o qual aborda apenas o gerenciamento de configuração dos componentes.
De a mesma forma, a funcionalidade de notificação de usuários é atendida apenas por, onde se preocupa em registrar o endereço de e-mail dos usuários e enviar mensagens.
A preocupação em controlar o acesso dos usuários é evidente, pois dois dos trabalhos analisados apresentam tal funcionalidade de forma completa.
Em, os autores apresentam um subsistema de gerenciamento de usuários, o qual gerência a informações sobre o usuário e controla o acesso destes.
Já em, o autor apresenta a preocupação com o acesso por diferentes tipos de usuários.
A funcionalidade de histórico de uso é atendida parcialmente em e.
Preocupam- se em coletar informações sobre a experiência de uso do componente, bem como um FAQ on-line suportando o envio de perguntas e respostas sobre o uso dos componentes armazenados.
Já as questões referentes às estatísticas de uso dos componentes ou do repositório não são mencionadas nos trabalhos analisados.
Por fim, a funcionalidade de relacionamento entre componentes é negligenciada nos trabalhos analisados.
Uma vez que esta funcionalidade é enfatizada neste trabalho como relacionamentos entre componentes através do seu ciclo de vida, é uma funcionalidade interessante, pois permite rastrear componentes que se ligam durante as diferentes fases do ciclo de vida de desenvolvimento.
De qualquer forma, tais trabalhos contribuem para minimizar as dificuldades apresentadas por a área.
Em, além de propor funcionalidades relacionadas ao armazenamento, busca e recuperação de componente, apresenta a preocupação com funcionalidades voltadas ao gerenciamento do repositório, como controle de acesso, histórico de uso e notificação de usuários.
A abordagem apresentada em, embora se concentre em divulgar e selecionar componentes, as funcionalidades estão representadas através de uma arquitetura, a qual permite visualizar a organização estrutural de um sistema de repositório.
Além disso, apresenta uma abordagem para o armazenamento e busca de componentes, a qual é avaliada através de um experimento utilizando o protótipo para um repositório de componentes baseado em conhecimento desenvolvido.
Embora diversos estudos estejam sendo desenvolvidos na área de DBC, a análise apresentada nesta seção identificou de entre trabalhos analisados a necessidades de uma abordagem para definição de repositórios de componentes que englobem o conjunto de funcionalidades identificadas na seção 4.4 (Funcionalidades Identificadas).
Partindo do levantamento descrito anteriormente, onde foram identificas as funcionalidades para repositórios de componentes de software na literatura, foi realizada uma pesquisa de campo para observar a importância destas funcionalidades para repositórios de componentes num ambiente real de desenvolvimento de software.
A pesquisa de campo procurou observar a percepção das equipes de desenvolvimento, quanto a real necessidade de cada funcionalidade para um repositório de componentes de software suportar o DBC.
Uma pesquisa de campo consiste em observar cuidadosamente um objeto (ou fenômeno) de interesse do pesquisador, através de técnicas de coleta, apresentação de dados e discussão qualitativa dos resultados.
O instrumento de coleta de dados utilizado foi um questionário com questões fechadas e uma questão subjetiva (Anexo I), o qual é descrito na próxima seção.
Conforme já mencionado neste trabalho, a academia e a indústria possuem diferente entendimento sobre o que é um componente.
A academia define componentes como entidades bem definidas.
Já a indústria, vê componentes como partes de um sistema que pode ser reusado, mas não necessariamente bem definidos, com explícitas interfaces e de acordo com um modelo de componentes.
Considerando esta diferente visão de componentes entre a academia e a indústria o questionário aplicado possui duas partes.
A primeira apresenta questões que testam o conhecimento dos respondentes em relação a os conceitos sobre componentes de software.
A segunda parte apresenta questões que observam a importância das funcionalidades identificadas na seção 4.4 (Funcionalidades Identificadas) para um repositório de componentes.
Ainda, uma questão subjetiva obtém sugestões sobre novas funcionalidades.
O objetivo de avaliar o conhecimento dos respondentes é considerar somente aqueles questionários onde o conhecimento sobre componentes de software fosse significativo, procurando maior confiabilidade nos resultados.
Para isso, foi calculado um valor como ponto de corte visando desconsiderar aqueles questionários que somarem um total de acerto inferior a este valor.
Para o cálculo do ponto de corte utilizou- se o valor resultante da média aritmética do total de acerto, menos o desvio padrão da quantidade de acertos.
As questões da segunda parte do questionário classificam as funcionalidades identificadas na seção 4.4 (Funcionalidades Identificadas) em:
&quot;Fundamental», &quot;Necessária», &quot;Desejável», &quot;Desnecessária «e &quot;Não aplicável «a um repositório de componentes de software de acordo com a Tabela 28.
Tabela 28 ­ Classificação das funcionalidades Classificação Fundamental Necessária Desejável Desnecessária Descrição A funcionalidade é fundamental para o funcionamento do repositório de componentes de software A funcionalidade é necessária a um repositório de componentes de software, porém não é essencial para o seu funcionamento.
A funcionalidade é desejável a um repositório de componentes de software, mas não é importante.
A funcionalidade é desnecessária a um repositório de componentes de software, mas sua existência não causará problemas ao seu funcionamento.
A funcionalidade não é aplicável a um repositório de componentes de software e a sua existência causará problemas ao seu funcionamento.
Não aplicável questionário significativo para o contexto pesquisa.
Analisando os dados dos respondentes considerados, observou- se que estes possuem um tempo de experiência na função maior do que mencionado para o grupo todo na seção 4.6.4 (Caracterização dos Respondentes).
De os trinta e sete respondentes considerados, 57% possuem de um a cinco anos de experiência na função, 30% possuem mais de cinco anos de experiência e 13% possuem menos de um ano de experiência.
Ainda, observou- se que nenhuma função ficou sem representação na análise devido a o ponto de corte.
De entre os respondentes considerados participaram sete gerentes de desenvolvimento, cinco gerentes de projeto, seis líderes técnicos, nove desenvolvedores, três engenheiros de teste, um testador, cinco arquitetos de sistemas e um DBA.
Os resultados da pesquisa de campo reafirmaram a necessidade das funcionalidades identificadas na literatura.
A Tabela 29 apresenta o resultado da classificação das funcionalidades.
Tais funcionalidades foram classificadas em fundamental, necessária, desejável, desnecessária e não aplicável para um repositório de componentes de software.
Os resultados da pesquisa de campo apontaram elevada importância do conjunto de funcionalidades identificadas na literatura, as quais foram apontadas por a maioria dos respondentes como fundamental, necessária ou desejável para um repositório de componentes de software.&amp;&amp;&amp;
De forma geral, os resultados reforçam a preocupação com o armazenamento, busca e recuperação de componentes apresentada na literatura, pois tais funcionalidades foram apontadas como fundamentais ou necessárias por 92% dos respondentes.
Retrata uma preocupação maior ainda por as funcionalidades de controle de versão e gerenciamento de configuração e controle de acesso ao repositório, consideradas fundamental ou necessária por mais de 97% dos respondentes.
A funcionalidade de controle de versão e gerenciamento de configuração é apontada com grande importância por os respondentes, sendo considerada fundamental ou necessária por 100% dos respondentes.
Isto pode ter ocorrido devido a a literatura estar ainda imatura quando se fala em controle e gerenciamento de versão no âmbito de DBC e.
Ou ainda, devido a o fato da academia e a indústria possuírem visões diferentes acerca de componentes e seus conceitos.
De qualquer forma, novos estudos devem ser feitos no sentido de corroborar tais hipóteses.
Os respondentes tiveram suas considerações mais distribuídas para as funcionalidades de relacionamento, interface gráfica e notificação de usuários.
Entre 60% e 75% dos respondentes consideraram as funcionalidades relacionamentos e notificação de usuário como fundamental ou necessária.
As funcionalidades de interface gráfica e histórico de uso foram consideradas fundamentais ou necessárias entre 50% e 59% dos respondentes.
Por fim, de entre as sugestões coletadas não foram identificadas novas funcionalidades.
Porém, foi possível coletar sugestões para aplicação das funcionalidades estudadas.
De entre as sugestões realizadas, cita- se a de um gerente de desenvolvimento em relação a a funcionalidade histórico de uso:
&quot;O repositório deve armazenar descrições dos usuários que usaram o componente retratando a experiência de uso.
Ainda, sugere- se um fórum apropriado para os usuários discutirem sobre o componente e encorajar o seu reuso.»
Outro gerente de desenvolvimento fez outra sugestão em relação a o controle de versão e configuração:
&quot;Manter no repositório informações sobre quais aplicações utilizaram cada componente.
Isto pode ajudar a medir o impacto das mudanças no componente.»
Assim, baseado nestes resultados e no estudo das funcionalidades identificadas na seção 4.4 (Funcionalidades Identificadas), identificou- se um conjunto de funcionalidades para repositórios de componentes de software suportar as atividades de DBC.
A próxima seção apresenta a arquitetura proposta, contendo os elementos e como estes elementos interagem para atender o conjunto de funcionalidades identificadas e servir de referência para construção de repositórios de informações sobre componentes de software.
Após o estudo das funcionalidades e da pesquisa de campo, foi definida uma arquitetura para repositórios de informações de componentes de software.
Esta arquitetura também está baseada no modelo de referência apresentado no capítulo 3 e no estilo arquitetural em camadas.
O estilo arquitetural em camadas auxilia na aplicação de estruturas que podem ser decompostas em grupos de tarefas com um nível particular de abstração.
Cada camada pode ser composta de vários elementos e suas interações.
As requisições são realizadas do nível mais alto para o mais baixo e as resposta no sentido contrário.
As principais vantagens do estilo arquitetural em camadas incluem o reuso de camadas e o suporte a padronização.
A arquitetura proposta apresenta três camadas, visando separar a lógica da aplicação numa camada de software intermediária, ficando a camada de apresentação (interfaces) livre de processamento ligado à aplicação.
A arquitetura proposta representa os elementos para suportar o gerenciamento das informações sobre componentes de especificação e implementação atendendo o conjunto de funcionalidades identificadas nos estudos realizados.
A Figura 9 ilustra a arquitetura definida, onde os retângulos representam as interfaces com o usuário e os módulos funcionais da arquitetura, as linhas ilustram as ligações entre os elementos e as figuras contidas no elemento Base de dados de informações representam as diferentes informações armazenadas.
Ainda, as figuras contidas no elemento Armazenamento de componentes representam os componentes físicos e as linhas pontilhadas destacam a referência contida nas informações sobre o componente para o componente físico, os quais estão armazenados em diferentes unidades de armazenamento.
A camada de interface contém a definição das interfaces gráficas do repositório, as quais auxiliam nas interações do usuário com a aplicação.
A camada de aplicação engloba a definição dos módulos funcionais de um repositório e a camada de armazenamento abrange a definição dos elementos responsáveis por armazenar as informações sobre o componente, usuários e dados históricos sobre o uso do componente.
Repositórios são acessados por diversos usuários que podem assumir três diferentes papéis:
Pesquisador de componentes, descritor de componentes e administrador do repositório conforme caracterizados a seguir:
Pesquisador: Permite efetuar buscas por componentes, visualizar as informações sobre os componentes selecionados e recuperar componentes da sua localização física para sua estação de trabalho.
Ainda, o pesquisador pode visualizar informações históricas sobre o uso dos componentes.
Descritor: Permite efetuar todas as operações do pesquisador, além de registrar os componentes inserindo- os no repositório.
Este usuário também tem permissão para inserir informações históricas sobre o uso do componente.
Administrador: Permite efetuar todas as operações do pesquisador e do descritor, além de cadastrar, alterar, remover e atribuir permissões de acessos de usuários.
Camada Aplicação Controle de acesso:
Elemento que implementa o controle de acesso dos usuários ao repositório.
Este elemento é responsável por validar os acessos de cada usuário e disponibilizar as interfaces gráficas do repositório de acordo com o seu papel.
Manutenção de usuários:
Elemento responsável por a manutenção das informações sobre usuários do repositório, suportando operações como a inserção, alteração e remoção de usuários.
Catalogação de componentes:
Elemento que implementa a manutenção das informações do componente.
Captura as informações sobre os componentes da Interface de publicação visando a inserção, alteração ou exclusão dos componentes no repositório.
Estas informações dizem respeito a descrição do componente de acordo com o modelo de referência apresentado no capítulo 3, sendo relevante para o entendimento e reuso dos componentes armazenados.
Este elemento também é responsável por implementar a funcionalidade de relacionamento, a qual permite o usuário relacionar um componente sendo inserido com outro já armazenado do mesmo ciclo de vida.
Manutenção de histórico de uso:
Elemento responsável por a manutenção das informações históricas sobre o uso dos componentes armazenados, suportando operações como a inserção, alteração e remoção de comentários sobre a experiência de uso do componente.
Este elemento também é responsável por coletar informações estatísticas através do registro das operações realizadas nos componentes, permitindo manter informações como, por exemplo, a freqüência de acesso a determinado componente, o usuário que alterou determinado componente, etc..
Busca por componentes:
Elemento que implementa o algoritmo de busca responsável por combinar informações dos componentes armazenados com os valores dos critérios de busca informados na interface de busca e recuperação, visando encontrar componentes candidatos ao reuso.
Recuperação de componentes:
Elemento responsável por a recuperação do componente selecionado, permitindo transferir o componente físico da sua localização para a estação de trabalho do usuário.
Isto é possível considerando que de entre as informações sobre o componente armazenadas possui a referência para sua localização física.
Mecanismo de notificação:
Elemento responsável por disparar mensagens de notificações aos usuários sobre novos componentes, alterações ou exclusões dos componentes armazenados.
Tais mensagens são e-mails enviados aos usuários registrados.
Armazenamento O processo de armazenar um componente é visto neste trabalho como a publicação do componente no repositório.
Para publicar um componente, o elemento Catalogação de componentes extrai as informações sobre o componente, inseridas na Interface de publicação por o usuário, a fim de descrever o componente no repositório.
De entre as informações para descrever o componente inclui- se a referência para o componente físico armazenado no elemento Armazenamento de componentes.
O elemento Catalogação de componentes interage como o elemento Interação com a base de dados para efetuar o registro das informações sobre o componente inseridas por o usuário na Base de dados de informações.
Em o momento da publicação de um componente, também é possível visualizar e relacionar informações de componentes já armazenados de um mesmo ciclo de vida, por exemplo, relacionar um componente de implementação com o seu respectivo componente de especificação.
Para isso o usuário pode através do elemento Interface de publicação disparar a operação de relacionamento entre componentes.
O elemento de Catalogação de componentes interage com o elemento Interação com a base de dados para buscar na Base de dados de informações as informações sobre outras versões do mesmo componente dentro de o ciclo de vida e então disponibilizar para o usuário através da Interface de publicação.
O usuário escolhe o componente que deseja relacionar e então interage novamente com elemento Catalogação de componentes para registrar o relacionamento na Base de dados de informação juntamente com as informações do componente.
Busca e Recuperação O elemento Busca por componentes realiza as buscas por informações sobre os componentes publicados no repositório.
Sua responsabilidade é combinar os valores dos critérios de busca, informados na Interface de busca e recuperação por o usuário, com as informações dos componentes previamente armazenadas.
Para isso, o elemento Busca por componentes também interage com o elemento de Interação com a base de dados, visando ter acesso as informações dos componentes e disponibilizar- las na Interface de busca e recuperação para o usuário como resultado da busca.
Desta forma são encontrados componentes candidatos ao reuso e disponibilizado na Interface de busca e recuperação para o usuário decidir por aquele que melhor satisfaça os requisitos da aplicação.
A Interface de publicação oferece opções para os usuários explorarem as informações sobre os componentes armazenados, bem como as informações de histórico de uso do componente.
Depois de selecionado o componente desejado, o usuário pode realizar a recuperação física do componente para sua estação de trabalho.
Então, o elemento Interface de busca e Recuperação interage com o elemento Recuperação de componentes para realizar a recuperação do componente no elemento Armazenamento de componentes e ter acesso ao componente físico.
Controle de Versão e Gerenciamento de Configuração Esta funcionalidade está focada em gerenciar as informações sobre as diferentes versões dos componentes e as modificações realizadas em cada versão publicada no repositório.
Assim, esta funcionalidade é atendida por diversos elementos da arquitetura.
O elemento de Catalogação de componentes suporta a publicação de diferentes versões do componente.
Ainda, esta funcionalidade utiliza- se do elemento Catalogação de componentes e Busca por componentes para gerenciar as informações sobre as modificações realizadas nos componentes e as aplicações que usam determinada versão, permitido inserir e consultar tais informações.
Para isso, tais elementos interagem com a Interface de publicação e a Interface de busca e recuperação, visando obter e disponibilizar informações sobre versões para o usuário.
O elemento Interação com a base permite a interação com a Base de dados de informações para registrar e consultar informações sobre versões.
Por fim, utiliza- se do elemento Notificação de usuários visando notificar os usuários interessados sobre novas versões de um determinado componente.
Interface Gráfica As interações entre os usuários e o repositório são realizadas através de um conjunto de interfaces gráficas.
Estas interfaces gráficas implementam as telas de interação, permitindo que usuários autorizados informem e visualizem informações dos componentes, efetuem a busca e recuperação dos componentes para sua estação de trabalho e visualizem dados históricos sobre o uso dos componentes.
Ainda, se o usuário for o administrador do repositório, permite informar dados de usuários.
A interface gráfica do repositório é composta por:
Interface de login, Interface de manutenção de usuários, Interface de publicação, Interface de busca e recuperação e Interface de histórico de uso.
Os usuários possuem a possibilidade de navegar entre essas interfaces conforme o seu papel e permissões de acesso.
Controle de Acesso O acesso do usuário ao repositório é realizado através do elemento Interface de login, a qual obtém as informações de identificação e senha do usuário.
O elemento Controle de acesso é responsável por validar estas informações e disponibilizar para o usuário os módulos do repositório conforme o seu papel.
O elemento de Manutenção de usuários auxilia neste processo, pois permite ao administrador inserir, alterar ou remover usuários do controle de acesso do repositório.
Para isso o elemento Manutenção de usuário interage com o elemento Interação com a base de dados visando realizar o registro e consulta das informações sobre o usuário armazenadas na Base de dados de informações.
Notificação do Usuário Para atender esta funcionalidade, o elemento Mecanismo de notificação interage com usuário visando informar- lo sobre alterações recentes realizadas em determinados componentes ou exclusões de componentes do repositório.
Uma notificação é identificada através do elemento Interação com a base de dados, o qual ao realizar inserções de novas versões dos componentes ou exclusões interage com o Mecanismo de notificação para informar a operação realizada e o componente em questão.
O elemento Interação com a base de dados realiza o acesso a Base de dados de informações para obter as informações sobre usuários para o envio da notificação.
Histórico de Uso Para atender a esta funcionalidade, o elemento Manutenção de histórico de uso extrai as informações sobre o uso dos componentes informadas por o usuário como comentários, experiência de uso, etc., ou registra as operações realizadas por os usuários.
Assim, este elemento mantém uma base histórica com as informações fornecidas por o usuário e o registro das operações realizadas por os usuários na busca e recuperação dos componentes do repositório.
A base histórica poderá conter, além de os comentários de uso sobre o componente, informações como, os componentes mais acessados, os componentes recuperados por determinado usuário, etc..
Para isso, o elemento Manutenção de histórico de uso interage com o elemento Interação com a base de dados para o acesso a Base de dados de informações, visando registrar as informações históricas, possibilitando assim que estas sejam consultadas posteriormente.
Informações históricas são importantes, pois podem auxiliar na escolha por um determinado componente de entre os componentes candidatos.
Relacionamentos O relacionamento entre os tipos de componentes é realizado por o elemento Catalogação de componentes no repositório.
Assim, no momento da publicação de um componente de implementação é possível referenciar o componente de especificação respectivo publicado previamente ou vice versa.
Desta forma, através da Interface de publicação o usuário pode escolher, de entre os componentes do mesmo ciclo de vida, aquele que deseja relacionar com o componente sendo publicado.
O elemento de Catalogação de componentes interage com o elemento de Interação com a base de dados para acessar a Base de dados de informações e registrar os relacionamentos realizados, juntamente com os dados do componente sendo publicado.
Este capítulo apresenta a descrição de um protótipo da arquitetura proposta, explanando como este foi implementado e como disponibiliza algumas das funcionalidades identificas na seção 4.4 (Funcionalidades Identificadas).
Visando demonstrar a aplicabilidade da arquitetura proposta, foi desenvolvido um protótipo.
Os elementos implementados neste protótipo atendem às funcionalidades de interface gráfica, controle de acesso, armazenamento, busca e o relacionamento entre os componentes.
A escolha por as funcionalidades a serem implementadas levaram em consideração a importância e a complexidade de cada funcionalidade, permitindo definir um escopo apropriado para o protótipo.
A Figura 10 apresenta o diagrama de casos de uso UML representando as principais funcionalidades do protótipo desenvolvido.
Devido a o protótipo ter sido desenvolvido como trabalho de conclusão de um aluno do curso de Ciência da Computação da PUCRS, este diagrama representa as funcionalidades em linha gerais.
A especificação completa do protótipo pode ser verificada em.
Para especificação dos requisitos do protótipo, a definição e a descrição dos casos de uso apresentados na Figura 10, foi utilizado a abordagem proposta por o projeto Requirements Process Improvement desenvolvido no CDPe.
O projeto propõe um modelo para especificação dos requisitos em linguagem natural.
Ainda, apresenta uma ferramenta para auxiliar na construção destes requisitos e um guideline para extrair, dos requisitos especificados, os casos de usos e suas descrições.
A ferramenta apresenta estruturas de frases padrão para a especificação de requisitos considerando a língua inglesa.
Consequentemente, as descrições dos casos de uso são feitas na mesma linguagem.
Em este contexto, o protótipo apresenta- se na língua inglesa e as descrições dos casos de uso permanecerão em inglês neste documento, visando evitar distorções nas traduções destes para o português.
As descrições dos casos de uso da figura 10 estão apresentadas no Anexo II deste documento.
Cada caso de uso está descrito em seções conforme a Tabela 31.
Esta seção apresenta as principais interfaces gráficas do protótipo desenvolvido.
Um exemplo de uso deste protótipo demonstrando sua aplicabilidade pode ser verificado em.
A Figura 11 apresenta a interface de login do usuário, a qual permite o acesso dos usuários ao protótipo.
A interface apresenta campos para a identificação do usuário e um botão para o envio das informações para validação do acesso.
Como resultado da busca, são apresentadas telas com um conjunto de informações sobre os componentes, as quais foram previamente armazenadas por a publicação do componente.
Opções para explorar as informações sobre os componentes são oferecidas ao usuário caso algum dos componentes retornado por a busca seja interessante ao reuso.
Esta seção apresenta os diagramas de classes UML, representando aspectos de implementação dos elementos da arquitetura desenvolvidos no protótipo.
Tais diagramas foram extraídos de, que apresenta a especificação completa do protótipo.
As seções a seguir apresentam o diagrama de classes para cada elemento da arquitetura implementado no protótipo, descrevendo cada classe e suas interações.
Para melhor compreensão os nomes das classes estão apresentados em itálico.
O elemento controle de acesso é implementado através das classes UserLoginInfo e LoginAction.
A Figura 24 apresenta o diagrama de classes deste elemento.
Descrição Informações sobre componentes independente da sua natureza.
Informações sobre versões de componentes de especificação.
Informações sobre artefatos de especificação do tipo diagrama.
Informações sobre artefatos de especificação do tipo textual.
Informações sobre características funcionais.
Informações sobre características não funcionais.
Informações sobre as aplicações que a versão foi integrada.
Informações sobre relacionamentos entre versões de um mesmo componente e entre artefatos de especificação pertencentes a uma mesma versão de especificação Para auxiliar no relacionamento entre versões foi criada a classe VersionSummary que mantém as informações sobre a versão do componente de maneira resumida.
As informações resumidas sobre as versões são apresentadas ao usuário para auxiliar na identificação do componente no momento de realizar relacionamento.
A classe PublishComponentAction é responsável por delegar o fluxo de controle sobre a inserção de das informações sobre o componente na base de dados.
Inserção de versões de componentes de implementação As classes que implementam a inserção das informações sobre versões de componentes de implementação estão representadas no diagrama apresentado na Figura 27.
A classe ComponentAction é responsável por controlar o fluxo de navegação entre as páginas JSPs que implementam as interfaces de publicação de componentes.
Para isso, a classe ComponentAction instancia a classe ComponentManagerEJBBean, que é um EJB do tipo session sendo responsável por controlar as operações efetuadas sobre as informações de versão dos componentes de implementação, gerenciando um conjunto de classes que implementam cada operação de maneira individual.
O EJB (ComponentManagerEJBBean) é criado por a interface ComponentManagerEJBHome no contêiner local.
A interface ComponentManagerEJB é utilizada para permitir a comunicação com o EJB (ComponentManagerEJBBean).
A Tabela 34 apresenta o conjunto de classes responsáveis por controlar a coleta dos dados fornecidos por os usuários, para a inserção das informações sobre versão de componentes de implementação.
A classe VersionSummary auxilia na implementação dos relacionamento entre versões pois mantém as informações sobre a versão do componente de maneira resumida.
As informações resumidas sobre as versões são apresentadas ao usuário para auxiliar na identificação do componente no momento de realizar relacionamento.
A classe PublishComponentAction é responsável por delegar o fluxo de controle sobre a inserção de das informações sobre o componente na base de dados.
Informações sobre componentes independente da sua natureza.
Informações sobre versões de componentes de especificação.
Informações sobre artefatos de especificação do tipo diagrama.
Informações sobre artefatos de especificação do tipo textual.
Informações sobre versões de componentes de implementação.
Desenvolver software com qualidade e de forma produtiva são preocupações evidentes nas organizações de desenvolvimento de software atuais.
DBC surge como uma abordagem interessante, pois permite desenvolver sistemas de software através de componentes previamente desenvolvidos para o reuso.
De entre as vantagens oferecidas, inclui a melhoria no gerenciamento da complexidade do sistema, o aumento da produtividade, melhora na qualidade, um maior grau de consistência e um alto índice de usabilidade.
Porém para usufruir de tais vantagens é necessária uma sistemática abordagem para DBC em nível de processos e tecnologia, pois DBC ainda apresenta desafios.
De entre os desafios citados por o autor, inclui- se a definição de repositórios de componentes e ferramentas para gerenciar estes repositórios com objetivo de suportar o DBC de maneira simples e eficiente.
Em este trabalho foi realizado um levantamento bibliográfico sobre funcionalidades para repositórios de componentes de software.
Após este levantamento, uma pesquisa de campo realizada numa empresa de desenvolvimento de software permitiu observar a importância destas funcionalidades para repositórios de componentes de software, sob o ponto de vista dos profissionais da área de desenvolvimento.
Analisando alguns trabalhos sobre repositórios de componentes, verifica- se que estes apresentam tais funcionalidades parcialmente.
Observa- se também a necessidade de uma arquitetura que defina os elementos e suas interações para suportar o conjunto de funcionalidades identificadas e servir de referência para a construção de repositórios de componentes de software.
Ainda, este trabalho estabelece um modelo de referência, baseado num levantamento sobre propriedades e informações de componentes de software, contendo informações que descrevem componentes de especificação e implementação para serem armazenados no repositório.
Em este contexto, este trabalho propõe uma arquitetura para repositórios de informações de componente de software capaz de suportar atividades de DBC.
A arquitetura proposta contempla os elementos arquiteturais e suas interações, atendendo o conjunto de funcionalidades identificadas e servindo de referência para construção de repositórios capazes de gerenciar informações sobre componentes de especificação e de implementação.
A arquitetura proposta é a principal contribuição deste trabalho, pois auxilia na definição de repositórios de informações sobre componentes de software oferecendo suporte as atividades de DBC.
A arquitetura proposta:
Teve sua especificação elaborada com base em um levantamento bibliográfico sobre funcionalidades para repositórios de componentes de software e uma pesquisa de campo que permitiu observar a importância destas funcionalidades sob o ponto de vista de profissionais de uma empresa de desenvolvimento de software;
Define os elementos arquiteturais e como estes elementos interagem para atender o conjunto de funcionalidades identificadas através da literatura e da pesquisa de campo, contemplando o conjunto de funcionalidades uma vez que os trabalhos analisados apresentam estas funcionalidades parcialmente;
Serve de referência para a construção de repositórios de informações de componentes de software para suportar atividades DBC, conforme verificado através do protótipo apresentado neste trabalho;
Utiliza- se do modelo de referência para suportar o armazenamento de informações sobre componentes de especificação e implementação;
O modelo de referência apresentado no capítulo 3 (Modelo de Referência para Descrição de Componentes de Software) também é uma contribuição deste trabalho, sendo relevante para a descrição de componentes de software.
O modelo representa informações para descrever componentes de especificação e implementação, expandindo a preocupação com componentes nas diferentes fases do desenvolvimento de software.
De entre as principais características do modelo cita- se:
Suporte para o controle das diferentes versões dos componentes através da identificação de informações como o número da versão, data da liberação da versão e descrição das modificações realizadas;
Suporte para a especificação das aplicações que o componente foi integrado, permitindo recuperar informações históricas das integrações dos componentes, tais como a versão que esta em uso em determinada aplicação entre outras;
Suporte para o relacionamento entre os tipos de componentes permitindo manter o relacionamento entre versões de especificação e implementação de um mesmo componente.
Isto possibilita, por exemplo, rastrear o componente no seu ciclo de vida ou ainda, referenciar implementações em diferentes tecnologias para uma especificação do componente;
Especificação das interfaces do componente, onde através da descrição dos métodos, parâmetros, exceções e tipos de dados permitem ao usuário do componente conhecer e utilizar dos serviços oferecidos por o componente.
