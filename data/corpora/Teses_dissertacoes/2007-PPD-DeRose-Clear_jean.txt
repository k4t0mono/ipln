Para alocar recursos e submeter tarefas numa grade computacional serviços de descoberta, alocação e escalonamento precisam conhecer o desempenho dos recursos.
Como as tarefas serão executadas num momento futuro, estes serviços podem empregar algoritmos de predição para prever o desempenho dos recursos, melhorando a qualidade de suas decisões.
Além disso, algoritmos de predição baseados em séries temporais demandam informações históricas sobre o desempenho dos recursos para prever o comportamento futuro dos mesmos.
Para dar suporte a algoritmos e serviços de predição é proposto o GIStorage, um serviço de informação para grades computacionais projetado para armazenar informações sobre recursos.
O GIStorage é baseado no modelo GMA, sendo estruturado como uma árvore para obter bom desempenho e armazenar grande volume de dados.
Este trabalho é dedicado ao estudo de serviços de informação para grades computacionais.
Com o propósito de dar suporte a algoritmos de predição é proposta uma nova arquitetura de serviço de informação.
Avanços nas tecnologias de redes de computadores e infra-estrutura computacional tornaram possível a construção de ambientes computacionais distribuídos de alto desempenho em grande escala.
Tais ambientes, conhecidos como grades computacionais, são formados por recursos heterogêneos, distribuídos geograficamente e conectados por a Internet.
Grades computacionais possibilitam o compartilhamento de recursos entre diversas organizações.
É justamente essa característica que torna as grades tão atrativas, porém, essa mesma característica as tornam dependentes de serviços de monitoramento capazes de realizar tanto o monitoramento quanto a descoberta de recursos.
Serviços de monitoramento são usados para encontrar recursos pertencentes à grade e verificar em que estado se encontram.
Uma série de serviços necessitam de mecanismos de monitoramento para realizar com êxito suas tarefas, tais como:
Descoberta de recursos, escalonamento de tarefas, broker, monitor de tempo real, entre outros.
Em especial, serviços de descoberta e alocação de recursos e escalonamento de tarefas têm por objetivo escolher os recursos que melhor atendem as necessidades de desempenho da aplicação e dividir as tarefas de acordo com a capacidade de cada recurso.
Tais serviços podem empregar algoritmos de predição de desempenho em suas análises para melhorar os seus resultados.
Exemplos de benefícios do uso de predição na descoberta e seleção de recursos podem ser encontrados nos trabalhos de Downey e Smith, já os resultados obtidos por Berman Diversos algoritmos de predição baseiam- se em séries temporais.
Os modelos matemáticos empregados podem variar desde simples técnicas como média ou mediana até técnicas mais elaboradas como modelos de auto-regressão.
Entretanto, todos estes modelos requerem informações históricas sobre o desempenho dos recursos.
Para dar suporte a algoritmos e serviços de predição este trabalho propõe um serviço de informação para grades computacionais (GIS) cujo objetivo principal é armazenar informações históricas sobre o desempenho dos recursos.
Tal serviço, chamado de GIStorage, permite que serviços de predição concentrem- se somente no processamento das informações coletadas ao invés de gerenciar sensores e as informações produzidas, liberando- os de problemas relacionados a grande quantidade de dados, escalabilidade, entre outros.
Usando um serviço de informação, usuários podem acessar informações históricas sobre o desempenho dos recursos independentemente do algoritmo ou serviço de predição empregado.
Além disso, organizações virtuais (OV) podem usar os sensores que melhor atendem as suas políticas internas, não sendo imposta a instalação de sensores compatíveis com determinados serviços de predição.
Naturalmente, tanto os sensores quanto os serviços de predição devem compreender os protocolos definidos por o GIStorage.
O objetivo deste trabalho é propor uma nova arquitetura para serviços de informação para grades com suporte a algoritmos de predição.
O serviço deve armazenar informações históricas sobre o desempenho dos recursos.
Para o projeto de um serviço de informação uma série de questões devem ser tratadas como heterogeneidade de recursos e informações, grande volume de dados, desempenho, escalabilidade e padronizações.
Devido a diversidade de recursos existentes numa grade, as informações de desempenho variam.
Deve- se utilizar um modelo de informação capaz de descrever recursos heterogêneos e suas relações com os demais.
Grades computacionais possuem numerosos recursos.
Para cada um destes deve- se manter informações históricas, gerando um grande volume de dados para serem armazenados.
Além disso, a arquitetura deve gerenciar tais informações de forma escalável, permitindo um elevado número de recursos.
Empregam- se algoritmos de predição com intuito de melhorar o desempenho de aplicações.
Um serviço de informação deve ser estruturado para obter e entregar informações aos algoritmos de maneira otimizada, reduzindo o tempo despendido com a predição.
Para que o serviço seja amplamente utilizado é necessário basear sua arquitetura em padrões para grades computacionais.
O serviço deve respeitar padrões como WSDL e WSRF, assim como as recomendações provenientes de instituições como OASIS, OGF e O trabalho está divido em seis capítulos.
Em o capítulo introdutório (capítulo corrente), são apresentados os objetivos e motivação para a realização deste trabalho.
Em o segundo capítulo a importância dos serviços de predição e os requisitos dos mesmos são descritos.
O Capítulo 3 trata sobre os trabalhos relacionados.
Em o Capítulo 4 é definida a arquitetura do novo serviço, sendo elucidadas as decisões de projeto e as suposições a cerca de suas qualidades.
Os resultados obtidos por meio de simulações podem ser vistos no Capítulo 5.
Por fim, o sexto capítulo discorre sobre as considerações finais deste trabalho.
O objetivo deste trabalho é propor uma nova arquitetura para serviços de informação para grades com suporte a algoritmos de predição.
Para dar suporte adequado é necessário conhecer o funcionamento, utilidade e requisitos dos algoritmos e serviços de predição.
Os algoritmos de predição são empregados nas várias etapas que precedem a execução de aplicações.
Para melhor compreender a sua importância, são descritos abaixo os principais usos de algoritmos de predição.
A execução de uma aplicação em grade abrange uma série de etapas que vão desde a descoberta dos recursos e atribuição de tarefas até o monitoramento da execução.
Durante as etapas de descoberta, alocação e escalonamento podem ser empregadas técnicas de predição visando um melhor desempenho da aplicação.
A etapa inicial é a descoberta de recursos, que se caracteriza por a verificação dos recursos que estão disponíveis para o usuário.
Em um primeiro momento, deve- se verificar quais recursos que o usuário tem acesso, evitando assim, analisar detalhadamente elementos que o usuário não poderá utilizar.
Em as próximas etapas deve- se realizar uma análise mais detalhada, excluindo- se os recursos que não possuem os requisitos mínimos exigidos por a aplicação.
Em a etapa seguinte é realizada uma seleção dos recursos visando escolher aqueles que melhor se adequam as necessidades da aplicação.
Em esta etapa, deve- se levar em consideração as características dos recursos como, carga do processador, memória disponível, latência da rede, entre outras, no momento em que a aplicação irá executar, pois:
Aplicações paralelas freqüentemente têm um tempo de execução elevado e durante esse período as características dinâmicas dos recursos podem variar significativamente em relação a os valores encontrados no momento da escolha dos mesmos;
Aplicações que empregam vários recursos necessitam reservar- los para um momento futuro onde será possível usar- los simultaneamente, porém, naquele instante as características podem ter sofrido grandes modificações.
Portanto, o emprego de técnicas de predição para realizar uma seleção baseada no comportamento futuro dos recursos pode ter impacto positivo no desempenho final da aplicação.
As informações de predição de desempenho podem ser providas por o administrador do recurso usando um service level agreement, ou obtidas através da análise do histórico de desempenho do recurso.
Pode- se inclusive empregar este último como método na geração do Logo após a seleção, é necessário fazer o mapeamento das tarefas nos recursos alocados.
O objetivo desta etapa é gerar um mapeamento de forma que otimize o desempenho segundo critérios do usuário.
Para comparar diferentes tipos de mapeamentos e eleger aquele que atinge melhor desempenho pode- se modelar matematicamente a aplicação de acordo com sua necessidade.
Por exemplo, o tempo de execução de uma tarefa pode ser representado por o número de instruções que irá executar e por o número de mensagens que irá enviar ou receber.
Conhecendose a capacidade de processamento e a banda de rede disponível para cada recurso é possível calcular uma estimativa do tempo de execução de uma tarefa e assim eleger o mapeamento que finalizará a aplicação num menor tempo.
Como as tarefas executarão num momento posterior a etapa de mapeamento, o uso de algoritmos de predição pode auxiliar na determinação das características dos recursos no instante em que a aplicação irá executar.
Resultados obtidos auxílio ao escalonamento.
O uso de técnicas de predição não se restringe aos exemplos acima, incluí- se também previsão de tempo de execução de aplicações baseadas na carga do processador, previsão do tráfego do próximo ano de um backbone, previsão do tempo de espera na fila do escalonador, entre outros.
Diversos algoritmos e serviços de predição foram propostos ao longo de os anos, de entre os anteriores.
O NWS foi projetado para prever o desempenho de recursos de uma grade, sendo usado por o AppLes para auxiliar na seleção e escalonamento de aplicações paralelas.
A arquitetura do NWS é composta por sensores, repositórios e algoritmos de predição.
Os sensores são processos que monitoram os recursos e geram informações sobre o desempenho corrente dos mesmos.
Tais informações são posteriormente armazenadas num repositório distribuído que é acessado por os algoritmos para realizar a predição de desempenho.
As informações coletadas são armazenadas em repositórios para posterior recuperação.
Os repositórios são gerenciados por um processo que recebe pedidos de inserção e de recuperação.
Podem existir mais de um repositório na grade e um único repositório pode conter informações sobre vários recursos.
O repositório é composto por vários arquivos de texto comuns, organizados como uma fila circular, onde os dados mais antigos são retirados ao passo que novos são inseridos.
Baseados nas informações armazenadas nos repositórios os algoritmos de predição do NWS são capazes de prever o estado dos recursos uma unidade de tempo no futuro.
Uma unidade de tempo refere- se ao intervalo entre duas medições dos sensores.
A predição é calculada aplicando- se equações estatísticas como média ou mediana sobre séries temporais, obtendo valores aproximados para o comportamento futuro dos recursos.
O Remos foi projetado para prover informações sobre os recursos, abrangendo o estado do processador, rede, entre outros.
O Remos possui ainda um serviço de predição capaz de prever o desempenho futuro dos recursos.
A arquitetura do Remos pode ser vista na Figura 2, sendo composta por coletores, serviço de predição, Modeler e aplicações.
Os coletores são semelhantes aos sensores do NWS, responsáveis por coletar informações sobre o estado do processador (carga média) e rede (carga atual).
O coletor Master mantém registro dos coletores e das porções da rede em a qual eles atuam, abstraindo da aplicação a existência e localização dos mesmos.
Aplicações de usuário utilizam a API do Remos para coletar as informações.
Tal API é chamada de Modeler.
O Remos inclui um serviço de predição que recebe um vetor de dados coletados e produz uma predição para um tempo futuro, determinado por o usuário.
O serviço permite também a geração contínua de predições, tão logo sejam coletadas mais informações.
Outra característica do Remos é permitir o compartilhamento de predição entre vários usuários para não comprometer o desempenho do sistema, como aconteceria caso cada usuário solicitasse a mesma predição sob demanda.
O serviço de predição emprega diversos algoritmos baseados em modelos de séries temporais, como: Box--
Jenkins, AR, ARIMA, Arma, MA, além de um modelo de média para solicitações long term.
Em contraste com Remos e NWS que predizem o desempenho para um momento pontual um intervalo de tempo futuro.
O algoritmo é usado para auxiliar no escalonamento de clusters.
O escalonador gera uma série de mapeamentos e, empregando equações que levam em consideração o histórico da carga do processador e da rede, verifica qual alcançará melhor desempenho num intervalo de tempo futuro, condizente com o tempo de execução de uma tarefa.
Emprega- se um algoritmo que separa a série temporal em sub-séries, calcula a média destas sub-séries gerando uma nova série que por fim é usada para predizer o desempenho num intervalo de tempo determinado por o usuário.
Os testes realizados utilizaram dados coletados por uma ferramenta que armazenou a carga do processador das máquinas durante um período de 240 minutos.
O PACE é um sistema de predição capaz de prever o desempenho de aplicações paralelas executando sobre ambientes paralelos ou distribuídos.
O PACE permite a análise de diferentes mapeamentos, verificação de escalabilidade de uma aplicação, escalonamento e balanceamento de carga e predição de tempo de execução.
Isso é possível combinando análise do código e do ambiente sobre o qual será executado.
A arquitetura do PACE, mostrada na Figura 3, é composta por ferramentas de aplicação, que analisam o código fonte e geram um script contendo os resultados da análise, e por ferramentas de recursos, que analisam características como capacidade de CPU, cache e rede e geram outro script que, em conjunto com o anterior, será usado para gerar as predições.
A análise do código permite gerar um modelo da aplicação que descreve suas necessidades computacionais, já o modelo do recurso busca equacionar as suas capacidades.
A o efetuar um cruzamento de ambos os modelos pode- se predizer o tempo de execução da aplicação, encontrar melhores mapeamentos para as tarefas, entre outros.
As predições de desempenho dos recursos são gerados a partir de resultados de benchmarks, modelos estatísticos (baseados em histórico) e analíticos (baseados na arquitetura).
Uma vez construído, o modelo do recurso é armazenado para posterior uso.
Os serviços e algoritmos descritos anteriormente são caracterizados por aplicar análises em séries de tempo, ou seja, a partir de uma série temporal de dados sobre determinada característica é aplicada uma técnica para predizer o próximo ou próximos valores da série.
A técnica pode variar podendo ser empregada média aritmética, mediana, modelos de auto-regressão, entre outros.
Entretanto, todas têm como ponto comum a análise de uma série de tempo.
O número de elementos da série pode variar, sendo difícil de definir a priori o número total que resulte em melhores predições.
Contudo, o total de elementos depende, em geral, de quanto tempo a frente se deseja realizar a predição.
Para um tempo relativamente curto como um segundo no futuro, um total de 2000 entradas pode ser suficiente, porém, para uma predição meses a frente um ano de dados coletados pode ser necessário.
Como exemplo do primeiro toma- se a predição da carga do processador usando- se a configuração padrão do NWS, já do segundo, a predição de um ano do tráfego de rede de um backbone, como exemplificado por Groshwitz et al.
Um aspecto convergente entre os algoritmos é a necessidade de dados sobre o recurso em termos de CPU e rede de interconexão.
Serviços como o NWS ou Remos possuem uma série de sensores responsáveis por obter e distribuir dados relativos ao desempenho dos recursos.
Tais dados se concentram na carga do processador, memória física disponível, número de processos, latência e carga da rede.
PACE acrescenta ainda a necessidade de informações relativas a determinados benchmarks.
O uso desses algoritmos também varia de escalonamento de tarefas a seleção de recursos, testes de escalabilidade, entre outros.
Nota- se que no caso de escalonamento as informações de histórico de desempenho devem ser obtidas com grande eficiência uma vez que esta etapa não pode se estender por muito tempo.
Além disso, o intervalo de tempo histórico solicitado não é muito elevado pois o tempo de execução do algoritmo de predição é proporcional ao número de elementos da série.
Por outro lado, predição para tempos muito a frente ou para se criar um modelo de desempenho do recurso necessitam de um intervalo de tempo histórico maior, não possuindo uma restrição de tempo tão expressiva quanto a do escalonador.
O GIStorage abstrai para os serviços de predição e sensores os problemas ligados ao grande volume de dados, a escalabilidade, resposta eficiente, distribuição das informações, etc, permitindo que ambos se concentrem nas tarefas de tratar e gerar as informações, respectivamente.
Um ponto que facilita a integração dos serviços de predição é o fato de ambos utilizarem informações sobre as mesmas características:
Carga do processador, latência da rede, espaço em memória e disco, resultados de benchmarks, etc..
Existem diversas ferramentas que produzem este tipo de informação como vmstat para carga do processador em sistemas UNIX, Ganglia para clusters, Nagios para redes de computadores, Hawkeye para redes Condor, entre outros.
O uso de um serviço de informação permite que o administrador de uma organização escolha os sensores de acordo com as políticas internas não sendo necessário impor as OV a instalação de determinados sensores, muitas vezes de mesma função, devido a os serviços de predição.
Como discutido no capítulo anterior, algoritmos de predição são usados para auxiliar serviços de descoberta e alocação de recursos e escalonamento de tarefas.
Para prever o comportamento futuro dos recursos, tais algoritmos demandam informações históricas sobre o desempenho dos mesmos.
Tanto Remos quanto NWS são soluções completas tendo seus próprios sensores e elementos de armazenamento para manter o histórico dos recursos.
Entretanto, ambos não são capazes de cooperação um com o outro, impondo a todas as OV participantes a instalação de um destes ou ainda obrigando os programadores a criarem códigos para mais de um sistema.
Com o propósito de melhorar a cooperação entre os sensores e facilitar aos usuários a obtenção das informações coletadas foram propostos diversos serviços de informação para grades computacionais.
Em este capítulo, serviços de informação já em uso assim como novas propostas serão descritas caracterizando o estado da arte nesta área.
O Ganglia é uma ferramenta de monitoramento focado em sistemas computacionais de alto desempenho como clusters e grades, podendo ser utilizado para prover informações coletadas de sensores para serviços de predição.
A arquitetura do Ganglia pode ser analisada na Figura 6.
Cada nodo dentro de um cluster envia mensagens em multicast para identificar sua presença.
O recebimento desta mensagem por parte de os demais participantes indica que o nodo em questão está disponível, por outro lado, o não recebimento indica que o nodo falhou.
Cada nodo monitora seus recursos locais e envia mensagens aos demais a cada atualização significativa das informações.
De esta maneira, cada nodo do cluster contém uma visão aproximada de todo o sistema, o que permite uma rápida reconstrução após a ocorrência de falhas.
Ganglia permite ainda que aplicações usem o mesmo protocolo para publicar informações relativas ao seu andamento.
Em a ilustração nota- se o sistema de monitoramento gmond sendo executado em cada nodo.
Quando um usuário deseja obter informações sobre o sistema basta solicitar a qualquer nodo através de um protocolo de solicitação respondido por o gmond.
Além de monitorar clusters individuais, o modelo hierárquico do Ganglia permite o monito ramento de uma federação de clusters1.
Pode- se ver na Figura 6 entidades chamadas de gmetad.
Cada uma dessas entidades é um agregador que mantém informações sobre a federação como um todo.
O gmetad mais ao topo da ilustração combina informações sobre ambos os clusters, enquanto que os gmetad intermediários coletam informações sobre um cluster específico por meio de solicitações a alguns dos nodos do mesmo.
Além de as informações coletadas por os seus próprios sensores como carga de cada processador e memória livre sendo usada, Ganglia permite que novas informações coletadas por sensores de terceiros sejam adicionadas, tornando- o adequado para servir algoritmos de predição.
Apesar de armazenar de forma escalável informações provenientes de diversas fontes, o Ganglia utiliza protocolos próprios que devem ser tratados por as aplicações.
Por outro lado, o MDS, seguindo os objetivos do Globus, visa dar suporte a serviços de alto nível provendo primitivas simples que possam ser estendidas para atender as necessidades de variados tipos de serviços como brokers, escalonadores e monitores de tempo real.
Tais primitivas estão de acordo com os padrões atuais para grades computacionais, em especial com o WSRF.
A arquitetura do serviço de informação do Globus (MDS) é composta por duas entidades básicas:
Information providers e serviços de alto nível.
Provedores de informação (do inglês information providers) formam um grande e distribuído conjunto de entidades que proporcionam acesso a informações detalhadas sobre recursos e serviços.
Por exemplo, um provedor para um recurso computacional pode prover informações sobre o número de nodos, memória total, sistema operacional, carga do processador, etc..
Cada provedor de informação publica suas Um conjunto de clusters é conhecido na literatura como uma federação de clusters.
Os serviços de alto nível coletam, gerenciam, indexam, e disponibilizam informações sobre provedores de informação.
Um tipo de serviço de alto nível muito importante é o serviço de agregação (do inglês aggregate directory services) que facilita a descoberta e monitoramento de recursos em OVs mantendo num único local informações sobre os demais.
O serviço de agregação chamado de Index Service é responsável por registrar os recursos e serviços existentes na organização.
A Figura 7 ilustra a arquitetura do MDS.
Provedores de informação registram sua existência num ou mais serviços de agregação.
Usuários e outros serviços de busca e monitoramento entram em contato com agregadores para encontrar ou monitorar recursos da grade.
O MDS na sua versão atual (MDS 4) possui dois agregadores padrões:
MDS-Trigger e MDS-Index.
MDS-Index é um agregador padrão onde produtores (provedores de informação e serviços) se registram e onde consumidores (outros agregadores, brokers, usuários, etc) buscam informações sobre os recursos e serviços existentes.
MDS-Trigger permite que uma determinada ação seja executada caso as informações alcancem determinados valores, por exemplo, enviar um e-mail para o administrador caso o número de recursos disponíveis esteja abaixo de o normal.
Estudos mostraram que o MDS não suporta um número elevado de provedores de informação, tornando- se um gargalo que impede um bom desempenho na resposta aos pedidos de A principal contribuição deste trabalho é a geração de um protocolo que permite aos agregadores do MDS2 se organizarem hierarquicamente, característica não existente na arquitetura do anterior.
O FOSIS é uma proposta para um novo serviço de informação para grades que utiliza o padrão OGSI3 e é estruturado hierarquicamente como um conjunto de árvores.
A arquitetura do FOSIS é dividida em três camadas como ilustra a Figura 8.
Em a camada inferior (Resource Layer) encontram- se os recursos.
Logo acima está a camada de provedores de informação (Information Providers Layer), composta por um conjunto de provedores responsáveis por coletar dados sobre os recursos.
Em o topo encontra- se o Information Service Layer, que é constituído por diversos serviços de informação (ou agregadores) organizados numa estrutura baseada em árvore.
A camada superior agrega informação proveniente de numerosos recursos, sendo cada nível da árvore responsável por uma parte das informações.
Usuários iniciam o processo de pesquisa no serviço de informação local (nível inferior da árvore) que por sua vez repassa o pedido para os níveis superiores caso não possua os dados desejados.
Os serviços de informação raiz provenientes de todas as OV estão ligados uns aos outros.
Caso uma solicitação não possa ser respondida localmente ela será repassada para as demais OV de forma transparente ao usuário.
O OGSI-based GIS é similar ao trabalho anterior por usar o padrão OGSI, ser divido em três camadas e por organizar os agregadores numa estrutura baseada em árvores.
Em a Figura 9 estão ilustradas as camadas deste serviço de informação.
Embora seja precedente ao MDS4 a segunda versão não possui diferenças substanciais com relação a versão mais atual.
A principal diferença está na tecnologia empregada, a segunda versão utiliza protocolos próprios ao passo que a última se baseia no padrão WSRF.
O OGSI foi o primeiro padrão para grades usando a tecnologia Web Services sendo posteriormente substituído por o padrão WSRF, que herdou do primeiro muitas de suas características.
A camada de recursos (Resource Layer) compreende os sensores que coletam informações dos recursos existentes.
Mais acima se encontra a camada do site (Site Collective Layer), composta por vários agregadores que consolidam informações obtidas na camada inferior4.
Por fim, a camada superior (VO Collective Layer) reúne as informações da camada anterior.
As informações sobre os recursos são classificadas em duas categorias:
Estáticas e dinâmicas.
As informações estáticas compreendem dados que não mudam com freqüência como a configuração de software ou fabricante do hardware.
Já as dinâmicas englobam os dados que são atualizados numerosas vezes como a carga do processador e espaço disponível em disco.
Em este serviço de informação os dados estáticos são armazenados na camada superior enquanto que as informações dinâmicas são mantidas na camada de recursos.
Com isso pretende-se responder rapidamente aos pedidos de informações estáticas, comuns durante a descoberta de recursos, e manter o serviço escalável.
Em a terminologia adotada por os desenvolvedores do OGSI-based GIS uma OV pode possuir mais de um site, contudo, no trabalho corrente o termo site é sinônimo de OV.
Como visto no Capítulo 2, serviços de predição podem melhorar o desempenho das aplicações quando são empregados na descoberta e alocação de recursos e escalonamento de tarefas.
Contudo, estes serviços requerem informações históricas sobre o desempenho dos recursos.
Para prover informações a estes serviços é proposto o GIStorage, um serviço de informação cujo principal objetivo é armazenar informações históricas sobre recursos de uma grade computacional.
Com o emprego deste serviço, retira- se dos serviços de predição a responsabilidade de gerenciar sensores e as respectivas informações geradas, o que acarreta entre outras questões problemas relacionados ao grande volume de dados, escalabilidade, resposta eficiente, distribuição das informações, etc..
De esta maneira os serviços de predição podem focar exclusivamente no tratamento das informações históricas.
Ainda, por meio de protocolos padronizados para representar as informações, permite- se um melhor aproveitamento dos sensores existentes, não sendo necessário a instalação de ferramentas de mesma função devido a incompatibilidade entre os serviços de predição e os sensores a eles dedicados.
Em o projeto de um serviço de armazenamento e recuperação de informações para grades uma série de questões e desafios devem ser tratados.
Este trabalho é direcionado principalmente às questões descritas abaixo:·
Heterogeneidade dos recursos:
Devido a grande diversidade de uma grade, as informações relativas ao desempenho podem variar sensivelmente de recursos a recurso.
Por exemplo, para um microcomputador usualmente são levadas em consideração informações sobre a carga do processador, espaço livre de memória, arquitetura, entre outros, enquanto que para um cluster são adicionadas informações sobre tamanho da fila do escalonador, rede interna, etc..
Portanto, deve- se projetar uma estrutura de dados que permita armazenar informações variadas, provenientes de recursos heterogêneos.
Além disso, a estrutura deverá ser passível de extensão posterior uma vez que características inexistentes atualmente podem ser necessárias no futuro.·
Conjunto de informações:
Apesar de a variedade de informações coletadas apenas um subconjunto destas são relevantes aos algoritmos de predição de desempenho existentes.
Deve- se pesquisar quais dados pertencem a este conjunto.
As demais informações não serão arquivadas para permitir um melhor aproveitamento do espaço de armazenamento.·
Grande volume de dados:
O serviço de informação precisa tratar um grande volume de dados visto que existem centenas de recursos e é necessário manter informações históricas sobre cada um de eles.·
Solução distribuída:
Apesar de ser potencialmente mais simples, uma solução centralizada para o problema proposto não é viável pois implicaria em dois grandes problemas:
Como toda a informação ficaria armazenada num único ponto, a falha neste recurso dificultaria o uso da grade como um todo;
Uma vez que a etapa de descoberta de recurso de cada usuário depende deste serviço, este se tornaria um gargalo do sistema, comprometendo seu desempenho.
Tendo isso posto, deve- se projetar a arquitetura do serviço de forma distribuída, com as informações e a responsabilidade por seu gerenciamento sendo divididas entre os recursos.·
Escalabilidade: Em uma grade o número de recursos varia ao longo de o tempo.
O serviço deve permitir que recursos sejam adicionados ou removidos da grade sem demandar um grande esforço por parte de os administradores dos mesmos.
Deve ainda suportar um elevado número de recursos participantes.·
Resposta eficiente:
Para o escalonamento de tarefas em grade é requerido informações históricas tão rápido quanto possível, pois esta etapa não deve se estender por um período maior que uma fração do tempo de execução da aplicação.
Por essa razão, o serviço de informação precisa ser otimizado para responder a pedidos de escalonadores que, de modo geral, envolvem um intervalo de tempo não muito extenso.·
Padronização: Para que o serviço seja amplamente utilizado é necessário basear sua arquitetura em padrões para grades computacionais mundialmente aceitos.
O serviço deve respeitar padrões como WSDL e WSRF, assim como as recomendações provenientes de instituições como OASIS, OGF e W3C.
Este trabalho além de definir uma arquitetura para serviços de informação define também um modelo de informação para descrever os recursos e as interações entre os mesmos.
Em as próximas seções tanto o modelo quanto a arquitetura proposta serão descritos.
Antes de se definir a arquitetura do serviço deve- se conhecer o modelo de informação que será empregado.
Será através deste que as relações entre os recursos serão descritas e a sua estrutura deve ser levada em consideração na arquitetura do serviço para que possa mapear adequadamente as informações nos recursos físicos.
Em um primeiro momento avaliou- se o modelo de informação GLUE schema que visa padronizar a representação de informações sobre os recursos de uma grade computacional.
Este modelo representa sistemas computacionais descrevendo seus elementos (computadores, clusters, etc) e as relações entre eles.
O GLUE schema é um padrão que vem sendo usado por ferramentas como Ganglia e Globus.
O modelo hierárquico do GLUE schema é mostrado de forma resumida na Figura 10.
Em o topo da hierarquia encontra- se o site, que representa um único domínio administrativo, ou seja, uma única organização virtual.
Os demais componentes pertencem a um determinado site que possuí como atributos uma identificação única, nome, localização geográfica, entre outros.
Logo abaixo na hierarquia encontra- se o cluster, que representa um conjunto de elementos computacionais cujo acesso é feito através gerenciadores de recursos.
Qualquer conjunto de máquinas pode ser representado por um cluster sejam estes pertencentes a uma rede de computadores (máquinas NOW) ou agregados (máquinas COW).
Esse componente do modelo é descrito usando- se atributos tais como identificação única, informações sobre o gerenciador de recursos (tipo, endereço IP de acesso), estado atual (fila do escalonador, número de processos executando, etc), entre outros.
Um cluster é constituído de um ou mais subclusters, que são conjuntos de elementos computacionais de mesma arquitetura.
Pertencem a descrição de subclusters atributos como identificação única, sistema operacional, modelo do processador, tamanho das memórias principal e cache, número de processadores, etc..
Por fim, um subcluster é formado por vários hosts, componentes do modelo que expressam os atributos dinâmicos de cada máquina individualmente, como identificação única, quantidade de espaço livre na memória principal e disco rígido, porcentagem de uso do processador, entre outros.
Como parte deste trabalho criou- se o GLUE2 (GLUE schema Extended), um modelo de informação baseado no GLUE schema capaz de descrever medições sobre a rede de interconexão e relacionar- las com uma marcação de tempo (timestamp).
O Open Grid Forum (OGF) realizou um importante trabalho buscando identificar quais características da rede são relevantes às aplicações, e posteriormente, elaborou uma terminologia padronizada para descrever medições de rede.
O modelo GLUE2 combina tanto o GLUE schema quanto as recomendações do O modelo proposto por o OGF define duas entidades de rede:
Nodes e paths.
Nodes podem ser qualquer entidade física tal como um computador, um roteador ou switch ou ainda um conjunto dos mesmos.
Já paths são uma conexão unidirecional entre dois nodes.
Desta forma, a rede é descrita por um grafo onde as arestas são representadas por os paths e os vértices por nodes.
As entidades possuem atributos e características.
Os atributos são empregados para indicar as condições sobre as quais as medições foram feitas, como protocolos, QoS, camada da rede, entre outros.
De este modo, os atributos permitem que várias topologias sobreposta sejam representadas.
Por exemplo, uma conexão entre duas entidades pode ter como atributo o protocolo TCP, e uma outra conexão pode ter como atributo o protocolo IP, descrevendo deste modo duas topologias sobrepostas.
Já as características são as propriedades relacionadas ao desempenho da rede tais como largura de banda ou delay.
A Figura 11 apresenta as características que foram consideradas importantes por o OGF:
Largura de banda, delay, perda de pacotes, reordenação de pacotes, disponibilidade, políticas de encaminhamento (forwarding), fila do roteador, hoplist e proximidade.
Hoplist é a listagem das conexões entre os elementos que formam o path.
Por exemplo, entre dois nodes existem vários hops entre os roteadores que os conectam.
Já as políticas de encaminhamento tratam sobre o modo como os nodes encaminham o tráfego, o que ocorre nas camadas da rede 2 e 31, em switches e roteadores, respectivamente.
Quanto a largura de banda, ou seja, o número de bytes por segundo de uma conexão, é importante medir sua capacidade máxima, utilização atual, largura disponível e a que poderá ser de fato utilizada considerando a carga atual, protocolo, sistema operacional e capacidade máxima.
A latência ou delay também é uma característica de grande importância, principalmente para aplicações de tempo real.
Em a definição empregada por o OGF, delay é o tempo despendido entre o instante em que a primeira parte de um objeto passa por um ponto de observação até que sua última parte passe por um segundo ponto de observação.
Em redes com cabos, o tráfego congestionado se manifesta quando as filas dos roteadores estão sobrecarregadas.
Para modelar este comportamento, modelos analíticos necessitam de informações sobre as características estáticas de dinâmicas das filas.
Apesar de não ocasionar impacto quando a freqüência é baixa, a reordenação de pacotes pode se tornar um problema se ocorrer repetidas vezes e por isso deve- se medir- la.
Por fim, uma noção de proximidade entre os nodes pode ser útil.
Embora o valor mais adequado para o seu cálculo dependa da aplicação em questão, é possível medir- la balanceando características como largura de banda e latência.
Cabe ainda ressaltar que a terminologia adotada por o OGF é independente da forma como as informações são coletas.
Medições de rede podem ser realizadas usando- se técnicas passivas como SNMP ou ativas, usando- se benchmarks como Gloperf.
O modelo GLUE2 herda esta propriedade para permitir que uma grande variedade de sensores possam utilizar- lo, ficando a cargo de os atributos especificar qual técnica foi empregada.
Uma discussão sobre os pontos positivos e negativos de cada técnica pode ser encontrada no trabalho de Roughan.
Com este modelo de dados os sensores podem representar as informações coletadas sobre o desempenho da rede de forma padronizada, contudo, medir a conexão todos- para- todos entre os elementos de uma grade não é escalável.
Diversos trabalhos propuseram grupos hierárquicos de sensores para tornar a medição de rede mais escalável.
Em esta hierarquia, elementos pertencentes a um determinado grupo medem as características da conexão entre todos os pares possíveis.
Para medir a conexão entre os grupos um representante de cada é escolhido e passa a realizar medições com os demais representantes, resultando numa estimativa do desempenho das conexões todos- para- todos entre os recursos de ambos os grupos.
O administrador dos recursos é responsável por definir os grupos de acordo com sua localização e semelhança.
Essa abordagem se justifica se considerarmos que os participantes de cada grupo possuem em comum a mesma arquitetura e compartilham um mesmo ramo de conexão ao enviar mensagens aos demais grupos, embora pequenas diferenças possam ocorrer devido a diferenças no hardware das placas de rede, nas configurações dos sistemas operacionais, pilhas TCP/ IP empregadas, entre outras.
Para ilustrar a abordagem de grupos toma- se a Figura 12, que mostra duas organizações virtuais participantes da grade Ourgrid, CPAD em detalhes2 e UFCG.
Em o CPAD existem dois clusters, Amazônia e Ombrófila, sendo o primeiro composto por dois subclusters e o segundo por outros dois.
Caso sejam empregados técnicas de medição ativa, os hosts de cada subcluster realizam medições todos- para- todos entre si.
Como os subclusters de um determinado cluster compartilham o mesmo segmento de rede o resultado de uma medição entre dois representantes deve ser semelhante ao coletado em conexões todos- para- todos.
De forma análoga, os hosts amb02 e omb04 foram escolhidos para medir a comunicação entre os dois clusters (ver figura).
Por fim, é eleito um representante para todo o CPAD que irá medir a conexão entre os sites CPAD e UFCG.
É importante frisar que por meio de técnicas passivas como SNMP obtém- se a mesma informação por meio de os switches empregados, entretanto, a medição entre os dois sites pode ser difícil de ser obtida uma vez que os sensores de cada organização possivelmente não tem localiza- se na Pontifícia Universidade Católica do Rio Grande do Sul, Porto Alegre-RS.
A abordagem de grupos hierárquicos vai de encontro com o modelo de entidades hierárquicas do GLUE schema.
Os hosts que formam um subcluster possuem a mesma arquitetura e compartilham um mesmo segmento de rede.
As características da conexão entre subclusters de um cluster pode ser representada por a conexão entre um representante de cada subcluster ou grupo.
De forma análoga, o desempenho da conexão entre dois clusters e entre dois sites também pode ser expressa por a conexão de um represente de cada grupo.
Através destas modificações o modelo GLUE2 pode ser usado para representar as informações sobre os recursos e as redes de interconexão.
Tanto os sensores quanto os serviços de predição devem compreender- lo a fim de publicar e obter dados do serviço de informações, respectivamente.
Um fragmento de documento XML3 pode ser visto na Figura 14.
Em o começo do documento são descritas informações sobre a grade (grid) e a OV (site) pertencente a mesma, como identificação única e página da Internet.
Devido a restrições de espaço a figura mostra apenas as informações sobre o host am02 e algumas informações sobre as entidades hierarquicamente superiores.
Pode- se notar que as informações são marcadas com a hora em que foram medidas (Timestamp) e as informações de rede possuem atributos para indicar os protocolos e metodologias empregadas na medição (Protocol, Methodology).
Informações estáticas como fabricante dos microprocessadores e número de processadores físicos também são descritos.
Detalhes sobre o schema XML do modelo de informação GLUE2 encontram- se no Apêndice A. Poderia-se- utilizar os modelos de informação empregados no NWS ou Remos, contudo, faz parte dos objetivos deste trabalho utilizar padrões atuais de grades computacionais.
De entre estes padrões, destacam- se os modelos de informação hierárquicos como LDAP ou GLUE schema e os relacionais como R-GMA.
É sabido que o modelo relacional tem maior expressividade em relação a o hierárquico, entretanto, uma solução distribuída com bom desempenho para o primeiro não é facilmente realizável.
Por outro lado, o modelo hierárquico pode ser distribuído de maneira simples, bastando para isso repartir os ramos da hierarquia entre os recursos.
Além disso, serviços de predição requerem consultas com expressões simples, geralmente sob a forma de uma tupla (recurso, intervalo de tempo).
Devido a facilidade de distribuição das informações e da expressividade adequada decidiu- se utilizar modelos hierárquicos.
Em particular, o GLUE schema foi escolhido como base por ser uma padronização já em uso e suportada por diversos projetos como Eu-DataTAG, US-iVDGL, EGEE, LCG, Grid3/ OSG, Globus e NorduGrid.
O GLUE schema, assim como o GLUE2, não especifica um mapeamento em particular, existindo implementações para LDAP, XML e ClassAd.
Apesar disso, implementou- se o GLUE2 num schema XML com o intuito de validar a solução e servir de base para o cálculo do tamanho das mensagens trocadas no estudo de caso (ver Capítulo 5).
Tendo determinado o modelo de informação que será usado a arquitetura do serviço pode ser definida.
A arquitetura do GIStorage leva em consideração a estrutura do GLUE2 para distribuir de maneira adequada os dados entre os recursos.
O modelo GLUE2 apresenta uma possível solução aos problemas relacionados com a heterogeneidade de recursos e conjunto de informações.
Entretanto, um único documento contendo informações relativas a todos os recursos de uma grade não seria viável devido a grande quantidade de participantes de uma grade real.
Além de o problema relacionado ao volume de dados, uma solução centralizada reduziria o desempenho de toda a grade ao criar um gargalo no sistema e, caso este gargalo falhasse, poderia inviabilizar o uso de todo o ambiente.
Portanto, o GIStorage deve descentralizar as informações sobre os recursos e a responsabilidade por cada parte.
A arquitetura distribuída do GIStorage é baseada na arquitetura de monitoramento para grades (GMA), um modelo conceitual proposto por o OGF para guiar projetos de novos serviços.
Em a seção seguinte será apresentado o modelo GMA e em seguida, é definida a arquitetura do GIStorage.
O modelo GMA surgiu da observação detalhada dos usuários deste tipo de serviço.
Os possíveis usuários variam sensivelmente em termos de os tipos de informações que necessitam (características físicas, localização, etc) e o meio por o qual são empregadas (descoberta, escalonamento, monitoramento, etc).
Entretanto, em todos os casos são identificados dois principais elementos:
Um ou mais consumidores que obtêm informações sobre um ou mais produtores.
Consumidores englobam diversos serviços tais como descoberta de recursos, escalonamento, agentes de adaptação, entre outros, cada um querendo consumir informações sobre recursos da grade.
Já os produtores são elementos que geram informações a respeito de os recursos e as disponibilizam aos consumidores interessados.
Além desses componentes o modelo contempla um serviço de diretório responsável por manter informações sobre os consumidores e produtores existentes na grade.
O modelo completo possui os seguintes elementos:·
Serviço de diretório:
Armazena informações sobre os produtores e consumidores.
Tanto produtores quanto consumidores registram- se no diretório e publicam informações sobre os protocolos de comunicação aceitos, mecanismos de segurança usados, informações que produzem ou consomem, entre outros dados que podem ser relevantes a quem os procuram.
O diretório não é responsável por armazenar os dados de monitoramento.·
Produtores: São responsáveis por prover dados de monitoramento sobre um ou mais recursos.
Os dados são obtidos de sensores de recursos e podem ser recuperados por consumidores.·
Consumidores: São serviços ou usuários que consomem informações sobre recursos da grade.
Pode- se citar como exemplo escalonadores, monitores de tempo real, entre outros.
A Figura 15 ilustra a interação entre os componentes da arquitetura.
Em o passo 1 consumidor e produtor registram- se no diretório.
Em o momento em que o consumidor quer obter informações ele entra em contato com o diretório (passo 2).
Este realiza uma busca sobre todos os produtores registrados e envia uma mensagem para o consumidor contendo o produtor que detém os dados de seu interesse.
Em o passo 3 o consumidor entra em contato com o produtor escolhido e ambos fazem a comunicação sem intermediários.
Buscando propor um protocolo abrangente o modelo especifica três tipos de comunicação entre consumidores e produtores:·
Notification: A iniciativa de comunicação também pode vir de um produtor.
Para isso, o produtor usa a comunicação do tipo notification enviando a um consumidor escolhido previamente uma única mensagem sobre o estado atual do recurso que é assistido.
Por exemplo, um produtor pode procurar escalonadores registrados e enviar a eles informações sobre os recursos.
As informações que produtores disponibilizam são geradas por sensores.
Existem diversos tipos de sensores, dependendo do objetivo em questão, mas pode- se citar como mais comuns os seguintes:·
Sensor da máquina:
Sensores que monitoram a carga do processador, memória livre, etc..
Podem ser usados ainda para monitorar a configuração da máquina, como a versão e tipo de sistema operacional e outros softwares instalados.·
Sensor de rede: Monitora a rede, verificando sua carga, largura de banda, perda de pacotes, etc.· Sensor de processos:
Gera informações sobre o estado de processos, informando quando ocorre alguma mudança de estado, falha no processo, finalização, entre outros.·
Sensor de entrada/ saída:
Esses sensores monitoram dispositivos de entrada e saída, como discos de armazenamento, obtendo informações sobre tamanho dos blocos, tempo de acesso, tempo de busca, sistema de arquivos, etc..
O modelo permite ainda a definição de componentes híbridos, tendo comportamento tanto de consumidor quanto de produtor.
Tais componentes podem ser usados para criar serviços de filtros, cache de informações, repasse de dados, gatilhos para tomar determinada ação com base no estado do sistema, entre outros.
Em especial, sistemas que coletam informações de vários produtores e disponibilizam para os interessados podem melhorar o desempenho da grade uma vez que podem ser instalados geograficamente próximos aos consumidores, reduzindo o tráfego da rede entre os produtores.
Cabe salientar que o modelo proposto por o OGF não define as tecnologias que devem ser empregadas tanto na implementação dos componentes quanto nos protocolos envolvidos nas comunicações entre os mesmos.
Devido a essa flexibilidade encontram- se implementações do modelo usando Java como jGMA, SQL como R-GMA e até mesmo Python como em pyGMA.
Os componentes da arquitetura do GIStorage se assemelham com os do modelo GMA.
Serviços de predição podem ser vistos como consumidores e sensores como produtores.
Já o GIStorage, que age como um intermediador, pode ser visto tanto como um consumidor quanto um produtor, consumindo informações de sensores e entregando- as para serviços de predição, respectivamente.
Entretanto, como dito anteriormente, o serviço de informação deve ser formado por elementos distribuídos.
Tais elementos são chamados de storage elements ou simplesmente A Figura 16 ilustra os elementos que compõem o GIStorage.
Similar ao GMA, existe um serviço de diretório ou D (sigla para directory service) por o qual os SEs registram qual informação armazenam e em qual intervalo de tempo.
O diretório não armazena nenhuma informação sobre as medições, somente meta-dados descrevendo qual informação encontra- se em cada SE.
Já os SEs armazenam informações provenientes de sensores ou S (sigla para sensors), componentes responsáveis por produzir informações sobre carga do processador, memória disponível, largura de banda, e assim por diante.
Os SEs são organizados numa árvore hierárquica, onde o SE raiz armazena informações recentes vindas dos SEs folhas, que por sua vez, armazenam um intervalo maior de informações.
Uma OV pode ter somente um serviço de diretório, um SE raiz e vários SEs folhas, um para cada recurso.
Em a verdade, o GIStorage não impõe nenhum número de SEs, os administradores de cada OV podem instalar qualquer estrutura em árvore que desejarem, de acordo com o número de recursos que possuem e com o desempenho que pretendem atingir.
Por exemplo, considerando o site CPAD, poderia- se- instalar um serviço de diretório e um SE raiz na Marfim existente.
É importante notar que o serviço de diretório não armazena informações relativas as demais OV que compõem a grade.
Entretanto, um D armazena o endereço dos demais diretórios a fim de facilitar aos usuários e serviços de predição a obtenção de informações sobre os demais participantes da grade.
As interações entre os serviços de predição, GIStorage e sensores podem ser vistas nas Figuras 17 e 18.
Em todos os casos, o sensor da máquina A envia com uma determinada freqüência informações sobre a carga do processador para um SE folha.
Este último está configurado para armazenar esta informação e repassar- la para o SE raiz.
Após receberem pela primeira vez os dados ambos registram- se no diretório, informando quais dados sobre qual máquina possuem e o intervalo de tempo que cada um armazena.
O SE raiz e folha são previamente configurados para armazenar um determinado intervalo de tempo, sendo o do primeiro inferior ao do segundo.
Quando um serviço de predição quer obter uma série temporal sobre uma característica de um recurso, envia uma mensagem para o diretório especificando qual recurso, informação e intervalo de tempo que deseja.
O D executa uma pesquisa em seus registros e envia para o serviço de predição o SE que armazena a informação desejada dentro de o intervalo de tempo solicitado.
Caso exista mais de um SE responsável, o diretório enviará aquele que armazenar o menor intervalo de tempo possível, ou seja, o SE que estiver numa posição mais alta na hierarquia.
Existirão casos em que o intervalo de tempo solicitado será elevado, como na Figura 18.
Em este caso, o serviço de predição solicita a última hora de carga do processador.
O diretório, após pesquisar nos seus registros, indica ao serviço de predição o SE folha pois este é o único que possui a informação dentro de o intervalo de tempo requerido.
O serviço de predição então entra em contato com o SE folha e obtém a informação desejada.
Um terceiro caso ocorre quando o serviço de predição (ou um usuário) deseja obter informações sobre recursos de outras OV.
Quando isso ocorre, o serviço de predição solicita ao diretório conhecido que lhe envie o endereço dos demais diretórios existentes na grade.
Essa operação é comum na etapa de descoberta de recursos, onde o usuário deseja conhecer os recursos que estão disponíveis e também quando uma informação está parcialmente armazenada num par de OV.
Como exemplo deste último cita- se informações sobre a largura de banda entre dois recursos provenientes de duas OV distintas.
A largura de banda num determinado sentido pode estar sendo armazenada numa OV e no sentido oposto na outra.
A arquitetura do GIStorage foi projetada para obter um melhor tempo de resposta às solicitações que requerem um intervalo de tempo pequeno, comuns quando se deseja predizer diferentes cenários de escalonamento.
Devido a limitações de tempo a etapa de escalonamento não deve ser maior que uma fração do tempo total de execução da aplicação.
Além disso, para predizer escalonamento geralmente é solicitado um pequeno intervalo de dados uma vez que o tempo de execução do algoritmo de predição é proporcional ao número de elementos da série.
Considerando- se a meta de obter menor tempo de resposta, supõe- se que um único SE seria mais rápido do que vários devido a um número menor de mensagens trocadas (entre o serviço de predição e o diretório e entre o primeiro e o SE).
Por outro lado, um único SE não seria capaz de armazenar muitas informações por causa de restrições no espaço de armazenamento disponível.
Muitos SEs poderiam armazenar um volume maior de informações, apesar de reduzirem o tempo de resposta devido a um número maior de mensagens trocadas (entre o serviço de predição e o diretório e entre o primeiro e cada um dos SEs existentes).
Embora não tenha Acredita- se que a arquitetura baseada em árvores do GIStorage consegue obter um tempo de resposta adequado às solicitações de intervalo de tempo reduzido e ainda armazenar um grande volume de informações.
Solicitações com intervalo de tempo reduzido podem ser obtidas no SE raiz com um tempo de resposta menor, enquanto que solicitações com intervalos maiores podem ser obtidas através dos SEs folhas, embora com tempo de resposta mais elevado.
Outros trabalhos propuseram arquiteturas para serviços de informação baseados em árvores hierárquicas, contudo, GIStorage se diferência por empregar um serviço de diretório e por ter como meta reduzir o tempo de resposta e ainda armazenar uma quantidade significativa de informações4.
Acredita- se que o emprego de um serviço de diretório alcance tempos de resposta menores do que utilizar o SE raiz como um procurador, obtendo as informações dos SEs folhas sob demanda.
Quando se utiliza um D, serviços de predição podem se conectar diretamente com o SE que possui a informação desejada.
Sem utilizar- lo a informação tem que ser movida por a hierarquia a partir de o SE folha, passando por o SE raiz até finalmente ser entregue ao serviço de predição.
SE raiz, entretanto, supõe- se que ao dividir a responsabilidade por agregar informações entre vários SEs raízes possa tornar a arquitetura do GIStorage mais escalável.
Por exemplo, pode- se empregar um SE raiz para cada cluster de uma OV caso estes sejam compostos por numerosos nodos.
O serviço de diretório mais uma vez seria útil para indicar com precisão qual SE contém informação sobre um determinado cluster.
A arquitetura do GIStorage definida anteriormente pode ser implementada com as tecnolo4 Comparações entre o GIStorage e os demais serviços serão descritas no Capítulo 5.
Para avaliar a arquitetura do GIStorage descrita no capítulo anterior é realizado um estudo de caso.
Em este estudo, implementou- se o GIStorage em ambiente simulado com intuito de verificar o desempenho e a escalabilidade do mesmo.
Simuladores são usados para modelar e avaliar sistemas visando comprovar suas qualidades e apontar suas imperfeições antes de sua implementação.
Em especial, para ambientes em grade, os simuladores permitem testar uma solução em cenários controlados, compostos por um grande número de recursos.
Simuladores para grades como o MicroGrid, SimGrid ou GridSim podem ser usados para avaliar o GIStorage.
O MicroGrid é um simulador usado para testar aplicações implementadas no Globus.
Com este simulador pode- se emular um ambiente de larga escala sobre um pequeno conjunto de máquinas.
Embora seja útil para depurar aplicações, o MicroGrid exige que a aplicação já esteja implementada.
Por outro lado, tanto SimGrid quanto GridSim permitem que um algoritmo seja testado antes de sua implementação final.
Ambos possuem abstrações que permitem modelar o comportamento de uma aplicação, criar cenários com numerosos recursos e simular trocas de mensagens entre os mesmos.
GridSim possui como vantagem frente a o SimGrid o suporte a um rico conjunto de entidades de rede, permitindo a simulação de cenários com diversos roteadores e switches.
Para avaliar o GIStorage, implementou- se um protótipo no simulador GridSim.
Através deste protótipo é possível verificar o comportamento do GIStorage.
O processo de avaliação do GIStorage visa medir o tempo de resposta para pedidos de pequeno intervalo de tempo usando um único SE (solução centralizada), um SE para cada recurso (solução totalmente distribuída) e usando uma árvore de SEs (solução em árvore).
Requisições de um curto intervalo de tempo histórico são comuns quando se deseja predizer diferentes ce-nários de escalonamento, etapa que possui significativa restrição de tempo.
Como discutido anteriormente, uma solução centralizada pode ter desempenho melhor do que uma solução totalmente distribuída, entretanto, a última consegue armazenar uma quantidade maior de dados.
A arquitetura proposta para o GIStorage busca balancear as qualidades de cada uma dessas soluções sendo esperado que a solução em árvore tenha um bom desempenho e ainda consiga armazenar um grande volume de dados.
Também deseja- se medir o impacto no desempenho usando ou não um serviço de diretório.
Apesar de outros serviços de informação para grades não empregarem um serviço de diretório, acredita- se que o emprego do mesmo pode evitar transferências desnecessárias, atingindo assim um melhor desempenho.
O serviço de diretório permite que usuários conectem precisamente o SE em o qual está contida a informação desejada.
Sem usar- lo, o SE raiz exerce o papel de procurador solicitando aos SEs corretos a informação, armazenando- a temporariamente e posteriormente repassando- a para o serviço de predição, aumentando o número de transferências.
Embora a arquitetura do GIStorage possa ter melhor desempenho, trabalhos que avaliaram o desempenho do MDS e outro serviço de informação com arquitetura semelhante, apontam que um elemento central (como o SE raiz) compromete a escalabilidade do serviço.
É necessário, portanto, avaliar a escalabilidade da solução em árvore.
Em contrapartida, é esperado que a solução em árvore quando empregado mais de um SE raiz tenha melhor escalabilidade.
As seguintes métricas são comumente usadas para medir a escalabilidade de serviços de informação:
Tempo de resposta, throughput, carga e uso do processador.
O tempo de resposta mede o intervalo de tempo transcorrido entre o pedido do usuário (serviço de predição) e o recebimento dos resultados por o mesmo.
O throughput, por outro lado, mede o número de pedidos de leituras (ou inserções) por segundo que o serviço é capaz de tratar.
A carga do processador calcula o número de processos prontos para usar o mesmo.
Já o uso do processador indica a porcentagem de ciclos sendo consumidos.
Tanto o throughput quanto a carga e uso do processador são métricas úteis para avaliar o desempenho de serviços já implementados uma vez que exprimem a capacidade que uma determinada implementação tem de tratar numerosos pedidos e o uso que a mesma faz do processador, respectivamente.
Como a avaliação do GIStorage levará em conta sua arquitetura em ambiente simulado a métrica que melhor define seu desempenho é o tempo de resposta.
Usando- se o tempo de resposta como métrica pode- se medir o desempenho de diversas soluções de arquitetura e também verificar a escalabilidade das mesmas.
Para realizar as medições utilizou- se o ambiente ilustrado na Figura 19.
Este ambiente representa uma OV (ou site) composta por um agregado de computadores (cluster).
Em os experimentos o número de nodos do agregado pode variar de 1 até 100, existindo além destes um Os nodos estão conectados por um switch, compondo uma rede LAN padrão ethernet de Mbps.
Todas as comunicações entre o serviço de predição e os nodos do cluster são intermediadas por o nodo front-end.
Cada nodo executa um sensor que coleta informações sobre a carga do processador a cada 60 segundos e as envia para um SE pré-configurado.
Tanto o serviço de diretório quanto o SE raiz (quando usado) encontram- se no nodo front-end.
Os SEs folhas, quando empregados, são executados nos nodos.
Além disso, o tamanho das mensagens trocadas entre os sensores, SEs, diretório e serviços de predição é baseado numa implementação em XML do GLUE2.
As conexões, computadores e usuários (serviços de predição) são modelados por o GridSim como threads independentes.
O próprio simulador já possui entidades para simular switches e conexões com largura de banda configurável.
O simulador possui também um tempo de simulação por meio de o qual é possível medir os tempos de respostas das comunicações de dados.
Por o GridSim é possível ainda estipular o desempenho dos processadores simulados, contudo, neste estudo o tempo de processamento das tarefas foi negligenciado uma vez que não é possível estimar precisamente o número de instruções necessárias para cada uma das tarefas.
GridSim, cada entidade possui três threads associadas, uma representa o recurso em si e outras duas gerenciam a entrada e saída de pacotes de mensagens.
Esta estrutura acaba gerando um número excessivo de threads tornando algumas simulações inviáveis.
O primeiro experimento pretende avaliar o desempenho do GIStorage usando uma arquitetura centralizada, totalmente distribuída e em árvore.
Entende- se por centralizada a arquitetura que possui somente um elemento de armazenamento localizado no nodo front-end.
A solução totalmente distribuída emprega um SE para cada nodo e um serviço de diretório para facilitar a localização das informações.
Já a solução em árvore consiste em executar um SE folha em cada nodo e ainda um SE raiz no nodo front-end.
O SE raiz pode ter duas configurações:
Armazena apenas a última medição coletada ou armazena a última hora de medições.
Em este experimento um único serviço de predição requere ao GIStorage o histórico dos últimos 60 minutos da carga do processador de todos os nodos do agregado.
O número de nodos varia de 1 até 100 e o tempo de resposta à solicitação do serviço de predição é medida.
O gráfico da Figura 20 descreve o tempo de resposta com relação a o número de nodos do cenário.
Como indicado por o gráfico, a solução centralizada (ver curva centralizada) de fato tem melhor desempenho que a totalmente distribuída (curva distribuída).
Este resultado deve- se ao número de mensagens trocadas.
No caso de a solução centralizada são necessárias apenas quatro mensagens para que o serviço de predição obtenha as informações desejadas (pedido e resposta entre serviço de predição e diretório, e entre o primeiro e o SE centralizado).
Já no caso de a solução totalmente distribuída são trocadas duas mensagens entre o serviço de predição e o diretório e várias outras entre o serviço de predição e cada um dos SEs folhas.
A solução em árvore obtém aproximadamente o mesmo tempo de resposta do que a solução centralizada (ver curva árvore (raiz)) quando o SE raiz armazena toda a informação desejada.
Isso porque o número de mensagens trocadas entre o serviço de predição e o GIStorage é o mesmo em ambos os casos.
Em o último caso, quando o SE raiz armazena apenas a última informação coletada, obrigando o serviço de predição a trocar mensagens como cada um dos SEs folhas, atinge- se um desempenho não pior do que na abordagem totalmente distribuída (curva árvore (folhas)).
Tanto a solução centralizada quanto a baseada em árvore são, em média, 30% mais rápidas que a totalmente distribuída.
Esse resultado além de comprovar que a solução centralizada tem melhor desempenho, mostra que a arquitetura baseada em árvore alcança aproximadamente o mesmo desempenho que a anterior quando é solicitado um intervalo de tempo histórico reduzido.
Em o caso em que a solicitação exige um intervalo não contido no SE raiz, a arquitetura baseada em árvore não tem desempenho significativamente pior do que a solução totalmente distribuída.
A arquitetura baseada em árvore é, portanto, capaz de armazenar tanta informação quanto uma solução totalmente distribuída e ter um desempenho muito próximo de a solução centralizada quando o intervalo histórico está sendo armazenado no SE raiz.
Acredita- se que o emprego de um serviço de diretório melhora o tempo de resposta ao permitir que o usuário (serviço de predição) acesse precisamente o SE que contém a informação requerida.
O segundo experimento explora dois cenários, um onde existe serviço de diretório e outro onde o SE raiz atua como um procurador.
O resultado apresentado na Figura 21 mostra o tempo de resposta para a solicitação de um único serviço de predição em relação a o número de nodos.
Tal serviço deseja obter o histórico da carga do processador de todos os nodos do agregado, considerando um intervalo dos últimos 60 minutos.
Ambas as curvas foram obtidas usando- se a arquitetura baseada em árvore onde o SE raiz armazena somente o último valor coletado, isto é, o usuário deve acessar cada um dos SEs folhas.
A contribuição negativa que o serviço de diretório concede quando a informação está presente no SE raiz não é tão expressiva quanto a perda de desempenho ao não usar- lo no caso em que a informação encontra- se somente nos SEs folhas.
Devido a esta constatação, a arquitetura do GIStorage mantém o serviço de diretório.
Como foi indicado por outros trabalhos, um elemento central pode reduzir a escalabilidade de um serviço de informação.
Em o experimento 3 deseja- se verificar se o SE raiz reduz de fato a escalabilidade do serviço.
Em este experimento o número de recursos é fixado em 100 nodos e varia- se o número de usuários (serviços de predição) de 1 até 250.
Cada serviço de predição solicita a última hora de dados coletados sobre cada um dos recursos.
O tempo médio de resposta para a solicitação de cada usuário é calculado e uma comparação entre a solução totalmente distribuída e baseada em árvore é feita.
Como é esperado que a solução baseada em árvore utilizando mais de um SE raiz tenha uma melhor escalabilidade, também se compara esta última empregando dois SEs raízes.
Quando é empregado somente um SE raiz este armazena o intervalo de tempo solicitado não sendo necessário obter informações dos SEs folhas.
Para o caso em que existem dois SEs, cada um fica responsável por armazenar informações sobre metade dos recursos.
Ambos também armazenam todo o intervalo de tempo requerido por os usuários.
O gráfico da Figura 23 exibe a média do tempo de resposta obtido por os usuários. Como
pode- se constatar o tempo de resposta no caso em que se utiliza mais de um SE raiz é o menor, indicando ser este o mais eficiênte em contraste com a solução totalmente distribuída.
O que não fica claro neste gráfico é a tendência de reduzir a diferença entre as soluções baseadas em árvore e a totalmente distribuída.
Árvore começa a decair conforme aumenta o número de serviços de predição.
Essa queda de desempenho indica que as soluções baseadas em árvore não escalam tão bem quanto a solução totalmente distribuída.
Essa constatação vai de encontro com resultados obtidos por outros trabalhos, onde também é afirmado que uma solução totalmente distribuída tem melhor escalabilidade que soluções com elementos centralizados.
Em um cenário onde existe um grande número de usuários o SE raiz acaba se tornando um gargalo, reduzindo o desempenho.
Como o SE raiz fica sobrecarregado, não consegue responder adequadamente às solicitações dos usuários.
Já na solução totalmente distribuída, o tratamento dos pedidos é divido entre todos os SEs folhas acarretando num melhor desempenho.
Espera- se que num cenário composto por numerosos usuários o tempo de resposta médio seja menor quando se usa a solução totalmente distribuída.
Infelizmente, devido a limitações do simulador utilizado, não foi possível testar cenários com mais de 250 usuários mesmo confiando ao GridSim 2 GB de memória principal.
Por outro lado, pôde- se verificar uma tendência de redução na diferença entre as soluções.
Nota- se que o speed up obtido por a solução que emprega dois SEs raízes é maior do que usando somente um SE, o que indica um melhor balanceamento da carga nesta solução.
Como a tarefa de responder aos pedidos dos usuários é dividida entre mais de um SE raiz, esta abordagem consegue tratar um número maior de requisições, portanto, tem escalabilidade melhor.
Figura 24 ­ Speed Up da solução totalmente distribuída com relação a baseada em árvore.
Embora, não seja tão escalável quanto a solução totalmente distribuída, uma solução em árvore que emprega mais de um SE raiz atinge um melhor desempenho.
Não foi possível determinar o número máximo de usuários que conseguem obter informações mais rapidamente de uma arquitetura baseada em árvore, porém, pode se dizer que esta última ainda possui bom desempenho quando existem até 250 serviços de predição.
Tanto Remos quanto NWS são serviços de predição completos, possuindo seus próprios sensores, bases de dados e algoritmos de predição.
Entretanto, um não consegue trabalhar em cooperação com o outro, impondo a todas as OV participantes da grade a instalação de um de eles ou impondo aos programadores o desenvolvimento de código para mais de um serviço.
O GIStorage, em contraste, permite as OV empregarem as ferramentas de monitoramento que melhor se adequam as suas necessidades.
Programadores podem também desenvolver aplicações que obtêm informações sobre o desempenho passado dos recursos independentemente do fabricante e tipo de sensor.
Além disso, novos serviços de predição podem ser construídos de maneira mais simples uma vez que não precisam lidar com problemas relacionados a produção e armazenamento de informações.
O Ganglia, uma ferramenta de monitoramento, poderia ser usado para prover informações coletadas de sensores para algoritmos de predição.
De maneira similar ao GIStorage, o Ganglia tem sua arquitetura baseada em árvore, onde cada folha coleta informação de desem-penho e, mais acima na árvore hierárquica, essa informação é armazenada em diferentes intervalos.
Em oposição ao GIStorage, o Ganglia não emprega um serviço de diretório, tornando difícil a tarefa de encontrar onde a informação sobre determinado recurso num determinado intervalo de tempo está armazenada.
Além disso, o Ganglia não é compatível com padrões para grades, em especial, com o WSRF.
Como parte do projeto Globus, um serviço de informação para grades conhecido como MDS foi desenvolvido.
O MDS se baseia em serviços de índices para agregar informações coletadas por provedores de informação, buscando facilitar a descoberta de serviços e recursos.
Embora um serviço de armazenamento esteja previsto para o futuro, até o momento o MDS não tem a habilidade de armazenar informações históricas sobre o desempenho passado dos recursos.
Apesar disso, o GIStorage e o MDS tem algumas semelhanças visto que provedores de informação e serviços de índices são análogos aos sensores e serviços de diretório, respectivamente.
GIStorage pode ser implementado usando a API do Globus, empregando o serviço de índice como seu serviço de diretório e implementando um novo agregador para trabalhar como um SE.
O TGIS, outro serviço de informação, também possui algumas semelhanças com o GIStorage.
O primeiro é estruturado como uma árvore, entretanto, não emprega um serviço de diretório tal qual faz o segundo.
Como demonstrado anteriormente, o uso de um serviço de diretório melhora o tempo de resposta pois permite aos usuários conectarem diretamente os recursos responsáveis por a informação desejada, evitando transferências desnecessárias.
Já o FOSIS, assim como o TGIS, é estruturado como uma árvore e também não emprega um serviço de diretório, sofrendo do mesmo problema que o anterior.
Por outro lado, este último utiliza uma estrutura baseada em florestas, ou seja, um conjunto de árvores para melhor balancear a carga e melhorar a escalabilidade.
Tal abordagem é usada por o GIStorage para melhorar sua escalabilidade.
Outro serviço de informação para grades igualmente estruturado como uma árvore é o OGSI-based GIS.
Este serviço utiliza uma entidade conhecida como VO Information Service, semelhante ao serviço de diretório do GIStorage, para armazenar informações estáticas sobre os recursos e meta-dados indicando onde encontrar as informações dinâmicas.
De forma oposta ao GIStorage, este serviço não contempla um elemento agregador de informações como o SE raiz, obrigando os usuários a buscarem informações dinâmicas diretamente nos recursos.
Com isso seu desempenho deve se assemelhar ao da solução totalmente distribuída, sendo portanto, menos eficiente que o GIStorage.
O que motivou os projetistas do OGSI-based GIS a armazenar somente as informações estáticas e não as dinâmicas num agregador foi a constatação da baixa escalabilidade da segunda abordagem.
Os experimentos demonstrados na Seção 5.2.4 indicam que uma solução totalmente distribuída realmente tende a escalar melhor.
Por outro lado, ao utilizar mais de um SE raiz, o GIStorage aparenta melhorar sua escalabilidade e ainda ter um desempenho melhor do que a solução totalmente distribuída.
A arquitetura baseada em árvore do GIStorage é semelhante as arquiteturas propostas por outros trabalhos.
Entretanto, como demonstrado anteriormente, o emprego do serviço de diretório tem impacto positivo no desempenho do serviço o que eleva a efiCiência do GIStorage frente a os serviços TGIS e FOSIS.
Por utilizar um serviço de diretório o OGSI-based GIS poderia ter um desempenho semelhante ao do GIStorage, contudo, como aquele não emprega um serviço de agregação, como o SE raiz, permanece com desempenho inferior ao deste.
Por fim, a utilização de mais de um SE raiz melhora a escalabilidade do GIStorage e mantém seu bom desempenho para solicitações de informações históricas sobre um intervalo reduzido de tempo passado.
Serviços de descoberta e alocação de recursos e escalonamento de tarefas podem empregar algoritmos de predição de desempenho em suas análises para melhorar os seus resultados.
Diversos algoritmos de predição baseiam- se em séries temporais que, por sua vez, requerem informações históricas sobre o desempenho dos recursos.
Para dar suporte a algoritmos de predição este trabalho propôs a arquitetura de um novo serviço de informação para grades computacionais cujo objetivo principal é armazenar informações históricas sobre o desempenho dos recursos.
Tal serviço, chamado de GIStorage, permite que serviços de predição concentrem- se somente no processamento das informações coletadas ao invés de gerenciar sensores e as informações produzidas, liberando- os de como problemas relacionados a grande quantidade de informação, escalabilidade, entre outros.
Através do GIStorage, usuários podem acessar informações históricas sobre o desempenho dos recursos independentemente do algoritmo ou serviço de predição empregado.
Além disso, organizações virtuais podem usar os sensores que melhor atendem as suas políticas internas, não sendo imposta a instalação de sensores compatíveis com determinados serviços de predição.
Antes de ser projetada a arquitetura do GIStorage, foi necessário definir um modelo de informação para expressar o desempenho dos recursos.
Com o intuito de empregar um modelo padronizado optou- se por o GLUE schema.
Apesar de já estar sendo usado por ferramentas como o Globus, Ganglia e por o OGSI-based GIS, o modelo GLUE schema não contempla informações referentes a rede de interconexão tampouco é capaz de relacionar os eventos com o momento em que ocorreram.
Como parte deste trabalho criou- se o GLUE2 (GLUE schema Extended), um modelo de informação baseado no GLUE schema capaz de descrever medições sobre a rede de interconexão e relacionar- las com uma marcação de tempo.
O modelo GLUE2 combina tanto o GLUE schema quanto as recomendações do OGF, que identificou quais características da rede são relevantes às aplicações e, posteriormente, elaborou uma terminologia padronizada para descrever medições de rede.
O modelo de informação GLUE2 é usado por o GIStorage para representar as informações sobre os recursos e as redes de interconexão.
Tanto os sensores quanto os serviços de predição devem compreender- lo a fim de publicar e obter dados do serviço de informações, respectivamente.
O modelo GLUE2 apresenta uma possível solução aos problemas relacionados com a heterogeneidade de recursos e conjunto de informações.
Entretanto, um único documento contendo informações relativas a todos os recursos de uma grade não seria viável devido a grande quan-tidade de participantes de uma grade real.
Além disso, uma solução centralizada reduziria o desempenho de toda a grade ao criar um gargalo no sistema e, caso este gargalo falhasse, poderia inviabilizar o uso de todo o ambiente.
Devido a isso a arquitetura do GIStorage foi definida de forma distribuída.
Durante a definição de sua arquitetura buscou- se novamente seguir as recomendações do OGF para serviços de monitoramento para grades (GMA).
Assim como na arquitetura do GMA, o GIStorage interage com consumidores (usuários e serviços de predição) e produtores (sensores).
O GIStorage propriamente dito age tanto como um consumidor, obtendo informações de sensores, quanto como um produtor, disponibilizando- as para os serviços de predição.
O GIStorage é formado por uma série de elementos de armazenamento (SE) que são responsáveis por obter as informações de sensores e armazenar- las, permitindo que serviços de predição possam recuperar informações sobre o histórico do desempenho dos recursos da grade.
Os SEs estão organizados numa estrutura baseada em árvore para atingir um bom desempenho e ainda armazenar uma grande quantidade de dados.
Adicionalmente, para encontrar facilmente o SE que armazena a informação desejada, o GIStorage contempla um serviços de diretório.
Tal serviço registra qual SE é responsável por qual informação e qual o intervalo de tempo que o mesmo mantém em sua base de dados.
Outros serviços de informação propostos utilizam estruturas em árvore, entretanto, somente o GIStorage emprega um serviço de diretório e SEs raízes que armazenam informações recentemente coletadas.
Como resultado dos experimentos descritos no capítulo anterior, foi possível comprovar o melhor desempenho obtido quando se emprega um elemento central para armazenar as informações recentes.
Os resultados indicam também que a arquitetura do GIStorage tem uma boa escalabilidade ao se utilizar mais de um SE raiz quando a OV possui muitos recursos ou é acessado por um elevado número de usuários.
Em o Capítulo 5 comprovou- se também que o uso de um serviço de diretório tem impacto positivo no desempenho do GIStorage.
Para os objetivos propostos o GIStorage possui qualidades frente a os demais serviços de informação.
Por utilizar um serviço de diretório e um elemento que armazena as informações mais recentes o GIStorage apresenta um bom desempenho para solicitações que envolvem intervalos de tempo histórico reduzido, comuns quando se pretende predizer diferentes cenários de escalonamento.
Por outro lado, quando o intervalo de tempo necessário é elevado, o GIStorage não tem desempenho pior do que uma solução totalmente distribuída, onde ocorrem numerosas trocas de mensagens entre o serviço de predição e os elementos de armazenamento.
A nova arquitetura proposta além de seguir os padrões atuais para grades computacionais cumpre a proposta inicial de obter um bom desempenho e conseguir armazenar uma grande quantidade de informações.
O modelo de informação GLUE2 consegue representar informações variadas condizentes com as necessidades de algoritmos de predição.
Por fim, a solução distribuída do GIStorage tem boa escalabilidade.
Apesar de ser projetado para dar suporte a algoritmos de predição, o GIStorage tem ou- tros usos.
Pode- se empregar o GIStorage para administrar os recursos de uma organização, indicando gargalos ou apontando os recursos que estão fora de operação.
É possível também empregar o GIStorage para verificar contratos de utilização de grades, como faz o Inca.
O GIStorage pode ser utilizado na depuração de aplicações paralelas, relacionando o desempenho dos recursos com a execução da aplicação, de maneira similar ao Netlogger.
Para isso é necessário adicionar ao mesmo a capacidade de armazenar informações provenientes das aplicações.
Uma questão importante que não foi contemplada neste trabalho é a segurança das informações.
Entende- se por segurança a capacidade do serviço de autorizar os usuários a fazer leituras e os sensores a inserir informações.
Mais uma vez deve- se seguir as recomendações do OGF e utilizar uma infra-estrutura de chaves públicas (PKI) através de a qual tanto os usuários quanto os sensores possuem certificados que os autenticam e permitem que os mesmos leiam ou insiram informações, respectivamente.
Técnicas semelhantes são utilizadas por o Globus.
Uma outra corrente de pesquisa em ascenção propõe o chamado semantic grid, grades onde a informação, recursos e serviços são descritos de forma padronizada, permitindo a um processo automatizado extrair o significado das informações.
Pode- se adequar o GIStorage a um mapeamento do modelo de informação GLUE schema em ontologia.
Um mapeamento do GLUE2 também pode ser feito.
