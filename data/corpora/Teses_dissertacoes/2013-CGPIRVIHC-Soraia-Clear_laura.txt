Este trabalho apresenta a utilização de modelagem procedural para povoar ambientes com agentes virtuais.
São utilizados ambientes previamente gerados também de forma procedural, juntamente com um simulador de multidões para realizar a locomoção dos agentes.
O trabalho, além de criar grupos que se baseiam em informações semânticas do ambiente a ser povoado e em dados retirados do IBGE em relação a a população de Porto Alegre, gera comportamentos para cada membro do grupo.
Estes comportamentos gerados são coerentes ao ambiente, às características do grupo e do próprio membro, e ao tempo.
Todas estas características e especificações são transformadas em seeds, o que permite a persistência dos dados (possibilita que o contexto seja regenerado a qualquer momento sem a utilização de estruturas de dados) e facilita a execução (o modelo é totalmente automático).
Palavras-chave: Modelagem Procedural, Animação Comportamental.
Esses ambientes virtuais contém informações semânticas em cada cômodo.
Por exemplo, dentro de uma casa, o agente tem como saber em qual cômodo se encontra (quarto, sala, cozinha, banheiro e etc) além de obter as dimensões desse cômodo.
O objetivo deste trabalho é gerar um modelo procedural que gere grupos de agentes e comportamentos para os mesmos de maneira procedural e automática.
O modelo deverá gerar comportamentos que sejam coerentes com o ambiente em que os agentes se encontram sem haver necessidade de intervenção humana e, além de a coerência com o ambiente, os comportamentos devem ter coerência com o tempo, permitindo que um grupo seja observado em diferentes momentos sem que ocorra perda de contexto.
Estes fatores serão aprofundados no Capítulo 3.
Como definido em, uma técnica procedural utiliza um algoritmo ou equação matemática para definir alguma característica num modelo computacional.
Por exemplo, uma textura procedural para definir uma superfície de mármore não utiliza uma imagem real para definir os valores de cor, e sim um algoritmo com equações matemáticas.
Vantagens de utilizar uma técnica procedural seria a economia de espaço em disco e processamento, já que as animações e estruturas são geradas apenas no momento em que serão utilizadas.
Esta dissertação está organizada da seguinte maneira:
Inicialmente, apresenta- se no Capítulo 2 os trabalhos científicos relacionados com o tema deste trabalho, os quais em grande parte serviram para embasar o desenvolvimento do modelo apresentado no Capítulo 3.
Em esse capítulo é apresentado o modelo desenvolvido.
Em a sequência, resultados são apresentados no Capítulo 4.
Por fim, considerações finais são feitas no Capítulo 5.
Em este capítulo serão apresentados trabalhos relacionados à simulação de multidões densas e não densas, juntamente com trabalhos mais voltados para o comportamento de agentes ou grupos e modelagem procedural (Seção 2.2).
Esses trabalhos servem de base para os estudos e desenvolvimento do modelo.
Além disso, são apresentados de forma detalhada dois trabalhos que são os pontos de partida para o desenvolvimento do modelo atual.
Em a Seção 2.1.1 o já mencionado Biocrowds e na Seção 2.2.1 o também já mencionado Modelo Procedural para Geração de Ambientes.
A área de simulação de multidões contém diversas formas de abordagem para gerar tais simulações, porém sempre com o mesmo objetivo final de obter um resultado o mais realista possível.
Alguns trabalhos simulam multidões densas, com um número alto de agentes, outros se focam em simular pequenos grupos.
Em essas simulações, as multidões podem ser tratadas como uma entidade global ou cada indivíduo pode ser tratado separadamente.
Em o trabalho de Reynolds, que é conhecido como o pioneiro que definiu a área de animação comportamental, é apresentado um modelo para simulação de bandos de pássaros, cardumes de peixes e rebanhos de animais.
Em este trabalho cada personagem é tratado separadamente, como uma partícula chamada de boid.
Alguns exemplos de boids encontram- se na Figura 2.1.
Cada boid conhece seus vizinhos e o ambiente e segue algumas regras para se movimentar.
Primeira regra é evitar colisão.
Para isso cada um deve manter uma distância mínima de seus vizinhos e obstáculos existentes no ambiente.
Cada boid também controla sua velocidade de acordo com o grupo, juntamente com sua orientação que se baseia nos centróides dos vizinhos, a fim de manter- se no bando.
Essas regras podem gerar comportamentos emergentes em cada simulação.
Em o trabalho de Musse é apresentado um modelo (ViCrowd) que pode ser controlado por script ou por um controlador externo.
O modelo utiliza humanos virtuais para representar cada agente e permite que comportamentos sejam definidos individualmente ou para grupos na multidão a ser simulada.
Esses comportamentos permitem a classificação das multidões em três diferentes categorias.
Multidões guiadas são multidões que podem ser controladas externamente através do mouse ou outras interfaces.
Possuem pouca autonomia e inteligência, tendo uma baixa complexidade de comportamento.
Multidões programadas têm um nível de autonomia médio, onde a complexidade dos seus comportamentos e nível de interação pode variar.
Já numa multidão autônoma, o nível de autonomia, inteligência e complexidade do comportamento são mais altos, tendo uma interação também variável.
Em o trabalho de Treuille É apresentado um modelo que é um desenvolvimento do modelo apresentado por Hughes e, tratando a multidão como uma entidade contínua.
Uma ilustração do trabalho está na Figura 2.2.
Em este, a multidão é tratada como uma junção de grandes grupos e não agente por agente.
O movimento é visto como uma minimização de energia por partículas, campos de atração e repulsão que são criados de acordo com o conhecimento global das características da multidão.
Conhecimentos como densidade, objetivo geográfico e velocidade influenciam a movimentação dos agentes.
Também é especificada uma mínima distância por agente, criada para evitar colisão entre os mesmos.
Este trabalho unifica o planejamento global e tratamento de colisão, porém é mais indicado para simular grandes multidões.
Mais recentemente, o trabalho de Guy Se foca no problema de gerar comportamentos de multidão heterogêneos, modificando parâmetros de simulação para emular traços de personalidade de um indivíduo dentro de esta multidão e avaliar o impacto dessas personalidades individuais no todo.
Alguns trabalhos mais focados no controle de movimento de pequenos grupos são propostos por Lai, que apresenta um método para a construção de grafos de movimento para grupos de agentes discretos, incluindo uma nova estrutura de grafo que garante o movimento sintetizado e técnicas para computar probabilidades de transição neste grafo, aprofundadas em.
O modelo proposto por Moussaid Mostra que os pequenos grupos de pedestre, normalmente compostos por até três membros, tendem a seguir algumas formações ao se deslocar, formações estas que dependem da densidade.
A uma baixa densidade, o grupo tende a formar uma linha perpendicular ao vetor objetivo, já a uma densidade um pouco mais alta, a formação fica semelhante à forma de uma letra V e a uma densidade muito alta os agentes tendem a formar uma fila.
O trabalho descreve essas formações através de um modelo baseado na comunicação social entre os membros do grupo.
Outro trabalho é o de Karamouzas, que se baseia neste trabalho de Moussaid para realizar formações de grupos, simulando diferentes manobras para evitar colisão dependentes da velocidade e espaço, se esforçando sempre para manter uma formação que facilite a interação social do grupo.
Toni Conde e Daniel Thalmann apresentam uma contribuição original para a área de animação comportamental, apresentando um método que permite que agentes virtuais autônomos aprendam automaticamente um modelo comportamental.
Esse método é baseado na exploração do ambiente por cada agente.
O agente explora o ambiente virtual em o qual se encontra e constrói estruturas na forma de modelos ou mapas cognitivos, podendo passar esse conhecimento para outros agentes.
Valores são atribuídos para cada ação, e uma busca A* é feita nas estruturas sempre buscando o maior valor possível.
O processo de aprendizado se baseia na observação de ações de um agente denominado expert.
A o observar um número de trajetórias do expert o agente pode evoluir através da técnica de aprendizado por reforço inverso.
Agentes representados por a mesma cor de seus respectivos marcadores.
Adaptando o modelo de Runions para simulação de multidões, Bicho modificou alguns fatores.
Primeiramente, os agentes só podem ser influenciados por os marcadores que estão atribuídos a ele, ou seja, por os marcadores que estão dentro de a sua região de percepção e que estão mais próximos a ele do que a qualquer outro agente, fator que faz com que o modelo seja livre de colisão.
Os marcadores no modelo de Bicho são mantidos até o fim da simulação, representando os caminhos livres que podem ser percorridos, diferentemente das auxinas que são removidas e renovadas a cada iteração no modelo de Runions.
O agente no modelo de Bicho se desloca influenciado por os marcadores atribuídos a ele juntamente com o seu objetivo final, ou seja, a cada iteração é efetuado um cálculo para verificar a próxima posição do agente, cálculo esse baseado nesses dois fatores.
Após o deslocamento, os marcadores são liberados e um novo cálculo é feito, atribuindo novamente ao agente os marcadores mais próximos à sua posição atual e calculando sua próxima posição.
As velocidades dos agentes no modelo Biocrowds também variam de acordo com o espaço disponível e suas velocidades máximas.
Em o trabalho de Cassol O modelo do Biocrowds é aperfeiçoado para suportar a simulação de comportamentos de grupos de personagens baseados em raciocínio de terrenos.
O trabalho desenvolveu uma ferramenta de geração de terreno TerrainTool que gera mapas de altura, geometria de terrenos e define a semântica dos mesmos.
O conceito de diferentes tipos de marcadores foi adicionado, sendo que os marcadores originais do Biocrowds agora podem ser definidos como caminháveis, semi-caminháveis e não caminháveis.
Esta definição permite que áreas do terreno sejam definidas como não caminháveis por os agentes como, por exemplo, paredes, e outras áreas como semi-caminháveis, ou seja, os agentes podem caminhar através de elas, porém em situações mais específicas já que estas geram desconforto.
Exemplos seriam lagos ou grama.
Em as Figuras 2.4 e 2.5 são ilustrados exemplos dessas áreas com características especiais.
Em o trabalho de Marson é apresentada uma nova abordagem para a geração de plantas de casas com informações semânticas agregadas de forma automática, plantas estas que são utilizadas como parâmetro de entrada no modelo a ser apresentado neste trabalho.
Existem três opções de funcionalidade:
Área social, que inclui a sala de estar, sala de jantar e o banheiro;
Área de serviço, que inclui a cozinha, lavanderia e a dispensa;
Área privativa, que inclui o quarto principal, quarto, banheiro íntimo e possivelmente um ambiente secundário que pode ser usado como escritório, livraria e etc..
Essa lista não é fixa e pode ser alterada por o usuário.
Tendo esses parâmetros definidos, a divisão da área da residência ocorre em dois passos.
Primeiro são computadas as áreas de cada uma das três partes (social, serviço e privativa) e, depois de calculadas, estas áreas são utilizadas como entrada para o método Squarified Treemaps que então define onde e como os cômodos serão gerados.
Esse método gera um layout inicial com três retângulos.
Tendo essas três regiões definidas, o método Squarified Treemaps é novamente executado para cada uma das regiões, gerando finalmente o layout com a divisão dos cômodos, como mostra a Figura 2.9.
Este capítulo irá apresentar o modelo do trabalho desenvolvido.
Como dito anteriormente, são usados como base além de o Biocrowds os ambientes virtuais gerados por o trabalho de Marson aprofundados na Subseção 2.2.1.
Também foi acrescentada ao trabalho de Marson a funcionalidade que permite obter as coordenadas de posição (bounding box) de cada móvel presente no ambiente.
Com estas informações é possível evitar a geração de marcadores nestas áreas, o que impede que os agentes colidam com os móveis, melhorando a visualização do modelo.
O objetivo do modelo procedural de comportamento é utilizar esses ambientes virtuais gerados e as informações fornecidas por eles para gerar animação comportamental de pequenos grupos de agentes (também gerados de forma automática).
Esses pequenos grupos são animados dentro de o ambiente, e suas ações devem ter coerência com o mesmo, por exemplo, a ação comer é executada na cozinha.
Além de a coerência com o ambiente, o modelo também utiliza o tempo como forma de garantir a coerência dos comportamentos.
A coerência das ações com o tempo se dá no sentido de verificar que tipo de ação é compatível com certa hora do dia.
Para tanto, cada agente possui um horário fixo para sair e voltar para casa, representando alguma atividade fixa como trabalho ou estudo.
Além de esta informação, cada agente possui um horário de preferência, ou seja, se o agente é uma pessoa mais diurna ou noturna.
Estas informações ajudam a definir sua rotina de sono e comportamento em geral, que são definidos por atributos de status (fome, energia, humor, necessidades fisiológicas e higiene).
Esses atributos juntamente com as definições de horários e características dos agentes serão detalhados nas Subseções 3.1.2 e 3.1.3 O modelo também tem como objetivo a persistência de todos os dados em relação a o tempo.
Isto significa que a simulação pode ser interrompida e retomada a qualquer momento mantendo a mesma família e agentes juntamente com a coerência das ações.
Esta persistência é possibilitada com a utilização de seeds que controlam a aleatoriedade na geração das familias e comportamentos.
Para melhor exemplificar essa persistência desejada, utiliza- se uma situação hipotética:
Durante um jogo de terceira pessoa ao passar por uma casa qualquer, o jogador olha por a janela e visualiza uma família de humanos virtuais na cozinha.
Como esta casa especificamente não faz parte da trama principal do jogo, o jogador desvia sua atenção da casa.
Se após algum tempo o jogador passar por esta mesma casa e olhar por a janela novamente, ele deve encontrar a mesma familia habitando a casa, provavelmente não mais na cozinha.
Ou seja, mesmo que o processamento do comportamento dos agentes não continue executando enquanto a casa não é visualizada, o modelo consegue manter a coerência que será detalhada na Seção 3.1.3.
O modelo funciona então da seguinte forma:
Primeiramente, a partir de um ambiente virtual gerado, é criada uma seed que representa este ambiente.
Como demonstrado na Figura 3.1, esta seed é formada com os seguintes dados:
Número total de cômodos, número total de quartos, área total da planta, juntamente com os valores da menor e maior coordenadas (x, y, z) que representam o bounding box do ambiente.
A seed é útil para manter a persistência do ambiente (permitir que o mesmo seja gerado novamente se necessário).
Ela também serve de entrada para os próximos passos do modelo que serão abordados nas próximas subseções.
Estes passos são:·
Geração das Famílias· Geração dos Membros· Criação do Comportamento· Seleção de Ações.
Em as Figuras 3.2 e 3.3 podemos visualizar, respectivamente, um esquema representando a origem das seed do ambiente, e um esquema mostrando uma visão geral dos passos do modelo proposto.
Como mostra o esquema da Figura 3.3, o modelo se baseia num conjunto de regras que irão gerar uma família ou grupo para popular um ambiente específico.
A seed do ambiente é usada para gerar a aleatoriedade de seleção dessas regras para a geração dos atributos da família.
Estes atributos são:·
Id: Número identificador que fará parte da seed da família (Figura 3.4).·
Número de membros:
Define a quantidade de membros (agentes) pertencentes à família.
As regras para a geração das famílias e dos membros se baseiam em dados do Censo 2010 para Porto Alegre da seguinte maneira:
Para cada atributo a ser definido, tanto de uma família quanto de um membro, existe um arquivo texto que lista os valores possiveis desse atributo juntamente com seu respectivo peso (porcentagem de presença do valor desse atributo nos dados utilizados, ou seja, a probabilidade desse valor ser selecionado).
O modelo então utiliza uma função aleatória de seleção aplicando os pesos de cada valor ser selecionado.
No caso de o atributo número de membros da família, foi especificado para otimizar o modelo que o máximo de membros numa família é 5 devido a as baixas ocorrências de números maiores nos dados estatísticos.
Os pesos para um ambiente ter uma família de 1, 2, 3, 4 ou 5 membros são exatamente a porcentagem da existência de cada tamanho de família em Porto Alegre.
Porém, como os valores do IBGE para este atributo não é relacionado com o número de dormitórios do domícilio, ficou extremamente comum uma família de 3 membros ser criada para uma casa de apenas 1 dormitório.
Como esta situação, apesar de acontecer, é consideravelmente incomum, se decidiu criar uma segunda lista de pesos para tratar este caso específico, diminuindo as chances de uma família de 3, 4 e 5 membros serem criadas.
A Tabela 3.1 informa os valores dos pesos para cada quantidade de membros em porcetagem.
Tendo essas informações definidas, a seed da família é criada.
Esta seed contém o Id da família, o número de membros da mesma juntamente com a seed do ambiente utilizada para a geração da mesma.
Um exemplo de seed da família é demonstrado na Figura 3.4.
Após a quantidade de membros da família ser definida, o próximo passo a ser realizado é geração de cada membro e a definição de suas características (atributos).
Para isso, a seed da família (Figura 3.4) é utilizada para gerar a aleatoriedade de seleção dos valores de cada atributo.
Um membro tem os seguintes atributos:·
Gênero.· Papel na família:
Define a condição do membro na família, que papel ele exerce.·
Idade.· Quarto:
Contém o Id do quarto em o qual o agente dorme.·
Horário: É uma estrutura de dados que contém os seguintes parâmetros:
Tipo -- Define o período do dia que o agente tem uma ocupação fora de casa (trabalho ou estudo).
Por exemplo, o horário de tipo integral-manhã define que o horário é integral e inicia pela manhã.
Hora de Preferência -- Define se a pessoa tem hábitos mais noturnos ou diurnos.
Sua utilidade será detalhada na subseção 3.1.3.
Hora de Saída -- Define a hora que o agente sai de casa Hora de Chegada -- Define a hora que o agente retorna para casa· Atributos de Status:
Estes atributos são utilizados para realizar a seleção de ações que os agente realizam e serão detalhados na subseção 3.1.3.
Primeiramente é definido o gênero.
Os valores possíveis para este atributo são:·
agenero $= 1, 2 (masculino ou feminino).
São utilizados dados com a probabilidade de um membro ser de gênero masculino ou feminino de acordo com o número total de membros de uma família.
Estas probabilidades são demonstradas em forma de porcentagem na Tabela 3.2.
Com os gêneros selecionados, o modelo define o papel de cada membro da família.
Os possiveis valores deste atributo são:·
apapel $= 1 -- 18 (responsável, filho (a), enteado (a), genro (nora), pai/ padrasto (mão/ madastra), sogro (a), neto (a), bisneto (a), irmão (ã), avô (avó), outro (a) parente, agregado (a), convivente, pensionista, empregado (a), parente de empregado (a), individual em domicilio coletivo, cônjuge).
Estes papéis, tanto quando a probabilidade de cada papel ser designado, também são aplicações diretas do Censo 2010 para Porto Alegre, com exceção do papel 18, cônjuge.
Este papel é utilizado quando um membro responsável é selecionado como parte de um casal.
Quando isto acontece, o papel deste membro é modificado de 1 para 18.
Vale notar que as probabilidades variam de acordo com o gênero, e isso também é transmitido para o modelo.
Os valores das probabilidades para o atributo papel na família estão demonstradas em forma de porcentagem na Tabela 3.3.
Fora estas probabilidades, o modelo aplica uma regra para garantir que cada família tenha pelo menos um membro responsável.
Para continuar a definir as características de cada membro, nas famílias que possuem um número par de membros responsáveis, é definido se os membros de cada par são ou não cônjuges, sendo o gênero dos integrantes opostos ou iguais.
As porcentagens para um par de membros serem ou não cônjuges se encontram na Tabela 3.4.
O próximo atributo a ser definido é a idade do membro.
A idade é um atributo que define a faixa etária do agente.
Essa definição é feita também através de um sorteio com pesos que variam de acordo com o gênero.
O modelo adiciona algumas restrições de acordo com o papel que foi designado ao agente.
Estas restrições não permitem que um responsável, um sogro (a), um avô (ó), um pensionista e um empregado (a) sejam menores de idade por exemplo.
Os valores possíveis para idade são:·
aidade $= 1, 2, 3 (menor, adulto, idoso).
Vale notar que a faixa etária menor representa idades de 0 a 17 anos, adulto de 18 a 59 anos e idoso de 60 a 100 ou mais anos.
As porcentagens que definem a probabilidade de um membro pertencer a cada faixa etária estão demonstradas na Tabela 3.5.
Como muitos ambientes tem mais de um dormitório, houve a necessidade da definição do quarto em que cada agente iria dormir.
O modelo faz a distribuição dos agentes por estes quartos de acordo com as seguintes regras:
Se existe apenas um quarto, todos os agentes dormem neste mesmo quarto;
O ambiente tem mais de um quarto e não existem casais na família, os agentes são distribuidos uniformemente por os quartos;
O ambiente tem mais de um quarto e existe um ou mais casais na família, primeiramente cada casal é colocado num quarto e o restante dos agentes são colocados num outro quarto desocupado (se ele existir);
Finalmente, se ocorrer um caso em que todos os quartos estiverem ocupados por casais e houver ainda um membro restante, este membro irá dividir um quarto com um casal.
A seleção de que quarto é de um agente ou casal é feita de forma aleatória.
Os horários são definidos de acordo com a idade dos agentes, ou seja, cada horário contém pesos diferentes para menores, adultos e idosos.
Tanto os parâmetros que definem cada horário quanto as porcentagens de seleção de cada um são pré-definidos por o usuário e podem ser alterados.
Os horários possíveis atualmente são os seguintes:·
ahorario_ Tipo $= 1, 2, 3, 4, 5 (parcial-manha, parcial- tarde, parcial-noite, integral-manha, integral- tarde).·
ahorario_ HoraP referência $= 1, 2 (manhã ou noite, atribuidos fixamente em cada tipo de horário).·
ahorario_ Saida $= 8, 12, 14, 17 (atribuídos fixamente em cada tipo de horário).·
ahorario_ Chegada $= 13, 18, 19, 22 (atribuidos fixamente em cada tipo de horário).
Todos os valores da de cada agente formam a sua respectiva seed (membro da família) que também servirá como parâmetro para a definição do comportamento (explicado na Seção 3.1.3).
Utilizando o exemplo da família de dois membros que gerou a seed representada na Figura 3.4 e também considerando que os membros foram selecionados como um casal, a Figura 3.5 representa exemplos de seeds geradas para cada os dois membros desta família.
A criação do comportamento consiste em fazer com que cada agente realize ações no ambiente ao qual este pertence de forma automática.
Para tanto, também controla os atributos de status de cada agente juntamente com a presença deste agente no ambiente ou não.
Como dito na subseção 3.1.2, cada agente possui atributos de status s, que controlam diversas propriedades do agente.
São eles:·
Fome (F):
Determina o nível da necessidade de comer.·
Energia (E):
Determina o nível de energia.·
Humor (H):
Determina o nível de humor.·
Higiene (Hi):
Determina o nível de higiene.·
Necessidade Fisiológica (N):
Determina o nível da necessidade fisiológica.
Os valores destes atributos são os fatores determinantes no critério de seleção das ações.
Eles são variados de acordo com uma função do tempo que se baseia em curvas de variação padrão (default) de cada atributo (curvas estas representadas por f).
Os valores destas variações padrão são pré-definidos e, considerando que pessoas podem variar na sua rotina horária (algumas acordam e dormem cedo e outras acordam e dormem tarde) foram criados dois diferentes conjuntos de valores:
Um para pessoas com hábitos matinais e outro para pessoas com hábitos noturnos.
Para selecionar qual destes dois conjuntos de valores serão utilizados é que se utiliza a informação Hora de Preferência (ahorario_ HoraP referência) de cada membro, explicada na subseção 3.1.2.
Em as Figuras 3.6, 3.7, 3.8, 3.9, 3.10 são apresentadas as curvas de variação padrão f para cada atributo s (F, E, H, Hi e N respectivamente).
A variação dos valores de s em função de o tempo ocorre de hora em hora e é realizada de forma proporcional aos valores de f como define a Equação.
Vale lembrar que os valores devem sempre permanecer no intervalo de 0 a 1.
A outra forma de variar os valores de s é executando uma ação que o afeta.
Em este caso, se nota que as ações influenciam os atributos e os atributos determinam a escolha das ações.
Os atributos de status s definem as ações que os agentes selecionam uma vez que estes se encontram em casa.
Em este caso, é utilizada uma máquina de estados finíta determinística ou autômato finito deterministico (AFD) definido por uma quíntupla onde:·
é o alfabeto de entrada (C, Q, S, B, E, Com o).
O alfabeto é definido por a primeira letra do cômodo da casa onde as ações podem ocorrer, dependendo do status (Cozinha, Quarto, Sala de Estar, Banheiro, Escritório e Corredor).·
J é um conjunto de estados finito e não vazio.·
j0 é um estado inicial, um elemento de J. Em este caso, os agentes começam em qualquer lugar da casa.·
é uma função de transição de estado,:
JX valores dos atributos s (F, E, H, Hi, N).·
F i é o conjunto de estados finais, igual a J. A simulação é iniciada colocando os agentes em casa e inicialisando o AFD com um primeiro estado J (um dos lugares C, Q, S, B, Com o).
Após, a função de transição pode começar a ser aplicada, detectando níveis de status que são menores ou maiores (dependendo do atributo) que uma threshold pré-definida para cada atributo (exceto humor H) s que são as seguintes:
Quando os valores destes atributos de status atingem ou ultrapassam a threshold definida, o estado modifica.
Por exemplo, se Hit $= 0.1 então J $= B. Obviamente podem ocorrer conflitos, como quando dois atributos estão dentro de o limite de suas thresholds simultaneamente.
Para resolver este problema, foi determinada uma lista de prioridades de seleção, determinando uma ordem de verificação dos valores dos atributos e suas thresholds que é a seguinte: (N, F, H, E).
Se nenhum dos valores estão dentro de os limites de suas thresholds, então uma função randômica utilizando a seed do agente é executada para selecionar uma das ações que são relacionadas com o humor (H) do agente, ou seja, atividades de lazer.
Vale notar que o modelo, especificamente para ações executadas no banheiro (B), suporta o caso em que todos os banheiros da casa estão ocupados por agentes.
Quando este caso ocorre, o agente que deseja ir à B se desloca para o corredor Com o e aguarda até um dos banheiros ser desocupado.
Outro fator importante de cada ação é o tempo de duração da mesma, já que a simulação é apresentada visualmente ao usuário.
Para isso, cada ação tem como pré definição um tempo mínimo e máximo para sua execução.
Utilizando estas informações, é determinado através de uma função randômica (utilizando a seed do agente) o tempo total em que a ação irá ser executada.
Quando uma ação é terminada, o atributo de status que é impactado por a mesma é alterado para seu valor máximo ou mínimo (dependendo do atributo).
Por exemplo, quando um agente termina de comer, seu status de fome é alterado para 0.
Os tempos (mínimo e máximo) de cada ação, além de o valor que cada atributo de status recebe após esta ser executada se encontram na Tabela 3.6.
O tempo é um importante aspecto neste tipo de simulação, já que o usuário pode ter vontade de avançar o mesmo quando, por exemplo, os agentes estiverem dormindo.
Em este caso, o modelo tem uma classe própria para tratar o tempo da simulação, possibilitando que o usuário altere a velocidade do tempo para uma de 3 possíveis escalas:
Também, como este modelo é principalmente usado para personagens de plano de fundo, o usuário pode estar interagindo em outro ambiente de uma cidade virtual e não estar visualizando o ambiente em questão.
Consequentemente, o modelo desliga a visualização e o processamento dos agentes dentro de o ambiente.
Porém, o usuário pode a qualquer momento voltar novamente a visualizar a casa.
O desafio então é poder re-instanciar as entidades da simulação de maneira coerente também considerando o que estava sendo executado no momento em que a simulação foi desligada.
Primeiramente, no momento em que o desligamento é acionado, todas as seeds (ambiente, familia e agente) são salvas.
Além de estas, o modelo salva o estado atual dos atributos de status sts juntamente com o tempo em que este salvamento está ocorrendo (aqui indicado como tempo de salvamento ts).
Se o ambiente for re-instanciado num tempo específico t, o modelo primeiramente gera o ambiente, depois a família utilizando a seed do ambiente (mesma família é gerada) e finalmente as características fixas de cada agente (a) (utilizando a seed da família).
Para definir os atributos de status st para cada agente no tempo t, o modelo considera o último valor salvo de cada atributo do agente em junção com as curvas de variação padrão f de cada um, de acordo com a Equação 3.2, porém substituindo t por ts.
A Figure 3.11 ilustra o processo de re-instanciação (às 10:00) do atributo energia de um agente específico, em comparação ao comportamento padrão deste mesmo atributo.
A Figura 4.30 mostra o ambiente com apenas dois dos membros presentes, devido a a saída dos demais.
As Figuras 4.31 e 4.32 mostram imagens dos agentes em diferentes cômodos da casa.
Por fim, a Figura 4.33 mostra alguns agentes entrando na cozinha com a câmera mais próxima.
As simulações demonstradas anteriormente trazem apenas alguns exemplos de situações possivelmente geradas por o modelo.
Estas situações ainda podem variar ao passo que a família se modifica, juntamente com os horários de cada membro.
Outro fator que altera bastante a execução das ações por os agentes, são as tabelas de variação padrão de seus atributos, detalhadas no Capítulo 3.
Este trabalho apresentou um modelo cujo objetivo é gerar pequenos grupos (famílias) para popular ambientes virtuais gerados de forma procedural.
Além de a criação destes grupos, o modelo simula comportamentos para cada membro do mesmo, sendo estes comportamentos coerentes com o ambiente, características do próprio agente e com o tempo.
O modelo é totalmente procedural, portanto não necessita de nenhuma interação com usuário durante sua execução, sendo essa interação restrita apenas aos dados de entrada (que uma vez criados não necessitam ser modificados ou criados novamente, dependendo apenas da necessidade/ desejo do usuário).
Utilizando dados do Censo/ citecenso em forma de arquivo para a geração das famílias faz com que o trabalho tenha resultados coerentes com a realidade.
A utilização de seeds e de métodos randômicos que utilizam as mesmas faz com que o modelo não necessite de estruturas de dados pesadas para manter suas informações, pois elas são geradas novamente quando necessário.
Essa característica possibilita a persistência dos dados.
A persistência e coerência dos comportamentos em relação a o tempo também é garantida com a utilização de curvas de variação padrão, como explicado no Capítulo 3, para calibrar os atributos de status dos agentes.
Essa calibração possibilita que o usuário pare de visualizar a simulação por o tempo que desejar e, ao voltar a visualizar- la, as ações também voltam a ser executadas como se aquele tempo tivesse realmente passado, porém sem que o modelo tenha se mantido executando enquanto não visualizado.
O modelo também garante a coerência das ações com o ambiente/ cômodos da casa, inclusive restringindo a entrada de um agente num banheiro quando este está ocupado, além de fazer com que os agentes saiam do ambiente no horário em que devem realizar atividades externas.
Também evita a colisão de agentes com os móveis presentes no ambiente ao não gerar marcadores onde estes estão situados.
Todas estas características tem como objetivo tornar a simulação o mais real possível, além de automática.
A utilização de modelos procedurais para, além de gerar ambientes virtuais, também povoar estes ambientes de forma automática evitando uma constante necessidade de interação e modelagem pode trazer muitos ganhos para as áreas de jogos e simulação.
Resultados foram gerados a fim de comprovar a viabilidade de utilização deste modelo nestas áreas e também avaliar se o modelo atingiu seus objetivos iniciais.
Como ainda é uma área não explorada e com um tema muito subjetivo, como já abordado anteriormente em 4.0.5, este trabalho tem uma avaliação muito complexa.
Levando em consideração os atributos de avaliação citados também em 4.0.5, o modelo não exige interação durante sua execução (sendo a intereção com o usuário mínima e restringida apenas aos dados de entrada), tem um realismo satisfatório por se basear em informações reais e, por fim, possui um nível de detalhes que se restringe à características pessoais de cada agente e do ambiente, tornando a visualização convincente porém com possíveis melhorias.
De entre as principais melhorias, que podem ser consideradas como trabalhos futuros, pode- se citar a criação de quadras e até mesmo cidades dentro de uma mesma simulação (ruas com vários ambientes e famílias distintos).
A inclusão de semântica nos móveis seria interessante para possibilitar que os agentes realizem ações coerentes com os mesmos também de forma automática.
A fim de tornar o modelo ainda mais realista, seria interessante possibilitar a interação entre agentes, aumentando assim a complexidade do modelo, o tornando mais rico e variado.
De modo geral, o modelo conseguiu atingir os objetivos apresentados de modo satisfatório, conseguindo gerar resultados coerentes, bastante variados e satisfatórios visualmente.
É promissor por criar uma base numa área a ser ainda bastante explorada e com muito potencial.
