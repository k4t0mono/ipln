Atualmente, grupos de pesquisa da área acadêmica e da indústria tem se direcionado a um novo paradigma.
Computação pervasiva ou computação ubíqua permite o desenvolvimento de aplicações inteligentes tais como casas inteligentes, celulares inteligentes e computadores embutidos em trajes.
O objetivo da computação pervasiva é fornecer acesso computacional de maneira invisível e onipresente.
No entanto, a implementação de uma arquitetura para essas aplicações implica em muitos requisitos e desafios.
Um desses desafios é como permitir comunicação entre diversos dispositivos heterogêneos num ambiente pervasivo.
Com esses dispositivos, a rede pervasiva torna- se mais heterogênea e com diferentes protocolos e sub-redes de comunicação.
Essa heterogeneidade pode gerar problemas de qualidade e de atraso na rede.
Com isso, a aplicação não fornece o princípio de invisibilidade.
O objetivo desse trabalho é a proposição de uma plataforma hardware e software que seja capaz de integrar dispositivos em ambientes pervasivos.
Essa plataforma permite os dispositivos compartilharem serviços e recursos e se comunicarem, entre si e com a rede.
Para avaliar essa plataforma, uma aplicação chamada Agenda Pervasiva é desenvolvida a fim de mostrar a execução e as contribuições da plataforma proposta.
Palavras-chave: Computação Pervasiva.
Arquitetura. Plataforma Hardware e Software.
Dispositivos. Ambientes Pervasivos.
Os avanços tecnológicos na microeletrônica (como vários sistemas num único chip -- contribuindo por minimizar o tamanho e custo dos dispositivos) e na comunicação (como redes sem fio e redes Ad-Hoc) levaram diversos grupos de pesquisa a direcionar seus projetos a um novo cenário computacional.
Esse cenário, que contempla aplicações com novas funcionalidades em ambientes inteligentes, é chamado de computação pervasiva.
Computação pervasiva ou computação ubíqua é a proposta de um novo paradigma computacional que disponibiliza ao usuário acesso computacional de modo invisível e onipresente.
O conceito de invisibilidade permite que o usuário não precise conhecer a tecnologia para desfrutar de seus benefícios.
Onipresença possibilita ao usuário o uso da tecnologia em qualquer lugar e sempre que precisar.
Considerada como a Terceira Era da Informática, a computação pervasiva surgiu em 1991 com a visão de Weiser.
Weiser vislumbrava a idéia que no futuro os computadores habitariam os mais triviais objetos:
Etiquetas de roupas, canetas, interruptores de luz, etc..
No entanto, em 1991, não existia tecnologia suficiente para concretizar a visão de Weiser.
Após uma década de progresso na computação (disponibilização de novos dispositivos como PDA, relógios inteligentes e eletrodomésticos para casas inteligentes) e na comunicação (avanços em padrões de redes sem- fio como Bluetooth, IEEE 802.
11 e em redes inteligentes como Ad-Hoc), a proposta de Weiser vem, pouco a pouco, se materializando.
No entanto, para concretizar a proposta da computação pervasiva, é necessário superar os desafios existentes.
Um ambiente pervasivo demanda aplicações inteligentes e sensíveis ao contexto, ou seja, aplicações que detectam mudanças no ambiente e se adaptem a elas da melhor maneira possível.
Além disso, um ambiente pervasivo é composto por uma variedade de dispositivos de diferentes capacidades em termos de capacidade de hardware, sistema operacional, e conectividade da rede (com ligações cabeadas ou sem fio).
Essa heterogeneidade deve ser tratada a fim de disponibilizar os serviços e recursos da rede, tratando até mesmo problemas de falhas e desconexões.
Outro fator importante para a computação pervasiva é possibilitar a integração de dispositivos usados por o usuário no dia-a-dia (por exemplo, forno microondas, rádios e cafeteiras) em ambientes pervasivos.
Com o objetivo de superar esse último desafio, esse trabalho propõe uma plataforma HW/ SW que seja capaz de integrar dispositivos eletrônicos num ambiente pervasivo.
A computação pervasiva possui muitos aspectos motivacionais para a pesquisa acadêmica e para a indústria.
Essa nova área de pesquisa é capaz de unir diversos aspectos motivacionais numa única situação de nosso cotidiano (cenário).
Em essa seção, dois cenários são utilizados para ilustrar o conceito de computação pervasiva.
Esse cenário mostra a utilização da computação pervasiva numa casa inteligente.
A casa inteligente apresenta novas funcionalidades e novas tecnologias para permitir ao usuário mais conforto, praticidade e segurança em sua vida pessoal.
A Figura 1.1 mostra um projeto de casa inteligente.
A seguir, alguns exemplos de funcionalidades adicionadas a essa casa inteligente são apresentados.
Porta da casa inteligente.
Essa funcionalidade inclui uma etiqueta de identificação com freqüência de rádio para a identificação e autorização dos residentes.
Além disso, a porta da casa inteligente inclui microfone, câmera, abertura automática da porta, tranca elétrica e caixa acústica a fim de permitir aos moradores a comunicação com visitantes e a admissão destes.
Banheiro inteligente.
Esse banheiro possui sensores capazes de detectar e notificar ao serviço central a falta de sabonetes, papéis higiênicos e outros produtos higiênicos.
O chuveiro possui reguladores de temperatura da água para prevenir queimaduras ao usuário e os sanitários contêm descarga automática.
Outras tecnologias para medir valores biométricos dos ocupantes, como peso, altura e temperatura, podem ser adicionadas a essa funcionalidade.
Espelho inteligente.
Cada espelho inteligente da casa pode permitir a exibição de importantes mensagens e lembretes -- por exemplo, um agendamento de medicamentos -- aos usuários quando necessários.
Refrigerador inteligente.
Um futuro refrigerador executará o monitoramento da disponibilidade e consumo de alimentos, detectará alimentos fora de o prazo de validade, criará listas de compras e fornecerá conselhos para preparação de pratos de acordo com os alimentos armazenados no refrigerador.
Monitor de Segurança da Casa. Um sistema de segurança continuamente verificará todas as janelas e portas e, a pedido, informará aos residentes quais janelas e portas estão abertas ou fechadas.
Cama inteligente.
A cama inteligente tem equipamentos especiais para monitorar a forma de dormir dos usuários para se adaptar aos desejos do usuário.
A utilização da computação pervasiva pode permitir a automóveis novas funcionalidades para atender o usuário.
Exemplos de novas funcionalidades para automóveis utilizando a computação pervasiva são apresentados a seguir.
Serviços móveis de negócio.
Esses serviços permitem ao motorista buscar dados, documentos e relatórios de sua empresa, encomendar produtos através da Internet e conduzir outras transações, ajudando a reduzir perdas econômicas e frustrações associadas ao congestionamento do trânsito.
Serviços baseados em localização.
Utilizando a posição corrente do veículo, os serviços baseados em localização podem fornecer aos ocupantes conteúdos sobre o tráfego do trânsito, localização de outros usuários e informações sobre serviços comerciais próximos ao veículo como lanchonetes, borracharias, etc..
Tráfego de dados.
Veículos equipados com comunicadores sem fio e sensores especiais podem coletar e transmitir dados ambientais e dados sobre o tráfego em tempo real -- por exemplo, informações sobre hábitos do motorista, congestionamento de estradas e nível de poluição.
Autoconserto veicular.
Veículos com sofisticadas capacidades de computação e comunicação poderiam atuar com ferramentas para facilitar a manutenção do veículo e previnir acidentes nas estradas.
Veículos também poderiam transmitir mensagens de socorro no caso de acidentes.
O objetivo desse trabalho é a proposta e a implementação de uma plataforma HW/ SW que permita a integração de dispositivos eletrônicos num ambiente pervasivo.
Essa plataforma possui as seguintes funcionalidades no ambiente pervasivo:·
conectar dispositivos eletrônicos usados por o usuário no dia-a-dia na rede pervasiva;·
buscar e disponibilizar serviços e recursos permitidos, existentes na rede, para dispositivos conectados na plataforma;·
permitir o acesso dos dispositivos conectados na plataforma a serviços e recursos pervasivos existentes no ambiente;·
disponibilizar os recursos permitidos dos dispositivos integrados na plataforma para todos os outros dispositivos existentes na rede;·
permitir a integração de sensores, atuadores e dispositivos de identificação para possibilitar a capacidade de detecção e controle de contexto no ambiente;·
possibilitar a adição de novos serviços e recursos a partir de a integração de um ou mais dispositivos integrados na plataforma (configurabilidade).
Com o propósito de definir os serviços e componentes necessários na computação pervasiva para a plataforma, esse trabalho tem como objetivo secundário definir uma arquitetura pervasiva.
Essa arquitetura é projetada para executar as aplicações, lidando com os requisitos e desafios existentes na computação pervasiva.
O presente trabalho é composto por sete capítulos.
O capítulo 2 descreve os conceitos básicos relacionados à computação pervasiva assim como algumas definições importantes definidas ou adotadas no trabalho.
Esse capítulo também salienta os principais requisitos necessários para a computação pervasiva.
Em o capítulo 3, esforços de pesquisa relacionados à arquitetura e à plataforma são relacionados para auxiliar na definição da arquitetura e na elaboração do modelo de plataforma proposto.
O capítulo 4 apresenta a arquitetura pervasiva estruturada em camadas.
A arquitetura é utilizada para definir os principais serviços e componentes para a plataforma proposta.
O capítulo 5 descreve o modelo de plataforma proposto no trabalho.
Em esse capítulo, são apresentados o projeto e a implementação de plataforma que segue como premissa esse modelo proposto.
Em o capítulo 6, uma aplicação chamada Agenda Pervasiva é apresentada.
Experimentos realizados são mostrados e avaliados, com o objetivo de viabilizar o funcionamento do modelo proposto.
E por fim, conclusões e trabalhos futuros são discutidos no capítulo 7.
Conceitos Gerais do Trabalho A computação pervasiva é um novo paradigma que contempla um novo cenário computacional com aplicações com novas funcionalidades em ambientes inteligentes.
Essas aplicações são distribuídas e utilizam recursos de uma grande variedade de dispositivos interligados numa rede altamente heterogênea.
Esse capítulo tem como objetivo definir alguns conceitos relacionados à computação pervasiva assim como apresentar algumas definições do trabalho.
Os conceitos relacionados à computação pervasiva são apresentados inicialmente.
Em seguida, a definição de arquitetura e plataforma é apresentada.
Por fim, esse capítulo descreve os principais requisitos necessários para o desenvolvimento de aplicações na computação pervasiva.
Ambiente pervasivo é o espaço físico onde a computação atua de forma &quot;discreta «para fornecer onipresença aos usuários.
Ou seja, ambiente pervasivo é o lugar onde as aplicações pervasivas interagem com os usuários, de forma invisível e onipresente.
Um ambiente é representado por um conjunto entidades tais como dispositivos, usuários, redes e locais relacionados ao contexto computacional da aplicação.
Atualmente, a computação pervasiva contempla uma variedade de aplicações atuando em diferentes ambientes pervasivos.
São eles:·
Ambientes Acadêmicos:
Tem como objetivo auxiliar os professores na produção de material didático e das aulas, e ajudar os estudantes com as anotações das aulas e com a teleeducação, proporcionando ao estudante comparecer a uma aula mesmo estando distante de sua universidade.
Exemplos de aplicações pervasivas dessa área são Classroom 2000 e o Smart Classroom.·
Ambientes Corporativos: Oferece suporte às empresas em seu ambiente corporativo, desde segurança e sigilo até reuniões reais e virtuais de funcionários.
Exemplos de projeto nessa área incluem o Kimura e o iRoom (Interactive Room).·
Ambientes Turísticos: Tem como objetivo auxiliar os usuários como um guia turístico eletrônico.
Ou seja, com base na localização do usuário, essa aplicação pode indicar caminhos de determinados lugares, encontrar pessoas e objetos num ambiente e identificar locais visitados nesse mesmo ambiente.
Exemplos de ambientes são museus, shoppings, etc..
O Rememberer da Hewlett Packard Laboratories é um exemplo de aplicação nessa área.·
Ambientes Residenciais: Fornecem serviços aos habitantes de uma casa a fim de proporcionar conforto, praticidade e segurança a esses habitantes.
Exemplos desse tipo de aplicação podem ser vistos no Gator Tech Smart House e no projeto EasyLiving.·
Ambientes para Negócios:
Ajudam os usuários a efetuarem suas compras, proporcionando agilidade, conforto e economia.
Essas aplicações registram os produtos ao serem colocados nos carrinhos, informam as promoções e localização dos produtos.
O MyGrocer é um exemplo de aplicação para esses ambientes.·
Ambientes Hospitalares: Auxiliam médicos e enfermeiros a diagnosticar e medicar seus pacientes, e controlam o tratamento e o estado atual de um paciente.
Um exemplo de aplicação para esse tipo de ambiente é o ACDI da Universidade de Aarhus da Dinamarca.·
Outros domínios:
Outros domínios de aplicações englobam automóveis, laboratórios, aeroportos, penitenciárias, etc..
A aplicação Vehicular Mobile Commerce pode ser considerado como uma aplicação no domínio automotivo.
A computação pervasiva abrange uma imensa quantidade de diferentes dispositivos.
Exemplos de dispositivos incluem controles, sensores e atuadores para residências e automóveis, eletrodomésticos inteligentes, ar-condicionado, aquecedor, relógios e etiquetas inteligentes.
Esses dispositivos são elementos fundamentais nas aplicações pervasivas.
Os dispositivos pervasivos normalmente são sistemas embarcados que atuam com diversas finalidades nas aplicações pervasivas.
Além de atuar com um propósito específico, um dispositivo pervasivo deve ser capaz de se comunicar com outros dispositivos, a fim de permitir a construção de inteligência no ambiente, que é refletida nas aplicações.
Essa inteligência surge através da distribuição de serviços dos dispositivos entre si, onde um dispositivo pode ser capaz de fornecer o serviço de outro dispositivo somente para satisfazer o usuário.
Um exemplo disso seria a requisição de um usuário a um serviço existente em seu PDA para executar na televisão de sua sala de estar.
Com a tentativa de visualizar os objetivos específicos dos dispositivos, uma classificação foi elaborada por, seguindo quatro tipos de dispositivos:
Controles inteligentes, dispositivos de acesso à informação, dispositivos fixos de ambientes, dispositivos de entretenimento.
A Tabela Os controles inteligentes são caracterizados por serem muito pequenos (tiny) e normalmente se integram a outros dispositivos (câmeras, sensores, atuadores etc) com o objetivo de detectar o contexto do ambiente e tentar manter o controle sobre o mesmo.
Os dispositivos de acesso à informação são dispositivos com grande capacidade de mobilidade e comunicação, utilizados para as tarefas diárias e profissionais do usuário.
Os dispositivos fixos de ambiente são dispositivos ligados ou conectados a equipamentos ou produtos eletrônicos.
Esses dispositivos são caracterizados por interagirem entre si e com os controles inteligentes visando maior conforto e praticidade dos usuários.
Os dispositivos de entretenimento são dispositivos embarcados que proporcionam lazer e entretenimento ao usuário e são projetados para executar aplicações multimídia.
As redes pervasivas são caracterizadas por elevados níveis de heterogeneidade para executar as aplicações com um bom desempenho e por conectar variados tipos de dispositivos.
Esses elevados níveis de heterogeneidade implicam numa rede com diferentes subredes, onde cada subrede possui um protocolo de comunicação diferente de outra subrede.
A Figura 2.1 mostra um exemplo de rede pervasiva atuando numa aplicação de uma residência inteligente.
Em esse exemplo pode ser visto a heterogeneidade das subredes, através das três subredes diferentes:
TCP/ IP, IEEE1394 e LonWorks.
Em as subredes existem diferentes dispositivos que se comunicam através de um protocolo de comunicação.
Por exemplo, a impressora se comunica com o HD externo através da rede TCP/ IP, e usando o protocolo de comunicação TCP/ IP.
As subredes se interligam através de roteadores, que permite a comunicação de dois dispositivos em subredes diferentes.
Por exemplo, a comunicação entre a câmera de vigilância que se encontra na subrede LonWorks e o PC da subrede TCP/ IP é feita por o roteador.
Conseqüentemente, o pacote que tinha informações para o protocolo de comunicação LonTalk foi convertido por o roteador para o protocolo de comunicação TCP/ IP.
Outro aspecto chave de uma rede pervasiva é a conectividade.
Para obter os princípios da computação pervasiva, a rede deve fornecer uma conectividade sem fronteiras, satisfazendo o conceito de comunicação de qualquer lugar e a qualquer momento e possibilitar mobilidade dos usuários, dos dispositivos e da aplicação.
O problema da conectividade acontece quando o dispositivo necessita desconectar constantemente e indisponibiliza seus serviços por tempo indeterminado, como é o caso de dispositivos móveis.
O conceito dado para arquitetura nesse trabalho é relacionado a aplicações distribuídas num ambiente pervasivo, ou seja, é definido por a integração de todos os dispositivos pervasivos existentes no ambiente.
Em esse trabalho, arquitetura pervasiva é definida como estrutura e organização do ambiente pervasivo, onde os componentes de hardware e software, localizados nos dispositivos desse ambiente, comunicam- se e compartilham recursos para disponibilizar ao usuário acesso computacional de modo invisível e onipresente.
A Figura 2.2 mostra a estrutura de uma arquitetura pervasiva1.
Essa arquitetura é baseada numa arquitetura de sistemas distribuídos, definido por Tanenbaum.
Um ambiente pervasivo permite a execução de vários dispositivos se comunicando entre si através de uma rede pervasiva.
Esse ambiente pode ser organizado em camadas que representa logicamente a execução das aplicações definidas no ambiente (camada de aplicação) e a execução física de um dispositivo (hardware).
Em a intermediação dessas estão o sistema operacional e o middleware, que respectivamente definem a abstração de toda complexidade do hardware para programação e execução das aplicações e a abstração da heterogeneidade da plataforma (dispositivos e rede) e das dependências do sistema operacional.
A arquitetura pervasiva é baseada em sistemas distribuídos, mas essa arquitetura é voltada para atender os dispositivos pervasivos e os componentes (hardware e software) apresentam muitas modificações para permitir a execução das aplicações no ambiente pervasivo.
O hardware na computação pervasiva possui cada vez mais disponibilidade de recursos.
Com a tendência de pequenos componentes possuírem grande poder computacional (SOC com diversos processadores, grande capacidade de memória e diversos periféricos e sensores), pequenos dispositivos, ambientes e objetos utilizados no dia-a-dia (como cadeiras, mesas e sofás) tendem a incluir &quot;inteligência «para interagir com os usuários e com outros dispositivos, sem que o usuário perceba.
Além disso, o uso cada vez maior de dispositivos com comunicação sem fio torna os dispositivos embarcados mais invisíveis e mais onipresentes para os usuários.
O software na computação pervasiva tende a tornar- se cada vez mais complexo.
Com a heterogeneidade dos dispositivos e da rede, e os cuidados com limitação de memória, capacidade de processamento, energia e a latência da rede torna- se mais difícil projetar o software para a comunicação e distribuição de serviços e recursos entre os dispositivos.
Entende- se por serviço um conjunto de funcionalidades e tarefas que um dispositivo é capaz de tratar.
Recurso é um 1 Figura originada de componente físico ou virtual disponibilizado para os dispositivos que possuem limitações.
Para facilitar o desenvolvimento da aplicação, tendo em mente essas limitações e dificuldades, o software da computação pervasiva possui limitações e restrições também nas suas três camadas:
Sistema Operacional (SO):
Tem que ser projetado tendo em mente as limitações do dispositivo e do objetivo de uso do mesmo dispositivo.
No entanto, o sistema operacional também deve ser flexível e configurável (para permitir novos tipos de serviços e aplicações) e ter capacidade de comunicação e disponibilização de recursos a outros dispositivos e ao usuário para atuar no ambiente pervasivo.
Middleware: Para atender os princípios de invisibilidade e onipresença, os middlewares existentes na computação pervasiva devem fornecer os seguintes serviços:
Abstração da comunicação, adaptação, reconhecimento de contexto e descoberta de serviços (ou recursos).
Aplicação: Devem ser projetadas levando em consideração a minimização da heterogeneidade dos dispositivos e a grande capacidade de adaptação.
O primeiro fator é adquirido através da restrição de alguns aspectos durante a fase de projeto e implementação da aplicação pervasiva:
Limitação do hardware de alguns dispositivos e da comunicação que esses dispositivos podem proporcionar.
A escolha da linguagem de programação, dos protocolos e padrões de comunicação e dos outros componentes SW é importante no projeto da aplicação para suportar as restrições existentes.
O segundo fator proporciona ao sistema maior confiabilidade (evitar falhas), atualização do ambiente e de novas funcionalidades aos usuários.
O conceito de plataforma HW/ SW nesse trabalho é baseado num dispositivo computacional genérico capaz de permitir o reuso de software.
Uma plataforma é definida por um conjunto de componentes (hardware e software) integrados que são projetados para permitir o reuso de aplicações em software.
Esse reuso permite a redução de custos de um projeto e fornece flexibilidade para atender um determinado conjunto de aplicações limitadas por determinadas restrições.
Um exemplo de plataforma é um dispositivo computacional utilizado para atender uma família de celulares.
Muitos fabricantes produzem diferentes modelos de celulares com a mesma plataforma, modificando apenas a aplicação em software e o invólucro do celular.
O reuso da plataforma para aplicações diferentes permite reduzir os custos de projeto para a produção de um novo modelo com a mesma plataforma.
A plataforma desse trabalho é definida para integrar diversos dispositivos num ambiente pervasivo.
A Figura 2.3 (a) mostra a fisionomia dessa plataforma e a Figura 2.3 (b) apresenta a estrutura da plataforma.
A estrutura dessa plataforma é dividida em duas camadas:
Plataforma HW e plataforma SW.
A plataforma HW é constituída de três partes:
Unidade de Entrada/ Saída, que representa os componentes HW para controlar os dispositivos de entrada (E) e saída (S);
Unidade de Processamento, que representa os componentes HW utilizados para processar os componentes SW, como os processadores e memórias;
E Unidade de Rede, que representa os componentes HW para efetuar a comunicação com outros dispositivos.
A escolha de cada componente HW em cada uma dessas unidades é importante para o projeto da plataforma, pois esses componentes delimitam as limitações do domínio das aplicações.
Por exemplo, o desempenho do processador, o tamanho de uma memória ou o consumo de energia de um dispositivo é capaz de restringir o uso de muitas aplicações por essa plataforma.
Por outro lado, a plataforma HW por si não é capaz de obter o nível de reuso da aplicação software que se deseja.
Para esse reuso, é necessário abstrair a plataforma a um nível mais alto, onde a aplicação SW tenha fácil acesso para utilizar os componentes HW.
Por isso existe Aplicação Aplicação Middleware Devices Drivers Sistema Operacional Unidade de Entrada/ Saída Sistema de Comun.
A computação pervasiva é baseada num ambiente computacional distribuído com grande diversificação de dispositivos que permite ao usuário o acesso computacional de modo invisível e onipresente.
Com base nessas características, os requisitos definidos nesse trabalho necessários para a computação pervasiva são:·
Suporte a Heterogeneidade.
A heterogeneidade em sistemas computacionais não desaparecerá no futuro.
Com base nessa premissa, o ambiente pervasivo deve permitir a conexão e a comunicação de dispositivos com diferentes plataformas que utilizam diferentes protocolos e meios de comunicação e diferentes sistemas operacionais.·
Gerenciamento de Recursos. Recursos e serviços se tornam disponíveis e indisponíveis à medida que o tempo transcorre e usuários se deslocam com seus dispositivos.
Um ambiente pervasivo deve ser capaz de buscar e descobrir recursos existentes na rede e fornecer- los aos dispositivos e às aplicações sempre que necessários.·
Suporte a Conectividade.
Alguns dispositivos pervasivos (como por exemplo PDA), por consistirem de mobilidade, são capazes de conectar e desconectar constantemente da rede pervasiva.
O ambiente pervasivo deve ser capaz de permitir essa conexão/ desconexão dos dispositivos de acesso à informação sem que acarrete problemas de falhas e no Gerenciamento de Recursos.·
Suporte à Mobilidade.
Os dispositivos móveis e os usuários se deslocam constantemente no ambiente pervasivo.
Por isso, a computação pervasiva deve dar suporte a esse deslocamento e permitir a esses dispositivos e usuários todos os recursos que necessitarem.
Além disso, o ambiente pervasivo deve ser capaz de capturar informações relacionadas a esse deslocamento tais como localização, contexto, etc.· Suporte a Falhas.
Um ambiente da computação pervasiva deve detectar falhas existentes no sistema.
Quando detectada alguma falha, o sistema deve tratar dessa falha com base nas informações contidas no contexto do ambiente.·
Suporte a Segurança.
Aplicações para sistemas pervasivos exigem mecanismos de segurança mais flexíveis e configuráveis que os tradicionais.
O suporte à segurança possui dois requisitos específicos para executar aplicações pervasivas:
Controlar o acesso de sistemas heterogêneos e controlar o acesso a informações de forma que somente o dispositivo solicitante (autorizado ao acesso a informações) receba as informações requisitadas.·
Suporte a Adaptação e a Reconfiguração Dinâmica.
Um ambiente pervasivo deve permitir suporte a adaptação para suprir a necessidade de um recurso e trazer maior flexibilidade para o sistema.
Esses tipos de serviços abordam questões relativas à alteração da estrutura da aplicação e a inserção ou remoção de componentes (HW e SW) em tempo de execução e durante o processamento.·
Suporte a ConsCiência de Contexto.
Um sistema pervasivo tem como uma de suas finalidades principais conhecer o estado atual do usuário e do ambiente, e modificar seu comportamento baseado nessas informações.
Um contexto do usuário pode conter diversos requisitos consistindo de atributos como localização física, estado fisiológico (temperatura do corpo, por exemplo), estado emocional (fome, sede, sono), histórico pessoal, etc..
Com as informações, o ambiente, com essa funcionalidade, deve antecipar as necessidades do usuário, mas sem inferir em momentos importunos.·
Balanceamento entre Pró-atividade e Transparência.
Um ambiente pervasivo deve ser pró-ativo, ou seja, ele deve ser capaz de identificar a intenção de um usuário, através das informações de contexto, para tratar da invisibilidade.
Muitas informações de contexto são baseadas na captura de informações do usuário e de contexto do ambiente.
Ao mesmo tempo, o sistema deve ser transparente e permitir o usuário executar suas tarefas sem a distração do ambiente em busca de contexto.
Por isso, um ambiente pervasivo deve permitir o balanceamento entre pró-atividade e transparência.·
Descentralização. As responsabilidades num ambiente pervasivo são distribuídas entre os dispositivos pervasivos.
Por isso, o sistema não possui um servidor que controla todo ambiente, mas esse controle é feito através de uma colaboração de todos dispositivos compartilhando recursos entre si para execução da aplicação.
Estado da Arte Para elaborar o modelo de plataforma proposto no capítulo 1, foram estudados alguns trabalhos relacionados a arquiteturas pervasivas e a plataformas existentes na computação pervasiva.
O objetivo do estudo das arquiteturas pervasivas é avaliar as necessidades que os ambientes pervasivos necessitam, em termos de serviços e recursos para a definição da arquitetura pervasiva apresentada no próximo capítulo desse trabalho.
Essa arquitetura é utilizada com o propósito de capturar os serviços e alguns componentes necessários para a plataforma proposta.
Já o estudo das plataformas existentes na computação pervasiva mostra alguns trabalhos realizados para conectar dispositivos e objetos no ambiente pervasivo.
Esse estudo ajuda na concepção do modelo de plataforma, avaliando os componentes HW e SW necessários para auxiliar no projeto de aplicações pervasivas.
A arquitetura pervasiva, mostrada no capítulo 4, é originada de um estudo realizado nessa seção.
Esse estudo visa avaliar as necessidades das arquiteturas existentes na pesquisa acadêmica e é realizado sobre cinco arquiteturas pervasivas:
Aura, Gaia, GTSH, Homeros e Pholo.
Em o final dessa seção, uma breve análise é feita, caracterizando vantagens e desvantagens do uso de cada arquitetura.
O projeto Aura é caracterizado por fornecer para cada usuário o conceito de invisibilidade de serviços de computação e sua localização.
Os dois principais desafios do Aura são:
Maximizar o uso de recursos disponíveis e concentrar a atenção do usuário.
A maior fonte de distração do usuário surge da necessidade de gerenciar seus recursos de computação em cada ambiente novo, e do fato que os recursos podem mudar dinamicamente e freqüentemente num ambiente particular.
A arquitetura SW de Aura é dividida em cinco camadas.
A camada do usuário (camada mais acima) é voltada para a inclusão das aplicações existentes num determinado cenário em que Aura deverá executar.
Essa camada é responsável por o gerenciador das tarefas, chamado de Prisma, que é responsável por fornecer suporte às tarefas, detectar as atividades do usuário e fornecer os serviços de pró-atividade.
A camada abaixo é a camada das tarefas que é composta por as aplicações, por um componente que executa as tarefas remotas e por outro componente que dá suporte a essa execução.
A camada de serviços (uma camada abaixo) é caracterizada por o tratamento de adaptação e acesso a informação remota.
Em essa camada existem dois componentes:
Um sistema de gerenciamento de arquivos distribuídos que suporta arquivos remotos (Coda) e outro que fornece serviços de sistema operacional para adaptação e monitoramento de recursos (Odisséia).
Em a camada abaixo, encontra- se um kernel do sistema operacional para suportar as tarefas de um sistema operacional.
E a última camada, apresenta uma rede inteligente com serviços de localização, pró-atividade, contexto e gerenciamento de energia no protocolo.
A arquitetura SW de Gaia é destinada para tratar um espaço ativo (Active Space).
Espaço Ativo é definido como um espaço físico coordenado por uma infra-estrutura em SW baseado no contexto que realça a mobilidade dos usuários para a interação e configura seu ambiente físico e digital.
O objetivo de Gaia é coordenar as entidades em SW e os dispositivos de rede heterogênea contidos num espaço ativo.
A arquitetura de Gaia é composta por três camadas:
Aplicações para o espaço ativo, framework de aplicações e o kernel de Gaia.
As aplicações de Gaia são baseadas em componentes distribuídos e móveis que requerem suporte a execução e gerenciamento de componentes remotos.
A camada framework de aplicações é responsável por mobilidade, adaptação e construção dinâmica de aplicações.
Sua funcionalidade permite criar novas aplicações, assim como executálas no espaço ativo.
E a última camada, o kernel de Gaia, é composta por serviços e sistemas que fornecem sincronização, armazenamento de informações e de contextos existentes, detecção de entidades físicas (pessoas e dispositivos) e digitais (serviços e aplicações) existentes no espaço ativo e adaptação conforme as necessidades do contexto.
O Gator Tech Smart House (GTSH) é um projeto voltado para o desenvolvimento de uma casa inteligente.
Sua arquitetura é composta por seis camadas.
A camada mais abaixo é a camada física e consiste de vários dispositivos e aparelhos elétricos que são utilizados para uma determinada funcionalidade da casa.
Em essa camada, temos a televisão, a cafeteira, os sensores/ atuadores, etc..
A camada acima é a camada da plataforma de sensores que tem como objetivo converter qualquer informação de um sensor ou atuador da camada física num serviço em SW que pode ser programado ou composto por outros serviços.
A camada de serviços que está um nível acima mantém o funcionamento dos serviços ativados.
Existem dois tipos de serviços:
Serviços básicos que representam o mundo físico e são criados a partir de o contexto do ambiente e serviços de composição que representam as aplicações e são criados por os projetistas do sistema.
Já a camada de conhecimento é responsável por tratar das informações do sistema (conhecimento).
Seus componentes são utilizados para registrar e descobrir novos serviços e recursos disponíveis.
A camada de gerenciamento de contexto detecta e armazena os contextos do ambiente e deixa os desenvolvedores da aplicação criar e registrar os contextos de interesses.
Cada contexto é armazenado num grafo, onde facilmente pode ser recuperado por a camada de serviço para ativar ou restringir serviços no sistema.
A camada mais acima é a camada de aplicação que consiste num gerenciador de aplicação para habilitar serviços, construir um novo grafo que associa comportamento com contexto, registrar e compor novos serviços, assim como procurar e descobrir serviços.
Além disso, essa camada é a responsável por efetuar monitoramento e auxiliar os desenvolvedores avaliar o funcionamento do sistema.
O Homeros é uma arquitetura SW voltado para atender sistemas heterogêneos móveis.
Tem como objetivos gerenciar efetivamente seus recursos, contexto, localização e outros serviços.
A arquitetura foi projetada para flexibilizar no suporte de novos serviços, requisições de usuários e novas aplicações.
A arquitetura do Homeros é composta por três camadas.
A camada mais abaixo é composta por um gerenciador de componentes que consiste em gerenciar a reconfiguração de seus componentes e recursos.
A camada central é composta por dois componentes:
O gerenciador de eventos, cujo objetivo é distribuir os eventos através de um modelo de comunicação baseado em produtor e consumidor para estabilidade e confiabilidade;
E o repositório de componentes que armazena informações e serviços existentes na aplicação.
A camada mais acima consiste de cinco serviços para aplicação pervasiva:
Um gerenciador de contexto, que fornece os serviços pró-ativos utilizando as informações do repositório de componentes;
Uma adaptação QoS que monitora as informações da rede;
Um gerenciador de configuração que é o responsável por a configuração de novos componentes;
Um gerenciador de recursos que permite a descoberta e a utilização de novos recursos e o gerenciador de segurança, que fornece soluções de autenticação e delegação usando agentes móveis.
A arquitetura Pholo é destinada para dar suporte para o ambiente de execução do Holoparadigma.
O Holoparadigma é um modelo multiparadigma voltado para abstrair a modelagem de ambientes móveis e permitir representações mais similares ao mundo real.
Sua unidade de modelagem, o ente, permite o desenvolvimento de sistemas tanto centralizados como descentralizados e possui grande capacidade de mobilidade.
A arquitetura Pholo é dividida em cinco camadas:
Camada de rede, sistema operacional, camada de serviços, camada de execução e aplicações.
A camada de execução e a camada de serviços são as responsáveis por os serviços de computação pervasiva na arquitetura.
A primeira camada é responsável por a execução dos programas do Holoparadigma.
Essa camada é composta por dois serviços:
HoloVM e o HNS.
O HoloVM é uma máquina virtual que executa as aplicações, de forma distribuída, com suporte à comunicação entre entes, abstraindo toda a complexidade do desenvolvimento.
Já o HNS tem o controle de todos os entes em execução, através de uma estrutura em forma de árvore.
O objetivo é fornecer informações dos entes para as HoloVMs, como por exemplo localização de um ente.
A camada de serviços é responsável por o fornecimento dos seguintes serviços:
Localização física, que informa a localização e aspectos de mobilidade dos entes;
Contexto para aquisição de informações sobre o mundo real;
Mobilidade, que consiste na movimentação de um dispositivo físico no espaço físico, na movimentação de um ente modificando o HNS e na migração de um ente (por exemplo, um serviço move- se de um dispositivo para outro);
Descoberta de serviços, que permite HoloVMs descobrir servidores HNS e descoberta de serviços desempenhados por entes de uma aplicação.
A arquitetura Aura é voltada à computação centrada no usuário, ou seja, a mobilidade física do usuário e a semântica de que a aplicação o segue é central na arquitetura Aura.
Por isso, Aura trata dos requisitos necessários para atender ao usuário.
No entanto, Aura fica restrita a mudanças do contexto nos ambientes.
A arquitetura Gaia é capaz de atender os problemas de contexto no ambiente.
Ela é dirigida somente ao espaço ativo, ficando restrita somente às aplicações ligadas nesse espaço ativo e descartando o deslocamento global do usuário.
GTSH é voltada à computação centrada a situação, que integra o usuário e o ambiente.
Ela se delimita aos dispositivos por a detecção do contexto do usuário e do ambiente.
No entanto, fica restrita a mobilidade dos dispositivos e da aplicação, delimitando a aplicação somente ao ambiente em que se encontra.
Homeros é uma arquitetura voltada na execução de seus serviços e possui uma mobilidade maior.
No entanto, é uma arquitetura centralizada e as aplicações ficam restritas a um modelo cliente-servidor.
A arquitetura Pholo é voltada para o suporte à execução do modelo Holoparadigma.
Essa arquitetura, através de seu modelo abstrato, disponibiliza a descentralização, em termos de serviços, e alta mobilidade do ambiente.
No entanto, a arquitetura está num estágio ainda imaturo (com relação a alguns serviços para a computação pervasiva) e por isso ainda não pode ser avaliado o tratamento de contexto e falhas.
Além disso, o modelo ainda é centralizado para o controle e informações do ambiente (HNS).
Quando analisamos o mercado da computação pervasiva, encontramos diferentes tipos de plataformas dedicadas para uma ou mais funcionalidades.
As plataformas podem ser voltadas para atender a disponibilização de serviços e recursos dos dispositivos entre diferentes redes, atender redes de sensores, para integrar dispositivos e objetos (artefatos) a um ambiente pervasivo, ou até mesmo para auxiliar na construção de outras plataformas pervasivas.
Por isso nessa seção, estudamos diferentes tipos de plataformas para computação pervasiva.
Com a finalidade de facilitar a visão desse trabalho, elaborou- se uma classificação para diferenciar as específicas funcionalidades das plataformas.
Em cada subseção, veremos um tipo de plataforma, as suas funcionalidades para a computação pervasiva e especialmente alguns trabalhos relacionados a cada plataforma.
Em o final da seção, uma breve análise é elaborada para avaliar as plataformas estudadas.
O conceito relacionado a Gateway na computação pervasiva é um pouco diferente ao aplicado em redes de computadores.
Em a área de redes de computadores, um Gateway é utilizado apenas para interligar os dispositivos de um ambiente, estabelecendo a conexão e fazendo a conversão necessária (no caso de redes diferentes), tanto em termos de hardware quanto em software.
Em a computação pervasiva, o Gateway possui serviços adicionais:
Descoberta de serviços para gerenciar a integração de novos dipositivos na rede e reconfiguração dinâmica do software para fornecer a instalação e atualização de módulos em software no gateway dinamicamente.
A plataforma estudada no trabalho relacionada ao Gateway é voltada para atender residências inteligentes e é chamada de RBA (Room-Bridge Adapter).
O RBA é uma plataforma utilizada para conectar subredes pervasivas em residências inteligentes.
A idéia no trabalho é que cada subdivisão de uma casa -- cada peça da casa, tal como sala, quarto, banheiro, etc -- seja representada por uma subrede, em a qual é controlada por um gateway (RBA).
O RBA é responsável por fornecer os serviços adicionais de um gateway para os dispositivos de uma subdivisão da casa e é capaz de suportar diferentes tipos de redes locais -- tais como TCP/ IP, IEEE1394, LonTalk e outros -- para a conexão dos dispositivos.
Os RBAs são interligados através de uma rede principal homogênea (backbone) e um dos RBAs tem a função de gateway pervasivo para essa rede.
Além disso, esse RBA é o responsável por a comunicação externa à casa e por fornecer conexão à Internet.
Para fornecer essas funcionalidades, o software do RBA é composto por quatro camadas (aplicação, middleware core, middleware base e middleware device driver).
Em a camada device drivers estão os drivers instalados para os protocolos de comunicação relacionados à rede principal e à subrede do RBA.
O middleware foi implementado utilizando CORBA.
Em a camada middleware base, foi utilizado o GIOP (General Inter-ORB -- funcionalidade do CORBA -- para abstrair os detalhes de cada protocolo e permitir a interoperabilidade da comunicação.
A camada middleware core é baseado em eventos e é contém os seguintes serviços:
Registro e gerenciamento dos dispositivos e seus recursos (gerenciador do repositório);
Controle e comunicação dos dispositivos fisicos (Gerenciador de Dispositivo);
Tratamento de eventos e comunicação entre os componentes SW do RBA (Serviço de Eventos);
Monitoramento do funcionamento dos dispositivos (Serviço de Gerenciamento).
Por fim, a camada de aplicação que é baseada em agentes e é a responsável por o desenvolvimento e controle dos serviços da residência inteligente (por exemplo agente para controlar a temperatura de uma subdivisão da casa).
Os avanços na última década na microeletrônica e a comunicação permitiram o desenvolvimento de plataformas com baixo custo, menores e com maior interatividade.
Com plataformas cada vez menores, a utilização de computação em objetos do dia-a-dia tem sido cada vez mais freqüentes.
A utilização dessas plataformas em objetos permite ambientes cada vez invisíveis e pervasivos.
Esses objetos integrados a essa plataforma são chamados de objetos inteligentes.
Uma plataforma para objetos inteligentes normalmente é uma plataforma pequena e simples, com poucos recursos computacionais e baixo consumo de energia, voltada para o tratamento de apenas uma aplicação específica.
As plataformas para objetos inteligentes devem ser providas de interfaces físicas I/ O para permitir interatividade com o usuário ou com o ambiente.
Além disso, essas plataformas são constituídas de comunicação que permite a conectividade com outras plataformas do ambiente e de um software específico apenas para tratar as funcionalidades da aplicação.
Em o presente trabalho, realizou- se o estudo de três plataformas para objetos inteligentes:
Smart-Its, BTNodes e Motes.
Smart-Its é uma plataforma em hardware voltada para permitir a customização de sensores, percepção e sensibilidade ao contexto, assim como saídas físicas para tipos específicos de objetos.
Isso requer controle, configuração e integração de diferentes tipos de sensores.
A comunicação da Smart-It é responsável por permitir objetos a conectar a outras plataformas para tornar- se um componente do ambiente.
O software do Smart-It é composto por três bibliotecas, uma para tratar sensores e atuadores, uma para comunicação e outra para executar as tarefas específicas.
BTnode é uma plataforma hardware/ software com a finalidade de servir como protótipo de sistemas de redes de sensores em ambientes inteligentes.
Redes de sensores é um conjunto de plataformas com sensores integrados com capacidade de comunicação e sensoriamento para permitir &quot;experimentos «de aplicações ou para verificar o contexto no ambiente.
A grande diferença da plataforma BTnode das outras plataformas para objetos inteligentes é que BTnode utiliza bluetooth como módulo de comunicação.
Isso permite algumas desvantagens, como por exemplo, o aumento do custo da plataforma e maior consumo de energia.
No entanto, a utilização do bluetooth como módulo de comunicação permite inúmeras vantagens:
Vantagens próprias das características do bluetooth (como comunicação orientada a conexão, maior interoperabilidade entre diferentes dispositivos, interface de desenvolvimento padronizada, segurança, serviços de descoberta, alta largura de banda, abstração para comunicação, etc);
Fácil comunicação com dispositivos pervasivos (tais como celulares e PDAs para interação com usuários) e servidores (que permitem monitoramento da aplicação e armazenamento de informações);
E servir como atuadores (notificar um usuário através de dispositivos bluetooth ou até agir com outro dispositivo como tirar foto se comunicando com uma câmera wireless).
Motes, assim como BTnode, é uma plataforma projetada para aplicações relacionadas a redes de sensores.
A plataforma é construída sobre um processador com baixo consumo de energia e integra o padrão de comunicação Zigbee.
Possuem facilidades na integração com sensores e atuadores, e entre si (4 conectores de entrada/ saída que permite uma plataforma se encaixar na outra sobre a forma de pilha).
Além disso, a plataforma inclui diversas opções de entrada/ saída:
USB, 2 UART, áudio, GPIO, interface para câmera, entre outros.
A plataforma foi projetada para permitir grande capacidade de processamento (alta velocidade de processamento e alta capacidade de armazenamento) e baixo consumo de energia (três modos de operação).
Os componentes SW da plataforma Motes é composta por um sistema operacional específico para redes de sensores:
TinyOS. O Motes, com todos esses componentes, foi projetado para atender aplicações com grande complexidade, relacionadas a redes de sensores, para uso comercial:
Em as pesquisas recentes, relacionadas ao estudo da interação homem máquina, muitos dispositivos diferentes relacionados à interface física com o usuário foram projetados (como é o caso do iDog, iLight e o IStylus).
Já outros dispositivos foram aperfeiçoados (como é o caso do headphone de Aura no vídeo de demonstração).
Esses dispositivos são relacionados à interação com o ambiente e às vezes são os grandes responsáveis por fornecer a invisibilidade necessária ao usuário:
Seja por a facilidade do uso ou seja por esconder a complexidade do usuário.
Em essa seção, as plataformas que integram esses tipos de dispositivos são estudadas.
Essas plataformas diferenciam- se das plataformas da seção anterior porque possuem elevada interatividade com o usuário e muita comunicação com o ambiente para repassar dados fornecidos por o usuário.
Esses dados podem ser diretamente transferidos para o ambiente ou podem ser processados por a plataforma antes da transferência.
As plataformas pesquisadas nessa seção são:
Calder Toolkit e Phidgets.
Calder Toolkit é uma plataforma de desenvolvimento para explorar e prototipar dispositivos físicos funcionais.
Essa plataforma, como pode ser vista na Figura 3.1, é projetada para facilitar na criação de interfaces do usuário no domínio de interfaces físicas 1.
Elas fornecem um conjunto de componentes de entradas e saídas reutilizáveis (5-b) que permite diferentes formas para construir, junto com o restante (processamento e comunicação), a infra-estrutura da plataforma.
Essa infra-estrutura é encaixada em blocos de isopores (5-a) para formar o dispositivo interativo (5-c).
Para aumentar a configurabilidade da plataforma, existem dois tipos de comunicação para a mesma:
Com fio (cabeada) e sem fio (wireless).
Além de a alta reconfigurabilidade e flexibilidade que essa plataforma desempenha, ela possibilita diferentes formas de distribuição do processamento:
Compartilhada, mestre local e mestre global.
Em a primeira forma, os recursos computacionais e de energia são distribuídos entre todos componentes;
Em a segunda forma, a fonte de energia e os recursos computacionais são fornecidos pouco a pouco por uma plataforma pervasiva central;
Em a última forma, uma fonte externa (ex..
Phidget são plataformas que abstrai as informações repassadas na entrada do dispositivo interativo e as empacota enviando a um dispositivo central que executa o tratamento adequado para aquelas informações.
O processo de saída funciona de maneira inversa:
O dispositivo central repassa as informações empacotadas para o dispositivo interativo, em o qual desempacota e envia para a saída adequada.
O funcionamento desse sistema abstrai todo processo na plataforma de interação e deixa o processamento pesado para um dispositivo mestre.
Por isso, o hardware da plataforma é composto apenas por três simples partes:
Componentes de entrada e saída para interação com o usuário;
Microcontrolador responsável por empacotar/ desempacotar as informações;
E o padrão de comunicação cabeado USB para interagir com o dispositivo central.
Em essa seção foram mostrados alguns tipos de plataformas pervasivas encontradas na pesquisa acadêmica.
Cada tipo de plataforma foi dedicado para uma ou mais finalidades específicas.
Esse estudo é importante para modelar a plataforma proposta, pois permite avaliar serviços, componentes e restrições das plataformas existentes no mercado.
Para formalizar esse estudo, mencionamos na Tabela 3.1 algumas comparações realizadas entre os tipos de plataformas vistos anteriormente.
As comparações realizadas foram relacionadas ao custo e à estrutura da plataforma assim como relacionados às restrições e aos componentes para o projeto da plataforma proposta para a computação pervasiva.
O gateway pervasivo é uma plataforma com o objetivo de interligar os dispositivos da rede, fornecendo- lhes acesso a outros serviços, segurança, suporte a falhas e conexão à Internet.
Por ser utilizado apenas para interligar os dispositivos de um ambiente e ser fixo ao mesmo (normalmente), não há preocupação quanto a a estrutura da plataforma (custo, tamanho e consumo de energia), mas sim com sua interatividade com outras plataformas (homogêneas e heterogêneas).
Normalmente, os gateways pervasivos são dotados de serviços de atualização e de monitoramento do sistema, como é o caso do HomeGateway.
Não possui o serviço de tratamento de contexto, deixando a necessidade de um servidor para esse tipo de serviço.
A escalabilidade foi definida como:
Média, pois não há a necessidade de grande quantidade de gateways no mesmo sistema;
E difícil, porque a adição de um novo gateway no software da arquitetura pode ser de alta complexidade.
A plataforma destinada a objetos inteligentes é uma plataforma customizada, pequena, invisível, com baixo custo e baixo consumo de energia.
No entanto, algumas plataformas estão aumentando o custo e o consumo de energia com a adição de meios de comunicação mais sofisticados, como é o caso do BTnode com bluetooth.
Essa adição também afeta outros campos.
Por exemplo, essa plataforma possui uma variável interatividade com outras diferentes plataformas -- no caso BTnode com bluetooth, possui uma interatividade maior que Smart-It. As plataformas para objetos inteligentes freqüentemente são destinadas para redes de sensores sem fio.
Por isso, são altamente escaláveis, possuem mobilidade e detecção de contexto.
Não possuem serviços de gerenciamento de recursos, de contexto, de segurança, de falhas ou de monitoramento, a menos que sejam projetados para plataforma alguns serviços adicionais.
As plataformas que interagem com usuários possuem grandes diferenças de umas com as outras.
São dependentes da fisionomia e da especialidade que são projetadas e por isso, variam de custo, de tamanho, de consumo de energia e da interatividade com o sistema.
São destinadas a fornecer invisibilidade ao usuário e detectar o contexto do ambiente.
Sua escalabilidade é baixa e difícil, pois para adicionar uma diferente plataforma interativa, é necessária a construção de novos drivers para tratar sua especificação.
Possui um variável grau de configurabilidade (no caso de o Calder Toolkit alto e dos Phidgets baixo).
Não é uma plataforma voltada para fornecer os serviços de computação pervasiva tais como gerenciamento de recursos, tratamento de falhas e detecção de contexto.
E por fim, pode ser monitorado, se for adicionados recursos necessários para esse serviço.
A plataforma proposta nesse trabalho tem um objetivo semelhante ao gateway:
Integra os dispositivos e fornece os serviços e recursos do ambiente pervasivo.
No entanto, o tratamento de contexto, um serviço importante na computação pervasiva, não é implementado por o gateway.
Outra questão importante, comparando a plataforma proposta e o gateway, não encontrado na tabela, é a distribuição de serviços e recursos no ambiente.
Um ambiente pervasivo com gateway é normalmente centralizado, onde um gateway principal trata das questões de segurança, do gerenciamento de serviços e recursos e do tratamento de falhas.
Um ambiente pervasivo com a plataforma proposta nesse trabalho é totalmente distribuído, onde cada plataforma é responsável por um conjunto de dispositivos e por fornecer seus serviços à rede.
Isso permite que a plataforma seja facilmente integrada a outros tipos de rede, como é o caso de redes ad-hoc.
As outras plataformas foram importantes para definir a interatividade com o usuário e com o ambiente.
Uma plataforma deve fornecer suporte a interatividade e a invisibilidade dos dispositivos com o ambiente e com o usuário, sejam feitas através de sensores ou por dispositivos interativos.
Por isso, uma outra preocupação da plataforma proposta é permitir a fácil integração com sensores, com interfaces físicas I/ O e até com outras plataformas, fornecendo suporte a serviços e de recursos computacionais.
Definição de uma Nova Arquitetura A definição da arquitetura é importante para a captura dos serviços e componentes necessários que a plataforma deve conter.
O capítulo anterior permitiu a análise dos requisitos e estudos sobre algumas arquiteturas que podem auxiliar na concepção da arquitetura.
Esse capítulo consiste na proposta de uma nova arquitetura com suporte a um ambiente pervasivo, auxiliando na implementação da plataforma alvo desse trabalho.
Para facilitar a visualização da proposta, essa seção foi divida da seguinte maneira:
A primeira seção descreve a arquitetura proposta através de uma estrutura em camadas;
As quatro seções seguintes representam as quatro camadas desse modelo e mostram a importância de todos os componentes encontrados em cada camada.
Algumas arquiteturas revisadas na seção anterior são voltadas para o ambiente em que ocorre a aplicação e delimitam- se somente a restrições aplicadas ao ambiente e aos usuários específicos que interagem naquela aplicação.
Por isso, essas arquiteturas, são restritas na situação do contexto e na funcionalidade do dispositivo que interage na aplicação.
A proposta desse trabalho focaliza- se no ambiente, nos seus dispositivos e nas contribuições que estes podem proporcionar para o ambiente, o usuário e a situação na aplicação pervasiva.
Seguindo o fato que os dispositivos são voltados para uma determinada funcionalidade, sendo essa genérica (ex..
PDAs) ou específica (ex..
Sensor de temperatura), o foco do trabalho fica centrado no tratamento dos dispositivos para a situação da aplicação, do ambiente pervasivo onde ocorre a situação e das necessidades dos usuários que se encontram na situação.
O conceito de foco nos dispositivos é similar ao modelado nas arquiteturas Homeros e GTSH.
No entanto, a arquitetura desse trabalho diferencia- se por tratar de diferentes tipos de ambientes em que os dispositivos atuarão (sensores, PDAs, e outros atuando em hospitais, ambientes de trabalho, casas inteligentes e outros), enquanto a arquitetura de GTSH atua somente em casas inteligentes.
Por isso, a arquitetura definida deve ser flexível, tanto ao tratamento do ambiente e do usuário, quanto das funcionalidades dos dispositivos e da situação que ocorre no ambiente.
Ou seja, a arquitetura dos dispositivos deve se adaptar a diferentes tipos de ambientes e aplicações pervasivas, buscando interagir com estes e tratar da situação e das necessidades do usuário.
A Figura 4.1 apresenta a arquitetura definida neste trabalho baseado numa estruturação em camadas.
A arquitetura é dividida em quatro camadas:
Camada Física, Camada SO, Middleware e a Camada Aplicação.
As camadas relacionadas e os componentes e funcionalidades existentes em cada camada são definidas nas seções seguintes.
A camada física visa o tratamento do meio físico e é composto por os dispositivos físicos existentes no ambiente pervasivo e por os meios de comunicação que interligam os mesmos.
Esses dispositivos físicos ligados a esses meios de comunicação formam a infra-estrutura HW da arquitetura.
A infra-estrutura HW foi definida baseada em modelos com servidores locais.
Esse modelo consiste num ambiente particionado em subdivisões, onde cada subdivisão é composta por uma plataforma pervasiva.
Essa plataforma possibilita a conexão e o controle de todos os dispositivos encontrados nessa subdivisão e fornece a esses dispositivos os serviços necessários para tratar da computação pervasiva:
Gerenciamento dos serviços, comunicação com outros dispositivos, segurança, controle de falhas, gerenciamento do seu contexto e monitoramento.
Os dispositivos podem ser conectados a essa plataforma diretamente (ponto-a-ponto) ou indiretamente (por uma rede) através de diferentes meios físicos de comunicação, possibilitando a heterogeneidade na comunicação.
Por outro lado, as plataformas pervasivas (de cada subdivisão) se comunicam entre si através de uma rede homogênea.
Essa comunicação permite a conexão e a distribuição de recursos de dispositivos entre si em diferentes subdivisões.
Além disso, a rede homogênea pode possibilitar ainda o acesso à Internet para todas plataformas pervasivas através de um gateway.
Outros componentes importantes para essa infra-estrutura HW são os servidores.
Os servidores podem auxiliar as plataformas em prover os serviços pervasivos ou então serem utilizados por a aplicação.
Esses servidores podem ser integrados na rede homogênea para auxiliar nos serviços das plataformas em conjunto (fornecer o tratamento de contexto) ou podem ser integrados numa das plataformas.
A Figura 4.2 mostra um exemplo da infra-estrutura HW baseado no modelo servidor local aplicada a um ambiente de residência inteligente.
Essa casa inteligente possui quatro subdivisões definidas como Sala1, Sala2, Suíte e Cozinha.
Em cada subdivisão existem diversos dispositivos conectados a uma plataforma através de diferentes meios de conexão.
Em a Sala1, por exemplo, existem alguns objetos inteligentes conectados à plataforma através da rede Bluetooth, dois dispositivos fixos de ambiente (TV e DVD player) conectado à plataforma através da rede IEEE1394 e um PC conectado diretamente utilizando TCP/ IP.
As plataformas de cada subdivisão são conectadas a uma rede principal (no caso TCP/ IP).
Essa rede permite o acesso de recursos de um dispositivo de uma subseção a um outro dispositivo de outra seção.
Isso permitiria, por exemplo, o PDA da Sala2 solicitar um recurso da cafeteira inteligente da Cozinha -- como por exemplo fazer café.
Os responsáveis por essa solicitação seriam as plataformas da Sala2 e da Cozinha.
Os dispositivos podem acessar à Internet através de um gateway.
Por exemplo, o forno microondas pode acessar à Internet para buscar uma nova receita.
Além disso, esse gateway permite o acesso externo a cada plataforma.
Por exemplo, um usuário residente da casa pode solicitar a plataforma encontrada na Suíte um arquivo do laptop.
Já os servidores podem ser conectados à rede principal, como é o caso do servidor de contexto, para auxiliar a plataforma no serviço de tratamento de contexto.
Os servidores também são capazes de disponibilizar recursos e auxiliar na aplicação em subdivisões -- como é o caso do servidor de armazenamento de receitas da Cozinha.
A proliferação de inúmeros dispositivos pervasivos diferentes reacendeu o mercado para novos sistemas operacionais personalizados (ou específicos) para estes dispositivos.
Os sistemas operacionais são responsáveis por gerenciar os recursos (computacionais, energia e entrada/ saída) do dispositivo e por oferecer aos programadores e usuários, uma abstração que esconde a complexidade do hardware do dispositivo.
Uma arquitetura pervasiva consegue envolver uma variedade de diferentes sistemas operacionais.
Cada sistema operacional pode ser utilizado para uma ou mais finalidades específicas ou genéricas.
Por isso, esses sistemas operacionais podem ser classificados quanto a o seu objetivo de uso em sistemas operacionais de propósito geral, sistemas operacionais embarcados genéricos e sistemas operacionais embarcados dedicados.
Os sistemas operacionais de propósito geral são sistemas que não tem restrições nem limitações de seus dispositivos.
Caracterizam- se por possuir inúmeros recursos como sistemas de arquivos, memória virtual e são voltados para aplicações maiores como aplicações de servidores.
Exemplos desse tipo de sistema operacional são Windows 2000 e Linux (encontrados em).
Os sistemas operacionais embarcados genéricos são sistemas que possuem determinadas restrições, como limitação de memória e bateria, mas são voltadas para aplicação de propósito geral.
Normalmente são utilizados em sistemas embarcados com bastante recurso computacional, tais como PDA, telefones celulares, etc..
Alguns exemplos mais usados desse tipo de sistemas operacionais são:
Windows CE, uCLinux e Symbian (todos vistos em).
Os sistemas operacionais embarcados dedicados caracterizam- se por serem específicos tanto pra executar numa determinada arquitetura HW quanto para a execução de uma determinada aplicação.
Por exemplo, o TinyOS e o ACOS são sistemas operacionais dedicados respectivamente para redes de sensores e para smart cards.
O número de sistemas operacionais para dispositivos pervasivos é cada vez maior e cada vez mais diversificado, devido a a heterogeneidade dos mesmos dispositivos.
A integração de diversos sistemas operacionais no ambiente pervasivo é necessária, assim como o suporte para a comunicação entre diferentes sistemas operacionais também.
Em esse caminho, o grupo OMG vem ampliando sua visão e diversificando alguns projetos para diferentes campos, como por exemplo, RT-CORBA e CORBA embarcado.
A construção do middleware para a proposta do trabalho é feita com base nos requisitos descritos na seção 2.6 e nas arquiteturas avaliadas na seção 3.1.
A proposta do middleware é importante para descrever os principais componentes para tornar a plataforma acessível aos ambientes pervasivos.
Os principais componentes do middleware são:
Comunicação, Gerenciador de Recursos e Serviços, Adaptação e Reconfiguração, Gerenciador de Segurança, Gerenciador de Contexto e Monitor.
Para facilitar a visão sobre cada componente, alguns exemplos de cenários são apresentados com base na infra-estrutura HW apresentada na Figura 4.2.
O componente comunicação tem como objetivo tratar da comunicação e permitir a distribuição de serviços e recursos entre os dispositivos na rede pervasiva, abstraindo a heterogeneidade dos dispositivos, da rede e dos componentes em SW que executam nos dispositivos.
A comunicação pode ocorrer de duas formas:
Direta, se o outro dispositivo estiver na mesma subrede, e indireta, se estiver em outra subrede.
No caso de a comunicação direta, um dispositivo troca informações diretamente com outro dispositivo.
Caso ocorra uma comunicação indireta, o dispositivo origem se comunica utilizando a plataforma pervasiva e este se encarrega por todo trabalho de abstração da comunicação.
Por exemplo, na Figura 4.2, se a TV e o DVD Player necessitarem de comunicação entre si, então ambos precisam apenas estabelecer uma conexão e iniciar a troca de mensagens (exceto se tiverem diferentes sistemas operacionais que não estabeleçam conexões;
Em esse caso o uso da plataforma seria necessário).
No caso de uma comunicação entre a TV e o PC ou então entre a TV e a cafeteira, a comunicação não poderia ser direta, devido a a heterogeneidade da plataforma ou ao longo caminho entre os dispositivos.
Para esse caso, a arquitetura necessita das plataformas para permitir abstrair os protocolos e meios fisicos de comunicação, assim como para permitir a facilidade na comunicação entre dispositivos distantes.
O Gerenciador de Recursos e Serviços tem três finalidades na arquitetura:
Busca e descoberta de novos dispositivos (e seus serviços e recursos) no ambiente pervasivo;
Registrar o dispositivo e os serviços e recursos na rede pervasiva;
Permitir fácil acesso aos serviços e recursos (quando disponíveis e permitidos).
Essas três finalidades são tratadas na arquitetura por a plataforma pervasiva.
A busca e descoberta de novos dispositivos (incluindo seus serviços e recursos) são feitas por as plataformas de forma similar ao UPnP (exceto se o dispositivo estiver utilizando o padrão bluetooth;
Em esse caso, a plataforma identifica facilmente utilizando o serviço SDP).
O dispositivo que usa o UPnP, chamado de ponto de controle, faz a busca por a rede por dispositivos enviando uma mensagem de busca a todos dispositivos com um critério de busca.
Quando um dispositivo tiver aquele mesmo critério, ele responde ao ponto de controle.
Esse mecanismo é chamado de SSDP (Simple Service Discovery Protocol).
No caso de a plataforma, ela percorre toda sua subrede fazendo o papel de ponto de controle.
Um exemplo disso aplicado a infra-estrutura da Figura plataforma pervasiva faz a busca por a subrede enviando a busca com o critério &quot;meio de comunicação IEEE1394».
A o receber essa mensagem, todos dispositivos dessa subrede respondem a plataforma e essa identifica o novo dispositivo.
O registro do dispositivo é feito por a plataforma que descobriu o novo dispositivo.
Quando a plataforma descobre um novo dispositivo, ela faz o registro localmente do dispositivo em sua memória e comunica a todas outras plataformas próximas da existência do dispositivo e de seus serviços.
Continuando o exemplo anterior, a plataforma da Sala1 ao descobrir o aparelho de som, registra o dispositivo e seus serviços na sua base de dados.
Após o registro local, a plataforma da Sala1 envia para todas plataformas próximas (no caso as plataformas da Sala2, Cozinha e Suite).
A o receber a mensagem, as plataformas fazem o registro do dispositivo e de seus serviços.
O acesso de uma plataforma a um recurso de um dispositivo inicia por a verificação local para encontrar o recurso.
Caso a plataforma não encontre, ela envia uma mensagem para todas as outras plataformas próximas se alguma tem informação sobre o recurso e o dispositivo.
Se chegar uma resposta antes de um longo timeout, a plataforma registra as informações do dispositivo e seus recursos.
A o encontrar o recurso, a plataforma solicitadora do recurso faz o pedido para a plataforma solicitada.
A plataforma solicitada verifica se o recurso não está sendo utilizado e se é permitido o uso da plataforma solicitadora ao recurso solicitado.
Caso seja, o recurso é alocado para a plataforma solicitadora.
Seguindo o exemplo anterior, caso a plataforma da Sala2 tenha recebido o registro anterior com falhas, e necessite de um recurso X do aparelho de som, a plataforma da Sala2 vai enviar uma mensagem a todas plataformas próximas solicitando informações do recurso X. As três plataformas, caso não ocorra falhas, informarão a localização do recurso X. A o receber as informações, a plataforma Sala1 envia um pedido de acesso ao recurso X e a mesma informa a plataforma Sala2 que o recurso está disponível.
Então a plataforma utiliza o recurso X. Adaptação e Reconfiguração O componente Adaptação e Reconfiguração é responsável por a adição e remoção de serviços e componentes de SW da plataforma para os dispositivos, cujo objetivo disso é a adaptação dos dispositivos a novos tipos de aplicações.
Esse componente será necessário em duas situações:
O usuário implementa através do framework (seção 4.5) novos serviços e atualizações para aplicações, disponibilizando em algum lugar para download;
Ou a aplicação (normalmente a Ama seção 4.5) necessita de um serviço que não se encontra no ambiente.
O componente Adaptação e Reconfiguração é implementada de forma simples.
Quando é solicitado, ele faz o download dos serviços num repositório para armazenamento de serviços e componentes.
No entanto, alguns serviços e componentes possuem dependências intercomponentes.
Por isso, um arquivo XML contendo as informações (nome e localização) das dependências desses serviços e componentes.
Futuramente, pretende-se estender esse modelo simples de consulta para um mecanismo que busca na Internet as dependências (semelhante ao projeto YUM).
O Gerenciador de Segurança deve ser capaz de tratar três objetivos gerais relacionados à segurança:
Integridade da informação contra adulteração dos dados;
Confidencialidade dos dados contra a exposição dos mesmos;
E disponibilidade do sistema contra a recusa de serviço.
Para a implantação desses objetivos, a criptografia, a autenticação e os firewalls ainda continuam sendo os métodos mais eficazes na computação pervasiva.
A implementação desses serviços são feitos durante a solicitação dos serviços, verificando- se o acesso de um dispositivo, de um usuário e até mesmo de um ambiente a esses serviços solicitados.
Para o caso de tentativas de invasão, alguns serviços de segurança podem ser implementados por os dispositivos para assegurar proteção de memória, autenticação para acesso de serviços, desabilitação de serviços em caso de problemas, etc..
Inicialmente, apenas duas importantes abordagens sobre segurança são relacionadas na arquitetura:
Autenticação e controle de acesso.
A autenticação consiste na validação do acesso do usuário no ambiente.
O seu objetivo é informar a identidade do usuário, permitindo ao usuário uma identificação no ambiente relacionado a tipos de acesso de serviços e recursos, dispositivos, aplicações, informações, etc..
O usuário deixa de ser um usuário público perante o ambiente.
Inicialmente, o tipo de autenticação do usuário no sistema é o mecanismo tradicional de login e senha.
Pretende-se estender esse mecanismo para smartcards e RFID.
O mecanismo tradicional de login e senha é verificado quando o usuário está acessando uma informação de um terminal ou de um outro dispositivo que está presente no ambiente.
Anexado a esse mecanismo, os dispositivos, os serviços e recursos, e as aplicações possuem um campo chamado de Credencial, que informa os usuários e os dispositivos permitidos para o acesso.
Por exemplo, utilizando a infra-estrutura da Figura 4.2, um usuário resolve utilizar um PC para acessar a cafeteira.
No entanto, o campo Credencial da cafeteira não contém informação do usuário e, portanto, restringe o usuário do seu uso.
Existem outros meios de acesso do usuário ao ambiente, como dispositivos pessoais.
No entanto, esse tipo de acesso está relacionado ao controle de acesso.
O serviço de controle de acesso permite restringir o acesso de dispositivos maliciosos a informações e recursos importantes na rede do ambiente pervasivo.
A plataforma pervasiva possui interceptores (definidos em CORBA) para o acesso desses dispositivos.
Um interceptor é responsável por contactar o acesso de um dispositivo a um serviço.
Esse interceptor pode interceptar o acesso do dispositivo na plataforma origem (onde o usuário se encontra) ou na plataforma destino (onde o serviço ou recurso se encontra).
Por exemplo, na infra-estrutura da Figura 4.2, se um usuário malicioso com celular de padrão bluetooth conseguir entrar no campo de cobertura do bluetooth da Sala1, e solicitar algum recurso do laptop da Suíte, o interceptor, tanto da plataforma da Sala1 quanto da Suíte, restringirá o acesso desse dispositivo no ambiente.
O Gerenciador de Contexto é o responsável por conhecer o estado atual do usuário, do ambiente e da rede, e adaptar seu comportamento baseando- se nessas informações para atender as necessidades dos usuários.
O contexto representa todas as entidades do ambiente e seus atrtibutos.
Quatro entidades são definidas para o modelo de contexto:
Usuário, dispositivo, rede e a local.
Cada entidade pode conter importantes informações:
Usuário (perfil, preferências, identificador, estados físicos e emocionais, sensações térmicas, etc), dispositivo (tipo, identificação, recursos, serviços, etc), local (temperatura, intensidade da luz, umidade do ar, limites da área, etc) e a rede (largura de banda, latência, tipo de conexão, etc).
Aura relaciona essas entidades para formar novas entidades de contexto.
As novas entidades e seus respectivos relacionamentos são:
Interação Pessoa-- Dispositivo, relacionamento entre usuário e dispositivo;
Localização de Dispositivos, relação entre área e dispositivo;
Integração do Dispositivo e Rede, relação entre dispositivo e rede;
Localização de Pessoas, relação entre usuário e área;
E finalmente, Localização de Rede, relação entre área e rede.
O funcionamento do Gerenciador de Contexto na arquitetura pode ser visto na Figura 4.3.
Seu funcionamento é iniciado com a captura de uma nova informação por os sensores (ou dispositivos de sensoriamento) ou com a aplicação cadastrando uma nova informação.
Quando os sensores capturam uma nova informação, eles repassam para o Serviço de Coleta.
A camada de aplicação também cadastra sua informação diretamente no Serviço de Coleta.
O Serviço de Coleta transforma essa informação em contexto estático ou dinâmico.
Contexto estático é definido nessa arquitetura como uma informação invariável ou uma informação que modifica em intervalos de tempos regulares.
Um exemplo desse tipo de contexto seria a latência de uma rede ou localização de dispositivos fixos ao ambiente (que são removíveis raramente por o usuário).
Já o contexto dinâmico possui informações que estão freqüentemente se modificando.
Um exemplo de contexto dinâmico pode ser a localização de um usuário ou contextos com informações do ambiente (luminosidade, temperatura, etc).
O último componente da Arquitetura Pervasiva é o Monitor.
Ele disponibiliza a camada de aplicação informações do funcionamento das aplicações da rede, contextos e falhas ocorridas no ambiente.
Permite a verificação e avaliação de todo ambiente e todas as plataformas do sistema.
Fornece serviços que permite o acesso remoto para monitorar e gerenciar a plataforma pervasiva.
Isso possibilita que administradores do ambiente possam avaliar e resolver problemas da plataforma e fazer testes e atualizações de novas versões de aplicações ou sistemas operacionais.
Um fator restrito dos serviços de monitoramento remoto é preservar a privacidade dos usuários e das informações contidas no ambiente.
Um exemplo aplicado à residência inteligente da Figura 4.2 é a realização remota do conserto da plataforma pervasiva da Sala2.
Por exemplo, suponha que um usuário alterou as configurações dessa plataforma.
O componente Monitor disponibiliza serviços para o administrador do ambiente acessar essa plataforma através de um terminal externo, repassando informações de registros da rede e de configurações baixo-nível da plataforma.
A construção de uma determinada aplicação pervasiva implica em duas restrições:
Facilitar ou diminuir a heterogeneidade dos dispositivos e possuir capacidade de adaptação.
Esses problemas podem ser resolvidos facilmente por o middleware descrito (seção 4.4).
O primeiro problema pode ser tratado por o componente Comunicação e o segundo problema é resolvido adaptando a aplicação facilmente por o componente Adaptação e Reconfiguração.
Os componentes da Camada de Aplicação podem ser divididos em três tipos de componentes:
As aplicações em execução, o Agente Móvel da Aplicação (Ama) e o ambiente de teste e desenvolvimento (framework).
As aplicações em execução são aquelas aplicações que estão sendo executadas nos dispositivos pervasivos com o objetivo de possibilitar ao usuário disponibilidade, invisibilidade e onipresença.
Essas aplicações podem ser construídas através de duas formas:
Criadas por o desenvolvedor ou usuário no ambiente de teste e desenvolvimento ou determinada por o Ama, quando esse detectou a necessidade de uma nova aplicação para tratar um novo contexto.
O Agente Móvel da Aplicação (Ama) é uma aplicação inteligente capaz de fornecer serviços inteligentes para a aplicação pervasiva, com o objetivo de tratar contexto e detectar falhas.
A detecção de falhas é implementada através da comunicação com o monitor e com o gerenciador de segurança, onde estes fornecem informações relacionadas às falhas para o Ama verificar a ocorrência de falhas.
No caso de o tratamento de contexto, o Ama aguarda por o pedido do gerenciador de contexto.
Em esse tratamento o Ama tem a missão de transformar o contexto em serviços ou em aplicações, através de três formas:
Perguntar ao usuário quais os serviços que tratam o contexto;
Descobrir de forma inteligente verificando todos os recursos e serviços;
Ou buscar por contextos similares.
Ambiente de teste e desenvolvimento ou framework são aplicações que possibilitam a um usuário experiente, projetista ou desenvolvedor construir novas aplicações, novos serviços ou novos recursos para o ambiente.
Além disso, framework proporciona testes e avaliações sobre as aplicações, sobre os dispositivos, sobre as redes, sobre os roteadores e sobre os serviços existentes.
Modelagem e Implementação da Plataforma Proposta Em a última seção do capítulo 2, os requisitos necessários para desenvolver aplicações em ambientes pervasivos são descritos.
Em a seção 3.2, foram realizados estudo e avaliação sobre alguns tipos de plataformas para a computação pervasiva.
Em a avaliação, são comparadas três plataformas com requisitos na construção de uma plataforma HW/ SW e com necessidades para os componentes da plataforma.
Em o capítulo anterior, apresentamos a arquitetura pervasiva que serve como base para a captura dos serviços necessários para a construção da plataforma.
Em esse capítulo, a modelagem, o projeto, a implementação e a avaliação da plataforma proposta são descritas.
Essa plataforma tem como objetivo integrar dispositivos eletro-eletrônicos num ambiente pervasivo e fornecer os serviços existentes na rede pervasiva para os dispositivos integrados e fornecer os serviços desses dispositivos para a rede.
Além disso, essa plataforma deve fornecer os serviços e recursos necessários para a computação pervasiva.
O modelo para a plataforma proposta foi projetado para permitir a integração de dispositivos eletro-eletrônicos heterogêneos na rede pervasiva.
Esse modelo consiste de simples canais que permitem a fácil integração de dispositivos na plataforma e da plataforma na rede pervasiva.
Em a Figura 5.1, o modelo de plataforma para a proposta desse trabalho é apresentado.
Esse modelo é composto por dois canais de comunicação abstratos.
Esses canais permitem a abstração entre os meios físicos e facilitam a integração de heterogêneos dispositivos na rede.
A plataforma HW/ SW é composta por os recursos computacionais para efetuar a comunicação e integração dos dispositivos na rede.
Disponibiliza todo o suporte em processamento para fornecer a troca de recursos entre os dispositivos entre si conectados na plataforma e entre os dispositivos na rede externa.
Além disso, essa plataforma permite os serviços relacionados à computação pervasiva para os dispositivos integrados a ela.
Os Canais de Comunicação abstraem os tipos de comunicação integrados na plataforma.
Em o modelo de Plataforma apresentado na Figura 5.1, o Canal de Comunicação A é responsável por a integração da plataforma com dispositivos e é responsável por abstrair vários meios de comunicação.
Já o Canal de Comunicação B interliga a plataforma com a rede principal, onde esta não foi necessariamente definida na Figura 5.1.
C anal de C o m u n ic a ç ã o A D is p o s itiv o s C anal de C o m u n ic a ç ã o B P la ta fo rm a R e d e P rin c ip a l Hom ogênea R e d e P rin c ip a l H om ogênea C a n a l d e C o m u n ic a ç ã o B P la ta fo rm a:
A plataforma HW/ SW desse trabalho tem como objetivo adaptar dispositivos eletrônicos a um ambiente pervasivo, onde essa plataforma é capaz de disponibilizar os serviços e recursos desses dispositivos para todos os outros dispositivos e servidores conectados a rede pervasiva.
A plataforma HW/ SW é composta por quatro camadas, conforme a Figura 5.2: Camada física, camada SO, middleware e camada de aplicação.
A camada física visa o tratamento dos dispositivos físicos e é implementada em HW.
Essa camada é dividida em quatro componentes:
Unidade de Rede, utilizada para conectar a plataforma na rede pervasiva;
Unidade de Funcionalidade Específica, utilizada para auxiliar e controlar a funcionalidade eletro-eletrônica do dispositivo;
Interface E/ S, utilizada para a comunicação e interface com o usuário, ambiente e dispositivos;
E Unidade de Processamento, unidade responsável gerenciamento e execução das aplicações e das outras unidades.
A camada SO tem como objetivo tratar as funcionalidades de um sistema operacional para o sistema embarcado.
É dividido em duas subcamadas:
Subcamada de Device Drivers que gerência os componentes da camada física e subcamada do Sistema Operacional Embarcado que gerência as tarefas da aplicação que executa no dispositivo e determina os serviços disponibilizados por o mesmo, além de tratar as limitações do sistema.
O Middleware constitui um conjunto de componentes necessários para auxiliar a integração do dispositivo com a rede pervasiva e disponibilizar os serviços necessários que compõem o middleware da arquitetura definido na seção 4.4.
Assim como na arquitetura, essa camada é formada por seis componentes básicos:
Módulo de Comunicação, que integra o dispositivo na rede e gerência a comunicação do dispositivo com outros dispositivos;
Gerenciador de Serviços que fornece gerenciamento dos serviços e recursos desse dispositivo para a aplicação pervasiva;
Unidade de Reconfiguração que auxilia a arquitetura SW na adaptação de novos componentes SW;
Sistema de Autenticação e Controle de Segurança que ajuda na segurança do ambiente, fornecendo serviços de autenticação;
Auxiliar de Contexto que auxilia na detecção de contexto a arquitetura;
Monitor que fornece o monitoramento do dispositivo para a aplicação, informando erros e problemas.
Em a etapa de implementação da plataforma HW/ SW proposta, analisou- se os recursos HW e SW que poderiam beneficiar a construção da plataforma.
Foi decidido, devido a o tempo de projeto, utilizar uma plataforma HW e um sistema operacional, já existentes, para a plataforma proposta.
Além disso, o desenvolvimento inicial do middleware foi projetado com poucas qualificações para permitir o primeiro protótipo de plataforma relacionado ao objetivo proposto.
Em essa seção o motivo da escolha da plataforma HW e do Sistema Operacional é descrito assim como o desenvolvimento de alguns componentes para o middleware.
A etapa de implementação da plataforma HW/ SW iniciou com a escolha ou a definição de uma plataforma que seja compatível com a definição da camada física do modelo proposto.
Outro fator importante para a escolha da plataforma é que a Unidade de Rede da Camada Física realizasse duas formas de comunicação:
Cabeada e wireless.
Com base nessas premissas e no tempo de projeto, concluiu- se utilizar uma plataforma em HW já projetada para simular dispositivos semelhantes aos existentes na computação pervasiva.
A plataforma HW escolhida para a camada física foi a plataforma OMAP, da empresa Texas Instrument.
Assim a plataforma OMAP utilizada (Figura 5.3) foi utilizada com base nas unidades que compõe a camada física (subseção 5.2).
Segue abaixo a relação de cada componente da camada física proposta com as especificações da plataforma:·
Unidade de Processamento:
Um processador ARM 9 e duas memórias (32 Mb DDR-RAM e 32 Mb Flash ROM);·
Unidade de Funcionalidade específica:
DSP;· Unidade de Rede:
Ethernet; A camada SO também foi implementada a partir de a reutilização de componentes já existentes.
O Linux Embarcado pode satisfazer todas as tarefas e requisitos necessários para essa camada:
Um sistema robusto, com código livre, possui todos os drivers necessários para diversos periféricos e ele é facilmente portável para outras plataformas.
Para a integração da camada SO com a camada física foi necessário adaptar um sistema linux alvo para o OMAP.
A adaptação do sistema linux alvo para a plataforma OMAP é realizada em quatro estágios:
Determinar os componentes do sistema consiste em elaborar uma lista de todos os itens necessários para o projeto.
Esses componentes envolvem:
A identificação do projeto, as informações sobre o hardware de execução (características do processador, memória, etc), ferramentas de desenvolvimento, características do kernel (versão, patches, etc), componentes do sistema de arquivos (informações de dispositivos ou periféricos, principais aplicações, etc), organização dos dispositivos de armazenamento (tamanho, formato, etc), configuração do bootloader (inicializador), serviços de rede, softwares adicionados e informações adicionais.
Configurar e desenvolver o kernel A configuração e o desenvolvimento do kernel consistem em selecionar os itens necessários para o sistema e compilar o kernel.
A seleção dos itens determina os componentes que serão incluídos no kernel.
Os principais itens são:
Configuração do processador, tipos da memória, periféricos, rede, armazenamento, opções de rede, sistema de arquivos, segurança, entre outros.
Em a fase de compilação do kernel, deve- se primeiramente instalar um conjunto de ferramentas para compilar o kernel.
Esse conjunto de ferramentas é chamado de Toolchain.
O Toolchain é composto por três ferramentas básicas:
O Binutils, que serve para manipular os arquivos binários;
Após a instalação do Toolchain, a próxima etapa da configuração do kernel é configurálo.
Com base na seleção dos itens feita anteriormente, configura- se o kernel com os principais componentes do projeto.
Por fim, compila- se o kernel seguindo suas dependências (processador, compilador, etc) e instalam- se os módulos junto a ele.
Desenvolver o sistema de arquivos O desenvolvimento do sistema de arquivos consiste em construir a estrutura básica do sistema de arquivos e na instalação de alguns componentes:
Bibliotecas, módulos do kernel, imagens e aplicações.
O desenvolvimento do sistema de arquivos pode ser feito através de uma ferramenta (modo mais fácil) ou desenvolver manualmente (modo mais customizado).
Para o presente trabalho, utilizou- se uma ferramenta chamada Busy
Box. Essa ferramenta implementa muitos comandos e possui muitas facilidades na instalação dos componentes.
Configurar e instalar o software de inicialização Essa etapa consiste em fazer a carga e a inicialização do Linux na plataforma alvo.
É considerada uma das etapas mais difíceis no projeto e é realizada a partir de três fases:
Manipulação do dispositivo de armazenamento;
Preparar o sistema de arquivos;
Configuração do bootloader.
A manipulação do dispositivo de armazenamento consiste na seleção do dispositivo de armazenamento, na partição do mesmo, na escolha por Swap (utilizado para memória virtual) e na preparação do dispositivo de armazenamento para as outras fases.
A preparação do sistema de arquivos consiste na escolha do tipo de sistema de arquivos que sua plataforma deve ter.
Essa etapa define:
Se o sistema de arquivo pode ser escrito;
Se o sistema de arquivos preserva as modificações ao reinicializar;
Se o sistema de arquivos recupera as alterações no caso de falha;
Se o conteúdo do sistema de arquivos montado pode ser comprimido a fim de reduzir seu tamanho;
E o local que ficar armazenado o sistema de arquivos antes de ser montado.
A configuração do bootloader consiste na seleção do bootloader do sistema.
O bootloader define a forma que vai ser inicializado o sistema e anexa as duas fases anteriores no sistema.
Existem diversos bootloaders no mercado e a escolha de cada um é dependente do processador alvo e de suas funcionalidades.
Para o presente trabalho, foi decidido fazer a inicialização do sistema a partir de a memória flash.
O tipo de sistema de arquivos que foi utilizado foi o NFS, onde o sistema de arquivos é carregado para a memória Flash a partir de um servidor de arquivos.
Esse processo agiliza o procedimento de testes da aplicação.
Para fazer o papel do bootloader no sistema, utilizou- se as ferramentas BOOTP/ DHCP, TFTP e NFS no trabalho.
Essa metodologia permite a utilização do NFS para o sistema de arquivos e é maneira mais fácil para fazer a inicialização do sistema.
O middleware foi modelado e projetado para fornecer os serviços oferecidos por a computação pervasiva para a plataforma pervasiva.
Todos os componentes já foram modelados.
No entanto, alguns dos componentes, tais como Unidade de Reconfiguração, Auxiliar de Contexto e Monitor ainda não foram integrados na plataforma, mas outros já foram implementados:
Módulo de Comunicação, Gerenciador de Serviços e Sistema de Autenticação e Controle de Acesso.
A modelagem de cada um dos componentes do middleware pode ser visto abaixo.
Módulo de Comunicação.
O módulo de comunicação tem a tarefa de integrar o dispositivo na rede e gerenciar a comunicação do dispositivo com outros dispositivos.
Para poder realizar a comunicação num ambiente pervasivo, o módulo de comunicação deve suportar heterogeneidade, mobilidade e segurança.
Por isso, a idéia inicial do trabalho era implementar o módulo de comunicação utilizando CORBA.
No entanto, a dificuldade de adaptar CORBA para a plataforma é grande.
Além disso, CORBA ainda não está disponível para a comunicação wireless Bluetooth.
Por isso, a idéia inicial do trabalho foi implementar um Módulo de Comunicação simples, utilizando um mecanismo de comunicação orientado a mensagens, através de Sockets.
O diagrama de classes para a modelagem do Módulo de Comunicação pode ser visto na Figura Seguindo a interface Connection, o Módulo de Comunicação define duas classes que representa a conexão por duas formas diferentes:
Socket (SocketConnection) e Bluetooth (Bluetooth Connection).
Outra classe importante para o Módulo de Comunicação é a OpenConnection.
Essa classe é responsável por criar a idéia de um servidor, disponibilizando solicitações de conexão e de serviços.
Ela também é capaz de encerrar todas as conexões existentes (muito útil para dispositivos com mobilidade).
A Figura 5.5 mostra o diagrama de classes do Gerenciador de Serviços.
Esse componente é composto por nove classes:
Controller, Discovery, Executor, Register, Namespace, ResourceBroker, ServiceRepositoryManager, Gateway e Monitoring.
A classe Controller é responsável por a comunicação da aplicação com esse módulo e controla as outras classes do sistema.
A classe Discovery tem a função de descoberta de dispositivos e serviços na rede.
A o encontrar um novo dispositivo ou um novo serviço na rede, insere- o na classe Namespace, que é o responsável por disponibilizar informações sobre os dispositivos e serviços da rede.
A classe Register faz a solicitação de um pedido de registro do dispositivo no ambiente pervasivo.
A classe ResourceBroker é a responsável por buscar e solicitar serviços na rede pervasiva.
A classe Gateway é a responsável por solicitar a comunicação na rede para disponibilizar ou buscar um serviço.
A classe Monitoring aguarda por solicitações de serviços.
A classe responsável por executar os serviços existentes no dispositivo é o Executor.
E por fim, a classe ServicesRepositoryManager gerência, controla, cria, remove e atualiza todos os serviços existentes no dispositivo alvo.
Unidade de Reconfiguração A Unidade de Reconfiguração foi projetada para adicionar, remover e adicionar serviços e aplicações para a plataforma.
Seu objetivo é permitir adaptação da plataforma para suportar novos tipos de aplicações A Figura 5.6 apresenta o diagrama de classe da Unidade de Reconfiguração.
A adição de novos serviços funciona da seguinte maneira:
A aplicação faz solicitação de novos serviços, seja através do framework ou do Ama.
O ReconfigurationManager da plataforma faz a solicitação de download para o ServicesDownloader.
Esse componente registra todas dependências num arquivo e envia o mesmo junto com o serviço ou aplicação para o ReconfigurationManager.
Quando esse componente recebe todos esses módulos, ele busca as dependências e adiciona tudo no ServiceRepositoryManager, emitindo uma solicitação de registro para o Gerenciador de Serviços.
O processo de atualização da aplicação é semelhante.
No entanto, ao invés de a aplicação solicitar a atualização, um recurso chamado ApplicationUpdater faz a solicitação automática.
Esse serviço serve para facilitar o Ama e o framework para manter as aplicações do sistema atualizadas.
Sistema de Autenticação e Controle de Acesso. O Sistema de Autenticação e Controle de Acesso é o responsável por tratar da segurança na plataforma, nos dispositivos e nos serviços realizados por ambos.
Ele permite que usuários maliciosos tenham baixo ou nenhum acesso ao sistema.
Duas importantes abordagens sobre segurança são relacionadas na arquitetura:
Autenticação e controle de acesso.
A autenticação consiste na validação do acesso do usuário no ambiente.
O seu objetivo é informar a identidade do usuário, permitindo ao usuário uma identificação no ambiente relacionado a tipos de acesso de serviços e recursos, dispositivos, aplicações, informações, etc..
O usuário deixa de ser um usuário público perante o ambiente.
Já o mecanismo de controle de acesso restringe as entidades do ambiente na utilização de determinados serviços e recursos.
Essa restrição é feita através de um registro de informações chamado de Credencial.
Um Credencial permite restringir, por exemplo, o acesso de um usuário a um serviço permitido apenas ao administrador do sistema.
Auxiliar de Contexto. O Auxiliar de Contexto tem a finalidade de ajudar o gerenciamento de contexto no ambiente.
Esse componente é responsável por fazer o tratamento local do gerenciador de contexto e fornecer auxílio para o acesso global de um determinado contexto.
Dois tipos de contexto são tratados:
Em a Figura 5.8, o diagrama de classe do Auxiliar de Contexto é apresentado.
Esse módulo é praticamente separado em dois submódulos:
O primeiro submódulo é para tratar do contexto dinâmico, do contexto que se encontra localmente na plataforma.
A detecção de contexto é feita através do Colector2 que coleta informações do ambiente (através de sensores e dispostivos) e armazena- as no ContextLocalRepositoryManager.
O tratamento desse tipo de contexto é feito através de Triggers que executam imediatamente um método com a coleta de um determinado contexto.
A aplicação tem o papel de construir esses Triggers e esses são armazenados no TriggerRepositoryManager.
O segundo módulo consiste apenas na inserção e no tratamento de um contexto estático.
No caso de a inserção de contexto estático, a aplicação solicita ao Collector1 a adição de novos contextos que repassa para o Gateway.
Esse faz a solicitação de adição de contexto remotamente para os Servidores de Contexto ou para outras plataformas.
No caso de o tratamento de contexto, o processo é inverso.
A aplicação faz uma requisição de um determinado contexto para o RequestsQueueController.
Esse empilha o pedido até estar pronto para atender- lo.
Quando estiver apto para o tratamento, o módulo RequestsQueueController faz uma consulta remota a base de dados do contexto.
As informações do contexto são repassadas para a aplicação.
Monitor Por fim, o Monitor tem como objetivo fornecer recursos de monitoramento da plataforma a usuários e aplicações do ambiente.
Esse módulo propicia o acesso a informações do funcionamento das entidades existentes no ambiente, mas prevê privacidade aos usuários.
O monitor permite o acesso remoto de usuários distantes para monitorar e gerenciar serviços, recursos e dispositivos da plataforma.
Isso possibilita a administradores do ambiente avaliar e resolver problemas da plataforma e fazer testes e atualizações de novas versões de aplicações ou de sistemas operacionais, mesmo estando longe do ambiente pervasivo.
O diagrama de classes do componente Monitor pode ser visto abaixo na Figura 5.9.
O funcionamento é dado da seguinte maneira:
Um administrador faz acesso remoto na plataforma para solicitar o serviço de monitoramento.
Para isso, o usuário conecta no WaitingConnection, verificando o controle de acesso do usuário a informação.
Em o momento que foi autenticado, o usuário acessa o monitor.
O monitor permite acesso aos arquivos de registro do sistema e a determinados serviços do ServiceRepositoryManager.
Em o final do capítulo 3, realizou- se um estudo comparativo relacionado a três tipos de plataformas voltadas para a computação pervasiva:
Gateways pervasivos, plataformas para objetos inteligentes e plataformas de interação com o usuário.
Essa seção adiciona a plataforma pervasiva proposta na comparação, descrevendo uma pequena tabela semelhante à apresentada no estudo das plataformas.
Conforme foi mencionado no estudo comparativo (subseção 3.2.4), a plataforma proposta nesse trabalho tem uma finalidade muito semelhante ao gateway.
Por isso a plataforma possui muitas características e serviços iguais ao gateway:
Alto custo, tamanho e consumo de energia;
Gerenciamento de Recursos;
Segurança; Configurabilidade;
Suporte a Monitoramento.
No entanto, a plataforma pervasiva desse trabalho possui suporte a outros serviços relacionados a computação pervasiva, permitindo serviços inexistentes no gateway, como é o caso de invisibilidade, alta escalabilidade, detecção e tratamento de contexto e de mobilidade (as características da plataforma pode possuir suporte a mobilidade).
Aplicação Agenda Pervasiva e Avaliação da Plataforma Esse capítulo tem como objetivo demonstrar a utilização da plataforma proposta para atender uma aplicação voltada a computação pervasiva.
Essa aplicação, chamada de Agenda Pervasiva, é utilizada para tratar das tarefas e compromissos dos usuários num ambiente distribuído e inteligente.
Inicialmente, é apresentada a descrição da aplicação, da infra-estrutura necessária para executála e mostramos um exemplo prático de funcionamento.
Em seguida, alguns experimentos relacionados a essa aplicação são realizados com o objetivo de fazer uma avaliação funcional para verificar o comportamento do sistema.
Por fim, a contribuição da plataforma para a aplicação Agenda Pervasiva e a utilização de outros recursos para auxiliar na &quot;pervasividade «do ambiente são mostrados.
A aplicação Agenda Pervasiva é uma agenda eletrônica com novas funcionalidades utilizadas para computação pervasiva.
A idéia repassada por essa aplicação é relacionada ao conceito &quot;Siga- me».
Esse conceito é um termo utilizado na pesquisa acadêmica para denominar a onipresença aos ambientes e às aplicações pervasivas.
Em essa seção, a descrição e o funcionamento da aplicação são apresentados.
Em seguida, dois tipos de infra-estruturas aplicadas à Agenda Pervasiva são mostrados.
Essas infra-estruturas são responsáveis por determinadas tarefas envolvidas na aplicação.
Um exemplo prático relacionado a essa aplicação é apresentado para demonstrar o funcionamento do sistema.
A Agenda Pervasiva não é uma aplicação para ser utilizada apenas numa máquina ou num dispositivo.
Ela envolve um ambiente pervasivo e por isso, ela executa em conjunto com diversas máquinas, possui suporte para atender inúmeros usuários e utiliza diferentes tipos de recursos (ex..
Localização e tocador de música).
A Agenda Pervasiva é uma aplicação distribuída que necessita de muitos recursos para atender as suas funcionalidades e suas finalidades.
Conforme mencionado anteriormente, uma das finalidades dessa aplicação é atender inúmeros usuários permitindo o cadastro de seus compro-missos e suas tarefas.
A segunda finalidade é permitir alta interatividade com esse usuário, disponibilizando diversos recursos para fazer o cadastro e a visualização de suas tarefas.
Essa finalidade tem como proposta atender o requisito onipresença.
E por fim, a última finalidade é fornecer o rastreamento e a localização do usuário, para auxiliar o usuário a relembrar de suas tarefas.
A agenda pervasiva funciona da seguinte maneira:
Um usuário cadastrado no sistema insere compromissos especificando data, horário, descrição, mensagem e sala.
A data e o horário representam a fatia de tempo que a tarefa deve ser realizada.
A descrição representa o próprio compromisso.
A música representa uma mensagem de voz ou música que deve ser tocada no ambiente para lembrar o compromisso.
A sala indica o local que o compromisso será realizado;
Um componente da aplicação chamado Gerente fica interagindo com esses terminais, efetuando o cadastro dos usuários e dos compromissos e atendendo todos pedidos dos usuários (ex..
Visualização de seus compromissos no ambiente).
Esses cadastros e visualização são feitos através da interação do Gerente e do Servidor de Perfil, que contém os registro dos usuários e de seus compromissos;
Existe dois tipos de acesso aos terminais:
ADMIN, que possibilita o usuário executar tarefas mais sofisticadas tais como cadastro de usuários, localização de um usuário, visualização das salas, do ambiente, dos usuários numa sala, etc;
DEFAULT, onde cada usuário acessa e modifica seus compromissos e tarefas assim como suas informações pessoais;
O Gerente controla, ainda, o tempo e todas as tarefas de todos usuários a fim de verificar quais os compromissos que estão sendo realizados e se estão sendo cumpridos por os usuários;
Um tipo de localizador ou de servidor de localização adquiri e contém informações relacionadas à localização de um determinado usuário (ou de seu dispositivo de uso);
Quando uma tarefa do usuário &quot;estoura «o limite de tempo, o gerente faz uma solicitação para o servidor de localização pedindo a localização do usuário;
O Gerente verifica no Servidor de Perfil se o usuário está localizado na sala em que o compromisso deve ser realizado.
Se o usuário estiver nessa sala, o compromisso é cumprido e uma mensagem sonora é emitida no ambiente através de plataformas pervasivas existentes em cada sala.
Conforme foi visto na subseção anterior, a Agenda Pervasiva é composta por alguns dispositivos e componentes que realizam tarefas específicas para realizar o conceito de &quot;pervasividade «para a aplicação.
É o caso dos servidores de perfil e de localização, localizador, gerente e plataforma pervasiva.
A Figura 6.1 mostra uma infra-estrutura do ambiente que pode ser aplicado para a aplicação Agenda Pervasiva.
Essa infra-estrutura teve a colaboração especial do Sistema de Localização Holo, apoiado por o grupo de pesquisa Mobilab da UNISINOS.
Baseado na Figura 6.1, a infra-estrutura do ambiente possui os seguintes componentes:·
Gerente -- tem controle sobre todo sistema e sobre a aplicação.
É o responsável por a interação com todos os outros componentes (exceto as caixas de som e o localizador).
É responsável por autenticar o usuário, cadastrar e buscar usuários e compromissos junto com os servidores e por controlar o registro para fornecer a funcionalidade da aplicação.·
Servidor de Perfil -- É um servidor com uma base de dados que cadastra, busca e acessa os usuários do ambiente, além de seus compromissos.·
Servidor de Localização -- É o responsável por buscar, armazenar e fornecer informações relacionadas à localização de um usuário.·
Localizador -- tem como localizar um usuário ou o seu dispositivo de uso· OMAP -- tem como funcionalidade permitir o acesso do dispositivo caixa de som em cada sala à rede pervasiva.
Forneceu todo suporte de drivers para fornecer o serviço &quot;Emitir mensagem sonora».·
Caixas de Som -- dispositivo de interação com o usuário.·
Terminais de Acesso -- terminais que permitem acesso ao usuário na rede pervasiva para, junto com o gerente, cadastrar novos usuários (no caso de o administrador) ou novos compromisso (no caso de usuários cadastrados no sistema).
A Agenda Pervasiva tem capacidade para muitos usuários com diversos compromissos cadastrados.
Conforme foi visto anteriormente, o sistema é capaz de localizar qualquer usuário no ambiente.
Em a Tabela 6.1, apresentamos alguns exemplos de usuários, com seus compromissos cadastrados e com a informação de sua localização.
Suponha- se que os usuários cadastrados num ambiente sejam os usuários da Tabela 6.1, juntos com seus compromissos e com sua localização.
Os usuários somente serão informados por uma mensagem sonora provida por o ambiente, se ele estiver realizado o seu compromisso no local e na hora exata.
Por exemplo, se o usuário A não estiver na sala S1 (local destinado) às 9hs (horário destinado), a mensagem do compromisso C1 do usuário A não emitirá nenhum sinal sonoro a nenhuma sala.
Com relação a o acesso ao terminal, o usuário A possui acesso somente a seus compromissos e o usuário B a seus compromissos e assim sucessivamente.
Nenhum usuário tem acesso a um compromisso de outro usuário.
Outro fator importante relacionado ao acesso dos usuários é relacionado ao cadastro e adição de novos usuários.
Somente o administrador da aplicação possui acesso restrito a esse tipo de informação.
A Agenda Pervasiva foi implementada em C+ sobre a plataforma Linux em todos os PCs.
A plataforma OMAP, conforme foi mencionado no capítulo anterior, utiliza o sistema operacional Linux Embarcado.
A comunicação, também mencionada no capítulo anterior, foi realizada utilizando TCP/ IP.
A plataforma, primeiramente, foi conectada apenas a um dispositivo de áudio.
O padrão utilizado na localização de um usuário é o WIFI.
A localização realizada por o grupo de pesquisa Mobilab da UNISINOS é feito sobre um certo número de pontos de acesso, que efetuam um cálculo em conjunto para fornecer uma maior precisão na localização de um determinado dispositivo do usuário.
O servidor de localização, baseado em WIFI, utiliza o padrão Web Services na sua comunicação.
Em o sistema foi necessário o uso de um Proxy para poder fazer a interoperabilidade com o servidor.
O objetivo dessa seção é mostrar os serviços da aplicação, visualizar o comportamento do sistema e fornecer uma validação funcional, mostrando a realização do serviço através de telas capturadas no sistema.
Para alcançar esse objetivo, três experimentos relacionados a essa aplicação são avaliados:
Inicialização do ambiente e dos dispositivos;
Solicitação de um serviço por o usuário;
E a verificação dos compromissos dos usuários.
Em cada experimento, vamos analisar todos as operações realizadas entre os dispositivos, onde em cada passo de um experimento, vamos mostrar a realização dos serviços em cada componente.
Os experimentos foram elaborados com base na primeira infra-estrutura apresentada na Figura 6.1, utilizando o sistema de localização WIFI.
A execução realizada nas plataformas pervasivas definidas sobre o OMAP são acessadas através de terminais se comunicando via serial:
No caso de o OMAP1, foi utilizado o Kermit do Linux e no caso de o OMAP2, foi acessada sobre o Hyperterminal do Windows.
A aplicação Agenda Pervasiva permite a capacidade de realizar serviços internos e externos ao ambiente.
Isso é permitido, pois o Terminal de Acesso não é anexado ao Gerente da Aplicação.
O Terminal de Acesso pode ser feita remotamente num outro ambiente conectado à Internet.
A aplicação Agenda Pervasiva possui dois tipos de usuários, conforme sua permissão no ambiente:
Administrador e DefaultUser.
O Administrador possui serviços mais específicos relacionados a controlar e monitorar o ambiente.
A Figura 6.2 mostra os serviços realizados por o Administrador, numa consulta do help do sistema para o usuário Administrador.
O usuário DefaultUser tem acesso somente a suas tarefas no sistema.
Por isso, as únicas informações que esse pode visualizar e alterar são relacionadas a suas informações específicas ou a suas tarefas.
A Figura 6.3 apresenta os serviços permitidos por um usuário comum no ambiente.
Esses serviços são mostrados através de uma chamada por &quot;help «de um usuário existente no ambiente.
O primeiro experimento realizado é relacionado a inicialização de todo o sistema, ou seja, de todos dispositivos e servidores no ambiente (exceto o Servidor de Localização Holo).
Em esse experimento, os dispositivos e servidores se conectam entre si, fornecendo informações e registros de serviços uns aos outros.
A Figura 6.9 mostra a execução do Terminal de Acesso.
O funcionamento de cada componente mostrado nessas Figuras é apresentado por os seguintes passos a seguir.
Cada passo é representado nas Figuras dos componentes.
Perfil e Servidor de Localização Proxy ficam esperando conexão de Gerente.
2-Gerente se conecta em ambos servidores e permite a conexão dos demais componentes, seja para as plataformas pervasivas registrarem- se, seja para os terminais de acesso para execução de serviços.
OMAP1 nos passos 4, 5 e 6.
8-Terminal de Acesso se conecta ao Gerente e permite tela de login para usuário digitar &quot;login «e &quot;senha».
Esse experimento visa avaliar a execução de um serviço solicitado por um usuário.
Um determinado usuário, no caso o administrador, entra no sistema e solicita a criação de um novo usuário no ambiente.
Assim como o experimento anterior, esse experimento é mostrado através de um conjunto de passos e das telas de execução dos componentes do sistema.
As Figura 6.10 mostra a execução do componente Gerente de Aplicação, a Figura 6.11 mostra a execução do componente Servidor de Perfil e a Figura 6.12 mostra a execução do Terminal de Acesso.
Essas Figuras são numeradas com passos apresentados a seguir.
&quot;criptografada «do usuário (inversão da senha).
O segundo campo representa a solicitação da criação do usuário.
Servidor de Perfil. O Servidor de Perfil consulta a base de dados a fim de evitar redundância de usuários.
Em seguida, o Servidor de Perfil cria o usuário na base de dados e envia confirmação ao Gerente 8-Por fim, o Gerente envia para Terminal de Acesso a confirmação da criação do usuário.
Gerente novamente espera por solicitação de serviços e Terminal de Acesso espera por comandos do usuário.
Pervasiva O último e mais importante experimento mostra o funcionamento da aplicação:
A verificação dos horários dos compromissos;
A constatação na realização das tarefas e a execução da plataforma pervasiva para o compromisso realizado.
Assim como os demais experimentos, uma série de passos e as telas de execução dos componentes do sistema representam esse experimento.
As telas de execução dos componentes são mostrados nas Figuras 6.13, 6.14, 6.15, e 6.16.
Os componentes necessários para a execução desse experimento foram:
Plataforma pervasiva que emite a mensagem sonora para execução da aplicação, Gerente da Aplicação, Servidor de Localização e Servidor de Perfil.
As figuras possuem uma numeração relacionada com passos apresentados a seguir.
Relógio compara o relógio do sistema com todos compromissos do Servidor de Perfil.
Caso não exista, o Relógio recomeça a espera por 30 segundos.
Servidor de Perfil faz a consulta e retorna o usuário ao relógio.
3-Em seguida, o Relógio do Gerente faz a solicitação ao Servidor de Perfil a Sala onde é realizada o compromisso.
Servidor de Perfil consulta a base de dados e retorna ao Relógio a sala 4-Para verificar se o usuário está na sala desejada, Relógio do Gerente solicita a localização do usuário para Servidor de Localização Proxy.
O OMAP1 faz a execução do serviço, verificando o arquivo executável responsável por o serviço e informando os parâmetros.
A aplicação Agenda Pervasiva tem como objetivo demonstrar o funcionamento da plataforma de modo prático, analisando o tratamento dos requisitos analisados no capítulo 2 e verificando as funcionalidades dos componentes do middleware.
Além disso, é importante analisar o funcionamento da proposta de integrar um dispositivo na rede pervasiva e fornecer os recursos do mesmo para todos dispositivos da rede.
Por isso, essa seção faz uma breve análise das contribuições que a plataforma fornece para a aplicação pervasiva.
Outros tópicos relacionados aos princípios e aos requisitos para a computação pervasiva são mencionados nessa seção.
Em a aplicação Agenda Pervasiva, permitiu a análise de cinco componentes do Middleware:
Módulo de Comunicação, Gerenciador de Serviços, Sistema de Autenticação e Controle de Acesso, Auxiliar de Contexto e Monitor.
A análise de cada um dos componentes segue abaixo:·
Módulo de Comunicação:
Esse módulo abstrai toda comunicação, permitindo simples Apis para os dispositivos externos a subrede se comunicarem com a plataforma pervasiva facilmente e vice-versa.·
Gerenciador de Serviços: Esse módulo é importante para fornecer o serviço tocar a mensagem musical na sala.
Ou seja, a plataforma pervasiva informa o seu serviço a toda rede junto com a localização.
Além disso, a plataforma pervasiva permite a solicitação de um serviço facilmente.
Por exemplo, a plataforma pervasiva é solicitada por o Gerente da Aplicação para a execução de um serviço tocamusic e ela trata dos recursos, no caso caixa de som, necessários para a execução.·
Sistema de Autenticação e Controle de Acesso: Permite somente usuários autorizados a cadastrar no sistema.
Faz a distinção do usuário default do administrador.
O administrador pode solicitar serviços para cadastrar novos usuários, novas salas e verificar o funcionamento do sistema, como por exemplo, localizar um usuário.
Já o usuário default só é capaz de acessar informações relativas a seu respeito, como suas informações pessoais, suas tarefas e sua localização.
A privacidade é um elemento importante na computação pervasiva.
Por isso, o administrador e os outros usuários existentes não têm acesso a um determinado usuário.·
Auxiliar de Contexto: Em a aplicação, somente um tipo de contexto foi tratado:
Localização do usuário.
No entanto, a detecção desse contexto (ou a localização) foi elaborada de duas maneiras (vistas anteriormente).
A aplicação auxiliou a demonstrar como a plataforma trata os dois tipos de contexto:
Dinâmico e estático.
Nós especificamos o contexto dinâmico como a localização por bluetooth, onde o OMAP é o responsável por detectar o contexto, armazenar as informações relativas e caso solicitado, enviar aos demais.
Já a localização por WIFI foi caracterizada por ser um tipo de contexto estático.
Isso se deve, pois varia numa determinada fatia de tempo e quando esse contexto é tratado num servidor específico.·
Monitor: Esse módulo é responsável por permitir ao administrado o acesso às informações contidas na aplicação e por fornecer serviços de testes e avaliação (como é o caso da inserção de dados nos servidores através de arquivos -- loadPerfilXML).
A adição de novas salas para o ambiente da Agenda Pervasiva pode ser realizado de maneira fácil.
Devido a o seu mecanismo de inicialização e ao módulo Discovery do Gerenciador de Serviços, a adição de novas salas no ambiente é possível apenas conectando uma plataforma pervasiva na rede principal.
A o conectar, a plataforma pervasiva se comunica com Gerente e faz seu registro, assim como o registro de seus serviços.
O tratamento da heterogeneidade entre a aplicação e o sistema de localização da Mobilab foi feito de maneira simples:
Disponibilizamos um Proxy no servidor onde fica armazenado o Gerente de Aplicação.
Esse Proxy, que é chamado de Servidor de Localização WIFI, funciona no sistema para permitir a comunicação da aplicação Agenda Pervasiva (TCP/ IP, utilizando sockets) com o sistema de localização da Unisinos que utiliza Webservices para se comunicar.
Outra maneira, ainda não disponibilizada, é a utilização da plataforma para permitir a comunicação entre diferentes protocolos e funcionando como um gateway.
Em a implementação não foi adicionada a comunicação via Bluetooth.
No entanto, se adicionássemos essa comunicação no sistema, poderíamos permitir a comunicação de dispositivos heterogêneos (telefone celular bluetooth com o restante do ambiente, por exemplo).
Conclusão e Trabalhos Futuros Este capítulo revisa os quesitos de pesquisa considerados no desenvolvimento deste trabalho, ressalta as principais contribuições deste mesmo e caracteriza as oportunidades futuras propiciadas na evolução desse trabalho.
A computação pervasiva é o novo cenário computacional que vem sendo considerado o mais recente paradigma computacional desse século.
A mobilidade de diversos grupos de pesquisa, tanto acadêmicos quanto industriais, para a computação pervasiva, vem crescendo em escala global.
Esse novo cenário computacional contempla o desenvolvimento de aplicações com novas funcionalidades em ambientes inteligentes, como por exemplo, uma casa inteligente.
A computação pervasiva disponibiliza ao usuário acesso computacional de modo invisível e onipresente.
A construção de aplicações e ambientes pervasivos, no entanto, proporciona muitos desafios.
Um desses desafios é tratar da heterogeneidade de diversos dispositivos numa rede.
Por isso, o presente trabalho apresentou a implementação de uma plataforma que seja capaz de adaptar um ou mais dispositivos embarcados a um determinado ambiente pervasivo.
Essa plataforma pode ser facilmente integrada numa rede pervasiva e pode fornecer recursos e serviços de um ou mais dispositivos embarcados a outros dispositivos existentes no ambiente conectados a rede pervasiva.
Em esse trabalho, foram estudados alguns conceitos relacionados à computação pervasiva e ao trabalho realizado.
O conceito de ambientes, aplicações, dispositivos e redes pervasivas foram mostrados para visualizar as diferenças com a computação tradicional.
Dois conceitos foram importantes na definição do trabalho.
O conceito utilizado para arquitetura pervasiva foi aplicado para todos os dispositivos pervasivos existentes no ambiente, enquanto o conceito de plataforma é baseado num dispositivo computacional genérico capaz de permitir o reuso de aplicações em software.
Outro aspecto importante para o trabalho foi a captura dos requisitos para a computação pervasiva.
Os requisitos necessários para o desenvolvimento de um ambiente pervasivo foram estudados a fim de auxiliar na concepção da plataforma pervasiva proposta no trabalho.
Esses requisitos também foram utilizados para o estudo relacionado a arquiteturas e plataformas pervasivas.
O estudo de arquiteturas pervasivas foi importante para avaliar as necessidades que os ambientes inteligentes necessitam, em termos de serviços e recursos.
O estudo relacionado às plataformas da computação pervasiva auxilia na concepção do modelo da plataforma proposta, fornecendo uma visão geral dos componentes HW e SW necessários.
Com base nas pesquisas realizadas sobre o estudo das arquiteturas pervasivas, foi definido uma arquitetura para o trabalho.
Essa arquitetura pervasiva foi utilizada para a captura dos serviços e componentes necessários para a modelagem da plataforma.
Essa arquitetura foi baseada num modelo em camadas, onde em cada camada foram abordados os componentes e sua importância no ambiente pervasivo.
Analisando os requisitos capturados, os estudos realizados sobre plataformas pervasivas e as camadas da arquitetura pervasiva, definiu- se o modelo de plataforma pervasiva para integrar dispositivos eletro-eletrônicos no ambiente pervasivo.
Primeiramente realizou- se um modelo da plataforma, definindo o funcionamento no sistema como um todo.
Em seguida, foi realizado o projeto da plataforma, com base no modelo em camadas, definindo os principais componentes para a mesma plataforma.
Com base nessa modelagem e nesse projeto, a plataforma foi implementada e as principais camadas foram definidas detalhadamente.
A plataforma proposta foi avaliada utilizando uma aplicação voltada para um ambiente inteligente.
A aplicação Agenda Pervasiva consiste numa agenda eletrônica distribuída no sistema capaz de localizar o usuário e verificar se os compromissos do mesmo foram realizados com sucesso.
Esse ambiente foi executado com base em dois tipos de infra-estrutura de localização:
WIFI, onde efetua uma localização precisa de um dispositivo WIFI do usuário (desenvolvida por) e Bluetooth, que busca identificar o usuário através de um dispositivo Bluetooth.
Para avaliar os resultados obtidos, a execução do sistema foi capturada e analisada passo a passo.
Por fim, foi apresentada a contribuição da plataforma e de outros recursos para a aplicação pervasiva.
Esse trabalho contribui principalmente para a proposição de uma plataforma pervasiva que facilita a integração de um ou mais dispositivos ou periféricos numa rede pervasiva.
Essa plataforma é capaz de diferentes tipos de aplicações em diferentes ambientes e cenários pervasivos.
Outras atividades secundárias nesse trabalho foram:·
Conceitos gerais e aplicados à computação pervasiva;·
Análise de requisitos básicos para desenvolver aplicações pervasivas;·
Estudo relacionado sobre arquiteturas pervasivas, assim como sua contribuição para o trabalho;·
Estudo sobre plataformas pervasivas, definindo sua especificação, suas contribuições e suas limitações com relação a esse trabalho;·
Projeto de uma arquitetura pervasiva, apresentando um modelo em camadas e definindo cada componente dessa arquitetura;·
Modelagem de uma plataforma pervasiva que facilita a integração de diversos dispositivos heterogêneos numa rede pervasiva;·
Definição e projeto de componentes voltados para o tratamento de requisitos relacionados à computação pervasiva;·
Desenvolvimento de uma aplicação prática para ambientes pervasivos, relacionando alguns requisitos a computação pervasiva.
No entanto essa aplicação encontra- se em estágio inicial;
Trabalhos Futuros A plataforma pervasvia proposta no trabalho propiciou uma certa variedade de trabalhos futuros.
São eles:·
Estudar, analisar e desenvolver componentes e serviços mais específicos que permitam um tratamento mais eficaz para a computação pervasiva, tais como tratamento de falhas, métodos mais eficientes para segurança, comunicação entre dispositivos totalmente heterogêneos, etc;·
Construir frameworks e agentes de aplicação para facilitar o desenvolvimento de aplicações na plataforma pervasiva;·
Proporcionar serviços de roteamento para a plataforma pervasiva, com o objetivo de estender a proposta do trabalho;·
Testar, avaliar e analisar a plataforma para verificar suas funcionalidades pervasivas e a flexibilidade próximo trabalho;
