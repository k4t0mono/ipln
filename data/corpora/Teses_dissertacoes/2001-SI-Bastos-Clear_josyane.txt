Com a evolução do paradigma de sistemas multiagentes (SMA), tornou- se possível sua aplicação no desenvolvimento de sistemas de informação (Si) que por sua natureza requeiram descentralização e distribuição na tomada de decisão e no processo de execução.
Considerando estes pressupostos, este trabalho tem por objetivo definir uma linguagem para modelagem conceitual de SMAs, no domínio dos sistemas de informação empresariais.
Como contribuição, apresenta um conjunto de diagramas definidos como extensões da linguagem de modelagem UML (Unified Modeling Language), adequados para a elaboração do modelo de análise capaz de representar a sociedade de agentes, seus papéis e suas interações.
Para tanto, foi realizado um levantamento teórico e pesquisadas as técnicas de desenvolvimento de SMAs, no sentido de definir os requisitos a serem considerados para a elaboração do modelo de análise.
Palavras-Chave: Sistemas Multiagentes, Modelagem Conceitual de Sistemas Multiagentes, UML, AUML.
Em as últimas duas décadas, a abordagem de sistemas multiagentes (SMA) tem sido desenvolvida no campo da Inteligência Artificial (Ia).
Como resultado desta abordagem, tornou- se possível a aplicação deste paradigma no desenvolvimento de sistemas de informação (Si) que por sua natureza requeiram descentralização e distribuição na tomada de decisão e processo de execução.
Conforme Jennings e outros, a aplicação de agentes em Si é justificada por as seguintes características:
O domínio envolve distribuição intrínseca de dados, capacidade de resolução de problemas e responsabilidades;
É necessário manter a autonomia das subpartes, sem a perda da estrutura organizacional;
As interações são complexas, incluindo negociação, compartilhamento de informações e coordenação;
A solução do problema não pode ser completamente descrita a priori, devido a possibilidade de perturbações em tempo real no ambiente (falhas de equipamentos, por exemplo) e na natureza dinâmica dos processos de negócios.
O paradigma de orientação a objetos (OO), segundo pesquisadores, tais como Iglesias, Jennings, Wooldridge, Kendall, Taveter e Odell, não é adequado para a modelagem de SMA, por o fato de não se apropriarem do ponto de vista conceitual.
O paradigma OO não captura:
O comportamento autônomo para resolução de problema dos agentes (que são autônomos, possuem habilidade social, de reatividade e proatividade);
Sua capacidade de interação (trocas de mensagens através de atos de comunicação (AC) sem a especificação do método a invocar, pois um agente não sabe as operações internas de outros agentes);
E a complexidade das estruturas organizacionais de um SMA (que leva em consideração as responsabilidades e os papéis dos agentes na sociedade).
Embora existam diversos trabalhos aplicando SMA em Si, foi verificado que não existe ainda consenso quanto a as metodologias e técnicas a serem utilizadas para modelar esse tipo de sistema.
Desta forma, devido a a necessidade de ter- se um instrumento capaz de direcionar e facilitar o processo de modelagem de forma consistente, integrada e incremental do sistema, considerando as características particulares do paradigma multiagentes, e da necessidade de facilitar a visualização do ambiente a ser modelado, observou- se a importância em definir um modelo de análise composto por um conjunto de diagramas (apresentações gráficas de um conjunto de elementos) a serem utilizados na especificação das visões estática, dinâmica e funcional do nível macro de um SMA.
Veja a representação dos níveis de modelagem na Figura 1.
Muitas abordagens têm sido utilizadas para a produção de software OO, tais como OMT (Object Modeling Technique -- Técnica de Modelagem de Objetos), OOSE (Object Oriented Software Engineering -- Engenharia de Software Orientada a Objeto), RDD (Responsibility Driving Design -- Projeto Dirigido por Responsabilidade) e a linguagem de modelagem UML (Unified Modeling Language ­ Linguagem de Modelagem Unificada).
Conforme Iglesias, é relevante considerar a possibilidade de se estender as abordagens OO para o desenvolvimento de SMA.
De acordo com Iglesias, as três visões comuns em metodologias de sistemas ­ estática (define a estrutura dos objetos e seus relacionamentos);
Dinâmica (modela a interação entre os objetos) e funcional (descreve os fluxos de dados que fluem como resultado da execução dos métodos dos objetos) ­ também devem ser consideradas para modelar SMA.
Os modelos de engenharia de software tradicionais procuram construir uma especificação completa de um sistema com um número determinado de módulos rígidos antes de implementar- lo.
Esta forma de modelar não é adequada para os tipos de aplicações em as quais os sistemas multiagentes são considerados.
Isto se justifica, conforme Wooldridge e Jennings, por o fato de que um SMA envolve construção de componentes sofisticados e auto-suficientes (agentes) capazes de interagirem com flexibilidade com outros componentes (agentes) desenvolvidos de forma independente (e até mesmo desconhecida).
A interação não pode se dar através de interfaces rígidas e pré-definidas como no caso de a OO, sendo baseada em negociação seguida de acordos entre os agentes envolvidos.
Considera- se que o processo de produção de software englobe três etapas básicas análise ­ constitui a etapa de modelagem do problema para uma representação padronizada (geralmente através de diagramas), sendo o resultado do processo de levantamento de requisitos funcionais e de aspectos relacionados.
Inserindo- se neste ponto de vista, é necessário que, a exemplo do paradigma OO, o paradigma de orientação a agentes (OA) seja também suportado por técnicas e métodos que garantam a qualidade do processo de produção do software.
Considerando estes pressupostos, inserida na fase de análise, esta pesquisa tem por objetivo definir uma solução para modelagem de SMA, focando a área de sistema de informação empresarial.
Considera- se como características essenciais a um Sistema de Informação Empresarial sob a ótica deste trabalho sistemas que representem processos transacionais nas organizações, cujos resultados requeiram armazenamento e recuperação de informação, requerendo o uso intensivo de banco de dados.
Também, em sistema desta natureza considera- se a necessidade de tomada de decisões (por os atores ou por processos automatizados), baseados nas informações recebidas, produzidas ou atualizadas no contexto do sistema.
Para atender este objetivo geral, os seguintes objetivos específicos foram definidos:·
Investigar e identificar limitações das propostas de métodos e modelos para a modelagem do nível macro de um SMA existentes na literatura;·
Identificar as limitações dos modelos de OO para a modelagem de SMA;·
Especificar uma linguagem de modelagem para elaboração do modelo de análise cobrindo as diferentes visões necessárias (funcional e comportamental) no processo de modelagem de SMA.
Foi utilizada como referência a linguagem de modelagem UML por a sua ampla difusão a nível mundial, e por ser atualmente uma linguagem de referência OMG (Object Management Group).
A UML é uma linguagem gráfica para visualização, especificação, construção e documentação de artefatos de sistemas complexos de software que surgiu no final dos anos 80 e unificou os modelos propostos por os pesquisadores Booch, Rumbaugh e Jacobson.
A UML não é uma metodologia, pois a maioria das metodologias consistem, pelo menos em princípio, de uma linguagem de modelagem e de um processo.
A linguagem de modelagem é a notação (principalmente gráfica) utilizada por métodos para expressar projetos.
O processo é a sugestão de quais passos devem ser seguidos na elaboração de um projeto.
UML não contempla noções do processo, que é uma parte importante de uma metodologia, como é descrito por Fowler e Scott.
Como estudo de caso é utilizado o sistema M-DRAP (Multiagent Dynamic Resource Allocation Planning -- Alocação Dinâmica de Recursos em Ambiente de Produção), que propõe uma abordagem para o problema de alocação dinâmica de recursos em ambiente de produção baseada no paradigma multiagente.
O processo de definição dos diagramas iniciou- se através de um levantamento feito na literatura.
Em seguida, estudou- se as técnicas e aplicações da linguagem UML, verificou- se como as visões comuns no desenvolvimento de sistema (estática, dinâmica e funcional) são representadas no paradigma de SMA, estudou- se o processo de modelagem do M-DRAP e as atividades componentes desta abordagem.
O passo seguinte foi analisar e estudar as várias propostas já existentes e descobrir suas limitações, pois a partir de aí iniciou- se a idealização do trabalho que vai em direção a uma abordagem para a elaboração do modelo de análise de um SMA.
Como resultado essencial deste trabalho, para a elaboração do modelo de análise, foram estendidos a partir de a linguagem de modelagem UML, os seguintes diagramas:
1) Diagrama de Casos de Uso, que descreve os cenários do SMA;
2) Diagrama da Sociedade, que descreve os agentes, seus relacionamentos e sua estrutura;
3) Diagrama de Interação Seqüencial, cujo objetivo é representar a interação entre os agentes nos diferentes cenários do SMA.
O volume encontra- se dividido em 8 capítulos.
O capítulo 2 apresenta o referencial teórico, onde é introduzido o conceito de agentes, seus tipos e arquiteturas, caracterização dos SMA e os aspectos fundamentais para o desenvolvimento de um SMA.
O capítulo 3 apresenta o desenvolvimento de SMA sob o ponto de vista de vários pesquisadores, as técnicas por eles utilizadas e os requisitos para a modelagem conceitual de um SMA utilizados para a definição do conjunto de diagramas que representam o nível macro de um SMA.
O capítulo 4 realiza a apresentação dos modelos de análise do sistema de uma sociedade de agentes, utilizando como referência os modelos da UML e a partir de aí propondo extensões para representar os cenários de um SMA.
O capítulo 5 apresenta uma descrição do M-DRAP e um estudo de caso com a aplicação das extensões dos diagramas propostos.
O capítulo 6 apresenta as conclusões, descrevendo as contribuições, dificuldades e identificação de trabalhos futuros.
O capítulo 7 apresenta a bibliografia utilizada para a redação deste volume.
E por fim, o capítulo 8 apresenta o anexo onde se encontra a descrição dos parâmetros das mensagens ACL.
Este capítulo abrange algumas considerações sobre agentes, tipos de agentes, sua arquitetura, assim como as características de um SMA e os aspectos fundamentais para o seu desenvolvimento.
A fundamentação de um SMA baseia- se na interação social de indivíduos (sociedade de agentes) que convivem entre si e interagem mutuamente para alcançar objetivos comuns e individuais.
Para tal, um agente é concebido como um indivíduo autônomo, com funções que lhes são inerentes para o desempenho de seus papéis e o alcance dos seus objetivos.
Estes agentes, no entanto, compartilham um mundo comum, e cada um possui diferentes objetivos e pontos de vista, gerando muitas vezes alguns conflitos.
Estes conflitos são negociados e resolvidos entre os agentes, que por sua vez devem estar comprometidos com um plano conjunto.
Este plano é um conjunto de compromissos de ações e de crenças em diferentes níveis de abstrações, aos quais os agentes que constituem uma sociedade estão engajados.
Conforme Amandi as capacidades de agentes compreendem:
Capacidade comportamental básica:
Representada por as ações ou seqüências de ações executadas por agentes, tendo em vista suas características e habilidades;
Capacidade de comunicação:
Refere- se ao conhecimento e capacitação para utilização de um protocolo de comunicação através de o qual o agente pode interagir com outro agente;
Capacidade de percepção:
Diz respeito à capacidade do agente perceber mudanças no ambiente, uma vez que estas podem ocasionar a necessidade de revisar os seus planos;
Capacidade de reação a determinadas situações:
Mecanismos que permitem ao agente reagir a situações específicas de uma forma pré-determinada;
Capacidade de deliberação na tomada de decisão:
Consiste na capacidade do agente de tomar decisões e planejar suas ações, tendo em vista os seus objetivos;
Capacidade de manipulação dos estados mentais:
As decisões dos agentes são baseadas em seus estados mentais.
Portanto, faz- se necessário que lhes seja possível expressar e manipular os seus estados mentais;
Capacidade de aprendizagem:
Os agentes podem aprender a partir de suas experiências ou das experiências de outros agentes.
O aprendizado lhes permitem evoluir no sentido de qualificar as suas decisões.
Embora o termo &quot;agente «tenha sido usado com freqüência na Ia, não há uma noção uniforme e precisa para o seu significado.
Em esta dissertação, considera- se agente como sendo uma entidade que exibe alguns aspectos da inteligência humana.
É associado a uma entidade que funciona contínua e autonomamente num ambiente em o qual existem outros processos e agentes.
A autonomia significa que as atividades de agentes não exigem intervenção humana contínua ou que eles possuem poder de autodeterminação, num meio ambiente.
A autonomia de um agente requer inteligência devido a necessidade de sobreviver num ambiente real e dinâmico.
Está intimamente relacionada com o tipo de arquitetura do sistema;
Assim, pode- se ter agentes com diferentes graus de autonomia.
Um agente deve ser dotado de certas habilidades que compreendem a capacidade de perceber, interpretar dados e mensagens, raciocinar baseado em suas crenças, tomadas de decisões, planejamento e execução de planos.
Estes agentes, sob o ponto de vista de SMA, podem ser caracterizados de acordo com o grau de sua capacidade em resolver problemas:
Reativos Um agente é classificado como reativo quando não é capaz de raciocinar sobre suas intenções, o que determina uma impossibilidade de redefinir seus objetivos.
Estes agentes respondem às condições e mudanças no ambiente ou às mensagens provindas de outros agentes através de um conjunto de regras pré-definidas sensíveis a estes estímulos.
Não possuem capacidade de planejar, porém podem comunicar- se com outros agentes enviando, recebendo e interpretando mensagens.
Intencionais/ Cognitivos Um agente intencional está habilitado a raciocinar sobre suas intenções e crenças, criar planos de ação e executar estes planos.
De acordo com suas motivações, tais agentes podem estabelecer objetivos não conflitantes entre si, selecionar ou criar planos, programar suas ações, detectar conflitos entre estes planos (como por exemplo, sob o ponto de vista dos recursos necessários ou de aspectos temporais), executar- los e revisar- los, caso seja necessário.
Conforme definido por Oliveira, os agentes intencionais são identificados como sendo agentes cognitivos, afirmando que uma das idéias de agente é sua ligação ao conceito de agente racional1.
Embora a escolha das ações de um agente sejam feitas com base em seus objetivos, sua execução é limitada por os seus recursos computacionais.
Sociais Um agente intencional passa a ser considerado como um agente social quando possui conhecimento do modelo particular de outros agentes.
O agente social está habilitado a:
Agente racional -- é um agente que tem a capacidade de escolher suas ações (partindo da premissa de que todo agente possui um conjunto de ações as quais está habilitado a executar) de forma coerente com seus objetivos.
Para Correa, a arquitetura de um agente diz respeito à especificação de quais e como são os processos internos de um agente.
Colaborando com esta perspectiva, Wooldridge e outros, consideram que a especificação da arquitetura de um agente deve trazer respostas às seguintes perguntas:
&quot;Como construir agentes que satisfaçam as propriedades que de eles se esperam?»
e &quot;Quais estruturas de software e/ ou hardware são apropriadas?»
De acordo com os autores, existem três tipos básicos de arquiteturas para agentes:
Deliberativas, reativas ou não-deliberativas e híbridas.
Esta classificação foi definida em função de o mecanismo utilizado por o agente para a seleção de suas ações:
Arquiteturas Deliberativas Conforme Correa, as arquiteturas deliberativas inspiram- se nos sistemas de planejamento clássicos.
Em estes sistemas são produzidas seqüências de planos que compreendem ações corretas capazes de permitir a realização de um objetivo pré-definido, baseado em hipóteses de que:
I) existe um completo conhecimento do estado do mundo;
Para Wooldridge e outros, na construção de agentes existem pelo menos dois problemas a serem considerados:
I) o problema de tradução:
Como traduzir o mundo real (aspectos ambientais) numa descrição simbólica correta e adequada considerando as restrições de tempo em que esta descrição tem utilidade para o agente;
Segundo Damico e outros, a escolha da ação é feita através de uma deliberação explícita sobre diferentes opções, por exemplo, usando um modelo interno simbólico do mundo, um plano ou considerando alguma função que avalie uma ação conforme sua utilidade.
É construída através de uma representação simbólica deste mundo, e suas decisões são tomadas através de um processo baseado em raciocínio lógico.
De acordo com Correa, as principais críticas a estas arquiteturas se devem ao fato de que:
I) elas adotam o pressuposto (ponto de vista do agente) de que o mundo permanece inalterado enquanto este agente delibera sobre suas ações ou mesmo durante sua execução;
Arquiteturas Reativas ou não-deliberativas Em uma arquitetura reativa, o agente toma decisões sobre que ação executar (através de algum procedimento pré-compilado ou embutido em algum circuito) em tempo real, em função de a ocorrência de um ou mais eventos no ambiente.
O agente, ao receber ou perceber algum sinal ou estímulo do meio ambiente, passa a agir num curto espaço de tempo, utilizando no processo de decisão uma quantidade de informações restritas ao que os seus sensores estão habilitados a captar.
Os mecanismos de controle para este tipo de arquitetura, normalmente, são simples, como por exemplo, conjuntos de regras do tipo estímulo-resposta ou máquinas de estadofinito.
A escolha da ação está diretamente situada na ocorrência de um conjunto de eventos no ambiente, e a ação depende de um conjunto de pré-condições.
O agente toma decisão sobre que ação executar.
Portanto, numa arquitetura reativa não está presente qualquer tipo de modelo simbólico do mundo e não é utilizado raciocínio simbólico complexo.
As principais críticas a esta arquitetura estão no fato de que:
I) Desenvolvimento dos agentes exige um esforço considerável.
Isto porque faz- se necessária a determinação das situações a serem encontradas por o agente no mundo real, e a partir de isto a definição de soluções específicas para cada caso;
Arquiteturas Híbridas Para Damico e outros, a escolha da ação é realizada usando uma combinação entre as técnicas utilizadas em arquiteturas deliberativas e não deliberativas.
Os agentes com arquiteturas deliberativas apresentam como principal problema a sua dificuldade em lidar com situações imprevistas que exigem uma decisão rápida.
Já com relação a os agentes projetados com base em arquiteturas não-deliberativas, o problema está em sua dificuldade em identificar ações alternativas quando a situação apresentada diverge de seus objetivos iniciais.
As arquiteturas híbridas devem permitir a construção de agentes capazes de resolver estas limitações, dotando o agente com capacidades reativas, de raciocínio e planejamento.
Ainda conforme os autores, as arquiteturas híbridas foram propostas como alternativas para solucionar as deficiências principais das duas arquiteturas anteriores.
A arquitetura deliberativa é tipicamente incapaz de agir rápida e adequadamente perante situações não previstas.
O agente, cuja arquitetura é nãodeliberativa, é incapaz de descobrir alternativas para o seu comportamento quando a situação do mundo diverge bastante de seus objetivos iniciais.
As arquiteturas não-deliberativas possuem controle de ações feito através de regras do tipo situação-ação fixadas, seja em forma de circuitos eletrônicos, ou numa forma codificada diretamente ou num código produzido através de uma compilação prévia.
Os resultados observados demonstram excelente desempenho num ambiente real, mas às custas de um grande esforço prévio para a determinação de soluções específicas para as possíveis situações encontradas.
Em geral, sistemas com arquitetura não-deliberativa não possuem objetivos explícitos que possam ser arbitrados e alterados durante a execução do sistema, o que restringe a autonomia dos agentes e suas capacidades de aprender e melhorar o desempenho.
O principal argumento contra arquiteturas deliberativas clássicas, sob ponto de vista de Damico e outros, é que adotam a hipótese de que as condições do mundo permanecem estáticas enquanto o agente estiver executando as suas ações ou processando alguma informação para deliberar sobre as ações.
O tempo necessário para analisar as situações, construir e reutilizar planos, tipicamente pode tornar o agente muito lento para agir no mundo real.
Por outro lado, essas arquiteturas apresentam objetivos explícitos, os quais podem ser mudados, possibilidade de utilização dos princípios da comunicação em linguagem natural, capacidade para aprendizagem, raciocínio e todo o potencial possibilitado por o processamento simbólico.
Sob o ponto de vista de Durfee, SMA tem como premissa a existência de um conjunto de agentes autônomos, normalmente heterogêneos, que cooperam entre si para a solução de um problema cujas exigências estão além de suas capacidades individuais.
Segundo Oliveira, quando o agente busca autonomia, isto traduz- se em arquiteturas mais flexíveis, onde a organização do sistema está sujeita a mudanças, visando adaptar- se a variações no ambiente e/ ou ao problema a ser resolvido.
Muitas aplicações são inerentemente distribuídas.
Algumas são especialmente distribuídas (tais como interpretação e integração de dados obtidos dos sensores especialmente distribuídos, ou controlando um grupo de robôs) e outras são funcionalmente distribuídas (como por exemplo, um grupo de especialistas com diferentes especialidades colaborando para resolver um problema).
Um SMA tem vantagens significativas sobre um problema simples, monolítico e centralizado a resolver:
Resolução de problemas mais rápida (por fazer uso do paralelismo), comunicação reduzida (por a transmissão de soluções parciais de alto-nível para outros agentes), maior flexibilidade (por ter agentes com diferentes habilidades trabalhando em conjunto para resolver os problemas) e aumento de confiança (por permitir aos agentes assumir para si as responsabilidades de agentes que falham).
Sob o ponto de vista de Bond e Gasser, os seguintes problemas inerentes ao projeto e implementação de IAD se apresentam:
Como formular, descrever, decompor, distribuir problemas e sintetizar resultados entre grupos de agentes inteligentes? --
Como habilitar agentes a comunicar e interagir?
Que linguagem de comunicação e protocolo usar?
O que e quando comunicar?
Como habilitar agentes individuais a representar e raciocinar sobre as ações, planos e conhecimento de outros agentes para coordenar- se?
Como medir as ações dos agentes coerentemente com as decisões a tomar e as ações a realizar?
Como reconhecer e reconciliar pontos de vista discrepantes e conflitos de intenções entre uma coleção de agentes tentando coordenar suas ações?
Como projetar plataformas de tecnologias e desenvolvimento para IAD?
Para os autores, cada um destes problemas aparece de alguma forma em aplicações de IAD, pois ela não está interessada nas questões relacionadas ao paralelismo ou processamento paralelo, mas sim com as questões de coordenação entre processos concorrentes na resolução de problemas e níveis de representação.
Certos pesquisadores como Nilsson apud, acreditam que a IAD possa ser crucial para a compreensão da Ia.
Primeiro, um sistema pode ser tão complicado e conter tanto conhecimento que é melhor &quot;distribuir- lo «em diferentes entidades cooperativas para obter mais eficiência (modularidade, flexibilidade).
Um segundo argumento é baseado no fato da IAD oferecer um framework2 prático para testar sua intuição sobre o processo de raciocínio baseado no conhecimento, ações e planos.
Atualmente, existem métodos para representar crenças, planos, ações e raciocínio sobre interações de SMA.
O terceiro argumento é que os métodos usados por um sistema inteligente para raciocinar sobre as outras ações do sistema podem também ser usados para raciocinar sobre outros tipos de processos dinâmicos sem inteligência.
Para Moulin e Chaib-Draa, as tecnologias de IAD têm sido aplicadas para interpretação distribuída, planejamento e controle distribuído, cooperação de sistemas especialistas, trabalho cooperativo suportado por computador, entre outros.
IAD traz novas perspectivas de representação do conhecimento e resolução de problemas, por oferecer uma formulação científica e representações realísticas na prática.
Ela cerca vários módulos de pesquisas que podem ser estudados com diferentes perspectivas:
As perspectivas do agente, as perspectivas do grupo, as perspectivas do projetista e enfoques específicos (veja item 2.3 Aspectos Fundamentais para o desenvolvimento de um SMA).
Framework -- esqueleto, arquitetura do ambiente, arcabouço (não será traduzido ao longo de o volume por já ser uma palavra de uso comum).
De o ponto de vista de Demazeau e outros, a Ia está classificada em Inteligência Artificial Descentralizada (IADz) para a abordagem de SMA, definindo- a como &quot;o estudo do comportamento de um agente autônomo num mundo multiagente «e IAD como &quot;o estudo da solução colaborativa de problemas globais por um grupo distribuído de entidades».
A palavra agente, neste caso, é usada de maneira geral para designar uma entidade, agindo racionalmente e intencionalmente em relação a seus próprios objetivos e ao atual estado de seu conhecimento.
Por autônomo, entende- se que cada agente possua sua própria existência, a qual não se justifica por a presença ou não de outros agentes nem por a existência prévia de algum problema.
Considera- se, portanto, um sistema em o qual existem vários agentes, que podem vir a colaborar entre si, mas não necessariamente.
A autora Giraffa complementa que agente é utilizado no sentido amplo para designar uma entidade inteligente, agindo racionalmente com respeito a atingir seus próprios objetivos e o estado corrente de seu conhecimento.
Os agentes podem trabalhar em direção a um único objetivo global ou rumo a objetivos individuais separados que podem interagir, sendo então a autonomia dos agentes relacionada com a existência de cada agente independentemente da existência dos demais.
Os SMAs podem ainda ser subdivididos em duas abordagens principais segundo SMAC (Sistemas Multiagentes Cognitivos):
Cuja característica principal é a existência de uma forma explícita de representação de conhecimento;
SMAR (Sistemas Multiagentes Reativos):
Cuja ênfase principal é no comportamento, sem uma preocupação maior com a representação do conhecimento.
O SMAC baseia- se na representação do conhecimento.
A atividade de um agente é produzida por a interação entre o agente e seu meio ambiente, e não por o processo de raciocínio que ocorre internamente.
O SMAR é particularmente interessante em domínios que envolvem ações de caráter nitidamente comportamental, ou seja, de ações ou simulações de ações no mundo físico, tais como a robótica e a automação industrial, que geralmente envolvem um comportamento cooperativo de vários agentes para realizar uma tarefa, de a qual surgem, de modo implícito, os padrões de comportamento social inteligente, tais como coordenação, negociação, etc.
Segundo Álvares e Sichman apud, as principais características dos agentes dos SMAR são:
Em um SMA, deve- se considerar critérios que viabilizem e garantam a coerência das ações dos agentes com vistas a atingir de maneira efetiva os objetivos do sistema.
Moulin e Chaib-Draa propõem um framework que fornece uma estrutura de análise e classificação da maior parte das atividades de pesquisa em SMA, de o qual pode- se citar duas perspectivas:
Enfatizando as perspectivas acima mencionadas, uma sociedade de agentes, segundo Torsun apud, para atingir objetivos comuns e aspectos fundamentais para SMA, deve ser constituída por elementos capazes de desempenhar as funções de cooperação, conflitos, negociação, comprometimento, interação e comunicação, organização e estrutura, coordenação e planejamento:
Para Torsun apud, agentes recebem problemas com um certo nível de abstração.
Cada agente deve, então, decompor o problema em subproblemas que lhe digam respeito e com que possa lidar, de acordo com os recursos e os conhecimentos que possui ou que possa buscar com outros agentes.
De acordo com Lux e Steiner, a &quot;cooperação acontece quando vários agentes planejam e executam suas ações de uma forma coordenada», sendo requerida quando:
I) O agente não consegue encontrar um plano local que contemple o objetivo;
Ii) O plano adequado ao objetivo envolve ações de outros agentes;
Implementar modos eficientes de cooperação entre agentes é uma das principais questões quando se trata de desenvolvimento de um SMA.
Através de cooperação, um grupo de solucionadores de problemas tentam, na forma de uma equipe, resolver um único problema.
A cooperação é formada de acordo com os interesses individuais de cada agente, ou de um grupo de agentes.
A maior dificuldade nas interações entre agentes é que nenhum agente tem uma visão adequada sobre os motivos que levam outros agentes a se comportarem de um determinado modo.
O autor Durfee propõe quatro objetivos genéricos para a cooperação num grupo de agentes:
I) diminuição do tempo de execução de uma tarefa através do paralelismo;
O autor Decker apud, destaca os reflexos do grau de cooperação entre agentes pois, segundo ele, quanto maior for o grau de cooperação entre os agentes, maiores serão os custos de comunicação.
Por outro lado, permite aos agentes manteremse informados sobre as necessidades dos outros, podendo reconsiderar seus compromissos de modo a garantir a coerência e a coordenação no sistema.
De acordo com Lux e Steiner, os elementos básicos necessários para propiciar a existência de cooperação entre agentes são chamados primitivas de cooperação.
As primitivas de cooperação são representadas como ações multiagentes com pré-condições e efeitos específicos.
As procedures das primitivas de cooperação chamam as funções de enviar e receber comunicação do remetente e receptor.
As pré-condições das primitivas de cooperação podem ser vistas como condições de aplicabilidade.
Os efeitos das primitivas de cooperação incrementam o conhecimento dos agentes cooperativos e disparam as funções de basic-loop3 dos agentes.
Conforme o autor, o basic-loop destaca que o comportamento dos agentes é, a princípio, bastante simples.
Cada agente interage seguindo dois passos de intervalos regulares:
I) leia as mensagens atuais, atualize seu estado mental e inclua suas crenças e compromissos (o programa de agente é crucial para esta atualização);
Negociação é um mecanismo que permite a agentes autônomos chegarem a um consenso em relação a um determinado problema.
A negociação, para Moulin e Chaib-Draa, representa um papel fundamental em atividades cooperativas dentro de sociedades humanas, permitindo que pessoas resolvam conflitos que possam interferir com comportamento cooperativo.
A necessidade de negociação pode ser detectada, conforme, a partir de um conflito entre planos e agentes com diferentes objetivos.
O propósito da negociação é resolver o conflito de modo que um plano conjunto para os agentes em conflito seja executado.
A negociação é um processo interativo em que agentes fazem concessões mútuas ou apelam por a coordenação de outro agente.
Os principais elementos utilizados por os agentes envolvidos no processo de negociação são, conforme Huhns e outros:
Linguagem; Basic-loop -- laço geral do programa onde são executadas as atividades gerais.
Protocolo, que define a maneira através de o qual eles negociam;
Processo de decisão, que determina suas posições, concessões, e critérios utilizados para acordos.
De o processo de negociação, podem surgir conflito (conjunto de negociações está vazio) ou o estabelecimento de compromissos entre os agentes.
Comprometimento para Giraffa, é um conceito básico em SMA que fundamenta outros conceitos como cooperação, negociação, planos e objetivos.
Pode ser concebido como um conjunto de objetivos persistentes e comuns a sociedade de agentes.
Um grupo de agentes está, via de regra, comprometido com um objetivo comum até que um agente do grupo atinja este objetivo, ou acredite que o objetivo nunca possa ser atingido ou que a motivação para atingir tal objetivo não seja mais válida.
Conflitos podem ocorrer quando agentes cooperam entre si para resolver um problema, como resultado de um conhecimento incompleto, objetivos ou prioridades diferentes, critérios de avaliação ou contenção de recursos.
Os conflitos devem ser vistos como um aspecto positivo do processo de resolução conjunta de problemas, e sua resolução envolve interação entre os agentes, o que provoca robustez, abrangência e equilíbrio na solução do problema.
Para, agentes inteligentes devem objetificar partes de seu mundo para raciocinar sobre ele.
Este processo é sempre sujeito a problemas de abstração e incompletude, em parte por nenhum objeto ou processo do mundo real poder ser completamente descrito.
De este modo, os agentes devem ser capazes de lidar com problemas de disparidade e incerteza entre suas representações e aquilo que elas representam.
No caso de existirem diversos agentes, para que eles possam agir de modo coordenado, devem poder objetivar um ao outro em representações, e devem ser capazes de alinharem estas representações em algum nível de abstração.
Isso não quer dizer que devam possuir representações idênticas a respeito de o mundo em que estão, mas que estas representações possibilitem que seus objetivos individuais possam ser atingidos.
Estes problemas aparecem de forma mais amena nos sistemas de DPS, pois nestes casos as representações e os protocolos de comunicação já se encontram bem estabelecidos por o projetista.
De qualquer modo, problemas sobre disparidades, incertezas, conflitos entre agentes, suas crenças e os comportamentos do mundo real sobre os quais eles raciocinam, verificam- se em praticamente todos os sistemas de IAD.
Estas, oriundas de conhecimentos incompletos, logicamente inconsistentes ou por possuírem representações diferentes, sendo então incompatíveis.
Estas disparidades podem levar a conflitos entre os agentes, mas não necessariamente implicam conflitos indesejáveis para o sistema.
Pelo contrário, a existência de algo diferente entre os conhecimentos dos agentes se faz necessária para que se evite a duplicação de trabalhos.
Em muitos trabalhos, a questão do conflito é abordada de uma forma negativa, onde eles são simplesmente evitados por causarem interações indesejáveis ao sistema, ou então solucionados a partir de uma espécie de benevolência pacífica de uma das partes.
Entretanto, a existência de conflitos é inerente a qualquer sistema social constituído de elementos distintos, e pode ser vista como um fator importante no aprimoramento de seu funcionamento.
Na presença de disparidades que dêem origem a conflitos, o autor afirma que são necessários métodos que os resolvam.
Para que isto possa ser realizado, os agentes devem possuir algum critério comum segundo o qual eles concordem.
Um método simples diversas vezes adotado é o estabelecimento de um controlador central com autoridade para realizar as decisões necessárias.
Este procedimento não se beneficia de muitos fatores relacionados à distribuição, mas possui a vantagem de ser extremamente rápido, adequado para sistemas de tempo real.
Em os casos de SMA onde conflitos são resolvidos através de negociações entre seus indivíduos, o tempo empreendido pode ser razoavelmente longo.
De modo geral, considerando que existe alguma base comum para a resolução dos conflitos, os métodos empregados incluem aqueles baseados em estratégias de resolução de conflito pré-convencionadas, tais como prioridades já estabelecidas, ou procedimentos de medição.
Para resolver problemas e subproblemas, conforme Giraffa, os agentes geram planos, estáticos ou dinâmicos.
Os planos guiam as atividades e as ações que devem ser realizadas por os agentes, as quais podem ser seqüenciais, idênticas ou simultâneas.
Muitos agentes podem engajar- se em atividades separadas, porém integradas por um determinado período, devendo para isto interagir mutuamente a fim de realizarem ações conjuntas, competir por recursos, ou ainda, dividir recursos.
Interação e comunicação propiciam a um conjunto de agentes inteligentes combinarem seus esforços na busca de solução para problemas distribuídos.
Interações são inerentemente dependentes das ações de coordenação de pelo menos dois agentes.
A comunicação pode ser feita através de um protocolo binário, que envolve um único remetente e um único destinatário, ou de um protocolo n-ário, que envolve um único remetente e vários destinatários (por exemplo, multicast4 e broadcast5), sendo que nos dois casos o protocolo é especificado por uma estrutura de dados contendo elementos básicos, como remetente;
Destinatários; Linguagem;
Funções de codificação;
E ações a serem tomadas por o receptor.
Segundo Moulin e Chaib-Draa, a interação entre agentes pode ocorrer através de ações lingüísticas explícitas (comunicação) ou ações não lingüísticas (em função de a modificação do mundo em o qual eles estejam atuando).
Para poderem interagir, agentes de diferentes capacidades devem comunicar- se mutuamente.
A comunicação pode se dar em diferentes níveis.
Para interagirem, agentes devem estar habilitados a participar num diálogo, seja de forma ativa, passiva ou ambas.
Algumas vezes um conhecimento a ser usado não-localmente deve ser representado e reinterpretado de formas diferentes, gerando a necessidade de protocolos de comunicação entre agentes.
Ainda segundo o autor, duas são as principais estratégias de suporte à comunicação num SMA:
Troca de mensagens diretamente entre os Multicast -- envia apenas um pacote a todos os agentes que foram selecionados como sendo de interesse, que o reconhecem e lêem.
Broadcast -- envia apenas um pacote, todos os agentes o reconhecem e lêem.
Agentes (problemas:
Custo e volume de comunicações, complexidade na implementação) e utilização de blackboard6.
De acordo com Bond e Gasser, os aspectos fundamentais a serem considerados para a interação entre agentes são:
Um grupo de agentes está organizado se existir algum tipo de conexão entre os mesmos e se a execução combinada de atividades entre estes agentes possibilitar a obtenção de melhores resultados, se comparados a atuações não conjugadas.
Os autores Shmeil e Oliveira examinam o conceito de organização como uma entidade social.
Esta perspectiva foi utilizada quando de a construção do sistema computacional batizado como Artor (Artificial ORganizations), o qual é baseado no paradigma de IAD-SMA e Aprendizagem Simbólica, e cujo objetivo consiste em criar, manter e fornecer um ambiente adequado para simulação de organizações e suas interações.
Consideram os autores que uma organização pode ser caracterizada por suas interações internas e externas.
Estas interações podem ocorrer de modo passivo (através da observação) ou ativo (através do envio e recebimento de Blackboard -- no contexto, blackboard é um repositório em o qual agentes escrevem mensagens, armazenam resultados parciais e obtêm informações.
Normalmente é particionado em vários níveis de abstração, de acordo com o problema em questão.
I) uma estrutura física (em a qual estão localizados os seus recursos humanos e materiais);
Uma organização precisa ser gerenciada para tornar- se operacional.
Para tanto, são necessárias as seguintes ações:
I) planejamento;
Além disso, é fundamental que uma organização possua conhecimento sobre o mundo externo, no que tange aos seus fatos e modelos conceituais.
Uma organização garante a sua sobrevivência a partir de sua capacidade de aprendizado e de ajuste às características e mudanças no mundo externo.
Em a visão definida a partir de o ponto de vista de agentes, Moulin e Chaib-Draa entendem que uma organização pode ser vista como um conjunto de agentes que possuem compromissos mútuos e globais, compartilham crenças comuns e passam a ter intenções conjuntas quando atuam juntos no sentido de atingir um mesmo objetivo.
Ressaltam os autores que um agente possui suas próprias crenças, intenções e compromissos, e que estas individualidades devem caminhar no sentido de permitir cooperação entre estes agentes, de modo a possibilitar a existência de uma organização de fato.
Um importante aspecto associado à noção de organização é o conceito de estrutura.
Segundo Gasser apud, estrutura de um ambiente multiagente referese ao modelo de informações e de relações de controle existentes entre os agentes.
A partir de a estrutura, pode- se identificar as responsabilidades atribuídas a cada agente, tendo em vista o seu papel no contexto do sistema e, conseqüentemente, mapear a atuação do grupo de agentes como um todo, contribuindo para o processo de coordenação.
Para Moulin e Chaib-Draa, estrutura é o padrão de relações de informação e controle entre agentes, bem como a distribuição das habilidades entre eles.
Assim, a estrutura fornece uma visualização de como os problemas são resolvidos por o grupo e o papel que cada agente desempenha dentro de esta estrutura, ou seja, define os papéis e os relacionamentos para atender as condições de cobertura ­ qualquer habilidade necessária para a resolução do problema deve estar inserida no rol de habilidades de ao menos um agente;
Conectividade ­ agentes devem interagir de maneira a permitir que suas habilidades sejam integradas e desempenhadas no sentido de contribuírem para uma solução global;
Potencialidade ­ cobertura e conectividade devem ser atingíveis dentro de as limitações computacionais e das limitações de comunicação.
De esta maneira, cada agente desempenha um ou mais papéis específicos no sistema.
A definição de papéis pode ser consultada no item 4.2.2.1 Classe de Agente.
Um SMA pressupõe coordenação num conjunto existente de agentes autônomos e inteligentes.
Fundamentalmente, coordenação está envolvida na busca por uma funcionalidade neste sistema que permita que estes agentes possam coordenar seus conhecimentos, objetivos, habilidades e planos individuais de uma forma conjunta, em favor de a execução de uma ação ou da resolução de algum problema.
A maneira mais fácil de garantir um comportamento coerente dentro de um SMA é implantar um agente que tenha uma perspectiva mais ampla do sistema, atuando como um Coordenador que, reunindo informações sobre toda a sociedade, seja responsável por criar planos e atribuir tarefas aos membros desta sociedade, sendo assim, utiliza- se nos modelos deste trabalho a figura do coordenador.
Os principais requisitos para a coordenação são:
Comunicação entre os agentes;
Reconhecimento das interações potenciais entre planos;
E Negociação entre os agentes.
É possível descrever sistemas de coordenação a partir de o qual hierarquias se destacam utilizando os processos de coordenação:
Ajuste mútuo ­ forma mais simples de coordenação, pressupondo dois ou mais agentes que concordam em compartilhar recursos para atingir algum objetivo comum;
Supervisão direta ­ prevê que uma relação já tenha sido estabelecida entre dois ou mais agentes em a qual um agente mantém algum controle sobre outros;
Padronização ­ estabelece uma relação entre dois ou mais agentes em a qual um agente mantém o controle sobre os outros estabelecendo procedimentos padronizados serem seguidos por seus supervisionados em determinadas situações.
A hierarquia é baseada no processo de supervisão direta, este sistema aglutina agentes em pequenos grupos coordenados por um supervisor, dispostos de forma hierárquica, onde um supervisionado pertencente a um grupo pode atuar como supervisor de outro.
Para Moulin e Chaib-Draa, a coordenação das ações de agentes é objeto de preocupação da solução de problemas distribuídos e de um SMA.
Em sociedade multiagentes, cabe aos agentes raciocinarem sobre o processo de coordenação entre eles, pois sem a coordenação, os benefícios da resolução descentralizada de problemas desapareceriam e os agentes se transformariam numa coleção de agentes individuais com uma visão parcial e imprecisa do seu ambiente.
Ainda conforme os autores, a coordenação pode ser definida como o processo por o qual um agente raciocina sobre as suas ações e sobre as ações dos outros agentes (chamada antecipação).
Isto é realizado tentando avaliar os atos de comunicação de uma maneira coerente.
Para Durfee, existem três principais razões por as quais as ações de vários agentes necessitam ser coordenadas:
Sobre esta última razão, deve- se relembrar que diferentes agentes podem ter diferentes recursos, o que é necessário na solução de problemas complexos.
Os agentes podem também ter pontos de vista ou informações sobre um problema variados, o que justifica que eles trabalhem juntos e coordenadamente.
Planejamento divide- se em duas abordagens, planejamento multiagente centralizado (executado antes da execução das ações) e planejamento multiagente distribuído (cada agente elabora seus planos individuais e troca informações com outros agentes visando a identificação e resolução de eventuais conflitos).
A pesquisa em planejamento na área da Ia tem se concentrado em como definir seqüência de ações, que são executadas correta e ordenadamente, que levem o mundo a um estado desejado (tal estado estaria relacionado a objetivos pré-definidos).
O autor considera que planejamento é um componente crucial para um comportamento coordenado.
Algumas formas de coordenação ocorrem como uma reação à situação corrente, tal como um desvio para evitar uma colisão.
Porém, a maioria das situações enfrentadas por os agentes requerem o estabelecimento de planos, antecipando as ações a serem executadas para que sejam atingidos seus objetivos.
Considerando este segundo caso, o sucesso do processo de coordenação está ligado à capacidade de antecipar as ações com que um agente afeta o mundo, e se o estado resultante do mundo estará de acordo com os seus objetivos.
A partir de esta projeção, torna- se possível a adequação e correção dos planos (replanejamento) de cada agente, garantindo o alcance de seus objetivos.
Este capítulo abordou os aspectos fundamentais para o desenvolvimento de SMAs através de suas propriedades, embasando os conceitos utilizados na extensão dos diagramas aqui propostos.
O capítulo seguinte aborda os trabalhos de vários autores que apresentam propostas a níveis de técnicas e métodos para a modelagem de um SMA.
Este capítulo provê uma visão geral sobre as técnicas de desenvolvimento de SMA.
Para isto, serão apresentados trabalhos que abordam metodologias e técnicas, examinando com maior ênfase o processo de modelagem em nível macro em direção a a elaboração do modelo conceitual do sistema.
Em a seqüência serão examinados cinco trabalhos envolvendo técnicas para o desenvolvimento de um SMA que servirão de referência para a elaboração da proposta desta dissertação.
Baseados nos resultados destes trabalhos, nas propriedades requeridas para o desenvolvimento de SMAs (visto no item 2.3 Aspectos Fundamentais para o desenvolvimento de um SMA), ao final deste capítulo é apresentada uma análise envolvendo os requisitos a serem considerados para a proposição de técnicas e modelos a serem utilizados na modelagem de SMAs.
A primeira abordagem estudada foi a concebida para a modelagem de um SMA chamado M-DRAP (Multiagent Dynamic Resource Allocation Planning -- Alocação Dinâmica de Recursos de Produção baseada em Sistemas Multiagentes).
Este SMA foi proposto por os autores, tendo como pressuposto descentralizar as decisões no processo de alocação de recursos, propiciando decisões autônomas das entidades envolvidas.
Em este sentido, foi estabelecida uma estratégia de planejamento distribuída permitindo a cada entidade envolvida desenvolver o seu planejamento local, considerando suas restrições, cujo resultado atenda as demandas do sistema produtivo.
A especificação do M-DRAP redundou na definição de um conjunto lógico de atividades e modelos para o desenvolvimento de um SMA através de um processo evolutivo.
Segundo os autores, esta abordagem foi definida devido a a necessidade de ter- se um instrumento capaz de direcionar e facilitar o processo de modelagem de forma consistente, integrada e incremental do sistema, considerando as características particulares do paradigma multiagentes.
É importante considerar que esta proposta foi concebida para ser aplicada ao processo de modelagem de um SMA para o domínio das organizações empresariais.
Sendo assim, tratase de uma proposta restrita à modelagem de sistemas com características inerentes a este domínio de aplicação, requerendo melhor avaliação para verificar a sua aplicabilidade em domínios com características distintas dos modelos empresariais.
Os autores apresentam uma evolução do trabalho original em.
As atividades componentes da abordagem são:
Tem por objetivo identificar e especificar requisitos a serem satisfeitos por o sistema do ponto de vista do domínio da aplicação.
Trata- se de uma atividade de aprendizagem, em a qual pretende-se examinar e obter conhecimento sobre o domínio do problema, determinando suas características, restrições e resultados esperados.
O passo seguinte envolve a identificação e caracterização dos agentes capazes de executarem a especificação de requisitos, constituindo- se assim a sociedade de agentes.
O processo de identificação e caracterização dos agentes componentes da sociedade pode ser facilitado através da utilização de um modelo de referência construído com base no paradigma OO que represente a realidade do domínio em o qual está inserido o problema, e a partir de o qual possam ser identificados e derivados os agentes.
Isto justifica- se em função de a semelhança existente entre agentes e objetos, pois apresentam características comuns.
Semelhança esta mapeada em Shoham com a linguagem de programação denominada Programação Orientada a Agentes (Poa) e em Amandi, que define uma arquitetura chamada Brainstorm (permite que os objetos tornem- se agentes associandolhes um meta-nível com capacidades de agente).
A idéia central envolve a identificação das classes de objetos candidatas a tornarem- se classes de agentes, desde que demonstrem a capacidade de participar na implementação da solução determinada com a utilização do paradigma multiagentes.
Esta atividade tem por objetivo identificar as relações de interação existentes entre os agentes identificados na atividade anterior.
O modelo da sociedade de agentes, assim convencionado, é inspirado nos diagramas de objetos propostos em e.
Em este modelo, cada retângulo representa uma classe de agentes e os arcos direcionados representam a existência de comunicação entre os mesmos através da troca de mensagens, caracterizando suas interações.
A base de conhecimento de cada agente é composta por duas partes: --
herdadas: Compreende os conhecimentos herdados da classe objeto de a qual se originou o modelo de referência, relevantes para o agente; --
específicas: Compreende o novo conhecimento a ser incorporado por a classe de agentes de forma a habilitar- lo para executar suas atribuições.
O modelo da sociedade de agentes, que identifica os agentes que compõem a sociedade e seus relacionamentos, representa o nível macro do SMA que envolve o Diagrama da Sociedade e o Modelo de Funções.
As mensagens trocadas entre agentes são representadas através do Diagrama de Interação que exibe o modelo de interação (extensão do modelo de interação da UML):
I) Diagrama da Sociedade de Agentes De acordo com os autores, o Diagrama da Sociedade de agentes foi inspirado no Diagrama de Classe da UML, descrito por Booch e outros, representando as classes de agentes e seus canais de comunicação, definindo um relacionamento hierárquico.
O relacionamento hierárquico caracteriza um possível relacionamento de autoridade entre os agentes.
Setas conectam as mensagens trocadas entre os agentes que as enviam e recebem, como mostrado na Figura 2 (extensão veja item 4.2.2 Diagrama da Sociedade).
Modelo O modelo de funções define, para cada agente, seus papéis e base de conhecimento.
O papel do agente estabelece atribuições e restrições do agente na sociedade, que devem ser observadas para executar essas atribuições.
As atribuições representam todas as funções que o agente deve ser capaz de desempenhar na sociedade, permitindo a contribuição para a realização dos seus objetivos e resultados.
Cada atribuição de agente é executada através das operações de agentes, como pode ser visto na Tabela 1, utilizando como exemplo o agente de entidade funcional AEF do sistema M-DRAP.
Agente: AEF Papéis de atribuições Restrições Elaborar e apresentar uma licitação ­ individual ou em É necessário considerar o deadline8 do conjunto com a coalizão7 de agente ­ para atender um anúncio;
Assumir um compromisso baseado em contratos outro compromisso assumido antes.
Tratar eventos de perturbações que afetam seus compromissos.
O modelo de interação permite representar as mensagens trocadas entre agentes.
Para cada classe de agente, conforme os autores, deve ser desenvolvido um modelo de interação composto por um ou mais Diagramas de Interação de agentes representando o seu comportamento de acordo com suas atribuições na sociedade multiagente.
A Figura 3 e a Figura 4 mostram o Diagrama de Interação de agentes para AEF.
A linha horizontal representa os agentes e a vertical o tempo.
Cada retângulo possui o nome do agente, quantidade de agentes envolvidos na interação, nome da coalizão e o papel do agente.
Em um SMA, os agentes representam diferentes papéis de acordo com as circunstâncias envolvidas na interação com outros agentes.
Às vezes, os agentes podem formar coalizões para executar a mesma tarefa juntos.
Coalizão -- união de vários agentes para executar uma determinada tarefa no mesmo intervalo de tempo Deadline -- tempo limite para execução de uma função (não será traduzido ao longo de o documento por já ser uma palavra de uso comum).
Quando especifica- se o modelo dinâmico de um sistema OO, para cada evento recebido de um objeto existe certamente uma reação (definida por uma operação que tem que ser executada) do objeto receptor.
Isto significa que o objeto que enviou invoca uma operação específica no receptor.
Um agente tem a capacidade de tomar decisões e autonomia para decidir se executa ou não um pedido de um outro agente de acordo com seus planos locais e objetivos.
Um agente não sabe quais são as operações internas de outros agentes, sendo assim, essas operações são ditas privadas.
O modelo de uma sociedade multiagente somente representa um canal de comunicação requisitado para trocar mensagens que permitam a interação entre os agentes.
Esta atividade envolve a definição da arquitetura e modelagem de cada agente componente da sociedade.
Os modelos utilizados para a modelagem de cada classe de agentes do M-DRAP são Elaboração dos Diagramas de Interação Seqüencial, Desenvolvimento do modelo evento-resposta de cada agente e Arquitetura interna do agente.
Porém, a modelagem dos agentes não faz parte do escopo deste trabalho.
A metodologia Gaia foi desenvolvida para análise e projeto de sistemas baseados em agentes, por eles serem flexíveis, terem autonomia em resolver problemas, possuírem interação e por a estrutura organizacional de seu sistema.
A metodologia para análise e projeto orientado a agentes, também chamada Gaia, é em geral, aplicável a SMA, dividida em sociedade (conhecida como macro-level) e agente (conhecido como micro-level).
A metodologia baseia- se na visão de um sistema como uma organização computacional que consiste em vários papéis interagindo.
Os autores descrevem uma metodologia que foi especificamente construída para a análise e projeto de sistema baseado em agentes.
Eles acreditam que a metodologia Gaia é apropriada para sistemas como ADEPT e ARCHON que possuem as seguintes características Cada agente faz uso de um recurso computacional (imagine cada agente com os recursos de um processo UNIX);
Obtenção de um sistema que maximize algumas medidas globais, mas que deva ser bem substituído do ponto de vista do componente de sistema.
A metodologia Gaia não foi desenvolvida para sistemas com a possibilidade de conflitos;
Por agentes serem heterogêneos, eles podem ser implementados utilizando diferentes linguagens de programação, técnicas e arquiteturas;
A estrutura organizacional do sistema é estática, onde o relacionamento entre agentes não muda em tempo de execução, assim como a habilidade dos agentes e os serviços que eles provêm;
O sistema como um todo contém um pequeno número de diferentes tipos de agentes A intenção dos autores foi a de permitir que o analista passasse sistematicamente da especificação de requisitos para o projeto, e a partir de isso para a fase de implementação.
Os principais conceitos da metodologia Gaia podem ser divididos em duas categorias:
Abstrato e concreto.
As abstratas são identificadas durante a análise representando os conceitos do sistema.
As concretas, em contraste, são definidas dentro de o processo de projeto.
Veja o quadro 1 comparativo entre essas duas categorias, adaptado de.
Conceitos Abstratos Papéis Permissões Responsabilidades Protocolos Atividades Propriedade Liveness Propriedade Segurança Conceitos Concretos Tipos de Agentes Serviços Relações Quadro 1 ­ Conceitos Abstratos e Concretos da Metodologia GaiaQiOLVH Para Wooldridge e outros, o objetivo do estágio de análise é desenvolver um entendimento do sistema e sua estrutura (sem referência a nenhum detalhe de implementação), chamado de Organização de Sistema, que é vista como uma coleção de papéis, que se relacionam com outros, e que fazem parte de padrões sistemáticos e institucionalizados de interação com outros papéis (veja Figura 5, extraído de).&amp;&amp;&amp;
A categoria mais abstrata, segundo o conceito de hierarquia dos autores, é o sistema.
Embora o termo &quot;sistema «seja usado de maneira padrão, ele também tem um significado relacionado quando fala- se em sistema baseado em agente, significando &quot;organização «ou &quot;sociedade».
Pensa- se num sistema baseado em agente como uma sociedade artificial ou organizacional.
As responsabilidades são divididas em dois tipos:
Propriedade liveness (a palavra no contexto garante que o agente se mantém atuante no sistema, garantindo que sempre boas intenções vão ocorrer) e a propriedade de segurança, invariante (um estado aceitável de negócios é mantido por todos os estados de execução).
Exemplo: Sempre assegurar que a temperatura do reator permanece no alcance 0-100.
Conforme os autores, para perceberem responsabilidades, um papel é geralmente associado a um conjunto de permissões.
Permissões são os direitos associados aos papéis.
A permissão de um papel identifica recursos que são avaliados naquele papel para realizar suas responsabilidades.
Em o tipo de sistema que os autores têm modelado, permissões tendem a ser recursos de informações.
Por exemplo, um papel tem que ter associada com ele a habilidade de ler um item particular de informações, ou modificar outro pedaço de informação.
Um papel pode também ter a habilidade de gerar informações.
Atividades, no contexto, são computações associadas ao papel que podem ser cumpridas por agentes sem a interação com os demais agentes.
Para Shoham, atividades são ações privadas.
Para Wooldridge e outros, um papel é identificado com alguns protocolos que definem os modos com que podem interagir com outros papéis.
Modelo de Papéis -- identifica os papéis no sistema caracterizados por dois tipos de atributos:
Permissões/ Direitos associados a papéis e Responsabilidades do Papel.
I) Permissões/ Direitos associados com papéis Um papel tem associadas a ele certas permissões, relacionadas ao tipo e a quantidade de recursos que podem ser explorados no cumprimento do papel (permissões de papel).
Essas permissões possuem dois aspectos:
1) Identificar recursos que podem ser usados no cumprimento do papel (dizem o que pode ser gasto enquanto cumpre o papel);
2) Verificar recursos limites dentro de o qual o papel executor deve operar (dizem o que não pode ser gasto enquanto cumpre o papel).
Em Gaia, os autores pensam nos recursos como relacionamentos apenas de informação e conhecimento que o agente possui, mas se restringem à recursos de informação.
Em a tentativa de se cumprir um papel, um agente poderá acessar certas informações, pois alguns papéis geram informações;
Outros agentes acessam parte das informações, e não podem modificar- la;
Enquanto outros a modificam.
O papel é criado para executar certa funcionalidade, representada por um atributo conhecido como responsabilidade do papel que é dividido em duas categorias:
1) Liveness Responsibilities -- Responsabilidade que informa que algo bom acontece.
Em Gaia, esta propriedade é especificada através da expressão liveness, que define o ciclo de vida do papel e são compostos por atividades (parecido com métodos em OO ou procedimentos da linguagem pascal) e protocolos (atividades que requerem interações com outros agentes);
2) Safety Responsibilities -- Possui a mesma característica de propriedade de segurança do 6 LVWHPD FRPR XP D6RFLHGDGH, mencionado anteriormente neste mesmo item.
Análise e projeto pode ser pensado como um processo para desenvolver modelos detalhados do sistema a ser construído.
O modelo usado nesta abordagem por Wooldridge e outros está representado na Figura 6.
Modelo de Interação ­ captura e representa a fase de análise.
Este modelo representa os links entre os papéis e consiste apenas de Conjunto de definição de protocolos ­ um para cada tipo de interação entre papéis, consistindo dos atributos:
Propósito: Breve descrição da natureza da interação;
Iniciador: Papéis responsáveis para iniciar a interação;
Respondente: Papel com o qual o iniciador interage;
Entrada: Informação usada por o papel iniciador enquanto legaliza o protocolo;
Saída: Informação fornecida por o protocolo respondente durante o curso de interação;
Processamento: Breve descrição de qualquer processo de execução do protocolo iniciador durante o curso de interação.
Para complementar os modelos de Papéis e de Interação do modelo organizacional de análise, os autores abordam o que eles chamam de Processo de Análise.
O estágio de análise é assim organizado:
I) Identificar os papéis do sistema que correspondem a indivíduos, departamentos de uma organização ou organizações em si;
Saída: Modelo de protótipo de papéis ii) Para cada papel, identificar e documentar protocolos associados que são padrões de interação que ocorrem no sistema entre os vários papéis;
Saída: Modelo de interação iii) Usar o modelo de protocolo como base para elaborar o modelo de papéis;
Saída: Um completo e elaborado Modelo de Papéis (documentando os papéis chave do sistema, suas permissões e responsabilidades, juntamente com os protocolos e atividades de a qual eles participam).
O objetivo do processo de projeto &quot;clássico «é transformar o modelo abstrato derivado durante a fase de análise em modelo com um nível baixo de abstração para que possam ser implementados, mas este não é o caso do projeto OA.
Em Gaia, o objetivo é transformar o modelo de análise em modelo de baixo nível de abstração com técnicas de projetos tradicionais (incluindo técnicas OO) que possam ser aplicadas de maneira a implementar o agente.
Ou seja, Gaia preocupa- se em como a sociedade de agentes coopera para atingir objetivos a nível de sistema, e o que cada agente individualmente precisa fazer.
Porém isto está fora de o escopo desta dissertação de mestrado.
O modelo Mas- CommonKADS estende CommonKADS para modelo de SMA, adicionando técnicas de metodologias de OO como OMT, OOSE e RDD.
A metodologia define os seguintes modelos: --
Modelo de agente (AM -- Agent Model) O modelo de agente especifica as características dos agentes:
Capacidade de raciocínio, habilidades, serviços, grupos e hierarquias de agentes em modelo de organização.
Desenvolve- se instâncias iniciais do modelo de agente para identificação e descrição dos agentes.
Os agentes podem ser identificados com as seguintes estratégias:
Análises dos atores dos casos de uso definidos na fase de conceitualização.
Os atores dos casos de uso delimitam o sistema de agentes externos.
Alguns papéis (atores) similares podem ser mapeados sobre um agente para simplificar a comunicação;
Análise de declaração do problema.
Pode ajudar a identificar alguns agentes.
Os agentes candidatos são sujeitos das sentenças:
Os objetos ativos.
As ações que acontecem nestes sujeitos tem de ser desenvolvidas por o agente como metas (com iniciativa) ou serviços (sob demanda);
Uso da heurística.
Os agentes podem ser identificados determinando sua distribuição:
Distribuição do conhecimento, distribuição geográfica, distribuição lógica ou distribuição organizacional;
Uma tarefa inicial e modelos de especialidade podem ajudar a identificar as funções necessárias e as capacidades de conhecimento exigidas, resultando na definição preliminar dos agentes.
A meta das tarefas será nomeada aos agentes;
Aplicação da técnica de casos de uso interna.
Esta técnica é baseada na técnica de metodologia orientada a objetos RDD e no cartão CRC (Class Responsibility Collaboration ­ Classe Responsabilidade Colaboração).
Pegando como entrada o caso de uso da fase de conceitualização e alguns agentes iniciais, pode- se pensar que cada agente &quot;usa «outros agentes, e pode usar esses agentes com diferentes papéis.
Quando um agente precisa usar um outro agente para uma função em particular (por exemplo, avaliar algo), procura- se tal agente na biblioteca de agente para reusar;
Aplicação do cartão CRC.
Um cartão CRC é preenchido por cada agente, descrevendo suas classes. --
Modelo de atividade (Tm -- Task Model) O modelo de atividade descreve a tarefa que o agente pode executar:
Objetivos, decomposições, ingredientes e métodos de resolução de problema.
O potencial que beneficia o desenvolvimento deste modelo são documentações de atividade de organização antes e depois da introdução do SMA.
Este documento serve para apoiar a manutenção e gerenciar as mudanças na organização, além de apoiar o projeto de taxa de viabilidade. --
Modelo de especialidade (Em -- Expertise Model) O modelo de especialidade descreve o conhecimento necessário para o agente alcançar seus objetivos, assim como a estrutura do relacionamento entre agentes (agente software e/ ou agente humano). --
Modelo de organização (OM -- Organisation Model) O modelo de organização descreve a organização em a qual o SMA irá ser introduzido e a organização social da sociedade de agentes.
CommonKADS define este modelo para modelar a organização em a qual o sistema baseado em conhecimento será introduzido.
O modelo é estendido do mesmo modo como o modelo de agente para modelar a organização de agentes.
Este modelo mostra o relacionamento estático ou estrutural entre os agentes, enquanto o modelo de coordenação mostra o relacionamento dinâmico.
A notação do gráfico deste modelo é baseada na notação do modelo objeto de OMT, acrescentando símbolos especiais para a distinção entre agentes e objetos. --
Modelo de coordenação (CoM -- Coordination Model) O modelo de coordenação descreve a conversação entre agentes:
Suas interações, protocolos e capacidades requeridas.
Este modelo tem dois marcos importantes:
Definição do canal de comunicação e construção do protótipo;
Análise da interação e determinação de interações complexas (com protocolos de coordenação). --
Modelo de comunicação (Cm -- Communication Model) O Modelo de Comunicação detalha a interação do agente software humano e os fatores humanos para o desenvolvimento da interface dos usuários. --
Modelo de projeto (DM -- Design Model) O modelo de projeto em SMA coleta os modelos previstos na fase de análise, consistindo de três submodelos:
1) projeto rede de agente que reflete os aspectos relevantes de infra-estrutura dos agentes;
2) projeto agente por dividir ou compor os agentes da análise, de acordo com o critério pragmático e seleção da arquitetura de agente;
3) projeto plataforma por permitir que a seleção de agente desenvolva uma plataforma para cada arquitetura de agente.
Segundo o autor, a aplicação da metodologia consiste no desenvolvimento dos modelos diferentes.
Cada modelo consiste em componentes (modelagem da entidade) e relacionamento entre os componentes.
Um modelo textual é definido para cada componente possibilitando sua descrição.
Muitas metodologias e técnicas para análise e projeto orientado a agente utilizam o conceito de papéis de agentes, como as metodologias Mas- Commom KADS e Gaia Segundo a autora, é relevante considerar a possibilidade de empregar em SMA as técnicas OO, por possuírem uma abordagem comum e difundida em engenharia de software.
Para a autora, modelos de papéis capturam a maneira com que os elementos interagem uns com os outros em colaboração.
Eles são úteis durante a conceitualização, análise e projeto.
Em Engenharia de Software OO, modelos de papéis têm emergido em resposta às seguintes necessidades:
Eles enfatizam como objetos interagem uns com outros;
Eles descrevem sistemas em termos de seus padrões de interações.
Com isto, eles provêem uma nova abstração que é ortogonal e complementa classes e objetos;
Eles podem ser instanciados, generalizados, especializados e agregados em combinações de modelos.
Isto promove reuso;
Eles podem ser dinâmicos, envolvendo seqüência, evolução e transferência de papéis.
Isto poderia ser de valor a modelos de mobilidade e adaptabilidade.
Vários aspectos precisam ser considerados em papéis de agentes, além de os aspectos representados em papéis de objetos:
Responsabilidades ­ objetivos, obrigações e interdições;
Especialidade ­ ontologia, inferência, conhecimento para resolução de problemas;
Coordenação e negociação ­ protocolos, resolução de conflitos, conhecimento sobre por que está relacionado com outros papéis, permissões;
Outros ­ recursos, aprendizado/ adaptabilidade.
Conforme a autora, os modelos de papéis são parecidos com os Diagramas de Colaboração de UML, mas são mais reusáveis e extensíveis.
Uma vez que se tenha um modelo de papéis básico, formam- se novos modelos.
Um modelo de papel deve ser um agregado dos outros.
Também um novo modelo de papéis pode derivar de um ou mais modelos básicos, refinando- os.
Em este caso, o papel derivado deve ser capaz de executar todos os papéis básico.
A pesquisa de Kendall indica que as técnicas de modelagem de papéis encontradas em Engenharia de Software OO oferecem uma promessa de abordagem para análise e projeto de agente.
A autora utiliza RRCs (Role Responsibility Cards -- Cartão de Responsabilidade de Papel) para documentar os modelos de papéis de agente.
Os modelos de Kendall são baseados em modelos de papéis OO. --
Modelos de papéis para análise de agente Qualquer aplicação de agente cercará muitos modelos de papéis.
Durante análise, modelos de papéis relevantes são identificados.
Pode- se usar um catálogo de modelos de papéis, que se assemelha a um conjunto de padrões ou uma linguagem padrão, e estão sendo usados em laboratórios Tecom britânicos. --
Projeto de agente com modelos de papéis Modelos de papéis também são úteis durante o projeto de sistemas de agentes.
Basicamente, os papéis que um dado agente deve executar devem ser identificados e compostos durante o projeto. --
Implementação de OO de modelos de papéis para sistemas de agentes Padrões de projetos devem ser utilizados para projetar e implementar sistemas de software.
Alguns padrões existem para endereçar aplicações onde objetos executam papéis.
Um plano baseado em padrões de objetos de papéis provê um projeto OO (notação UML) para um agente que participa do ciclo.
O projeto apenas endereça o modelo de papéis;
Para representar agentes, os autores utilizam uma linguagem extensão de UML chamada Agente UML (AUML ­ Agent Unified Modeling Language).
A AUML sintetiza o avanço das metodologias de software baseado em agentes com a crescente aceitação de UML para desenvolvimento de software OO.
Para permitir a aceitação da tecnologia AUML, os autores apresentam agentes como uma extensão de objetos ativos, exibindo autonomia dinâmica (habilidade de iniciar ação sem invocação externa) e autonomia determinística (habilidade de recusar ou modificar um pedido externo).
Para modelar agentes, eles utilizam o Diagrama de Seqüência (extensão do Diagrama de Seqüência de UML) que descreve a transação inter-agent (transação entre agentes) necessária para implementar o protocolo e Diagrama de Atividade, e statechart que descreve a transação intra-agent (transação interna do agente).
A Figura 7 mostra um formato básico para comunicação entre agentes.
Em a Figura 7, a sintaxe nome do agente/ papel:
Classe, apresentada no retângulo é parte da UML, sendo que em UML indica o nome de um objeto ao invés de o nome de um agente.
A Figura 8 mostra a extensão da UML onde rotulam- se as setas com um ato de comunicação (AC -- communication act) do agente.
Ao invés de se utilizar o estilo de mensagem de OO, onde nas setas rotula- se o nome da operação com seus respectivos parâmetros, usa- se AC para trocar mensagens entre agentes.
A Figura 8 mostra três modos de expressar múltiplas threads.
A Figura 8 (a) indica que todas as threads AC-1 até AC-n* serão enviadas concorrentemente, indicando uma comunicação e.
A Figura 8 (b) inclui uma caixa de decisão indicando que esta caixa decidirá quantos ACs serão enviados (zero ou mais).
Se mais de um AC for enviado, a comunicação é concorrente, isto é, indica ou inclusivo.
A Figura 8 (c) indica ou exclusivo, indicando que apenas um AC será enviado.
A Figura 9 (a) e a Figura 9 (b) mostram duas maneiras de expressar threads concorrentes enviadas do agente-1 para o agente-2.
As ativações (ativação, segundo Booch e outros, é demonstrada através de um retângulo cujo topo é alinhado com o início da ação e cuja base representa o seu término) são as barras que indicam que o agente receptor está processando várias threads de comunicação concorrente.
A Figura 9 (a) mostra barras de ativações paralelas e a Figura 9 (b) barras de ativações que aparecem do topo a base de cada processo.
Sendo assim, alguns fatos nessas duas variações foram notados por os autores:
O significado da semântica das duas threads são equivalentes;
A escolha é baseada na facilidade da aparência visual;
Cada barra de ativação pode indicar que o agente está usando um papel diferente ou que ele está empregando um processo de thread diferente para apoiar o AC;
Essas figuras indicam que um único agente processa concorrentemente os múltiplos ACs.
Entretanto, cada AC concorrente pode ter sido enviado para diferentes agentes, por exemplo, o AC-1 para o agente-2, AC-2 para o agente-3, e assim por diante.
Este protocolo de comportamento já é suportado por a UML.
A Figura 10 mostra através de um Diagrama de Colaboração uma outra maneira para representar interações entre agentes com múltiplos papéis.
Note que a cada mudança de papel é mostrada na associação pontilhada a mensagem papel\&gt;.
Os agentes mostrados no Diagrama de Colaboração podem ser colocados em qualquer lugar no diagrama, enquanto que nos Diagramas de Sequência (Figura 7), os agentes são dispostos numa linha horizontal no topo do diagrama.
Em este item são apresentados os requisitos10 a serem observados para a elaboração do modelo de análise, bem como as atividades necessárias para a condução do processo de análise do nível macro de um SMA.
Conforme examinado anteriormente, o resultado desta etapa envolve a elaboração da especificação de requisitos para o sistema.
Modelo conceitual não é uma descrição de componentes de software;
Ele representa conceitos no domínio do problema.
Requisitos -- descrição das necessidades ou dos desejos para a condução do processo de análise do nível macro de um SMA, cujo objetivo básico é identificar e documentar o que é realmente necessário, numa forma que comunica claramente essa informação ao cliente e aos membros da equipe de desenvolvimento (adaptado de Larman).
Para a identificação destes requisitos, foram utilizados os trabalhos destacados no item requisitos capazes de permitir a proposição de diagramas a serem aplicados para a elaboração dos artefatos de software componentes do modelo de análise de um SMA.
De forma a facilitar o exame e definição destes requisitos, para cada uma das propriedades de um SMA são apresentados os aspectos a serem considerados para o seu atendimento, no contexto do processo de modelagem do sistema.
Em o capítulo 4 ­ O Modelo de Análise para um SMA são apresentados os diagramas definidos para o atendimento destes requisitos na modelagem do sistema e identificadas as atividades para a condução deste processo.
Para modelar a cooperação entre agentes, é preciso representar a seqüência de interações e ações destes agentes nos cenários envolvidos, as restrições existentes nestas interações e a especificação das mensagens trocadas.
Baseado no conceito de Booch, adaptou- se o conceito de cenário que representa uma seqüência específica de ações que ilustram o comportamento dos agentes durante a execução de suas interações.
A representação dos cenários de cooperação entre os agentes envolve o atendimento as funcionalidades que o SMA deve apresentar, visando atender aos objetivos da sociedade.
Sendo assim, faz- se necessário uma prévia identificação e representação dos serviços a serem prestados por a sociedade de agentes, resultando nos requisitos funcionais do sistema.
Para modelar negociação entre agentes, é preciso representar a seqüência de interações e ações destes agentes nos cenários envolvidos, as restrições existentes nestas interações e a especificação das mensagens trocadas.
