Este trabalho de mestrado apresenta uma proposta de técnica para programar agentes BDI.
Quando Opta- se por utilizar agentes cognitivos com arquitetura BDI, encontram- se muitas dificuldades em transferir os modelos formais para ambientes computáveis.
Em o sentido de superar estas dificuldades e limitações, muitos esforços têm sido desenvolvidos para reduzir esta lacuna.
O paradigma de programação BDI é diferente dos demais.
Ele possui características especiais, como a necessidade em Utilizar descrições declarativas e um nível de abstração mais alto.
Em este sentido buscou- se denir Uma técnica de programação que auxilie projetistas/ programadores a modelar e a implementar este tipo de agentes (BDI).
O resultado deste trabalho pode ser melhor entendido através do editor E-BDI (instância física da técnica proposta).
O editor, vinculado à ferramenta X-BDI, permite ao programador, organizar o conjunto de estados mentais e suas inter-relações.
Uma notação (diagramas) foi definida para ajudar no processo de programação destes agentes.
Em este volume é apresentado, também, alguns aspectos teóricos do paradigma BDI, o detalhamento da técnica proposta, a descrição do processo de desenvolvimento do editor, conclusões, limitações e trabalhos futuros.
Palavras-chave: Agentes Cognitivos, Estados Mentais, BDI, Programação Orientada Agentes.
O interesse por o desenvolvimento de sistemas que incorporam técnicas de modelagem e implementação baseadas na abordagem orientada a agentes têm crescido, nos últimos anos, nas mais diversas Aplicações e áreas.
A abordagem orientada a agentes permite um nível de abstração que não é usual nas metodologias tradicionais de modelagem e implementação, isto é, torna explícitas, no sistema, certas funcionalidades que antes cavam apenas subentendidas.
A medida em que as aplicações tornam- se maiores e mais complexas, é necessário que se utilize níveis de abstração que permitam representar os problemas e suas soluções da forma mais natural possível.
Os agentes, como entidades autônomas com capacidade de planejar suas ações, reagir e interagir entre si em busca de soluções para problemas, parecem fornecer um passo em direção a esse nível mais alto de abstração.
Porém, assim como acontece com a modelagem dos sistemas, também A modelagem dos agentes requer níveis de abstração adequados.
O que caracteriza o agente, considerando uma visão mais geral, são as interações que ele realiza com o ambiente e os processos internos que possibilitam a realização destas interações.
A especicação de quais e como são estes processos internos é chamada de arquitetura do agente.
Diferentes Arquiteturas têm sido propostas com o objetivo de caracterizar os agentes com um particular nível de inteligência e de autonomia.
As arquiteturas podem ser classicadas, de acordo com o mecanismo Utilizado por o agente para a seleção das ações, em:
Não-deliberativas, deliberativas e híbridas.
Segundo, para denir a arquitetura interna do agente, é necessário saber, inicialmente, qual o tipo de tarefa que o agente irá realizar e qual o seu papel na sociedade.
Uma vez considerado isto, o agente pode ser classicado como:
Reativo: (ou não deliberativo):
A escolha da ação (respostestá diretamente situada na Ocorrência de um conjunto de eventos (estímulos) que ele percebe no e do ambiente, captados por seus sensores ou por mensagens enviadas por outros agentes.
Cognitivo (deliberativo):
Possui um processo explícito para escolher a ação a ser realizada Esta ação pode ser escolhida, também, através de uma função de utilidade e realizada por meio de um plano e uma representação simbólica do ambiente.
Um agente cognitivo é um agente racional que possui alguma representação explícita de seu conhecimento e objetivos.
Um agente pode ser mais cognitivo do que outro, conforme o grau de racionalidade explícita de seu comportamento.
Arquiteturas de agentes cognitivos, segundo, podem ser classicadas em:
Arquiteturas funcionais:
Onde o agente é composto por módulos que representam cada uma das funcionalidades necessárias para sua operação.
O agente possui conhecimento, um conjunto de objetivos, capacidade de percepção, comunicação, decisão e raciocínio.
Arquiteturas baseadas em estados mentais adotam uma perspectiva de inspiração psi cológica para denir a estrutura dos agentes, que são entidades cujo estado é constituído de componentes mentais tais como crenças, desejos, capacidades, escolhas e compromissos.
Por esta razão, o estado de um agente é chamado de estado mental.
Pode ocorrer que uma arqui tetura baseada em estados mentais também contemple aspectos funcionais, e vice-versa, não sendo excludentes, e podendo ser complementares.
Conforme, as denições e propriedades que caracterizam a noção de agente têm por objetivo não meramente dividir o mundo entre entidades que são e que não são agentes, mas servirem de ferramentas para analisar sistemas, bem como especicar, projetar e implementar sistemas cujos elementos básicos sejam agentes.
As abordagens utilizadas para a modelagem de agentes são as mais diversas, e uma freqüentemente utilizada é a abordagem que considera agentes como sendo sistemas intencionais.
Sistemas intencionais são aqueles a que são atribuídos estados mentais (ou atitudes intencionais), usualmente atribuídos a seres humanos.
Assim, é possível descrever mecanismos de resolução de problemas dos agentes em termos de o que eles acreditam, dos planos que possuem ou constróem a m de satisfazer seus desejos e intenções, dos atributos que utilizam para determinar As opções que escolhem, e assim por diante.
Segundo Móra, na abordagem intencional, os estados mentais:
Possuem um forte apelo conceitual, como abstração, pois são bastante naturais para os proje tistas e analistas que utilizam a abordagem orientada a agentes;
Fornecem descrições sucintas para sistemas complexos, além de ajudar o projetista a entender e a explicar o comportamento desses sistemas;
Podem ser usados por os agentes para raciocinar sobre eles próprios e sobre outros agentes (re ciprocidade, segundo nomenclatura adotada por Dennet).
Dentro desse contexto de sistemas intencionais, é possível destacar as propriedades básicas desses Agentes:
Autonomia: A capacidade de operar sem intervenção humana e de controlar suas próprias ações e estados internos;
Habilidade social:
A capacidade de interagir com outros agentes, humanos ou não, através de algum tipo de linguagem de comunicação;
Reatividade: A habilidade de responder em tempo a estímulos recebidos do ambiente;
Pró-atividade: A capacidade de, além de responder a estímulos do ambiente, exibir um com portamento orientado a objetivos.
Ou seja, capacidade de prever como atingir ou evitar um determinado estado ou objetivo;
Adaptabilidade: A capacidade de se adaptar a modicações no ambiente, alterando planos previamente concebidos ou aprendendo através da interação com ambiente.
Em a presente dissertação, é apresentada uma proposta de técnica de programação orientada a agentes BDI, cuja instância física é o editor denominado de E-BDI (Editor BDI).
Este editor de estados mentais está associado à ferramenta X-BDI (eXecutable BDI).
A técnica proposta permite A o programador organizar as relações entre os estados mentais do agente, por meio de uma notação definida em forma de diagramas, facilitando, assim, a programação destes agentes via o editor.
O trabalho enfoca a sub-área de pesquisa que envolve agentes cognitivos modelados através de estados mentais, detendo- se nos agentes que utilizam os estados mentais crença, desejo e intenção, denominado na literatura de arquitetura BDI (Belief, Desire and Intention).
Este volume está dividido em 5 capítulos.
O capítulo 2 apresenta a estrutura do trabalho de pesquisa:
Motivação, questão de pesquisa e objetivos.
O capítulo 3 apresenta o referencial teórico -- contexto em o qual se insere a abordagem de estados mentais utilizados para modelagem de agentes.
Em o capítulo 4 é descrita a proposta deste trabalho.
O capítulo 5 apresenta as conclusões, limitações, trabalhos futuros e resultados parciais.
Este trabalho originou- se no convite feito por a orientadora para participar dos trabalhos de pesquisa do grupo JEIA (Jogos Educacionais e Inteligência Articial), no interesse pessoal do autor por a pesquisa envolvendo a tecnologia de agentes e na sua participação no grupo de Pesquisa em Sistemas Multiagentes, como bolsista.
Este grupo é integrante da linha de pesquisa em Inteligência Articial do Programa de Pós-graduação em Ciência da Computação (PPGCda Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS).
O grupo vem desenvolvendo pesquisas em Sistemas Multiagentes e, especialmente, em Sistemas Multiagentes Cognitivos, utilizando a abordagem de sistemas intencionais com arquitetura BDI.
Esse grupo possui uma ferramenta denominada X-BDI (eXecutable BDI), desenvolvida por Móra et al, que tem sido utilizada em diversos trabalhos.
O X-BDI é uma ferramenta em fase de consolidação, necessitando que uma série de renamentos e recursos sejam incorporados, a m de que sua utilização seja mais abrangente e acessível.
Para usar o X-BDI, não existe, até o momento, uma interface amigável, uma documentação organizada que auxilie o projetista A utilizar a ferramenta e uma técnica que ampare a programação BDI.
Dada a importância da utilização deste recurso nas pesquisas do grupo e a identicação da necessidade de denir- se uma técnica de programação orientada a agentes BDI, decidiu- se adotar este tema para desenvolver o presente trabalho de dissertação de mestrado.
Para projetar um SMA (Sistema Multiagente), existem algumas etapas a considerar:
Definição do modelo (arquiteturda sociedade, quanticação dos agentes, Definição dos papéis dos agentes que compõem a sociedade e a Definição do modelo (arquiteturdo agente.
A modelagem e a implementação de um agente não são tarefas triviais ou que se apoiem num modelo preestabelecido.
Cada Agente possui características básicas que o qualicam como tal e o diferem de simples objetos.
Uma das grandes dificuldades do projetista que utiliza a abordagem BDI para modelagem e implementação de agentes cognitivos é, justamente, a organização dos estados mentais e suas interrelações.
No caso de a ferramenta X-BDI, o projetista necessita apenas descrever o conjunto de crenças e desejos, sendo as intenções inferidas a partir de as informações fornecidas à ferramenta.
Porém, esta descrição necessita da organização do conjunto de crenças associado aos desejos e como isso está conectado com as intenções.
E, por conseguinte, que ações devem ser executadas por o agente.
Esta Organização pode ser muito facilitada se o projetista possuir uma técnica que o auxilie a organizar estes estados mentais e, com a utilização de um editor, possa escrever os estados mentais e visualizar As inter-relações através de diagramas gerados por as associações.
Tendo denido o escopo do trabalho e identicado o problema para ser objeto de estudo desta dissertação, formulou- se a seguinte questão de pesquisa:
Que características deve ter uma técnica de programação para auxiliar a implemen-tação de agentes BDI?
Hipótese 1: A técnica de programação deve permitir a visualização da organização dos estados mentais (crenças e desejos) e suas inter-relações;
Hipótese 2: A visualização deve permitir que o projetista perceba inconsistências na organização dos estados mentais antes da sua execução no X-BDI;
Hipótese 3: O uso de uma notação por meio de diagramas, é uma alternativa adequada para exibir Os estados mentais que fazem parte do programa BDI.
Hipótese 4: Desenvolver uma ferramenta para a diagramação dos estados mentais, associada à técnica proposta, facilita o seu uso e compreensão.
O objetivo deste trabalho consiste em denir o conjunto de diretivas para uma técnica de programação Orientada a agentes BDI, vinculada a um editor de estados mentais associado à ferramenta X-BDI.
Auxiliar no entendimento da abordagem BDI;
Contribuir para disseminar o uso da modelagem e programação de agentes BDI;
Organizar as informações referentes ao X-BDI, através da criação de uma documentação para Usuários;
Facilitar o uso do X-BDI e auxiliar na sua divulgação;
Organizar os estados mentais e as relações entre eles, através de passos a serem seguidos durante A implementação e de uma notação gráca;
Desenvolver um editor de estados mentais associado ao conjunto de diretivas da técnica de programação orientada a agentes BDI;
Contribuir para a pesquisa do Grupo de Inteligência Articial da PUCRS, no que se refere aos sistemas multiagentes cognitivos.
A utilização de estados mentais para modelagem de agentes cognitivos é chamada de abordagem mentalista.
Em esta visão mentalista, o que faz qualquer componente de hardware ou software ser Um agente é precisamente o fato de ele poder ser analisado e controlado em termos destes componentes mentais.
Assim, a questão do que é um agente ca substituída por a questão de quais entidades podem ser vistas como tendo um estado mental, pois os diferentes estados mentais desempenham papéis distintos no comportamento dos agentes.
A o denir o que é intencionalidade, Searle classica estados mentais em duas categorias:
Estados mentais de informação e estados mentais pró-ativos.
Conforme, estados mentais de informação são aqueles que representam as informações sobre o mundo onde o agente está inserido, Ou seja, são aqueles estados mentais que tendem a ser modicados a m de que seu conteúdo reita o estado do mundo, como por exemplo, crenças e conhecimento.
Estados mentais pró-ativos são aqueles que, de alguma forma, conduzem a ação do agente, ou seja, estão diretamente ligados ao processo de seleção, por parte de o agente, de um entre vários cursos de ação possíveis.
No caso de os estados mentais pró-ativos, o agente tende a modicar o mundo de forma que o mundo se adeqüe ao conteúdo dos estados mentais.
Desejos e intenções são exemplos de estados mentais pró-ativos.
Dentro de as arquiteturas baseadas em estados mentais, encontra- se a abordagem baseada nos estados mentais crença, desejo e intenção (Belief, Desire and Intention), denominada de arquitetura BDI.
As idéias básicas da abordagem BDI baseiam- se na descrição do processamento interno de um Agente utilizando um conjunto básico de estados mentais (crença, desejo e intenções) e na Definição de Uma arquitetura de controle através de a qual o agente seleciona racionalmente o curso de suas ações.
Algumas abordagens de arquitetura BDI agregam as noções de planos e objetivos, como por exemplo, Os trabalhos de Bratman et al.
Rao e George, Cohen e Levesque.
Segundo Wooldridge, o modelo BDI é particularmente interessante porque combina três componentes distintos:
Um componente losóco:
O modelo BDI é baseado na teoria de ação racional em humanos, desenvolvida por o lósofo Michael Bratman.
Um componente de arquitetura de software:
O modelo BDI de agência não exige uma implementação especíca.
O modelo pode ser entendido de muitas maneiras diferentes, e realmente Um número de diferentes implementações têm sido desenvolvidas.
Contudo, o fato de que o modelo BDI tem sido implementado com sucesso, é um ponto signicativo a seu favor.
Além disso, o modelo BDI tem sido usado para construir um número considerável de aplicações no mundo real, incluindo problemas como diagnósticos de falhas em viagens espaciais.
Um componente lógico:
O terceiro componente do modelo BDI é um grupo de lógicas.
Estas lógicas capturam os aspectos chave do modelo BDI como um conjunto de axiomas lógicos.
Existem muitas lógicas candidatas para a teoria formal de agência racional, mas lógicas BDI, em várias formas, têm provado ser, entre as mais utilizadas, largamente aceitas.
A lógica BDI foi desenvolvida por Anand Rao e Michael George, com o intuito de fornecer um resumo da semântica ideal para agentes BDI.
Desenvolvida no Australian Articial Intelligence Institute na década de 90, foi construída sobre o trabalho de pesquisadores tanto da Ciência de Computação Teórica como da Inteligência Articial.
Rao e George foram capazes de demonstrar como um tipo particular de lógica multimodal poderia ser usada para capturar os aspectos da teoria de Bratman.
A teoria de Bratman é a teoria do raciocínio prático, ou seja, o processo de raciocínio que todos nós experimentamos em nossas vidas diárias.
A teoria de Bratman concentra- se, em particular, na função que as intenções representam para raciocínio prático.
Em as próximas seções são apresentados os conceitos referentes aos estados mentais da tríade BDI, bem como a descrição de arquiteturas baseadas em estados mentais.
É apresentado, também, uma descrição de modelos formais, a sua importância e limitações no processo de implementação e, por m, são apresentadas ferramentas para a modelagem e implementação de agentes cognitivos baseados nos estados mentais da abordagem BDI.
Para os conceitos associados aos estados mentais de uma arquitetura BDI são apresentadas diferentes versões.
As diferentes abordagens foram selecionadas em função de o referencial teórico utilizado por o grupo de pesquisa em o qual este trabalho está inserido.
Segundo Bratman, crenças são as visões que o agente possui sobre o ambiente em que ele se encontra.
É o conhecimento do ambiente de forma explícita, podendo ser incompleto ou incorreto.
Para Corrêa, crença é um estado mental intencional fundamental para as interações dos Agentes, com noção idêntica a de conhecimento.
Para Shoham, crença é representado por Um operador modal B, como:
Conforme, crenças podem ser vistas como simples variáveis (como por exemplo, na linguagem Pascal), mas agentes modelados na arquitetura BDI representam crenças de forma simbólica (como por exemplo, fatos em PROLOG).
O agente pode expressar suas expectativas sobre o estado do mundo e sobre a chance de uma ação ou um conjunto de ações atingir um certo efeito e considerar- la como uma crença futura.
Esta perspectiva de considerar o estado mental expectativa como uma crença futura que o agente tem (ou terá) foi utilizado no trabalho de e difere do trabalho de, onde o estado mental expectativa foi modelado de maneira diferenciada das crenças do agente.
Para se adotar esta perspectiva é necessário que a ferramenta a ser utilizada para construção do agente incorpore mecanismos (predicados) que envolvam a questão de tempo, como no caso de o ambiente X-BDI (ver seção 3.4.4).
É um dos estados mentais humanos que não tem uma Definição precisa, sendo, portanto, usado e explicado de diversas maneiras.
Para, os desejos representam o estado motivacional do sistema.
Um estado mental é motivador se é um mecanismo ou representação que tende a produzir, modicar ou selecionar ações A luz das crenças.
Um desejo de agente (ou objetivo num sistemintuitivamente corresponde a tarefas estabelecidas por o próprio agente.
Agentes BDI, assim como agentes humanos, não exigem que desejos sejam logicamente consistentes.
Desejo é um estado mental intencional e com potencial motivador das ações do agente, apresentando as seguintes características:
Segundo Giraa, Mora e Viccari, é uma noção abstrata que especica as preferências acerca de os estados futuros do mundo ou o curso das ações que o agente, possivelmente, quer que se veriquem.
Para o desejo é representado por:
Onde: Des é a relação para a representação de desejo;
A representa o agente que possui desejo;
P é uma proposiço;
L¼ é uma localização espacial (local) associada à ocorrência do desejoD;
T¼ é o tempo associado à ocorrência do desejo D;
V 1, se ocorre o desejoD do agente A;
0, se não ocorre o desejoD do agente A. A intuição em sistemas BDI é que o agente não é capaz, geralmente, de realizar todos os seus desejos, mesmo sendo consistentes.
Agentes devem, portanto, estabelecer alguns subconjuntos de desejos disponíveis e comprometer recursos para realizar- los.
Esses desejos escolhidos são intenções e um Agente continuará a tentar realizar uma intenção até que acredite que a intenção foi satisfeita, ou Acredite que a intenção não conseguirá ser realizada.
Intenções têm um papel na deliberação dos Agentes, monitorando as ações que devem ser realizadas, e servindo de limitador das futuras escolhas do agente.
Conforme, intenção é vista como um compromisso que o agente assume com Um possível futuro especíco, pois ao contrário de os desejos não se pode ter intenções conitantes devido a o fato de que elas devam encontrar suporte nas crenças do agente, ou seja, o agente não pode intencionar aquilo que não acredita.
Intenção é o resultado da escolha com comprometimento, a qual leva o agente a ação.
A intenção de um agente pode ser definida em vários níveis de abstração.
Por exemplo, um agente pode ter a intenção de comprar um livro em particular, mas não decidir em qual livraria irá compraz- lo.
Então, uma estrutura de intenção é similar a um plano hierárquico, onde os operadores, nos vários níveis da abstração, num plano e as intenções na estrutura de intenção têm propriedades parecidas.
Um agente BDI, gradualmente, rena suas intenções em ações primitivas que podem ser executadas.
Em a arquitetura descrita por Rao e George, um agente BDI executa as seguintes funções:
Gera uma lista de opções.
Estas opções são os meios para satisfazer as intenções atuais e as novas opções geradas, baseadas em crenças e desejos do agente.
As opções disponíveis para O agente, que são meios para satisfazer suas intenções atuais, são geradas:
Através de um renamento, parecido com uma função de renamento de um plano hierárquico;
E com base em suas crenças e desejos atuais (ver alternativas geradas naFigura 3.1).
Seleciona um subconjunto dessas opções para adoço.
A seleção é, geralmente, feita baseada em crenças, desejos e intenções atuais do agente.
Estas novas intenções, isto é, as opções que o Agente decidiu adotar são adicionadas na estrutura de intenção.
Se existe uma ação atômica que pode ser executada dentro de a estrutura de intenção, ela é, então, executada.
Então, se um agente satisfez uma intenção ou decidiu que uma intenção não pode ser satisfeita mais adiante, tal intenção é abandonada.
Atualiza as crenças dos agentes e repete a partir de o ponto 1.
A o modelarmos agentes utilizando estados mentais, não necessariamente estamos falando de agentes modelados com arquitetura BDI.
Shoham propõe um framework de Programação Orientada A Agentes (Poa).
Ele apresenta uma classe de linguagem de agentes, baseada no modelo de agente, Onde o estado é constituído de componentes mentais tais como crenças, capacidades, escolhas e comprometimentos.
Shoham adota a noção de uma posição intencional como proposta por Dennett apud Um sistema Poa é denido por três componentes:
Uma linguagem formal para descrever estados mentais do agente;
Uma linguagem de programação com uma semântica correspondente a estados mentais;
Um agentier, isto é, um mecanismo para transformar um dispositivo naquilo que se pode chamar de agente e, assim, construir uma ponte para a lacuna entre processos de máquina de baixo-nível e programas baseados em agentes de nível intencional.
A linguagem formal engloba as categorias mentais de crenças, obrigações e capacidades.
Obrigação coincide com a noção de Rao e George de intenção e comprometimento.
Capacidade não está diretamente representada como um conceito mental na arquitetura BDI;
Particularmente, ela é coberta por a utilização de planos para alcançar certos objetivos.
A programação de agentes é vista como uma especicação de condições para a estruturação de comprometimentos.
O controle de um agente é implementado por um interpretador genérico executado num loop de duas fases.
Em cada ciclo, primeiro o agente lê as mensagens correntes e atualiza seus estados mentais;
Segundo, executa seus comprometimentos correntes, possivelmente resultando em modicações em suas crenças.
A linguagem AGENT é uma simples instância deste interpretador genérico.
AGENT pode modelar crenças, comprometimentos, capacidades e comunicação entre agentes.
Essas atitudes são tratadas como estruturas de dados de um agente.
A base da linguagem AGENT inclui representações para fatos, ações incondicionais e condicionais, e regras de comprometimento que descrevem condições que o agente assumirá como novos comprometimentos, baseados em seu estado mental corrente e nas mensagens recebidas de outros agentes.
Mensagens são estruturadas de acordo com o tipo da mensagem.
Os tipos de mensagens aceitas na linguagem AGENT são inform, request e unrequest.
O interpretador de agente, correspondente, instancia o loop básico, fornecendo funções para atualizar crenças e comprometimentos.
Crenças atualizadas ou revisadas são o resultado de ações que estão sendo executadas ou informadas.
Comprometimentos atualizados são o resultado da alteração na base de crenças ou de mensagens, do tipo unrequest, recebidas por outros agentes.
Segundo Müller, AGENT é uma linguagem muito simples que não constrói aplicações interessantes.
AGENT não se responsabiliza por motivação, isto é, como objetivos de agentes se envolvem na tomada de decisão (como o agente seleciona as opções alternativas).
A linguagem Placa (PLAnning Communicating Agents) e estende AGENT por a Introdução de conhecimento sobre objetivos que o agente pode ter e rena o ciclo básico do agente por adição de um passo dependente de tempo (renamento e construção de planos).
A linguagem Placa adota a visão de Bratman de planos como intenções.
O agente tem um conjunto de planos, Ou seja, suas intenções são descritas por o subconjunto de planos em que o agente se comprometeu.
Enquanto que Placa estende a expressividade da linguagem AGENT, por fornecer a noção de planos, ela não trata de outras restrições, tais como motivação, tomada de decisão e expressividade fraca da linguagem base.
Também inserida na abordagem de programação orientada a agentes proposta por Shoham, a LALO (LAngage d'Agents Logiciel Objet) é uma linguagem de programação orientada a agentes dentro de um framework para desenvolvimento de sistemas multiagentes inteligentes.
LALO foi desenvolvido por o CRIM -- Centre de Recherche Informatique de Montreal.
Conforme, a arquitetura proposta é extensível e oferece a possibilidade da criação de sistemas multiagentes incluindo agentes reativos bem como deliberativos.
Implementado em C+, oferece um conjunto de classes para a construção dos agentes.
O programador pode ampliar o conjunto existente adicionando novas subclasses.
A linguagem de comunicação utilizada é o KQML (Knowledge Query and Manipulation Language).
A proposta e o trabalho de Shoham inuenciaram muito a pesquisa na área de agentes cognitivos.
Por esta razão, foram mencionados neste documento.
A seguir são descritas arquiteturas BDI com características deliberativas e híbridas respectivamente.
É uma linguagem projetada para suportar interações entre agentes inteligentes.
Ela foi desenvolvida por Um grupo de pesquisadores interessados em sistemas de comunicações entre agentes do Knowledge--Sharing Eort, patrocinado peloAdvanced Research Projects Agency (ARPA).
O comportamento de cada agente local é especicado formalmente com base na Teoria das Situações 5 de Devlin apud.
O comportamento do agente global é o resultado dos comportamentos dos Agentes locais.
Maiores detalhes podem ser encontrados em e.
Intelligent Resource--bounded Machine Architecture é uma arquitetura para agentes limitados por recursos, que selecionam seu curso de ação baseados numa representação explícita de sua percepção, crenças, desejos e intenções.
A Arquitetura incorpora um número de módulos incluindo:
Uma estrutura de intenção, a qual é basicamente um conjunto ordenado por tempo;
Planos estruturados em árvore;
Um raciocinador de meios-m;
Um analisador de oportunidade (procedimento que verica alternativas para a ação a ser executada);
Um processo de ltragem;
Um procedimento de deliberação.
Tão logo as crenças do agente são atualizadas por a sua percepção, o analisador de oportunidade é capaz de sugerir opções para ação baseada nas crenças do agente.
Mais adiante, opções são sugeridas por o raciocinador, pertencente à estrutura de intenção atual do agente.
Todas as opções disponíveis são executadas através do processo de ltragem, onde são testadas para vericar a consistência da estrutura de intenção atual.
Por m, as opções que passam por o processo de ltragem com sucesso são enviadas para o processo de deliberação que modica a estrutura da intenção, adotando uma nova intenção, isto é, comprometimento com um plano parcial.
O modelo IRMA incorpora duas diferentes visões para planos:
Os planos que são armazenados na biblioteca de planos podem ser vistos como crenças que o Agente tem sobre quais ações são úteis para alcançar seus objetivos.
Ações, sucessões de situações, fazer referências a situações e comportar- se de acordo com elas, e discriminar localizações espaciais e temporais.
O conjunto de planos adotados, correntes, por o agente denem sua estrutura intencional local.
Essa segunda visão, onde planos são associados às intenções, tornou- se o principal paradigma aceito na pesquisa em arquiteturas BDI.
IRMA adota uma posição pragmática em relação a a arquitetura BDI.
Em particular, ela não fornece Um modelo formal explícito para crenças, objetivos e intenções, nem para seu processamento.
Assim, A principal contribuição de IRMA está na Definição de um framework de controle para agentes BDI, Os quais serviram como uma base para muitos renamentos formais de conceitos na abordagem BDI.
Arquitetura em camadas em a qual o comportamento de um Agente é guiada por atitudes mentais de crenças, desejos e intenções conjunta.
O foco do trabalho de Jennings, na arquitetura GRATE, foi em cooperação com sistemas inteligentes e, possivelmente, preexistentes, por meio de uma camada adicional de conhecimento cooperativo.
A capacidade dos agentes em solucionar problemas foi estendida por o compartilhamento de informações e tarefas entre eles.
GRATE é uma arquitetura para o projeto de interação dos solucionadores de problemas.
Uma descrição geral de comportamento dos agentes cooperativos é representada por o conhecimento embutido.
A informação, dependente de domínio sobre outros agentes, é armazenada em estruturas de dados especícas (modelos de agentes).
GRATE consiste de duas partes distintas:
Camadas de controle e de cooperação.
Sistema a nível de domínio.
O sistema, a nível de domínio, pode preexistir ou ser construído propositadamente;
O sistema fornece A funcionalidade de domínio necessária do solucionador de problema individual.
A camada de controle é um meta-controlador que opera no sistema a nível de domínio para garantir que suas atividades sejam coordenadas com outras existentes no sistema multiagente.
Modelos de Agentes armazenam diferentes tipos de conhecimento:
O modelo de relação inclui conhecimento que o agente tem sobre outros agentes;
O self model inclui uma perspectiva abstrata do sistema a nível de domínio local, isto é, capacidades e habilidades do agente.
As camadas de controle e cooperação consistem de três sub-módulos, representando a ação ou efeito recíproco entre comportamento cooperativo e local (verFigura 3.3):
Módulo de controle:
Responsável por o planejamento, execução e monitoração das tarefas locais.
Módulo de cooperação:
Negocia processos de cooperação e coordenação com outros agentes.
Módulo de avaliação de situação:
Forma a interface entre os mecanismos de controle social e local.
Sendo assim, responsável por a decisão de escolher os métodos coordenados ou locais solucionadores de problemas.
Percebe- se, assim, que o foco do trabalho de Jennings se deu em processos de cooperação.
Contudo, ele foi a procura de trabalhos que discutissem antes a Definição de uma arquitetura em duas camadas, do que cooperação embutida num sistema a nível de domínio.
A arquitetura não trata de questões sutis de comportamento de agentes, tais como reconciliar reatividade e deliberação.
Particularmente, estes problemas são reservados para serem solucionados dentro de o sistema a nível de domínio.
O Sistema de Raciocínio Procedural é uma arquitetura BDI genérica para representação e raciocínio de ações e procedimentos em ambientes dinâmicos, desenvolvida por a Stanford Research Institute International.
A arquitetura PRS, como mostra aFigura 3.4, pode ser subdividida em componentes periféricos e de raciocínio.
Os componentes periféricos são:
Um monitor para traduzir informações dos sensores em crenças do agente;
Um gerador de comando para traduzir ações primitivas em comandos de executor;
Os componentes de raciocínio são:
Um banco de dados contendo crenças correntes e fatos (expressos em lógica de primeira-ordem) sobre o mundo que é automaticamente atualizado;
Uma biblioteca de planos (com representação simbólica explícita de crenças, desejos e intenções) chamada de área de conhecimento (KA -- Knowledge Area), usada para executar/ atingir objetivos ou reagir em determinadas situações;
Um plano pode ser ativado a partir de metas, dados Ou de forma reativa, respondendo rapidamente a mudanças no ambiente;
Um conjunto de objetivos correntes (a arquitetura PRS usa o termo objetivo para se referir a desejos que são consistentes e que podem ser atingidos/ viáveis);
Uma estrutura de intenção contendo um conjunto parcialmente ordenado de todos os planos (pilhas de áreas de conhecimento) selecionadas em tempo de execução;
Um interpretador (ou mecanismo de inferêncipara:
selecionar planos aptos em resposta A os objetivos e crenças do sistema;
Conrmar os planos selecionados na estrutura de intenção e executar- los.
Em, é apresentado um sistema PRS que foi utilizado no domínio de problema de manejo defeituoso para Sistemas de Controle Reativo de viagens espaciais da NASA (National Aeronautics &amp; Space Administration).
Uma viagem contém três tipos de sistemas:
Um de proa (extremidade dianteira da aeronave dois de popa (extremidade traseira da aeronave).
São sistemas de propulsão relativamente complexos que são usados para controlar a posiço/ postura da viagem (ida e volta).
O astronauta trata o mal funcionamento do sistema através da execução de procedimentos pré-especícos.
Esses procedimentos 8 De o inglêshandling malfunction 9 De o inglêsshuttle.
Ambiente complexo e de constante mudança.
O sistema decide entre diferentes cursos de ação dependendo de como as áreas de conhecimento (biblioteca de planos) foram executadas e qual tipo de prioridade tinham.
Isso é uma forma fraca de planejamento e mais uma meta-área de conhecimento (levando em conta tempo disponível, custos e benefícios) que pode ser aguardada para melhorar a conabilidade/ segurança do sistema.
As características da arquitetura PRS que contribuíram para o sucesso deste sistema foram:
estratégia parcial de planejamento;
reatividade; uso procedural de conhecimento;
capacidades reexivas de meta nível.
Em particular, a maneira por a qual o sistema integra raciocínio de meios-m com o uso de conhecimento para decisão, é considerado um componente importante da atividade racional.
Agente é classicado por a sua percepção, Cognição, comunicação e execução, cada qual simulado por Um componente especíco na arquitetura COSY.
Recursos incluem recursos cognitivos (conhecimento e crença), recursos de comunicação (protocolos de baixo nível e comunicação de hardware recursos físicos (o gripper½¼de um robô).
Intenções são usadas num sentido diferente de Cohen e Levesque.
Existem: Os módulos individuais (componentes) da COSY são:
Atuadores; Sensores;
Comunicações; Motivações;
Cognição. Os três primeiros são módulos de domínio especíco com suas funcionalidades intuitivas.
O módulo de motivações implementa a intenção estratégica de um agente.
O módulo de Cognição avalia a situação Atual e seleciona, executa, e monitora a ação do agente em determinada situação.
Consiste de quatro subcomponentes:
Uma base de conhecimento, um componente de execução de scripts, um componente de execução de protocolo e um componente de decisão e raciocínio.
O conhecimento para solucionar o problema especíco de uma aplicação é codicado em planos.
Existem dois tipos de planos armazenados na biblioteca de planos:
Scripts são monitorados e executados por o componente de execução de script (entregando a execução de comportamento primitivo para os atuadores), e protocolos por o componente de execução de protocolo.
O componente de decisão e raciocínio é um mecanismo de controle geral, monitorando e Administrando as decisões e raciocínios relativos a seleção de tarefas e seleção de planos, incluindo decisões e raciocínios relacionados a ramos de intra-scripts e intra-protocolos.
Em, Haddadi forneceu um modelo teórico mais profundo estendendo o modelo BDI de Rao e George através da teoria de comprometimento e por os mecanismos de Definição, permitindo que agentes raciocinem sobre como explorar capacidades de cooperação por comunicação com outros agentes.
Contudo, ainda há Uma ampla lacuna e, parcialmente, não intuitiva entre a teoria de Haddadi e a atual implementação do modelo COSY.
COSY concentra- se em aspectos de cooperação entre agentes racionais.
Oferece um mecanismo de planejamento simples.
A idéia básica para usar a percepção e intenção, as quais guiam as decisões de Um agente, é muito similar às idéias seguidas na arquitetura BDI.
De qualquer forma, implementações recentes da COSY somente admitem seleção de estratégias muito simples e fazem suposições muito restritas.
Por exemplo, uma ordem total com prioridade nas intenções estratégicas possíveis que Um agente pode seguir.
Além disso, não existe um conceito explícito de reatividade suportada por a Arquitetura, embora a estrutura geral do módulo de Cognição não seja um obstáculo de projeto de tal mecanismo.
As camadas representam um nível de abstração, da mais alta para a mais baixa.
Estas camadas são subdivididas em mais duas camadas verticais:
Uma contendo bases de conhecimento e a outra contendo vários componentes de controle (verFigura 3.5).
Contudo, o foco da InteRRap foi estender o escopo das arquiteturas de controle de agentes através do suporte para interação de agentes.
Para esta nalidade, a arquitetura oferece:
Uma camada de planejamento cooperativo;
Uma camada baseada em comportamento;
Em relação a o uxo de controle, InteRRap abre mão de regras de controle global.
Particularmente, Utiliza dois mecanismos de controle hierárquico.
Atividade é acionada de baixo para cima por a, assim chamada, solicitação de ativação para cima, enquanto que a execução é acionada de cima para baixo (mensagem de compromisso para baixo).
Isto é, uma camada de controle na InteRRap se tornará Ativa somente se a próxima camada mais inferior não puder negociar com a situação.
Este controle baseado em competência permite que um agente reaja adequadamente numa determinada situação, Ou por os padrões de comportamentos, ou por o planejamento local, ou ainda por a cooperação.
Os produtos resultantes (output) da execução da camada de planejamento cooperativo são planos com comandos de sincronização embutidos;
Estes são passados para a camada de planejamento local, em a qual os outputs chamam procedimentos padrões de comportamento nos componentes baseados em comportamento, que enm produzem ações.
O rígido controle na arquitetura InteRRap simplica, consideravelmente, o projeto;
Uma arquitetura mais exível, por exemplo, permite ativações concorrentes das diferentes camadas de controle.
Assim, seria necessário a utilização de mecanismos sosticados de coordenação e de antecipação de Ações.
As arquiteturas descritas nesta seção possuem aplicações variadas e algumas de elas em domínios no mundo real, conforme já explicitado anteriormente.
A partir de os estudos de Bratman, surgiram diversos trabalhos que têm por base os conceitos intencionais baseados na teoria BDI, objetivando descrever os elementos básicos do agente cognitivo, funcionalidades e funcionamento.
Ou seja, modelar sistemas que possuem as propriedades básicas ½½ que caracterizam este agente.
Segundo Móra, ao se modelar agentes deve- se destacar:
Modelos formais de agentes modelar um agente inteligente signica especicar o agente, Utilizando alguma linguagem de especicação formal.
Como é usual na Ciência da Computação, O modelo é feito utilizando- se de uma linguagem que forneça uma abstração sobre a qual é construída a descrição do sistema, e a abstração sendo considerada aqui são os estados ou Atitudes mentais.
Arquiteturas de agentes são descrições informais dos elementos e processos que compõem Os agentes.
Novamente, como é usual na Ciência da Computação, as arquiteturas fornecem Um esquema com lacunas que quando preenchidas com informações especícas do domínio da aplicação formam o sistema sendo descrito.
Um modelo baseado em estados mentais deve denir:
Os estados mentais que compõem o agente, qual o conteúdo proposicional destes estados mentais e qual o papel de cada um de eles;
A relação entre os diferentes estados mentais, como um estado mental inuência o outro, quais As restrições que uma atitude mental impõe à outra;
Tais modelos tem dois papéis a desempenhar:
Inicialmente, devem servir como ferramenta para denir agentes e suas respectivas propriedades, A m de demonstrar, formalmente ou empiricamente, que os agentes modelados possuem, de fato, as propriedades desejadas;
Uma questão fundamental envolvendo a abordagem BDI é que a maioria dos sistemas formais se Utilizam de lógicas modais para especicação dos agentes e não possuem correspondência (ambientes Ou ferramentas) que permitam a sua implementação.
Isto ocorre, conforme, devido a os seguintes fatores:
As lógicas modais utilizadas não são, em geral, tratáveis computacionalmente.
Tais lógicas, não possuem procedimentos de derivação para manipulação de suas sentenças que sejam corretos e completos com relação a semântica destas linguagens.
Isto faz com que estas lógicas modais possam ser usadas como linguagem de especicação, mas não como ferramenta de representação do conhecimento ou ferramenta básica para implementar agentes.
Além disso, sua intratabilidade não permite que tais mecanismos sejam implementados;
Além de as dificuldades inerentes às lógicas escolhidas, os modelos adotam uma perspectiva de especicação.
Os modelos enfatizam a Definição de propriedades que os agentes, idealmente, deveriam possuir, sem se preocupar em como tais propriedades seriam construídas nos agentes.
Embora isto seja típico e aceitável em especicações, contribui bastante para a existência desta distância entre especicação e implementação.
Ou seja, estes sistemas/ modelos formais guardam uma grande distância do que seriam implementações de agentes, porque os elementos utilizados para a descrição -- os estados mentais -- são de um alto nível de abstração, enfatizando as funções e as relações entre estes estados mentais, sem detalhar os processos a eles associados e que, em última instância, levam o agente à ação.
As lógicas modais, enquanto bastante adequadas para descrever estes estados mentais e como ferramenta de análise, não dispõem de mecanismos que permitam aos agentes utilizar- las para representar e manipular a informação.
A busca em diminuir a distância entre a formalização e a implementação de agentes BDI é, hoje, um grande foco da pesquisa nesta área.
Além de esta distância dos aspectos de implementação, os agentes representados por os modelos teóricos existentes nem sempre apresentam as características esperadas.
Em particular, o que se deseja é possuir uma ferramenta que permita modelar e implementar agentes que exibam um comportamento autônomo e exível.
As ferramentas apresentadas a seguir foram desenvolvidas com a intenção comum de diminuir a distância que existe entre teorias formais para especicação de agentes cognitivos e sua programação.
Foram selecionadas a partir de uma revisão bibliográca realizada em, e aqui relacionadas por permitirem a modelagem e implementação de agentes BDI.
Orientados a agentes, baseada em C+.
Foi desenvolvida no AAII (Australian Articial Intelligence Institute), sendo uma ferramenta comercial voltada para aplicações em domínios dinâmicos, de co-nhecimento incerto e complexo, tais como telecomunicações, viagens espaciais, tráfego aéreo, gerência de negócios, etc..
Projetada para conguração rápida e facilidade de integração, o ambiente facilita o projeto de sistema, manutenção e reengenharia.
Baseada na arquitetura PRS, dMARS leva vantagem nas recentes pesquisas de raciocínio para sistemas multiagentes em tempo real.
O Procedural Reasoning System, apresentado na seção 3.2.1, é talvez a arquitetura de agente mais conhecida.
Afigura 3.4 mostra a arquitetura BDI, tipicamente, contendo quatro estruturas-chave de dados:
Crenças, objetivos, intenções e uma biblioteca de planos.
O modelo BDI é operacionalizado em agentes dMARS através de planos.
Cada agente tem uma biblioteca de planos (receitas/ fórmulas) especicando o curso da ação que pode ser tomado por o agente para realizar suas intenções.
Uma biblioteca de planos de um agente representa seu conhecimento procedural ou seu conhecimento sobre como fazer.
Segundo, cada plano contém vários componentes:
Por o evento &quot;sede».
As quais a execução de um plano pode iniciar.
Por exemplo, o plano &quot;tomar chá «pode ter a pré-condição &quot;ter saquinhos de chá».
&quot;chamadas a procedimentos».
Agentes dMARS monitoram tanto o mundo e seus próprios estados internos quanto quaisquer eventos que são percebidos e colocados numa la de eventos.
O interpretador, naFigura 3.4, é responsável por controlar/ gerenciar a operação geral do agente.
O interpretador executa o seguinte ciclo:
Observa o mundo e o estado interno do agente e atualiza a la de eventos para repercutir nos eventos que foram observados;
De essa maneira, quando um plano inicia a execução, seus sub-objetivos são colocados na la de eventos, Onde, um por um, acionam planos que realizam seu sub-objetivo, tornando- o ativo.
Esta é a execução básica do modelo de agentes especicados em dMARS.
Agentes não planejam tudo, pois planos devem ser gerados por o programador do agente em tempo de projeto.
O planejamento feito por os Agentes consiste, inteiramente do desenvolvimento/ expansão dos sub-objetivos sensíveis ao contexto.
Sub-objetivos são adiados até o momento em que são selecionados para a execução.
Portanto, agentes dMARS modelam suas especialidades como um conjunto de planos sensíveis ao contexto.
Esses planos podem reagir para mudar no ambiente e seguir proativamente os objetivos do agente.
Isso permite que os agentes permaneçam direcionados a objetivos sem comprometer suas habilidades de reação para novas situações.
Os agentes podem modicar seus comportamentos para conservar um alinhamento das mudanças ocorridas no ambiente em tempo real.
Concorrência e cooperação são suportadas mesmo quando os agentes envolvidos são distribuídos por a rede.
Além de raciocinar sobre seu ambiente, agentes dMARS são capazes de raciocinar sobre seu próprio estado mental (meta raciocínio).
Isto é, eles podem reetir sobre suas próprias crenças, metas e intenções.
Essa característica permite que usuários denam uma linha mais larga de procedimentos escalonados para tarefas.
AgentSpeak (L) é uma linguagem que pode ser visualizada como uma abstração da arquitetura PRS (Procedural Reasoning System) e permite que programas baseados em agentes sejam escritos e interpretados de maneira similar à programas lógicos baseados em cláusulas de Horn.
É uma versão textual e simplicada da linguagem dMARS.
Um agente modelado na linguagem AgentSpeak (L) possui um conjunto de crenças, desejos, regras de planos, intenções e eventos que constituem seu estado mental.
AgentSpeak (L) é uma linguagem baseada em regras que expressam o conhecimento do agente, e estas são usadas em planos.
A leitura informal dessas regras é:
&quot;se o agente quer realizar o objetivo e acredita que a situação S é o caso, então o plano P pode ser a coisa correta a fazer».
AgentSpeak (L) como linguagem de especicação consiste de um conjunto de crenças básicas (ou fatos, no sentido de programação lógice um conjunto de planos.
Planos são sensíveis ao contexto, são receitas invocadas por eventos que permitem decomposição hierárquica de objetivos, bem como a execução de ações.
Embora que sintaticamente planos pareçam cláusulas de linguagem de programação lógica, eles são bastante diferentes em seus comportamentos.
Em tempo de execução um agente pode ser constituído de um conjunto de crenças, planos, intenções, eventos, ações e funções de seleção.
LORA é um framework formal de lógica BDI que estende o formalismo original de Anand Rao e Michael George.
LORA contem um componente temporal que permite a representação da dinâmica de agentes e seus ambientes, isto é, como estes agentes mudam ao longo de o tempo.
Por m, LORA possui um componente de ação, que possibilita a representação das ações que agentes executam e os efeitos que estas ações possuem.
Conforme, a área de lógica para Inteligência Articial pode ser dividida em dois campos:
O que faz uso de lógica clássica (usualmente de primeira-ordem);
LORA é uma lógica temporal de primeira-ordem com tempo ramicado, contendo:
conectivos modais para representação de crenças, desejos e intenções de agentes;
e instrumentos de estilo de lógica dinâmica para representar e raciocinar sobre as ações que os agentes executam.
Segundo Wooldridge, LORA pode ser usada para capturar:
Estados mentais comuns e a noção muito próxima de trabalho em equipe;
½4 comunicação entre agentes na forma de atos de fala;
½5 resolução de problemas de forma cooperativa, onde um grupo de agentes colaboram para realizar Algumas tarefas.
LORA pode ser usada para denir os atos de comunicação (falentre agentes.
Em, Wooldridge mostra como ações do tipo request e inform podem ser definidas em LORA.
Resumidamente, uma ação de informação (inform action) ocorre quando um agente tenta fazer com que Outro agente acredite em algo;
Uma ação de solicitação (request action) ocorre quando um agente consegue que outro agente pretenda alguma coisa.
Utilizando esses dois atos de fala como elementos básicos, outros atos de fala podem ser denidos, usando LORA.
LORA, também, pode ser utilizada para denir o modelo de resolução de problemas de forma cooperativa.
Este modelo é uma adaptação da teoria de cooperação introduzida por Wooldridge e Jennings em.
O modelo denido em LORA trata a resolução de problemas de forma cooperativa como um processo de quatro estágios, iniciando quando um agente identica a capacidade para cooperação em relação a uma de suas ações, a qual é seguida por uma tentativa do agente em solicitar auxílio de um grupo de agentes, o qual tenta chegar a um acordo para Um plano de ação em conjunto para atingir esse objetivo, que nalmente é executado por o grupo.
Conforme, LORA não é um modelo formal executável, e não existe uma maneira simples de automatizar- lo, de maneira que possa ser utilizado diretamente como um formalismo de representação de conhecimento ou uma linguagem do programação, sendo assim, uma linguagem de especicação formal de agentes, individualmente ou inseridos numa sociedade multiagente.
O X-BDI é um ambiente que permite a descrição formal de agentes cognitivos baseados na abordagem BDI, sendo ao mesmo tempo, uma linguagem para implementação desses agentes.
Segundo, sua proposta disponibiliza um sistema formal cuja linguagem é adequada para A representação dos estados mentais de agentes, isto é, fornece as ferramentas necessárias para se modelar/ implementar os estados mentais da tríade BDI.
Esse sistema fornece suporte para diversos tipos de raciocínios, tratados de forma computacional.
O modelo possui duas características:
Serve como ambiente de especicação de agentes, em que é possível denir formalmente um Agente através da descrição dos seus estados mentais (crenças, desejos e intenções) e de suas respectivas propriedades.
Este ambiente pode, também, fazer a vericação destas propriedades;
O X-BDI possui um ambiente de implementação com alto nível de abstração (os estados mentais), o que reduz a complexidade no desenvolvimento de sistemas baseados em agentes.
Isto signica que o projetista apenas tem de colocar suas heurísticas sobre a área de domínio a ser modelada, expressa por o conjunto de estados mentais a serem considerados por o agente, a m de guiar o seu comportamento.
Inicialmente, o agente possui uma base de crenças, um conjunto de desejos potencialmente factíveis e que podem ser dinamicamente atualizados ao longo de as interações.
Maiores detalhes em[ GIR98, A linguagem do X-BDI possui baixa complexidade no que diz respeito à sintaxe, facilitando sobremaneira o trabalho de especicação e implementação de agentes baseados na arquitetura BDI.
A arquitetura BDI passa a ser um paradigma de implementação de agentes cognitivos, devido a a possibilidade de se poder executar o modelo formal.
O X-BDI, como modelo formal de agentes, reduz a distância entre especicação e implementação de agentes.
Adotando o ELP (Extended Logic Programming) como formalismo de apoio, preserva- se tanto as principais características dos modelos formais (habilidade para denir e vericar formalmente Agentes), como fornece mecanismo para agentes raciocinarem.
Além de o que, o modelo X-BDI tem a vantagem de modelar aspectos estáticos e dinâmicos de estados mentais pró-ativos.
Programação em lógica estendida O ambiente base utilizado para a construção do X-BDI usa explicit negation) com a semântica WFSX (Well--Founded Semantics eXtended for explicit negation) que vem a estender as possibilidades de programas em lógica normal com uma segunda negação chamada de negação explícita.
Essa extensão permite representar explicitamente informações negativas e aumentar os recursos da linguagem.
Assim, se por um lado o acréscimo desse segundo tipo de negação aumenta a expressividade da linguagem, ela também introduz a possibilidade de informações contraditórias nos programas.
Quando se lida com estados mentais pró-ativos, como desejos e intenções, é necessário:
Em algumas situações, representar simultaneamente informações contraditórias, denindo uma semântica e procedimentos que representem a contradição e a levem em consideração;
Portanto, quando as contradições surgem, o ambiente fornece mecanismos para remover- las.
A semântica WSFX apresenta mecanismos de detecção e o SLX (Selected Linear resolution for eXtended programs), que é um procedimento de derivação descendente, completo e correto em relação a semântica WFSX, apresenta mecanismos para remoção de contradições, computando as combinações possíveis das alterações de valores verdade, garantindo a remoço.
Segundo, esse procedimento permite provar que determinado literal pertence, ou não, ao modelo do programa, sem exigir o cálculo do modelo completo deste programa.
Por meio desse mecanismo de remoção é possível, além de manter a consistência, descrever diferentes tipos de raciocínio não-monotônicos.
Para a situação, existe o interesse em duas formas de raciocínio não-monotônico:
A o se fazer a seleção das intenções a partir de os desejos é necessário selecionar subconjuntos consistentes do conjunto de desejos do agente, o que é feito através de raciocínio revogável½6;
também, a derivação de intenções secundárias a partir de as intenções primárias é semelhante a Um processo de planejamento, sendo feita por raciocínio abdutivo (abduço).
Por m, a estrutura da ELP, além de prover um mecanismo para remover contradições, também provê procedimentos computacionais para prova de teorias que se expressam em sua linguagem.
Os benefícios da utilização de um modelo com estas características são fornecidas por o formalismo.
O requisito básico para a lógica selecionada é que ela possa ser utilizada tanto para a especicação como para implementação do sistema.
E, de fato, esta é a maneira usual como a linguagem é vista na programação em lógica.
Segundo Móra, quando se lida com estados mentais pró-ativos e comportamentos do Agente a partir destes estados mentais, é preciso representar e manipular tanto ações que o agente executa ao longo de o tempo, quanto propriedades que devem se vericar ao longo de o tempo como conseqüncia das ações.
A programação em lógica fornece uma linguagem de uso geral para representação do conhecimento e que, portanto, não possui primitivas especícas para representação de ações e tempo.
Assim, o formalismo, adotado no X-BDI, que permite representar ações e tempo, bem como raciocinar sobre eles é o Cálculo de Eventos (Event Calculus).
Cálculo de eventos -- Inicialmente proposto por Kowalski e Sergot apud, para superar Algumas limitações do Cálculo de Situações, o cálculo de eventos possui como primitivas na sua Ontologia os eventos, que são ocorrências de ações, as quais iniciam e terminam em períodos em que As propriedades se vericam.
Para o modelo X-BDI, foi construído mais uma variação do Cálculo de Eventos, a partir de a versão de Quaresma e Lopes, que permite lidar com ações instantâneas concorrentes e com propriedades que ocorrem sem a intervenção do agente.
Estas características permitem modelar eventos que ocorrem espontaneamente no ambiente, ou ações executadas por outros ½6Do inglêsdefeasible reasoning.
Agentes e que não são percebidos por o agente no momento de sua execução.
Ou seja, esta proposta permite que eventos:
Tenham uma duração e uma identicação ao invés de serem instantâneos e identicados no instante de tempo em que o evento ocorre.
A conseqüncia disto, é que eventos podem ocorrer simultaneamente.
Para a Definição do modelo BDI, parte- se da análise de Bratman sobre intenção, sua função no raciocínio lógico e como se relaciona com crenças e desejos.
De acordo com Bratman apud, desde que agentes são tidos como limitados a recurso, eles não podem avaliar continuamente suas crenças e desejos contraditórios para agirem racionalmente.
Depois de alguns raciocínios, Agentes precisam se comprometer com um conjunto de escolhas.
Estas escolhas seguidas por um comprometimento, são o que caracterizam as intenções.
O modelo descrito não dene um agente completo, mas somente a estrutura cognitiva que é parte do modelo do agente nesta abordagem.
Para melhor compreender o modelo do agente X-BDI, o texto a seguir foi dividido em doze denições, que unidas dão a Definição mais precisa deste modelo de agente.
Definição 1 -- Estrutura do agente cognitivo A estrutura cognitiva contém os estados mentais que compõem o agente e as regras que administram a interação destes estados mentais (e, conseqüentemente, o comportamento do agente).
Definição 2 -- Conjunto de desejos Desejos são relacionados ao estado de coisas ½7 que o agente quer provocar.
Mas desejos, no sentido usualmente apresentado, não necessariamente levam o agente à ação.
Isto é, o fato de um agente ter um desejo não signica que ele irá agir para satisfazer- lo.
Signica que antes de um determinado agente decidir o que fazer, ele passa por um processo de racionalização e confronta os seus desejos (o estado de mundos que quer provocar) com suas crenças (as circunstâncias Atuais e restrições que o mundo impõe).
O agente escolherá os desejos que são possíveis de acordo com Algum critério.
Em outras palavras, desejos constituem o conjunto de estados entre os quais o agente escolhe o que fazer.
Note que, desde que agentes não estejam comprometidos com seus desejos, eles não precisam ser consistentes, nem com outros desejos, nem com outros estados mentais.
A Definição de desejos, nesse modelo, permite que o agente tenha um desejo com uma certa propriedade se vericando (ou não) num instante especíco do tempo.
Cláusulas de desejos podem ser fatos, representando estados que o agente pode querer realizar/ atingir quando possível, ou regras, representando estados a serem atingidos quando uma certa condição acontecer (ou se vericar).
Os Atributos associados para cada desejo, denem propriedades como urgência, importância ou prioridade, que são usadas por o agente para selecionar o desejo mais apropriado.
Definição 3 -- Conjunto de crenças Crenças constituem a informação sobre a atitude do agente.
Elas representam as informações que o agente tem sobre o ambiente e sobre si próprio.
Assume- se que o agente atualiza continuamente suas crenças para reetir mudanças que detecta no ambiente, e sempre que uma nova crença é somada ao conjunto de crenças a consistência é mantida.
Definição 4 -- Conjunto de intenções Como descrito anteriormente, intenções são caracterizadas por uma escolha de um estado de mundos a atingir e um comprometimento com esta escolha.
Assim, intenções são vistas como um compromisso que o agente assume com um futuro especíco possível.
Isto signica que, diferentemente dos desejos, uma intenção não pode ser contraditória com outras intenções.
Além disso, signica que não seria racional para um agente agir para alcançar estados incompatíveis.
Intenções deveriam ser apoiadas por as crenças do agente, isto é, não seria racional para um agente pretender algo que não acredita ser possível.
Uma vez que uma intenção é adotada, o Agente procurará satisfazer esta intenção e planejará ações para realizar- la.
O replanejamento de ações Ocorre sempre quando um fracasso acontece.
Estas ações, que são usadas para realizar intenções, também devem ser adotadas como intenções por parte de os agentes.
A Definição de intenções obriga a criação de restrições para a racionalidade:
Um agente não deve pretender algo num tempo passado;
Um agente não deve pretender algo que acredita já estar satisfeito ou que será satisfeito sem esforços por parte de o agente;
Quando se projeta um agente, especica- se suas crenças e os seus desejos.
O agente é que vai selecionar Apropriadamente suas intenções a partir de seus desejos.
Essas restrições de racionalidade também devem ser garantidas durante esse processo de seleção.
Originando intenções Uma vez caracterizadas as intenções e os estados mentais relacionados, é necessário denir como estes estados mentais interagem para produzir o comportamento do agente, Ou seja, como agentes selecionam intenções e quando e como agentes revisam as intenções selecionadas.
Agentes selecionam as intenções de duas fontes diferentes:
De seus desejos e de um renamento de outras intenções.
Por Definição, não há nenhuma restrição nos desejos do agente.
Então, um agente pode ter desejos contraditórios (conforme já descrito anteriormente).
Por outro lado, intenções são restringidas através de restrições de racionalidade.
Assim, os agentes têm que selecionar só os desejos relacionados com Aquelas restrições.
Definição 6 -- Desejos elegíveis Os desejos elegíveis são aqueles desejos que o agente acredita não estarem satisfeitos.
De acordo com as restrições de racionalidade, não é racional para um agente pretender alguma coisa que acredita que já realizou ou que é impossível de realizar.
Se um desejo é condicional, então o agente pode acreditar que esta condição é verdadeira.
Como no conjunto inicial de desejos, desejos elegíveis podem também ser contraditórios.
Então, é necessário determinar subconjuntos de desejos elegíveis realizáveis por meio de um esforção comum.
Assim, pode- se indicar quais desses subconjuntos são preferidos a serem adotados como intenções.
Isso é feito através de uma relação de preferência.
Definição 7 -- Relação de preferência de desejos De acordo com a teoria definida em, O agente pode preferir satisfazer primeiro o desejo mais importante.
Em seguida, o agente vai preferindo os mais importantes.
Assim, o agente adota a maior quantidade de desejos que puder.
A relação de preferência é uma relação de pré-ordem, isto é, existirá situações onde o agente preferirá tanto este como aquele desejo para satisfazer.
Definição 8 -- Conjunto de desejos candidatos Em o processo de revisão, há uma mescla de raciocínio abdutivo e revogável, onde o literal unsel (é revogável.
Seu signicado intuitivo é Desejo D pode não ser selecionado como intenção.
Se o agente acredita que é possível satisfazer todos os seus desejos (se ele pode abduzir ações que satisfaçam todos os desejos e todas as restrições), ele encontrará uma revisão que contenha somente happens $= 3 act $= 2 e (ver para maiores detalhes).
Quando restrições não podem ser todas satisfeitas, signica que a adoção de todos os desejos como intenções levam à contradiço, isto é, elas não são aceitas através de um esforção comum.
Note que contradições não surgem se as ações necessárias para satisfazer duas intenções diferentes Apresentarem efeitos contraditórios.
Se uma ação necessária para satisfazer uma intenção cancela Uma propriedade que é também uma intenção, uma restrição é violada e o curso daquela ação é rejeitado.
De acordo com o grafo de preferência, as contradições que representarem os desejos menos importantes serão destruídas e os desejos mais importantes serão mantidos, se possível.
Como já mencionado, a relação de preferência de desejos não é uma relação de ordem.
Então, é possível ter mais do que um conjunto candidato depois de uma revisão.
Contudo, se for considerado A executabilidade e os atributos dos desejos como critério de decisão, não faz diferença para o agente Adotar qualquer dos conjuntos de desejos candidatos.
Definição 9 -- Intenções primárias:
Intenções como renamentos de intenções Assim que O agente adota suas intenções, ele começa a planejar como realizar- las.
Durante o planejamento, o Agente formará as intenções que são relativas ou preexistentes, signicando que as intenções existentes são renadas.
Este renamento pode ser feito de várias maneiras, como por exemplo um plano que inclui uma ação que não é diretamente executável, pode ser elaborado por a forma particular de especicar como realizar essa ação;
Um plano que inclui um conjunto de ações pode ser elaborado por a imposição de uma ordem temporal naquele conjunto.
A partir de o momento que o Agente se compromete com as intenções, essas intenções adotadas restringem a adoção de novas.
Ou seja, durante a elaboração de planos, é adotada somente uma nova intenção, em potencial, não contraditória com as intenções e com crenças existentes.
Definição 10 -- Intenções relativas A condição de não contradição reforça novamente a noção de comprometimento, isto é, uma vez adotada uma intenção, ela restringe a adoção de novas intenções.
Revisando intenções Como descrito anteriormente o agente seleciona suas intenções, e pesar/ avaliar motivações e crenças signica:
Acordo com crenças e intenções;
Resolver restrições impostas por intenções e desejos.
Isto é, atividades de raciocínio com alto custo.
O próximo passo é denir quando o agente deve executar o raciocínio sobre as intenções.
Não é suciente declarar que um agente deve revisar suas intenções quando acredita que acontece uma certa condiço, tal como acreditar que uma intenção foi satisfeita ou que não é possível satisfazer- la.
O que O agente precisa fazer é vericar constantemente suas crenças.
Ao invés de instanciar as intenções, é necessário denir um mecanismo que ative/ dispare o processo de raciocínio sem impor um fardo Adicional ao agente.
A abordagem disponibilizada por permite denir as condições que fazem o agente começar a raciocinar sobre as intenções como restrições em cima de suas crenças.
Sempre que fatos novos são incorporados, o agente tem que manter constantemente suas crenças consistentes.
De a mesma forma, sempre que uma contradição aparece, o agente revisa suas crenças.
O processo de revisão de intenções é disparado quando uma das restrições é violada.
Definição 11 -- Gatilho de intenções½8 As condições que foram definidas até aqui, são usualmente definidas por modelos formais de agentes.
Como visto, essa caracterização de intenções pode levar a um comportamento extremo.
Então, é preciso adotar restrições adicionais que evitarão comportamentos indesejáveis.
Entende- se que as mesmas razões que originaram as intenções podem ser usadas para romper o comprometimento associado a elas.
Se é aceito que uma intenção é originada a partir de desejos, é sensato declarar que não é racional persistir com uma intenção onde suas razões são substituídas por razões mais urgentes ou importantes.
O comportamento normal do Agente seria determinar seus desejos e crenças concorrentes e selecionar suas intenções.
O agente se comprometeria com estas intenções e constituiria um ltro de admissibilidade para outras intenções.
Também, o agente tentaria satisfazer aquelas intenções, até a realização completa ou até a detecço de impossibilidade, ou até que alguns de seus outros desejos que não foram selecionados anteriormente tornariam- se- elegíveis, ou até que os desejos que as originaram não fossem mais elegíveis, reativando o processo de revisão que determinaria (novamentdesejos e crenças concorrentes.
Desde que A noção de comprometimento é preservada, o agente não inicia seu processo toda vez que existisse Uma mudança nas crenças, mas somente se condições relevantes dispararem o processo de revisão de intenção, alterando o foco de atenção do agente.
Estes disparos são determinados por as pré-condições de desejos.
Definição 12 -- Restrições de gatilho de desejos O primeiro gatilho restringido é formado por as pré-condições daqueles desejos que não foram elegíveis e que são mais importantes do que aqueles que foram avaliados.
Isto é, se as pré-condições de tais desejos tornam- se verdadeiras, estes desejos (que não foram considerados durante o processo de racionalização) tornam- se elegíveis.
Então, é necessário reavaliar desejos e crenças para checar se seus novos desejos podem ser produzidos.
A segunda restrição é formada por a pré-condição dos desejos elegíveis que, embora mais importantes, não foram relevantes quando o agente fez sua escolha.
Note que não existe gatilhos para desejos que foram elegíveis, mas que foram rejeitados durante a seleção de uma revisão.
Isto se deve porque eles já tinham sido avaliados e por terem sido considerados menos importantes do que os outros desejos.
Então, não é de utilidade disparar todo o processo novamente (isto é, para trocar a atenção do agentpara reavaliar- lo.
Prolog; Por um arquivo bdi_ A, contendo as especicações de crenças, desejos e ações do agente BDI, que é lido no momento da carga do X-BDI.
Em o início deste arquivo deve ser feita a identicação do agente (identity (Agente)), sendo que esta informação não pode ser sensorada/ percebida no Ambiente;
Um agente.
Esta interação pode ser realizada de duas maneiras:
Normal (via rede):
A conexão é via socket, por onde a ferramenta X-BDI envia os planos a serem executados e recebe informações percebidas no ambiente. (
ver Figura 3.7).
Assim, é passado para o kernel cognitivo do agente uma estrutura contendo um conjunto de senses, que dá condições de vericar/ acompanhar o processo de deliberação do agente modelado/ implementado.
E um exemplo que ilustra a utilização do X-BDI.
O Arquivo bdi.
A Crenças Crenças são representadas por o predicado bel:
Agente, isto é, acreditar em propriedades que se vericam em algum instante de tempo.
Tempo O tempo é controlado por vários predicados:
Uma operação aritmética do tipo current time (t½+ t¾):
Note que current time (tempo) é uma propriedade sensorada/ percebida, ou seja, é uma informação que vem do ambiente, onde o X-BDI não faz a correção do tempo.
Os predicados before after e podem ser representados de forma explícita e de forma implícita:
Isso signica que a crença do agente sobre a propriedade se vericará antes do tempo corrente t3.
O predicado after funciona de forma idêntica.
Ações Ações devem ser representadas por o predicado act, da forma:
Act (agente, ação), onde a identicação do agente é opcional, podendo também ser representadas expressões do tipo:
Act (agente, ação) causes propriedade½;
PropriedadeÒ Portanto, ações têm:
Nome, argumento (atributo), pós-condições (efeitos) e pré-condição (requisitos).
Desejos Desejos utilizam- se do predicado des:
Exemplo Este é um exemplo para ilustrar o uso da ferramenta.
Suponha que exista um robô rbtque possa carregar todos os objetos O colocados numa entrada (como um balcão) e armazenar- los num Armazém.
Ele também recarrega suas baterias toda hora que elas descarregarem.
Afigura 3.9 Apresenta o código X-BDI do exemplo.
O robô possui dois desejos:
Identity (rbt).
Imaginando as seguintes situações:
Um pacote chegando no balcão Um pacote p½ chegando, o agente robô sensora/ percebe (sensque o pacote está no balcão (linha 7).
A crença bel torna- se verdadeira.
Esta crença é a pré-condiço, que por sua vez é um gatilho sinalizado que ativa o desejo des (rbt;
Guardado (O).
Uma vez selecionado o desejo a ferramenta tenta construir um plano que o satisfaça.
Em este caso, o agente passa acreditar bel (rbt;
Guardado (p½)) após ter executado a ação guardar (p½).
Outra conseqüncia de executar essa ação é que o agente passa acreditar que o objeto p½ não está mais na entrada, fazendo com que o agente pare de pretender guardar o objeto p½.
Chegando um pacote e percebendo que o sinal da bateria está baixo Em este caso, as crenças sensoradas ativam os dois desejos, no entanto apenas um pode ser satisfeito.
É neste momento que se verica a propriedade de prioridade do desejo.
Assim, o agente tentará satisfazer o desejo da linha 2 executando a ação da linha 4.
Uma vez satisfeito esse desejo, o outro passa a ser candidato e pode ser satisfeito, como na primeira situação.
É importante salientar que podem existir desejos, como o da linha 2, sem crença como pré-requisito explícito.
Diferente do que acontece no desejo da linha 3.
Isto ocorre porque, conforme a segunda restrição de racionalidade (vide seção 3.4.4.2: Definição 4), o agente não deve pretender algo que Acredita já estar satisfeito.
Este desejo será ativado quando o estado da bateria em que o agente Acredita, for negado, ou seja, quando ele parar de acreditar que a bateria está carregada.
Assim, A crença que ativa este desejo deve ser a negação do estado pretendido por o agente.
Em o X-BDI, a negação é representada por o hífen, como mostra aFigura 3.10.
Agente, durante seu processo de deliberação.
Em a realidade, a mesma especicação formal utilizada para modelar o agente, serve também como linguagem de implementação, isto é, o X-BDI se difere das ferramentas citadas porque o formalismo usado para descrever explicitamente o conjunto de estados mentais do agente é também computável. Enquanto
AgentSpeak (L) e LORA são linguagens de especicação para formalizar agentes, necessitando de outro ambiente ou ferramenta para implementar tais agentes, o X-BDI permite a formalização e implementação numa única ferramenta.
Em este aspecto, o X-BDI se assemelha ao dMARS que é um ambiente mais completo.
Em o momento, a Unica ferramenta (produto) disponível para modelagem e implementação de agentes BDI é o dMARS.
Porém, o seu alto custo a inviabiliza como ferramenta de teste para projetos de pesquisa na área Acadêmica.
Logo, o X-BDI ocupa um espação, em aberto, importante na área de modelagem e implementação de agentes BDI, constituindo- se, assim, num recurso para exploração das possibilidades e potencialidades de agentes nesta arquitetura.
O X-BDI é uma ferramenta em fase de consolidação, necessitando que uma série de renamentos e recursos sejam incorporados, a m de que sua utilização seja mais abrangente e acessível.
Para facilitar O uso do X-BDI e auxiliar na sua divulgação, foi desenvolvida uma homepage, com informações referentes ao X-BDI.
Durante os experimentos e testes foi observado que o usuário do X-BDI necessita de alguns prérequisitos para melhor usar a ferramenta.
As principais dificuldades encontradas foram o conhecimento da linguagem de programação Prolog e a compreensão da metáfora usada em estados mentais (Folk Psychology) quando comparada ao processamento humano.
Não é trivial descrever o comportamento de agentes a partir de estados mentais.
Assim, o uso de uma técnica de programação expressa num editor de estados mentais, com a possibilidade de visualizar as inter-relações destes estados mentais Através de diagramas, torna mais fácil o processo de especicação do comportamento de agentes.
Uma Técnica para Programação Orientada a Agentes BDI Um agente modelado/ implementado com o X-BDI requer um entorno (interfacpara permitir:
A inserção de entradas (crenças, desejos e outras informações relevantes);
E a visualização da saída (resultado do processo de deliberação), que são os planos a serem executados.
Em o trabalho de, pode- se observar isto claramente, quando é proposta uma arquitetura multiagente que trata a questão da seleção de múltiplas estratégias de ensino, levando em consideração a modelagem cognitiva de cada Aluno que interage com o sistema.
Uma das grandes dificuldades do projetista que utiliza a abordagem BDI para modelagem e implementação dos agentes cognitivos é, justamente, a organização dos estados mentais e suas interrelações.
No caso de a ferramenta X-BDI, o projetista necessita apenas descrever o conjunto de crenças e desejos, sendo as intenções inferidas a partir de as informações fornecidas à ferramenta (vide seção e como isso está conectado com as intenções.
E, por conseguinte, que ações devem ser executadas por o Agente.
Esta organização pode ser muito facilitada se o projetista possuir um editor onde ele escreva os estados mentais e onde ele possa visualizar as inter-relações dos estados mentais através de diagramas gerados por as associações.
Ao longo de o trabalho de, Móra e Giraa detectaram a necessidade de uma organização das etapas e dos passos necessários para a modelagem e programação de agentes BDI.
A idéia de uma técnica para modelar e programar tais agentes, desencadeou o trabalho realizado por Oliveira e Roza e este trabalho.
Dada a importância da ferramenta X-BDI no contexto da pesquisa em agentes modelados com BDI e a necessidade de se ter uma técnica para programação destes agentes, decidiu- se construir um editor para programação orientada a agentes BDI, associado à ferramenta X-BDI.
Este editor, E-BDI, busca contribuir para tornar o X-BDI mais operacional e utilizável para os mais diversos grupos.
O editor não trata das questões de semântica de um programa BDI, porém o trabalho aborda estas questões, uma vez que a visualização e depuração do modelo (razoavelmente complexas) são tratadas quando o projetista implementa os agentes via a abordagem proposta.
Assim, o que se propõe é um conjunto de passos a serem considerados para programar agentes BDI e o editor surge para facilitar e garantir que o processo ocorra de maneira mais legível e facilitada para o programador.
A modelagem do comportamento do agente é baseada na descrição formal (especicação) dos estados mentais desse agente.
Assim, a dificuldade de se modelar e implementar agentes BDI se concentra na descrição do conjunto de estados mentais ligados ao agente, pois essa descrição segue um paradigma declarativo, ou seja, ao invés de se descrever, diretamente, o comportamento do agente, descreve- se Os seus desejos e crenças, sendo seu comportamento gerado a partir de esta descrição.
Se, por um lado, descrições declarativas tendem a ter um nível de abstração mais alto, facilitando a modelagem, por Outro, à medida que as descrições crescem, visualizar e depurar o modelo tende a ser razoavelmente complexo.
Como já mencionado, o X-BDI é um ambiente de modelagem e uma linguagem de programação de agentes BDI.
Porém, é importante que claro que o processo de modelagem de um agente BDI não faz parte do escopo deste trabalho.
Uma vez existindo esta modelagem, a questão que se Apresenta é como implementar este agente, a m de se validar a modelagem previamente definida.
Em este ponto é que surge a proposta deste trabalho.
O X-BDI, como linguagem de programação, fornece um conjunto de termos (vocabulário), regras (sintaxe signicado (semântica), que são compreendidos por o projetista e que permitem a formulação de instruções que serão processadas e executadas por o computador.
Implementar um agente BDI é escrever as especicações referentes aos estados mentais, obedecendo ao conjunto de termos, regras e signicado, para que essas especicações sejam executadas.
O processo de execução dá condições ao projetista de vericar se o comportamento especicado, com suas respectivas propriedades, realmente aconteceu;
Gera o raciocínio do agente, inserido numa aplicação especíca, como no caso de o ambiente MCOE.
Afigura 4.1 exemplica a situação descrita.
Antes da descrição da técnica proposta, é interessante trazer o conceito da palavra técnica.
Conforme, técnica é o conjunto de processos de uma arte, ou a maneira, jeito ou habilidade ½Que também pode ser entendido como codicar, colocar em código.
A o código.
O processo de implementação pode ser executado de duas maneiras: (inicia- se por o conjunto de ações a serem executadas e constrói- se a estrutura de desejos e crenças associadas ou;
A seguir são descritos os dois conjuntos de passos a serem seguidos durante a implementação.
A maneira mais natural de se implementar um agente BDI é começar por a codicação do conjunto de Ações, seus efeitos (pós-condições) e seus requisitos (pré-condições).
Em o exemplo do robô (vide seção guardar um objeto percebido no balcão causa a crença de que o objeto não está mais no balcão e a crença que o objeto está guardado;
E carregar a bateria, quando é percebido sinal baixo, causa a crença de que a bateria está recarregada.
Afigura 4.2 mostra o código inicial.
Identity (rbt).
O próximo passo é, para cada ação escrita, codicar o conjunto de estados mentais, de caráter motivacional, que tem como função conduzir o agente a ação.
Os desejos representam o estado motivacional do sistema.
Um estado mental é motivador se é um mecanismo ou representação que 1.
Identity (rbt).
Se desejo é um estado motivacional que tende a produzir, modicar ou selecionar ações à luz de as crenças, então o próximo passo é codicar as crenças que ativam esses desejos e as crenças que são pré-requisitos de ações.
Afigura 4.4 mostra o código com as crenças inseridas.
Em esta fase da implementação existem duas formas de associar crenças aos desejos e crenças, como pré-requisitos, às ações:
Por outras crenças, como ocorre na linha 4 daFigura 4.4.
Ações do agente, como ocorre na linha 8 daFigura 4.4.
Assim sendo, toda vez que for detectada a necessidade de uma nova ação e a necessidade de associar, A esta nova ação, uma estrutura de desejos e crenças, a seqüncia descrita deve ser executada.
A outra maneira de se implementar um agente BDI é iniciar por a codicação dos desejos.
Em o exemplo da seção 3.4.4.3, o robô possui dois desejos:
Afigura 4.5 mostra código inicial.
O próximo passo é codicar as crenças que ativam esses desejos.
Afigura 4.6 mostra o código com as crenças inseridas.
Como na primeira alternativa de implementação, nesta fase, também, existem duas formas de Associar crenças a desejos:
Crenças a partir de crenças e crenças causadas por ações.
Por último, codicar as ações que levam ao estado pretendido por os desejos, bem como suas pré e pós-condições.
Afigura 4.7 mostra o código com as ações associadas.
Assim sendo, a exemplo da seqüncia de implementação anterior, toda vez que for detectada a necessidade de uma nova ação e a necessidade de associar, a esta nova ação, uma estrutura de desejos e crenças, a seqüncia descrita deve ser executada.
Finalmente, independente da forma que se escolher para o processo de implementação, o programador deve levar em consideração que:
Para cada ação deve existir um desejo que tem como função conduzir o agente a ação;
E para cada desejo deve existir, no mínimo, uma ação que leve ao estado pretendido;
A luz das crenças, então, para cada desejo deve existir, pelo menos, uma crença que o ative;
Crenças podem ser dependentes de outras crenças;
Como descrito na seção anterior, à medida que as descrições declarativas crescem, a visualização e depuração do modelo do agente tendem a ser razoavelmente complexas de controlar.
Outro problema que ocorre está ligado à percepção das inconsistências deste modelo.
Essas inconsistências são muito difíceis de serem percebidas na fase de modelagem.
A descrição declarativa dos estados mentais pode formar uma coleção de relacionamentos, extremamente, complexos entre os desejos, crenças e ações.
Se o projetista tiver a possibilidade de utilizar uma estrutura visual que represente os estados mentais e suas inter-relações, facilitando a vericação de possíveis inconsistências que ocorram no processo de modelagem, a validação do modelo, previamente denido, será uma tarefa mais amena.
A especicação de uma notação para os estados mentais e suas inter-relações numa representação gráca facilita a visualização e depuração do modelo do agente.
Assim sendo, propõe- se uma notação para representar gracamente os estados mentais e suas inter-relações, gerados durante a implementação de agentes BDI.
A notação proposta pode ser visualizada naFigura 4.8.
Foi detectada A necessidade de utilizar diferentes Figuras geométricas para representar os estados mentais, a m de facilitar a visualização e compreensão da representação gerada.
Portanto, para cada estado mental existe uma representação gráca, bem como para os relacionamentos existentes entre estes estados mentais.
A notação proposta facilita a visualização do uxo de execução do programa X-BDI, proporcionando maior compreensão e legibilidade do código digitado.
O editor, uma vez orientado a essa estrutura gráca, permite a visualização dos diagramas de estados mentais, de modo que o projetista possa manter um registro desses estados mentais codicados, como A seqüncia daFigura 4.10.
Portanto, a visualização possibilita ao projetista ir conferindo as relações entre as crenças e desejos, desejos subordinados, ações correlatas e interdependências.
Descrita a proposta de técnica para a programação BDI, faz- se necessário a descrição das funcionalidades e comportamento do editor, o qual representa a instância física da proposta deste trabalho.
O editor foi construído utilizando a linguagem de programação Java.
A escolha por a linguagem Java foi devido a questão da portabilidade.
A linguagem Java permite a construção de programas que podem executar em diferentes arquiteturas sem a necessidade de se re-escrever o código.
Isto é possível porque Java utiliza um processador &quot;virtual».
Ao contrário de Pascal ou C+, o compilador Java não gera código para nenhum processador especíco (para cada tipo de processador/ sistema operacional é necessário escrever um compilador novo).
Ao invés de isso, o compilador Java gera código para uma Arquitetura hipotética, a chamada máquina virtual ou JVM.
De essa forma, o editor proposto não ca limitado para ser utilizado num processador ou sistema operacional especíco.
A seguir, são descritas a interface do editor com o usuário e a arquitetura da aplicação E-BDI.
A interface do editor com o usuário é composta por quatro janelas principais:
De arquivo, bem como, comandos para controlar a análise sintática e a visualização da Janela Relationship (C), comandos para gerência das mensagens da Janela Messages (e comandos de ajuda.
A Janela de Controle é composta por as barras de menu e de ferramentas.
A barra de menu é composta por os menus:
Estados mentais e seus relacionamentos, são gerados.
É nessa janela que o projetista verica se, para uma dada ação do agente, existe pelo menos:
Um desejo que ative esta ação;
Uma crença 4 Maioresdetalhes sobre estes arquivos na seção 3.4.4.3.
Para compreender melhor o comportamento do editor, aFigura 4.19 mostra o diagrama de Casos de Uso da UML, que descreve o comportamento de um sistema sob a ótica dos usuários nais, isto é, descreve os requisitos de um sistema, especicando o que o sistema deve fazer sem se preocupar em como é implementado.
Concluindo, o uso do editor está baseado na descrição dos estados mentais de forma textual e a respectiva visualização para melhor entendimento da relação entre os desejos e as crenças associadas.
Desta forma, o editor permite:
Visualizar e organizar as informações (os estados mentais desejos e crenças) a serem processadas no kernel cognitivo do X-BDI;
Analisar sintáticamente o código X-BDI digitado;
Analisar os estados mentais denidos, detectando de forma estática (visual) algumas inconsistências (contradições e deadlocks);
Auxiliar na validação da modelagem do agente, previamente definida.
Por exemplo, a mudança na base de crenças (revisão, remoço, etc.), a adoção de um desejo candidato à intenção e a conrmação ou não de uma expectativa.
Além disso, o editor tem funções de auxílio para o usuário, no que concerne a aspectos de modelagem e implementação de agentes BDI.
Esse auxílio ocorre por meio de alguns exemplos de código e de sintaxe para o código X-BDI, como mostram asFiguras 4.22 e 4.21.
Em esta seção, é ilustrado a aplicação do editor com o exemplo do robô utilizado na seção 4.1.
O robô realiza as seguintes ações:
Balcão e a crença que o objeto está guardado;
E carregar a bateria, quando é percebido sinal baixo, causa a crença de que a bateria está recar regada.
Os passos são:
Codicar o conjunto de ações, seus efeitos e seus requisitos.
Afigura 4.23 mostra o código inicial.
Existem duas formas de associar crenças aos desejos e crenças, como pré-requisitos, às ações:
Codicar crenças a partir de crenças.
As crenças que são gatilhos para desejos (linha 2 daFigura 4.25), são disparadas por outras crenças, como ocorre na linha 3 daFigura 4.25;
codicar crenças causadas por ações.
As crenças que ativam desejos (linha 2 daFigura 4.25), são as pós-condições de ações do agente, como ocorre na linha 6 daFigura 4.25.
Assim sendo, toda vez que for detectada a necessidade de uma nova ação e a necessidade de associar, A esta nova ação, uma estrutura de desejos e crenças, a seqüncia descrita deve ser executada.
O robô possui dois desejos:
Que a bateria esteja sempre carregada;
Os passos são:
Inseridas. E pós-condições.
A Figura 4.28 mostra o código com as ações associadas.
Assim sendo, a exemplo da seqüncia de implementação anterior, toda vez que for detectada a necessidade de uma nova ação e a necessidade de associar, a esta nova ação, uma estrutura de desejos e crenças, a seqüncia descrita deve ser executada.
Conclusões, Limitações, Trabalhos A questão de pesquisa norteadora deste trabalho foi:
Que características deve ter uma técnica de programação para auxiliar a implemen-tação de agentes BDI?
E, este trabalho contém uma proposta que responde esta questão.
Inicialmente, detectou- se a necessidade de entender e, assim, denir a noção da expressão &quot;técnica de programação».
Desta forma, deniu- se que uma técnica de programação é o conjunto de métodos e pormenores práticos essenciais ao processo de codicação/ implementação, que possibilita uma melhor estruturação do programa em determinado domínio, fornecendo maior legibilidade do código escrito e, principalmente, facilitando a busca da solução do problema.
Em seguida, foi proposto um conjunto de passos a serem seguidos durante a implementação de Agentes baseados na arquitetura BDI, a m de melhor estruturar o código.
No entanto, vericou- se que a técnica de programação deveria permitir a visualização da organização dos desejos, crenças e suas inter-relações.
Para isso, deniu- se uma notação para representar os estados mentais e suas inter-relações, que fazem parte desse programa BDI.
Assim, de forma visual, o projetista pode Acompanhar o processo de codicação, conferindo se para um determinado comportamento existe um conjunto completo de estados mentais que, realmente, dê condições deste comportamento se vericar, facilitando o processo de implementação.
Além disso, a visualização permite que o projetista perceba possíveis inconsistências na organização dos estados mentais, antes da sua execução no X-BDI, auxiliando, também, na validação da modelagem.
Através dos estudos realizados, foi detectado um tipo de inconsistência que pode ocorrer na modelagem e implementação de agentes BDI:
Ações que deixariam O estado informacional do agente inconsistente.
Mas, se as inconsistências/ contradições surgirem, O ambiente X-BDI possui mecanismos para remover- las (ver capítulo 3, seção 3.4.4.2 -- Revisando intenções).
A construção de uma ferramenta associada a esta técnica proposta, facilita o seu uso e compreensão.
O E-BDI é esta ferramenta associada à técnica, ou melhor, como descrito ao longo deste trabalho, é a instância física de todo o processo de programação de agentes BDI, baseados no modelo X-BDI.
Acredita- se que todos os objetivos foram atingidos e os resultados alcançados, bem como o protótipo disponibilizado, sugerem que as alternativas, aqui apresentadas, são promissoras e podem ser Ampliadas.
Como todo trabalho de mestrado, algumas questões se mantém em aberto e o resultado possui um conjunto de limitações, em função de o prazo estabelecido para o desenvolvimento deste.
Em o contexto Atual, um trabalho desta natureza possui menos de um ano para o seu desenvolvimento.
E-BDI. Entretanto, esta questão da notação será considerada uma limitação, neste momento, sendo sugerida como um tema para discussão em trabalhos futuros.
Ou seja, avaliar se um acréscimo, ou não, de elementos visuais na notação, facilitará o entendimento do projetista/ programador em relação A organização dos estados mentais e suas inter-relações.
A especicação da gramática do X-BDI, utilizada no editor, é restrita, pois trata- se de um protótipo.
Considerando- se uma implementação mais abrangente e consolidando- se a hipótese de que a notação deverá ser diferenciada, certamente a especicação da gramática necessitará ser ampliada.
Assim, estender a especicação da gramática do X-BDI, seria um outro trabalho futuro a ser considerado.
Outro aspecto relativo à gramática, está ligado ao fato de que o X-BDI permite a descrição de meta-conhecimento, ou seja, é possível expressar a crença ou desejo que um agente a respeito de crenças de outros agentes.
Por exemplo: Bel, como amplamente Utilizado no MCOE de Giraa.
Em este caso, expressa- se a crença que o tutor possui a cerca de a crença de um aluno sobre determinado estado.
Mas, poderia- se- ter uma crença do tutor sobre como determinado aluno percebe ou constrói conhecimento sobre determinado conceito ou situação.
O nível de meta-conhecimento é amplamente explorado e utilizado quando pretende-se implementar Agentes pedagógicos cognitivos.
Em este aspecto, o E-BDI apresenta uma forte limitação para a especicação de agentes pedagógicos.
O tratamento desta limitação é um possível trabalho de conclusão de graduação do Curso Bacharelado em Informática, em que se trabalhará na ampliação da especicação da gramática do X-BDI, inserida no editor.
Outro trabalho futuro será a ampliação do editor, no que concerne à programação de agentes BDI por meio de o E-BDI, onde a implementação acontecerá, também, por a janela de Visualização Gráca do editor, isto é, o projetista/ programador denirá os possíveis estados mentais para o comportamento esperado do agente, inserindo desejos, crenças e ações na respectiva área, sendo as senteças X-BDI geradas automaticamente na Janela de Texto do editor.
A técnica, aqui proposta, é uma sistematização de um conjunto de idéias preexistentes no grupo de pesquisa, em o qual insere- se este trabalho.
Estas idéias preliminares, que serviram como base para A proposta da técnica, foram aplicadas por Móra e Giraa no protótipo MCOE.
Logo, existiu uma Avaliação prévia das possibilidades e potencialidades do conjunto de métodos práticos essenciais à codicação/ implementação num trabalho, onde foi necessário a programação de agentes BDI.
Entretanto, considera- se que esta avaliação foi pouco eciente, uma vez que os autores são os orientadores deste trabalho.
A m de vericar se a proposta auxiliava na programação de agentes BDI, a técnica foi explicada e o E-BDI disponibilizado para colegas com trabalhos correlatos.
Em estes trabalhos, Goulart e Cunha precisaram entender aspectos relativos a programação de agentes BDI, utilizando como ferramenta o X-BDI.
O resultado inicial foi incentivador e mostrou as possibilidades de aplicação desta proposta.
Novamente, considera- se que essa avaliação, apesar de menos tendenciosa que a anterior, não se constitua numa avaliação efetiva da técnica proposta.
Em virtude de limitações de tempo, não foi possível disponibilizar o editor e a respectiva técnica para usuários fora de o grupo.
Julga- se importante que este tipo de avaliação seja feito em futuro próximo.
No entanto, já existe a solicitação, de outros grupos de pesquisa, para a utilização do editor e do X-BDI.
Através dos seguintes sites eletrônicos:
Um link para envio de sugestões e críticas à técnica proposta.
Outra avaliação que será realizada, acontecerá na disciplina de Sistemas Multiagentes do PPGCC da PUCRS no segundo trimestre do ano de 2002.
Em o tópico relativo a agentes cognitivos pretende-se disponibilizar o editor, para que os alunos realizem trabalhos.
Ao longo de o trabalho, obteve- se a aprovação de artigos em diversos eventos.
