Alguns trabalhos que contemplam o universo dos sistemas multiagentes utilizam agentes dotados de estados mentais.
Esses trabalhos apresentam uma documentação produzida sobre seu resultado final, porém não especificam o processo de criação dos seus estados mentais.
Nenhuma técnica de modelagem de estados mentais foi completamente especificada a fim de cobrir essa lacuna.
Assim, o presente trabalho analisa ferramentas e metodologias utilizadas para modelagem de sociedades multiagentes e propõe uma metodologia de modelagem de estados mentais em agentes denominada MENSSAGENS, que considere aspectos desde a concepção até a validação constituindo uma ferramenta para guiar os passos do projetista de estados mentais.
Para demostrar a viabilidade da metodologia proposta foi realizado um estudo de caso que utilizou- se de uma arquitetura multiagente genérica denominada M-DRAP, que foi escolhida devido a possibilidade de refinar o seu modelo de agentes com comportamento baseado num modelo Evento-Resposta, através da inclusão de estados mentais em sua arquitetura.
Para esse objetivo, é necessária a utilização de um formalismo que contemple o universo dos estados mentais.
O X-BDI é um modelo que oferece suporte a esses estados mentais por apresentar um formalismo lógico bem definido que além de apresentar um modelo formal de agentes também pode ser utilizado para implementar agentes.
Desta forma, a utilização destas duas ferramentas (M-DRAP, X-BDI) permitiu realizar um experimento com a metodologia proposta.
Palavras-chave: Estados Mentais, Sistemas Multiagentes, Metodologias de Modelagem de Sistemas.
Várias abordagens e projetos tem considerado suas aplicações dentro de o paradigma de agentes, desde interfaces a complexos sistemas distribuídos.
Para isso, o agente deve ter algumas características associadas com a inteligência humana, tais como:
Adaptabilidade, independência, criatividade, autonomia, entre outros.
Mesmo assim há uma dificuldade em definir o termo agente devido principalmente ao uso indiscriminado do termo, utilizado de diferentes formas e com significados variados.
Sociedades formadas por agentes formam os chamados Sistemas Multiagentes.
A tecnologia multiagente tem migrando dos laboratórios de pesquisa para os centros de engenharia de software, onde suas teorias e metodologias podem ser aplicadas para uma grande quantia de domínios, tais como:
Comércio eletrônico, telecomunicações, controle de trânsito, controle de indústrias em geral, entre outros.
Apesar de essa evolução tecnológica ainda há uma carência de métodos para modelar e projetar sistemas que apliquem essa tecnologia.
Uma vez que não existe uma metodologia consolidada para a modelagem de sistemas multiagentes, alguns autores tem utilizado outros paradigmas para esse fim, de entre eles o da orientação a objetos sendo um dos mais utilizados.
Baseado nos conceitos de objetos e agentes é possível observar que existem algumas características comuns aos dois paradigmas.
Considerando essas similaridades podese pensar na possibilidade de modelar um agente como um objeto, e um tipo de agente como uma classe, estabelecendo uma relação entre a programação orientada a agentes e a programação orientada a agentes, desde que os agentes sejam idealizados como objetos As capacidades deliberativas, os estados mentais, entre outros, são características de agentes que não podem ser tratadas diretamente por a orientação a objetos.
Assim, a sua utilização na modelagem de sistema multiagentes pode estar sendo inadequada.
A insistência na utilização de um paradigma dentro de outro pode estar atrasando o desenvolvimento de uma metodologia específica que poderia suprir essas lacunas deixadas por a orientação a objetos e estabelecer os métodos e técnicas para que se modele as sociedades de agentes diretamente dentro de o paradigma da orientação a agentes.
Agentes dotados de capacidades deliberativas e estados mentais são aqueles que possuem a capacidade de selecionar seus objetivos, raciocinar sobre eles, selecionar ou criar planos, detectar conflitos entre planos, executar e revisar os planos, produzir decisões, entre outros.
Existem trabalhos que apresentam agentes dotados de estados mentais(, entre outros) mas é possível perceber que a sua documentação é efetuada em cima de o produto final, ou seja, não é apresentada nenhuma técnica para documentar o processo de desenvolvimento desses estados mentais.
Justamente para cobrir essa lacuna deixada em alguns trabalhos, encontra- se a proposta deste estudo que é prover uma metodologia de desenvolvimento de estados mentais em agentes denominada MENSSAGENS, do inglês Mental States Agents.
Isso possibilitaria a documentação do processo de modelagem de estados mentais desde a sua concepção até a sua etapa de validação e fornecendo ainda uma ferramenta que guie os passos do projetista de estados mentais que, até então, não tinha nenhuma documentação que lhe indicasse os passos de como começar e realizar o desenvolvimento desses estados.
Este trabalho está estruturado em sete capítulos.
O segundo capítulo apresenta um referencial teórico, onde é introduzido o conceito de Sistemas Multiagentes, algumas ferramentas que apresentam uma metodologia de desenvolvimento de agentes em sua estrutura e algumas metodologias propriamente ditas que são utilizadas no desenvolvimento de agentes e SMA.
Em o terceiro capítulo são introduzidos alguns conceitos no que diz respeito aos estados mentais utilizados na proposta deste estudo.
Em o quarto capítulo é realizada uma descrição da metodologia M-DRAP utilizada no estudo de caso realizado para validar a proposta deste trabalho e completamente especificado no capítulo seis desta dissertação.
O quinto capítulo apresenta a proposta deste estudo que diz respeito a uma metodologia de desenvolvimento de estados mentais em agentes.
Em o sétimo capítulo são apresentadas as considerações finais, destacando os resultados obtidos e os trabalhos futuros a serem desenvolvidos como continuidade dessa pesquisa.
Em este capítulo são apresentados alguns trabalhos que contemplam métodos e projetos de agentes, bem como ferramentas que trazem implícitas em sua estrutura uma metodologia de desenvolvimento de agentes e uma breve contextualização do tema &quot;Sistemas Multiagentes».
Sistemas multiagentes são sistemas computacionais distribuídos.
Como todo sistema distribuído, eles são compostos por uma certa quantidade de entidades computacionais interagindo.
Porém, ao contrário de os clássicos sistemas distribuídos, suas entidades são inteligentes, no sentido de que a elas podem ser atribuídos conceitos cognitivos como:
Esses sistemas tem sido estudados como uma parte da Inteligência Artificial, a qual se interessou por esses sistemas devido a suas habilidades para:
Os sistemas multiagentes pressupõem coordenação entre os agentes para que eles possam resolver algum problema, garantindo assim um trabalho em conjunto coerente para que seus objetivos sejam atingidos por a comunidade como um todo, formando uma solução única para esse problema.
Tais sistemas permitem modelar o comportamento de um conjunto de agentes inteligentes organizados de acordo com leis sociais.
Estes agentes dispõem de uma certa autonomia e estão imersos num ambiente com o qual necessitam interagir, motivo por o qual devem possuir uma representação parcial desse ambiente e meios de percepção e comunicação.
Em um sistema multiagente, agentes podem apresentar diferentes graus de heterogeneidade, ser idênticos ou diferir apenas nos seus recursos exclusivos.
Podem também diferir nos métodos de resolução de problemas e em seu nível de conhecimento do mundo.
Eles partilham somente de uma linguagem de interação, sendo as suas características possivelmente diferentes.
Em a maior parte dos sistemas existentes, os agentes da comunidade multiagente possuem conhecimentos diferentes, mas geralmente relacionados.
Sendo assim, a resolução de um problema dentro desse paradigma pressupõe a interatividade entre os agentes da comunidade.
A necessidade dessa interação resulta da existência de dependência entre as tarefas a executar por os vários agentes, da obrigatoriedade na satisfação de restrições globais, ou ainda da incapacidade de resolução de uma tarefa individualmente.
Devido a pouca quantidade de métodos e modelos específicos que contemplem o universo dos agentes e sistemas multiagentes, o estudo de algumas ferramentas, tais como o Agent Builder, o Zeus Toolkit, o DESIRE e o IMAGE foram necessários para que se estudasse suas metodologias de construção de agentes e como esses agentes se encontram estruturados.
Agent Builder é uma ferramenta desenvolvida por a Reticular System Inc..
Para a construção de agentes dotados de estados mentais baseada no trabalho de Shoham (AGENTO) para descrever agentes.
Para a Reticular um agente de software é visto como um software autônomo, isto é, um programa capaz de cumprir suas funcionalidades sem a intervenção do usuário, tendo ainda a habilidade de se comunicar com outros agentes ou ainda agentes humanos, e possuindo capacidade de perceber e monitorar o ambiente.
A capacidade de se comunicar indica que o agente possui a habilidade de cooperar com outros agentes.
Assim é possível constatar que a cooperação é de suprema importância e é a principal razão para se utilizar vários agentes na solução de um problema.
Os agentes desenvolvidos por a ferramenta possuem crenças, capacidades, compromissos, regras comportamentais e intenções, onde:
Crenças representam uma parte fundamental do modelo mental do agente, as crenças representam estado corrente do agente tanto com relação a ele mesmo quanto com relação a o estado do mundo.
Capacidades representam as construções utilizadas por o agente para associar uma ação com suas pré condições necessárias.
As pré condições devem ser satisfeitas antes da execução da ação.
As capacidades são utilizadas por os agentes para decidir se irão adotar compromissos sendo também utilizadas para determinar se uma ação comprometida pode ser executada.
Compromisso é um acordo geralmente comunicado a outro agente, para executar uma ação num determinado tempo.
A seqüência mais usual de operações é dada dessa forma:
O agente X envia uma requisição de compromisso para o agente Y, o agente Y aceitará ou rejeitará o pedido baseado nos detalhes do pedido, suas regras comportamentais e modelo mental corrente.
Finalmente, o agente Y envia uma mensagem indicando sua aceitação ou recusa.
Regras comportamentais no modelo de Shoham dizem que uma ação somente será executada como o resultado de um compromisso.
A Reticular estendeu essa idéia de compromisso para uma regra comportamental mais geral, onde regras comportamentais determinam o curso da ação tomada por cada um dos agentes durante a sua execução.
Regras comportamentais iniciam o conjunto de respostas possíveis para o ambiente como descrito nas crenças correntes do agente.
Se as condições da regra estão satisfeitas no ambiente, então a regra é aplicável e as ações por ela especificadas são executadas.
Uma intenção é um acordo usualmente comunicado a outro agente com a finalidade de se atingir um estado em particular num determinado tempo em particular.
Intenções são similares a compromissos onde um agente executa uma ação em nome de outros.
Porém, um compromisso é um acordo para executar uma única ação enquanto que uma intenção é um acordo para executar qualquer ação necessária para atingir um estado desejado do mundo.
Para que um agente seja considerado inteligente segundo ele deve ser capaz de aprender com o ambiente e com suas ações e reações.
Em a figura 1, existe uma classificação de agentes, agentes inteligentes e agentes verdadeiramente inteligentes:
A figura 2, ilustra a arquitetura do agente inteligente da Reticular.
Em esta arquitetura um intérprete continuamente monitora mensagens que chegam, atualizam o modelo mental do agente e toma ações apropriadas para determinadas situações.
O modelo mental contêm a crença corrente, compromissos, intenções, capacidades e regras do agente.
Embora regras e capacidades sejam estáticas, as crenças do agente, compromissos e intenções são dinâmicas e podem ser alteradas a qualquer momento.
O ciclo de execução do agente consiste dos seguintes passos: --
processar novas mensagens; --
determinar quais regras serão aplicadas para a situação corrente; --
executar as ações especificadas por essas regras; --
atualizar o modelo mental de acordo com essas regras;
Zeus é uma ferramenta desenvolvida para assistir o desenvolvedor de sistemas com agentes colaborativos, sendo motivado por a necessidade de prover um construtor de agentes colaborativos genérico.
Zeus toolkit por si só é um pacote de classes implementado na linguagem de programação Java, permitindo que seus agentes possam ser executados em várias plataformas, sendo que cada agente é composto de três camadas:
Uma camada de definição, uma camada organizacional e uma camada de coordenação.
A camada de definição inclui as capacidades do agente de raciocinar, seus objetivos, recursos, habilidades, crenças, preferencias, etc..
A camada organizacional descreve os relacionamentos dos agentes com os outros do sistema.
A camada de coordenação diz que cada agente é modelado como uma entidade social em termos de coordenação e técnicas de negociação que eles possuem Existem seis estágios na metodologia de desenvolvimento Zeus, conforme figura 3: O estágio inicial é o Estudo do Domínio e Identificação do Agente, durante o qual o desenvolvedor analisa o domínio do problema para identificar os agentes.
Os principais candidatos a agente são aquelas entidades que podem atuar autonomamente, isto é, são capazes de funcionar sem a interação humana.
Outros candidatos a agentes são identificados na fase de definição dos agentes, atividade que envolve a interação com o desenvolvedor para identificar os atributos relevantes a cada agente.
Cada agente inicia a sua &quot;vida «com um conjunto limitado de recursos e a habilidade para executar um número diferente de tarefas simultaneamente.
Consequentemente este estágio envolve a identificação do conjunto inicial de recursos possuídos por o agente, como também as tarefas que os agentes podem executar.
A fase definição dos agentes continua até que todos os agentes tenham sido considerados, e seus recursos iniciais e tarefas tenham sido identificados.
Em o próximo estágio o desenvolvedor identifica o conhecimento de cada agente.
O estágio de organização dos agentes requer informação sobre as habilidades dos agentes, podendo ser executados em conjunto com a fase de definição de tarefas.
Durante esse estágio, as tarefas que são identificadas durante a fase definição do agente são definidas em termos de custos, duração, pré-condições, produtos e restrições, onde as tarefas podem ser primitivas.
Quando todas as tarefas e conhecimentos são especificados, a fase de coordenação do agente pode iniciar.
Esta envolve os protocolos de coordenação adequados para cada agente e, provavelmente, requerer interação social com outros agentes quando executa seus deveres designados.
DESIRE é um framework que capacita projetistas de sistemas multi-agentes a concentrarem- se em seu projeto conceitual e na especificação de seus sistemas.
Esse framework foi utilizado para modelar um sistema multiagente específico, onde trata explicitamente com o conhecimento, interação, coordenação de tarefas complexas e capacidades de raciocínio no sistema.
O sistema multiagente utilizado de ilustração para o projeto é empregado no domínio de administração redes elétricas em geral e a administração de uma rede de transporte de eletricidade em particular desenvolvido no projeto ARCHON.
Gerenciar essa rede é uma atividade complexa que envolve um número de diferentes sub-tarefas como:
Monitorar a rede, diagnosticar defeitos, entre outras.
A aplicação em execução envolve sete agentes mas, quatro os principais:
Agente de controle de interface (CSI), Agente de identificação da área de blackout (BAI), Agente de análise de alarme (AAA) e Agente de restauração de serviço Em o DESIRE existem composições formais de framework para modelagem multiagente de tarefas, onde estruturas de conhecimento são explicitamente modeladas e especificadas como: --
composição de tarefas, -- troca de informação, -- sequenciamento de tarefas, -- delegação de sub-tarefas.
Para se modelar e especificar a composição de tarefas é requerido conhecimento sobre -- hierarquia de tarefas; --
tarefas informadas requerem uma entrada (input); --
tarefas informadas produzem um resultado na performance da tarefa; --
relação entre meta-objetos e questões.
Os agentes não são somente capazes de trocar informação com outros agentes, eles são também capazes de trocar informação com o mundo exterior.
Embora os dois tipos de interação sejam realizados essencialmente da mesma maneira, eles diferem em conceito O controle dos agentes e da interação é especificado em alguns componentes de controle e interação que são externos ao agente.
Dependendo da autonomia dos agentes e seus componentes, a especificação de seu controle diferirá.
A interação que existe entre os agentes e o mundo externo é efetuada de forma idêntica a interação realizada com os agentes e outros agentes.
O significado dos conceitos usados para descrever um domínio devem ser bem determinados.
Os conceitos são necessários para identificar objetos distintos no domínio, mas também para expressar os métodos e estratégias empregados para realizar uma tarefa, podendo os conceitos e relações entre conceitos serem definidos em hierarquias e regras.
Os agentes inseridos nesse sistema possuem um modelo genérico de estrutura onde eles conhecem seus processos de controle, atualizam suas informações sobre o estado do mundo, gerenciam suas comunicações com outros agentes e ainda podem ter alguns módulos específicos de tarefas, como o módulo de diagnóstico de falhas ou problemas.
Em a figura 4, essa estrutura genérica é melhor representada.
A especialização e instanciação de cada um desses três módulos genéricos, pode diferenciar muito significativamente entre os agentes componentes do sistema.
Os módulos específicos apresentam funções diferentes de acordo com o tipo de agente onde estão inseridos.
O objetivo do IMAGE é desenvolver um formalismo de domínio e desenvolver um ambiente para modelar e construir sistemas multiagentes que venham a requerer um alto grau de cooperação entre agentes autônomos e heterogêneos, incluindo os agentes humanos O comportamento dos agentes é dirigido aos objetivos, onde um agente chefe representa o conhecimento de como o mundo pode ser alterado por a execução de suas tarefas, e quais agentes podem realizar determinada tarefa.
A seguir é apresentado um esquema do ponto de vista de um único agente:
Para que exista comunicação entre os agentes, primeiro é necessário que eles compartilhem os planos do sistema multiagente como um todo.
Cada agente necessita apenas conhecer o seu plano mais o plano geral para que o objetivo global seja atingido.
O plano do sistema como um todo é similar ao plano de um único agente, com diferença apenas no sentido de que o plano global é mais elaborado.
A abordagem de coordenação expressa- se da seguinte maneira:
Agentes usam métodos de cooperação para criar, manter e executar planos multiagentes.
Métodos de cooperação são abstrações de esquemas de planos multiagentes que podem ser instanciados e assim customizados para ajustar o problema em questão.
Uma metodologia de modelagem de software proporciona detalhes de como fazer para se construir um software, envolvendo um amplo conjunto de tarefas que abrangem desde o planejamento até sua codificação, teste e manutenção.
Esses métodos introduzem uma visão gráfica ou orientada à linguagem, propiciando um conjunto de critérios para a qualidade do software.
Cada método de análise de sistemas tem seu próprio ponto de vista, sua própria notação e sua própria abordagem à modelagem.
Quando esses métodos são usados durante o processo de desenvolvimento do software, eles propiciam um mecanismo para eliminar muitos problemas como a ambigüidade e a inexatidão, entre outros.
Utilizandose de algum método o desenvolvedor de software tem a possibilidade de descobrir e corrigir De entre as poucas metodologias que contemplam o universo dos agentes algumas foram escolhidas para constar deste estudo devido a sua aceitação por a comunidade científica, tais como:
Mas ­ CommonKADS e a metodologia CoMoMAS.
O Mas- CommonKADS é uma extensão da metodologia CommonKADS (principal metodologia estruturada de suporte a engenharia de conhecimento) para a modelagem de sistemas multiagentes (SMA).
Essa metodologia é influenciada por outras técnicas e propõe que o processo de modelagem passe por a elaboração dos seguintes modelos:
Modelo de Agente (AM):
Especifica as características dos agentes, como raciocínio, habilidades, hierarquias, entre outras;
Modelo de Tarefas (Tm):
Descreve as tarefas que os agentes podem executar;
Modelo de Habilidades (Em):
Descreve os conhecimentos necessários para que o agente atinja seus objetivos;
Modelo de Organização (OM):
Descreve a organização física e social da sociedade de agentes;
Modelo de Coordenação (CoM):
Descreve detalhes da interação entre os agentes;
Modelo de Comunicação (Cm):
Descreve detalhes da interação entre humanos e agentes;
Modelo de Projeto (DM):
Agrega os modelos anteriores e os subdivide em três sub-modelos:
Projeto do Agente:
Seleciona a arquitetura mais satisfatória para cada agente;_
Projeto de Plataforma: Determina a plataforma de desenvolvimento de cada arquitetura de agente.
A aplicação dessa metodologia consiste do desenvolvimento de diferentes modelos, onde cada modelo consiste de constituintes do sistema e suas relações.
A seguir serão apresentadas algumas fases dessa metodologia.
Esta fase serve para se obter uma descrição preliminar do problema a ser tratado.
Trabalha- se com uma abordagem baseada no usuário, de onde se extraem alguns Casos de Uso (Use Case) que podem ajudar a definir os requisitos do sistema.
O Diagrama de Caso de Uso representado a seguir (figura 6) está contextualizado dentro de o domínio das agências de turismo.
Como resultado desta fase observa- se a especificação de alguns requisitos para o SMA, por meio de o desenvolvimento dos modelos previamente descritos.
Os passos para o desenvolvimento desses modelos são observados abaixo:
Modelagem do agente:
Desenvolver as instâncias iniciais do modelo de agente com o objetivo de se identificar e descrever os agentes;
Modelagem de tarefas:
Decompor as tarefas e determinar os objetivos e objetos constituintes das tarefas a serem executadas por os agentes;
Modelagem da coordenação:
Descrever as interações e protocolos de coordenação entre os agentes, sempre buscando uma maior coordenação entre os eles;
Modelagem do conhecimento:
Modelar o conhecimento do domínio tanto para o agente quanto para o ambiente;
Modelagem da organização:
Desenvolver o modelo organizacional.
O modelo Mas- CommonKADS apresenta as seguintes estratégias para identificação dos agentes:
Analisar os atores dos diagramas de caso de uso definidos na fase de conceitualização;
Analisar a declaração do problema;
Utilização de heurísticas para se determinar a distribuição do conhecimento, distribuição geográfica, distribuição lógica e distribuição organizacional;
Uso da descrição inicial da tarefa e a utilização de modelos especialistas ajudam a identificar as funções necessárias para o sistema e a extensão requerida de conhecimento (mínima), tendo como resultado uma definição preliminar dos agentes;
Aplicação dos casos de uso (use case) internos;
Aplicação dos Class Responsibility Collaboration (CRC), onde são descritas as classes do sistema;
Criar a interface com o usuário;
Reconsiderar o grau de profundidade que o conhecimento deve atingir junto com o papel da classe;
Depois de passar por todas essas estratégias já se pode então iniciar a criar um modelo de agente para cada agente identificado, e esse processo deve envolver nome, papel, posição, descrição, serviços oferecidos, objetivos, habilidades, capacidades de raciocínio, normas de capacidades gerais, preferências e permissões para que estabeleça- se um padrão bem identificado e documentado de agente.
As tarefas são decompostas seguindo uma abordagem Top-Down, onde a descrição de uma tarefa inclui seu nome, uma breve descrição de seus objetivos, ingredientes de entrada e saída, estrutura das tarefas, seu controle, freqüência da aplicação, pré-condições e as capacidades mínimas requeridas dos executantes.
O benefício deste modelo é a documentação de todo o processo criativo e uma melhor organização tanto antes quanto depois da introdução no sistema multiagente.
Essa fase é utilizada para modelar as capacidades de raciocínio do agente com os quais ele pode desenvolver suas tarefas e atingir seus objetivos.
Normalmente, várias instâncias desse modelo podem ser desenvolvidas, como:
Modelar inferências no domínio;
Modelar o raciocínio do agente;
Modelar as inferências do ambiente.
Esse modelo consiste basicamente do desenvolvimento do conhecimento da aplicação e o conhecimento da solução do problema.
O modelo em questão contribui com o desenvolvimento de um planejamento prévio de ações e métodos.
Representa conhecimento declarado do problema, propriedades, expressões e relacionamentos utilizando- se da conceitos modelados, Conceptual Modelling Language (CML) ou da notação gráfica apresentada por a OMT.
Representa os passos de inferência executados para resolver uma tarefa.
A estrutura de inferência é composta de tipos de inferências pré-definidos e papéis do domínio.
As estruturas de inferência são genéricas e podem ser adaptadas a qualquer domínio.
Representa a ordem das estruturas de inferência.
A notação constitui- se das estruturas de inferência e inferência de métodos de tarefas em estruturas de decomposição.
Durante o projeto pode- se especificar um Método de Solução do Problema (PSM) para cada tipo de inferência.
Um dos benefícios potenciais no desenvolvimento deste modelo é a utilização de um bom nível de conhecimento na modelagem do framework que pode ser utilizado em vários projetos diferenciados, através de sua reutilização.
Como um resultado da fase de análise, um conjunto de agentes foi determinado.
Durante a fase de projeto o modelo de projeto é desenvolvido.
Esta fase consiste de:
Projeto da rede de agentes:
A infra-estrutura dos SMA é determinada, e consiste de uma rede, conhecimento e facilidades de coordenação.
Algumas dessas facilidades podem ser:
Facilidades de rede;
Facilidades de conhecimento;
Facilidades de Coordenação Projeto do agente:
A arquitetura mais satisfatória é determinada para cada agente, e alguns agentes podem ser introduzidos ou subdivididos de acordo com critérios pragmáticos;
Projeto de plataforma:
Consiste da seleção do software e hardware que são necessários para o sistema.
Os benefícios do desenvolvimento deste modelo são:
As decisões na seleção da plataforma multiagente e na arquitetura de cada agente é documentada;
O modelo de projeto coleta as informações nos modelos previamente desenvolvidos e detalhes de como esses requisitos podem ser atingidos;
O modelo de projeto para sistemas multiagentes determina os recursos comuns e necessários para os agentes e projetos numa infraestrutura gerenciada por agentes de rede.
CoMoMAS é uma metodologia que vê o desenvolvimento de SMA de uma perspectiva da engenharia do conhecimento.
Um conjunto de modelos conceituais (modelo de tarefas, modelo de agente, modelo especialista, entre outros) é proposto e derivado da metodologia CommonKADS.
CoMoMAS é uma extensão da CommonKADS para o domínio do SMA incluindo sistemas específicos como os reativos, cognitivos, cooperativos e conhecimento social.
Um dos benefícios dessa abordagem é a visão unificada da construção de um Mas, com a construção de uma biblioteca estruturada e flexível.
A metodologia CoMoMAS utiliza um conjunto de modelos conceituais para a descrição de um SMA, este conjunto de modelos é derivado da metodologia CommonKADS, onde o desenvolvimento é por si só visto como uma atividade de modelagem, isto é, a construção de sete modelos que representam o sistema num nível conceitual.
Essa abordagem para a modelagem SMA é uma composição:
Um modelo de agente é construído dos resultados de cinco fases de análise.
Por isso, um agente é visto como uma entidade havendo um comportamento social, cooperativo, cognitivo de competências reativas.
Modelar um SMA da perspectiva da engenharia do conhecimento, motiva a identificação de diferentes tipos de conhecimentos os quais podem ser representados dentro de modelos conceituais.
Com o CoMoMAS são introduzidos cinco diferentes visões de um SMA inspirados por diferentes tipos de competências de um agente e por o projeto e aspectos de desenvolvimento, tais como:
Uma visão funcional que descreve a decomposição funcional do problema a ser solucionado por o SMA em termos de primitivas e as mais complexas entidades funcionais;
Uma visão de competência que descreve as competências cognitivas e reativas necessárias para se cumprir as tarefas e atingir os objetivos dos SMA.
Competências cognitivas resolvem problemas não triviais que são, entre outros, raciocínios clássicos e métodos de planejamento.
Competências reativas as quis são as relações de estímulo e resposta encontradas no sistema a ser modelado;
Uma visão de requisitos descreve os requisitos funcionais e não funcionais para os SMA em seus aspectos de projeto e implementação;
Uma visão cooperativa descreve as competências e interações entre os agentes que serão compostos;
Uma visão social que descreve as competências para construir e manter organizações que podem ser definidas por um conjunto de papéis associados a cada agente.
Baseado nessas visões, é introduzido o conjunto de seis modelos conceituais que é mostrado a seguir:
Uma aplicação multiagente corresponde agora a um conjunto de cinco modelos conceituais que representam as visões do sistema e um ou vários modelos de agentes construídos deste conjunto de modelos conceituais.
As maiores modificações e extensões que tem sido executadas no conjunto de modelos CommanKADS são descritos a seguir:
O modelo especialista é estendido por meio de uma integração de estratégias e comportamentos reativos.
Uma estratégia descreve um mecanismo para seleção e aplicação dos métodos de solução de problemas para um dado objetivo.
Comportamento reativo tem sido incluído como uma segunda fonte de conhecimento, para atingir os seus objetivos.
Os comportamentos reativos são ingredientes necessários para o projeto do SMA em tempo de execução.
O modelo de agente é estruturado de acordo com quatro tipos de competências, ou seja, social, cooperativo, cognitivo e conhecimento reativo.
A Análise de Requisitos tem o propósito de determinar os requisitos de projeto para os SMA.
Isto inclui uma lista de requisitos, determinando suas interdependências que são apresentadas de forma classificada.
Os resultados obtidos nesta fase têm impacto na identificação dos agentes a serem construídos.
A Análise Funcional tem a função de determinar o conjunto de tarefas que o SMA tem para resolver, o resultado dessa fase é uma hierarquia de tarefas.
Um passo subseqüente é determinado para identificar dados e a dependência entre as tarefas A Análise de Competência apresenta o objetivo de identificar as competências que o sistema deve prover para solucionar os objetivos do modelo de tarefas.
Os resultados dessa fase são armazenados na forma do modelo especialista.
O modelo especialista provê uma visão global das competências que são encapsuladas nos agentes distintos num passo futuro de desenvolvimento.
Uma Análise Social serve para identificar as competências sociais requeridas por o agente.
O conhecimento social habilita o agente a agir durante as cooperações e interações.
Isto é uma compreensão particular da utilidade social e sua competência.
O resultado da análise social é a construção do modelo do sistema.
Finalmente, a Análise Cooperativa deve identificar os protocolos de cooperação, métodos de cooperação e métodos de resolução de conflitos para os agentes.
A análise cooperativa resulta na elaboração de um modelo de cooperação para os SMA A construção de modelos de agentes é baseada nos resultados desses cinco passos de análise.
Um conjunto inicial de modelos de agentes pode ser baseado no modelo de tarefas, o que envolve identificar um subconjunto de tarefas dentro de a hierarquia de tarefas e encapsular as competências fixas nos modelos de agentes.
Este primeiro conjunto de modelos de agentes é atualizado através da integração entre reações, cooperações, conhecimento social e competências.
O processo de construção do modelo de agente segue os seguintes passos:
Análise de modelos de tarefas para construir subconjuntos de tarefas;
Identificação de agentes baseados em categorização de tarefas;
Construção de agentes com conhecimento reativo e/ ou cognitivo;
Integração do conhecimento cooperativo em modelos de agentes;
Integração do conhecimento social em modelos de agentes.
O resultado destas cinco fases de análise é a construção de vários modelos conceituais de agentes e um modelo de sistema que descreve as várias organizações e a arquitetura dos sistemas multiagentes.
Modelos de agentes são compostos de estruturas de conhecimento obtidas destes cinco passos de análise.
Cada passo de análise resulta num modelo conceitual descrevendo um SMA de um diferente ponto de vista.
O conhecimento é representado em CML, uma linguagem semi-formal introduzida no CommonKADS, o CML tem sido estendido através de construções de linguagens adicionais para a representação de modelos de agentes baseados em competência.
Um argumento para o uso do CML é o simplificado mas estruturado formalismo para a descrição do conhecimento.
A solução distribuída de problemas é um compartilhamento cooperativo entre grupos de trabalho para produzir uma solução de um problema em particular, enxergando esse problema em sua totalidade, como um todo.
Sistemas de agentes inteligentes são capazes de encapsular aplicações e banco de dados e facilitar a troca de informação e serviços por meio de cooperação com outros agentes.
Para um projeto de padrões existem dois tipos de agentes (fortes e fracos), um agente fraco é autônomo, social, reativo e pró-ativo, enquanto que um agente forte possui noções de metalingüística (crenças, objetivos, planos e intenções), racionalidade, veracidade e adaptabilidade.
Vários padrões de projetos orientados a objetos são encontrados para sistemas multiagentes.
O resultado desses projetos é uma arquitetura de software reutilizável e manutenível que facilita, na maior parte dos casos, a construção dos SMA.
Interação com Objetos existentes via sensores e atuadores ­ um sensor deve se adaptar a interface de objetos externos específicos que venham a enviar sinais a esses sensores, ele deve também interagir com os agentes via mensagens estruturadas.
Um atuador deve ser capaz de isolar um agente da plataforma ou dos fatores do domínio que diferentes tipos de objetos podem assumir numa mesma interface.
Colaboração com outros agentes ­ a colaboração entre agentes é feita através de mensagens estruturadas, como KQML, Cool ou Agent Talk.
A colaboração segue um protocolo de conversação ou coordenação que é por si só uma máquina de estados finitos Sincronização e concorrência ­ crenças, intenções e objetos coexistentes agem em diferentes thread de controle e podem requerer acesso para um ou mais recursos compartilhados.
Mobilidade ­ agentes devem acessar os outros de modos diferentes em cada situação Raciocínio automatizado ­ um agente seleciona um serviço ou plano na base de seu conhecimento declarativo.
Interação com banco de dados externo ­ um agente deve ter acesso direto com bancos de dados relacionais ou orientados a objetos para que eles possam trabalhar com os sistemas mais populares existentes.
Os padrões considerados mais relevantes em projetos de SMA são colocados e especificados a seguir.
Estes padrões são baseados em objetos ativos e seguem diagramas propostos por Booch.
Quatro objetos aparecem nos padrões de objetos ativos:
O client interface, o scheduler, o resource, e a activation queue.
São estes objetos e padrões que dirigem a sincronização e a concorrência dos SMA.
O mediador é responsável por controlar e coordenar a interação de um grupo de objetos colegas, ele é um intermediário para que colegas não tenham que se referir a cada outro explicitamente.
O mediador colega estrutura com, somente, outros dois colegas num adaptador padrão.
O adaptador transforma mensagens enviadas de um colega numa forma que o torna compreensível por outro colega.
O padrão sensor é uma variação do adaptador padrão quando uma das interfaces dos colegas é uma interface genérica.
O congestionamento das comunicações tem se tornado um problema, onde a colaboração descentralizada pode ser utilizada.
Para isso, cada agente iria requerer uma instancia de um Proxy para cada interface que ele suporta, e ele iria ter que manter informação ou conhecimento de cada agente que ele deseja interagir.
O KQML Proxy suporta a interface KQML, enquanto que o Cool Proxy e o Agent Talk Proxy suportam interfaces Cool e Agent Talk, respectivamente.
Em a colaboração de agentes via protocolos de coordenação o agente deve ser capaz de determinar seus comportamentos baseados no estado de seu protocolo de coordenação Em este padrão uma agente pode agir como um cliente ou um servidor para qualquer agente ou objeto em ele registrado.
O agente pode se tornar um membro virtual de qualquer sociedade aberta gerenciada por o Broker.
Tanto o cliente quanto o servidor deve ser registrado em eles mesmos.
Em termos CORBA, os proxies dirigem- se a uma determinada interface, normalmente definida por um Interface Definition Language (IDL), cliente e servidor não tem conhecimento direto sobre estas interfaces.
Existem dois padrões relevantes para o raciocínio do agente que são os padrões de Estratégia e de Interpretador.
O padrão Interpretador define objetos para a gramática de uma linguagem, composto dos objetos que serão usados para representar a sintaxe e os comandos a serem interpretados.
O padrão Interpretador é importante para o raciocínio orientado ao agente como um interpretador de crenças, objetivos, planos, condições de contexto e a chamada dessas condições podem ser projetadas via este padrão.
Planos são instanciados em intenções quando as crenças, contexto e chamada de condições forem satisfeitas.
Estes fatos iriam prover ao agente a sua autonomia, comportamento reativo e pró-ativo que são fundamentais para a definição de agentes.
Agentes requerem acesso a base de dados para serem capazes de participar de uma arquitetura onde existe alguma troca de informação.
Sistemas de banco de dados relacionais são os mais complexos, enquanto no relacional um agente deve ser capaz de transformar registros em objetos o paradigma orientado a objetos registros como instâncias de objetos devido a suas metodologias de projetos.
Para se mapear objetos como relações e vice-versa o agente deve ter a capacidade de Unir objetos complexos e tipos de dados num único tipo de dados;
Mapear atributos de objetos de campos relacionados com respeito a herança e relacionamento entre objetos;
Dar aos objetos uma única identidade;
Mapear as associações usando as relações entre chaves estrangeiras e primárias.
Resumindo devemos procurar sempre procurar ratar a base de dados, mesmo que relacional, como uma base orientada a objetos, porque o projeto do sistema já foi orientado para isso.
Todos os padrões vistos anteriormente devem ser integrados com o objetivo de formar um agente padrão.
Como visto anteriormente, a estrutura interna dos padrões de agentes podem ser bastante complexas.
Cada padrão lida com um diferente aspecto do agente.
Os aspectos do agente produzem a sua sensibilidade para usar uma camada dos padrões com o objetivo na integração dos padrões.
Cada camada lidará com um aspecto específico e se utilizará os serviços da camada diretamente acima ou abaixo de ela.
Isso fica mais claro nas figuras que seguem e que representam apenas quatro dessas camadas.
Embora o trabalho desenvolvido por Amandi em sua obra não seja uma metodologia de modelagem, explicitamente, ela utiliza- se da orientação a objetos para resolver algumas das situações que se apresentaram e introduziu idéias interessantes para a utilização da Metodologia Orientada a Objetos na modelagem de Sistemas Multiagentes.
O objetivo do trabalho realizado em foi introduzir uma possível solução para alguns dos problemas existentes na construção de sistemas multiagentes, tais como:
Definição de tipos de agentes:
Reativos, deliberativos e híbridos;
Expressar e manipular conhecimento em forma dinâmica, incluindo os componentes de estados mentais;
Inferir sentenças utilizando diferentes estados mentais e/ ou diferentes formas de raciocínio;
Definição dinâmica de atividades de percepção de acontecimentos, entre outros.
Para esse fim, foi desenvolvida uma arquitetura que permite compor as capacidades de agentes de forma flexível, e o suporte necessário para a sua concretização.
Para um objeto poder ser definido como uma entidade que possui capacidades comportamentais e conhecimento privado do que é necessário para a execução destas capacidades comportamentais.
Um sistema orientado a objetos é composto por um conjunto de objetos que colaboram entre si com a finalidade de alcançar os requisitos do sistema.
Com base nas similaridades apresentadas na tabela 1, e o fato de que agentes comunicam- se através de mensagens, o paradigma de orientação a objetos apresenta- se como uma boa alternativa para o desenvolvimento de sistemas multiagentes.
Ainda assim os agentes possuem características próprias que os distinguem de simples objetos.
Tais características devem ser cuidadosamente projetadas no contexto do paradigma da orientação a objetos, para que os projetos possam ser reutilizados no desenvolvimento de diferentes tipos de agentes Existem várias alternativas para o desenvolvimento de um projeto multiagente.
A alternativa que utiliza- se somente de herança para esse fim apresenta várias desvantagens devido a a rigidez que a herança impõe, onde torna- se impossível que se realize alguma mudança dinâmica do comportamento dos agentes, tais como, mudanças na linguagem de comunicação, no processo deliberativo ou nos agentes e objetos que estejam sendo observados.
Outra abordagem que pode ser utilizada é a incorporação de composição no projeto a ser analisado, o que torna o trabalho mais flexível, essa alternativa permite compor alguns aspectos comportamentais próprios de agentes, mas requer muito cuidado na administração de tal composição.
Essa abordagem mostra uma forma mais flexível de se tratar os processos que colaboram na deliberação.
Uma outra abordagem ainda é baseada na reflexão computacional que resolve alguns dos problemas que não foram resolvidos totalmente ou satisfatoriamente por as abordagens que utilizam- se de herança ou composição, permitindo que objetos sejam utilizados como a base computacional sobre a qual capacidades de agentes podem ser incorporadas através de um meta-nível que será explorado em maiores detalhes na seção que segue.
Um sistema multiagente pode ser considerado como um sistema orientado a objetos com um meta-sistema que adiciona o comportamento inerente aos agentes.
A arquitetura Brainstorm define como os sistemas multiagentes podem ser construídos em termos de um meta-sistema de um sistema orientado a objetos, onde esta arquitetura baseia- se no conceito de reflexão computacional, materializando este último conceito através de meta-objetos.
Assim um agente pode ser definido em termos de um objeto e vários meta-objetos, os quais são responsáveis por as características inerentes a agentes.
A figura 11, apresenta um esquema de alto nível da arquitetura Brainstorm, o qual mostra os componentes que são responsáveis por as capacidades mais gerais dos agentes.
Podendo- se observar uma composição de alto nível reflexivo, que permite que um objeto se comporte como um agente, e sua relação com o nível base.
A separação das capacidades de um agente em três diferentes meta-níveis (primário, comportamental e preditivo) é uma conseqüência direta do grau de responsabilidade que é estabelecido entre as atividades envolvidas em cada uma dessas capacidades.
Cada nível da parte reflexiva da arquitetura define um conjunto de componentes que tem algum grau de responsabilidade nas atividades realizadas por os componentes do nível imediatamente inferior.
Cada componente pode inferir no processamento das atividades realizadas por componentes situados no nível imediatamente inferior, acrescentando assim a funcionalidade do nível inferior.
Em a arquitetura Brainstorm, o meta-nível denominado primário contém quatro componentes principais:
Gerente de estado mental, gerente da linguagem de comunicação utilizada, o perceptor de eventos acontecidos no ambiente e o gerente de situações.
O gerente de estado mental de um agente é responsável por os objetivos, crenças e outras atitudes mentais que o agente possui, este componente surge do fato de que objetos não tem a capacidade de gerenciar atitudes mentais e um meta-objeto com a responsabilidade de gerenciar- las apresenta- se como uma solução adequada para o fato.
O componente gerenciador da linguagem de comunicação é responsável por o reconhecimento e tratamento das comunicações recebidas por o objeto no nível base.
O projeto deste componente é realizado através de um meta-objeto que incorpora a capacidade do gerenciamento de uma linguagem de comunicação determinada.
O componente perceptor é o encarregado de observar eventos que se produzem no ambiente, de o qual o agente faz parte.
Este componente tem a responsabilidade de conhecer o que acontece no nível base, pois as somas das mensagens trocadas entre os objetos e/ ou objeto-agentes do nível base constitui os eventos produzidos no ambiente.
O componente gerente de situações, também presente no meta-nível primário da arquitetura, é responsável por o gerenciamento das situações de interesse do agente.
Uma situação de interesse é definida em termos de eventos produzidos no ambiente e de comunicações com os outros agentes.
O meta-nível comportamental da arquitetura está formado, principalmente, por dois componentes, responsáveis por o comportamento reativo e deliberativo, respectivamente.
O componente reativo torna o processamento de situações, a cargo de o gerente de situações, em reações.
O componente deliberativo torna o processamento de situações e de comunicações, em ações com conseqüências cuidadosamente analisadas, desta maneira, o meta-nível comportamental define o comportamento reativo, deliberativo ou híbrido dos agentes a serem construídos, sendo uma extensão do tratamento de situações de interesse e de comunicações, estabelecido no meta-nível primário.
O meta-nível preditivo da arquitetura está composto, principalmente, por o componente de aprendizagem.
Este componente é projetado como um componente reflexivo, pois sua função é intervir no comportamento do agente definido no meta-nível comportamental, incorporando o aprendizado de experiências passadas.
O componente de aprendizado não é considerado um componente indispensável no projeto de determinados tipos de agentes, pois um tipo de agente puramente reativo não requer necessariamente um componente responsável por as mudanças de comportamento sugeridas por um processo de aprendizagem, assim, a composição de um agente é descrita através dos componentes mencionados, em sua maioria meta-objetos.
A arquitetura Brainstorm define um meta-nível composto de três sub-níveis os quais permitem converter o comportamento passivo de objetos num comportamento inteligente, típico de agentes, de uma maneira flexível e facilmente adaptável, ela também define como objetos podem ser utilizados como uma base para a construção de agentes.
Entretanto, a implementação desta idéia pode envolver processos de desenvolvimento complexos e, assim, expressar e manipular conhecimento para o tratamento de estados mentais é uma facilidade que um ambiente de programação de agentes deve prover.
Uma compreensão errônea faz com que as vantagens proporcionadas por a arquitetura sejam reduzidas ou eliminadas, portanto, transmitir os detalhes da arquitetura através de diagramas informacionais torna os resultados de sua utilização imprevisíveis.
A abordagem proposta em apresenta limitações, tais como, a materialização da arquitetura está vinculada a uma linguagem orientada a objetos que possua algum tipo de suporte para a criação e gerenciamento de meta-objetos.
Outra limitação apresentada é que a arquitetura é uma integração de objetos com a lógica para, assim, permitir que objetos possam gerenciar atitudes mentais através da programação em lógica.
Uma outra limitação é a eficiência de execução de aplicações multiagentes, visto que a utilização de meta-objetos traz vantagens de projeto de agentes mas, também traz problemas de eficiência, o que deverá ser levado em conta em sistemas de tempo real.
Finalmente a outra limitação encontrada está relacionada com a distribuição que os agentes requisitam.
Em a atual arquitetura foi considerada a distribuição conceitual, porém, a distribuição física de agentes pode tornar- se necessária.
Com o estudo dessas ferramentas e metodologias observou- se que trabalhar com a adaptação de metodologias já existentes pode facilitar a aprendizagem e implantação de uma nova metodologia de modelagem, ao identificar características que venham a possibilitar a sua utilização dentro de outros paradigmas fazendo com que o conhecimento anterior do pesquisador não seja abandonado, tornando a aceitação de uma determinada tecnologia mais fácil.
Desta forma, a utilização do paradigma orientado a objetos tornou- se uma técnica muito utilizada e bem aceita para a modelagem de Sistemas Multiagentes.
As capacidades deliberativas, os estados mentais, entre outros, são características de agentes que não podem ser tratadas diretamente por uma técnica que não seja especificamente desenvolvida para esse objetivo.
Assim, a utilização de técnicas que não foram desenvolvidas com essa finalidade específica, de modelagem de estados mentais, pode estar sendo inadequada.
A insistência na utilização de um paradigma dentro de outro pode estar atrasando o desenvolvimento de uma metodologia específica, o que poderia suprir essas lacunas deixadas por a Orientação a Objetos e estabelecer os métodos e técnicas para que se modele as sociedades de agentes dotados de estados mentais diretamente dentro de o paradigma da Orientação a Agentes.
Em este trabalho foram estudadas ferramentas como a da Reticular que apresentou o Agent Builder e formalizou diretamente sua arquitetura de agente não entrando nas minúcias do processo de modelagem do agente.
A ferramenta Zeus propõe uma metodologia para desenvolver a sociedade de agentes não se envolvendo diretamente na modelagem do agente.
O IMAGE apresenta um formalismo para a modelagem da sociedade de Sistemas Multiagente, concentrando- se basicamente nos aspectos de coordenação e cooperação entre os agentes da sociedade.
De entre as metodologias estudadas, a Mas- CommonKADS, a CoMoMAS e o Projeto de Padrões são métodos específicos para sociedades multiagentes, e a Arquitetura Brainstorm proposta em concentra- se em agentes tratados como objetos, ou seja, sua arquitetura está vinculada a linguagens orientadas a objetos que apresentem suporte a meta-objetos.
Assim, observou- se que nenhuma das ferramentas ou metodologias estudadas tratou do processo de modelagem especificamente do agente individualmente, menos ainda da modelagem de seus estados mentais.
Em este contexto a MENSSAGENS vem propor uma alternativa para esta modelagem.
Agentes dotados de estados mentais são aqueles que possuem a capacidade de selecionar seus objetivos, raciocinar sobre eles, selecionar ou criar planos, detectar conflitos entre planos, executar e revisar os planos, produzir decisões, entre outros.
Com todas essas características, fica mais fácil entender porque estados mentais aparecem com grande freqüência na literatura de sistemas multiagentes.
A idéia principal da utilização de estados mentais em agentes é que o agente consiga selecionar racionalmente seu curso de ação baseado nas representações desses estados mentais.
A seguir será apresentada uma série de conceitos que podem ser associados a estados mentais.
Em, crenças são definidas como sendo uma visão informativa do estado do sistema, ou seja, elas são necessárias para que o agente conheça o ambiente onde ele está inserido.
Essa visão também aparece em trabalhos mais recentes como em onde as crenças são constantemente atualizadas através do sensoramento do ambiente, representando ainda as atitudes do agente.
Já em além de o reconhecimento do ambiente ainda existe a possibilidade do agente ter crenças sobre outros agentes o que pode gerar o reconhecimento de várias situações que podem acontecer dentro de o sistema.
Utiliza uma noção de conjuntos de crenças onde as situações podem ser identificadas por esses conjuntos, sendo que através dessa identificação algumas deduções podem ser feitas.
Existem algumas variações desses conceitos, mas a grande maioria dos autores referese a crenças como sendo um estado informativo, seja do sistema como um todo ou de outros agentes individuais.
Outra possibilidade que existe nos trabalhos que envolvem crenças é a possibilidade de existir uma crença que venha a se estabelecer no futuro, ou seja, uma expectativa.
Alguns autores tratam essa possibilidade como outro estado mental e não como uma parte do conjunto de crenças do agente.
Em existe a possibilidade de se modelar crenças no futuro, o que nada mais é do que a expectativa de que essa crença venha a se verificar no futuro.
Em, é proposto um operador modal B para representar as crenças de um agente, sendo que ele apresenta dois argumentos, o primeiro representa de quem é a crença (Agente) e o segundo representa aquilo que o primeiro acredita (uma fórmula).
Por exemplo, para dizer que João acredita que o pai de Zeus é Cronus, seria utilizado:
B (joão, pai_ de (zeus, cronus).
De forma mais geral, temos:
B (A, F), onde:
A ­ é um agente;
F ­ é uma fórmula.
Desejos, assim como crenças, também apresentam várias definições como em onde um desejo é um fato que representa um estado que é possível de ser atingido, ou então um estado a ser atingido quando certas condições venham a se estabelecer.
Para um desejo representa o estado motivacional do agente, ou seja, representa um estado que ele deseja atingir.
Para o desejo é motivador e apresenta características como:
Representam uma situação ou um conjunto de situações em que o agente gostaria que o mundo estivesse, pode estar em conflito com as crenças do agente, podem existir desejos conflitantes e não causam diretamente ações.
Existem autores que referem- se a desejos como objetivos, tratando esses estados como objetivos a serem atingidos, não descartando ainda a idéia de que desejos são estados a serem atingidos apenas percebendo- os sob uma perspectiva pragmática, ou seja, dependente de contexto.
Bell também trata desejos como estados a serem atingidos em determinados instantes de tempo, sendo que esse instante pode ser um intervalo onde:
Starts (i, i') min (i) $= min (i') max (i) max (i'), ou seja, um intervalo no futuro.
É possível observar que a noção de desejo pode ser explicada de várias maneiras, mas também pode- se deduzir que todas as definições anteriores procuram representar a idéia de motivação, isto é, os desejos sempre representam estados ou objetivos a serem atingidos.
Corrêa em, descreve desejos como:
Des ­ é a identificação do desejo;
P ­ é uma propriedade;
E ­ é um indicador de prioridade do desejo;
A ­ é a identificação do agente;
L0 ­ é o local de ocorrência do desejo;
Para quando o agente decide por uma linha de ação, entre tantas outras que ele poderia escolher, o agente passa a ter uma intenção de adotar essa linha de ação.
Em uma intenção é vista como um compromisso que o agente assume com um possível futuro específico, pois ao contrário de os desejos não se pode ter intenções conflitantes devido a o fato de que elas devem encontrar suporte nas crenças do agente, ou seja, ele não pode intencionar aquilo que ele não acredita.
Fisher também trata de intenções como um compromisso com seu curso de ação ligando fortemente as intenções com as crenças e desejos do agente.
Singh diz que intenções são geradas para a satisfação de algum raciocínio e que elas apresentam algumas característica, tais como:
Em, temos que um agente &quot;A «intenciona atingir &quot;P «se o agente tem um compromisso com &quot;P «e possui planos para atingir atingir- lo, formalizando temos:
A ­ identifica um agente;
P ­ uma propriedade a ser atingida;
Em agentes deliberativos para atingir um certo grau de coordenação, e assim conduzir os agentes em direção a um objetivo comum, é necessária a utilização de técnicas de planejamento onde os planos são representados como uma seqüência de ações parcialmente ordenadas.
Um plano é descrito como a composição de passos (steps) em seqüência, compostos de ações que devem ser executadas para atingir o objetivo desse passo.
Compreendidas as definições de crenças, desejos, intenções e planos, é possível descrever o processo deliberativo de um agente do seguinte modo:
O agente percebe sinais do ambiente através de seus sensores.
A o identificar estes sinais o agente ativa um processo deliberativo, o qual reconhece os desejos (objetivos) a serem atingidos e realiza uma revisão de suas crenças onde ele procura identificar inconsistências e eliminar conflitos.
Baseado nestes desejos e crenças o agente seleciona um subconjunto de planos que pode ser aplicável à situação que foi percebida.
De esse subconjunto apenas alguns planos serão escolhidos para execução e, neste momento, são geradas intenções que passam para um módulo executor e através de seus atuadores interage com o ambiente.
O trabalho realizado em propõe uma abordagem para o problema de alocação dinâmica de recursos em ambiente de produção baseado no paradigma de multiagentes.
Para tanto, foi especificada uma arquitetura multiagente genérica chamada MDRAP.
A determinação da solução adotada compreendeu a definição de uma estratégia de planejamento para o processo de alocação de recursos e a especificação de um sistema multiagente baseado em comportamento orientado a mercado, cujos agentes apliquem esta estratégia.
Os agentes M-DRAP foram modelados da seguinte maneira:
A realidade do problema em questão envolve empresas de manufatura e, portanto, os agentes do sistema podem ser identificados dentro de um modelo de objetos representativo deste tipo de empresa.
Um modelo de empresa deve permitir o reconhecimento da estrutura do modelo de informações a partir de as associações existentes entre as classes de objetos que o compõem.
Este modelo de informações serve de subsídio para a organização da sociedade em formação.
Em este sentido, foi utilizado o Cimosa (Computer Integrated Manufacturing ­ Open System Architecture) como referencial.
O Cimosa tem como objetivos:
Apresentar uma arquitetura de referência para a construção de sistemas em CIM (computer integrated manufacturing) e tornar- se um padrão aceito por os fornecedores de produtos para CIM e seus usuários O mercado formado por os agentes M-DRAP tem como principal fornecedor os recursos de produção.
Isto se justifica em função de o objetivo essencial do M-DRAP, ou seja, a alocação dos recursos de produção a serem executados em atendimento a um evento de produção.
A competição entre os agentes responsáveis por os recursos de produção é norteada por a perspectiva de propiciar o melhor resultado global ao sistema de produção, embora estes agentes não tenham informações globais do sistema e nem sejam capazes de determinar os objetivos e comportamento aos demais agentes.
Em este sentido, os agentes consumidores do sistema produtivo, ou seja, as atividades que necessitam utilizar- se dos recursos de produção para a sua execução, deverão sempre selecionar a proposta de menor preço, propiciando naturalmente o melhor resultado econômico ao sistema produtivo.
De o ponto de vista do processo de planejamento temporal, de alocação de recursos a estratégia é favorecer os recursos de produção com maior sobrecarga de trabalho.
Em este sentido, aplica- se a lei da oferta e da procura, ou seja, quanto maior a demanda sobre um determinado recurso de produção, maior a sua prioridade em relação a os seus parceiros de execução da atividade de produção e de plano de produção quando de o planejamento para o atendimento às requisições de produção.
Existem diversas atividades de produção que se caracterizam por requisitarem mais de um recurso de produção simultaneamente para a sua execução.
Em este caso, torna- se necessária a constituição de uma coalizão entre os recursos de produção requeridos para que os objetivos da atividade sejam cumpridos.
Em princípio, qualquer instância de um recurso de produção, que estiver habilitado a executar uma das operações requeridas por uma atividade de produção, pode candidatar- se num processo licitatório.
Esta candidatura implica a elaboração e encaminhamento de uma proposta em conjunto com os seus possíveis parceiros de coalizão.
Consequentemente, se uma atividade de produção requer, por exemplo, dois recursos de produção e para um destes recursos existem duas instâncias, poderão ser apresentadas duas propostas diferentes ao solicitante.
O preço final de uma proposta de uma coalizão corresponde ao somatório dos preços apresentados nas propostas individuais de cada agente para o recurso de produção sob sua responsabilidade, podendo ainda ser adicionado os custos associados à própria atividade Um aspecto crítico dentro de os sistemas de produção é o replanejamento dinâmico requerido em função de a ocorrência de perturbações.
Estas perturbações podem ocorrer tanto em fatos relacionados aos recursos de produção, bem como com as atividades de produção De o ponto de vista da solução baseada no paradigma de multiagentes, o tratamento de perturbações pode se realizar em tempo real através de um processo de negociação entre os agentes envolvidos.
Este processo de negociação envolve a tentativa de encontrar uma saída para o tratamento das perturbações, evitando atraso no cumprimento da ordem de produção, e propiciando o menor prejuízo econômico possível ao sistema de produção.
A solução proposta, do ponto de vista dos recursos de produção, envolve duas alternativas:
Sua substituição por outro recurso ou a negociação com os parceiros de coalizão no sentido de redefinirem a programação de atendimento às atividades de produção afetados.
Como última saída, caso seja inviável a reprogramação da coalizão sem atrasar a execução da atividade de produção, uma nova coalizão deve ser contratada para a sua execução através de um processo de licitação específico para suprir esta necessidade A sociedade de agentes do M-DRAP ficou composta basicamente por cinco classes de agentes, divididos em agentes internos e agentes externos ao modelo.
Os agentes internos são o Agente Processo do Domínio (APD), Agente Processo do Negócio (APN), Agente Atividade Empresarial (AAE) e Agente Entidade Funcional (AEF), e correspondendo às classes do Cimosa de nome semelhante os agentes externos ao modelo são os Agentes Humanos.
Recebendo um evento de produção, o APD identifica o processo de domínio relacionado a esse evento.
Posteriormente, abre licitação junto aos APNs ou AAEs envolvidos nas atividades empresariais a serem executadas.
Os agentes AEFs são os agentes que formam as coalizões e representam os recursos de produção propriamente ditos.
Em as tabelas a seguir são especificadas as atribuições e os atributos herdados da base de conhecimento da classe de agente.
Tabela 3 ­ Tabela Agente Processo do Negócio[ BAS 98] Atribuições Atributos herdados da base de conhecimento Elaborar e apresentar uma proposta em atendimento a um evento interno de solicitação de proposta para o processo do negócio sob a sua responsabilidade.
Para tanto:
Processo do negócio Elabora a rede de planejamento como requisito para abertura de uma licitação;
Resultado Identificação Restrição geral Plano Abre uma licitação com base na rede de planejamento previamente gerada;
Avalia as propostas recebidas durante a licitação;
Identificação da atividade empresarial Atividades empresariais precedentes Elabora a sua proposta com base nas propostas apresentadas na licitação.
Contratar os agentes fornecedores ­ AAEs ­ envolvidos numa proposta previamente apresentada e aprovada por o APD.
A arquitetura atual dos agentes está representada na figura 14, onde percebe- se que a recepção de mensagens por o agente ficou ao encargo do Módulo Receptor de Eventos, e como conseqüência passou a existir comunicação deste módulo com os módulos Negociador e Controlador.
Este fato foi efetivado de modo a estabelecer um canal de recepção de mensagens único, sendo de responsabilidade do Receptor de Eventos a triagem das mensagens recebidas e sua distribuição ao módulo habilitado a processar- la.
Receptor de Eventos ­ módulo responsável por a percepção dos eventos direcionados ao agente, interpretação de sua natureza e encaminhamento de seu conteúdo a nível de mensagem para o módulo habilitado para o seu processamento.
Biblioteca ­ armazena os agentes componentes de um plano e suas regras de procedimento.
Negociador ­ responsável por a avaliação das propostas recebidas de outros agentes e por o processo de contratação de seus serviços, bem como firmar compromissos quando contratado.
Planejamento ­ responsável por o armazenamento de todas as propostas apresentadas por o agente, bem como de seus compromissos.
Controlador ­ presente somente nos agentes APN e AAE, ele deve acompanhar a execução de cada atividade, e comunicar o seu término aos agentes responsáveis por as atividades seguintes.
A metodologia utilizada para a modelagem do M-DRAP foi definida devido a a necessidade de ter- se um instrumento capaz de direcionar e facilitar o processo de modelagem, de forma consistente, integrada e incremental do sistema, considerando as características particulares do paradigma de multiagentes.
Essa metodologia apresenta as seguintes atividades:
Esta atividade tem por objetivo identificar e especificar os requisitos a serem satisfeitos por o sistema do ponto de vista da aplicação, sendo que a especificação de requisitos é o passo inicial para a modelagem do sistema multiagente, constituindo- se em conhecimento fundamental para a definição da solução envolvendo a aplicação deste paradigma.
Uma solução baseada na possibilidade de utilização de agentes distribuídos deve ser definida considerando- se os requisitos especificados na atividade anterior.
Especificada essa solução, o passo seguinte envolve a identificação e caracterização dos agentes capazes da executarem, constituindo- se assim a sociedade de agentes.
O processo de identificação e caracterização dos agentes componentes da sociedade foi facilitado através da utilização de um modelo de referência construído com base no paradigma de orientação a objetos, que represente a realidade do domínio em o qual está inserido o problema, e a partir de o qual possam ser identificados e derivados os agentes Tal idéia envolve a identificação das classes de objetos candidatos a tornarem- se classes de agentes.
Uma classe de objetos torna- se candidata a uma classe de agentes na medida em que demonstre capacidade de participar na implementação da solução determinada com a utilização do paradigma de multiagentes.
Essa capacidade pode ser avaliada em função de a relevância das funções sob sua responsabilidade;
É importante salientar que pode ser necessária a criação de novas classes de agentes especialmente para atender a novas atribuições requeridas para a implementação da solução proposta através de multiagentes.
Esta atividade tem por objetivo identificar as relações de interação existentes entre os agentes identificados na atividade anterior.
Para tanto, será utilizado um modelo inspirado em nos diagramas de objetos propostos em, e, batizado de &quot;modelo da sociedade de agentes».
Esta atividade envolve a definição da arquitetura e modelagem de cada agente componente da sociedade.
Os modelos utilizados para a modelagem de cada classe de agentes do M-DRAP são inspirados na Unified Modeling Language e Object Oriented Analysis &amp; Design e são especificados a seguir:
Para se representar as interações de um agente, através de intercâmbio de informações com os outros membros da sociedade durante a execução de suas atribuições, foi proposta a utilização de uma adaptação do diagrama de seqüência apresentado em, ficando denominado como &quot;diagrama de interação seqüencial».
As colunas representam os objetos, a troca de mensagens entre os objetos é representada através de arcos direcionados, que iniciam na coluna do objeto origem e terminam na coluna do objeto de destino.
Para se definir uma padronização das mensagens trocadas entre os agentes foi utilizada a ACL ­ Agent Communication Language especificada em.
O modelo Evento-Resposta identifica todos os acontecimentos ou ocorrências que afetam o sistema e que, portanto, devem ser considerados durante o processo de modelagem Em a modelagem de um agente, o modelo Evento-Resposta tem o objetivo de definir o conjunto de ações a serem executadas por o agente para classe do evento, de modo a gerar uma resposta adequada sob seu ponto de vista.
Em esta atividade, a arquitetura de cada agente do sistema multiagente deve ser definida.
Para tanto, pode ser utilizada ou adaptada algumas das diversas propostas existentes, ao ainda propor uma nova arquitetura, de acordo com as características requeridas por o agente A principal contribuição apresentada em foi a especificação de uma arquitetura multiagente capaz de implementar uma estratégia de planejamento para a alocação de recursos descentralizados, baseada em redes de planejamento e mecanismos de negociação.
Apesar de esta evidente contribuição, a proposta apresentada pode ser melhorada, pois o modelo comportamental dos agentes M-DRAP baseia- se numa estrutura estática (modelo evento-resposta) que provê soluções para todas as situações previstas durante o processo de modelagem do sistema como um todo.
A modificação dessa estrutura, que dirige o comportamento dos agentes M-DRAP, através da inserção de estados mentais em sua arquitetura, possibilitaria maior autonomia aos agentes tornando o sistema, como um todo, mais autônomo e independente.
Este estudo tem por objetivo apresentar uma proposta metodológica que contemple o universo dos projetos de estados mentais em agentes.
Essa proposta tem algumas particularidades, como a identificação de um modelo BDI apropriado, a definição de uma ontologia para o domínio e a característica de ser um método cíclico que permite a atualização de suas etapas, em tempo de execução.
Os dois primeiros módulos da MENSSAGENS (Definir a Ontologia Genérica e Definir o Modelo BDI Apropriado), apresentam uma ordem de execução que pode ser alterada sem prejuízo ao processo metodológico.
Em a figura 16 a definição da ontologia é apresentada como primeira atividade por considerar que, se o projetista tiver conhecimento sobre os elementos da ontologia, a atividade de determinar o modelo BDI apropriado, pode tornar- se mais simples e consistente.
Em as seções 5.1 a 5.10 são apresentadas as atividades que constituem a Esta etapa apresenta uma especificação de atividades a partir de os requisitos funcionais dos agentes do sistema, de onde será possível definir pré e pós-condições gerando um suporte para a definição das crenças dos agentes.
Em esta etapa é necessário que seja efetuada uma descrição textual dessas atividades identificadas, no sentido de guiar os passos do projetista no processo de formalização das mesmas.
Por exemplo: Uma das atividades identificadas para os agentes do nível APN do sistema M-DRAP é a elaboração de uma rede de planejamento, que tem como objetivo servir de requisito para a abertura de uma licitação em resposta a uma solicitação de proposta, atendendo a um evento interno de solicitação de proposta para o processo de negócio sob sua responsabilidade.
A descrição textual dessa atividade pode ser verificada na tabela 6.
Esta atividade é efetuada com elementos obtidos através do conhecimento do plano de produção, requer um determinado conhecimento sobre o processo de negócio.
De a realização dessa atividade espera- se obter uma rede de planejamento elaborada para que, a partir desse momento, se inicie o processo licitatório dos agentes.
É importante salientar que essa etapa é realizada com base em um dos requisitos da MENSSAGENS que é uma descrição, mesmo que informal, das atividades que o agente deverá executar.
Com a descrição textual efetuada é possível passar à próxima etapa da modelagem de estados mentais, que é descrita a seguir.
Um projeto de ontologia é composto de duas grandes fases:
A primeira fase decide qual o nível de conhecimento que se deve ter sobre o domínio que a ontologia irá tratar, qual nível de compreensão do domínio deve ser adotado;
Em a segunda é decidido o vocabulário de predicados, funções e constantes, o que nada mais é do que escrever conceitos importantes do domínio em forma lógica.
Gruber considera a construção de um vocabulário como a ontologia de um domínio.
Outros consideram o vocabulário apenas uma parte de uma boa ontologia.
O que importa é que, de um jeito ou de outro, o vocabulário faz parte do projeto da ontologia.
A seguir serão apresentados alguns critérios que devem ser considerados quando se produz uma ontologia.
A seguir serão apresentados alguns critérios para se avaliar o que seria uma boa ontologia.
Clareza ­ uma ontologia deve comunicar efetivamente o significado pretendido dos termos definidos.
Definições devem ser objetivas.
Uma definição completa é preferível a uma definição parcial.
Todas as definições devem ser documentadas em linguagem natural.
Coerência ­ uma ontologia deve ser coerente, isto é, ela deve permitir inferências que são consistentes com as definições.
Pelo menos, os axiomas definidos devem ser logicamente consistentes.
Coerência também deve ser aplicada a conceitos que são definidos informalmente, como os descritos na documentação com linguagem natural.
Se existem axiomas contraditórios então a ontologia é incoerente.
Extensibilidade ­ a representação deve ser feita de forma que se possa entender e especializar a ontologia monotônicamente.
Em outras palavras, ela deve ser capaz de definir novos termos para usos especiais baseado no vocabulário existente, de uma maneira que não requeira uma revisão das definições existentes.
Menor propensão a codificação ­ a conceitualização deve ser feita independentemente de qualquer linguagem de programação.
Em a MENSSAGENS serão considerados os seguintes aspectos ontológicos:
Objetos, atributos, eventos, agentes e relações, os quais são utilizados por ser esta uma metodologia de modelagem lógica e qualquer modelagem lógica utiliza estes que são aspectos suficientemente genéricos e abrangentes permitindo a representação de estados mentais.
Em a estrutura do agente podem existir estruturas passivas, as quais devem ser representadas como objetos.
Por exemplo: Para que se execute uma atividade devem ser respeitadas as restrições associadas a essas atividades.
Essas restrições são representadas como objetos, conforme modelo:
Restr_ Ativ -- representa que &quot;X «é uma Restrição ou conjunto de restrições para uma dada Atividade A os objetos identificados anteriormente, existem atributos associados.
Os atributos não são características únicas das estruturas passivas do sistema, mas podem ser características também de estruturas dinâmicas, tal como um processo de domínio especificado na definição do M-DRAP.
A representação desses atributos é mostrada a seguir:
Quando foi utilizado no exemplo anterior a expressão Restr_ Ativ, temos que cada instância de &quot;X «é um atributo do objeto Restr_ Ativ, e esses atributos devem ser especificados neste momento do processo de modelagem, da seguinte forma:
Existem eventos que podem ocorrer em decorrência da existência tanto de estruturas passivas quanto de estruturas dinâmicas, é importante salientar que os eventos são trocas dos agentes com o ambiente, por exemplo:
A chegada de uma demanda para um agente que controle um processo de produção.
Todos os eventos identificados devem ser especificados neste momento da modelagem e representados textualmente.
Os agentes que serão dotados de estados mentais devem ser identificados neste momento do processo de modelagem.
A representação dos agentes pode ser efetuada seguindo a sintaxe proposta por o formalismo escolhido, no caso de o X-BDI (executable BDI):
Agentes e objetos podem se relacionar uns com os outros e esse fato também deve ser representado durante a elaboração da ontologia do domínio e completamente especificado neste momento, indicando como e quais são essas relações.
Esta etapa pode ser realizada com descrições textuais dessas relações.
A etapa de &quot;Mapear a Ontologia Dentro do Modelo BDI Apropriado «é realizada após as etapas de definição da ontologia genérica e de definição do modelo BDI apropriado.
Seu objetivo é a passagem dos aspectos considerados na ontologia genérica para o formalismo suportado por o modelo escolhido.
Após as etapas de descrição das atividades, definida a ontologia, definido o modelo BDI apropriado e mapeada a ontologia geral dentro de o modelo BDI escolhido, é possível passar para a próxima etapa.
Em esta etapa, é necessária a identificação de um modelo BDI que cubra os requisitos necessários por as especificações do sistema.
Durante a escolha desse modelo, devem ser observadas algumas características:
Após a identificação e descrição das atividades a serem executadas dentro de o sistema, elas devem ser representadas, dentro de o formalismo escolhido na identificação do modelo BDI, como ações.
A etapa de &quot;Mapear atividades em ações «deve ser realizada após a etapa de mapear a ontologia geral no modelo BDI escolhido, por estar mais próxima da descrição das atividades e já existir uma ontologia e um formalismo que possibilitem a especificação formal das ações identificadas.
Ainda nesta etapa, com a especificação das ações, cria- se uma forte base para a execução da próxima atividade.
Conhecidas as ações que os agentes devem executar é mais fácil estabelecer seus requisitos e conseqüências.
Tem como objetivo mapear as pré e pós condições das atividades identificadas nas etapas anteriores.
Com a conclusão da descrição textual, da formalização das ações e a ontologia definida deve ser possível extrair as informações necessárias para a execução dessa etapa do processo de modelagem, por exemplo:
Utilizando um caso citado em (Elaborar uma rede de planejamento), podemos extrair as seguintes pré e pós condições:
Précondições ­ conhecimento sobre as atividades previstas no plano de produção e conhecimento sobre o processo de negócio;
Pós-condições ­ a rede de planejamento está elaborada.
Para melhor visualizar essas pré e pós condições os dados foram organizados numa tabela (Veja Tabela 7).
A atividade de determinar as pré e pós condições das ações foi disposta após a determinação das ações do agente, por a proximidade e relacionamento com as atividades recém executadas por o projetista.
Tem como objetivo mapear os desejos dos agentes, em concordância com as descrições textuais e formais anteriores.
Em este ponto da metodologia, onde os desejos representam o estado motivacional dos agentes do sistema, o tratamento dos desejos do agente tornou- se uma atividade relativamente simples, pois os desejos do agente vão ao encontro de as atividades mapeadas.
Se a atividade prevista para o agente é elaborar uma rede, o agente passa a desejar que essa rede esteja elaborada.
A etapa &quot;Definir os Desejos do Agente «deriva diretamente das pós-condições das ações dos agentes, ou seja, o agente passa a desejar essa pós-condição.
O objetivo dessa etapa da modelagem é identificar o conhecimento que o agente possui sobre o ambiente e a representação desse conhecimento é chamada de crença.
As pré e pós condições identificadas anteriormente também podem ser representadas como crenças que o agente possui podendo ser representada da seguinte forma:
Em este momento, grande parte das crenças a serem especificadas já foram determinadas através das pré e pós condições das ações e dos desejos, ficando apenas a definição das crenças iniciais do agente para serem mapeadas.
Existe a possibilidade de que determinadas propriedades se verifiquem em determinados instantes de tempo, ou seja, é possível que uma propriedade p se verifique no tempo &quot;t «e não se verifique num tempo t1, fazendo com que o agente tenha que respeitar restrições quanto a o tempo, trazendo novas possibilidades ao sistema como, por exemplo, crenças no futuro.
Essas crenças no futuro podem ser identificadas como as expectativas do agente, que podem ser representadas da seguinte forma:
&quot;tempo «Tendo definidas as crenças, desejos e ações dos agentes chegou o momento de pensar nos aspectos temporais que estão envolvidos no processo deliberativo, visto que, as restrições são representadas na forma de crenças e já foi determinada uma forma de realizar sua formalização.
Existem situações que podem interferir no funcionamento normal do agente e essas situações podem ser chamadas de perturbações, e como podem ser tratadas essas perturbações deve ser pensado durante o processo de modelagem.
O modelo BDI escolhido pode apresentar um planejador interno que pode vir a contornar essas perturbações mas, não acontecendo isso a perturbação deve ser tratada de alguma forma, mesmo que essa forma seja através da interferência humana dentro de o sistema.
Esta é a última etapa antes da validação do modelo.
Em ela o projetista observa o funcionamento do agente buscando identificar perturbações.
Após a conclusão das etapas anteriores volta- se a atenção para os fatores que podem interferir em seu processo deliberativo.
Em esta fase é necessário que as especificações de crenças, ações e desejos sejam validadas dentro de o modelo BDI escolhido.
É importante observar que o modelo escolhido apresente as características descritas anteriormente (Ver seção 5.3).
Caso os agentes em que se está modelando estados mentais já tenham sido completamente especificados deve- se buscar o conjunto das ações primitivas do agente.
Se no momento da validação não conseguirmos mapear as atividades em ações primitivas do agente, o processo deve ser reiniciado tendo essas ações como as novas atividades de entrada, executando os passos da metodologia até que se tenha o conjunto de ações primitivas do agente.
Se os agentes ainda não existem (não estão especificados) o resultado esperado da metodologia representa o conjunto de ações que deve ser implementado no agente.
Durante o processo de especificação dos estados mentais, pode ser necessária a correção das especificações realizadas nas atividades anteriores, fato que caracteriza a MENSSAGENS como um processo cíclico que pode ser reiniciado a cada etapa de validação do modelo, conforme a figura 16.
A etapa de validação do modelo é apresentada no final do processo metodológico.
Para realizar uma validação é necessário que se tenha um modelo completo, que já tenha passado, pelo menos uma vez, por todo o ciclo da MENSSAGENS.
Com intenção de validar a metodologia apresentada anteriormente, foi realizado um estudo de caso utilizando os agentes M-DRAP dos níveis APN e AAE para a inserção de estados mentais.
O M-DRAP foi escolhido como estudo de caso devido a ele apresentar bem definidas as atividades de cada agente dentro de seus níveis hierárquicos e apresentar um ambiente completamente especificado.
Para os agentes identificados, existem atividades que devem ser descritas textualmente, da forma:
Descrição textual das atividades dos agentes &quot;APN Elaborar uma rede de Planejamento».
Elaborar uma rede de Planejamento Esta atividade é efetuada com elementos obtidos através do conhecimento do plano de produção, requer um determinado conhecimento sobre o processo de negócio.
De a realização dessa atividade espera- se obter uma rede de planejamento elaborada para que, a partir desse momento, se inicie o processo licitatório dos agentes.
&quot;Abrir Licitação». Abrir Licitação Esta atividade é efetuada a partir de o momento que a rede de planejamento já se encontre elaborada e que já tenham sido enviados os convites para os agentes que participarão dessa licitação.
De a realização dessa atividade espera- se o processo licitatório tenha sido iniciado.
&quot;Avaliar as propostas recebidas durante a licitação».
Avaliar as propostas recebidas durante a licitação Esta atividade é efetuada a partir de o momento que o agente conhece o processo de domínio ao qual ele esteja inserido, do conhecimento quanto a o processo de negócio sob sua responsabilidade, conhecimento quanto as atividades agendadas para o agente, o agente apresente conhecimento quanto as restrições relevantes para execução da atividade e tenha sido aberta a licitação que irá gerar as propostas a serem avaliadas.
De a realização dessa atividade espera- se uma avaliação de qual foi a melhor proposta.
&quot;Elaborar e apresentar uma proposta para o processo do negócio sob a sua responsabilidade».
Elaborar e apresentar uma proposta para o processo do negócio sob a sua responsabilidade Esta atividade é efetuada a partir de o momento que a licitação tenha sido aberta e as propostas tenham sido avaliadas.
De a realização dessa atividade espera- se uma proposta que possa atender a demanda inicial.
&quot;Contratar os agentes fornecedores AAEs.»
Contratar os agentes fornecedores AAEs Esta atividade é efetuada a partir de o momento que a proposta desse agente tenha sido elaborada e aprovada.
De a realização dessa atividade espera- se os agentes AAEs relacionados contratados.
Descrição textual das atividades dos agentes &quot;AAE Definir as possíveis coalizões de instâncias de AEFs «Definir as possíveis coalizões de instâncias de AEFs Para realizar essa atividade o agente deve conhecer quais os agentes AEF podem se coligar para atender a solicitação.
De a realização dessa atividade espera- se conhecer quais são as coalizões possíveis.
&quot;Abrir licitação «Abrir licitação Para iniciar a licitação é necessário que o agente conheça as coalizões formadas e conheça as restrições relevantes a atividade.
Com a realização dessa atividade obtêm- se a licitação aberta.
&quot;Avaliar as propostas recebidas durante a licitação «Avaliar as propostas recebidas durante a licitação Para que o agente avalie as propostas recebidas é necessário que ele conheça todas as atividades agendadas para o agente, o agente deve conhecer as restrições relevantes a sua atividade e também deve saber que a licitação foi aberta.
De essa atividade espera- se ter a melhor proposta da licitação.
&quot;Elaborar e apresentar uma proposta para a atividade empresarial sob a sua responsabilidade «Elaborar e apresentar uma proposta para a atividade empresarial sob a sua responsabilidade Em essa atividade o agente deve saber que as propostas foram avaliadas.
De essa atividade ter uma proposta em atendimento a uma solicitação.
&quot;Contratar os agentes fornecedores AEFs «Contratar os agentes fornecedores AEFs Deve- se observar que a proposta tenha sido elaborada e aceita.
Tem- se com a realização dessa atividade os agentes AEF contratados.
&quot;Encaminhar tratamento de perturbação «Encaminhar tratamento de perturbação Essa atividade é efetuada quando existe alguma perturbação durante a execução de alguma atividade.
De essa atividade resulta que o tratamento das perturbações foi encaminhado.
Como foi mencionado anteriormente neste item deve- se especificar as estruturas passivas que compõem os agentes dos níveis APN e AAE da metodologia M-DRAP.
Os objetos identificados inicialmente são:
Os objetos identificados na etapa anterior devem ter identificados os atributos referentes a essas estruturas.
Representação: Process_ neg (AE) ­ representa o conjunto das atividades empresariais que representam o processo de negócio, o qual também pode variar de acordo com a atividade a cumprir.
Representação: Agentes_ part_ licit.
Agenda_ consultada (SH) ­ representa a agenda dos agentes.
Em a agenda estão atributos do tipo:
Representação: Agenda_ consultada (sh (ti, dr, ct).
Os atributos encontrados neste objeto são do tipo:
Tempo de início da execução de sua atividade, tempo de fim da execução de sua atividade e seu custo para realizar a atividade.
Os eventos identificados neste estudo de caso são basicamente dois:
A chegada de uma demanda de um agente hierarquicamente superior, ou a ocorrência de alguma interferência por parte de o agente humano, o que caracteriza a ocorrência de uma perturbação causada por o agente humano no nível dos agentes AAE.
Devido a as características do M-DRAP de utilizar a hierarquia proposta no Cimosa fica mais simples a tarefa de identificação dos agentes a serem considerados neste estudo de caso.
Como o estudo de caso se situa nos níveis APN e AAE do M-DRAP os agentes ficam identificados com o mesmo nome do nível ao qual ele pertence, ou seja:
Agente (APN) e Agente (AAE).
Os agentes se relacionam com os objetos por forma de suas crenças, desejos e ações, essa possibilidade é fornecida por o formalismo escolhido, da forma:
O modelo escolhido foi o proposto por, devido a o fato do modelo permitir que se formalize os estados mentais sendo esse modelo tanto formal quanto executável.
Outra justificativa para a escolha desse modelo, é dada por a possibilidade de interação direta com um dos autores da ferramenta vindo a facilitar sua utilização e compreensão, e também por sua adequação as características estipuladas na seção 5.3.
Móra em mostra que existem, pelo menos, duas formas de superar as limitações dos modelos BDI (distância entre a lógica BDI e os sistemas práticos, não existência de um modelo operacional que comporte essa distância):
Uma, é a extensão de alguma lógica BDI existente, com modelos operacionais apropriados para que as teorias agentes tornem- se executáveis;
A outra forma, é definir um modelo BDI utilizando um formalismo lógico satisfatório que seja poderoso o bastante para representar os estados mentais, e que tenha procedimentos que permitam utilizar a lógica como um formalismo de representação de conhecimento, quando de a construção do agente.
O autor apresenta um modelo BDI (X-BDI) que além de ser um modelo formal de agente, também pode ser utilizado para implementar agentes.
Em vez de definir uma nova lógica BDI, ou escolher uma existente e estender- la com um modelo operacional, foi definida uma noção de crença, desejo e intenção utilizando um formalismo lógico que é ambos, bem definido e computacional.
Para descrever o X-BDI é utilizada a programação lógica estendida (ELP ­ extended) com o WFSX (well-- founded semantics eXtended for explicit negation) que vem a estender as possibilidades de programas em lógica normal com uma segunda negação chamada de negação explícita.
Essa extensão permite representar explicitamente informações negativas e aumentar os recursos da linguagem.
Em a programação lógica normal uma proposição é falsa somente se ela não pode ser provada como verdadeira, enquanto que na lógica estendida existe um segundo tipo de negação que permite representar explicitamente informações negativas.
Se o acréscimo desse segundo tipo de negação reforça a linguagem, ela também introduz a noção de informações contraditórias nos programas.
Então, é necessário que se tenha uma ferramenta que apresente mecanismos de revisão para restaurar a consistência nesses programas contraditórios, e para isso é utilizada a semântica WSFX.
Como visto anteriormente, programas podem ser contraditórios e, para restaurar sua consistência com o WFSX, o programa é submetido a um processo de revisão que ajuda na alteração do valor verdade de algum conjunto de literais.
Este conjunto de literais é o conjunto de literais revisáveis, e pode ser qualquer sub conjunto de literais em H (p) para os quais não existe nenhuma regra que os derive.
Nenhuma outra restrição é produzida onde literais possam vir a ser considerados como revisáveis.
A habilidade para representar informações negativas, junto com um procedimento bem definido que restaure a consistência de programas em lógica, fazem com que a ELP seja satisfatória para ser utilizada em diferentes formas de raciocínio não monotonico.
Para o XBDI existe o interesse em duas formas de raciocínio não monotonico, que são:
Raciocínio revisável (defeasible) ­ uma regra revisável é uma regra, da forma:
Se A então B. A ELP permite que se expresse raciocínios revisáveis para dar significado a um conjunto de regras quando surgem contradições na aplicação.
Raciocínio abdutivo ­ Raciocínio abdutivo consiste de, dada uma teoria T e um conjunto de observações O, encontrar uma teoria tal que T O e T é consistente.
O X-BDI raciocina sobre pró-atitudes como desejos e intenções, trabalhando com propriedades que podem se verificar em determinado instante de tempo e também com ações que podem ser executadas em certo instante de tempo.
Por este motivo, é utilizada uma versão modificada do Cálculo de Eventos (EC), proposta por J. Quaresma e J. G. Lopes em Esta proposta de EC permite que eventos tenham uma duração e uma identificação, no lugar de ser instantâneo e identificado no instante de tempo em que o evento ocorre.
A conseqüência disso é que eventos podem ocorrer simultaneamente.
O predicado holds_ at que define as propriedades que são verdadeiras num tempo específico é holds_ at (P, T) ß happens (E, Ti, Tf), initiates (E, Tp, P), Tp T, Tp\&gt; $= Ti, persists (Tp, P, T).
Tc\&gt; $= Tci, not out (Tc, Tp, T).
Out (Tc, Tp, T) ß (T Tc); (
Tc Tp).
Onde happens (E, Ti, Tf) significa que o evento E ocorreu entre Ti e Tf;
Initiates (E, T, P) significa que o evento E inicia a propriedade P no tempo T;
Terminates (E, T, P) onde o evento E termina a propriedade P no tempo T;
Persists (Tp, P, T) significa que P persiste desde Tp até T. Existe uma variável de tempo especial (now) que representa o tempo presente.
São necessárias regras adicionais que representem a relação entre a não ocorrência de uma propriedade e a ocorrência de sua negação e ainda definir a relação entre os dois tipos de negação:
Para saber se uma dada propriedade P ocorreu no tempo T, o EC verifica que propriedades permanecem válidas após a execução das ações que ocorreram antes de T. Este modelo de cálculo de eventos permite raciocínio sobre o futuro, por assumir hipoteticamente uma seqüência de ações representadas por o predicado happens/ 3 e a constatação de que as propriedades podem vir a se verificar.
Permite também raciocinar sobre o passado.
Depois de definir um formalismo lógico, inicia- se a definir o modelo X-BDI.
O modelo X-BDI não define um agente completo, mas somente a estrutura cognitiva que é parte do modelo do agente.
Uma estrutura cognitiva é uma tupla do tipo: (B, D, I, TAx) onde:
B é o conjunto das crenças do agente;
D é o conjunto dos desejos do agente;
I é o conjunto das intenções do agente;
T Ax representa um conjunto de axiomas de tempo.
A definição de crenças utilizada é:
Um Agente Ag acredita numa propriedade P, num instante de tempo T se:
Seguindo o modelo das crenças, a definição de desejos é:
D ­ é a identificação do desejo;
P ­ é uma propriedade;
T ­ é um instante de tempo;
Ag ­ é a identificação do agente;
Atr ­ é uma lista de atributos;
Body ­ é uma conjunção de literais.
Um agente Ag deseja que a propriedade P se verifique num determinado instante de tempo T se:
Como nos casos anteriores a definição de intenções adotada é:
I ­ é a identificação da intenção;
P ­ é uma propriedade;
Ag ­ é a identificação do agente;
Atr ­ é uma lista de atributos;
Act ­ é uma ação, tal que:
Agentes escolhem suas intenções de dois modos diferentes:
De seus desejos e de um refinamento de outras intenções.
Para se entender a primeira forma de se derivar intenções são necessários alguns conceitos como:
Desejos elegíveis, relação de preferência entre os desejos e conjunto de desejos candidatos.
Desejos elegíveis ­ são aqueles que o agente acredita que não estão satisfeitos.
O conjunto de desejos elegíveis também pode ser contraditório.
Relação de preferência entre desejos (pref) ­ seja D os desejos do agente, D'o conjunto desejos elegíveis de D, P (D') o conjunto das partes de D'e R, S P (D').
R S se o maior valor de importância ocorrer em S e não ocorrer em R, assim o agente deverá preferir satisfazer primeiro o desejo mais importante, por exemplo:
Conjunto de desejos candidatos ­ o conjunto de desejos candidatos é qualquer conjunto:
A partir de essas definições é possível definir o conjunto de intenções primárias como candidatos.
Intenções como refinamento de intenções ­ uma vez que o agente adote suas intenções, ele iniciará o planejamento para alcançar estas intenções.
Durante o planejamento, o agente formará intenções que serão relativas a intenções preexistentes.
Durante a elaboração dos planos, uma nova intenção somente será adotada se ela não for contraditória nem com as outras intenções existentes nem com as crenças do agente.
A partir de as definições anteriores pode- se tirar a definição de intenções relativas.
Seja Ip é o conjunto de intenções primárias.
Um processo de planejamento é um procedimento que, para cada i Ip, irá gerar um conjunto de ações ordenadas temporalmente Ir que atinge i, tal que T Ax Ip Ir não seja contraditório.
Ir é o conjunto de intenções relativas do agente.
Essa restrição de não contradição reforça a noção de compromisso, isto é, uma vez que uma intenção é adotada ela restringe a adoção de novas intenções.
As especificações das crenças, desejos e ações devem ser feitas num arquivo chamado bdi.
A que é lido no momento da carga do X-BDI.
Em o início do referido arquivo deve ser feita a identificação do agente (identity (Agente)), sendo que essa informação não pode ser sensorada (percebida do ambiente).
O sensoramento pode ser simulado por meio de o arquivo coreografia.
A onde ficam as informações que devem ser sensoradas durante a simulação, nesse arquivo ficam informações do tipo:
Caso o X-BDI não encontre o arquivo coreografia.
A, é suposta uma comunicação via sockets, por onde são sensoradas as informações necessárias ao sistema.
Ações devem ser representadas por o predicado act, da forma:
Act (agente, ação), onde a identificação do agente é opcional, podendo também ser representadas expressões do tipo:
Crenças são representadas por o predicado bel:
Bel (Agente, Propriedade, Tempo), onde a especificação do tempo é opcional, fato que nos permite representar crenças no futuro, ou seja, as expectativas do agente, ou acreditar em propriedades que se verificaram em algum instante de tempo no passado.
Desejos utilizam- se do predicado des:
Des (Agente, Propriedade, Prioridade).
A especificação de uma prioridade não é obrigatória e, se especificada deve apresentar valor entre um e zero inclusive.
O tempo é controlado por vários predicados:
Current_ time (tempo), indica o tempo corrente do sistema, sendo que &quot;tempo «não pode ser uma operação aritmética do tipo:
Current_ time.
Obs: Current_ time (tempo) é uma propriedade sensorada, ou seja, o X-BDI não faz a correção do tempo.
&quot;tempo «é um tempo antes/ depois do tempo corrente.
Os predicados before e after podem ser representados de forma explícita e de forma implícita:
Para o predicado after funciona de forma análoga.
Assim, foi realizada uma pequena representação da base teórica que fundamenta o modelo BDI proposto e, uma breve descrição da visão da sintaxe utilizada para quem utiliza o X-BDI como usuário final.
O modelo deve tratar restrições temporais ­ no X-BDI existem predicados que tratam dos Tratar a formação de Expectativas ­ o X-BDI trata a formação de expectativas da seguinte forma:
Permitir a representação de crenças, desejos e intenções ­ o X-BDI representa crenças e desejos através de seus predicados &quot;bel «e &quot;des», e a partir de suas crenças e desejos é capaz de derivar suas intenções;
Representar as ações com suas pré e pós condições ­ ações são representadas por o predicado act, por exemplo:
Derivar intenções a partir de suas crenças e desejos ­ existem duas formas de derivação de crenças no X-BDI, que são:
Derivando- as a partir de suas crenças e desejos e a geração de intenções como refinamento de outras intenções É importante ressaltar que essas especificações seguem o formalismo proposto no modelo BDI escolhido para esse estudo de caso.
É importante salientar que o que impulsiona os agentes é o desejo de atender a uma demanda, o que nos leva a ação de atender a tal demanda:
Act (apn/ aae, atender_ demanda (D)) Ação:
Elaborar uma rede de planejamento Pré ­ Condições Pós ­ Condição§ Conhecimento sobre as atividades previstas em o§ Crença de que a rede está elaborada.
Formalização: Act (apn, elab_ rede (RP)) causes bel (apn, rede_ elab (RP)) if bel (apn, ativ_ plan_ prod (APP)), bel (apn, process_ neg (AE)).
A formalização especificada deve ser entendida da seguinte forma:
A ação de elaborar uma rede de planejamento (act (apn, elab_ rede (RP)) causa a rede de planejamento elaborada (bel (apn, rede_ elab (RP)) -- pós-condição) se o agente conhece as atividades do plano de produção (bel (apn, ativ_ plan_ prod (APP)) e conhece o processo de negócio ao qual as atividades estão associadas (bel (apn, process_ neg (AE)) (pré-condições).
Ação: Abrir a licitação Pré ­ Condição Pós ­ Condição Rede de planejamento elaborada.
A licitação está aberta.
Formalização: A ação de abrir uma licitação (act (apn, abrir_ licit (L)) causa a licitação aberta (bel (apn, licit_ aberta (L)) -- pós-condição) se o agente tem a crença de que a rede de planejamento está elaborada (bel (apn, rede_ elab (RP)) -- pré-condição).
Para as demais situações dos itens 6.5.1 e 6.5.2 entenda- se o mesmo modelo de especificação da formalização.
Ação: Avaliar as propostas recebidas durante a licitação Pré ­ Condições Pós ­ Condição Conhecimento sobre a agenda do agente;
Conhecimento sobre as propostas da licitação;
Conhecimento sobre as restrições relevantes a execução da atividade;
As propostas recebidas durante a licitação foram avaliadas.
Formalização: Act (apn, aval_ prop_ licit (L)) causes bel (apn, prop_ licit_ aval (L)) if bel (apn, agenda_ consultada (SH)), bel (apn, prop_ licit (PRL)), bel (apn, restr_ ativ (R)).
Ação: Elaborar e apresentar uma proposta para o processo do negócio sob a sua responsabilidade.
Pré ­ Condição Pós ­ Condição Efetuou-se a avaliação das propostas provenientes§ da licitação.
A proposta foi elaborada e apresentada.
Formalização: Ação:
Contratar os agentes fornecedores AAEs.
Pré ­ Condição Pós ­ Condição Proposta elaborada e aprovada.
Agentes fornecedores AAEs contratados.
Formalização: Ação:
Definir as possíveis coalizões de instâncias de AEFs.
Pré ­ Condição Pós ­ Condição Conhecer os AEFs habilitados a executar as§ operações funcionais envolvidas na atividade empresarial.
As coalizões estão definidas.
Formalização: Ação:
Abrir licitação Pré ­ Condições Pós ­ Condição Conhecimento das coalizões;
Conhecimento quanto as restrições da atividade empresarial.
Formalização: Act (aae, abrir_ licit (L)) causes bel (aae, licit_ aberta (L)) if bel (aae, coal_ definida (CO)), bel (aae, restr_ ativ (R)).
A licitação foi aberta.
Ação: Avaliar as propostas recebidas durante a licitação Pré ­ Condições Pós ­ Condição Conhecimento sobre as atividades agendadas para§ o agente;
Conhecimento sobre as restrições da atividade empresarial;
Conhecimento das propostas provenientes da licitação.
As propostas recebidas durante a licitação foram avaliadas.
Formalização: Act (aae, aval_ prop_ licit (L)) causes bel (aae, prop_ avaliada (L)) if bel (aae, agenda_ consultada (SH)), bel (aae, prop_ licit (PRL)), bel (aae, restr_ ativ (R)).
Ação: Elaborar e apresentar uma proposta para a atividade empresarial sob a sua responsabilidade.
Pré ­ Condição Pós ­ Condição Tenha sido realizada a avaliação das propostas§ geradas durante a licitação.
Foi elaborada e apresentada uma proposta.
Formalização: Ação:
Contratar os agentes fornecedores AEFs.
Pré ­ Condições Pós ­ Condições Proposta elaborada e aprovada.
Agentes fornecedores AEFs contratados.
Formalização: Ação:
Encaminhar tratamento de perturbações Pré ­ Condições Pós ­ Condições Tenha havido uma perturbação.
O tratamento da perturbação foi encaminhado.
Formalização: Uma vez identificadas as atividades e mapeadas as ações segue- se para a especificação dos desejos do agente.
É necessário ressaltar que a notação utilizada é a notação especificada no modelo BDI escolhido, modelo esse que pode apresentar uma noção de prioridade entre os desejos do agente, representada de forma numérica com valor entre 0 e 1.
A formalização especificada deve ser entendida da seguinte forma:
O agente deseja Ter uma demanda atendida (des (apn, demanda_ atendida (D)) se ele acredita que chegou uma demanda (bel (apn, ch_ demanda (D)) -- pré-condição).
Esse desejo tem prioridade máxima des (apn, elabor_ rede (RP), 0.9) if bel (apn, restr_ ativ (R), t1), bel apn, ativ_ plan_ prod (APP), t1), bel (apn, process_ neg (AE)).
A formalização especificada deve ser entendida da seguinte forma:
O agente deseja elaborar uma rede (des (apn, elabor_ rede (RP)) se ele conhece as restrições das atividades (bel (apn, restr_ ativ (R)) e conhece as atividades do plano de produção (bel apn, ativ_ plan_ prod (APP)) e conhece o processo de negócio (bel (apn, process_ neg (AE)).
Esse desejo apresenta prioridade 0.9.
Para o item 6.6.2 entenda- se a mesma especificação da formalização.
Já foi possível observar que quando existe a referência a pré e pós condições estamos lidando com as crenças do agente, as quais são representadas por o predicado bel, pode ser observado ainda que existem crenças que são persistentes e crenças que se verificam em determinados instantes de tempo.
A seguir serão expressos as crenças identificadas durante as fases anteriores.
A formalização especificada nesta etapa deve ser entendida da seguinte forma:
Acredita que chegou uma demanda &quot;D «(bel (apn, ch_ demanda (D)).
Para o item 6.7.2 entenda- se a mesma especificação da formalização.
Uma observação que é possível ser feita nessa etapa, para os agentes AAE, é que existe a possibilidade da contradição entre as crenças, o que é possível devido a possibilidade da ocorrência de perturbações neste nível dos agentes M-DRAP.
As principais restrições temporais existentes são quanto a os deadline das atividades, ou seja, os agentes em sua avaliação e elaboração de propostas devem considerar esse deadline.
Essas restrições temporais devem ser representadas na forma de crenças do agente.
Em este momento as perturbações que devem ser tratadas são aquelas referentes a interferência humana na ordem de execução de atividades (AAE) ou a perturbação que pode ocorrer por a percepção de contradições em tempo de execução no agente.
Abaixo segue a especificação desse tratamento para os agentes dos níveis utilizados.
A expressão &quot;bel (apn, -- rede_ elab (RP), Now)», representa a crença na não ocorrência de uma propriedade possibilitando assim, a representação de contradições na modelagem dos estados mentais.
A formalização especificada deve ser entendida da seguinte forma:
O agente deseja chamar o agente hierarquicamente superior ou o agente humano se num tempo genérico t1 ele acredita que em &quot;Now «a rede de planejamento esteja elaborada.
Mas verificou- se que em &quot;Now «a rede de planejamento não estava elaborada (-- rede_ elab (RP)) o que caracteriza uma expectativa não satisfeita.
A formalização especificada deve ser entendida da seguinte forma:
O agente deseja chamar o agente hierarquicamente superior se num tempo t3 o agente acredita que em &quot;Now «ele conhece os agentes participantes da licitação.
Mas verificou- se que em &quot;Now «não são conhecidos os agentes que participam da licitação.
Novamente caracteriza uma expectativa não satisfeita.
Para as demais perturbações descritas neste item entenda- se a mesma especificação da formalização.
Durante o processo de determinação do tratamento das perturbações do agente APN foi possível observar que neste nível dos agentes não é prevista a perturbação causada por o agente humano (Ah) podendo apenas ocorrer as contradições, que devem ser tratadas.
Os desejos representam a percepção da existência de contradições nas crenças do agente.
Esta etapa do processo deveria ter sido realizada através da utilização do X-BDI na implementação dos agentes modelados no estudo de caso.
Devido a dificuldades surgidas na implementação da ferramenta essa etapa não pôde ser efetuada até esse momento.
Mas, juntamente com um dos autores do X-BDI, foi feita uma análise dos resultados obtidos no estudo de caso e constatado que o modelo criado está consistente.
Tão logo essas dificuldades sejam sanadas a etapa de validação na ferramenta será completamente realizada.
Este trabalho foi construído de forma evolutiva, partindo de uma pesquisa das opções metodológicas existentes na literatura, expressas no referencial teórico, até a proposta de uma metodologia que possa preencher uma das lacunas identificadas que é a carência de métodos de modelagem de estados mentais.
A MENSSAGENS teve como finalidade auxiliar o processo da modelagem de estados mentais que, até o momento, não havia sido completamente especificado em trabalhos envolvidos com a modelagem de agentes.
O desenvolvimento da MENSSAGENS também contribui para a integração de trabalhos em desenvolvimento na FACIN, pois utilizou- se de trabalhos como o M-DRAP e o X-BDI para validar a proposta desta dissertação.
Características da MENSSAGENS:
A MENSSAGENS caracteriza- se por ser generalizável.
A única etapa que depende do domínio é o módulo de descrição das atividades.
A MENSSAGENS é independente da modelagem da sociedade de agentes.
O que indica que ela permite uma modelagem tanto top-down quanto bottom-up.
Porém é indispensável uma descrição, mesmo que informal, das atividades que deverão ser desenvolvidas por os agentes.
O processo de modelagem de estados mentais da MENSSAGENS é cíclico podendo ser retomado após cada etapa de validação do modelo.
A metodologia proposta é construída sobre o princípio de que o modelo BDI escolhido deva apresentar as seguintes características:
Essa característica de derivação das intenções pode ser transformada numa etapa da MENSSAGENS (gerar intenções) caso o projetista não tenha escolhido um modelo que apresente esta característica.
Em este caso, esse módulo se localizaria anteriormente à etapa de validação do modelo e após as especificações de crenças, desejos e ações para que seja possível verificar sua consistência.
No entanto, a atividade de modelar as intenções pode tomar muito tempo do projetista uma vez que já existem ferramentas que derivam essas intenções tais como o X-BDI.
Ao mesmo tempo que constituiu- se numa nova proposta metodológica, dando ênfase a modelagem de estados mentais com passos bem definidos, a MENSSAGENS busca contribuir para a integração de trabalhos em desenvolvimento na FACIN, representados nesta dissertação por o X-BDI e por o M-DRAP em o qual pode ser estudada a possibilidade da inclusão de estados mentais em sua arquitetura.
Como proposta de continuação ao trabalho realizado tem- se:
Modelar os agentes dos níveis APD e AEF que não foram considerados no estudo de caso;
