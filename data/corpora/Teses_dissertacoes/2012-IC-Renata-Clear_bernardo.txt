A heterogeneidade das formas como as informações são apresentadas na web é uma característica que dificulta a análise de dados entre diferentes fontes.
Mesmo em estruturas hierárquicas, que possuem uma relação mínima de ordem, não há um padrão para como exibir os elementos e como referenciar os mesmos.
Por isso, o foco principal deste trabalho é apresentar uma ferramenta visual e extensível que centraliza e auxilia operações sobre tais estruturas em páginas da internet.
Para tanto, foi elaborada a ferramenta PLATAL (Plataforma de Extração e Alinhamento de Hierarquias), voltada para facilitar as diversas operações de alinhamento de hierarquias.
A ferramenta possui quatro módulos principais:
Um para extração de hierarquias de páginas da internet, tornando- as disponíveis para manipulação em formatos padrões da web semântica;
Um para alinhamento automatizado dessas hierarquias, baseado em diversas heurísticas e técnicas de alinhamento de ontologias;
Um para alinhamento manual de hierarquias, possibilitando a criação de alinhamentos de referência;
E por fim, um para avaliação de alinhamentos, através da análise de precisão e abrangência.
Para avaliar as heurísticas de alinhamento, foram realizados experimentos no domínio de comércio eletrônico.
Os resultados foram comparados com o produzido por outras ferramentas descritas na literatura.
Portanto, este trabalho contribui como uma forma de viabilizar a criação de hierarquias alinhadas a partir de as estruturas heterogêneas encontradas na web.
Palavras chave:
Hierarquia, ontologia, alinhamento de ontologias.
Em este capítulo, será apresentado o contexto do desenvolvimento desta dissertação, sua motivação, objetivo, plano de trabalho, e por fim a estrutura do texto.
O processo de análise e monitoramento das condições do mercado em que determinada empresa está inserida é chamado de Inteligência Competitiva (IC).
Empreendimentos de todos os tamanhos passaram a buscar IC para conseguir vencer os desafios encontrados no mercado, frente a novos concorrentes que constantemente surgem, o desenvolvimento de novos produtos e serviços, pesquisas por novas tecnologias, etc..
Ao longo de os anos, tem ocorrido um crescimento do número de operações envolvendo o comércio e, portanto, da receita gerada por elas, onde apenas no Brasil tivemos um crescimento no volume de vendas de 7,3% em relação a o ano anterior.
Houve, como consequência, um crescimento também do volume de informações geradas sobre essas operações, e um aumento da complexidade da avaliação de tamanho conteúdo, a fim de extrair a uma IC útil a tempo para sua aplicação.
Muitas vezes dados importantes e relacionados encontram- se dispersos, sem uma apresentação padrão ou organização semântica, dificultando o acesso, comparação e obtenção de conhecimento sobre os mesmos.
Em a busca de auxílio para a descoberta de informações relevantes em tal contexto, encontramos apoio tecnológico em tópicos muito discutidos atualmente na área de Processamento de Linguagem Natural (PLN), devido a a forma como tais informações se encontram (não estruturadas e em linguagem natural).
Esses dados se encontram semi-estruturados, isto é, possuem uma ordem, uma hierarquia, que tipicamente é desigual nas diferentes fontes existentes, apesar de possuírem muitas vezes o mesmo significado.
O que se deseja é então encontrar uma forma de identificar os elementos comuns representados em diferentes hierarquias, facilitando assim o acesso, comparação e análise da informação de forma mais simplificada.
Este trabalho propõe uma abordagem ao problema composta por duas etapas principais.
A primeira de elas é a construção de um framework, isto é, uma ferramenta que facilite as atividades necessárias para a construção do alinhamento que se deseja.
O mesmo agregará funcionalidades associadas a alinhamentos que não se encontram disponíveis, ou então são muito limitadas em outros sistemas.
Para a segunda etapa, será utilizado o sistema construído na primeira etapa, aplicado a um cenário prático.
Primeiramente será realizada a extração de hierarquias de fontes web.
Como cada fonte apresenta as informações, mesmo que semi-estruturadas, com diferentes codificações, procurou- se uma forma de auxiliar essa extração, e padronizar sua apresentação.
Em seguida, é proposto um alinhamento automático das hierarquias obtidas da extração.
Esse segundo momento é similar a tarefa de alinhamento de ontologias, porém com os elementos das hierarquias não possuem necessariamente uma relação &quot;é um «para com seu elemento pai, e os elementos representados podem possuir o mesmo nome.
Por fim, o trabalho é encerrado com a elaboração de alinhamentos de referência e a avaliação dos alinhamentos sugeridos por a ferramenta quando comparados aos de referência.
Também foram utilizados alinhamento de outros sistemas para comparação, onde de uma forma geral se encontrou um resultado de mesmo nível que os demais, e em alguns casos desempenho superior a todos os outros.
Este trabalho visa, portanto, aplicar técnicas elaboradas no meio acadêmico em problemas práticos atuais do mercado.
Com o alinhamento entre hierarquias proposto, pretende-se prover um suporte para elaborar uma visualização unificada e simplificada de informações distribuídas em diferentes fontes.
E com isso, auxiliar na análise de informações mercadológicas relevantes em fontes web, contribuindo para tarefas típicas de IC.
Em a Figura 2 é possível ver que um determinado site de e-commerce do Brasil possui inconsistências, como a categoria &quot;Informática e Acessórios «estar no mesmo nível que &quot;Informática».
Um usuário que acessa essa página deve questionar se os produtos da primeira categoria se encontram na segunda, e vice-versa.
Muitos misturam serviços, produtos, alguns apresentam seus menus numa posição superior, outros na lateral.
Não existe um consenso quanto a como e quais informações exibir.
Pensando numa provável padronização das hierarquias dos sites para publicação de produtos em serviços de comparação de preços e serviços de vendas de produtos usados, foi também investigada a estrutura desses websites.
Encontrou- se que esses, por sua vez, acabam apenas definindo suas próprias estruturas, e ao submeter um produto, o vendedor deve informar para qual categoria do website ele é destinado.
Em a Figura 3 ainda podemos ver o principal problema levantado por esse estudo, as diferenças de nomenclatura através das diferentes fontes, das categorias presentes em seus catálogos.
Em ela em específico podemos ver as variações entre apenas três websites em relação a a busca por a categoria de câmeras.
Elas possuem variação nos termos utilizados, em caracteres que as compõem, por exemplo:»
&amp; &quot;ao invés de «e&quot;;&quot;»
ao invés de espaço em branco;
Maiúsculas e minúsculas alternadas;
Etc.. Propor e avaliar uma forma de facilitar a extração e alinhamento entre diferentes hierarquias, típicas na atual arquitetura de informação em páginas web, é o objetivo desse estudo.
A solução será então capaz de analisar e processar tais informações de forma dinâmica.
Um dos módulos da aplicação visa extrair de páginas da internet a hierarquia por elas apresentada.
É possível obter a hierarquia visualizada em qualquer que seja a estrutura de seu conteúdo (em linguagem Html), mesmo que distribuída em mais de uma página.
Como saída, a aplicação oferece a possibilidade de exportar tal hierarquia para formatos padronizados e amplamente difundidos por a internet para armazenar tais estruturas (OWL e SKOS).
Em outro módulo, essas hierarquias extraídas e padronizadas são analisadas, buscando um alinhamento entre suas entidades.
Esse alinhamento produzido pode então ser exportado num formato XML padronizado e utilizado por diversas aplicações da área.
Em outros módulos auxiliares para as principais atividades, é possível criar um alinhamento igual ao gerado automaticamente, porém de forma manual;
E extrair métricas de avaliação de um alinhamento através da comparação do mesmo com um de referência.
Para abordar as soluções desenvolvidas nas etapas do trabalho e suas funções auxiliares, foi criada a ferramenta intitulada &quot;Plataforma de Extração e Alinhamento de Hierarquias «(&quot;PLATAL&quot;), a qual pode- se ver a interface inicial na Figura 4.
Através da mesma e seus módulos, é possível atingir o objetivo desse trabalho.
Para os experimentos a serem realizados ao longo de o estudo, foram utilizados sites de comércio eletrônico (e-commerce), como base para extração de hierarquias e análise de alinhamentos.
O e-commerce consiste basicamente na compra e venda de produtos e serviços através de meios eletrônicos, tipicamente através da internet.
Esta área está em constante expansão, tanto em países em desenvolvimento como nos de primeiro mundo, o que fortalece a importância que a extração efetiva de informações representa para essa área.
Pretende-se aplicar alguns dos conhecimentos obtidos dos trabalhos observados, porém numa estrutura diferente (baseada no que o usuário encontra num website de vendas usual), portanto flexível e customizável, que considera a adaptação aos formatos que vierem a surgir ao longo de o tempo.
Também terá como diferencial uma das maiores dificuldades nessa área, a aplicação da proposta em domínios em português (ainda que a solução seja modularizada a um ponto de permitir a portabilidade para outras línguas).
Acredita- se que com estudo aqui desenvolvido, foi possível tratar significantemente um problema constante do e-commerce:
A diversidade de formas de apresentação das mesmas categorias de produtos oferecidos ao longo de os diferentes websites de compras, em seus chamados catálogos eletrônicos (e-catalogs).
Avaliações dos resultados alcançados foram realizadas para comparar a precisão e abrangência obtidas frente a métodos mais básicos.
Foram capturadas hierarquias de sites de e-commerce do Brasil e elaborados alinhamentos para eles, a fim de avaliar a qualidade da saída criada por a aplicação desenvolvida.
Este volume encontra- se organizado da seguinte forma: --
O Capítulo 2 apresenta a fundamentação teórica e o estado da arte relativo ao trabalho conduzido. --
O Capítulo 3 mostra o desenvolvimento do framework PLATAL, detalhando sua arquitetura e o funcionamento cada um de seus módulos. --
O Capítulo 4 explora o uso da ferramenta PLATAL aplicada à realidade de comércio eletrônico e os resultados obtidos dos experimentos realizados, os avaliando principalmente em relação a outras ferramentas. --
O Capítulo 5, por fim, encerra com algumas considerações finais relevantes para a proposta deste trabalho.
Em este capítulo serão apresentados conceitos para melhor compreensão do método produzido, como a web semântica, o alinhamento de ontologias, o e-commerce e a IC;
Tim Berners-Lee, o &quot;inventor «da internet, originalmente expressou a ideia da web semântica como o seu sonho para a internet, onde os computadores se tornariam capazes de analisar todos os dados da rede (o conteúdo, atalhos e transações entre pessoas e computadores), como uma &quot;rede semântica».
Ele acredita que, quando a mesma for disponibilizada por completo, os processos diários de negociação, a burocracia derivada de eles e as nossas vidas diárias de forma geral serão tarefas gerenciadas por máquinas conversando com máquinas.
Com isso, os agentes inteligentes que as pessoas imaginaram por muito tempo irão se tornar viáveis.
De acordo com a World Wide Web Consortium (W3C), organização internacional que promove formatos padronizados para dados na web, a web semântica é um framework padronizado que permite dados serem compartilhados e reutilizados por aplicações, empresas e por a comunidade.
Em o momento, a web semântica está focada em tornar a informação com que lidamos na web legível para máquinas, propondo a conversão de documentos para dados.
Humanos são capazes de interpretar informações visíveis numa página da internet, num e-mail, um relatório, etc..
Porém máquinas precisam que a informação esteja organizada e/ ou anotada, de forma que seja possível para elas realizar a mesma interpretação que humanos.
Para isso, se faz necessária a transformação de documentos não estruturados em dados semanticamente estruturados.
Analisando num nível mais técnico, podemos partir da análise que um documento apresentado em Hypertext Markup Language (Html), que tipicamente não possui a intenção de prover uma forma para máquinas categorizarem o conteúdo da página (ainda que existam iniciativas que anotam trechos do Html para tornar- lo mais legível para máquinas), mas sim apresentar informação para humanos lerem.
A solução proposta por a web semântica deixa que o Html se encarregue de descrever documentos e relacionamentos (links) entre eles, enquanto aplica tecnologias (linguagens) próprias para o significado (dados), tais como Extensible Markup Language (XML), Resource Description Framework (RDF), Web Ontology Language (OWL), etc..
Essas, por sua vez, atuam de forma a complementar ou substituir o conteúdo de documentos, adicionando semântica aos mesmos, e assim permitindo a uma máquina processar o documento de forma a ser capaz de realizar algumas operações, como por exemplo, a inferência.
Uma ontologia, para ciência da computação, de acordo com Studer, Benjamins e Fensel, é uma especificação formal e explícita de um conceito compartilhado.
Conceito se refere a um modelo comum de um fenômeno no mundo, através da identificação das entidades/ classes relevantes do mesmo.
Explícita significa que os tipos de conceitos utilizados, e as restrições de seu uso são definidos de forma explícita (declarados sempre).
Formal se refere ao fato de que a ontologia deve ser legível por máquinas, num formalismo apropriado.
Compartilhado reflete a noção de que uma ontologia captura um consenso sobre um conhecimento (é uma ideia aceita por um grupo, não apenas por um indivíduo).
Atualmente, ontologias são amplamente usadas para engenharia de software e de conhecimento e inteligência artificial.
Também são utilizadas em aplicações relacionadas a essas áreas, como gerência de conhecimento, e-commerce, PLN, integração de informação, recuperação de informação, projeto e integração de bancos de dados, bioinformática, educação, etc.
Fensel ainda as define como um recurso &quot;definitivo «para resolver problemas de várias aplicações, que além de as previamente citadas, ainda inclui outras áreas mais recentes que necessitam mapear uma representação do conhecimento, como sistemas de compartilhamento (peer- to peer), web services semânticos e até mesmo redes sociais.
Apesar de as diferentes linguagens que existem para definir uma ontologia, cada uma provendo componentes capazes de implementar uma ontologia, Studer, Benjamins e Fensel definem os itens a seguir como o conjunto mínimo de componentes comum a todas: --
Classes: Representam conceitos do domínio, às vezes também são referidas como entidades ou conjuntos.
Classes numa ontologia normalmente são organizadas em taxonomias hierárquicas, em as quais mecanismos de herança podem ser aplicados.
Por exemplo, num domínio de viagens, classes poderiam ser locais (cidades, estados, etc.), alojamentos (hotéis, acampamentos, etc.) e meios de transporte (aviões, carros, etc.). --
Relacionamentos: Representam algum tipo de associação entre conceitos do domínio.
Ontologias normalmente contêm relacionamentos binários, onde o primeiro argumento é o domínio (domain) da relação, e o segundo é o &quot;alcance «(range).
Em um relacionamento típico, o alcance é um outro conceito.
Por exemplo, no domínio de viagens, um relacionamento possível seria o de &quot;localizado em», onde o domínio é a classe &quot;Alojamento», e o alcance a classe &quot;Local».
Existe ainda o relacionamento implícito em toda classe, derivada de sua hierarquia, que é denominado de relacionamento &quot;é um», para com a entidade pai.
Por exemplo, numa taxonomia em que a classe &quot;Avião «é filha de &quot;Transporte aéreo», que por sua vez é filha de &quot;Meio de Locomoção», podemos deduzir a relação transitiva de que um avião é um transporte aéreo, assim como é um meio de locomoção.
Relacionamentos binários às vezes são usados para representar atributos de classes, sendo que alguns autores os classificam como um componente à parte da ontologia.
Atributos se diferenciam de um relacionamento normal, pois seu alcance é um tipo de dado (string, numérico, etc.).
Por exemplo, a relação/ atributo &quot;número do voo», tem como domínio a classe &quot;Avião», enquanto o alcance é uma string. --
Instâncias: Representam indivíduos ou elementos de uma classe, são a forma &quot;concreta «de ela.
Por exemplo, a instância &quot;Hotel Modelo», da classe &quot;Hotel», que possui o relacionamento &quot;vizinho de «com a instância &quot;Albergue de Todos da Desde 2004», a W3C passou a adotar (ainda em sua primeira versão) uma linguagem padronizada para descrever essas ontologias e seus componentes.
Denominada OWL, que vem desde então se disseminando ao redor de o mundo com grande velocidade.
A linguagem utiliza descrições semânticas formais, e é baseada em Em 2009 a W3C publicou a especificação da versão 2 da OWL, denominada OWL 2 Web Ontology Language (OWL 2), que mantém compatibilidade com a primeira versão, e adiciona novas funcionalidades, como tipos de dados mais ricos, com intervalos de dados, restrições de cardinalidade para relações, propriedades novas (assimétrica, A W3C ainda define a OWL em três &quot;sublinguagens», para uso de acordo com comunidades e usuários específicos, a partir de o abaixo descrito:&amp;&amp;&amp; --
OWL Lite: É direcionada para suportar usuários que necessitam principalmente de uma classificação hierárquica e restrições simples.
Por exemplo, embora suporte restrições de cardinalidade, ela só permite valores de cardinalidade 0 ou 1.
Permite um caminho de migração mais rápido de tesauros e taxonomias. --
OWL Dl: É direcionada a usuários que querem a máxima capacidade de expressão, enquanto mantém a computabilidade da ontologia (garantindo que as implicações sejam computáveis) e garantindo decidibilidade (todas as execuções devem terminar em tempo finito).
OWL Dl inclui todas as construções da linguagem OWL, porém com algumas restrições (uma classe não pode ser um indivíduo ou uma propriedade, por exemplo). --
OWL Full: É direcionada para aqueles que querem a máxima capacidade de expressão, sem estar presos à sintaxe do RDF e sem garantia da computabilidade.
Por exemplo, uma classe pode ser tratada simultaneamente como uma coleção de indivíduos e como um indivíduo próprio.
Um exemplo visual de uma ontologia pequena pode ser visto na Figura 5, que apresenta uma versão simplificada de uma ontologia de turismo, com todos os tipos de componentes previamente vistos.
Um exemplo prático do uso da linguagem OWL para essa ontologia pode ser visto na Figura 6, onde para construção foi utilizada a ferramenta de modelagem de ontologias Protégé.
Em a Figura 6, de entre as anotações relevantes, vemos o elemento (tag) «owl:
Ontology», que contém informações da ontologia, no caso contendo o mínimo de informações obrigatórias, que é URI único que a identifica.
Em seguida temos as declarações das classes pertencentes a essa ontologia, com o elemento «owl:
Class». Vemos ainda que aninhado a esse elemento, tem- se o relacionamento de sub-classe (&quot;é um&quot;), que pode ser descrito com o elemento «rdfs:
SubClassOf «(no exemplo mapeando um hotel como sub-classe de alojamento).
Vemos na Figura 6 também duas formas de armazenar relacionamentos entre classes, uma que utiliza o elemento «owl:
ObjectProperty», mapeando duas classes;
E a outra utilizando «owl:
DatatypeProperty», mapeando um conceito para um tipo de dado.
Esse último constituindo o caso que vimos de um relacionamento que representa um atributo da classe (telefone de alojamentos no exemplo).
Por fim, temos os alinhamentos de indivíduos, das classes &quot;Hotel «e &quot;Local», com o uso do elemento «owl:
NamedIndividual». Junto ao indivíduo &quot;Hotel_ Modelo», podemos ainda ver a notação dos seus relacionamentos, com os elementos de nome iguais aos relacionamentos, &quot;telefone «e &quot;localizado_ em».
Alinhamento de ontologias ou correspondência de ontologias (Ontology Matching), às vezes também referido como integração de ontologias, é a atividade de buscar correspondências entre conceitos de diferentes ontologias.
Em sistemas distribuídos e abertos, como a web semântica e outras aplicações que utilizam ontologias, a heterogeneidade não pode ser evitada.
O conjunto das correspondências encontradas entre duas ontologias diferentes é chamado de alinhamento.
As correspondências podem ser usadas para diversas tarefas, como união (merge) de ontologias, resposta para buscas, tradução de dados, ou até mesmo para a navegação na web semântica;
Possibilitando assim a interoperabilidade para sistemas entre as diferentes ontologias.
Os diferentes modelos de ontologias surgem devido a o seu uso e objetivo particular para uma aplicação, estando sujeitos muitas vezes à visão aplicada no momento da engenharia da ontologia, que visa os objetivos para o qual foi projetada.
As diferentes formas em que as ontologias aplicadas se encontram (diferentes realidades de negócio) também contribuem para as diferenças surgirem, uma vez que elas podem ter diferentes origens (bancos de dados, diretórios, etc.) e até mesmo diferentes linguagens (que tipicamente compartilham os mesmo conceitos).
O principal objetivo do alinhamento de ontologias é reduzir as diferenças entre as ontologias, que podem ocorrer de diversas formas e em mais de uma forma ao mesmo tempo.
Euzenat e Shvaiko categorizam algumas dessas formas dos tipos de heterogeneidade da seguinte forma: --
Heterogeneidade sintática:
Quando duas ontologias não são expressas na mesma linguagem.
Pode ocorrer quando se compara estruturas de origens completamente diferentes, por exemplo, um diretório e um modelo conceitual de banco de dados.
Mas o caso mais comum de se encontrar o problema num cenário real é o de que as ontologias foram escritas em duas formas de representação do formalismo diferentes.
Por exemplo, uma em OWL e outra em F-Logic.
Assim, muitas vezes é possível &quot;traduzir «ontologias de diferentes linguagens preservando o significado. --
Heterogeneidade terminológica:
Determina a ocorrência de variações de nomes quando se referindo à mesma entidade em diferentes ontologias.
Isso pode ocorrer por o uso de diferentes linguagens naturais (por exemplo, português e inglês), diferentes formas técnicas de tratamento da entidade (por exemplo, &quot;Papel «e &quot;Documento&quot;), ou até mesmo o uso de sinônimos (por exemplo, &quot;Carro «e &quot;Automóvel&quot;). --
Heterogeneidade conceitual:
Também chamada de heterogeneidade semântica, se refere à diferença que ocorre ao modelar um mesmo domínio.
Isso pode ocorrer devido a o uso de diferentes axiomas para definir os conceitos.
Pode ocorrer também quando duas ontologias descrevem um mesmo domínio, porém com um nível de detalhe diferente, ou de perspectiva. --
Heterogeneidade semiótica:
Também chamada de heterogeneidade pragmática, está relacionada ao modo como as entidades são interpretadas por pessoas.
Dois diferentes analistas podem classificar uma determinada entidade de forma diferente.
Esse tipo de heterogeneidade ainda é muito difícil de detectar e resolver automaticamente (por um computador).
Para esse trabalho será adotado o processo de alinhamento de ontologias definido por Euzenat e Shvaiko, que podemos descrever como uma função:
Essa função recebe como entrada duas ontologias` O1 minute e'O2 minute para alinhamento, e opcionalmente um conjunto de parâmetros 'P` e um conjunto de recursos' R'.
Como entrada possível também prover um alinhamento que caso possua correspondências pode ser utilizado durante o processo para decisões e posteriormente complementado com as novas descobertas, ou, caso &quot;vazio», simplesmente servir para ser completado e se tornar a saída da função.
Vemos a organização do processo descrito por a função na Figura 7.
É possível ainda trabalhar com um processo de alinhamento de múltiplas ontologias (mais de duas), onde as mesmas passam a serem entradas para a função descrita também.
O alinhamento resultante de um processo de alinhamento de ontologias é composto por um conjunto de correspondências entre as ontologias envolvidas.
Um fator importante nisso é a relação existente entre as entidades das diferentes ontologias.
Apesar de os algoritmos de comparação mais simples utilizarem tipicamente o relacionamento mais comum, o de equivalência ($ ), ele não é o único possível.
Relações como as definidas em OWL, por exemplo, a de disjunção (etiqueta «owl:
DisjointWith&quot;) ou de generalização (etiqueta «rdfs:
SubClassOf&quot;), podem ser utilizadas.
Por fim, qualquer relacionamento pode ser descrito, independente de existir numa linguagem formal.
Como parte do alinhamento, ainda temos associado a cada relação identificada um fator de confiança, que expressa (mede) o quanto podemos acreditar no fato que aquela relação contém.
Por exemplo, podemos dizer que uma classe &quot;Telefone Móvel «é equivalente a &quot;Telefone «com uma confiança de 70%.
Possibilitando assim que se utilize essa medida como forma de &quot;filtrar «os relacionamentos mais relevantes, ou aceitáveis.
A cardinalidade de um relacionamento ainda pode ser mais complexa que o simples 1:1.
Alinhamentos múltiplos são possíveis, por exemplo, quando mais de duas ontologias estão envolvidas, ou quando alinhamentos são encontrados para mais de uma entidade destino.
Diversas abordagens são possíveis quando se trata de descobrir alinhamentos entre ontologias.
A Figura 8 e a Figura 9 mostram uma estrutura que classifica as técnicas de acordo os tipos de técnicas para alinhamento de ontologias (baseadas na classificação dada por Euzenat e Shvaiko), em nível de elemento e em nível de estrutura, respectivamente.
Podemos descrever essas diferentes classificações da seguinte forma: --
Nível de elemento: Técnicas que processam correspondências a partir de a análise de entidades das ontologias ou suas instâncias apenas.
Isto é, as relações com outras entidades ou instâncias não são levadas em conta. --
Nível de estrutura: Ao contrário de as de nível de elemento, são técnicas que não desprezam os relacionamentos.
Elas os utilizam para analisar como as entidades e instâncias são compostas em suas redes de relacionamentos.
Para a classificação da interpretação de dados (aplicada tanto em nível de elemento quanto de estrutura), podemos analisar as três variações presentes nas classificações: --
Técnicas sintáticas:
Interpretam a entrada de dados levando em consideração apenas sua estrutura gramatical, seguindo um processo algorítmico bem definido. --
Técnicas externas:
Tiram proveito de um conhecimento comum ou informação auxiliar, providos através de um recurso extra na entrada de dados além de as ontologias para interpretar as relações. --
Técnicas semânticas:
Utilizam, como o nome sugere, recursos formais de semântica, para interpretar a entrada de dados e justificar a saída encontrada.
De forma que seus algoritmos são capazes de descobrir todos os relacionamentos possíveis (fortemente relacionados a web semântica).
Pode- se então observar a descrição detalhada de cada uma das classificações de técnicas apresentadas para classificação em nível de elemento: --
Técnicas baseadas em strings:
São tipicamente voltadas para fazer a correspondência de nomes ou descrições de entidades das ontologias.
O mais comum é realizar uma análise das strings, de forma que quanto mais próximas (similares) elas forem, maior a probabilidade de que elas representem o mesmo conceito.
Essas técnicas semântica.
As diferenças entre os nomes podem ocorrer basicamente por quarto motivos:
As entidades são diferentes e representam diferentes classes;
As entidades apresentam diferentes nomes (por exemplo, por serem sinônimos ou homônimos);
Estão escritas em diferentes línguas;
São apresentadas de forma abreviada.
O que se busca com essas técnicas é resolver o problema para quando as entidades representam a mesma entidade.
Tipicamente implementações desse tipo de técnica mapeiam um par de strings para um número real, que indica o quanto as duas strings são similares.
Exemplos de técnicas seriam as que se baseiam em, além de os nomes como um todo, normalizar o texto através de:
Subtrings dos nomes para comparação;
Remoção de acentos;
Conversão para minúsculo;
Remoção de espaços em branco excedentes;
Remoção de números;
Outros exemplos de métodos mais robustos seriam:
O uso de edit-distance (como a distância de Levenstein), que calcula o número mínimo de alterações necessárias para Hamming, que calcula o número de caracteres diferentes entre duas strings;
N-gramdistance; Entre outras medidas baseadas em distância, similaridade, e análise de tokens.
Devido a os exemplos acima mencionados, esse grupo de técnicas está fortemente relacionado à língua em que está escrita a ontologia.
Além de que, algumas das implementações das técnicas podem levar a uma perda de informação (devido a redução visando aproximar strings, por exemplo), situação essa que deve ser levada em consideração e pesada ao elaborar os métodos. --
Técnicas baseadas em linguagens:
São baseadas em técnicas de PLN, analisando propriedades morfológicas das palavras ou sentenças dadas como entrada.
Tipicamente, essas técnicas são aplicadas aos nomes das entidades, antes de executar técnicas baseadas em strings ou dicionários, visando melhorar os resultados.
Podendo ser consideradas uma classe à parte de técnicas de alinhamento, visto que elas podem ser estendidas para, por exemplo, um cálculo de distância (comparando as strings resultantes de um conjuntos de strings).
Alguns exemplos de métodos baseados em linguagens são:
O de comparação do &quot;caminho «das entidades (path distance), que está relacionado a técnicas baseadas em taxonomias, através da concatenação de todas as subclasses e superclasses de uma entidade e análise disso como um todo;
Análise de tokens;
Lematização e stemming, que consistem em reduzir ou converter uma palavra a um radical ou forma básica comum; --
Técnicas baseadas em restrições:
São algoritmos que lidam com restrições internas aplicadas na definição de entidades da ontologia, como tipos, cardinalidade de atributos, identificadores, etc. -- Técnicas de recursos linguísticos:
Utilizam recursos linguísticos, como dicionários e tesauros específicos do domínio.
Com o suporte desses recursos, procuram encontrar associações entre nomes de entidades (aqui consideradas palavras/ sentenças em língua natural).
Um exemplo de análise que pode ser feita é a comparação de sinônimos ou hiperônimos.
Alguns exemplos dessas técnicas incluem o uso auxiliar de recursos externos às estruturas conhecidas, como:
Dicionários para sinônimos;
Dicionários de tradução de línguas, para quando se tratar de mais de uma língua a análise;
Tesauros, para análise de hiperônimos/ hipônimos;
Terminologias; Entre outros. --
Técnicas de reuso de alinhamento:
É um meio de utilizar recursos externos de outra forma, onde alinhamentos de ontologias previamente mapeadas são aproveitados para análise desse novo alinhamento.
São indicadas por a premissa que muitas ontologias já alinhadas são similares às que serão mapeadas, principalmente se tratando de um mesmo domínio.
Por exemplo, se possuímos de antemão o alinhamento de uma ontologia O 1 com uma ontologia O2, e o alinhamento da ontologia O1 com O3;
podemos utilizar esse conhecimento para &quot;passar «por os alinhamentos conhecidos de O1 para auxiliar a deduzir os alinhamentos entre O2 e O3. --
Técnicas de ontologias auxiliares:
Englobam o uso de ontologias de nível superior e de domínio específico.
Ambas são baseadas em lógica e, portanto, técnicas que as exploram são baseadas em semântica.
Ontologias de nível superior podem ser usadas como fonte de conhecimento comum, uma vez que comportam conceitos gerais, que devem ser os mesmos em todos os domínios de conhecimento.
Ontologias de domínio específico, ao contrário, utilizam termos de um domínio em particular, de uma forma que são relevantes apenas para esse domínio, e não relacionadas a conceitos similares em outros domínios.
Por exemplo, uma ontologia de biblioteca pode ser usada como contexto para uma ontologia de livros, provendo parte da estrutura.
E por fim, é possível observar a descrição detalhada de cada uma das classificações de técnicas apresentadas para classificação em nível de estrutura: --
Técnicas de análise de informações:
Realizam uma análise de dados e estatísticas disponíveis para o contexto, a fim de encontrar conformidades e discrepâncias para calcular a similaridade de entidades.
Para isso levam em consideração inclusive as instâncias da ontologia em análise.
Exemplos de técnicas desse tipo são classificações baseadas em distância, formal concept analysis (FCA), distribuição de frequências (técnica estatística usada para apresentar uma coleção de objetos classificados de modo a mostrar o número existente em cada classe). --
Técnicas baseadas em grafos:
São técnicas que consideram as ontologias de entrada como uma estrutura de grafos rotulados.
Existem ainda abordagens que consideram formas de grafos mais específicos, como as que utilizam a estrutura de árvores.
Tipicamente a análise de similaridade ocorre baseada na posição dos nodos dentro de os grafos montados.
Por exemplo, se dois nodos são similares, seus vizinhos devem ser de alguma forma similares também. --
Técnicas baseadas em taxonomias:
Também são técnicas baseadas em grafos, porém considerando somente a relação hierárquica de especialização.
Portanto, se comparados os subconjuntos de termos superiores e inferiores de um determinado termo, com os mesmos conjuntos de outros, espera- se que eles sejam similares.
Por exemplo, se o conjunto de subclasses de duas entidades ou a superclasse da entidade têm o mesmo valor, é extremamente provável que elas sejam similares.
Um problema dessa abordagem reside no fato de que, se analisada por completa a taxonomia de uma classe, eventualmente classes de distantes caminhos na árvore acabarão tendo uma ou mais classes bases em comum (a raiz, por exemplo);
Sendo necessário nesses casos utilizar algum outro critério para discriminar. --
Técnicas de repositórios de estruturas:
Utilizam repositórios de estruturas de ontologias e/ ou fragmentos de ontologias, onde a cada uma dessas estruturas está associado um valor de referência para a similaridade entre as ontologias comparadas.
Quando se deseja que novas estruturas (ontologias ou partes de uma) sejam mapeadas, é primeiro realizada uma consulta a esses repositórios, para avaliar a possível relevância de comparar essas duas estruturas.
Essas técnicas se diferenciam das de reuso de alinhamento por não guardarem o alinhamento entre duas ontologias, mas apenas a similaridade de duas ontologias;
Para tal, a similaridade de duas estruturas deve ser computacionalmente mais &quot;barata «de se medir que análise das mesmas por completo.
Um exemplo de implementação de tais técnicas pode ser a abordagem de Rahm, que para mapear duas estruturas, propõe usar alguns meta-dados de descrição, tais como nome da estrutura, número de nodos, nome de o (s) nodo (s) raiz, profundidade máxima da árvore, etc..
Ele então agrega essas informações para gerar um coeficiente de similaridade. --
Técnicas baseadas em modelos:
Interpretam os dados baseadas em seu significado semântico.
São portando métodos fortemente dedutivos, baseados em informações já conhecidas das entidades, pois se duas entidades são a mesma, elas compartilham a mesma interpretação.
Um exemplo de implementação seria o uso de reasoners para inferência de equivalências entre entidades.
O International Semantic Web Conference (ISWC) é o maior fórum internacional para as comunidades que trabalham com web semântica e dados relacionados (Linked Data, método de conectar dados distribuídos através da internet).
Em ele são apresentadas as mais recentes pesquisas e resultados, inovações técnicas, e discutido o futuro de soluções inovadoras dessas áreas.
Matching, workshop focado em atividades de alinhamento de ontologias.
Esse workshop tem como objetivo reunir líderes de universidades, empresas e interessados para avaliar os avanços acadêmicos em como lidar com problemas do mundo real.
Por fim, associada a esse workshop está a Ontology Alignment Evaluation Initiative (OAEI).
Desde 2004, a OAEI organiza campanhas com o objetivo de avaliar tecnologias de alinhamento de ontologias (Ontology Matching).
Essa necessidade surgiu do crescimento do número de métodos disponíveis para realizar integrações entre ontologias e fazer correspondência de esquemas (Schema Matching).
O objetivo dessa iniciativa é verificar e avaliar quais técnicas são capazes de encontrar correspondências corretas num conjunto de ontologias que descrevem um domínio comum.
As ontologias disponíveis são descritas em OWL-DL e os alinhamentos providos por os participantes devem ser num formato próprio (provido por a Alignment API), e ambos são serializados no formato RDF/ XML.
Os resultados enviados são então avaliados automaticamente através de um alinhamento de referência (construído e/ ou revisado manualmente).
A OAEI recomenda aos participantes o uso da Alignment API, um framework criado para atividades comuns ao alinhamento de ontologias que é detalhado na Subseção Etapa 2 desse estudo) são:
Desenvolvimento de algoritmos de alinhamento com a criação de processos de alinhamento e matchers, busca de alinhamentos nas ontologias, melhora de algoritmos, comparação de alinhamentos, manipulação de saída dos dados, entre outros.
Alguns matchers usados em edições da OAEI serão utilizados nesse tranbalho para avaliações de resultados, portanto o mesmos são melhor detalhados nesse subcapítulo.
O matcher de ontologias Aroma é projetado para encontrar relações de equivalência e subbmissão entre as entidades, classes e propriedades derivadas de duas taxonomias textuais ou ontologias OWL.
Ele utiliza o parafigma da regra de associação e uma medida estatística de interesse, que implica na intensidade da relação.
O Aroma baseia- se no seguinte pressuposto:
&quot;Uma entidade A será mais específica ou equivalente a uma entidade B se o vocabulário usado para descrever A, seus descendentes e sua instâncias tender à incluir o mesmo vocabuláio que B».
O matcher AFLOOD utiliza como essência do seu algoritmo de corrêspondência a localização de refência, levando em consideração entidades vizinhas e relações para alinhar conceitos de ontologias.
Ele começa de um ponto chamado &quot;âncora», e a partir de ele coleta dois blocos de conceitos vizinhos através da ontologia.
Esses blocos são então alinhados e o processo se repete.
O matcher Falcon propõe uma série de diferentes abordagens para encontrar corrêspondências para diferentes (porém relacionadas) ontologias.
Atualmente estão inclusas técnicas estruturais iterativas, de corrêspondência linguística de particionamentos de grandes ontologias.
O Simple Knowledge Organization System (SKOS) é um modelo de dados comum para compartilhamento de vocabulários estruturados e controlados para web semântica.
Assim como o OWL, o formato SKOS é um padrão da W3C, e construído baseado em RDF, podendo inclusive ser usado combinado com OWL e outras linguagens formais de representação de conhecimento.
Diversas aplicações compartilham uma estrutura similar para seus dados (esquemas de conceitos), como tesauros, taxonomias, esquemas de classificação, etc..
O SKOS captura grande parte dessa similaridade e a torna explícita, para disponibilizar dados e compartilhamento de tecnologia para diversas aplicações.
Em o SKOS básico, conceitos são identificados com Uris (assim como OWL), nomeados com uma ou mais strings, numa ou mais linguagens naturais.
Podem ainda ser documentados com vários tipos de anotações, relacionados semanticamente entre si e agregados em esquemas de conceitos.
Em um SKOS mais avançado, os conceitos podem ser mapeados entre diferentes esquemas de conceitos, ou ainda agrupados de acordo com seus nomes, visto que um conceito pode ter diversos (chamados de nomes alternativos).
Relacionamentos podem inclusive ser criados entre nomes específicos de conceitos.
Por fim, o próprio vocabulário da linguagem pode ser estendido para se adaptar às necessidades do usuário.
Em a Figura 10 vemos um exemplo do conceito &quot;Celular «(onde a etiqueta «skos:
Concept «assinala conceitos da estrutura), anotado com linguagem SKOS.
Existem ainda outras etiquetas &quot;superiores «que agrupam conjuntos de conceitos, que poderiam ser usados para mapear inclusive relacionamentos entre esses diferentes conjuntos.
As etiquetas «skos:
PrefLabel &quot;e «skos:
AltLabel &quot;são então usadas par armazenar formas de referência ao conceito, como vemos com os dois nomes típicos para o conceito, «Celular &quot;e «Telefone Móvel».
Tipicamente a etiqueta «skos:
AltLabel &quot;armazena sinônimos para o conceito, podendo ambas as etiquetas ainda armazenar nomes alternativos em outras línguas naturais, conforme vemos denotado por o atributo «xml:
Lang», onde temos o valor em inglês para o conceito:
&quot;Cell Phone». Vemos ainda duas etiquetas que representam relacionamentos, a «skos:
Broader», que sinaliza um relacionamento em que o conceito indicado é diretamente superior na hierarquia, como a categoria &quot;Telefonia».
Enquanto a etiqueta «skos:
Related &quot;é usada para simplesmente declarar um relacionamento qualquer entre dois conceitos, como a relação de celulares com «Smartphones».
Em essa subseção, serão abordados alguns tópicos relacionados a tecnologias empregadas mais especificamente para a programação da solução descrita nesse trabalho.
A Alignment API é um framework para implementar, expressar e compartilhar alinhamentos de ontologias.
Desenvolvido em tecnologia Java, permite a manipulação de alinhamentos, desde a interpretação das ontologias, através do processo de alinhamento, avaliação de resultados (comparação de alinhamentos), até a saída resultante (o alinhamento das entidades).
O formato usado para exibir a saída do processamento, isso é, o alinhamento em si, adotado por mais aplicações, é definido por Euzenat.
O formato é escrito usando RDF/ XML, sendo portanto, livre de uma linguagem de programação específica.
Um exemplo desse formato pode ser visto na Figura 11.
Como detalhes da etiqueta &quot;Alignment», que engloba um alinhamento, temos o elemento &quot;level», que pode ter valor &quot;0», quando é apenas o alinhamento entre duas entidades, valor &quot;1 «quando é um alinhamento entre conjuntos de entidades e valor &quot;2 «para tipos de alinhamentos mais presos a uma linguagem específica, permitindo o uso de lógica de primeira ordem para expressar os alinhamentos.
Existe ainda a etiqueta &quot;type», que indica o tipo de alinhamento (cardinalidade), como &quot;11 «(1:1),&quot;* «(n:
M), etc..
Além de os Uris que identificam as ontologias sendo analisadas.
Após esses elementos básicos, temos uma etiqueta &quot;map «e uma série de etiquetas &quot;Cell», que armazenam os alinhamentos encontrados entre duas entidades das ontologias.
Em elas, as etiquetas &quot;entity1 «e &quot;entity2 «armazenam os Uris das entidades que possuem o relacionamento.
Enquanto a etiqueta &quot;measure «contém um valor entre 0 e 1, com a confiança na relação mapeada, que por sua vez é descrita por a etiqueta &quot;relation».
É possível ainda estender (implementando novas técnicas de correspondência, por exemplo) a API, através da customização de seus componentes, como: --
AlignmentProcess: É uma interface que deve ser implementada para cada algoritmo de alinhamento, com um processo bem definido para a realização do mesmo.
Ela provê a lógica do método de alinhamento em si, que pode consultar matchers para tal; --
Matcher: Implementa uma forma de alinhar um relacionamento entre duas entidades, com uma determinada confiança; --
Relation: Pode ser estendida para declarar novos tipos de relações; --
Evaluator: É uma interface que descreve a comparação de dois alinhamentos (por exemplo, o primeiro pode ser utilizado como o de referência); --
Renderer: Permite criar novas formas de renderizar o alinhamento resultado, podendo assim alterar o formato para um diferente do padrão.
A XML Path Language (Xpath) é uma linguagem recomendada e padronizada por a W3C, projetada para a realização de consultas em arquivos XML, selecionando elementos do mesmo.
A XPath opera na estrutura abstrata e lógica de um documento XML.
O nome é originado da notação utilizada, que é semelhante a um caminho (path) de diretórios ou de URLs, para então realizar a navegação entre as estruturas hierárquicas do documento XML.
A principal unidade sintática do Xpath é a expressão.
Uma expressão é capaz de simbolizar a busca por resultados e retornar- los numa das quatro estruturas básicas:
Um ou uma string.
Além de as expressões para caminhos, a Xpath ainda possui mais de 100 funções incluídas na linguagem que possibilitam a manipulação de strings, números, datas, comparações de tipos, além de a manipulação de nodos (como obter o próximo, filhos, etc). --»
/&quot;: Referência o nodo raiz; --».&quot;:
Seleciona o nodo atual; --&quot;:
Verifica se a condição interna é verdadeira (usado para construção de filtros); --»
@&quot;: Seleciona atributos;
O Selenium WebDriver é uma ferramenta para automação de testes em aplicações web, tipicamente para validar o seu funcionamento.
Seu objetivo é prover uma API (framework) para explorar as funcionalidades do sistema sendo construído, facilitando e tornando mais simples os testes que devem ser executados.
Por exemplo, desde verificar obrigatoriedade de campos até mesmo regras de negócio, preenchendo determinados campos e realizando determinados fluxos de navegação.
Em um script de execução do WebDriver, é possível descrever através de linguagens de programação (como Java, PHP, C&amp;, etc.) a ordem dos passos que devem ser executados.
Cada passo dos testes pode ter diversas formas de interagir com a tela, como clicar em elementos, preencher campos, verificar a presença de elementos, navegar entre páginas, etc..
Para execução de ações sobre os elementos da tela (contidos no código Html), é necessário utilizar alguns de entre diversos comandos para obter- los:
Através do atributo &quot;id «das etiquetas, ou do atributo &quot;class», e finalmente, o recurso mais dinâmico, através de comandos XPath.
Apesar de ter sido projetado para arquivos XML, o WebDriver utiliza XPath para navegar entre os elementos Html da mesma forma (sujeito a eventuais problemas da falta de integridade desse formato).
WebDriver é especificamente o nome da interface principal, onde os testes são implementados, porém existem diversas implementações para a mesmo, cada uma simulando navegadores (browsers) diferentes.
É possível então tornar portáveis os testes e validar se a aplicação se comporta como esperado quando é alterado o navegador utilizado.
Durante sua execução é possível visualizar o mesmo que um usuário ao acessar e navegar por a página web, visto que o framework abre uma instância do navegador.
A única limitação apresentada por o WebDriver para o objetivo, descoberta ao longo de o processo detalhado na Subseção 3.2, foi que devido a o fato de ser projetado para simular a interação de um usuário do sistema com a página apresentada, ele não permite a obtenção e interação (por exemplo, clicar) com elementos que não estão visíveis (visto que um usuário final não seria capaz de fazer o mesmo).
Por ser um projeto open source (com código-fonte disponível), foi possível recompilar o framework por completo, implementando as modificações necessárias.
O termo comércio eletrônico (e-commerce), teve origem no final dos anos 70, quando era referenciado como o uso de tecnologia para transmissão de documentos comerciais de forma eletrônica.
Em esses tempos o uso de cartões de crédito e até serviços de atendimento ao cliente eram considerados formas de e-commerce.
Desde a popularização da internet, e o desenvolvimento de protocolos de segurança para transações em ela, o termo passou a se referir ao uso de um aparelho eletrônico (computador, celular, tablet) para realizar uma transação comercial.
Com a expansão desse segmento para consumidores, surgiu o espaço para que empresas passassem a disponibilizar produtos e serviços online.
Desde essa época, autores já consideravam as empresas que operam exclusivamente na internet, a exemplo da Amazon, eBay, e Yahoo, como pioneiros de uma &quot;nova economia», capazes de ameaçar a liderança das empresas tradicionais.
E esse espaço é concorrido até os dias de hoje por empresas puramente virtuais, com preços competitivos, e por empresas com lojas físicas, que tentam manter a competitividade.
Além de o fator de aumento da quantidade de acessos por diversos nichos da sociedade a internet na última década, as empresas passaram a investir nos seus segmentos de e-commerce devido a as vantagens que o mesmo apresenta, tais como: --
o negócio estar disponível 24h por dia, 7 dias por semana; --
fatores de economia em relação a os empreendimentos físicos (lojas), tais como gasto com empregados, aluguel, organização e manutenção do espaço; --
divulgação mais rápida de promoções, assim se tornando ainda mais competitivas; --
possibilidade de aplicarem descontos sobre os preços praticados em lojas, devido as economias aplicadas nos itens anteriores.
As negociações tipicamente envolvem uma forma de pagamento digital, que caminha junto com a evolução das tecnologias para pagamento na internet.
Atualmente as mais populares e utilizadas no Brasil são os cartões de crédito (em torno de 67% optam por esse meio), boleto bancário (em torno de 20%) e a Transferência Eletrônica de Fundos (2%).
As negociações ainda são divididas em dois grandes grupos, as do tipo B2C (Business- to Consumer, negócio-a-consumidor), e o B2B (Business- to Business, negócioa-negócio).
Como o nome sugere, as do tipo B2C são as transações voltadas para o consumidor final, como a venda de produtos e serviços online.
Enquanto as do tipo B2B, são aquelas que determinada empresa realiza para com outras, por exemplo, fornecedores de produtos para vendas, ou de material necessário para suas atividades e operação.
Com os fatores previamente apresentados que se aplicam sobre o e-commerce, o crescimento exponencial que vemos na Figura 13 representa o resultado esperado do faturamento resultante de tamanha movimentação de finanças.
Com um crescimento médio de 44,2% em por ano, analisando a última década, podemos afirmar que essa é uma área que deve ser analisada, estudada e trabalhada com atenção.
A Inteligência Competitiva, às vezes também referenciada como` Inteligência de Mercado', é um conjunto de diversas ações para identificação de riscos e oportunidades para a atuação no mercado por parte de uma organização.
Fleisher e Blenkhorn defendem que a IC é o processo por o qual as organizações obtêm informações sobre concorrentes e o ambiente competitivo e, idealmente, as aplicam ao seu processo de tomada de decisões e planejamento.
A Associação Brasileira dos Analistas de Inteligência Competitiva (ABRAIC) define ainda a Inteligência Competitiva como um processo informacional proativo que conduz à melhor tomada de decisão, seja ela estratégica ou operacional.
É um processo sistemático que visa descobrir as forças que regem os negócios, reduzir o risco e conduzir o tomador de decisão a agir antecipadamente, bem como proteger o conhecimento gerado.
Uma vez levantada a definição de IC, pode- se ainda verificar a abrangência da sua aplicação, isso é, a utilização de tais métodos não está limitada apenas a grandes empresas multinacionais ou mesmo a setores específicos de uma determinada empresa.
Uma empresa pequena precisa de uma análise das condições do mercado em que está envolvida, tanto quanto as grandes empresas, para suas tomadas de decisões.
Assim como não é um técnica limitada a um departamento específico, visto que pode ser aplicada a áreas de marketing, P&amp;D, recursos humanos, gerência de projetos a longo e curto prazo, entre outras.
A IC busca analisar e estruturar dados encontrados em diversos ambientes e em diversos formatos, visando construir assim a base para posteriores consultas (ainda que não necessariamente computacionalmente).
Essas bases para consulta construídas idealmente passam por o processo de integração de informações, que é definido como uma forma de acessar um conjunto de informações heterogêneas de forma unificada.
Para um sistema de IC, ter a integração de informações significa acessar através do mesmo, numa estrutura única, na forma de um mediador, diversas informações relevantes para o objetivo declarado.
Como parte desse desafio, surge a integração semântica, que busca garantir que informações realmente relevantes ao contexto (equivalentes às estruturas/ conceitos declarados) serão consideras e absorvidas por o sistema.
Em relação a os tópicos já abordados nessa seção e relevantes a essa pesquisa, podemos encontrar diversos trabalhos que situam o mesmo no estado da arte.
No que se refere à análise de informações para IC, existem alguns estudos acadêmicos já aplicados à área usando técnicas de PLN, como análise de sentimentos, extração de ontologias, reconhecimento de entidades nomeadas (REN).
Em este estudo, o foco será num contexto de dados apresentados numa estrutura hierárquica, realidade não ainda explorada para IC.
Voltando a analisar a campanha da OAEI detalhada na Subseção 2.3, pode- se perceber que é muito importante para analisar o estado da arte no âmbito de alinhamento, por ser um evento internacional onde as mais recentes soluções são apresentadas e testadas.
Muitas de elas apresentam abordagens com técnicas recentes e diferentes das convencionais, como as que utilizam programação genética, outras que trabalham com Linked Data, algumas ainda proporcionam comparações de alinhamentos com a possibilidade de fusão (merge) de ontologias.
Por fim ainda temos técnicas propostas que analisam a similaridade semântica para alinhamentos, estudo pouco abordado especificamente para esse fim.
Outros trabalhos acadêmicos da área para o propósito de analisar similaridades, proposta similar a desse estudo, podem ser destacados, como a aplicação de métricas para avaliar a similaridade de estruturas e similaridade semântica de duas ontologias.
Pode- se mencionar para tal a aplicação de métricas para avaliar a similaridade semântica de duas ontologias, como a SiSe, e posteriormente o estudo feito sobre a mesma por Brandolt, esses especificamente aplicados a ontologias em português.
Esse trabalho surge então um contexto que é motivado por os problemas da IC, abordando uma estrutura de dados diferente de outros trabalhos (mas com objetivos similares).
Enquanto isso se baseia nas práticas, estruturas e metodologias propostas por a OAEI e praticadas nos trabalhos publicados na mesma.
Devido a o contexto de e-commerce, algumas técnicas de trabalhos apresentados na Subseção 2.8.1 foram utilizadas para inspirar parte do projeto desenvolvido.
Projeto esse que se propõe ainda a ser dinâmico o suficiente para futura utilização de trabalhos como os de similaridade de estruturas e similaridade semântica, e diversos outros encontrados no meio acadêmico.
Diversos trabalhos e iniciativas de pesquisa realizadas nos últimos anos foram voltados a tópicos relacionados ao e-commerce e e-catalogs, visando tipicamente a construção de algum modelo padrão de referência, comum a várias aplicações.
Vegetti et al.
Abordam a necessidade de um modelo de produtos integrado e compartilhado para as organizações utilizarem, porém de uma forma muito mais &quot;industrial», focando na composição dos produtos até o nível de matéria-prima, baseandose nas listas de materiais das empresas.
Trabalhos iniciais nesse tema também abordaram meios de unificar padrões da indústria para classificação de produtos, como os mais populares UNSPSC, eCl@ ss e RosettaNet Technical Dictionary.
Essas abordagens são interessantes por os métodos utilizados para combinação das diferentes estruturas, mas não são muito práticas para os usuários finais, pois possuem extensos níveis de hierarquia extremamente detalhados e com uma categorização muito mais próxima da linguagem da indústria.
Algumas das pesquisas sobre o tema são realizadas buscando ainda métodos de recomendação de produtos otimizados.
Outros trabalhos acabam por atingir objetivos mais específicos na interação com produtos, como comunicação entre agentes para negociação.
Lógicas essas que encontramos em sites de vendas e negociação online, e extremamente valorizadas por o mercado corporativo.
Lee e Shim propõem um modelo formal de ontologia para modelagem de produtos, incluindo seus respectivos esquemas de classificação e atributos, assim como uma grande variedade de relacionamentos.
Aqui será abordado o desenvolvimento do framework PLATAL.
Será visto a arquitetura da solução em nível de módulos para o usuário assim como o uso de tecnologias para compor o software final.
A aplicação disponibilizada é composta por quarto módulos, cada um agregando diferentes funcionalidades relacionadas a atividades de alinhamento de hierarquias/ ontologias.
Por ser uma aplicação escrita em tecnologia Java, se fez uso de diversos outros frameworks disponíveis, detalhados no Capítulo 2.
Em a Figura 14 ­ Arquitetura de software da solução é exibida a relação de cada módulo com as tecnologias e customizações usadas.
Percebe- se então que o módulo de extração de hierarquias possui uma dependência um pouco diferente, pois utiliza o Selenium WebDriver e expressões XPath para navegar e selecionar trechos de páginas, para por fim exportar para formatos SKOS e OWL.
Os demais módulos estendem funcionalidades disponibilizadas principalmente na Aligment API, customizando componentes para servir as necessidades desse trabalho.
Isso ocorre através da customização de matchers para tornas- los flexíveis e avaliadores para exibir os resultados desejados.
Todos os módulos da solução desenvolvida possuem também como grande diferencial apresentarem interface gráfica para as ações.
Isto é, a entrada dos dados e até mesmo a leitura de resultados pode ser feita completamente em janelas, possibilitando um usuário operar as funções sem programação caso deseje.
A primeira etapa neste trabalho é a extração das hierarquias exibidas em páginas da internet, para sua posterior análise, de uma forma similar à ação de um crawler.
Após a captura das hierarquias, é possível realizar a exportação para os formatos padrões para visualizar essas informações.
Como parte da ferramenta disponibilizada nesse trabalho, foi desenvolvida a interface do módulo que vemos na Figura 15 para realizar as operações necessárias ao longo de essa etapa.
Os passos para a implementação desse módulo são descritos de acordo com o fluxo que vemos na Figura 16.
A ferramenta construída possibilita manipular partes de um documento Html, para ler os elementos contidos em sua estrutura, e também permite navegar entre diferentes páginas para buscar o restante de uma hierarquia (nem sempre presente numa única página), conforme ilustrado na Figura 17.
Foram analisadas algumas ferramentas/ frameworks e tecnologias para acesso e manipulação de conteúdo de páginas da internet, muitas dessas Apis e projetos lidavam com arquivos Html de forma bem otimizada, porém poucos proporcionavam o controle de navegação que era necessário para a organização comumente encontrada nas páginas estudadas.
Por exemplo, era necessário obter a URL de um atalho da página e direcionar o navegador para ela, porém alguns desses endereços se encontram em sua forma relativa (partem do endereço já presente na página do navegador).
Piores cenários incluíam casos em que os redirecionamentos a partir de interação do usuário com a tela eram realizados através de código JavaScript, que necessitavam de um navegador para os interpretar, o que onerava a tarefa de navegação a um ponto de tornar- la praticamente inviável.
Através do estudo de ferramentas de automação de navegação em páginas, foi identificado o Selenium WebDriver, que conforme foi detalhado na Subseção 2.5.3, é originalmente um projeto para testes automatizados.
Ele, contudo, atende às necessidades deste trabalho por ser capaz de simular um navegador por completo, e realizar operações sobre a página como se um usuário humano as estivesse fazendo.
Por apresentar essas características, o WebDriver foi adotado como ferramenta de obtenção das páginas Html.
Foi construída então uma forma de utilizar o WebDriver para abrir páginas web, obter elementos presentes na página, interagir com esses elementos, e realizar navegação para qualquer endereço presente na tela.
Em a Figura 18 vemos um trecho de um arquivo Html acessado através da ferramenta.
A partir de a etiqueta &quot;div», vemos a montagem de parte da hierarquia exibida para um usuário, onde cada etiqueta h2 dentro de o caminho de etiquetas «div /ul/li contém o nível pai;
Enquanto as etiquetas &quot;a», contidas dentro de o caminho ul/ li «irmão ao elemento h2 da pai, representam os filhos da mesma.
Para realizar tais operações de navegação é necessário determinar o endereço inicial (onde os nodos raiz da hierarquia se encontram), e um nome único para essa hierarquia ser referenciada, conforme vemos na seção &quot;a «da Figura 15.
Uma vez atingida a meta de obter os arquivos necessários para investigar as hierarquias contidas nas páginas, se torna necessária a definição de uma notação comum que possa ser informada para a extração da estrutura de tais arquivos.
A notação precisa ser capaz de obter qualquer estrutura hierárquica de elementos Html, de forma parametrizável para cada e-catalog.
Com isso, em cada estrutura de página pode- se flexibilizar a forma de seleção dos nodos da hierarquia de acordo com sua estrutura de apresentação, independente do formato.
Apoiada por a ferramenta escolhida para acessar as páginas no passo 1, foram adotadas as expressões XPath, que permitem expressar uma forma dinâmica de obter os diferentes níveis da hierarquia definida.
Em a Figura 19 vemos como a execução de uma expressão XPath sobre o código Html apresentado na Figura 18 pode selecionar determinado conjunto de elementos que representam um nível da hierarquia.
Em posse dessa seleção de nodos, o texto puro contido em cada um é extraído como o nome de entidades do nível em análise.
Com a capacidade de selecionar coleções de elementos com apenas uma expressão, foi necessário definir uma estrutura que permita uma série de expressões, uma para cada nível da hierarquia, conforme vemos na seção &quot;b «da Figura 15.
Em ela, de acordo com o número de níveis informado, serão exibidas linhas que representam cada nível da hierarquia a ser extraída, de forma que ao buscar por as categorias do nível correspondente em tempo de execução, o programa executará a expressão ali informada para obter os elementos.
Resta agora detalhar a forma de relacionar uma série de elementos selecionados do Html com a entidade &quot;pai «(nível da hierarquias imediatamente superior).
Em a Figura 20 vemos um exemplo da solução elaborada, através de especificação da entidade pai no próprio XPath.
Foi criada como parte da solução as variáveis «onde n representa qualquer nível de entidade pai superior.
Com isso se tornou possível modificar em tempo de execução a expressão de cada conjunto de entidades filhas de acordo com a entidade pai.
Desta forma, uma expressão para um determinado nível, ao retornar todos os elementos do mesmo, pode filtrar apenas os que se referem à entidade pai corrente.
Após a definição da forma de associar nodos filhos a pais em diferentes níveis, o foco foi direcionado para resolver o problema relativo à disposição das hierarquias em diferentes páginas.
É necessário que para capturar uma hierarquia por completo, sejam realizadas navegações entre diferentes páginas, de forma que seja possível dizer quais níveis estão em diferentes páginas.
Tirou- se proveito da estrutura do WebDriver, possibilitando clicar em elementos para fazer essa navegação.
Chegando à solução final que vemos na seção &quot;c «da Figura 15, que na coluna &quot;Necessita clique «indica se o elemento capturado naquele nível da hierarquia deve ser clicado a fim de acessar sua sub-hierarquia (estrutura de menu/ sub-menu).
Por exemplo, se temos uma parte da estrutura numa página Html, e outro numa segunda página, dizemos que o nível da primeira página necessita de clique para acessar os subníveis.
Com isso, o framework utilizado se encarrega de realizar um clique sobre o elemento capturado no momento de leitura, que independente da etiqueta Html, se comportará como se o usuário realizasse o clique e aguardasse a página seguinte carregar.
Com os passos previamente descritos, o usuário pode executar a extração da hierarquia, através da seção &quot;d «destacada na Figura 15, e visualizar o resultado na seção &quot;e «da mesma figura.
Finalmente, com a estrutura hierárquica adquirida, resta a operação de salvar a mesma num formato padronizado, que sirva tanto para a próxima etapa desse trabalho quanto para reuso em demais aplicações.
Durante o estudo de técnicas que realizem o alinhamento, foi percebido que a maior parte trabalha a partir de ontologias, e por consequência a linguagem OWL.
Esse é, portanto, o primeiro formato possível para exportação disponibilizado por a aplicação construída.
Esse formato serve de entrada para as técnicas que veremos mais adiante no estudo.
O diferencial desse estudo, porém, é que o mesmo se baseia em estruturas de websites sem uma organização semântica minimamente rígida, ou seja, não possuem características de uma ontologia.
Para casos como o que encontramos na análise de e-catalogs, o formato OWL não pode ser aplicado formalmente para armazenar a estrutura.
Dois são os principais fatores que acarretam nessa conclusão, primeiro o de que as estruturas de classificação dos websites não possuem necessariamente a relação &quot;é um «de suas entidades filhas para as entidades pais.
Como vemos na Figura 21, a entidade &quot;Limpeza «não é um &quot;Automotivo».
Em a mesma ilustração observamos o segundo fator mencionado, que é o caso de duas entidades com o mesmo nome nesse domínio representarem conceitos diferentes:
&quot;Acessórios «abaixo de a categoria &quot;Automotivos «não pode ser agrupado ou alinhado como equivalente da categoria de mesmo nome abaixo de a categoria &quot;Equipamentos para DJ».
Com esse novo cenário, se estudaram formas alternativas e corretamente formais (visto que OWL não seria o correto) de armazenar estruturas, e chegou- se à conclusão de que a que mais se adaptava às necessidades e ao formato em que se encontravam os dados seria a do SKOS, voltado para classificação de esquemas.
Concluindo assim os formatos disponíveis e interessantes para esse trabalho.
Durante a exportação, alguns processamentos são feitos em cima de os nomes das entidades capturadas.
Por exemplo, são tratados caracteres que são reservados para o formato de saída, assim como os espaços em branco são substituídos por o caractere underline( «&quot;).
Ainda para as entidades que possuem um nome duplicado na mesma hierarquia, foi definido que para cada instância encontrada com o nome seria utilizado o padrão &quot;Nome_ Entidade», como observado na Figura 22, onde n representa um número único sequencial por entidade para identificar aquela aparição do nome na estrutura.
Sendo necessário tratar o nome da entidade apropriadamente para correta comparação durante a Etapa 2 também.
Com essa ultima operação, se conclui essa primeira etapa do estudo e da ferramenta construída.
Está disponível para o usuário final a possibilidade de acessar uma hierarquia num site, descrever uma forma dinâmica para obter- la em seus diversos níveis e exportar os dados lidos para os formatos padronizados por a W3C.
Em essa segunda fase, será utilizado como entrada as hierarquias obtidas durante a etapa anterior.
Elas serão processadas ao longo de uma série de heurísticas com o intuito de analisar a equivalência entre as entidades de duas hierarquias diferentes.
Por fim, os resultados serão exportados para um formato de alinhamento padronizado.
A Figura 23 ilustra a arquitetura desse módulo, que possibilita a configuração dos métodos usados para o alinhamento.
As ferramentas disponíveis e métodos conhecidos para alinhamento de entidades em sua maioria utilizam ontologias como entrada, inclusive a Alignment API, framework usado como base para realizar o alinhamento nesse projeto.
Como entrada para essa etapa serão informadas duas hierarquias em formato OWL, que não necessariamente representarão ontologias.
Devido a a utilização do formato OWL como entrada, foi apenas descartada a dedução da relação de subtipo de uma entidade com sua classe pai, sendo que as hierarquias representadas podem não respeitar às regras formais de uma ontologia.
Métodos de alinhamento que considerem esse tipo de relação ­` é um' ­ também não puderam ser levados em conta no desenvolvimento dessa etapa.
Para o processamento das hierarquias visando seu alinhamento, foi utilizado o conceito de &quot;Processo», que aqui se refere à sequência de ações que resulta na sugestão dos alinhamentos mais relevantes.
A o se entrar com as hierarquias no módulo de alinhamento automático (Figura 24), todos os processos disponíveis são levantados e aplicados sobre cada par de entidades possíveis de se alinhar entre as hierarquias, a fim de encontrar o processo que retorna os melhores resultados.
Um processo é composto de um conjunto de filtros, que serão detalhados na Subseção 3.3.3, e um conjunto de avaliadores, que por sua vez serão detalhados na Subseção 3.3.4.
Um processo começa por aplicar cada filtro registrado para ele sobre as duas entidades que se deseja analisar, visando aproximar o texto de ambas.
Os textos resultantes desse filtro são submetidos a todos os avaliadores registrados para o processo em questão, e esses elencam (no encontrou maior similaridade) o quão parecidas as duas entidades são.
A o final dessa execução, se obtém como resultado um conjunto de entidades mapeadas entre as duas diferentes hierarquias, junto com o grau de confiança na relação encontrada.
O módulo de alinhamento automático determina então qual processo de entre os aplicados encontrou maior similaridade entre as entidades (caso alguma seja encontrada) e determina para a saída do programa esse valor como o final.
O conceito de &quot;Filtro «aqui é determinado como a entrada de um valor textual para processamento (o nome da entidade sob análise) e a produção como saída de um novo valor texto, após a aplicação de alguma heurística.
Um filtro pode ser definido como uma heurística, ou uma heurística combinada com outro filtro, visando processar o resultado já obtido de outro filtro.
Em uma forma similar à definição de gramáticas livres de contexto, podemos descrever- los da seguinte forma:
Como exemplo de alguns filtros que aplicam heurísticas simples, podem- se mencionar filtros que: --
convertem todo o texto para letras minúsculas; --
removem o sufixo de repetição do nome; --
removem acentuação; --
substituem caracteres com significado (por exemplo,&quot;&amp; &quot;por «e&quot;); --
removem stop-- words; --
aplicam técnicas de stemming.
Esses filtros &quot;básicos «podem então ser combinados para encontrar resultados ainda mais similares.
Por exemplo, convertendo o texto para minúsculo e removendo a acentuação;
Melhorando as chances de encontrar uma equivalência.
Um avaliador dentro de um processo é uma estrutura capaz de receber duas entidades pós-processadas por um filtro e analisar o quão similares as mesmas são, tipicamente através da análise dos nomes.
De a mesma forma que filtros, avaliadores podem ser compostos a fim de reutilizar uma avaliação prévia como entrada para sua lógica.
Como exemplo de avaliadores, pode- se mencionar alguns filtros que aplicam heurísticas simples, como: --
analisar se os textos são exatamente iguais; --
aplicar algoritmos de edit-distance (como a distância de Levenstein) e determinar um ponto de corte (percentual por exemplo) para similaridade;
Avaliadores mais complexos incluem técnicas de alinhamento em nível de estrutura, muito convenientes à realidade abordada por o trabalho (hierarquias).
Um exemplo simples é o de um avaliador que analisa as superclasses e subclasses das entidades e calcula o percentual de classes semelhantes entre as estruturas.
Esse avaliador idealmente deve ser antes combinado com um que atribua uma igualdade entre as entidades em si (por o texto), constituindo um avaliador composto de dois avaliadores.
Após a execução de todos os processos e a determinação do alinhamento completo das hierarquias, obtém- se um alinhamento como saída da execução.
Esse alinhamento é então exportado para o formato XML/ RDF suportado por a Alignment API, descrito na Subseção 2.5.1.
O formato é então preenchido com a relação de igualdade, deduzido dos processos aplicados, possibilitando seu posterior reuso por outras aplicações que utilizem o mesmo formato.
As funcionalidades da ferramenta PLATAL foram testadas e avaliadas no domínio de comércio eletrônico.
As hierarquias analisadas foram extraídas de e-catalogs.
Foram extraídas 14 estruturas de websites de e-commerce do Brasil, de as quais 8 foram utilizadas para estudo e desenvolvimento das heurísitcas;
Enquanto 6 foram separadas para a avaliação do método proposto.
Em a Tabela 2 ­ Tamanho de estruturas para experimentos e avaliação podemos ver a complexidade das estruturas, detalhas em número de entidades (nodos) e níveis existentes em cada.
Juízes humanos realizaram a elaboração de alinhamentos de referência.
Para essa atividade lhes foi provido o módulo de alinhamento manual, detalhado na Subseção 4.1.
Para os conjuntos de hierarquias supracitados para avaliação foram realizadas, num primeiro momento, comparações entre o alinhamento processado por a aplicação e os alinhamentos de referência elaborados por humanos.
Outros matchers foram avaliados em relação a as mesmas estruturas, visando comparar os resultados deste trabalho com outras propostas da literatura.
Em todas as avaliações realizadas, foram analisadas as medidas de precisão, abrangência e medida-F, resultantes da comparação dos alinhamentos.
Para cálculo das métricas, é necessário a análise dos seguintes termos: --
Verdadeiro positivo:
Alinhamentos encontrados que estão corretos. --
Falso positivo:
Alinhamentos encontrados que estão incorretos.
Verdadeiro negativo: --
Falso negativo:
Alinhamentos determinados como não existentes incorretamente (não se aplica ao trabalho, pois ele não busca mapear relacionamentos que não existem).
Em a área de recuperação da informação (Ri), a precisão é a medida do conjunto de dados recuperados que são relevantes à busca em questão, calculada através da seguinte fórmula:
A precisão vem então a ser o percentual de alinhamentos classificados corretamente como positivos, de entre todos os que foram classificados como positivos.
Portanto, pode- se dizer que a precisão é uma medida de qualidade sobre os dados sugeridos como positivos.
Por exemplo, se foram sugeridos 70 alinhamentos, de os quais somente 45 estavam corretos, a precisão será 45/ 70 0,64 $= 64%.
Enquanto isso a abrangência para a Ri vem a ser a medida do conjunto de dados relevantes para a busca em questão que conseguiram ser recuperados, calculada através da seguinte fórmula:
A abrangência para esse trabalho vem a ser o percentual correto de alinhamentos descobertos de entre o total de alinhamentos corretos existentes, podendo ser classificada como uma medida de quantidade sobre os dados sugeridos como positivos.
Por exemplo, se existem 90 alinhamentos para serem descobertos, de os quais foram sugeridos somente 45 alinhamentos corretos, a abrangência será 45/ 90 $= 0,50 $= 50%.
Por fim, a medida-F é uma avaliação da corretude (exatidão) de um teste, levando em consideração tanto as medidas de precisão quanto abrangência.
A medida-F pode ser interpretada então como a média ponderada da precisão e abrangência.
Seu cálculo é dado por a seguinte fórmula:
Para auxiliar na obtenção das medidas para avaliação, foi desenvolvido um novo módulo para a aplicação PLATAL, voltado para análise de alinhamentos.
Podemos ver a interface do módulo referido na Figura 25.
Como entrada para ele são passados dois alinhamentos, o que se deseja analisar e o de referência, para por fim obter os valores calculados automaticamente.
Com o propósito de construir manualmente alinhamentos de referência para as avaliações desse trabalho, devido a a ausência de uma ferramenta visual, de simples uso e sem custo, foi desenvolvido o módulo de alinhamento manual.
A interface provida para tal pode ser vista na Figura 26.
Como entrada para início da atividade, nas seções 1 e 2 da Figura 26 temos os campos que comportam as Uris das duas hierarquias (OWL) a serem alinhadas.
Através da ação &quot;Carregar URIs «são trazidas para as respectivas árvores abaixo de as seções 1 e selecionar 1 ou mais nodos da hierarquia 2.
Havendo pelo menos um nodo selecionado em cada árvore, é possível com o botão &quot;Adicionar», gravar em memória os nodos selecionados como alinhados.
Com isso os nodos da árvore da ontologia 2 alinhados passam ser exibidos na caixa &quot;Já alinhado «com «(seção 3), permitindo clicar nos mesmos para ver- los na árvore da ontologia 2, assim como remover o alinhamento com a entidade selecionada (na caixa &quot;Ações&quot;).
Por fim, completam as ações possíveis os botões de &quot;Abrir», que permite em vez de carregar ontologias a partir de Uris e começar seu alinhamento do início, carregar um alinhamento já existente (formato padrão da Alignment API), assim como as ontologias do mesmo, para edição.
E por fim o botão de salvar permite exportar, para o mesmo formato de alinhamento utilizado para abrir arquivos, o alinhamento até então em memória.
Em as 8 hierarquias separadas para estudo na fase de desenvolvimento deste trabalho, observou- se as diferenças entre os resultados obtidos em relação a uma técnica de simples comparação direta de strings (processo &quot;Igual», usado como baseline).
A avaliação de algumas dessas medidas para os 4 conjuntos de alinhamentos (pares de hierarquias) de referência pode ser vista nas Figura 27 -- Resultados encontrados para o conjunto 1, 28, 29 e 30.
Observando as variações dos processos criados em comparação a um elementar como o processo &quot;Igual», a precisão é reduzida a fim de atingir uma melhoria significativa na abrangência, que teve aumento de até 36% no melhor caso.
Enquanto isso, analisando todas as variações da medida-F, que nos da à avaliação definitiva, temos uma melhora de até 27%.
Percebe- se esse aumento principalmente nas técnicas que utilizam a análise da hierarquia no avaliador.
A justificativa para os melhores valores em processos que utilizam avaliadores hierárquicos, é baseada na maior confiança que se tem ao analisar também a posição de um elemento.
Por exemplo, num processo que utilize apenas técnicas em nível de elemento, como o &quot;STEMMER_ COMUTATIVIDADE», alinhamentos como o da entidade «&quot;com&quot; «é erroneamente criado (junto com outros para diferentes nodos raiz), principalmente por a alta quantidade de categorias com esse nome.
Enquanto um processo que analisa a estrutura junto com o texto, como o &quot;STEMMER_ HIERARQUIA_ COM», é capaz de mapear «&quot;somente com «Malas &amp; Bolsas åAcessórios&gt;», devido a a similaridade da entidade pai.
De a análise dos resultados obtidos com os experimentos iniciais, pode- se destacar como os processos mais eficientes &quot;STEMMER_ HIERARQUIA_ LEV».
Em sua composição, ambos aplicam quase todos os filtros disponíveis no sistema, aproximando os nomes o máximo possível.
Sua diferença então está no uso de um avaliador que analisa (junto com a hierarquia, principal diferencial) ou a distância de Levenstein ou a igualdade de entidades listadas na expressão.
Sendo suas variações bem pequenas, com os resultados do processo que utiliza a comutatividade tipicamente obtendo uma precisão maior, enquanto o que utiliza a análise da comutatividade de termos obtendo uma abrangência maior.
Com os resultados encontrados durante as avaliações do desenvolvimento (usando os 4 conjuntos separados para tal), foram selecionados os 9 processos vistos na Tabela 5, que permitem a visibilidade de melhora nos resultados, assim como obtenção dos mais otimizados.
Os mesmos foram definidos como o conjunto de processos a ser executados por o módulo de alinhamento automático, para buscar os melhores resultados durante a execução.
Utilizando as 6 hierarquias separadas para a avaliação final dos processos, foram elaborados 3 alinhamentos de referência (conjuntos 5, 6 e 7), que foram utilizados para testar a eficiência da solução.
Os resultados da execução desses processos podem ser vistos na Figura 32 -- Resultados encontrados para o conjunto 5, na Figura 33 Resultados encontrados para o conjunto 6 e na Figura 34 -- Resultados encontrados para o conjunto 7.
Realizando uma análise mais detalhada dos alinhamentos, a partir de o arquivo gerado, podemos verificar dois outros fatores que podem ser relevantes para os resultados.
O primeiro é a questão da construção dos alinhamentos de referência estarem sujeitos ao ponto de vista de quem os construiu, podendo conduzir o programa a deduções que necessitariam de uma formalidade semântica.
Por exemplo, o alinhamento de &quot;ramais «com &quot;telefonia empresarial».
O segundo fator é praticamente o oposto ao primeiro, onde a aplicação consegue sugerir alinhamentos que um humano acaba por não perceber ao construir manualmente, o que eleva o valor da ferramenta construída.
Através da comparação dos resultados da ferramenta PLATAL em relação as outras, podemos verificar que seus valores são satisfatórios, uma vez que se enquadram na média de resultados dos demais matchers.
Em relação a o conjunto de testes 5, observamos que ela supera as outras nas três medidas;
Em o conjunto 6 porém as ferramentas Aroma e Aflood a ultrapassam analisando a medida-F diretamente;
E por fim no conjunto 7 ela acaba se apresentando a com menor medida-F, porém com diferença máxima de apenas 0.05.
Em uma última comparação, podemos analisar a Figura 39, onde temos a média dos resultados das diferentes ferramentas.
Podemos ver que a maior variação da medidaF (entre a pior e a melhor ferramenta) é de apenas 0.11, sendo a diferença da ferramenta PLATAL para o melhor resultado de apenas 0.4.
De uma forma geral, pode- se afirmar que todas as diferenças foram pequenas no desempenho das ferramentas, sendo a maior diferença de medida-F nos conjuntos de teste de 0.15, quando a PLATAL se mostrou superior a todas as outras, caso provavelmente associado a dois fatores:
Primeiro, o maior volume de entidades presente nesse conjunto em relação a os outros, segundo as técnicas de análise da estrutura utilizados por a PLATAL, que tiram proveito de uma maior quantidades de dados para se aperfeiçoar nos alinhamentos.
Tornando assim possível também afirmar que os métodos elaborados para testes da ferramenta PLATAL são competitivos no meio acadêmico atual.
Ainda assim meios de melhorar esse desempenho podem ser encontrados na Subseção Em esta seção, são exploradas as contribuições do trabalho, assim como trabalhos futuros que podem ser derivados do mesmo.
Com o desenvolvimento deste trabalho, foram propostos e avaliados alguns métodos para a extração e alinhamento de hierarquias heterogêneas, estudo diferenciado na área de alinhamentos.
Acredita- se que foi possível contribuir para que tarefas de IC que dependem da análise de informações distribuídas em diferentes fontes possam ser encontradas com mais facilidade.
Este trabalho dispõe de funcionalidades inexistentes ou de difícil acesso em demais aplicações, num esforço de prover novas tecnologias, similar às aplicações submetidas à OAEI.
Funcionalidade que a tornam um diferencial incluem:
Uma forma visual de tratar as operações de alinhamento, um repositório centralizado de heurísticas em português para aplicação, a possibilidade de se extrair de forma parametrizável estruturas hierárquicas da internet, entre outras.
Os quatro módulos desenvolvidos, fazem da ferramenta PLATAL um recurso completo e diferenciado para as atividades de alinhamento de hierarquias, começando desde o módulo de extração de hierarquias da web, passando por os módulos de alinhamento de referência manualmente (visualmente) e alinhamento automático, até o módulo de avaliação que permite a comparação de alinhamentos para validar sua corretude.
No que se refere aos resultados obtidos com a avaliação realizada, deve- se destacar a eficiência dos métodos propostos, que, no melhor caso no cenário de teste comparado com a baseline, obtiveram uma melhora da medida-F de 0.09 para 0.30 (conjunto 6).
Enquanto na relação com outros matchers, se obteve uma medida-F superior em 0.15 as demais no melhor cenário (conjunto 5).
Para isso mais uma vez se mostrou a importância da análise estrutural de hierarquias aqui criada para seu alinhamento.
Com a arquitetura da solução implementada, é possível estender a ferramenta através da inclusão de novas técnicas ou mudanças nas hierarquias, e com isso manter- la atualizada.
Essa necessidade é observada não apenas no contexto de empresas, mas também na realidade dos usuários finais de sistemas de e-commerce, dada a constante variação das estruturas nos websites.
Conforme visto ao longo de o texto, o projeto buscou ser modularizado e configurável, de forma que possa ser estendido facilmente.
Trabalhos futuros podem partir da estrutura e métodos aqui utilizados para o desenvolvimento de combinações ainda mais precisas no processo de alinhamento.
Para melhorar a parte de avaliação dos resultados, pode- se medir a concordância entre alinhamentos de referência, que podem ser subjetivos.
Outra melhoria que pode ser realizada é o desenvolvimento de uma forma de determinar automaticamente as expressões necessária para identificar os níveis de uma hierarquia numa página web, automatizando praticamente todo o processo de criação de alinhamentos.
Uma opção de estudo futuro seria a criação de novos filtros e avaliadores para o módulo de alinhamento automático que utilizassem novas técnicas.
Por exemplo, técnicas de interpretação baseadas em recursos externos, como técnicas de reuso de alinhamento e técnicas de recursos linguísticos, para avaliadores.
Até mesmo parametrizar os valores de aceitação das técnicas aqui desenvolvidas através de interface pode vir a contribuir na flexibilidade da execução.
Por fim, um trabalho importante pode ser desenvolvido no âmbito de usar os alinhamentos resultantes desse trabalho para criar um alinhamento único e disponibilizar o mesmo para o usuário, de forma a usar apenas esse para se referir as categorias de diversas fontes.
