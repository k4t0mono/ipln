Este trabalho apresenta as vantagens da extensão da Álgebra Tensorial Classica (CTA -- Classical Tensor Algebra), também conhecida como Álgebra de Kronecker, a qual permite a definição de funções, i.
e, dependência funcional entre seus operadores.
Tal Álgebra Tensorial estendida tem sido chamada de Algebra Tensorial Generalizada (GTA -- Generalized Tensor Algebra).
Os formalismos de Redes de Autômatos Estocásticos (SAN -- Stochastic Automota Networks) e Redes de Petri Estocasticas Generalizadas Superpostas (SGSPN -- Superposed Generalized Stochastic Petri Nets) são representações de Kronecker.
Demonstra- se que o formalismo de SAN, o qual usa GTA, possui o mesmo escopo de aplicação do formalismo de SGSPN, o qual usa CTA.
Também prova- se que qualquer modelo em SAN com funções possui ao menos um modelo equivalente sem funções.
Em a realidade, o uso de funções, e conseqüentemente o uso da GTA, não e realmente uma &quot;necessidade», visto que há uma equivalência de representação dos formalismos.
Entretanto, em alguns casos, o uso de funções apresenta, em relação a o custo computacional, algumas &quot;vantagens «incontestáveis.
Apresenta- se alguns exemplos de modelagem a fim de sustentar numericamente esta afirmação.
Em a segunda metade do seculo XIX, o matemático alemão Leopold Kronecker propôs uma nova operação baseada em tensores, uma generalização de matrizes onde mais do que duas dimensões poderiam ser representadas.
Esta extensão da Álgebra Linear foi representada por um operador chamado de produto de Kronecker.
Desde então, muitos pesquisadores, principalmente físicos, têm usado o produto de Kronecker para representar operações sobre estruturas multidimensionais.
Muito antes do começo da ciência da computação, a Álgebra Linear é provavelmente a mais importante aplicação das tecnicas numéricas.
Entretanto, somente no fim dos anos 70, cientistas da computação prestaram atenção em extensões de Kronecker para Álgebra Tensorial.
Trabalhos como de Bellman, Brewer, A (m) oia, De Micheli e Santomauro, e Davio foram alguns dos primeiros estudos a respeito de a operação do produto de Kronecker aplicada a ciência da computação.
Estes autores e muitos outros trabalhos subseqüentes não concordaram realmente sobre o nome da operação em questão e os termos produto direto ou produto tensorial são usados para descrever exatamente a mesma operação.
Em muitos destes trabalhos, surgiram as primeiras referências para uma nova operação feita sobre tensores:
Soma tensorial.
Logicamente, este operador também e conhecido como soma de Kronecker ou soma direta.
As operações do produto tensorial e soma tensorial, juntamente com suas propriedades compõem a Álgebra Tensorial Clássica (CTA -- Classical Tensor Algebra).
Em este trabalho, prefere- se usar o termo produto tensorial e soma tensorial, visto que estes explicitam o conceito de tensor (multidimensional).
Em os anos 80, Plateau propôs o primeiro formalismo de modelagem que utiliza Álgebra Tensorial como representação:
Redes de Autômatos Estocásticos (SAN -- Stochastic Automata NetworksSGSPN -- Superposed Generulized Stochastic Petri Nets).
A (m) bos os formalismos foram estabelecidos em aplicações de Kronecker baseados em representações de modelos.
Comparando estas representações de Kronecker com o método clássico (uma enorme matriz esparsa), e óbvio que a memória necessária é reduzida drasticamente.
Esta economia de memória é muito importante para reduzir o impacto do problema conhecido como explosão do espaço de estados.
Mfelizmente, uma redução similar ao tempo gasto com a avaliação de soluções ainda não foi alcançada.
Recentemente, foram desenvolvidos trabalhos sobre tecnicas numéricas para reduzir o custo computacional no cálculo de soluções exatas usando principalmente metodos iterativos.
Tais trabalhos alcançaram alguns ganhos importantes, porém a redução com o tempo gasto com a avaliação de soluções não e tão grande quanto a redução alcançada na necessidade de memoria.
Destaca- se como grande responsável por tais ganhos a evolução da Algebra Tensorial, Álgebra Tensorial Generalizada (GTA -- Generalized Tensor Algebra), a qual e uma extensão da CTA.
Utilizando- se da GTA, e possível obter- se representações mais compactas e gerenciáveis.
Ate o momento, diferentes métodos estruturados propuseram um maior ganho efetivo de memória e custo computacional.
O propósito principal deste trabalho e direcionar uma maior atenção para as representações de Kronecker, enfatizando algumas novas características provenientes da Álgebra Tensorial Generalizada.
A atenção deste trabalho esta direcionada diretamente na ótica de quem resolve os modelos.
Tem- se como objetivo provar que os operadores da GTA podem ser vistos con1o uma forma compacta de descrição de fórmulas complexas da CTA.
Por conseguinte, modelos descritos com representações de Kronecker podem geralmente ser descritos por operadores da GTA numa forma mais compacta (e eficiente).
Este trabalho demonstra que o formalismo de SAN, o qual usa a GTA, possui o mesn1o escopo de aplicação do formalismo de SGSPN, o qual utiliza a CTA.
Prova- se tambem que qualquer modelo descrito por o formalismo de SAN com o uso de funções possui pelo menos um modelo equivalente descrito sem o uso das mesmas.
Em o próximo capítulo, apresenta- se de maneira informal o formalismo de Cadeias de lvlarkov.
É apresentado a definição informal e formal do formalismo de SAN no Capítulo 3.
Para um melhor entendimento do formalismo de SGSPN, descrevese previamente, no Capítulo 4, de maneira informal os formalismos de:
Redes de Petri, Redes de Petri Estadísticas e Redes de Petri Estocásticas Generalizadas.
Sendo assim, no Capítulo 5, apresenta- se a definição informal e formal do formalismo de SGSPN.
Demonstra- se, no Capítulo 6, a equivalência de representação entre os modelos em SAN que utilizam funções e os modelos em SAN que não utilizam funções, bem como a equivalência de representação entre os formalismos de SAN e SGSPN.
Em o Capítulo 7, demonstra- se o custo computacional utilizado nos modelos descritos por ambos os formalismos.
Alem disso, apresenta- se alguns exemplos de modelagem a fim de se ilustrar uma comparação entre os custos computacionais dos mesmos.
Por fim, no Capítulo 8, analisa- se os resultados encontrados para os modelos propostos.
Cadeias de Markov. Em este capítulo, apresenta- se uma definição informal do formalismo de Cadeias de Markov (MC -- Markm¡ Chains).
Em seguida, apresenta- se a definição formal de MC a escala de tempo contínua (CTMC -- Continuam Time Markov Chains) englobando os conceitos definidos informalmente.
Além disso, demonstra- se as regras necessarias para a obtenção do gerador infinitesimal de um modelo descrito por o formalismo de MC, bem como um exemplo completo de obtenção do mesmo.
O formalismo de Cadeias de Markov e um formalismo matemático para modelagem de sistemas.
Através do uso de formalismo de MC, e possível descrever o funcionamento de um sistema utilizando um conjunto de estados e transições entre esses estados.
As transições entre os estados são modeladas por um processo estocástico de tempo contínuo ou discreto definidos por distribuições exponenciais ou geométricas respectivamente.
Um modelo descrito por o formalismo de MC pode ser interpretado como uma máquina de estados, onde os nodos da mesma representam os estados e os arcos representam as transições entre os estados do modelo em MC.
Em o decorrer deste trabalho, adota- se a seguinte notação para a definição dos modelos em Seja as x-ésimo estado de um modelo, onde O e o primeiro estado do modelo.
A seguir, apresenta- se a definição das escalas de tempo utilizadas por o formalismo de MC.
Um modelo descrito por o formalismo de MC pode ser classificado de acordo com a sua escala de tempo:
Chains); O Cadeias de Markoo a escala de Tempo Discreta (DTMC -- Discrete Time Markoi¡ Chains).
Os modelos em CTMC diferem dos modelos em DTMC basicamente por suas transições entre os estados poderem ocorrer em qualquer instante de tempo e não em pontos discretos de tempo.
Segundo Stewart, apresenta- se a seguir as propriedades para a Construção de um modelo descrito por o formalismo de MC.
Os estados do modelo são discretos e ennmeráizeis.
A escala de tempo para a transição entre os estados do modelo pode ser de forma continua (CTMC) ou discreta (DTMC).
A transição entre os estados do modelo depende exclusivamente do estado atnal do modelo, sem importar quais foram os estados prévios ou serão os estados fntnros do modelo.
A taxa (CTMC) ou probabilidade (DTMC) de transição de estados do modelo dá- se obedecendo a uma lei exponencial ou geométrica respectivamente.
A representação gráfica de um modelo em MC e feita por autômatos, onde e associado para cada estado do autômato um estado do modelo e para cada transição uma taza (CTMC) ou uma probabilidade (DTMC).
Um modelo em MC é representado, matematicamente, por uma matriz de transição de estados.
A probabilidade de cada estado em regime estacionario (solução de um modelo em MC) e a solução do sistema da equação linear:
Para os modelos em CTMC, a matriz de transição de estados Q e denominada de gerador infinitesimal, onde cada elemento não diagonal da linha i e coluna j da matriz representa a tapa de transição do estado i para o estado j do modelo.
Os elementos diagonais de Q representam o ajuste necessário para que a soma dos elementos de cada linha seja igual a zero.
Para os modelos em DTMC, a matriz de transição de estados P e denominada de matriz estocástica, onde cada elemento não diagonal representa a probabilidade de transição entre os estados do modelo.
Os elementos diagonais de P representam o ajuste necessário para que a soma dos elementos de cada linha seja igual a um.
O foco principal deste trabalho e o formalismo de CTMC.
Por conseguinte, as explicações e exemplos apresentados no decorrer deste trabalho fazem menção para modelos descritos a escala de tempo contínua (taxas de ocorrência) e não a escala de tempo discreta (probabilidades de ocorrência).
A Figura 2.1 apresenta um modelo em CTMC corn quatro estados e seis transições.
Cada transição entre um estado e outro possui associada uma taxa de ocorrência a mesma.
A seguir, apresenta- se a definição formal do formalismo de CTMC.
Em este trabalho, considera- se a formalização de um modelo em CTMC compreendendo um con_ junto finito de estados e transições.
Sejam M conjunto de estados;
O conjunto de estados M compreende estados a3, onde x E 1 z, y) taxa de ocorrência da transição do estado z para o estado y.
Note que nem toda a transição de um estado a:
Para um estado y possui uma taxa não nula determinada por a função T (ac, y).
Seja succ conjunto não vazio dos estados y, tais que possua uma transição do estado ao para algum estado.
O conjunto de estados sucessores de um determinado estado:
C é importante para a definição do método de obtenção do gerador infinitesimal o qual será apresentado na próxima seção.
Ié adotada a notação| X| para definir a cardinalidade de um conjunto X. Em o decorre deste trabalho, é adotada a notação referindo- se a um número no intervalo dei até j, inclusive, pertencendo ao conjunto do números naturais;
E a notação referindo- se a um número pertencente ao intervalo i e j, inclusive, no conjunto de números reais, Um modelo em CTMC e representado, matematicamente, por uma matriz de transição de estados, a qual também e denominada de gerador infimtesimal.
Logo, a matriz Q e Conhecida tanto como matriz de transição de estados como gerador infinitesimal.
Em este trabalho, adota- se o termo gerador' infinitesimal para descrever matematicamente um modelo descrito por o forma lismo de CTMC.
Seja@ elemento da linha expressa por o estado a:
E coluna expressa por o estado y do gerador infinitesimal Q. Definição 2 Os elementos do gerador infinitesimal Q de um modelo em CTMC são definidos por:
A Definição 2.1 corresponde aos elementos não diagonais do gerador infinitesimal, os quais possuem a taxa de ocorrência da transição do estado x para o estado y.
Os elementos diagonais (ajuste diagonal das taxas de ocorrência das transições entre os estados) do gerador infinitesimal estão descritos na Definição 2.2.
A Definição 2.3 define os elementos nulos do gerador infinitesimal, Demonstra- se nesta seção um exemplo completo de obtenção do gerador infinitesimal de um modelo descrito por o formalismo de CTMC.
A Figura 2.2 apresenta um modelo descrito por o formalismo de CTMC, o qual possui oito estados.
Este modelo descreve um bufer de requisições de impressão.
Este bufer faz o gerenciamento de duas impressoras:
Laser e deskjet.
Este bufer recebe, em media, uma requisição a Cada 5 minutos.
A impressora laser leve em média 2 segundos para imprimir uma folha, enquanto a impressora deskjet imprime uma folha em 5 segundos.
Para cada hora trabalhada por a impressora deskjet, a impressora laser trabalha por 4 horas.
Os estados 0, 1, 2 e 3 representam o número de requisições no bufer que estão sendo atendidas por a impressora laser.
Em contra partida, os estados 4, 5, 6 e 7 representam o número de requisições no bufer que estão sen (lo atendidas por a impressora deskjet.
É possível construir o gerador infinitesimal do modelo em CTMC, a partir de a identificação das taxas de ocorrência das transições de um estado para outro.
Primeiramente, identifica- se o número de estados| M| do modelo para se Construir o gerador infinitesimal do mesmo.
A partir de esta informação, o gerador infinitesimal sera uma matriz de ordem lM|\&gt; IMl.
Através da Definição 2.1, preenche- se os elementos não diagonais do gerador infinitesimal, utilizando as taxas de ocorrência da transição de um estado para outro.
Sendo assim, tem o gerador infinitesimal com os elementos não diagonais preenchidos:
Posteriormente, preenche- se os elementos diagonais (ajuste diagonal das taxas de ocorrência das transições entre os estados) do gerador infinitesimal, utilizando a Definição 2.2.
Como a soma de cada linha do gerador infinitesimal deve ser igual a zero, o mesmo fica da seguinte maneira após o ajuste da diagonal:
Por último, aplicando a Definição 2.3, preenche- se os elementos nulos do gerador infinitesimal.
Logo, tem- se o gerador infinitesimal do modelo descrito na Figura 2.2: A partir de o gerador infinitesimal completo de um modelo em CTMC, é possível obter- se a probabilidade de cada estado em regime estaeionário (vetor de probabilidade 77) atraves da resolução da equação.
Sendo assim, por exemplo, somando a probabilidade 773 (bufer encontra- se cheio e está sendo atendido por a impressora laser) com a probabilidade 7 r, (bufer encontra- se Cheio e esta sendo atendido por a impressora rleskjet), tem- se a probabilidade do buffer encontrar- se cheio independentemente de qual impressora esta atendendo- o.
Redes de Autômatos Estocásticos Em o decorrer deste capítulo, é apresentada uma definição informal do formalismo de Redes de Autômatos Estocásticos (SAN -- Stochastic Automata Network) através da descrição das primitivas utilizadas no formalismo.
Posteriormente, apresenta- se a definição formal de SAN a escala de tempo contínua englobando os conceitos definidos informalmente na Seção 3.1.
Para isso, mostra- se os termos necessarios para a definição de um modelo em SAN.
Além disso, apresenta- se as restrições para a definição de uma SAN bem dejínida e as regras necessárias para a obtenção do Descritor'Markooiano equivalente a mesma.
O formalismo de Redes de Autômatos Estocásticos foi proposto por Plateau.
A ideia principal do formalismo de SAN é modelar um sistema em vários subsistemas, ou seja, um sistema composto de modulos &quot;quase independentes».
A expressão &quot;quase independente «denota a possibilidade de ocorrer interação entre cada subsistema.
SAN e um formalismo para modelagem de sistemas com grande espaço de estados.
Essa modularização definida por o formalismo de SAN permite o armazenamento e a solução eficiente de sistemas complexos por evitar os prejuízos da explosão do espaço de estados que ocorre no formalismo de Cadeias de Markov, o qual SAN tem equivalência de representação.
Cada subsistema e representado por um autômato estocástico e por transições entre os estados deste autômato.
As transições entre os estados de cada autômato são modeladas por um processo Estocástico de tempo contínuo ou discreto definidos por distribuições exponenciais ou geométricas respectivamente.
É interessante ressaltar que toda SAN pode ser representada por um único autômato Estocástico que contem todos os estados possíveis do sistema.
Esse único autômato corresponde à cadeia de Markov equivalente ao modelo em SAN.
Note que a modelagem em SAN apresentada nesse capítulo se aplica tanto a escala de tempo contínua como a escala de tempo discreta.
Entretanto, as explicações e exemplos apresentados ao longo deste trabalho fazem referência ã escala de tempo contínua (tasas de ocorrência) e não à escala de tempo discreta (probabilidades de ocorrência), visto que o foco principal deste trabalho é o formalismo de SAN a escala de tempo contínua.
A diferenciação entre as duas escalas de tempo dá- se apenas na obtenção do Descritor Markouiano de cada modelo.
Enquanto um modelo em SAN a escala de tempo contínua gera uma cadeia de Markov a escala de tempo contínua (CTMC -- Continuous Time Mar/ mv ChainL um modelo em SAN descrito em escala de tempo discreta gera uma cadeia de Markov a escala de tempo discreta (DTMC -- Dvlscrete Time Marian¡ Chain).
Em o decorrer deste trabalho, adota- se a seguinte notacão para a definição dos modelos em Sejam A (m) i-ésimo autômato de um modelo em SAN, onde.
A (m) é o primeiro autômato;
As probabilidades (7 r ou f) são utilizadas quando um evento possui duas ou mais alternativas de transição.
De essa maneira, probabilidades são utilizadas para indicar em que proporções o evento seguirá por uma transição ou por outra.
A probabilidade pode ser omitida caso esta seja igual a 1.
Outro ponto importante e que a soma das probabilidades de um evento deve ser sempre igual a 1.
A seguir, cada primitiva de modelagem é explicada detalhadamente.
Autômato estocástico é um modelo matemático de um sistema que possui entradas e saídas discretas.
O sistema pode se encontrar em qualquer um de entre o número finito dos estados do sistema ou das configurações internas.
O estado interno em que o sistema se encontra sumariza as informações sobre as entradas anteriores e indica ainda o que é necessário para determinar o comportamento do sistema para as entradas seguintes.
Baseado nessa definição, pode- se descrever um autômato estocástico como um conjunto¡ ínito de estados e um conjunto Jínito de transições entre esses estados.
A denominação de Estocásticos atribuída a esses autômatos da- se por a razão do tempo ser tratado como uma variavel aleatória, a qual obedece a uma distribuição exponencial a escala de tempo contínua e uma distribuição geométrica a escala de tempo discreta.
O estado local do sistema modelado em SAN é o estado individual de cada autômato do modelo.
Por sua vez, o estado global do mesmo é definido por a combinação dos estados locais de todos os autômatos que compõem o modelo.
A mudança do estado global do sistema dá- se por a mudança do estado local de qualquer um dos autômatos do modelo.
A mudança de um determinado estado local para outro é feita através de transições.
As transições são construções que indicam a possibilidade de mudança entre um estado e outro.
No entanto, cada transição necessita ter ao menos um evento associado a ela para que essa possa ser disparada.
A Figura 3.1 apresenta um modelo em SAN com dois autômatos completamente independentes.
Em a Tabela 3.1, encontram- se as taxas de ocorrência de cada evento da Figura 3.1.
Em este primeiro exemplo, o autômato A (m) do modelo possui três estados 0m, 10) e 2m, enquanto o autômato AQ) possui apenas dois estados 0m e 1 a).
De os cinco eventos que são modelados neste exemplo, três eventos ocorrem no autômato AU), enquanto outros dois eventos ocorrem no autômato AQ).
Apresenta- se na Figura 3.2 a CTMC equivalente ao modelo em SAN da Figura 3.1.
Note que no modelo da Figura 3.1 não ha interação entre os dois autômatos, i.
e, existe apenas eventos locais em cada um de eles.
As definições e os tipos de eventos que podem ser utilizados nos modelos em SAN serão vistos na proxima seção.
Evento é a entidade do modelo responsavel por a ocorrência de uma transição, a qual muda o estado global do modelo.
Um ou mais eventos podem estar associados a uma transição e esta e disparada através da ocorrência de qualquer um dos eventos a ela associada.
Dois tipos de eventos podem ser modelados no formalismo de SAN.
Um evento pode ser classificado como:
Local ou sincronizante.
Os eventos locais são utilizados em SAN para alterar o estado local de um único autômato sem que essa alteração ocasione uma mudança de estado em qualquer outro autômato do modelo.
Esse tipo de evento e particularmente interessante, pois permite que varios autômatos tenham um comportamento paralelo, trabalhando independentemente sem que haja interação entre eles.
Pode- se observar exemplos de eventos locais na Figura 3.1, a qual é composta exclusivamente por esse tipo de evento.
Os eventos sincronizantes alteram o estado local de dois ou mais autômatos simultaneamente, i.
e, a ocorrência de um evento sincronizante num autômato força a ocorrência deste mesmo evento nos outros autômatos envolvidos.
Através dos eventos sincronizantes, e possível fazer a interação entre autômatos.
Essa interação da se sob a forma de sincronismo no disparo das transições.
Cada evento deve possuir uma taxa de ocorrência e uma probabilidade associada ao mesmo.
Tanto a taxa de ocorrência como a probabilidade podem ter associados valores constantes ou valores funcionais.
Taxas e probabilidades funcionais assumem valores diferentes conforme os estados dos outros autômatos do modelo.
A classificação de um evento como local ou sincrontzante é dada por a aparição do identificador do evento e no conjunto de eventos de um autômato.
Caso o identificador do evento apareça apenas no conjunto de eventos de um único autômato, o evento e classificado como evento local.
Se o mesmo identificador aparecer no conjunto de eventos de vários autônmtos, o evento é classificado como evento sincmnizante.
Taxas e probabilidades funcionais constituem a segunda possibilidade de interação entre autômatos nos modelos em SAN.
Outra possibilidade é a utilização de eventos sincronizantesl.
A irtilização de funções para definir taxas e/ ou probabilidades permite associar a 11m mesmo evento diferentes valores conforme o estado global do modelo.
As taxas e probabilidades funcionais são expressas por funções que levam em consideração os estados atuais dos autômatos do modelo, podendo desta forma variar seu valor conforme os estados em que se encontram os autômatos envolvidos na função.
A Figura 3.3 apresenta um modelo em SAN com 2 autômatos de três e dois estados respectivamente.
As taxas de ocorrência dos eventos da Figura 3.3 encontram- se na Tabela 3.2.
De a mesma forma que o modelo em SAN da Figura 3.1, tambem utiliza- se cinco eventos no modelo em SAN da Figura 3.3.
Entretanto, o evento a4 é um evento sincronizante, visto que o mesmo esta associado a mais de um au, ômato do modelo.
Este evento ainda possui probabilidades associadas a diferentes transições no autômato &quot;A (m)».
Além disso, o evento 65 possui agora a função f associada a sua taxa de ocorrência.
Por sua vez, a função f e definida como:
A1 se autômato A (m) está no estado 0m;
F: O se autômato A (m) está no estado 1m;
A; Se autômato A (m) está no estado 2m.
Como pode- se observar na definição da função f, a taxa de ocorrência da transição do estado OQcaso o autômato A (m) esteja no estado 0m), igual a A2 (caso Ia utilização de taxas e probabilidades funcionais não está limitada aos eventos locais e podem ser empregadas nos eventos sincronizantes exatamente como nos eventos locais.
Assim como as taxas de ocorrência podem ser expressas por funções, o mesmo pode ocorrer com as probabilidades de cada evento.
A definição de funções usadas para expressar as probabilidades funcionais são exatamente iguais as funções usadas para definir as taxas de ocorrência.
Outros dois tipos de funções ainda são utilizadas em SAN:
Função de Atingibilidode e Funções de mtegração.
As expressões que definem a função de atingibilidade e as funções de integração são descritas da mesma forma que as taxas e probabilidades funcionais.
Porém, esses dois tipos de funções desempenham papéis diferenciados conforme explicados a seguir.
Fíinção de Atingíbílidade. Devido a representação em SAN ser de forma modular e o autômato global (equivalente a cadeia de Markov) se constituir por a combinação de todos os autômatos do modelo, é necessario especificar uma função que determina os estados atiugíveis do autômato global de um modelo em SAN.
A definição de quais estados podem ser utingíueis ou alcançados num modelo em SAN é dada por a função de atingibilidade.
Essa função é definida usando- se as mesmas regras adotadas para a definição de taxas e probabilidades funcionais.
A noção de função de atingibilidade fica mais clara ao se imaginar, por exemplo, um modelo de compartilhamento de recursos, onde se tem N clientes disputando R recursos.
Este sistema pode ser modelado em SAN usando um autômato com dois estados para cada cliente.
O estado 0m representa que o recurso não esta sendo utilizado por o cliente z', enquanto o estado 1m representa que o recurso está em uso por o cliente i.
É facil imaginar que, se o número R de recursos for menor do que o número N de clientes, o estado global que representa todos os clientes utilizando um recurso não podera ser atingido, pois este estado não corresponde a realidade do modelo.
Os estados que possuem tal característica são chamados de estados inatmgíveis e devem ser eliminados do modelo através da função de atingibilidade, pois a probabilidade do modelo encontrar- se em algum destes estados e igual a zero.
A função de atingibilidade correta para o modelo de compartilhamento de recursos descrito acima e2:
Funções de mtegração.
Define- se funções de integração para a obtenção de resultados numericos sobre o modelo em SAN.
As funções de integração avaliam qual a probabilidade do modelo em SAN encontrar- se num determinado estado.
Com isso, pode- se compor funções de integração que levem em conta a probabilidade do modelo se encontrar num conjunto de estados, podendo assim se obter índices de desempenho e confiabilidade do modelo.
Essas funções de integração são avaliadas sobre o vetor de probabilidade que contem a probabilidade do modelo se encontrar em cada um dos estados pertencente a ele.
Um exemplo de função de integração, tendo em mente o modelo de compartilhamento de recursos exposto anteriormente, e dado por a função u, onde se quer descobrir a probabilidade do autômato A (m) não estar utilizando o recurso, 226, encontrar- se no estado 0m.
Via de regra, todas funções são modeladas em SAN da mesma forma, o que diferenciam e como elas são empregadas no modelo.
Será considerada neste trabalho a formalização de um modelo em SAN compreendendo N autômatos e E eventos.
Sejam A conjunto de autômatos;
F função de atingibilidade.
O conjunto de autôinatos.
A compreende N autômatos nomeados A (m), onde i e.
Sejam SV) conjunto de estados (locais) do autômato A (m);
Definição 3 O estado global Í de um modelo em SAN é obtido por a mudança dos estados locais Sejam 973 W) composição dos estados locais 95m, onde i E w e w Ç, um no autômato A (v);
S (w) espaço de estados produto do conjunto de estados locais dos autômatos A (m), onde i E w;
Note que a definição de um estado local do autômato (zw) e a definição de um estado global (Í) podem ser vistas como casos particulares de 97:0».
Um estado local sem é o caso onde w $= Definição 4 Um elemento funcional f (5(&quot;)) e uma função de SW) à RJr, onde w Ç.
Os autômatos Aü) com i E w são os parametros do elemento f (S (Wl).
Os elementos funcionais servem para definir probabilidades e taxas funcionais conforme descritos a seguir.
Seja f (JÉM) elemento funcional3 f (SM) avaliado para a composição de estados 55 W).
Elementos funcionais definem taxas e probabilidades funcionais.
Todas as taxas e probabilidades funcionais são consideradas como elementos funcionais, mesmo aqueles que possuem valor constante.
Obviamente, tal definição não representa uma restrição, visto que elementos constantes podem ser vistos como funções (constantes) com parâmetro em w 2 (D. De esta maneira, todos O conjunto de eventos 5 e composto de E eventos nomeados 8]', onde j e Definição 5 Um evento num modelo em SAN e definido por:
Definição 6 Uma tapla de evento é composta de:
Um elemento funcional pode ser uma taxa (T (S(&quot;)) ou uma probabilidade (7 r (S(&quot;)), e ele também pode ser expresso na forma avaliada:
&quot;Em o contexto deste trabalho, usa- se a letra e para se identificar um evento, entretanto qualquer outra letra ou palavra pode ser utilizada.
As Definições 5 e 6 caracterizam os eventos envolvidos num modelo ein SAN.
Mais especificamente, a Definição 5 identifica cada evento e qual autômãto é considerado como ãutômato mestre do evento.
A Definição 6 associa uma taxa de ocorrência T a um evento e.
Definição, O conjunto T contém todas as tuplas de transição (em).
Uma tupla de transição (e, 7 T) é definida por:
O conjunto T Contém ao menos uma tupla de transição para cada evento e no conjunto de eventos 5.
Sejam rótulo de transição do estado local.
Em para um em QM, contendo uma lista de tuplãs de transição em T;
Rótulo de transição do estado global a?
Para g] em Q, contendo uma lista de tuplas de transição (e, 7 T) em T;
A função de transição QuDefinição 8), informa a associação entre os estados do autômato e quais eventos podem disparas- lo.
Associação e feita atraves das tuplas de transição (e, n) que compõem o conjunto de tuplas de transição' T (Definição 7).
Cada tupla de transição define, além de o identificador do evento, a probabilidade do evento para aquela transição.
O número de tuplas de transição associadas a um rótulo de transição e igual ao número de eventos que podem disparar a transição.
Definição 10 Um evento e classificado como:
Definição 11 O conjunto de eventos locais E¡ é definido como E¡ $ .
Definição 12 O conjunto de eventos silncvonizantes 55 é definido como 55:
Definição 13 O conjunto de eventos 8 é definido como E $= E¡ U 53 e E¡ O 55 $= 0.
A Definição 10 faz a classificação de cada evento, o qual pode ser um evento local ou um evento sincronizante.
Essa diferenciação não é feita na definição do evento, mas é necessaria para a construção dos tensores do Descritor Markoviano, o qual e composto por uma parte local (eventos locais) e por outra parte sincronizante (eventos sincronizantes).
Definição 14 Um autômato AV) é definido por:
Um autôniato A (m) tem como parâmetros a união dos parametros de todos os elementos funcionais contidos nos seus rótulos de transição.
Sejam &quot;A&quot;&amp; &quot;Ã «autômato A (m) que possui como parâmetros os autômatos A (m), onde j E w;
A (i) autômato com todos seus elementos funcionais avaliados para composição dos estados locais&amp; M;
Te (x (i), y (i)) taxa de ocorrência do evento e da tupla de transição (em) associada ao rótulo de transição;
Um evento sincronizante e é realizaível no estado global at, se e somente se Vi e M&quot;) o conjunto de estados sucessores yu) E succckcül) não for vazio.
Seja R subconjunto de 8 que compreende todos os estados 5: Tais que FG):
Um modelo em SAN composto de N autômatos e E eventos é definido por:
Para se avaliar a solução estacionaria de um modelo em SAN, são necessarias algumas propriedades?
e.g., vivacidade, irreducibilidade, ergodicidade, etc..
Para isso, algumas restrições devem ser respeitadas para assegurar tais propriedades.
Os modelos descritos em SAN que obedecem a estas restrições são conhecidos como SAN bem definidas.
Um autômoto A (i) é bem definido, se e somente se para todo a?
E S, para todo xl e Sli) e para todo e E 8 tal que succetxlü) for diferente de vazio:
Esta primeira restrição impõe que as tuplas de transição referentes a um mesmo evento e referentes as transições de A (m) saindo de um mesmo estado devem possuir a mesma taxa de transição.
A soma das probabilidades de todas as transições saindo desse mesmo estado deve ser igual a 1 ou a um elemento funcional avaliado sobre.
Estas restrições têm por objetivo garantir a unicidade da definição das taxas de eventos em relação a o conjunto de transições em cada um dos autômatos.
Restrição 2 Um evento e &quot;E «é bem definido, se e somente se:
A Restrição 2.1 imposta aos eventos afirma que uma tupla de transição deve aparecer uma única vez no conjunto de tuplas de uma transição e o evento e deve pertencer ao conjunto de eventos 5.
Restrição 3 A função de atingibilidade é bem definida, se e somente se o conjunto de estados atingíueis R é um grafo de transição fortemente conezo, A terceira restrição assegura a irredutibilidade da cadeia de Markov correspondente ao modelo em SAN e permite empregar os teoremas padrões.
Restrição 4 Uma SAN é bem definida, se e somente se:
O Descritor Markoviaizo é uma fórmula algebrica que permite escrever de forma compacta o gerador infinitesimal da cadeia de Markov correspondente a um modelo em SAN por o viés de uma fórmula matematica.
Esta fórmula matemática descreve, a partir de os tensores de transição de cada autômato, o gerador infinitesimal da cadeia de Markov associado ao modelo em SAN.
Para cada autômato.
A (m) e associado:
O um tensor QV), agrupando todas as taxas das tuplas de transição dos eventos locais do conjunto 51;
c Zlãsl tensores e QM agrupando todas as taxas das tuplas de transição dos eventos sincronizantes do conjunto Es.
Sejam Qíwxiil, gm) o elemento do tensor Q?
Em a linha 23m e na coluna yu), onde i E e k E iheíül;
Iism¡ o tensor identidade de ordem| SWL onde i e.
Definição 16 Os elementos do tensor de transição local do autômato.
A (m) são Definidos por:
0-A Definição 16.1 corresponde aos elementos não diagonais do tensor de transição local (taxas dos eventos locaisajuste diagonal das taxas dos eventos locais).
A Definição 16.3 define os elementos nulos do tensor de transição local.
Definição 17 Os elementos do tensor das transições sincronizadas que representam a ocorrência do evento.
Sincronizante e E 55 são Definidas por:
A Definição 17.1 corresponde aos autômatos que não dizem respeito ao evento sincronizante e.
A Definição 17.2 define os elementos não nulos (diagonais ou não) dos tensores para o autômato mestre referentes ao evento e.
A Definição 17.3 define os elementos não nulos (diagonais ou não) dos tensores para os autômatos escravos referentes ao evento e.
A Definição 17.4 define os elementos nulos dos tensores para os autômatos envolvidos no evento e.
Definição 18 Os elementos do tensor das transições sincronizadas que representam o ajuste necessário a ocorrência do evento e E 55 são definidas por:
A Definição 18.1 corresponde aos autônlatos que não dizem respeito ao evento sincronizante e.
A Definição 18.2 corresponde aos elementos não nulos do tensor do autômato mestre do evento e, ao passo que a Definição 18.3 corresponde aos autômatos escravos.
A Definição 18.4 corresponde aos elementos nulos dos tensores dos autômatos referentes ao evento sincronizante e (esses tensores são diagonais).
Definição 19 O gerador infinitesimal Q correspondente à cadeia de Markov associada a uma SAN bem definida é representado por a fórmula tensorral chamada Descritor Mar/ romano;
A Tabela 3.3 representa os tensores de transição necessárias a escrita da equação (3.2).
A parte superior da tabela contem os tensores com as transições locais dos autômatos e corresponde a soma tensorial 1 QP.
A parte inferior da tabela é subdivida nos tensores contendo as taxas de ocorrência dos eventos sincronizantes (e+) e os tensores diagonais que fazem o ajuste (tornam a soma das linhas igual a zero) dos mesmos (ef).
Descritor Nlarkoviano Em esta seção, apresenta- se um exemplo completo de obtenção do gerador infinitesimal de um modelo descrito por o formalismo de SAN.
Demonstra- se detalhadamente a geração dos tensores envolvidos na construção do Descritor Mar/ comuna do modelo.
Como pode ser observado na Figura 3.5, o autômato.
A (m) possui dois estados 0m e 1m, um evento local e4 e um evento sincronizante a3.
Assim como, autômato.
A (m) possui três estados 0m, 1m e 2m, dois eventos locais 61 e eg, e dois eventos sincronizantes 63 e a5.
O autôniato A (m) possui dois estados O6) e F3), um evento local ea e um evento sincronizante n25.
Apos a identificação do tipo dos eventos (locais e sincronizantes), é possível gerar os tensores necessários para a obtenção do Descritor Markoviarzo do exemplo apresentado.
Identificado o número de autômatos N $= 3, bem como o número de eventos sincronizantes| 55|:
2 do modelo, pode- se calcular o número de tensores envolvidos no Descritor Markouiano descrito por a equação:
A seguir, demonstra- se detalhadamente a obtenção de todos os tensores envolvidos na equação.
Primeiramente, identifica- se o conjunto de eventos locais S¡:
De o modelo.
Com isso, pode- se construir os tensores locais Q?
correspondentes aos autômatos AV):
Em seguida, identifica- se o conjunto de eventos sincronizantes 65:
A partir de a identificação do mesmo, constrói- se os tensores das transições sinçronizadas que representam a ocorrência dos eventos sincronizantes em cada autômato.
Sendo assim, tem- se os tensores das transições sincronizadas Qi?
Correspondentes aos antômatos AU.
Note que o autômato AU) é o autômato mestre do evento sincronizante 63 e o autômato AB) e o autômato mestre do evento sincronizante a5, pois a taxa de ocorrência de cada um está presente no respectivo tensor do autômato mestre Assim como, as probabilidades dos eventos se encontram no autômato escravo Ae).
Por último, constrói- se os tensores das transições sincronizadas que representam o ajuste necessario a ocorrência dos eventos sincronizantes em cada autômato.
Logo, tem- se os tensores correspondentes aos antômatos A0):
Uma vez obtido todos os tensores do Descritor Marlcoviavzo, pode- se obter o gerador infinitesimal Q. Os índices de Q são compostos por a ordem lexicográfica da composição dos estados de ambos os antômatos:
O gerador infinitesimal Q do modelo descrito por o formalismo de SAN é o tido atraves da equação (3.2):
Em esta seção, apresenta- se as primitivas de modelagem de maneira informal dos formalismos de Redes de Petri, Redes de Petri Estoedstieds e Redes de Petri Estocásticos Generdlizadas.
Uma Rede de Petri e uma abstração de um sistema real.
Ela é um modelo formal do fluxo de dados e controle do sistema modelado em questao.
As propriedades, conceitos e tecnicas para modelagem de uma Rede de Petri foram desenvolvidas utilizando metodos simples e poderosos para descrição e analise do fluxo de sistema.
O formalismo de Redes de Petri (PN -- Petri Nets) é utilizado principalmente em sistemas que possam apresentar atividades assíncronas e concorrentes.
Redes de Petri tem sido utilizadas principalmente para a modelagem de sistemas de eventos em que estes possam ocorrer concorrentemente, havendo obstáculos na concorrência.
Precedência ou freqüência desses eventos A estrutura de uma Rede de Petri e um grafo bipartidol que compreende um conjunto de lugares P, um conjunto de transições T, e um conjunto de arcos direcionados A. Os lugares são representados graficamente por círculos, as transições por barras e os arcos direcionados por setas.
Os arcos direcionados conectam os lugares as transições e as transições aos lugares.
Tem- se, na Figura 4.1, um exemplo da representação grafica de uma Rede de Petri que possui 5 lugares e 6 transições.
Um lugar e uma entrada para uma transição se existe um arco direcionado do lugar para a transição em questão.
Analogamente, um lugar e uma saída de uma transição se existe um arco direcionado da transição para o lugar em questão.
Uma Rede de Petri pode ser considerada marcada quando ela possuir tokens ou marcas.
T0kens encontram- se nos lugares.
As transições, quando disparadas, consomem tokens dos lugares lUm grafo bipartido é aquele que possui dois tipos de nodos distintos:
Lugares e transições.
Rede de Petri representados graficamente por um ponto preto.
A quantidade e a posição dos tokens numa Rede de Petri podem Variar durante o funcionamento da mesma.
Uma Rede de Petri e executada atraves do disparo de transições.
Para ocorrer o disparo de uma transição, é necessario que esta transição esteja habilitada para isto.
Uma transição e considerada habilitada para disparar quando todos os lugares de entrada de ela contiverem pelo menos um taken.
Analisando a Figura 4.2, nota- se que a transição t1 possui apenas o lugar p1 como entrada, e este possui pelo menos um taken.
Logo, a transição t1 está habilitada e pode ser disparada.
Cada disparo de uma transição pode modificar' a distribuição dos tokens nos lugares e conseqüentemente pode produzir uma nova marcação M¡ para a Rede de Petri.
Tokens são considerados entidades atômicas (inclivisíveis2), ou seja, o disparo de uma transição pode desativar outros possíveis disparos, removendo tokens que poderiam ser consumidos por uma ou outra transição alimentada por um mesmo lugar de entrada.
Observando a Figura 4.3, pode- se notar que após o disparo da transição t1, os lugares pg e pg receberam um token cada.
Por conseguinte. As transições t2 e t3 passaram a estar habilitadas para o disparo.
O disparo da transição t2 coloca um taken no lugar 134 e habilita ã transição t4;
o disparo da transição t3 coloca um token no lugar p5 e também habilita o disparo da transição t5.
Em este momento, as transições t4, t5 e t5 estão habilitadas a serem disparadas.
Porém apenas uma destas três transições pode ser disparada.
A seleção do disparo e não determinística e o disparo de uma transição desativã automaticamente o disparo da outra3.
O resultado do disparo de uma transição de uma marcação Mi pode gerar uma nova marcação AIJ'.
A marcação JW¡ é dita imediatamente atmgível de 1% se ela pode ser obtida do disparo de uma transição habilitada em]|/ I¡.
Uma marcação k1k e dita attngível de Ali se existir uma seqüência de disparo de transições que levem o estado da Rede de Petri em questão de 1% para Mk.
O funcionamento de uma Rede de Petri gera uma seqüência JM de marcações[ Imo, JM 1, A12, e uma seqüência T de transições[ t1, tg, O disparo de uma transição tk.
Habilitada em[ VL, pode mudar o estado da Rede de Petri de M, parã M¡ e assim por diante.
A árvore de atingibilidade é construída a partir de a marcação inicial A40 da Rede de Petri em questão.
Em seguida, leva- se em conta todas as marcações imediatamente atingíveis desta marcação inicial.
Somente M1 e imediatamente atingível a partir de a marcação inicial.
A partir de esta nova marcação, repete- se o mesmo procedimento.
Logo, JM;
E A13 são as marcações imediatamente atingíveis a partir de M1.
Considerando M2 como a nova marcação, tem- se as marcações A11 -- obtida anteriormente -- e A14.
A marcação M3 também gera as marcações A11 e 1h14.
Repetindo o mesmo procedimento para 1h14, consegue- se as marcações Alo.[
Mg e A13.
Desta forma, obtem- se a árvore de atingibilidade do exemplo em questão.
A construção da árvore a partir de a marcação inicial!
M0 poderia gerar uma árvore de tamanho infinito.
Entretanto, para se representar a árvore num tamanho finito, quando encontra- se um marcação ja atingida, não expande- se a marcação em questão, considerando- a como uma marcação duplicada.
As marcações duplicadas ou estados mortos são representados por as folhas da árvore.
As folhas da árvore de atingibilidade são marcações as quais não são mais expandidas por ja terem sido obtidas anteriormente.
Os estados mortos são estados finais do sistema os quais não possuem transições habilitadas para os mesmos.
Um lugar de uma Rede de Petri pode apresentar a propriedade de limitação.
O termo lirnitação tambem é conhecido como boundedness Um lugar pode ser dito como k--limitado ou simplesmente limitado se o número de tokens do lugar não excede o limite k do mesmo.
Em o exemplo apresentado na Figura 4.2, para todos os lugares da Rede de Petri em questão, o limite k é igual a 1, pois nenhum lugar da Rede de Petri deste exemplo contém mais de 1 taken.
Uma Rede de Petri também pode ser denominada limitada.
Diz- se que uma Rede de Petri é limitada se o limite de todos os lugares for menor que infinito.
Logo, pode- se concluir que a Rede de Petri da Figura 4.2 é I-limitada, pois nenhum lugar desta rede acumula mais do que 1 taken em qualquer marcação possível da mesma.
Um lugar de uma Rede de Petri pode ser considerado seguro se ele tiver no maximo 1 taken, ou seja, um lugar que é Llimitado é considerado um lugar seguro, O conceito de segurança é simplesmente uma particularização do conceito de limitação.
O termo segurança também é conhecido como safeness.
Esta propriedade e uma das mais importantes para a modelagem de sistemas digitais, visto que um lugar pode ser modelado como uma porta ou mesmo um jíip-flop.
Logo, pode- se dizer que uma Rede de Petri é segura se o limite k de todos os lugares da mesma não exceder 1 taken.
Como pode- se observar, a Rede de Petri apresentada no exemplo da Figura 4.2 e uma rede segura, pois ela e uma rede l-limitada.
O conceito de vivacidade esta definido em função de as possibilidades de disparo das transições.
O termo vivacidade também é conhecido como liveness Vivacidade é uma propriedade fundamental para sistemas do mundo real.
Uma transição e potencialmente (iisparavel numa marcação Aio se existe uma marcação Ã/ I, atingível a partir de Aio, ou seja, uma transição e considerada viva se esta não é passível de um impasse ou deadlock.
Impasse numa Rede de Petri e a impossibilidade do disparo de qualquer transição da mesma.
A Figura 4.5 apresenta a Rede de Petri que representa o processo de produção numa fabrica de agua mineral.
Supõe- se que esta fabrica possua uma única maquina responsavel por a manufatura da garrafa de agua e da tampinha da mesma.
Portanto, quando esta maquina estiver sendo usada para fabricar as garrafas, o processo de manufatura das tampinhas devera aguardar para que possa- se utilizar a mesma maquina, e vice-versa.
Tendo em vista a rede da Figura 4.5, o lugar po da rede representa o depósito de matériaprima e o lugar pg a habilitação do sistema para a manufatura.
Os lugares p¡ e pg representam, respectivamente, os repositórios de materia- prima para as garrafas e tampinhas.
Os lugares pg e p4 representam o processo de manufatura das garrafas e o processo de manufatura das tampinhas respectivamente.
O lugar p7 representa a maquina responsavel por a linha de produção da fábrica.
Um taken neste lugar representa que a maquina esta disponível.
Quando não se encontrar um taken neste lugar, significa que a maquina não esta disponível, ou seja, um dos dois processos esta utilizando a máquina.
Os lugares P5 e 175 são, respectivamente, os depósitos das garrafas e das tampinhas.
Por último, o lugar pg representa o processo de montagem da garrafa de agua mineral.
A transição to representa o início do processo de manufatura.
Em este momento, e feita a distribuição de materia- prima para os depósitos p 1 e pg para a manufatura de garrafas e tampinhas.
As transições t1 e t2 representam, respectivamente, o início dos processos de manufatura das garrafas e tampinhas.
Como o lugar p7 possui apenas um taken, apenas uma das duas transições t¡ ou t2 podera ocorrer.
Quando uma dessas transições ocorrer, automaticamente o disparo da outra transição sera impossibilitado, pois o taken do lugar p7 sera consumido.
A transição t3 representa o termino da manufatura de garrafas e, conseqüentemente, a liberação da maquina.
De a mesma forma, a transição t4 libera a maquina e termina com o processo de manufatura de tampinhas.
O disparo da transição t3 colocará um taken em P5 e o disparo da transição t4 colocará um taken em pe.
Quando ocorrerem uma destas transições, automaticamente sera colocado um taken em p7, liberando a maquina para um novo processo de manufatura.
Quando ambos os lugares p5 e 175 contiverem pelo menos um taken, então a transição t5 e disparada.
Quando isso ocorrer, um taken e colocado no lugar pg e outro no lugar pg, habilitando o processo de manufatura de outras garrafas e tampinhas, desde que haja materia- prima.
Muitas outras areas de estudo podem ser mencionadas como possíveis assuntos para a modelagem de Redes de Petri, incluindo alocação de recursos, sistemas operacionais, redes de filas, controle de trafego, entre outros.
O formalismo de Redes de Petri é uma ferramenta de grande facilidade para modelagem de uma vasta Variedade de sistemas.
Usando o formalismo de Redes de Petri, e possível descrever somente a estrutura lógica de sistemas, pois tal formalismo não inclui nenhum conceito de tempo.
Entretanto, freqüentemente, o conceito de tempo tem um papel importante na descrição do comportamento de sistemas.
A introdução do conceito de tempo no formalismo de Redes de Petri permite a descrição de um comportamento dinamico de sistemas Noe e Nutt, Merlin e Farber e Zuberek usaram o conceito de tempo para a modelagem do comportamento de sistemas computacionais -- Redes de Petri Temporizadas (TPN -- Timed Petri Nets) -- associando um tempo fixo no disparo de transições.
O formalismo de Redes de Petri Temporizadas tem como sua principal característica a associação de um atraso fixo para cada transição do modelo -- Figura 4.6.
Redes de Petri Temporizadas foram o passo inicial para a criação do formalismo de Redes de Petri Estocasticas (SPN -- Stochastic Petri Nets).
A possibilidade de unir a habilidade do formalismo de Redes de Petri para descrever sincronização e concorrência com um modelo Estocástico e o principal atrativo para obter- se uma avaliação quantitativa de sistemas computacionais complexos.
Os primeiros estudos sobre Redes de Petri Estocásticas foram desenvolvidos por Symons, Natkin e Molloy As Redes de Petri Estocasticas são obtidas atraves da associação de um tempo distribuído exponencialmente com o disparo de cada transição da rede.
O formalismo de Redes de Petri Estocasticas (SPN -- Stochastic Petri Nets) é uma ferramenta para modelagem e avaliação de desempenho de sistemas envolvendo concorrência, nãodeterminismo e sincronização Redes de Petri Estocásticas são definidas assumindo que todas as transições são temporizadas e que o atraso no disparo das transições e associado a uma variável aleatória distribuída exponencialmente.
Dada uma Rede de Petri Estocástica com uma marcação que possua diversas transições habilitadas a serem disparas, uma das transições ocorre.
Quando uma transição de uma Rede de Petri Estocástica é disparada, assim como no formalismo de Redes de Petri, uma nova marcação pode ser gerada.
Esta nova marcação pode conter transições que já encontravam- se habilitadas na marcação anterior, mas não foram disparadas.
Por causa de a propriedade de ausência de memória4 da distribuição exponencial, pode- se assumir que a atividade associada a cada transição e recomeçada para qualquer nova marcação.
A estrutura de uma Rede de Petri Estocástica possui os mesmos elementos contidos na estrutura de uma Rede de Petri acrescido do conjunto L:
De taxas de disparos, possivelmente dependente de vnarcação, associadas as transições -- Figura 4.7.
Segundo Molloy, devido a propriedade de ausência de nlemória da distribuição exponencial do atraso dos disparos, o formalismo de Redes de Petri Estocasticas e isomórfico5 ao formalismo de Cadeias de Markov de Tempo Contínuo (CTMC).
E possível mostrar que uma Rede de Petri Estocástica é ergódica.
Ergódica significa que para qualquer marcação desta rede atingida a partir de a marcação inicial, pode- se novamente atingir a marcação inicial.
Logo, se uma Rede de Petri Estocástica é ergódica, é possível calcular a distribuição da probabilidade de solução estacionaria das marcações da mesma resolvendo a equaçao:
Com a restrição adicional:
Onde Q é o gerador infinitesirnal cujos os elementos são obtidos através das taxas de disparos correspondentes as transições e 71' é o vetor de probabilidade de solução estacionaria.
A partir de a árvore de atingibilidade, pode- se construir a Cadeia de Markov equivalente ao modelo.
O espaço de estados da Cadeia de Markov correspondente a árvore de atingibilidade de uma Rede de Petri Estocástica é equivalente as marcações encontradas na mesma.
Por conseguinte, na Figura 4.8, a árvore de atingibilidade possui 6 marcações que são equivalentes aos estados da Cadeia de Markov -- Figura 4.9.
Tendo em vista a Figura 4.9, constata- se que a taxa de transição do estado o para o estado l é igual a t1.
O valor entre parênteses corresponde ao número de tokens do lugar 121 na marcação A10, visto que esta transição é dependente de m1.
Por conseguinte, a taxa de transição do estado 1 para o estado 2 e do estado 3 para o estado 4 e igual a t1, visto que m1 e igual a 1 em M1 e M3.
Uma transição pode ter associada a ela uma condição de disparo chamada de controladora.
Sendo assim, um controlador associa uma condição a uma transição de modo que o disparo da mesma fique dependente da condição especificada.
Com isso, o disparo da transição fica dependente não somente do número de tokens de um lugar, mas de qualquer condição associada ao número de tokens do mesmo, e.
g, o número de tokens maior ou igual a uma determinada quantia de tokens de um lugar.
Assumindo que as taxas de transição a:
Pode- se obter o gerador infinitesimal Q a partir de a árvore de atingibilidade.
O gerador infinitesimal é uma matriz cujos elementos qi¡ são obtidos atraves do somatório das taxas de disparo das transições habilitadas na marcação M¡ as quais os disparos geram a marcação Mj.
Cabe ressaltar que em se tratando de gerador infinitesimal, os elementos da diagonal principal da matriz correspondem a valores negativos de forma que a soma dos elementos de uma linha seja igual a zero.
Em (4.3), tem- se a matriz do gerador infinitesimal da Rede de Petri Estocástica da Figura 4.7.
Utilizando o gerador infinitesimal Q obtido ein (4.3), pode- se resolver a equação (4.1) e obter os valores do vetor de probabilidade 7 r:
É possível, a partir de o vetor de probabilidade 7 r, obter uma avaliação quantitativa do com* portamento da Rede de Petri Estocástica.
A probabilidade de uma condição em especial de uma Rede de Petri Estocastica pode ser calculada por a equação:
Onde A e o subconjunto de marcações atingiveis a partir de a marcação inicial que satisfaça a condição requerida.
Também e possível calcular, atraves da equação (4.5), o número medio de tokens num determinado lugar.
Elmil $= É lnPlAülnlll Onde A (i, n) é o subconjunto de marcações atingíveis a partir de a marcação inicial as quais o número de tokens do lugar p, e igual a n, e k e o limite maximo de tokens do lugar em questão.
Logo, o lugar pi e k--livnitrzdo.
Como exemplo, pode- se calcular o número medio de tokens do lugar p1 da Rede de Petri Estocástica da Figura 4.7.
Usando a equação (4.5), tem- se:
A taxa media de disparo da transição t¡ por unidade de tempo e calculada por a equação:
Como demonstração, usando a equação (4.6), pode- se calcular a taxa de disparo da transição tg, habilitada somente nas marcações 1h11, JW;
E 1h14:
A Rede de Petri Estocástica nlodelada na Figura 4.10 continua representando o processo de produção numa fabrica de agua mineral.
Porenn taxas de disparos estão associadas as transições da rede.
Para manter- se a relação de ergodicidade da Rede de Petri Estocástica da Figura (Figura 4.5) foram retirados.
Esta Rede de Petri Estocástica possui 30 marcações?
Descritas na Tabela 4.1, geradas a partir de o disparo das transições.
O lugar p7 representa a máquina responsavel por a linha de produção da fabrica.
A máquina suporta apenas uma tarefa por vez, ou seja, um taken no lugar p7 indica que a maquina esta disponível.
Se este lugar não possuir um taken, significa que um dos dois processos de produção esta utilizando a máquina.
Os lugares p5 e pg, são os depósitos das garrafas e das tampinhas respectivamente.
A o contrario do exemplo modelado na Figura 4.5, este exemplo não possui um lugar representando a junção da garrafa e tampinha de agua mineral.
Este passo é tratado de forma abstrata na transição t5, onde esta ocorre a medida que haja tokens nos lugares P5 e pg.
Conseqüentenrente, um taken e retirado dos lugares pg, e pe (depósitos de garrafas e tampinhas) e colocado no lugar po, liberando o processo de manufatura de uma nova garrafa e nova tampinha.
A transição to representa o início do processo de manufatura.
Esta transição esta associada a uma taxa de disparo dependente da marcação de m1.
Quando a transição t0 é disparada, um taken é removido de P0 e adicionado em p1 e pg, habilitando o processo de manufatura das garrafas e tampinhas.
Como as transições t1 e tg encontram- se em conflito, quando a maquina estiver produzindo garrafas (lugar pg), ela não estara produzindo tampinhas (lugar p4), e vice-versa.
Quando uma das transições t3 ou t4 ocorrer, um taken será colocado em p7 disponibilizando a máquina para um novo processo de manufatura.
Quando an1bos os lugares P5 e pg, contiverem ao menos um taken cada, então a transição t5 e disparada.
Isso caracteriza o fim do processo de manufatura de garrafas e tampinhas, possibilitando uma possível continuação do processo.
Com isso, um taken e colocado em po permitindo a produção de uma nova garrafa e tampinha.
O formalismo de Redes de Petri Estocasticas e uma ferramenta muito útil para analise de sistemas de computadores, visto que permite às atividades de sistemas serem precisamente descritas através de um grafico.
Este gráfico pode ser convertido para um modelo Markoviano utilizado para obter- se avaliação quantitativa do sistema em questão.
Uma característica importante do formalismo de Redes de Petri Estocásticas é que ele pode ser facilmente compreendido por pessoas que não tenham familiaridade com métodos de modelagem probabilística.
Entretanto, a representação grafica de sistemas utilizando o formalismo de Redes de Petri Estocasticas encontra- se limitada a medida que aumenta- se o tamanho e a complexidade do sistema em questao.
Além disso, o número de estados da Cadeia de Markov equivalente a Rede de Petri cresce muito rapidamente conforme a dimensão do grafico cresce.
Portanto, o formalismo de Redes de Petri Estocasticas pode ser usado para modelar somente sistemas de tamanho limitado.
Geralmente, não e desejável associar uma variavel aleatória distribuída exponencialmente para cada transição do modelo, conforme descrito no formalismo de Redes de Petri Estocásticas.
O formalismo de Redes de Petri Estocasticas Generalizadas (GSPN -- Generalized Stochastíc Petri Nets) associa tempo somente para alguns eventos que acredita- se ter um grande impacto na avaliação do sistema.
Um típico exemplo disso pode ser o caso em que a seqüência de operações de um sistema compreende atividades cujas durações diferem bruscamente.
Logo, é conveniente que atividades de duração desprezivels sejam modeladas somente do ponto de vista logico, enquanto que atividades de duração mais longa seriam associadas a uma variavel aleatória.
Através desta modelagem, reduz- se o número de estados da Cadeia de Markov equivalente ao modelo, conseqüentemente reduzindo a complexidade da solução do mesmo.
Além disso, a utilidade de uma estrutura logica que pode ser usada em conjunto com uma estrutura temporizada permite a construção de um modelo compacto de sistemas computacionais complexos O formalismo de Redes de Petri Estocásticas Generalizadas permite duas classes diferentes de transições no modelo:
Transições imediatas e transições temporizadas.
A transição imediata dispara em tempo zero assim que encontra- se habilitada.
A transição temporizada, assim como no formalismo SPN, dispara após um tempo aleatório, distribuído exponencialmente, associado a mesma quando habilitada.
As transições temporizadas são representadas graficamente no modelo por barras espessas, e as transições imediatas por barras finas.
Obviamente, as taxas de disparos estão associadas&amp; Atividades de duração muito Curta, ou somente conceitual.
Como pode ser constatado na Figura 4.12, as transições t1, t4 e t5 são transições temporizadas, e as transições tg, t3, t6 e t7 são transições imediatas.
A transição t1 é dependente da marcação de pl.
A estrutura de uma Rede de Petri Estocástica Generalizada é a mesma utilizada por a Rede de Petri Estocástica, porém o conjunto L:
De taxas de disparo contem somente m/ elementos, onde m/ é o número de transições temporizadas da Rede de Petri Estocástica Generalizada.
Em o funcionamento de uma Rede de Petri Estocástica Generalizada, pode ocorrer que varias transições sejam habilitadas simultaneamente por uma marcação.
Se o conjunto de transições habilitadas H compreender somente transições temporizadas, então a transição temporizada t 1- (i E H) dispara com uma probabilidade:
O subconjunto de H compreendendo todas as transições imediatas habilitadas junto com a distribuição de probabilidade associada as mesmas e chamada de random Switchs).
Esta distribuição de probabilidade e conhecida como switching distributionlü.
Diferentes marcações podem gMomento em que é necessário determinar- se qual transição deve ser disparada.
O modelo em GSPN descrito na Figura 4.12 possui sete lugares e sete transições.
Este modelo possui três transições temporizadas:
T1, t4 e t5, as quais possuem como taxas de disparo m1oz,[ 3 e 7 respectivamente.
As transições t2, t3, t6 e t7 são transições imediatas, e por definição possuem taxas de disparo de tempo zero.
As transições t3 e t7 são transições conflitantes.
Elas são sempre habilitadas simultaneamente, logo e Iiecessario definir uma switching distribution para cada marcação em que m7 e maior que zero.
As transições t2 e t3 também são transições conflitantes, e estas são simultaneamente habilitadas se;
D3 e p4 contiverem tokens.
Por conseguinte, uma switching distribution deve ser definida para cada marcação em que m2, m3 e m4 forem maiores que zero.
Como pode ser observado, não mais do que duas transições imediatas podem estar simultaneamente habilitadas para este exemplo.
Desta forma, dois random Switches podem ser identificados:
Para as transições t2 e t3, e para as transições t6 e t7.
Assim como na modelagem de Rede de Petri é necessario especificanse a marcação inicial como parãmetro de entrada da mesma, num modelo em GSPN tambem e necessario identificar os possíveis random switch da rede, e definir a switching distribution da mesma para resolver- se os conflitos das transições.
Uma possível switohing distribution para o exemplo da Figura 4.12 e descrito na Tabela 4.2.
A partir de a marcação inicial descrita na Figura 4.12, uma possível execução do estado do modelo em GSPN pode ser a seguinte:
A transição t1 dispara com uma taxa 1/ (2 a), visto que esta e dependente da marcação de m1.
Com isso, um dos dois tokens contidos em pl e movido para pg.
Assume- se que a transição t2 dispara.
Logo, remove- se um token de P2 e;
O3, e adiciona- se um token em ps..
Conseqüentemente, as transições temporizadas t1 e t4 encontram- se habilitadas.
A transição t1 dispara com probabilidade:
Pítil $= Se a transição t1 disparar primeiro, um taken é movido de p1 para pg.
De esse modo, a transição imediata t3 e habilitada e disparada instantaneamente, visto que e a única transição habilitada deste tipo no momento.
Um token e removido de pg e p4, e coloca- se um token em pa.
Em este momento, a marcação resultante do modelo em GSPN contém um taken em 125 e pa.
Esta marcação habilita as transições t4 e t5, onde cada uma pode disparar com a probabilidade:
Agora, assume- se que t4 dispara primeiro, então um token é movido de;
D5 para p7, e um token e colocado em p1.
As duas transições imediatas t6 e t7 estão simultaneamente habilitadas, e como especificado no swttchmg distribution da Tabela 4.2, cada uma das transições pode disparar com probabilidade igual a 1/2, de forma que o taken de p7 pode mover- se tanto para pg quanto para p4.
Em este instante, as transições t1 e t5 encontram- se habilitadas, e o modelo em GSPN segue o seu funcionamento.
O conjunto de atingibilidade de um modelo em GSPN pode ser dividido em dois grupos:
A Tabela 4.3 descreve os estados que compõem o conjunto de atingibilidade da rede em questão.
O conjunto de atingibilidade de um modelo em GSPN é um subconjunto do conjunto de atingibilidade da SPN associada, pois as regras de precedência introduzidas com o uso de transições imediatas não permitem que alguns estados sejam atingíveis.
As transições temporizadas t1, t4 e t5 habilitadas nas vanishing nzarkings, por definição, nunca ocorrerão, pois as transições imediatas habilitadas com estas transições ocorrerão primeiro.
Assumindo- se que o exemplo descrito na Figura 4.12 representasse uma Rede de Petri Estocástica, as transições 7527 t3, t5 e t7 seriam transições temporizadas.
O conjunto de atingibilidade para esta rede possuiria 33 estados.
A árvore de atingibilidade para a Figura 4.12, caso esta fosse uma SPN, esta representada na Figura 4.13.
Entretanto, o conjunto de atingibilidacle do modelo em GSPN descrito na Figura 4.12, possui apenas 17 estados.
Observe que algumas marcações da árvore de atingibilidade não serão atingíveis devido a o uso de transições imediatas e da.
Switching distribution especificada para este exemplo -- marcações compreendidas por a area pontilhada da Figura 4.13.
A Figura 4.14 representa a árvore de atingibilidade da Figura 4.12.
Agora que a árvore de atingibilidade esta definida, pode- se construir sua Cadeia de Markov equivalente.
Como descrito na Seção 4.1, o espaço de estados da Cadeia de Markov corresponde as marcações da árvore de atingibilidade da rede em questão.
Logo, a árvore de atingibilidade da Figura 4.14 possui 17 marcações que serão equivalentes aos 17 estados da Cadeia de Markov -- Figura 4.15.
Os estados pontilhados da Cadeia de Markov da Figura 4.15 correspondem às vamshtng markings, enquanto os demais estados correspondem as tzmgible markings.
Como as vanishing markings são marcações que ocorrem em tempo zero, somente as tangible markmgs são representadas na Cadeia de Markov -- Figura 4.16.
Em a Figura 4.16, tem- se apenas as tangible markmgs do modelo GSPN representando a Cadeia de Markov equivalente.
Em a Cadeia de Markov equivalente a0 modelo em GSPN em questão, os arcos não correspondem simplesmente a taxa de disparo de uma transição.
Eles correspondem ao conjunto de taxas percorridas de um estado ao outro, ou seja, os arcos são rotulados com exatamente uma transição temporizada seguida de uma seqüência finita (possivelmente vazia) de transições imediatas.
Como pode ser observado na Tabela 4.3, existem 3 possíveis conflitos entre tangible markings:
T1 e t4, t1 e t5, e t4 e t5.
A probabilidade de cada transição confiitante disparar esta descrita na equação (4.7).
Em contra partida, dois random switch são identificados nas vanishing nmrkings:
Note que Jl/ Íl é a única marcação que possibilita que t2 e t3 encontrem- se em confiito.
A probabilidade de cada uma destas transições conflitantes disparar foi determinada na switching distribution descrita na Tabela 4.2.
Em este caso, a probabilidade de ambas as transições dispararem é igual a 1/2.
A definição dos random switch num modelo em GSPN pode algumas vezes requerer do desenvolvedor do modelo uma perspicacia e discernimento nas operações do sistema modelado, pois a definição da.
Switching distribution pode ter um impacto bastante significativo nos resultados numéricos do modelo.
As marcações A17, A18, Â/ I14 e A115 são responsaveis por colocarem as transições t5 e t7 em conflito.
Determinou- se dois momentos bem específicos na Tabela 4.2 para solucionar o conflito destas duas transições.
Quando não houverem tokens nos lugares P3 e p4, a probabilidade de ambas as transições dispararem e igual a 1/2.
Entretanto, quando m3 $= o e m4:
1 (marcação M7), a transição t6 sera disparada.
Em contra partida, quando m3:
1 e m4:
O (marcação Mg), a transição t7 sera disparada.
Sendo assim, seguindo o que foi especificado na Tabela 4.2 na modelagem do modelo em GSPN em questão, determinou- se que os lugares pg e p4 jamais conterão dois tokens.
Note que esta limitação não e intrínseca da estrutura e da marcação inicial, mas uma conseqüência das suiitching distributions definidas na Tabela 4.2.
Um aspecto critico na modelagem de um modelo ein GSPN e a identificação de todos os random suiitch do sistema e a definição de uma suiitching distribution &quot;apropriada «em todas as marcações.
A Rede de Petri Estocástica modelada na Figura 4.10 possui somente transições temporizadas.
Em a rede da Figura 4.17, as transições t1, t2 e t5 passam a ser transições imediatas, ou seja, disparam em tempo zero assim que encontram- se habilitadas.
Esta rede continua representando o processo de produção numa fabrica de agua mineral.
A switching distribution da GSPN modelada como exemplo esta definida na Tabela 4.4.
Esta Rede de Petri Estocástica Generalizada possui 24 marcações, descritas na Tabela 4.5, geradas a partir de o finicionainento da mesma.
A transição ternporizada to habilitada nas vantshtng nzarkings, por definição, nunca ocorrerá, pois somente as transições imediatas habilitadas com esta transição poderão ocorrer.
As marcações compreendidas por a área pontilhada na árvore de atingibilidade não são atingidas por o funcionamento da rede.
A Cadeia de hríarkov equivalente a este modelo em GSPN esta descrita na Figura 4.19.
Com isso, a Cadeia de Markov equivalente encontra- se somente com 13 estados, ao contrário de o modelo equivalente em SPN da mesma que possui 30 estados.
Por utilizar transições imediatas, o formalismo de Redes de Petri Estocásticas Generalizadas minimiza o espaço de estados da Cadeia de Markov equivalente a rede.
Tal característica é dependente da forma como a mesma foi modelada, de forma que somente os eventos que tenham alguma relevância na avaliação do sistema tenham um tempo de retardo associado as transições.
Redes de Petri Estocásticas Generalizadas Superpostas Em esta seção, apresenta- se tambem a Definição formal do formalismo de Redes de Petri Estrcásttcas Generaltzadas Supemostas, visto que este formalismo é o foco principal desta dissertação, juntamente com o formalismo de Redes de Autômatos Estocásticos.
Esta definição é uma releitura do trabalho original de SGSPN definido por Donatelli.
Em o Apêndice B, encontra- se a definição original desenvolvida por Donatelli sobre os formalismos de Autôvnatos Estocásticos Superpostos e Redes de Petri Estocásticos Gerterrzlilzadrts Superpostrts Donatelli propôs o formalismo de Autômatos Estocásticos Superpostos (SSA -- Superposed Stochastic Automata), uma classe do formalismo de Redes de Petri Estocasticas (SPN).
Um modelo em SSA é um conjunto de maquinas de estados estoeasticas (SSM -- StochrLstic State Machine) que interagem através da superposição de transições.
A solução de um modelo em SSA pode ser eficientemente avaliada, visto que o mesmo pode derivar automaticamente uma expressão tensorial para seu gerador infinitesimal.
Posteriormente, Donatelli estendeu o formalismo de SSA para o formalismo de SGSPN, mostrando como a solução de um modelo em SSA pode ser adaptada para funcionar no formalismo de SGSPN.
Sendo assim, num primeiro momento, toda SGSPN pode ser vista como simplesmente uma GSPN.
Em um segundo momento, através de uma analise mais detalhada do comportamento da SGSPN, pode- se identificar componentes GSPN (módulos) da SGSPN que se interagem através do uso de transições de sincronização.
Assim como no formalismo de SAN, o formalismo de SGSPN permite a modularização de um sistema, possibilitando o armazenamento e a solução eficiente de sistemas complexos.
Sendo assim, tal formalismo ameniza os prejuízos da explosão do espaço de estados do formalismo de CTMC, o qual SGSPN possui equivalência de representação.
A seguir, segue a notação utilizada para a definição de modelos no formalismo de SGSPN.
Sejam QSPNM i-esimo componente QSPN de um inodelo descrito por o formalismo de SGSPN, o11de (JSP/ Va) é o primeiro componente;
Diferentemente do formalismo de SAN, o formalismo de SGSPN não possui uma probabilidade associada a uma transição.
De essa maneira, as transições disparam ou não quando encontram- se habilitadas.
Um componente GSPN é uma descrição matemática de um modelo, o qual representa um sistema com entradas e saidas discretas.
Sendo assim, o sistema modelado pode se encontrar de entre as diferentes marcações que um componente@ SPN possui.
De esta maneira, um componente GSPN é representado por um conjunto¡ ínito de lugares e um conjunto finito de transições.
As transições podem ter uma variavel aleatória associada as mesmas, a qual segue uma distribuição exponencial a escala de tempo contínua.
Os componentes QSPN possuem um comportamento &quot;quase independente».
Eles não são totalmente independentes, visto que eles possuem transições de sincronização, as quais são res~ ponsáveis por a interação entre os componentes.
O componente QSPN e composto por os lugares[ 75 e p7, assim como o componente GSPNQ) é composto por os lugares pl, pg, P3,;
D4 e p5.
Os componentes QSPNU) e QSPNQ) interagem- se através da transição de sincronização t3.
Em a próxima seção, apresenta- se as definições e os tipos de transições utilizadas nos modelos em SGSPN.
Transições são entidades responsaveis por a mudança de marcação numa Rede de Petri.
mais de um lugar pode estar associado a uma transição.
As transições são divididas em duas classes:
Imediatas e temporizadas.
As transições imediatas não possuem uma taxa associada as mesmas, ie.,
quando se encontram habilitadas, elas disparam em tempo zero.
Em contra partida, as transições temporizadas possuem uma variável aleatória associada as mesmas, a qual segue uma distribuição exponencial ã escala de tempo contínua.
A seguir.
Apresenta- se os dois tipos de transições utilizados nos modelos descritos por o formalismo de SGSPN:
Transições locais e transições de sincronização.
As transições locais são responsaveis por alterarem o estado local de um único componente GSPN sem que qualquer outro componente sofra alguma mudança.
As transições locais permitem que os componentes possuam uma certa independência, possibilitando um comportamento paralelo do sistema modelado.
As transições locais podem ser transições imediatas.
Como também podem ser transições temporizadas.
Em a Figura 5.1, tem- se t2 como transição local do componente QSPNUZ).
A o contrario das transições locais, as transições de sincronização alteram o estado local de mais de um componente QSPN.
Através das transições de sincronização, é possivel realizar a interação entre os componentes QSPN.
Sincronização ocorre sob a forma de sincronismo no disparo das transições.
As transições locais podem ser classificadas como transições imediatas ou transições temporizadas.
Entretanto, as transições de sincronização podem ser classificadas.
Somente como transições temporizadas.
Em a próxima seção, apresenta- se a definição formal do formalismo de SGSPN, bem como o método de obtenção do gerador infinitesimal de um modelo descrito por o mesmo.
Sejam QSPN conjunto de componentes QSPA/, onde i e;
Definição 20 O conjunto QSPN compreende N componentes nomeados QSPNM, onde i E Cada componente@ SPN pode ser Visto como um módulo &quot;quase independente «do sistema modelado.
Estes componentes não são considerados independentes, pois os mesmos possuem transições de sincronização as quais são responsaveis por a interação entre eles.
Seja Cm o conjunto de condições associadas aos disparos das transições de Tm.
Definição 21 C E Cm é uma condição que pode ser' (rssociada a uma transição t G Tm, a qual depende das marcas dos lugares p E 73m.
Esta condição é uma função com dominio nas marcas dos lugares p E 73m e contra-dominio em falso e Verdadeiro.
Estas condições permitem que o disparo de uma transição tenha um (iependência em relação a quantidade de tokens de um determinado lugar do mesmo componente QSPN.
Definição 22 Um componente@ Spa/ m é definido por a tupla (pm, Tm, rrm, Im, Om, Wm, Gm, A/ fáil), onde:
Com isso, todo controlador g G Gm depende unicamente dos estados do componente QSPA/' ül e não dos estados de outros componentes QSPN.
Uma condição de valor constante 1 pode ser associada a uma transição, ie, o disparo da transição não tem dependência com as marcas dos lugares p G 73m, possibilitando que esta transição seja disparada quando se encontrar' habilitada.
Definição 23 o conjunto de transições ternporizadas 77m do componente ÇSPA/ é dejínido como TTm:
Definição 24 O conjunto de transições' imediatas Tio) do componente QSP/ Vm é rlefinirlz) como 7,&quot;:
IO valor numérico expressado é a taxa média de ocorrência da transição.
LDo inglês guard.
Por definição, o disparo das transições imediatas possuem prioridade em relação a o disparo das transições temporizadas.
Definição 25_ O conjunto de transições Tm do componente (JSP/ VU) é Definido como Tm:
Note que o conjunto de transições de um componente QSPA/ (il e composto por a união dos conjuntos de transições TTM e 73m, onde Iião há intersecção entre estes conjuntos, i.
e, uma transição pode pertencer somente ao conjunto de transições imediatas ou transições temporizadas.
Sejam 730: O conjunto de transições locais do componente QSPA/ (Z);
Tsw conjunto de transições de sincronização do componente QSPNW.
Definição 26 Uma transição t E'Em Vj E tal que i;
É j, t à 71m.
Observe que uma transição local pertence somente a nm único componente QSPN.
Por sua Vez, uma transição local pode ser definida como temporizada ou imediata, não ha nenhuma restrição quanto a classe da transição.
Definição 27 Uma transição t é denominada como transição de sincronização, se e somente se t E'Em e Élj E tal que i;
Éjjt E 72m.
A o contrario das transições locais, as transições de sincronização pertencem no mínimo a dois conjuntos de transições de sincronização dos componentes (JSP/ V, ie.,
ha uma intersecção não vazia entre os conjuntos de transições de sincronização dos componentes GSPN.
Diferentemente das transições locais, as transições de sincronização, por definição, são obriv gatoriamente transições temporizadas, Não ha sincronização entre os componentes GSPN atraves de transições imediatas.
Definição 28 O conjunto de transições de sincronização T, de uma SGSPN é definido como O conjunto de transições de sincronização T, possui todas as transições responsaveis por a interação entre os componentes GSPN (módulos), de modo que exista sincronização (dependência) entre eles.
Definição 29 Uma SGSPN composta de N componentes ÇSP/| Ífil é definida por:
Por definição, uma GSPN pode ser vista como uma SGSPN com apenas um componente QSPN e, por conseguinte, com o conjunto de transições de sincronização vazio.
Para se avaliar a solução estacionária de um modelo em SGSPN, são necessarias algumas propriedades, eg.,
vivacidade, irreducibilidade, ergodicidade, etc..
Para isso, algumas restrições devem ser respeitadas para assegurar tais propriedades.
Os modelos descritos em SGSPN que obedecem a estas restrições são denominados SGSPN bem definidas.
Restrição 5 Um componente QSP/ Vm é bem definido, se e somente se:
Não deve ser vazio;
Ou caso o componente QSPNM for único no conjunto@ SPN, o conjunto 7;»
deve ser vazio;
Primeiramente, esta restrição determina que deve haver um conjunto não vazio de transições de sincronização se houver mais do que um componente GSPN, ou ele deve ser' vazio caso haja somente um componente QSPN no modelo.
Toda a transição t E Til) deve ter pelo menos um lugar de entrada e um lugar de saída.
Ela também determina que exista um número finito de marcações atingíveis, possibilitando a obtenção da cadeia de Markov equivalente do modelo.
E, por último, que não exista lugares absorventes ou mortos descritos no modelo.
Através desta restrição e possível garantir que os componentes@ SPN sejam bem definidos.
Restrição 6 Uma transição de sincronização t e 7;
é bem definida, se e somente se:
Toda a transição de sincronização deve ser ternporizada e, por definição, deve pertencer no mínimo a dois Conjuntos de transições de sincronização dos componentes (JSP/ V. Entretanto, conforme visto nestas restrições, para uma transição de sincronização ser bem definida, ela também deve possuir o mesmo número de lugares de entrada e saída entre os componentes QSPN os quais ela interage.
Restrição 7 Uma SGSPN é bem definida, se e somente se:
Assim como no formalismo de SAN, é possível obter- se o Descritor Markoviano de uma SGSPN, utilizando os tensores de transição de cada componente GSPN.
Assim como em SAN, também utiliza- se tensores associados aos componentes QSPNW para a obtenção do Descritor Markoviano do modelo descrito em SGSPN.
Os tensores necessarios para a construção do Descritor Markoviano de uma SGSPN podem ser obtidos atraves de Autômatos Estocásticos.
Os componentes (JSP/ VV) interagem entre si através de transições de sincronização, do mesmo modo que os autômatos &quot;A «interagem- se através de eventos sincronizantes.
Logo, todo componente ÇSPA/ possui um TRGUMSÚ), o qual é visto como um autômato &quot;A», bem como a ocorrência das transições de sincronização equivalem aos eventos sincronizantes.
Sendo assim, apresenta- se a seguir os passos necessarios para que a partir de uma SGSPN consigase obter uma SAN equivalente.
Uma SGSPN e composta por N componentes QSPNV), onde i E.
Cada componente (JSP/ Vw possui um TRglWll/ Iáll), o qual e equivalente a um autômato Estocástico All/ l. Definição 34 Cada nodo Aly) e'Te a/ im corresponde a um estado sem do antômato A (i).
A conversão de um formalismo para outro é feita de modo direto, onde os nodos do grafo de atingibiliclade tangível TRglilüllàíl) são todos marcações atingíveis, bem como os estados de um autômato Estocástico.
Definição 35 Cada arco &quot;a «E Tarô &quot;corresponde a um rotnlo de transição Q (Z) (T (i) 7 y (i)) 7 se e somente se existe tal que IMS) corresponde a com, Alla) corresponde a g (i), t e TT «e a e 73 W'.
Donatelli propôs uma restrição para o TRQM (IMP) de cada componente QSP/| Íüx onde este deve ser fortemente conero e que as transições de sincronização levam a estados atingifveis, i.
e, para toda t e Em, se e um arco de Tarô &quot;então a e um conjunto vazio (M5)[ t\&gt; m «e A45 «e riaswzirgib).
Com isso, pode- se identificar de um formalismo para outro a conversão entre as transições (SGSPN) e os eventos (SAN).
Definição 36 As transições locais t e 77m de nm componente QSPNM correspondem aos eventos locais e E 8¡ do antômato &quot;A».
Definição 37 As transições de sincronizaçãot e'Tall de um componente@ Spa/ m correspondem aos eventos sincronizantes e E 55 do antômato Al».
Sendo assim, as taxas que eram associadas as transições passam a ser associadas as tuplas de eventos nos autômatos.
Por conseguinte, consegue- se a partir de uma SGSPN construir uma SAN equivalente3.
Logo, os tensores do Descritor Markouiano de uma SGSPN são construídos quase da mesma maneira do que os tensores construídos em SAN.
Eles não são construídos de maneira idêntica, visto que o formalismo de SAN permite que os eventos possuam diferentes probabilidades associadas aos mesmos.
Enquanto os eventos (locais ou sincronizantes) podem disparar com diferentes probabilidades de um estado para outro no formalismo de SAN, isso não ocorre no formalismo de SGSPN.
Em SGSPN, uma transição dispara ou não quando encontra- se habilitada.
Note então que as tuplas de transições obtidas a partir de o formalismo de SGSPN são na verdade tuplas de transições iguais a, visto que não há.
O conceito de probabilidades associadas às transições.
Logo, na construção dos tensores, este conceito é omitido, uma vez que não hã diferentes probabilidades associadas aos eventos.
De esta maneira, cada autômato.
A (m) (obtido a partir de o grafo de atingibilidade tangível TRGUMSÚ) do componente GSPNS) de um modelo em SGSPN) possui associado:
Sejam Qíílwüubyüll) o elemento do tensor Q?
Em a linha 23m e na coluna g (i), onde z'E e k E flaelvfl;
Definição 38 Os elementos do tensor de transição local do autômato.
A (m) são definidos por:
A Definição 38.1 corresponde aos elementos não diagonais do tensor de transição local (taxas dos eventos locaisajuste 3 Em a Seção 6.2, demonstrase formalmente a equivalência de representação entre os formalismos de SAN e diagonal das taxas dos eventos locais).
A Definição 38.3 define os elementos nulos do tensor de transição local.
Note que a diferença entre as Definições 16 e 38 e única e exclusivamente a omissão da probabilidade da tupla de transição (e, n) associada ao rótulo de transição QV) (zm, gm).
O mesn1o conceito vale para a obtenção dos tensores das transições sincronizadas (ocorrência do evento e ajuste da ocorrência do mesmo), i.
e, a probabilidade vreçrw, nm) também é omitida, uma vez que o conceito de diferentes probabilidades associadas às transições não existe no formalismo de SGSPN.
Definição 39 Os elementos do tensor das transições stneronizadas que representam a ocorrência do evento sincronizante e E 53 são definidas por:
Definição 40 Os elementos do tensor das transições sincronizadas que representam o ajuste necessário à ocorrência do evento e E 55 são definidas por:
O gerador infinitesimal markoviano Q correspondente à cadeia de Markou a5sociada a uma SGSPN bem definida é representado por a fórmula tensorial chamada Descritor Markoiziano:
Uma vez que toda soma tensorial e equivalente a uma soma de produtos tensoriais particulares, o Descritor Markooiarzo pode ser apresentado como:
Outra forma de representar o Descritor Markoiziano de um modelo descrito por o formalismo de SGSPN esta no Apêndice B, o qual apresenta o trabalho original desenvolvido por Donatelli.
Como pode- se notar, a equação (5.2) e exatamente igual a equação apresentada para o Descritor Markoviano de um modelo descrito por o formalismo de SAN -- equação (3.2).
Isso ocorre devido a a equivalência de representação de ambos os formalismos.
Para auxiliar na compreensão do método de obtenção descrito na Seção 5.3, apresenta- se um modelo descrito por o formalismo de SGSPN a fim de demonstrar a obtenção dos tensores do Descritor Markoviarzo do mesmo detalhadamente.
E, por conseguinte, mostrar o gerador infinitesimal correspondente ao modelo em questão.
O exemplo modelado na Figura 5.3 apresenta um modelo em SGSPN que possui tres componentes GSPN e duas transições de sincronização.
Apresenta- se na Tabela 5.3 as taxas de ocorrência das transições do modelo descrito na Figura 5.3.
O componente GSPNU) possui dois lugares pg e 175, e uma transição local t2.
O componente@ SP/ Vw possui cinco lugares 171, 1237 174, 127 e 1237 e duas transições locais t1 e t5.
O componente QSPNB) possui dois lugares p5 e pg, e uma transição local t5.
A transição de sincronização t3 e responsável por a interação entre os componentes e GSPNQ), assim como a transição de sincronização t4 e responsavel por a interação entre os componentes QSPNQ) e QSPÀ/ (a).
A partir de a identificação dos componentes e das transições (locais e de sincronização) pode- se gerar os tensores necessarios para a construção do Descritor Markouiano do modelo em questao.
Uma vez identificado os componentes GSPN, constrói- se o conjunto de atingibilidade 735w (Jbíáll) de cada um.
Em seguida, a partir de o Râillübfáil), obtém- se o TRSMMÍSÚ) e, conseqüentemente, o TRQMULISÚ) de cada componente.
A Figura 5.4 mostra os TRgllXllláil) de cada componente QSP/ Vil).
As marcações correspondentes aos TRgillülláil) de cada componente (JSP/ Vw encontram- se na Tabela 5.4.
Uma vez construído os TRgiilülíáilt) a] correspondern aos rótulos de transição Qlilkcli), gm).
Corn isso, pode- se identificar o conjunto de eventos locais 8¡ $ ~\&gt; do modelo equivalente ein SAN.
Logo, constrórse os tensores locais Q?
Logo, tem- se os tensores das transições sincronizadas Qi?
Correspondentes aos autômatos AW:
Em seguida, constrói- se os tensores das transições sincronizadas que representam o ajuste necessário a ocorrência dos eventos sineronizantes em cada autômato.
Sendo assim, tem- se os tensores Q:
Correspondentes aos autômatos A (m):
Equivalência de Representação Em este capítulo, demonstra- se a equivalência de representação entre os formalismos de SAN e SGSPN.
Entendese como equivalência de representação entre dois modelos, a verificação de um mesmo comportamento Estocástico na descrição de ambos.
Por exemplo, se dois modelos possuem a mesma cadeia de Markov, pode- se afirmar que estes modelos são equivalentes.
Como sera visto na Seção 6.1, qualquer modelo em SAN que necessite do uso de operadores da GTA possui pelo menos um modelo equivalente que pode ser descrito somente com o uso de operadores da CTA, e vice-versa.
Logo, assume- se neste trabalho que os modelos descritos por o formalismo SAN utilizam o uso de operadores da CTA, de forma que e possível provar a equivalência entre os formalismos de SAN e SGSPN.
Em a Figura 6.1, tern- se urn diagrama ue dernons, ra a equivalência entre os formalismos de SAN e SGSPN.
Primeiramente, demonstra- se na Seção 6.1 a equivalência entre o uso de operadores da GTA e CTA em modelos descritos por o formalismo de SAN.
Com isso, encaminha- se uma base para a prova de equivalência entre os formalismos de SAN e SGSPN, visto que o formalismo de SGSPN não utiliza o conceito de elementos funcionais (operadores da GTA no método de solução).
Em a Seção 6.2, demonstra- se a equivalência dos formalismos de SAN e SGSPN, uma vez que todo modelo em SAN (GTA) possui pelo menos um modelo equivalente em SAN (CTA).
Por último, na Seção 6.3, apresenta- se a equivalência entre os formalismos de SAN e SGSPN, utilizando como base o formalismo de CTMC.
Em se tratando da descrição do gerador infinitesimal o uso dos operadores da GTA é a principal diferença entre os formalismos de SAN e SGSPN.
Entretanto, o objetivo principal desta seção é provar que qualquer modelo em SAN que necessite do uso de operadores da GTA possui pelo menos um modelo equivalente que pode ser descrito somente com o uso de operadores da CTA, e vice-versa.
Qualquer modelo em SAN com taxas funcionais pode ser representado por um modelo em SAN somente com o uso de taxas constantesl.
Basicamente, a idéia para a prova de equivalência entre os modelos em SAN com e sem funções e baseada na substituição das funções por eventos sincronizantes.
Em a realidade, cada evento com uma taxa funcional (ou probabilidade funcional) pode ser substituído por tantos eventos sincronizantes quanto forem os possíveis valores avaliados para a função do mesmo.
Tal substituição por os eventos sincronizantes deve sincronizar (geralmente com loop transitionsz) todos os autômatos que a função possui dependência.
Prova 1 Todo evento que possui um elemento funcional associado a sua taxa de ocorrência pode ser representado através do uso de eventos sincronizantes, i.
e: Todo evento que possui um elemento_ funcional associado a sua probabilidade pode ser representado atraves do uso de eventos sincronizantes, i.
e: 10s operadores da GTA no gerador infinitesimal -- equação (3.2) -- são usados para representar as taxas (ou probabilidades) funcionais.
Eventos sincronizantes, outra forma de representar interação entre os autômatos, incluem novos termos no gerador infinitesimal, porém à medida que não há elementos funcionais, eles podem ser representados por produtos tensoriais clássicos.
Prova 2 Toda taxa de ocorrência de um evento pode ser vista como um elemento_ funcional de valor constante, i.
e: Toda probabilidade de nm evento pode ser vista como nm elemento funcional de valor constante, ie, que necessite do uso de operadores da GTA possui pelo menos um modelo equivalente que pode ser descrito somente com o nso de operadores da CTA, e vice-versa.
Visto que todo modelo ein SAN (GTA) possui pelo menos um modelo equivalente ein SAN (CTA) (Teorema 1), e possível provar a equivalência entre os formalismos de SAN e SGSPN.
Sendo assim, todo modelo em SAN pode ser visto como um modelo em SAN (CTA), possibilitando a prova da equivalência entre os formalisinos.
A definição original de uma SSM encontra- se no Apêndice B, a qual foi proposta por Donatelli.
PROOF=1  Um modelo em SAN possui N autômatos A (m), onde i E.
Cada autômato A (i) possui uma máquina de estados estocastica correspondente SSMM tal que:
Cada SSMW pode ser' uista como um componente QSPNW, o qual possui somente transições tenrporizadas.
O modelo correspondente em SGSPN é composto por todos os componentes GSPNW (z e).
A PROOF 2 Um modelo em SGSPN possui N componentes ÇSPA/, onde i E.
Cada componente QSPNM possui um TRQM.
Cada TRQW possui um autômato estocdstico correspondente.
A (m) tal que:
Tal que NIS) corresponde_ a M», Alla) corresponde a yli), t E TTw, O'E?
Fila possui pelo menos um modelo equivalente descrito por o formalismo de SGSPN, e vice-versa.
Por intermédio do formalismo de CTMC, desejava- se provar que os formalisnios de SAN e SGSPN são equivalentes.
Para isso, primeiramente, demonstra- se a equivalência entre os formalismos de SAN e CTMC.
Posteriormente, demonstra- se a equivalência entre SGSPN e CTMC.
Com base nisso, pode- se afirmar que os formalismos de SAN e SGSPN são equivalentes, visto que partindo de um modelo em SAN, usando o formalismo de CTMC, é possível transformas- lo num modelo em SGSPN, e vice-versa.
Prova 4 Todo estado global do modelo em SAN corresponde a um estado do modelo em CTMC, assim como toda transição global do modelo em SAN corresponde a uma transição do modelo em CTMC, i.
e: Í corresponde a z tal que z E M; (
e, 7') corresponde a T (z, w) tal que z, w E M, z corresponde a ã:
E w corresponde a 1], Proposição 6 (CTMC à SAN) Todo modelo descrito por o formalismo de CTMC possui um modelo correspondente descrito por o formalismo de SAN.
Prova 5 Todo estado do modelo em CTMC corresponde a um estado do autômato do modelo em SAN, assim como toda transição do modelo em CTMC corresponde a um evento do modelo em SAN.
O modelo correspondente em SAN possui apenas um autômato.
A (m), o qual contém somente eventos locais, i.
e: T (z, w) corresponde a (6,7) tal que QUNxUÂg/ (ll) D (e, 1), onde ocuXg/ «l E Sm, x0) corresponde a z e vo) corresponde a w.
Prova 6 Diretamente por a Proposição 5 e Proposição 6.
Ú um modelo correspondente descrito por o formalismo de CTMC.
Prova 7 Um modelo em SGSPN pode ser visto como um modelo em GSPN.
Este modelo em GSPN possui um TRG equivalente, onde todo nodo do TRG corresponde a um estado do modelo em CTMC, assim como todo arco do TRG corresponde a uma transição do modelo em CTMC, i.
e: M corresponde a z tal que z E M;
A corresponde a T (z, w), se e somente se existe tal que Afk corresponde a z, JW¡ corresponde a w, t E TT e a E um modelo correspondente descrito por o formalismo de SGSPN.
Prova 8 Todo estado do modelo em CTMC Corresponde a um estado do componente do modelo em SGSPN, assim como toda transição do modelo em CTMC corresponde a uma transição do componente do modelo em SGSPN, O modelo correspondente em SGSPN possui apenas um Componente (JSP/ VU) (N:
1), o qual Contém somente transições locais, i.
e: somente um token (marcação inicial) em qualquer lugar pm e 73m, Ci SGSPN possui pelo menos um modelo equivalente que pode ser descrito por o formalismo de CTMC, e vice-persa.
Prova 9 Diretamente por a Proposição 7 e Proposição 8.
Ci Comparação dos formalismos Em este capítulo, demonstra- se o custo computacional envolvido no método de solução dos formalismos de SAN e SGSPX.
Posteriormente, apresenta- se alguns exemplos a fim de comparar as características de modelagem de ambos os formalismos, juntamente com o custo envolvido nos exemplos apresentados.
SAN e SGSPN são formalismos estruturados baseados em representações de Kronecker.
A (m) bos os formalismos possuem uma representação tensorial do gerador infinitesimal representada por um Descritor Morkouiano.
Segundo Fernandes, Plateau e Stewart, o custo computacional (número de multiplicações) para se avaliar a multiplicação do vetor de probabilidade por um produto ou soma tensorial de N matrizesl e dada por a equação:
Onde n, e a ordem da i-ésinta, matriz.
Esta equação e valida se todas as matrizes forem plenas.
Onde n 21- representa o número de elementos não nulos da r--éssrma matriz.
A seguir, demonstra- se o custo computacional envolvido no metodo de solução dos formalisinos de SAN e SGSPN.
A partir de a equação (7.2), e possível calcular o custo computacional do Descritor'Mar/ com!
Um modelo em SAN possui N autômatos A (m), onde i E.
Observando a equação tem- se uma soma tensorial referente a parte local e 2| 85 l produtos tensoriais referentes aos eventos sincronizantes para os N autômatos do modelo.
Logo, o custo computacional do Descritor Mar/ enviam), descrito na equação (3.1), de um modelo em SAN e dado por a equação:
Representa o número de elementos não nulos do k--ésimo tensor avaliado, como segue:
Como a ordem da matriz n, e igual para todos lc termos, pode- se fatorar a equação (7.3) em:
Tem- se a equação que representa o custo computacional para a resolução do Descritor Markzwiano de um modelo em SAN.
Os tensores necessários para a construção do Descritor'Markomarzo de um modelo em SGSPN são obtidos atraves de Autômatos Estocásticos.
Os componentes GSPN interagem entre si atraves de transições de sincronização, do mesmo modo que os autômatos A (m) interagem- se atraves de eventos sincronizantes.
Logo, todo componente GSPN possui um TRG, o qual e visto como um autômato &quot;A», bem como a ocorrência das transições de sincronização equivalem aos eventos sincronizantes.
Sendo assim, como demonstrado na Seção 5.3, o Descritor Markomlano de um modelo em SGSPN e equivalente ao Descritor'Markommzo de um modelo em SAN.
Por conseguinte, o custo computacional envolvido no metodo de solução de um modelo em SGSPN com N componentes GSPN e transições de sincronização é:
L (k) onde n, e o número de marcações atingíveis no componente ÇSPA/ (il e nzi é o número de elementos não nulos do k--ésimo tensor da i-ésima matriz.
Ainda que as equações do custo computacional de ambos os formalismos sejam iguais, é importante salientar que o número de eventos sineronizantes num modelo em SAN não e necessariamente igual ao número de transições de sincronização do modelo equivalente em SGSPN.
Em a próxima seção, apresenta- se alguns exemplos a fim de comparar as características de modelagem de ambos os formalismos, bem como o custo computacional dos mesmos.
Em o exemplo da Seção 7.2.3, ilustra- se claramente a diferença, descrita anteriormente, do custo computacional de um sistema modelado em SAN e SGSPN.
Apresenta- se nesta seção três exemplos de modelagem.
O primeiro exemplo apresenta um modelo em SAN de uma Rede de Filas de Espera aberta com Perda e Bloqueio, seguido do modelo equivalente em SGSPN.
O segundo exemplo, modelado em SAN (com e sem o uso de operadores da GTA) e SGSPN, descreve um sistema de Compartilhamento de Recursos.
E, por último, tem- se um exemplo que descreve uma Fila com Padrão de Serviço Alternado modelada em SAN (CTA e GTA) e SGSPN.
A Figura 7.1 e um exemplo de uma Rede de Filas de Espera aberta com três filas e somente uma classe de clientes.
Este modelo possui uma fila com comportamento de bloqueio e outra fila com comportamento de perda.
As capacidades das filas são respectivamente 3, 3 e 2 clientes.
Aü) representam o número de clientes na fila i.
Em a Tabela 7.1, encontram- se as taxas dos eventos utilizados na Figura 7.2.
A chegada de clientes na fila 1 e a saída de clientes da fila 2 e 3 são representadas por eventos locais 117 mg e m3 respectivamente.
Os eventos sincronizantes eu e e13, respectivamente, representam a rotação de clientes da fila 1 para a fila 2 e da fila 1 para afila 3.
O eve11 t0 local m2 possui uma taxa funcional definida por a função fm?,
a qual e dependente do número de clientes do autômato.
A (m), visto que a fila 2 possui dois servidores.
O símbolo C2 representa o número de servidores da fila 2.
A ocorrência do evento sincronizante 61g força simultaneamente a mudança do autômato.
A (m) e Aa).
Este evento não pode ocorrer quando o autômato Ai) está no estado local 3 a) (fila 2 está cheia).
Por conseguinte, isto corresponde ao comportamento de bloqueio da saída de Clientes da fila 1 para a fila 2.
A transição loop do último estado) do autômato A6) (evento 613) permite a saída de clientes da fila 1 sem uma chegada de clientes na fila 3, i.
e, o comportamento de perda de clientes da rotação de clientes da fila 1 para a fila 3 (fila 3 esta cheia).
O modelo em SAN para este exemplo não requer o uso da GTA, visto que a função fm2 depende somente dos estados do autômato onde ela aparece.
A Figura 7.3 apresenta um modelo equivalente em SGSPN ao modelo em SAN da Figura Cada fila i é representada por um componente QSPA/, o qual possui um par de lugares Q¡ e Ai.
O lugar A, representa os clientes disponíveis (capacidade Ki) da fila 71, e o lugar Q, representa os clientes que se encontram na fila i.
Como este modelo é equivalente ao modelo em SAN, as capacidades de K1, Kg e K3 são, respectivamente iguais a 3, 3 e 2.
A transição local 11 representa a chegada de clientes na fila 1.
A transição local mgm e mgm indicam a partida de clientes da fila 2 (fila com dois servidores).
A partida de clientes da fila 3 e representada por a transição local m3.
Note que as transições locais mgm e mgm possuem, respectivamente, os controladores ggm e ggm associados ãs mesmas.
A condição de cada controlador determina se a transição podera ocorrer ou não, i.
e, se a condição do controlador for falsa, a respectiva transição não ocorrerá quando a mesma se encontrar habilitada.
Com isso, é possível determinar a ocorrência exclusiva das transições mgw e mgaw possibilitando a ponderação da taxa de acordo com o número de servidores da fila.
A transição de sincronização t1;
indica a rotação de clientes da fila 1 para a fila 2.
Analogamente, a transição de sincronização t13 representa a rotação de clientes da fila 1 para a fila 3.
A transição tl13 representa o comportamento de perda da rotação de clientes da fila 1 para a fila 37 enquanto o comportamento de bloqueio da fila 2 e expresso diretamente por o limite de tokens (K2) do lugar A2.
A transição tl13 também possui um controlador associado à mesma, que determina a ocorrência da mesma quando a fila 3 estiver cheia.
Este exemplo possui um mesmo custo computacional para ambos os modelos descritos por os formalismos de SAN e SGSPN, independentemente do tamanho determinado para as filas.
A Figura 7.4 mostra um modelo em SAN de um sistema de Contpartilhantevzto de Recursos.
Em este modelo, há N processos compartilhando R recursos.
Cada processo é representado por um autômato A (m), o qual contem dois estados:
Sm (processo ocioso) e U (i) (processo utilizando recurso).
A função fu¡ e definida para controlar o número de processos que estão utilizando os recursos.
Cada evento local eai possui sua respectiva taxa multiplicada por uma função fa;
A fim de controlar o número de recursos disponíveis.
Portanto, os eventos locais cai somente ocorrem quando houver recursos disponíveis (nb U R).
Em a Tabela 7.3, encontram- se as taxas dos eventos utilizados na Figura 7.4.
Como demonstrado no Capítulo 6, um modelo em SAN pode ser representado com ou sem o uso de elementos funcionais.
Em a Figura 7.5, tem- se o modelo equivalente em SAN ao modelo descrito na Figura 7.4, utilizando somente eventos sincronizantes.
Em este modelo, o repositório de recursos é representado por o autômato.
AW+ 1) e este contem R+ 1 estados, os quais representam a quantidade de recursos que se encontram em uso.
Os eventos eai e en são eventos sincronizantes entre os processos e o repositório de recursos).
As transições te a¡ e tn são transições de sincronização entre cada processo e o repositório de recursos).
As taxas das transições de sincronização ta, e tn são, respectivamente, as mesmas utilizadas por os eventos sincronizantes ea¡ e en da Figura 7.5 descritas na Tabela 7.4.
O custo computacional do rnodelo em SAN (GTA) (uso de elementos funcionais) e considerado muito inferior ao custo dos modelos em SAN (CTA) e SGSPN (Tabela 7.5).
Os modelos em SAN (CTA) e SGSPN possuem o mesmo custo computacional, visto que o modelo em SAN (CTA) possui o mesmo número de autômatos e eventos sincronizantes comparado corn o número de componentes GSPN e transições de sincronização do modelo em SGSPN.
Como demonstrado anteriormente, o formalismo de SAN permite o uso de elementos funcionais, possibilitando a construção de um modelo equivalente ao da Figura 7.5, onde não seja necessario o uso de eventos sincronizantes.
Sendo assim, o custo computacional do modelo descrito na Figura 7.4 é dado por a equação, visto que todas as matrizes envolvidas no método de solução são plenas.
Logo, como o rnodelo em SAN (GTA) utiliza somente eventos locais, além de possuir urn Custo computacional menor, o mesmo pernmnece constante a medida que o 71/ IÍ7TLHTD de recursos aumenta.
Dada uma fila de tamanho K e taxa de chegada constante. A taxa de atendimento desta fila varia de acordo com a taxa do respectivo serviço.
Considera- se que esta fila ora é atendida por o serviço S1, ora e atendida por o serviço S2.
A fila pode trocar de serviço somente quando ocorrer um atendimento, i.
e, não há alternância de serviço quando a fila estiver vazia.
Quando o serviço S1 prestar um atendimento, ele pode permanecer atendendo ou alternar para o serviço S2.
O mesmo vale para o serviço S2.
Quando este prestar um atendimento, ele pode permane cer' atendendo ou alternar para o serviço S1.
Esta fila é denominada como Fila com Padrão de Serviço Altemado (FPSA).
A Figura 7.7 apresenta um modelo em SGSPN de uma FPSA.
O componente QSPNO) representa a fila en1 si, enquanto o componente@ Spa/ m representa o conjunto de possíveis serviços.
As taxas das transições utilizadas na Figura 7.7 encontram- se na Tabela 7.6.
O número de tokerzs K no lugar Ra significa a capacidade maxima da fila.
Assim como, o número de tokens no lugar RU representa a quantidade de clientes na mesma.
A transição t1 representa a chegada de clientes na fila.
Os lugares S1 e S2 indicam qual o serviço que esta atendendo a fila.
A transição t2 (t4) representa o atendimento de um cliente na fila e a permanência do atendimento do serviço S1 (S2), enquanto a transição t3 (t5) indica o atendimento de um cliente na fila e a troca para o serviço S;
A Figura 7.8 representa o modelo equivalente em SAN a uma FPSA.
O autômato AU) representa a fila eni si, enquanto o autômato.
A (m) representa o conjunto de possíveis serviços da mesma.
As taxas dos eventos utilizados na Figura 7.8 encontram- se na Tabela 7.7.
O evento local 61 indica a chegada de clientes na fila.
O evento sincronizante cg representa a saída de clientes da fila, enquanto o evento sincronizante E3 também representa a saída de clientes da fila (serviço S2).
Estes eventos sincronizam a fila (autômato A (m)) corn o conjunto de possíveis serviços (autômato A (m)).
Como pode ser observado no modelo, um cliente pode ser atendido corn probabilidade 71-1 ou corn probabilidade Trg, onde 7r1+ 713:
Além disso, um cliente também pode ser atendido com probabilidade 7r3 (permanência do serviço S2) ou corn probabilidade 71-4 (alternância do serviço S2 para S1), onde 7T3+ 7T4:
Também e possível construir urn modelo equivalente ao modelo da Figura 7.8, utilizando elementos funcionais.
O modelo em SAN descrito na Figura 7.9 é equivalente a uma FPSA que utiliza elementos funcionais.
As taxas dos eventos utilizados na Figura 7.9 encontram- se na Tabela 7.8.
Note que agora não são mais necessários dois eventos sincronizantes e;
E a3 para o controle do serviço em questão no autôniato AQ).
Apenas o evento sincronizante 62 é utilizado com o uso de elementos funcionais.
O evento E2 possui uma taxa funcional definida por a função f, a qual determina a taxa do serviço em questão, visto que a fila ora é atendida por o serviço S1, ora por o serviço S2.
Em a Figura 7.10, tem- se um gráfico que apresenta uma comparação do custo computacional de uma FPSA modelada em SAN (CTA e GTA) e SGSPN.
O número de matrizes envolvirlas no método de solução dos modelos em SAN (CTA e GTA) e significativamente menor do que as envolvidas no modelo em SGSPN, mesmo que ambos os modelos SAN (CTA e GTA) e SGSPN tenham a nlesma representação estocástica.
Em um modelo em SAN, un1 evento sincronizante pode possuir varias probabilidades para interagir os autômatos.
Entretanto, no modelo equivalente em SGSPN, o mesmo fenômeno e modelado por tantas transições de sincronização quanto o número de probabilidades associadas ao evento sincronizante de un1 estado para outro no modelo em SAN.
O modelo em SAN (CTA) possui dois eventos sineronizantes 62 e a3, onde cada evento possui duas probabilidades, ie, cada evento sincronizante equivale a duas transições de sincronização do n1odelo em SGSPN.
Posteriormente, o mesmo exemplo foi n1odelado utilizando apenas um evento sincronizante eg, o qual possui uma taxa funcional para cada serviço, definida por a função f.
Corn isso, ao invés de duas transições de sincronização, este evento sincronizante torna- se equivalente as quatro transições de sincronização no modelo em SGSPN, devido a quantidade de probabilidades que o mesmo possui associada a ele.
Note que o custo computacional do modelo em SAN (GTA) é menor do que ambos os modelos equivalentes em SAN (CTA) e SGSPN.
Este fato ocorre devido a o uso da taxa funcional associada ao evento sincronizante 62.
Logo, mesmo que ambos os modelos em SAN (CTA e GTA) e SGSPN possuam a mesma representação estocástica, o número de eventos sincronizantes) e menor do que o número de transições de Sincronização.
Conclusão Como apresentado no Capítulo 6, os formalismos de SAN e SGSPN possuem equivalência de representação.
Um modelo descrito por o formalismo de SAN pode ser descrito por o formalismo de SGSPN, e vice-versa.
Esta equivalência se apresenta, de certa forma evidente, devido a ambos os formalismos possuírem uma representação equivalente ao formalismo de CTMC.
Sendo assim, é possível através do formalismo de CT MC demonstrar a equivalência de representação dos formalismos de SAN e SGSPN.
Entretanto, e evidente que o custo computacional dos n10delos obtidos desta forma e catastrófico, porque se passaria por um custo de memoria da mesma ordem que do formalismo de CTMC, sem necessariamente beneficiar- se da redução de tempo em comparação aquela dos modelos estruturados.
A legibilidade e facilidade de descrição de um sistema por o formalismo de SAN ou SGSPN é pessoal e extremamente dependente do sistema a ser modelado.
Em o exemplo de Redes de Filas de Espera, e possível observar de forma direta a relação de interação entre as filas no modelo em SGSPN (transições de sincronização).
Em contra partida, no modelo em SAN, esta interação ocorre por meio de eventos sincronizantes, os quais não possuem ligação visualmente direta entre eles (a não ser por possuírem o mesmo rótulo), i.
e, não ha nenhum arco ligando os autômatos de forma que fique explícito a rotação de clientes de uma fila para outra.
Entretanto, modelos que possuem muitas interações semelhantes entre seus componentes, podem ser facilmente rnodelados por o formalismo de SAN, visto que tal formalismo permite o uso de elementos funcionais de forma a garantir uma melhor legibilidade do modelo, e.
g, Compartilhamento de Recursos.
Apesar de a facilidade de nlanuterlçãol dos modelos descritos por o formalismo de SGSPN com 1 Entende- se por facilidade de manutenção a simplicidade com que se pode alterar as primitivas de modelagem do formalismo.
Padrão de Serviço Alternado, para aumentar a capacidade da fila, bastaria aumentar o número K de tokens no lugar Ra.
Entretanto, nos modelos em SAN, isso refletiria num aumento no número de estados no autômato &quot;A «e, conseqüentemente, um acerto nos eventos locais e sincronizantes do mesmo.
Porém, como foi previamente apresentado na Seção 7.2.3, os custos computacionais dos modelos em SAN são inferiores ao custo computacional do modelo equivalente em SGSPN.
O conceito de elementos funcionais nos modelos em SAN possuem vantagens em relação a o modelo equivalente em SGSPN (FPSA).
Basicamente, um modelo em SAN permite usar um número menor de primitivas de sincronização?
Logo, e possível dizer que o uso de elementos funcionais (número reduzido de primitivas de sincronização) para alguns modelos em SAN pode permitir significativamente um menor custo computacional do que o modelo equivalente em SGSPN.
Como verificado nos exemplos de modelagem apresentados, um modelo obtido atraves da tecnica de conversão não e necessariamente um modelo eficiente.
A tecnica de conversão entre os formalismos se da no nivel de SSM, e não diretamente por o formalismo de CTMC.
Sendo assim, a conversão entre os modelos se encontra num nível mais próximo (estruturado) aos utilizados por os formalismos de SAN e SGSPN.
Isto por si só sugere um ganho em relação a equivalência atraves do formalismo de CTMC, mesmo que este não tenha sido verificado formalmente.
Em este sentido, como trabalho futuro, e importante desenvolver um algoritmo eficaz (não necessariamente eficiente) para a técnica de conversão, tendo em vista que modelos equivalentes preservem os ganhos computacionais obtidos através das primitivas de modelagem do formalismo.
Ressalta- se ainda a necessidade do desenvolvimento de um conversor automatico de modelos entre ambos os formalismos.
Entretanto, numa conversão automatica, cabe salientar que poderá haver um impacto significativo na solução numérica do modelo.
Modelos obtidos diretamente atraves de uma conversão automatica geralmente não são tão compactos ou legiveis quanto aqueles modelados por um desenvolvedor experiente.
Os modelos descritos em SGSPN possuem como característica marcante a verificação de modelos (model checking), enquanto que modelos em SAN possuem uma solução numérica bem mais eficiente.
Outro ponto importante a se ressaltar, e a generalização do conceito de guards a fim de que os mesmos possam possuir condições (associadas ao disparo das transições) avaliadas para outros componentes GSPN.
Esta generalização se da de forma natural, visto que o formato tensorial apresentado para o formalismo SGSPN utiliza operadores da GTA (soma e produto tensorial generalizados).
Com isso, é possível se construir modelos descritos por o formalismo de SGSPN, os quais possuam componentes GSPN desconezos (redes disjuntas), obtendo- se um espaço de estados produto reduzido e, conseqüentemente, um custo computacional muito menor.
O cálculo do custo computacional e baseado na solução do algoritmo Shujjfleil, porém e natural imaginar- se o impacto que o custo computacional sofreria se aplicado a outros métodos de solução como Multi-Valued Decision Diagrams (MDD) ou Decomposição Aditivo em?
Eventos sincronizantes (SAN) e transições de sincronização (SGSPN).
Fatores Normais Parciais (Slice).
O uso de MDD é amplamente aplicado ao formalismo de GSPN.
Por conseguinte, é passível se imaginar o uso do mesmo ao formalismo de SAN, bem como a geração automatica do formato tensorial para o formalismo de GSPN.
Outros formalismos de modelagem como PEPANETs, Gramática de Grafos Baseados em Objetos (GGBO) e 1/0 Automata poderiam se beneficiar dos ganhos alcançados atraves do uso de operadores da GTA no formalismo de SAN.
Um outro campo de trabalhos futuros seria o estudo destes formalismos a fim de obter- se a equivalência de representação dos mesmos com o formalismo de SAN, bem com a construção de um formato tensorial eficiente para estes formalismos e a definição de algoritmos eficazes de conversão.
Por fim, pode- se concluir dizendo que o uso de funções, e conseqüentemente o uso da GTA7 não e realmente uma &quot;necessidade», visto que ha uma equivalência de representação entre os formalismos de SAN e SGSPN.
Entretanto, em alguns casos, o uso de funções apresenta, em relação a o custo computacional, algumas &quot;Vantagens «incontestaveis.
Cabe salientar que esta conclusão e um resultado extremamente original e que se insere de entre as pesquisas de ponta na area de formalismos estruturados.
