A demanda por poder computacional é cada vez maior, e conseqüentemente leva ao desenvolvimento de equipamentos com capacidades de processamento cada vez maiores para suprir- la.
Hoje em dia temos acesso a computadores com poder computacional cada vez maior, porém em sua grande maioria, esse poder computacional é apenas parcialmente utilizado, causando uma ociosidade dos recursos disponíveis, o que pode acarretar aumento de custos.
A o analisarmos a situação do aumento do poder computacional, a idéia de ociosidade de processamento da maioria dos computadores e em contrapartida, a possibilidade de uma melhor utilização de recursos, podemos explicar a renovação de tecnologias que podem vir a suprir essas necessidades.
Entre várias destas tecnologias podemos citar clusters e grades computacionais, e entre outras, uma das tecnologias em ascensão são as máquinas virtuais.
Uma máquina virtual consiste num software que cria um ambiente sobre um sistema operacional, possibilitando uma execução abstraída do hardware de vários outros sistemas, sendo transparente para o usuário essa interação.
De entre vários ambientes que suportam o uso de máquinas virtuais, utilizamos o Xen que proporciona a portabilidade de sistemas operacionais sobre um sistema operacional Linux e permite compartilhar uma simples máquina para vários clientes rodando sistemas operacionais distintos.
O Xen pode utilizar um de três escalonadores, onde o SMP Credit Scheduler é o escalonador padrão, recomendado para máquinas multiprocessadas por permitir balanceamento de processadores virtuais entre os processadores reais.
Porém, o SMP Credit Scheduler ainda tem algumas limitações referentes a uma utilização melhor dos recursos da máquina.
Com o objetivo de superar algumas dessas limitações, este trabalho apresenta a proposta e implementação de um subsistema que altera dinamicamente configurações do escalonador SMP Credit, realocando recursos destinados a máquinas virtuais que não estejam utilizando todo o processamento disponível, direcionado- as às máquinas virtuais que necessitem desse processamento.
Por fim, apresentamos uma avaliação do uso desse subsistema frente a o escalonador SMP Credit em diversas configurações possíveis.
Palavras-chave: Máquinas virtuais, Xen, escalonamento, alocação de recursos.
Virtualização Softwares Mais Usados em Virtualização Xen Limitações no Escalonamento do Xen Subsistema de Alocação Dinâmica de Recursos Taxonomia de Monitoramento de Sistemas.
Metodologia de Monitoramento de Sistemas Service Level Agreement -- SLA Metodologia de Validação e Resultados Ferramentas de Avaliação de Desempenho Utilizadas Conclusão.
ApêndiceA ­ Arquivo XML 1 Introdução Em a década de 60, a IBM introduziu no seu modelo S/ 370 a possibilidade de compartilhar esse computador com a utilização de mais de um sistema operacional ao mesmo tempo, através de uma técnica nova chamada virtualização.
Hoje em dia, com o aumento do poder computacional, a utilização de máquinas virtuais possibilita compatibilidade, desempenho e simplicidade.
Compatibilidade no sentido de poder executar qualquer software em qualquer ambiente computacional;
Desempenho porque a virtualização aproveita ciclos ociosos da máquina;
E simplicidade na manutenção dos sistemas virtualizados.
Outro grande ponto a favor de a virtualização é a redução de custos, pois datacenters têm como objetivo gerenciar servidores e a utilização da virtualização reduz custos de modo que ao máximo os servidores alocando sistemas em máquinas virtuais é chamada consolidação de servidores.
Porém, a virtualização não está restrita à consolidação de servidores pois hoje em dia está presente desde aplicações de pequeno porte, até ambientes de alto desempenho.
Em ambientes de pequeno porte, novas tecnologias tem utilizado a virtualização para criar ambientes portáveis em dispositivos como Thinstall, MojoPac e Moka5, que possibilitam a criação de ambientes virtualizados em dispositivos portáteis como pendrives.
Ainda, ambientes de grande porte também podem ser virtualizados, como é o caso de clusters e grids, o que possibilitam testar aplicações em nodos heterogêneos ou mesmo simular o comportamento de um cluster ou grid em menor escala com determinada aplicação.
Como vemos atualmente, computadores pessoais possuem algumas características, por exemplo mais de um processador, de ambientes de alto desempenho como clusters e grids, que propõem aumento de desempenho através do incremento do número de processadores ou cores.
A virtualização também está presente nesse nicho, pois possibilita virtualização em nível de hardware, através dos processadores Intel Vanderpool e AMD Pacifica que permitem dividir uma mesma máquina física em diversas máquinas virtuais, com a vantagem de não ser necessário modificar a configuração dos sistemas operacionais convidados.
Esta dissertação utiliza como foco principal o monitor de máquinas virtuais Xen, que se difere de outras técnicas de virtualização, uma vez que o Xen não interpreta as instruções passadas ao hardware como faria um emulador, o que acarretaria uma perda no desempenho.
O Xen apenas se encarrega de repassar as instruções ao sistema principal, fornecendo uma transparência ao sistema convidado de estar sendo executado diretamente sobre o hardware.
Embora o Xen ser utilizado em diversas situações, ele ainda apresenta algumas limitações, por exemplo:
Não possibilita limites de porcentagem máxima/ mínima de fatias de processador para máquinas virtuais individuais;
Não possibilita limites de procentagem máxima/ mínima de fatias de memória para máquinas virtuais individuais;
Não permite a utilização de níveis de acordo de serviços sobre máquinas virtuais;
E principalmente não possibilita balanceamento de recursos entre máquinas virtuais.
Visando solucionar a última limitação mencionada acima, essa dissertação apresentará a proposta, implementação e avaliação de um subsistema de alocação dinâmica de recursos, que executará juntamente com o escalonador padrão (Credit Scheduler) do Xen.
A realocação dinâmica de recurso será feita a partir de a análise de uma árvore de decisão gerada por um processo de mineração de dados.
Essa dissertação está organizada da seguinte forma.
O Capítulo 2 apresenta conceitos importantes sobre máquinas virtuais, bem como seus tipos, técnicas e usos;
O Capítulo 3 apresenta o monitor de máquinas virtuais Xen, foco principal deste trabalho, bem como sua gerência do processador, memória e seu comportamento em máquinas SMP (Simmetric Multiprocessor);
O mostrando taxonomia, utilizações e alguns trabalhos relacionados;
O Capítulo 5 apresenta toda a metodologia de validação do subsistema proposto;
O Capítulo 6 traz conclusões do trabalho e aponta para possíveis trabalhos futuros.
A virtualização é uma metodologia que divide os recursos computacionais em múltiplas execuções, criando múltiplas partições, isoladas umas das outras, chamadas máquinas virtuais ou servidores virtuais privados, unidos num único servidor físico.
A utilização da virtualização possibilita um ambiente mais dinâmico e flexível, onde se pode executar cargas de trabalho num número menor de sistemas físicos, facilitando suporte e manutenção.
Isso não significa que o aumento no custo de aquisição de hardware com grande poder de processamento não vai mais existir, pois para suportar sistemas virtualizados robustos é também necessário um hardware com desempenho suficiente para responder a inúmeras requisições.
As máquinas virtuais surgiram na década de 60, no IBM S/ 370, onde a IBM fez um modelo em que cada máquina virtual era uma cópia exata de uma máquina real, porém com uma capacidade de memória reduzida, e com essa noção, um computador poderia ser dividido em várias máquinas virtuais leves, utilizando recursos tanto quanto o original.
Existem vários tipos de máquinas virtuais, com diferentes objetivos e implementações.
As máquinas virtuais são divididas primeiramente entre máquinas virtuais de processos (ABI VMs -- Application Binary Interface Virtual Machines) e máquinas virtuais de sistema (ISA VMs Instruction Set Architecture Virtual Machines).
A diferença entre máquinas virtuais de processos e máquinas virtuais de sistema é a persistência.
Uma máquina virtual de processo é um ambiente que executa um processo individual em particular, e existe apenas para suportar este processo em específico.
Uma ABI permite a um programa acessar os recursos do hardware e os serviços disponíveis através da interface de chamadas do sistema.
Uma ABI não inclui instruções de sistema, portanto toda aplicação interage com os recursos de hardware indiretamente por a invocação de serviços do sistema operacional via interface de chamadas de sistema.
As chamadas de sistema provém uma maneira para o sistema operacional executar operações de interesse dos programas do usuário, validando sua autenticidade e segurança.
Assim como na emulação, onde o caminho mais simples é a interpretação, o maior desafio de máquinas virtuais de processos é o suporte a binários de programas compilados para instruções diferentes daquelas que o host executa.
Para uma melhoria no desempenho podemos nos utilizar de tradução binária dinâmica, que converte instruções do sistema convidado para instruções do host, utilizando blocos de instrução para instrução, salvando em cache para reuso.
Repetidas execuções e instruções traduzidas diminuem a sobrecarga da tradução.
Já uma máquina virtual de sistema provê um completo ambiente que suporta a um sistema operacional com seus vários processos em execução.
Uma ISA marca a divisão entre hardware e software, onde a área de usuário inclui aspectos referentes às aplicações e a área de sistema em gerenciar os recursos do hardware.
Para o usuário, todos os tipos de máquinas virtuais proporcionam essencialmente as mesmas funções, porém elas são diferentes na sua implementação.
Classicamente, os monitores de máquinas virtuais (VMM -- Virtual Machine Monitor) rodam no modo mais privilegiado do sistema operacional, enquanto seus sistemas convidados rodam com privilégios reduzidos, onde o VMM pode interceptar e emular todas as ações dos sistemas convidados que normalmente tenham que acessar ou manipular recursos de hardware.
Em uma visão de alto nível, podemos dividir a virtualização em suas técnicas, como veremos a seguir.
Técnicas de Virtualização A virtualização está sendo utilizada nas mais diversas áreas, e dependendo do hardware ou da necessidade do software que deve ser utilizado, as técnicas de virtualização podem variar.
Portanto, existem similaridades entre as técnicas de virtualização, onde a diferença entre elas está no nível de abstração e nos métodos usados para a virtualização.
As três técnicas de virtualização são:
Emulação, virtualização e paravirtualização.
As três técnicas apresentadas diferem na complexidade da implementação, suporte ao sistema operacional, desempenho e nível de acesso aos recursos comuns.
Em esta técnica (virtualização do hardware) é emulado um hardware real ou fictício, requerendo os recursos reais quando necessários, da máquina que roda a máquina virtual.
Normalmente num emulador de sistemas é permitido rodar um sistema operacional sem a necessidade de modificações por que o sistema operacional não está ciente que não está rodando num hardware real.
As instruções privilegiadas requeridas à CPU (Central Processor Unit) não podem ser executadas por o usuário, sendo requeridas ao monitor da máquina virtual, que analisará a execução do código e o fará em modo protegido.
A emulação de hardware é utilizada por o VMWare.
Podemos notar na Figura 1 que o emulador abstrai das aplicações o hardware real, provendo uma camada virtual que simula o hardware necessário para as aplicações.
Vemos que, tanto a camada de emulação quanto a camada de hardware virtual fazem parte de uma mesma camada, apenas separadas por as suas características, porém ambas rodando sobre o sistema operacional e, proporcionando uma camada base às aplicações.
A virtualização é feita em nível de sistema operacional o que proporciona uma maior segurança de acesso entre máquinas virtuais.
A maioria das aplicações rodam num servidor e poderiam facilmente ser compartilhadas com outras máquinas, desde que existisse segurança.
Em muitas situações, sistemas operacionais diferentes não são necessários no mesmo servidor, meramente múltiplas instâncias de um único sistema operacional.
Os sistemas operacionais de virtualização devem prover isolamento das requisições e segurança para rodar múltiplas aplicações ou cópias do mesmo sistema operacional, no mesmo servidor.
O OpenVZ é um exemplo de sistema de virtualização.
Em a Figura 2, vemos que embora a virtualização também seja uma camada de abstração como a emulação, ela roda juntamente com o sistema operacional, e repassa instruções para o hardware real.
Acima de essa camada rodam as máquinas virtuais que suportam os sistemas operacionais convidados independentes um do outro, que por sua vez suportam aplicações também independentes.
A paravirtualização é uma técnica que também necessita de uma máquina virtual, porém a maior parte da carga de trabalho é executada no código do sistema operacional convidado, que é modificado para suportar a máquina virtual, controlando assim o uso de instruções privilegiadas.
A paravirtualização também permite rodar diferentes sistemas operacionais num único servidor e temos como exemplo o Xen e User- Mode Linux.
Em a paravirtualização, a camada que da suporte à virtualização (camada de paravirtualização) é o próprio sistema operacional modificado para esse fim, e como vemos na Figura 3, o hypervisor é a camada de monitoria que roda em conjunto à camada de paravirtualização, fazendo interface da comunicação entre as máquinas virtuais e o hardware.
A paravirtualização não simula um novo hardware para as aplicações, porém através de modificações no kernel possibilita que as chamadas de sistema que se relacionam com o hardware sejam controladas por o hypervisor.
Em a técnica de virtualização existe uma camada que controla a comunicação entre as máquinas virtuais e o sistema operacional, enquanto na paravirtualização, essa camada de virtualização é o próprio sistema operacional modificado para hospedar máquinas virtuais.
Softwares Mais Usados em Virtualização Com o crescimento da área de virtualização, cada vez mais surgem ferramentas que fornecem à sua maneira ambientes virtualizados para as mais diversas aplicações e sistemas.
De entre elas, existem soluções livres ou proprietárias, que concorrem por o mercado de consolidação de servidores das grandes empresas que estão cada vez mais se utilizando dessa tecnologia.
Para suprir essa necessidade, estão surgindo novos sistemas que dão suporte a utilização de máquinas virtuais, que lutam por uma fatia do mercado empresarial de tecnologia da informação.
Em esta seção podemos acompanhar os sistemas virtualizadores atualmente mais utilizados por o mercado.
O VMWare permite a emulação de vários sistemas operacionais ao mesmo tempo sobre um sistema virtualizado onde cada máquina virtual funciona como um computador inteiro, contendo processador, memória, disco, vídeo, som, unidades de disquete e cd-rom.
Um ponto muito interessante sobre a uilização do VMWare é a possibilidade de ligação entre o sistema host e todas as máquinas virtuais como se estivessem numa rede tradicional, estando cada qual com seu endereço IP.
O VMWare é um software que cria máquinas virtuais que virtualizam um computador pessoal completo, proporcionando a utilização de sistemas operacionais para a plataforma x86.
O User- Mode Linux é uma implementação do kernel do Linux onde a arquitetura suportada é outro kernel do Linux.
Normalmente, os programas aplicativos fazem suas requisições ao kernel, que por sua vez aciona os recursos de hardware da máquina conforme solicitado (sem esquecer que este kernel sempre é específico para a arquitetura do computador em questão).
Mas no caso de o UML, os programas do usuário fazem requisições ao kernel e, embora eles não suspeitem disso, este kernel vai passar todas as requisições para o kernel da máquina hospedeira, e este sim vai fazer a comunicação com o hardware.
A FAUmachine funciona como um processo normal do usuário (nenhum módulo dos privilégios ou do kernel são necessários) no sistema operacional Linux.
Em a configuração tradicional, é usado um bootloader adaptado e um kernel ligeiramente modificado do Linux.
A camada de abstração do hardware da máquina virtual FAUmachine é (na maior parte) o kernel Linux do sistema anfitrião.
Os dispositivos de leitura do hardware que a FAUmachine utiliza, inclui tamanho de memória principal, o cd-rom e o número e o tamanho dos discos rígidos que podem ser configurados.
A máquina virtual do FAUmachine é usada como plataforma no projeto europeu DBench (Dependable benchmarking), que desenvolve benchmarks para verificar a confiabilidade de sis-temas operacionais.
A arquitetura do OpenVZ é diferente da arquitetura virtual tradicional das máquinas virtuais porque funciona sempre no mesmo kernel do sistema operacional anfitrião.
Esta tecnologia permite execução num único kernel, permitindo que usuários virtuais rodem suas aplicações com perda de desempenho pouco significativas.
De o ponto de vista das aplicações que rodam no OpenVZ, cada sistema virtual é um sistema independente.
Esta independência é fornecida por uma camada do virtualização no kernel do sistema operacional anfitrião e onde somente uma parte insignificante dos recursos do processador central está utilizando esta virtualização.
Todo o sistema virtual comporta- se como um sistema Linux.
Tem inicialização padrão;
Vários softwares podem funcionar dentro de um sistema virtual sem modificações especificas do OpenVZ ou ajustes;
Um usuário pode mudar toda a sua configuração e instalar algum software adicional;
Os ambientes virtuais dos usuários são isolados completamente (sistema de arquivos, processos, IPC, sysctl, etc).
Com o crescente interesse na área de virtualização, a Microsoft lançou em 2 de dezembro de 2003 o Virtual PC, que permite rodar diversos sistemas operacionais simultaneamente.
O Virtual PC foi projetado para fazer uso das vantagens da tecnologia nova de Intel chamada Intel Virtualization, assim aumentando o desempenho do sistema convidado.
A Microsoft possui dois produtos de virtualização hoje no mercado, que são o Virtual PC para sistema operacional cliente (Windows XP), e o Virtual Server 2005, e sua instalação pode ser realizada apenas em sistemas operacionais servidores como.
O Plex86 tem as mesmas características do Vmware, mas suporta apenas Linux como anfitrião e como hóspede.
Isso torna a virtualização em arquitetura IBM-PC bem mais fácil, pois o Linux possibilita uma ótima plataforma de comunicaçãp com o hardware (e o código-fonte aberto permite a monitoração do acesso ao hardware).
O kernel Linux do hóspede precisa ser recompilado para ser virtualizável.
Em a verdade, em sua forma atual, ele se parece mais com o User- Mode Linux, que já está mais maduro e é mais bem suportado por a comunidade.
O Bochs é um emulador de computadores pessoais x86 bastante completo, open source, Porém, o Bochs ainda não consegue ser viável para os usuários que precisem de uma solução para o software legado da plataforma Windows.
Infelizmente, para estes usuários, ainda é necessário recorrer a softwares proprietários.
Contudo, com a evolução constante na velocidade dos processadores, talvez este rendimento baixo acabe não sendo tão significativo futuramente, além de o que o projeto continua em plena atividade, podendo surgir melhorias no código em termos de desempenho.
Apesar de a filosofia ser basicamente a mesma do Bochs, o QEmu consegue um desempenho melhor através de um processo de compilação das instruções da CPU emulada, transformandoas num formato intermediário de interpretação rápida.
A compilação é lenta, mas o resultado é armazenado em cache, o que dilui o custo de compilação se o mesmo código é executado várias vezes, e o sistema emulado roda bastante rápido (depende muito do aplicativo).
Outra grande vantagem do QEmu é estar preparado para emular vários processadores e arquiteturas.
Um certo número de sistemas-base é suportado, com graus variáveis de maturidade (Linux é bem suportado, Mac Os X está em versão beta).
O QEmu tem um modo rápido, que faz uso da MMU (Memory Management Unit) do processador nativo para fazer as tarefas de gerenciamento de memória da emulação.
Isto exige a instalação de um módulo no kernel do sistema anfitrião, o que é geralmente indesejável.
Além de o modo &quot;rápido», o QEmu tem um modo user-level, apenas para Linux.
Em este modo, a emulação é feita no contexto de um executável Linux.
Apenas a CPU e a memória virtual são emuladas, não o hardware.
Este modo permite rodar, digamos, um executável Linux/ Intel num Linux/ PowerPC.
Parallels Desktop O Parallels Desktop foi desenvolvido por a Apple para prover ambientes virtualizados tendo como hospedeiro o sistema operacional Mac Os X, com compatibilitade total na versão Leopard.
Isto proporciona execução de Windows e Linux, e utilizando a técnica de emulação, onde cada máquina virtual tem emulado o seu próprio hardware.
Como a emulação repassa um hardware genérico para todas as máquinas virtuais de um computador, o Parallels Desktop proporciona portar uma máquina virtual de um computador para outro, sem necessidar de nenhuma modificação no sistema hóspede.
Comparação Entre Virtualizadores na Tabela 1 vemos uma comparação entre os softwares de virtualização citados, bem como ver em que tipo de processador cada um suporta, qual o tipo do sistema operacional serve como anfitrião e quais seus sistemas convidados, qual técnica cada um utiliza, seu tipo de licença e suas características.
Podemos notar a grande variedade de virtualizadores que estão disponíveis no mercado, com suporte aos mais diversos sistemas operacionais e plataformas, a maioria com licenças livres para utilização, alguns com ênfase acadêmica e em constante desenvolvimento.
Outros Aspectos Máquinas virtuais provém compartilhamento de recursos entre aplicações e usuários do sistema dando a ilusão da utilização total dos recursos disponíveis.
Alocação de recursos físicos é definida na inicialização da máquina virtual, porém algumas podem ser alteradas em tempo de execução.
A maioria dos monitores de máquinas virtuais permitem especificar uma quantidade total de processadores que serão necessários alocando esse recurso para essa máquina virtual específica.
Porém, cada máquina virtual, apesar de poder especificar que necessita de um certo número de processadores, irá compartilhar esses processadores com as outras máquinas virtuais.
Tratando- se de memória, o compartilhamento total da memória alocada para a máquina virtual é feita em espaços de grande granularidade, por exemplo 1 Megabyte, pois pequenos espaços de memória aumentam o ônus de busca feita por o monitor.
Várias limitações são impostas por arquiteturas multiprocessadas aos projetos de máquinas virtuais.
Uma dessas limitações existem nas diferenças no acesso a memória em máquinas Em uma (Non-Uniform Memory Access), onde o desenvolvedor precisa se preocupar com implementações no subsistema de memória, problemas de sincronização em estruturas de dados globais, e mesmo falhas de hardware que não ficam limitadas a apenas uma parte do sistema.
Porém, a utilização de máquinas virtuais em ambientes multiprocessados está ganhando força a medida que esse tipo de arquitetura está sendo bastante utilizada por corporações que necessitam de grande poder computacional.
Um exemplo é a Cellular Disco que transforma uma máquina multiprocessada num cluster virtual, gerenciando recursos e provendo contenção de falhas de hardware.
Considerações Finais Com a grande diversidade de aplicações nas corporações, as necessidades dos usuários são imprevisíveis, altamente mutáveis, porém o parque de máquinas geralmente não acompanha esse raciocício.
Com isso tornam- se enormes os custos de se manter uma administração adequada.
Em a visão da virtualização, tais questões são abstraídas por um modelo mais flexiveis.
A grande vantagem de se dispor de uma infra-estrutura como a virtualização é que a soma de suas capacidades de disco, processadores e memória podem ser gerenciados e distribuídos transparentemente, tornando o ambiente mutável e dinâmico.
Em o próximo capítulo, veremos o monitor de máquinas virtuais Xen, foco principal deste trabalho.
O Xen foi desenvolvido por o Systems Research Group da Universidade de Cambridge, e é parte de um projeto maior chamado XenoServers, que provê um ambiente de computação global distribuída.
O Xen permite compartilhar uma simples máquina para vários clientes rodando sistemas operacionais e seus respectivos programas.
Com a renovação da utilização de máquinas virtuais através da consolidação de servidores, o Xen tem se tornado acessível a um número cada vez maior de usuários, proporcionando ganhos de desempenho, o que o torna uma alternativa interessante para vários sistemas de computação, através de suas vantagens como custo e portabilidade.
O Xen utiliza o conceito de paravirtualização, onde o sistema operacional rodando sobre uma máquina virtual tem a ilusão de estar sendo executado diretamente sobre o hardware.
O Xen se encarrega de organizar as requisições feitas por as máquinas virtuais e repassar- las ao sistema principal.
Ele se limita a repassar as instruções, sem interpretar- las como faria um emulador, o que causa uma diminuição de desempenho muito pequena.
Estrutura Interna do Xen A maioria dos sistemas operacionais em arquitetura i386, por padrão, funcionam em nível 0, onde se pode executar qualquer instrução privilegiada e qualquer acesso de entrada/ saída.
O Xen modifica o kernel do nível 0 para nível 1, passando o próprio Xen a rodar em nível 0.
As aplicações não percebem essa mudança por que executam em nível 3, que é o menos privilegiado de eles.
No caso de o Xen, o sistema que vai ser executado na máquina virtual precisa ser modificado, ou seja, é necessário instalar um patch no kernel para que o Xen funcione.
O Xen tem a estrutura similar a um sistema operacional microkernel, onde se pode ter múltiplos sistemas operacionais, gerenciando todo o acesso à memória e dispositivos.
O Xen provê uma camada, chamada hypervisor, ao hardware onde são portados seus sistemas operacionais, e em retorno se tem a habilidade para rodar múltiplas instâncias de sistemas operacionais (ver Figura 4).
Em a Figura 4, observamos que o Xen se divide em quatro níves.
O primeiro nível (nível mais superior) corresponde às aplicações que rodam dentro de as máquinas virtuais juntamente com os softwares adicionais que monitoram o funcionamento do Xen.
Em o segundo nível temos o sistema operacional hospedeiro com seu kernel modificado para proporcionar virtualização e os sistemas operacionais convidados (máquinas virtuais).
Em o terceiro nível temos o hypervisor que é uma camada que controla as chamadas de sistema entre as máquinas virtuais e o hardware, e por fim, temos o hardware.
Uma virtualização completa acarretaria perda de desempenho, portanto o Xen faz uma paravirtualização, abstraíndo o hardware e perdendo pouco desempenho se comparado à máquina real.
Em o Xen, somente o hypervisor tem privilégios totais aos recursos como processador e à memória física, ficando a seu cargo a alocação de memória dos domínios virtuais, e todo estado privilegiado e controlado por o Xen, assegurando assim, um uso seguro de paginação e segmentação.
Como o sistema operacional virtualizado executa num nível menos privilegiado, instruções privilegiadas são validadas por o Xen.
O Xen reserva para seu uso uma parcela de memória física, e também reserva uma parcela fixa pequena para cada espaço de endereço virtual.
Quando a memória física é alocada ou liberada, não há nenhuma garantia que um domínio receberá um aumento contíguo da memória física.
O Xen utiliza acesso de somente-leitura às tabelas de páginas da memória e fica a cargo de o sistema operacional base explicitamente requerer qualquer modificação.
O Xen valida toda requisição e somente aplica modificações seguras ao ambiente.
Isto se faz necessário para prevenir que domínios possam adicionar mapeamentos arbitrários em sua tabela de páginas.
Em a validação, o Xen associa um tipo e um contador de referência com a página da memória.
Cada página é mutuamente exclusiva em algum ponto do tempo.
O Xen também provê um modo alternativo de operação em que o sistema operacional convidado tem a ilusão que suas tabelas de páginas são diretamente graváveis, porém não é assim que ocorre pois o hypervisor do Xen valida todas as modificações.
O Xen tem suporte a escalonadores tanto estáticos quanto dinâmicos.
Para máquinas multiprocessadas a utilização de escalonadores dinâmicos é mais apropriada do que os escalonadores estáticos uma vez que estas máquinas podem sofrer reconfiguração em tempo de execução.
Por exemplo, mais processadores poderiam ser anexados à máquina multiprocessada, como é o caso em diversas arquiteturas Em uma.
O primeiro escalonador, chamado Borrowed Virtual Time provê um compartilhamento proporcional entre as CPUs, porém existe neste escalonador uma grande dúvida no que diz respeito à precisão na predição dos recursos necessários para o processamento, o que se mostra significativo em aplicações que necessitam de processamento uniforme e também o serviço de interrupção podem efetivamente roubar ciclos, fazendo o número de ciclos do processador incerto em algum período de tempo.
O segundo escalonador, chamado Scan Earliest Deadline First usa uma fila de prioridades onde o processo de menor deadline é escolhido para a execução, porém além de problemas de afinidade com os processadores, neste escalonador não existe como controlar quanta CPU cada máquina virtual vai consumir do domínio 0, embora tenham sidos configurados pesos de processamento para cada domínio.
O último escalonador e atualmente o padrão no Xen é chamado SMP Credit, tido como ideal para máquinas SMP (Symmetric Multiprocessor) por os desenvolvedores do Xen, pois tem a capacidade de quando uma CPU real estiver parada, buscar CPUs virtuais (VCPUs ou Virtual CPUs) de outras CPUs reais para execução.
Em a Figura 5, é mostrado como a CPU0 é dividida em duas CPUs virtuais e como uma CPU virtual da CPU0 é realocada para a CPU1, e depois como a CPU virtual que estava originalmente na CPU1 passa para a CPU0, e assim por diante.
Embora indicado para máquinas SMP, o Credit só consegue fazer um bom balanceamento de recursos se existir algum processador livre, o que é difícil de ocorrer num ambiente de produção utilizando máquinas virtuais.
Ainda, quando utiliza processos que utilizam intensivamente entrada/ saída não existe como fixar limites aos domínios sobre a utilização das CPUs, pois a escrita/ leitura é controlada por o domínio 0 e não por as máquinas virtuais.
Em a gerência de processos o escalonador Credit também apresenta algumas limitações, por exemplo se tivermos dois processos onde A1 está utilizando o processador e A2 está bloqueado, o processo A1 está consumindo créditos e proporcionalmente perdendo prioridade.
Quando o processo A2 entrar em estado de execução, ele receberá uma fatia de processamento maior que o processo A1, pois terá menos créditos e maior prioridade, não garantindo um compartilhamento justo que é o princípio do escalonador Credit, pois penaliza o processo A1 O Xen reserva uma quantidade fixa de memória durante o início do sistema.
Essa região de memória se localiza no início da memória física e é mapeada no topo de cada região de memória virtual.
Apesar de essa memória estar sempre mapeada, ela não é sempre acessível aos domínios virtuais.
A memória física que não é usada por o monitor virtual é dividida em páginas é se torna disponível para alocação por os domínios virtuais.
O monitor virtual rastreia quais páginas estão livres e quais páginas estão sendo usadas por domínios virtuais.
Quando um novo domínio é criado, o monitor virtual aloca memória para o domínio a partir de a lista de páginas livres.
O total de memória requerida para o novo domínio virtual é passada para o monitor virtual a partir de o domain builder.
Um domínio virtual nunca pode alocar mais memória do que a memória que foi inicialmente alocada para ele, porém ele pode retornar ao monitor virtual páginas que não estão sendo utilizadas.
Essas páginas podem ser requisitadas novamente por o domino virtual, porém somente se o sistema não estiver sobre pressão de memória ou se a página em questão não estiver alocada.
Também é possível que vários domínios compartilhem páginas de memória, porém somente para leitura.
Limitações no Escalonamento do Xen Desde o seu desenvolvimento, o Xen teve como objetivo principal o desempenho e a escalabilidade.
O código atual de Xen suporta sistemas convidados em máquinas monoprocessadas e SMP.
Apesar de o Xen estar sendo bastante usado para consolidação de servidores, ainda apresenta alguns problemas a serem resolvidos.
Focando no escalonador Credit, podemos apresentar algumas das pricipais limitações:·
Não existe previsibilidade sobre o comportamento dos processos para uma melhor alocação da CPU, ou seja, o escalonador não diferência entre uma sobrecarga momentânea ou duradoura de processamento, possiblitando um ônus de realocação sobre realocação;·
A fatia de tempo em que os processos podem estar em estado de execução é de 30 milissegundos fixos, o que não é um parâmetro otimizado quando o Xen está com o escalonador dinamicamente configurado em máquinas SMP;·
A contabilização no escalonador é feita de uma maneira simplista de 1 tick a cada 10 milissegundos, o que ocasiona sempre uma perda de 10 milissegundos para a máquina virtual que está em execução, portanto é necessário um esquema mais exato e mais eficiente da contabilidade;·
Quando está configurado o escalonamento dinâmico através da utilização de VCPUs, não se pode garantir níves de serviços para máquinas virtuais, pois o escalonador não permite determinar intervalos de processamento ideais para aplicações que estejam rodando nas máquinas virtuais, pois se baseia apenas na necessidade de processador.
Considerações Finais A consolidação do servidor é uma estratégia importante para a redução de custos, e as atuais soluções de software para virtualização tornam fácil a execução de aplicações múltiplas de forma segura.
Obviamente, o planejamento é importante num projeto de consolidação bem sucedido.
Para a maioria das organizações, a virtualização envolve novos produtos e novas tecnologias, assim como novos procedimentos de Ti e novos modelos de uso.
As políticas para tomada de decisão normalmente também precisam mudar, já que os servidores físicos individuais poderão ser compartilhados entre múltiplas unidades de negócios.
Virtualização é um tema de grande pesquisa nos dias de hoje, haja visto suporte a novas tecnologias de processadores que visam a suportar essa tecnologia.
A virtualização tende a ajustar uma arquitetura específica as necessidades computacionais de sistemas de software.
Xen é uma tecnologia relativamente nova, mas o suporte da indústria junto com as soluções prontas para serem desenvolvidas estão começando a surgir, e avanços rápidos podem ser esperados.
Em o Xen, todo o gerenciamento do processador, memória e dispositivos é realizada por o hypervisor, que oferece uma interface para cada máquina virtual, permitindo uma execução independente.
Esse gerenciamento é feito através de system calls realizadas por as máquinas virtuais ao domínio principal, e o hypervisor vai controlar o acessos dessas chamadas ao hardware.
O Xen permite uma separação lógica entre o hardware e as máquinas virtuais ou sistemas operacionais convidados, permitindo uma maior flexibilidade, e aproveitando melhor o hardware, controlando ainda, o acesso seguro ao hardware por as máquinas virtuais.
A seguir apresentaremos o subsistema de realocação de recursos desenvolvido para possibilitar direcionar a quantidade de recursos ociosos para máquinas virtuais que necessitem desses recursos.
O subsistema proposto foi desenvolvido para auxiliar o escalonador Credit quando configurado no modo padrão, onde o escalonador é configurado com pesos fixos de processador e memória para cada máquina virtual e esses valores não se alteram.
O escalonador Credit pode ser configurado de duas maneiras, com limites máximos de processamento (padrão) e sem limites máximos de processamento.
Quando configurado sem limites máximos de processamento, o escalonador se ajusta dinamicamente às cargas das máquinas virtuais e a sobra de processamento é direcionada para o domínio principal.
Entretanto a falta de limite máximo de processamento para as máquinas virtuais pode causar alguns problemas em ambientes onde existe a definição de algum acordo de nível de serviço (Service Level Agreement -- SLA).
Esta situação acontece pois uma determinada máquina virtual pode receber no máximo a carga que está sobrando no sistema ou então uma fatia igual as demais máquinas virtuais que estão executando.
Caso seja necessário estipular uma quantia maior de recursos, ou um valor máximo para uma determinada máquina virtual, então deve- se estabelecer estes limites.
No entanto, quando utilizamos o escalonador com limites de processamento individual para cada máquina virtual, os valores máximos definidos permanecem fixos.
Isto pode não ser apropriado em diversas situações.
Por exemplo, dependendo das aplicações numa máquina virtual, ela poderá necessitar de maior processamento que o seu limite configurado.
Caso exista disponibilidade, pois as outras máquinas virtuais podem não estar utilizando os recursos que lhes foram alocados, a máquina virtual que necessita mais recursos não os receberá.
O subsistema proposto faz a realocação dos recursos para as máquinas virtuais neste caso, onde os limites máximos de processamento precisam ser ultrapassados.
O subsistema irá aumentar os recursos somente se outras máquinas virtuais não estiverem utilizando parte dos recursos que elas possuem disponíveis, proporcionando um melhor balanceamento do ambiente.
Basicamente o subsistema pretende transformar a situação exemplo mostrada na Figura 6 para a situação mostrada na Figura 7.
Em a Figura 6, as máquinas virtuais A até D possuem disponíveis os mesmos limites máximos de recursos -- mostrados por a linha pontilhada.
Portanto, o subsistema proposto é dividido em duas partes:
O monitor e o atuador.
O módulo monitor que verifica de tempos em tempos as necessidades de processamento das máquinas virtuais e o atuador que modifica as configurações de pesos de processador e memória para melhorar o desempenho do ambiente.
Como verificado, a idéia é que todas as máquinas tenham os recursos que necessitem, e não existam recursos sub-utilizados.
Claro que nem sempre esta situação é possível.
Poderia haver a situação onde todas as máquinas virtuais estivessem utilizando todos os recursos disponibilizados e portanto a máquina que necessitasse mais recursos teria que ficar esperando tendo um menor desempenho do que o esperado acarretando menor desempenho global.
O subsistema de realocação de recursos é composto por duas partes:
Monitoramento e realocação.
Monitores em Sistemas Operacionais Hoje em dia existem várias aplicações de monitoramento de sistemas operacionais, pois cada vez mais se faz necessário ter o controle sobre o sistema, e temos como exemplo as seguintes aplicações:
Hp Openview Operations, Tivoli Monitoring, Microsoft Operati-ons Manager (MOM) e Nagios.
Os softwares de monitoramento de sistemas operacionais são componentes lógicos bastante utilizados em sistemas de tempo real com a característica de obter informações do sistema, onde as aplicações mais comuns são utilizadas para gerenciar usuários, processos, arquivos, diretórios e dispositivos, tendo como principal função auxiliar ao administrador do sistema em decisões gerenciais e técnicas.
Alguns tipos de monitores de sistemas operacionais, além de verificarem eventos específicos do sistema operacional, tomam decisões sobre a melhor configuração para determinado evento, possibilitando uma melhor funcionamento do sistema baseado em métricas pré-definidas.
Os sistemas monitores existentes podem ser classificados em primeiro plano, entre interativos ou automáticos.
Sistemas de monitoramento interativos são aqueles que necessitam da intervenção humana para sua tomada de decisão ou sugestões de como atuar sobre o sistema, por outro lado, sistemas de monitoramento automáticos tem autonomia para chegar numa decisão de como atuar sobre o sistema.
Essa atuação leva a outra definição, que classifica os monitores de sistema entre sistemas de observação ou sistemas de manipulação.
Sistemas de monitoramento de observação são aqueles que verificam o sistema buscando por determinados eventos, e avisam quando esses eventos ocorrem.
Sistemas de monitoramento de manipulação, além de verificarem o sistema esperando determinados eventos, quando esses eventos ocorrem, atuam sobre o sistema.
Quanto a observação, ainda podemos distinguir sistemas de monitoramento entre on-line e off-line.
A grande diferença entre sistemas on-line e off-line é que em sistemas on-line, o sistema de monitoramento está rodando junto à aplicação monitorada, enquanto em sistemas off-line rodam após a aplicação ter terminado de rodar.
A utilização de threads é bastante difundida no monitoramento de sistemas paralelos, pois permite uma maior facilidade de comunicação e sincronização de dados pois coexistem no mesmo espaço de endereçamento, ao contrário de subprocessos criados através do fork.
Apesar de ser uma técnica bastante invasiva, podemos diminuir seu ônus de processamento utilizando técnicas que permitem deixar a thread bloqueada através de semáforos até que o evento que satisfaça a sua condição de execução aconteça.
Outra medotodologia de monitoramento, que é utilizada por as aplicações nativas de monitoramento do Xen (por exemplo:
Xentop, Xenmon), são programas com laços que utilizam a função sleep para monitorar de tempos em tempos o sistema, causando menos impacto na utilização do processador.
Enquanto o programa monitor está em sleep, fica suspenso esperando por um sinal de SIGALARM (alarme de relógio -- time out) do kernel para recomeçar a sua execução (no padrão POSIX).
O único problema desse tipo de implementação é quando termina o período de segundos configurados no sleep, pois não há garantia que o programa retome imediatamente a execução, porque isso depende da política de escalonamento da fila de processos em estado de pronto, o que pode acarretar atraso no monitoramento.
Alocação de Recursos O Xen possibilita configurar a alocação estática do escalonador através da ferramenta xm.
O xm é a ferramenta mais importante de gerenciamento do Xen através do console e provê um grande número de parâmetros que possibilitam esse gerenciamento.
A sua sintaxe tem o seguinte formato:
Esse comando proporciona a criação de domínios (máquinas virtuais), listagem de domínios ativos, destruição de domínios, migração de domínios bem como a obtenção de informações sobre o respectivo domínio.
Em caso de arquiteturas SMP (Symmetric Multiprocessor) os processos são balanceados simetricamente entre os processadores obedecendo ao escalonador em uso, por padrão não tendo preferência entre máquinas virtuais e processadores, podendo estar, ora num, ora em outro processador.
Porém, pode ser configurado em tempo de execução, de modo que se direcione os processos advindos de uma máquina virtual para apenas um processador determinado, utilizando o comando xm, e parâmetros como segue abaixo:
Onde:· vcpu_ pin:
Comando para restringir um domínio virtual para uma determinada CPU;·
dom_ id:
Identificador do domínio;·
vcpu: Identificador da CPU virtual;·
cpu: Identificador da CPU física.
O comando xm envia um valor TRUE para opt_ dom0_ vcpus_ pin no arquivo schedule.
C, que fixa um domínio virtual à uma CPU física.
Alguns parâmetros do comando xm dizem respeito também ao escalonador credit, o que vem a permitir em tempo de execução a mudança dos valores de peso e limite.
Vemos abaixo como mudar esses valores, respectivamente:
