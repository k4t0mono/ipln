O surgimento de grandes coleções de imagens gera a necessidade de organizálas.
Uma solução para isto é agrupar- las em páginas.
Ferramentas atuais geralmente realizam esta tarefa através do uso de templates, porém estes são estruturas limitadas e com poucas variações.
A solução ideal deve gerar páginas automaticamente, analisando individualmente as imagens selecionadas e então as distribuindo de forma inteligente.
Este trabalho apresenta uma possível solução para este problema através de árvores de cortes, estruturas que permitem formar um layout a partir de as imagens.
Inicialmente é apresentado um algoritmo capaz de avaliar todos os layouts representáveis por árvores de cortes e escolher o melhor.
Esta escolha é baseada numa função de avaliação capaz de atribuir uma pontuação a um layout.
Os critérios de avaliação são divididos entre páginas em que as imagens podem ou não ser redimensionadas.
Páginas sem redimensionamento das imagens devem ser ocupadas de forma que reste o mínimo de espaço em branco em seu interior.
Já em páginas com redimensionamento é possível eliminar completamente o espaço em branco, porém deseja- se que para isto as imagens sofram o mínimo de alteração em seu tamanho original.
Em nenhum caso é permitido recorte, distorção, rotação ou sobreposição das imagens.
A criação de layouts é totalmente dependente da área onde o mesmo será apresentado:
Um layout bom para um formato de página pode não ser bom para outro.
Logo, o formato da página é predefinido e deve ser considerado na escolha do melhor layout.
A abordagem utilizada neste algoritmo garante um resultado preciso, porém seu alto custo computacional inviabiliza a criação de páginas com muitas imagens.
É proposto um segundo algoritmo capaz de dividir o problema, abrindo mão da precisão do resultado, porém permitindo a geração de páginas com centenas de imagens.
Palavras-Chave: Geração automática de layouts;
Layouts de páginas;
Árvores de cortes;
Páginas de álbum;
Composição de imagens;
Aspect ratio predefinido;
Geração de árvores binárias;
Espaço em branco;
Corte de guilhotina;
Mosaicos. O custo decrescente de dispositivos para captura de imagens viabiliza que se tornem acessórios comuns da população.
Juntamente com isto, a popularização da internet e das redes sociais permite que uma pessoa tenha acesso às fotografias de diversas outras.
Estes fatores são responsáveis por facilitar o surgimento de grandes coleções de imagens.
Para a visualização, impressão ou compartilhamento de uma grande quantidade de imagens existem diversas propostas, desde organizar- las em álbuns virtuais até agrupar- las através de colagens de fotos ou paginas de álbum.
Em software para edição e impressão de fotografias como, por exemplo, o Hp Photosmart Essential a criação de páginas para impressão geralmente é feita através de templates:
Estruturas fixas que possuem lacunas onde as imagens são posicionadas.
Para adaptar uma imagem ao seu espaço no template pode haver deformação, rotação ou recorte da mesma, produzindo uma solução de menor qualidade.
A Figura 1 apresenta três páginas geradas através de templates por a ferramenta Hp Photosmart Essential.
Em a página é apresentado um template com apenas quatro imagens.
Para criar páginas com um número maior de imagens, um novo template deve ser selecionado, por exemplo, (B) ou (C).
Porém, se o número de imagens for inferior ao número de lacunas do template, as lacunas adicionais permanecem em branco.
Comparando as dimensões e formatos das imagens em cada template é possível perceber que há redimensionamento e recorte das imagens para adaptar- las às suas respectivas lacunas.
Imagens retiradas do repositório Free Images.
Outros softwares oferecem abordagens diferentes para a geração de páginas:
Um exemplo é a criação de mosaicos no software Picasa.
Mosaicos apresentam um número variável de imagens redimensionadas de forma a preencher totalmente o espaço disponível numa página.
Porém, se o redimensionamento não for controlado o resultado pode ser afetado negativamente:
Imagens pequenas são ampliadas em excesso, perdendo qualidade, ou imagens grandes são reduzidas, perdendo sua importância.
A Figura 2 apresenta um exemplo deste problema.
Além de o problema com a alteração de dimensões, as imagens também podem sofrer recorte para se adaptar ao espaço disponível na página, ocasionando perda de conteúdo.
A ordem das imagens na página é outra questão que deve ser considerada.
A o criar páginas é interessante manter a ordem cronológica das fotos.
Em os softwares atuais não costuma haver este controle, embora muitos permitam a troca manual de posição entre pares de imagens após a geração da página, deixando o usuário responsável por ordenar- las.
Outro problema encontrado é a limitação quanto a o formato de página.
O Hp Photosmart Essential permite gerar páginas apenas para formatos padrões, como A3 ou A4.
Já o Picasa oferece a possibilidade de definir um formato qualquer, redimensionando e recortando as imagens para atingir- lo.
Tendo em vista as soluções atuais para criação de páginas, propõe- se uma forma automática de realizar tal tarefa respeitando as seguintes condições:
As imagens não devem sofrer corte, deformação, rotação ou sobreposição;
A ordem das imagens deve ser mantida na página;
O formato da página (Aspect Ratio) deve ser configurável;
A página deve ser bem ocupada, evitando área em branco.
A criação das páginas é separada em duas categorias:
Páginas em que é permitido que as imagens sejam redimensionadas de forma independente e páginas onde não há redimensionamento independente das imagens no interior da página.
Em páginas onde o redimensionamento é livre, assim como nos mosaicos do software Picasa, as dimensões das imagens são alteradas separadamente de forma a cobrir toda a página.
Porém, as imagens devem ser distribuídas de forma que o redimensionamento aplicado a cada uma seja o menor possível, ou seja, deve- se achar um layout onde cada imagem esteja mais próxima ao seu tamanho relativo original.
Em a outra categoria, não deve haver redimensionamento relativo das imagens durante a criação do layout.
Porém, o layout gerado pode ser ampliado ou reduzido de forma a se adaptar às dimensões da área onde será visualizado.
Ampliar ou reduzir o layout afeta as dimensões das imagens, porém a proporção original entre elas é mantida.
O capítulo 2 irá detalhar estas propriedades.
Quando não há redimensionamento das imagens, busca- se uma distribuição que evite o surgimento de espaço em branco na página.
Em a Figura 3, comparando as páginas (A) e (B) quanto a o espaço em branco interno, verifica- se que a página (B) apresenta um aproveitamento melhor.
Pode- se dizer que a página (B) é mais compacta que (A).
Assim, em páginas onde não há redimensionamento das imagens, busca- se encontrar layouts mais compactos.
Um estudo detalhado do problema proposto é apresentado no capítulo 2, em a qual também são descritos e comparados alguns dos principais trabalhos existentes na área.
O capítulo 3 apresenta a solução desenvolvida através da elaboração de dois algoritmos e as vantagens e desvantagens de cada abordagem.
Em este capítulo também são descritas as limitações dos algoritmos e as alternativas para superar- las, além de a análise de resultados obtidos por os algoritmos.
O capítulo 4 apresenta a avaliação dos resultados dos algoritmos propostos estabelecendo uma relação com páginas geradas por outras ferramentas e algoritmos relacionados.
Por fim, no capítulo 5 se encontram as conclusões do estudo do problema.
Gerar páginas de álbum consiste em criar layouts para seleções de fotos.
Para isto, é preciso analisar individualmente as dimensões e o formato das imagens image selecionadas para distribuir- las numa única página.
O formato de um objeto retangular é descrito através de um valor chamado Aspect Ratio (AR).·
AR igual a 1, quadrado;
Quadrad· AR entre 0 e 1, retrato;·
AR maior que 1, paisagem.
O formato da página em a qual se deseja distribuir as imagens é fornecido antes da criação do layout e é chamado de AR alvo.
Embora haja o conhecimento prévio do AR alvo, as dimensões da página final com este AR não são conhecidas antes da criação do layout.
Por a definição de AR, diferentes combinações de larguras e alturas podem apresentar o mesmo formato.
A Figura 4 apresenta dois objetos que possuem o mesmo AR e diferentes dimensões.
A o determinar as dimensões da página pode não ser possível gerar um layout sem redimensionamento das imagens.
Um exemplo é apresentado na Figura 5: Se a imagem possuir altura ou largura maior que a da página, não é possível posicionar- la sem redimensionamento ou recorte.
O objetivo deste trabalho é gerar layouts para páginas com AR predefinido independente das dimensões finais.
Para exibir o layout num dispositivo de dimensões diferentes, por exemplo, é feito o zoom do layout como um todo, mantendo as proporções das imagens.
AR alvo, sendo assim, adapta- se seu formato ao formato alvo (C), dando origem à página alvo (D).
Em este trabalho utiliza- se layout e página ideal como sinônimos.
O posicionamento das imagens é utilizado apenas na criação da página ideal, pois é preciso que o layout seja aplicado para possibilitar a identificação de fatores como formato e espaço em branco.
Árvores de cortes Como as dimensões da área onde o layout será exibido não são conhecidas, é preciso encontrar uma forma de criar layouts trabalhando apenas com o AR desta e as dimensões e formato das imagens.
Uma forma de realizar esta tarefa é o uso de árvores de cortes, onde as imagens são ligadas em pares formando blocos que, por sua vez, são ligados a outros blocos ou imagens.
Estas ligações são organizadas em forma de árvore binária, onde as folhas correspondem às imagens e os nodos internos à forma com que estas estão interligadas:
Se uma acima de a outra, há um corte horizontal (H), se lado a lado, há um corte vertical.
Isto pode ser visto na Figura 7.
Esta estrutura é utilizada em diversos trabalhos e em diferentes áreas:
Para gerar páginas de álbum, criar layouts para documentos e visualizar informação.
Por ser uma estrutura simples, o uso de árvores para a representação de layouts apresenta limitações.
Existem layouts que não podem ser gerados através da estrutura de cortes:
Em a Figura 10 não é possível traçar um corte de guilhotina que divida a página.
Salvo por as limitações da estrutura, como cada árvore representa um layout, o problema de gerar o melhor layout para uma seleção de imagens pode ser traduzido em encontrar a melhor árvore de cortes possível.
Porém, para que se possa afirmar que uma árvore é melhor que as demais, é preciso realizar uma avaliação qualitativa dos layouts.
Avaliação do layout A tarefa de atribuir uma pontuação a uma árvore exige critérios de avaliação que descrevam o que se procura num bom layout.
Algumas condições iniciais são aplicadas a todos os layouts:
Não é permitido deformação, rotação, recorte ou sobreposição das imagens.
Estas condições podem ser controladas durante a criação das árvores, garantindo que todos os layouts gerados irão respeitar- las igualmente.
Logo, não são critérios suficientes para a escolha do melhor layout.
Quando não há redimensionamento das imagens na criação do layout, a página ideal deve possuir um bom aproveitamento, ou seja, as imagens devem cobrir a maior área possível, restando o mínimo de espaço em branco.
A Figura 12 apresenta duas páginas diferentes que podem ser geradas com uma mesma seleção de imagens.
Embora os layouts possuam formatos diferentes, ao considerar apenas o aproveitamento da página, pode- se dizer que a página (A) é melhor que a (B) por possuir menos espaço em branco.
Assim, é critério de avaliação de páginas sem redimensionamento de imagens possuir o mínimo de espaço em branco em seu interior.
Quando o redimensionamento é permitido existem técnicas que permitem eliminar completamente o espaço em branco, um exemplo é a Figura 13: Para ara evitar a perda de qualidade das imagens busca- se busca se alterar o mínimo possível o tamanho original de cada imagem.
Em a página (A), as imagens 1 e 3 foram redimensionadas e colocadas lado a lado.
Porém, as dimensões originais das duas imagens são bastante distantes das dimensões finais, assim, há um grande redimensionamento.
Já em (B), inicialmente as imagens 1 e 2 são ligadas, ligadas e como estas duas imagens possuem dimensões mais próximas há uma alteração menor nas dimensões originais das imagens.
Com ou sem redimensionamento, é importante que o layout gerado possua formato semelhante ao da página onde será utilizado.
Para tanto, é critério de avaliação essencial a comparação do Aspect Ratio do layout criado com o AR alvo.
Este critério evita que a área onde se deseja exibir as imagens seja mal aproveitada.
Um exemplo é apresentado na Figura 15, em a qual existe uma página ideal com pouco espaço em branco (A) e um formato de página alvo (B).
A o exibir (A) no formato definido (B), se obtém como resultado a página (C).
A diferença de formatos acarreta o surgimento de espaço em branco.
Usando a representação dos layouts através de árvores de cortes e os critérios que definem uma boa página, pode- se sintetizar o problema da seguinte forma:
Gerar todas as árvores de cortes possíveis;
Avaliar cada árvore atribuindo a ela uma pontuação;
Utilizar a árvore com maior pontuação para a geração do layout final.
Para avaliação das árvores, os critérios são:
Em páginas com redimensionamento:
O Aspect Ratio mais próximo a o predefinido;
Em páginas sem redimensionamento:
O Aspect Ratio mais próximo de o predefinido;
Existem diversos trabalhos na área de geração automática de layouts com abordagens e critérios diferentes.
A seguir serão apresentados alguns dos principais trabalhos relacionados.
Trabalhos relacionados Dentro de a proposta de gerar layouts, um trabalho importante é o de Atkins, que apresenta um método baseado em heurísticas para gerar árvores de cortes.
Para chegar ao resultado final são avaliadas diversas árvores através de uma função de pontuação e a árvore com maior pontuação é escolhida.
A heurística utilizada para o processo de criação das árvores de cortes evita a necessidade de gerar todas elas.
Em o algoritmo, as fotos são adicionadas à árvore uma a uma.
Para cada nova imagem, parte- se de uma árvore já existente e verifica- se em que posições da árvore o novo nodo pode ser inserido.
Cada possível posição é avaliada através da função de pontuação que busca minimizar o espaço em branco.
Por não testar todas as árvores de cortes, este algoritmo não oferece garantia de que o melhor layout será encontrado.
A Figura 16 apresenta o funcionamento do algoritmo de Atkins:
Partindo da primeira imagem (A), testa- se a adição da segunda através de cortes horizontal e vertical, escolhendo o melhor (B).
Busca- se então uma forma de adicionar a terceira imagem, adicionando um novo nodo à árvore (B).
Em (C) são apresentadas todas as árvores testadas para a adição da terceira imagem através de um novo nodo interno.
Os nodos indicados por as setas são os novos nodos inseridos na árvore escolhida em (B).
Por fim, é escolhido um novo nodo raiz com corte vertical.
O corte horizontal escolhido na etapa (B) permanece inalterado em todas as árvores em (C), reduzindo o número de árvores de cortes:
De 80 árvores possíveis são avaliadas apenas 8 (6 para três imagens e duas para 2 imagens).
Outra abordagem é a utilização de algoritmos genéticos para criação de layouts.
Geigel propõe um sistema para criação de layouts de páginas de scrapbooks, onde se deseja produzir páginas com uma distribuição aleatória, artisticamente atrativa e personalizada.
Scrapbooks são álbuns de fotos decorados onde a distribuição das fotografias nem sempre segue regras.
O algoritmo parte de árvores iniciais aleatórias e aplica mutações e crossover para obter um layout final.
Diversos critérios são utilizados no processo permitindo efeitos como rotação, sobreposição e escala.
A Figura 17 mostra dois exemplos de resultados deste algoritmo.
As páginas apresentam imagens mais espalhadas, sustentando a proposta de geração de páginas mais artísticas e decoradas.
Já Goldenberg propõe a criação de páginas para impressão com qualquer tipo de conteúdo que possa ser representado por retângulos.
Desta forma, uma possibilidade é criar páginas com imagens.
Para tanto, utiliza- se parâmetros como área em branco e formato da página de impressão para avaliar os resultados gerados através de um algoritmo genético.
Os resultados apresentados geralmente atingem um formato próximo a o da página, porém, por se tratar de um método aleatório, os blocos geralmente ficam desalinhados, passando a impressão de desordem.
Outra visão do problema é apresentada por Li, em a qual encontrar o melhor layout para um conjunto de fotos deixa de ser o objetivo que, neste caso, é a eliminação total de espaço em branco em layouts.
O algoritmo parte de um layout já existente e, através do redimensionamento das imagens, reduz o espaço em branco à zero, restando apenas a separação entre as imagens.
O layout não é gerado por o algoritmo, é apenas corrigido.
Para remover o espaço as imagens são redimensionadas sem que haja deformação.
Embora isto afete o formato final da página, os resultados apresentam um bloco compacto, sem espaço em branco.
A Figura 18 apresenta o resultado da aplicação deste algoritmo numa página.
Em (A) existem lacunas de espaço em branco geradas por a diferença de tamanho entre as imagens.
Em (B) isto é corrigido através do redimensionamento das imagens.
Comparação entre os trabalhos O algoritmo de Atkins utiliza heurísticas para solucionar o problema, avaliando um número reduzido de possibilidades:
Uma página com quatro imagens, por exemplo, possui 224 árvores de corte possíveis, porém, são avaliadas menos de 20.
Assim, este algoritmo renuncia à melhor solução em troca da possibilidade de criar páginas com grande número de imagens.
O uso de algoritmos genéticos, como em, também não representa uma solução ideal.
Mesmo que os critérios oferecidos se aproximem do que se procura numa página de álbum, algoritmos genéticos baseiam- se em tentativas aleatórias de encontrar um resultado condizente, assim nem sempre é possível garantir que haverá convergência, qualidade e bom desempenho.
Embora avaliar todas as possibilidades garanta o melhor resultado, também apresenta uma limitação:
O alto custo computacional torna inviável a geração de páginas com grande número de imagens.
Porém, considerando que páginas com muitas fotos ocasionam redução das imagens, geralmente o número de fotos é pequeno ou moderado, favorecendo o uso do algoritmo proposto.
O custo de uma solução assim será detalhado na seção 3.1.6.
A Tabela 1 apresenta uma comparação entre a abordagem proposta para solucionar o problema e as soluções apresentadas por Atkins e por o uso de algoritmos genéticos.
Considerando que exista uma forma qualitativa de avaliar páginas, entende- se por melhor resultado aquele que de entre todos possuir a melhor pontuação.
Independente dos critérios de avaliação de qualquer algoritmo, não se pode garantir que um layout é o melhor resultado sem que todas as outras possibilidades sejam analisadas e comparadas.
Para solucionar o problema proposto foi desenvolvido um algoritmo exaustivo responsável por analisar todas as árvores de cortes para uma coleção de imagens.
Porém, embora garanta um resultado exato, esta solução apresenta limitação quanto a o número total de imagens na página final, pois o número de árvores de cortes cresce rapidamente.
Para criar páginas com grande número de imagens, foi elaborado um segundo algoritmo chamado de Algoritmo de Subdivisão.
Este capítulo irá descrever, avaliar e apresentar os resultados de cada um dos algoritmos.
Algoritmo exaustivo Para encontrar o melhor layout para um conjunto de imagens, dividiu- se o problema em etapas:
Geração de árvore de cortes, montagem e avaliação do layout.
A primeira etapa é responsável por gerar árvores de cortes.
Para isto é necessário apenas conhecer o número de nodos internos, valor que pode ser obtido através do número de imagens selecionadas.
A árvore gerada passa por uma etapa de montagem, responsável por controlar a ordem das imagens e ligar- las à árvore.
Em cada folha da árvore são adicionadas as dimensões e o Aspect Ratio de uma das imagens selecionadas.
Por fim, a árvore de cortes completa passa por a etapa de avaliação, responsável por atribuir uma pontuação à árvore que, se possuir a maior pontuação até o momento, será armazenada.
A Figura 19 apresenta o fluxo do algoritmo para avaliar um único layout.
Através do número de nodos internos gera- se uma árvore de cortes.
Em a etapa seguinte as imagens são adicionadas de forma ordenada à árvore gerada, que por fim é avaliada.
A forma com que as etapas foram desenvolvidas será descrita nas seções a seguir.
Para gerar as árvores de cortes é necessário conhecer o número de nodos internos.
Árvores de cortes são árvores binárias onde cada nodo tem zero ou dois filhos, assim, o número de nodos internos é dado por:
Número de nodos internos $= número de folhas ­ 1.
A tarefa de gerar todas as possíveis árvores de cortes pode ser dividida em duas etapas.
Sendo n o número de nodos internos, as etapas são:
Gerar todas as árvores binárias com n nodos internos;
Para cada árvore binária, gerar todas as combinações de cortes para os n nodos não folhas.
Para gerar árvores binárias existem alternativas na literatura:
Knuth apresenta diversos algoritmos para gerar todas as árvores binárias possíveis através do número de nodos internos.
Em este trabalho foi utilizado o algoritmo chamado por Knuth de algoritmo B, em o qual as árvores são definidas através dos arrays l e r representando ligações à esquerda e ligações à direita de cada nodo, respectivamente.
Em este algoritmo os nodos internos são numerados de 1 a n, onde o nodo 1 é a raiz da árvore e n o número de nodos não-folhas.
Para cada nodo 1 k n existem e cujos valores respeitam as regras a seguir:
Com os arrays l e r, pode- se pode montar a árvore binária.
A Figura 20 mostra uma árvore com quatro nodos internos (n ($= 4) representada epresentada através de ligações.
O nodo 1 possui um filho à esquerda (nodo 2, pois $= 2) e uma folha à direita(.
O nodo 2 possui o nodo 3 como filho à esquerda e o 4 à direita.
E, por fim, tanto o nodo 3 quanto o 4 só possuem filhos que são folhas.
Através dos arrays e, define- se a estrutura da árvore binária, assim, para gerar todas as árvores binárias o algoritmo B encontra todas as combinações válidas de r's e l's.
Cada árvore pode representar diferentes layouts através do corte feito em cada nodo.
Para cada árvore binária gerada é preciso encontrar todas as combinações de cortes possíveis para seus nodos internos.
Para tornar a árvore binária uma árvore de cortes basta relacionar um corte a cada nodo interno.
Como os nodos estão numerados de 1 a n, se propõe o uso de um array c..
Um exemplo pode ser visto na Tabela 2, em a qual é apresentada uma árvore binária com três nodos através da representação por ligações e todas as possibilidades de cortes para a mesma árvore.
Os cortes representam todas as combinações possíveis de cortes horizontais e verticais para árvores com n nodos internos.
Qualquer árvore com o mesmo número n de nodos internos, independente de sua estrutura, irá possuir as mesmas combinações de cortes.
Um dos objetivos do trabalho desenvolvido é garantir que as imagens permaneçam ordenadas na página gerada.
Inicialmente é preciso definir o que é ordem numa página.
Se as imagens estão numeradas em ordem crescente, o número de cada imagem deve ser menor que os números das imagens imediatamente abaixo ou à direita.
Em a Figura 22, o item (A) apresenta uma página com sete imagens numeradas.
Para identificar se as imagens estão em ordem crescente, em (B), verifica- se se o número de cada imagem é menor que o número das imagens em contato à sua direita.
O mesmo deve ser válido para vizinhos abaixo, como confirmado em (C).
A relação de menor para imagens lado a lado é apresentada através do símbolo Se as imagens estão uma acima de a outra e a imagem de cima possui um número menor, o sinal deve ser voltado para baixo(/\).
Pode- se controlar a ordem das imagens através da ordem em que as folhas são inseridas na árvore de cortes.
A ordem das imagens será garantida sempre que as folhas forem adicionadas à árvore ordenadamente da esquerda para a direita.
Ou seja, a folha mais à esquerda da árvore será a de número 1, seguida por a folha 2 e assim sucessivamente, conforme mostra a Figura 23.
Independente da estrutura, uma folha posicionada à esquerda de outra na árvore, estará mais à esquerda e/ ou acima de a mesma na página.
Logo, para manter a ordem das imagens durante a etapa de montagem, percorre- se a árvore de forma pré-fixada adicionando as folhas organizadas numa fila ordenada.
Se a ordem das imagens não fosse relevante, para cada árvore de corte seria necessário avaliar todas as possíveis ordens dos nodos folhas.
Isto pode ser feito numerando as imagens de 1 a n e gerando todas as combinações destes valores.
As folhas devem ser inseridas na árvore e avaliadas para cada ordem.
Em o exemplo da Figura 23 a ordem é 1234567 e existem diversas outras possibilidades de ordem, como por exemplo:
1324567, 1342567 e 6543271.
Para que o algoritmo avalie todas as árvores fora de ordem basta utilizar uma etapa adicional capaz de gerar as combinações de ordem.
Em este trabalho, dá- se ênfase em manter a ordem das imagens.
Sendo n o número de folhas, gerar todas as ordens possíveis para as imagens aumenta o custo do algoritmo em n!
Vezes, diminuindo consideravelmente o número máximo de imagens por página.
Com as árvores de cortes sendo geradas, é preciso determinar qual é a melhor.
Para isto, cada árvore gerada passa por um processo de avaliação.
Se a pontuação de uma árvore for a maior encontrada até o momento, esta é armazenada.
A o fim do processo, a árvore que possuir maior pontuação é utilizada para gerar a página.
A avaliação deve buscar a página que enquadre as imagens da melhor forma de acordo com os critérios definidos.
Há um módulo responsável por a avaliação das árvores, possibilitando a alteração das regras de avaliação sem afetar o restante do algoritmo.
Este módulo é representado por uma função f, que recebe uma árvore a e produz sua pontuação f (a).
O valor de f (a) é um número real entre 0 e 1, e quanto maior, melhor a pontuação da árvore.
Os critérios de avaliação das árvores são diferentes para páginas onde não é permitido o redimensionamento das imagens e páginas onde o redimensionamento pode ocorrer.
Em as páginas em que as imagens não devem ser redimensionadas é utilizado como critério possuir o mínimo de área em branco, maximizando o aproveitamento da página.
O item (A) da Figura 24 apresenta um layout em o qual há uma grande área em branco ocasionada por a má distribuição das imagens.
Já o item (B) apresenta uma página com um aproveitamento melhor da área apenas utilizando um posicionamento mais adequado.
Porém, os formatos das páginas são diferentes e é preciso verificar qual está mais próxima ao AR alvo.
A função de avaliação deve retornar uma pontuação para cada layout, assim, é preciso relacionar os dois critérios (diferença entre formatos e espaço em branco) de modo a alcançar um único resultado.
Para isto, parte- se do fato que qualquer diferença entre o formato da página ideal do layout e o alvo resultará em espaço em branco desnecessário.
Isto pode ser acompanhado no exemplo da Figura 25: O item (A) apresenta a página ideal de um layout gerado para três imagens, em (B) o formato alvo e em (C) a composição do layout na página.
Embora o layout gerado possua originalmente pouco espaço em branco, ao inserir- lo numa página de AR diferente uma grande área em branco é gerada.
Para estabelecer uma relação entre os critérios, ao invés de verificar a diferença entre os formatos, utiliza- se o AR alvo para descobrir a área em branco que será gerada por a diferença.
O espaço em branco total é a soma do espaço em branco interno da página ideal (A) com a área não preenchida da página alvo (C), conforme a Figura 26.
Como as dimensões da página alvo não são conhecidas inicialmente, é preciso calcular- las através do AR alvo e das dimensões da d página ideal.
Quando o Aspect Ratio do layout for menor que o AR alvo, a altura da página será a mesma do layout (B).
Sendo ARp, Hp e Wp respectivamente o Aspect Ratio, altura e largura da página alvo, e ARl, Hl e Wl o Aspect Ratio, Ratio altura e largura da página ideal gerada gerad por o algoritmo, as dimensões da página alvo podem ser obtidas de acordo com as fórmulas da Tabela 3.
Com a área da página alvo é possível calcular a área total de espaço em branco.
Para adaptar- la ao intervalo de zero a 1, conforme definido na função de avaliação, fazemos:
Assim, determina- se a porcentagem de espaço que haverá ao utilizar o layout numa página com o formato indicado.
Quanto maior o valor mais espaço em branco, ou seja, pior a página.
Por definição a melhor árvore deve ser a que possuir maior pontuação, sendo assim, a pontuação é dada por:
Pontuação 1 ­ Porcentagem_ de_ espaço_ em_ branco Através desta fórmula, o layout que possuir menor área de espaço em branco já adaptado ao AR predefinido será escolhido como melhor.
Como no algoritmo de correção de Li, o redimensionamento das imagens permite eliminar completamente o espaço em branco interno de uma página.
A o unir dois blocos de tamanhos ou formatos diferentes, gera- se espaço em branco.
Por exemplo, unindo duas imagens com alturas diferentes através de um corte vertical surgirá espaço em branco referente a a diferença das alturas, conforme a Figura 28.
O mesmo ocorre ao unir blocos com larguras diferentes através de um corte horizontal, gerando espaço em branco nas laterais do menor bloco de imagens.
A cada corte da árvore mais espaço em branco é gerado e, ao final, a página pode possuir uma grande área não aproveitada.
A Figura 29 apresenta a propagação do espaço em branco na união de blocos.
A grande variedade de tamanhos e Aspect Ratios de um conjunto de imagens afeta a página final e redimensionando as imagens é possível eliminar este problema.
Como resultado do redimensionamento das imagens na Figura 30, as imagens apresentarão a mesma altura, conforme a Figura 31.
Este ajuste deve ser realizado para cada nodo interno, eliminando o espaço em branco gerado na união de seus nodos filhos.
Em nodos com corte horizontal seus filhos têm suas larguras igualadas.
Para os dois blocos que formam a página (A) da Figura 32, por exemplo, ao alinhar as larguras tem- se como resultado a eliminação total do espaço em branco, como pode ser visto em (B).
Porém, ao realizar este ajuste o AR da página é afetado.
Em (B), a linha tracejada é o AR da página original (A), o Aspect Ratio da página gerada com o ajuste é exatamente o contorno das imagens.
Para ajustar blocos separados por um corte vertical, o processo é o mesmo, apenas deve- se igualar as alturas.
Em a Figura 33 (A) tem- se a página original e em (B) a página com o ajuste eliminando totalmente o espaço em branco.
Os cálculos para encontrar as dimensões finais de cada imagem são detalhados no trabalho de Li.
Apesar de o redimensionamento resolver o problema do espaço em branco, a diferença de AR entre o layout gerado e a página continua sendo um critério essencial para a avaliação, porém este não é o único fator a ser considerado.
Busca- se minimizar o redimensionamento relativo das imagens, mantendo as imagens próximas aos seus tamanhos relativos originais.
Para utilizar este critério é preciso encontrar um valor que represente a taxa de redimensionamento das imagens na página.
Para cada imagem é calculado um valor de redimensionamento que representa, em porcentagem, a mudança entre o seu tamanho original e final.
Todas as imagens iniciam com taxa de redimensionamento igual a 1, representando seu tamanho relativo original.
Para cada ligação com outro bloco (nodo) este valor é recalculado de acordo com o redimensionamento aplicado para remover a diferença entre os blocos.
Como as imagens são unidas em pares, se não possuírem as mesmas dimensões, uma será reduzida e outra ampliada.
A página ideal deve possuir a mínima diferença de redimensionamentos das imagens, ou seja, ao realizar uma união os dois blocos devem possuir o mínimo de diferença.
O intervalo entre a imagem que mais diminui e a que mais expande deve ser o menor possível.
Ambos os valores devem ser os mais próximos possíveis, conforme mostra a Figura 34.
A o fim, sabe- se o quanto cada imagem deve ser redimensionada.
Para definir um valor que represente a taxa de redimensionamento de toda a página, normaliza- se as taxas:
Em o melhor caso, onde as imagens não são redimensionadas, tanto a maior quanto a menor taxa possuem valor 1.
Substituindo na fórmula apresentada, temos:
Ou seja, quanto menor o valor, melhor a página.
Conforme a definição da função de avaliação, o melhor caso deve ser o mais próximo de 1.
Assim, a pontuação deste critério é dada por:
De a mesma forma que as páginas sem redimensionamento, é necessário comparar o AR gerado com o AR alvo.
Para isto é utilizada a relação:
Se os Ars forem iguais, a expressão resultará em 1.
Caso contrário, ao dividir o menor entre o AR alvo e o gerado por o maior, obtém- se um valor entre 0 e 1, representando a porcentagem de semelhança entre os formatos.
Este valor respeita o formato exigido por a função de avaliação, quanto mais alto o valor melhor o resultado.
Por fim, é preciso combinar os dois valores de forma a gerar uma única pontuação.
Como ambos os valores se encontram no intervalo entre zero e 1, a multiplicação dos mesmos pertence obrigatoriamente ao mesmo intervalo.
Considerando o melhor caso de cada critério, 1, a pontuação através da multiplicação dos valores também será 1.
Se qualquer um dos valores for menor que 1, a pontuação será penalizada.
Assim, a função de pontuação em páginas com redimensionamento de imagens dá- se através da multiplicação dos dois critérios:
Uma vez definidas as etapas do algoritmo é preciso interligar- las.
A Figura 35 apresenta o fluxo do algoritmo que tem início através do número de nodos internos.
Com esta informação o algoritmo B de Knuth gera a primeira árvore binária através dos arrays de ligações ls e rs, e as repassa para o módulo de geração de cortes.
Em este, a primeira combinação de cortes é repassada juntamente com as ligações para o segmento de montagem.
Este é responsável por transformar os valores numa árvore de cortes e adicionar as folhas, deixando a estrutura pronta para ser avaliada.
A árvore de cortes passa então por a avaliação, e se obtiver uma pontuação superior à atual (inicialmente zero), serão armazenados os valores das ligações (ls e rs) e a combinação de cortes (cs) que originou a árvore.
A o fim, a primeira árvore foi avaliada, porém é preciso garantir que não há mais árvores possíveis.
Para isto, verifica- se se todas as combinações de cortes foram geradas.
Se não, o algoritmo deve retornar à etapa e gerar a próxima combinação.
Caso todos os cortes já tenham sido avaliados, é verificado se ainda há árvores binárias a serem geradas.
De a mesma forma que os cortes, se houver, a próxima estrutura é gerada e o algoritmo é repetido.
Em caso negativo, o algoritmo encerra retornando a árvore de cortes com maior pontuação.
O algoritmo exaustivo foi aplicado em diferentes seleções de imagens e foram medidos o tempo de execução e a porcentagem de acerto do AR alvo.
Para um mesmo conjunto de imagens, foram gerados layouts com e sem redimensionamento.
Foi desenvolvida uma ferramenta em linguagem Java implementando os algoritmos desenvolvidos.
Todos os resultados apresentados a seguir foram gerados por a ferramenta num computador Intel i7 2.66 GHz com 8 gigabytes de RAM utilizando o sistema operacional Windows 7.
A Figura 36 apresenta duas páginas cujos layouts foram gerados por o algoritmo exaustivo com formato alvo esquerda está página gerada sem redimensionamento, onde se pode constatar o tamanho original de cada imagem.
A página da direita apresenta outro resultado do algoritmo para as mesmas imagens, porém, permitindo o redimensionamento.
A o comparar as duas páginas é possível ver o quanto o tamanho original de cada imagem foi alterado ao redimensionar- las.
O erro do AR gerado (diferença entre o AR gerado e o AR alvo) foi de 13% na página sem redimensionamento e de 4,3% na página com redimensionamento.
Em a Figura 37 os erros são de 1,4% sem redimensionamento e 2,9% com redimensionamento.
Páginas com pequeno número de imagens oferecem poucas opções para distribuição uma vez que estão limitadas a manter a ordem das imagens selecionadas.
Assim, muitas vezes não há como evitar que alguma imagem sofra grande redimensionamento.
Em a Figura 38 as páginas geradas possuem AR alvo igual a 1, ou seja, páginas quadradas.
Em a página com redimensionamento é possível ver o espaço em branco gerado por a diferença entre o AR do layout e o AR alvo acima e abaixo de o layout, pois o erro é de 7,1%.
Já a página sem redimensionamento não apresenta espaço em branco ao redor, pois possui erro de apenas 0,01%.
Também é possível verificar que as páginas possuem árvores de cortes diferentes.
A Figura 39 permite observar que o tempo para geração de páginas com redimensionamento é maior que para páginas sem, pois a avaliação de cada layout é mais simples quando não há redimensionamento.
Em a Figura 40, apesar de os resultados possuírem apenas duas imagens a mais que na Figura 39, o tempo para gerar- los é muito maior.
O rápido crescimento do número de árvores de cortes em relação a o número de imagens na página torna inviável a aplicação do algoritmo em mais que 12 imagens.
Gerar todas as árvores de cortes garante que o melhor layout possível que pode ser representado por árvore será encontrado.
Isto permite afirmar que os resultados deste algoritmo superam o algoritmo de Atkins, pois este gera apenas uma fração das árvores de cortes possíveis.
Assim, se o algoritmo de Atkins gerar a melhor árvore para um determinado caso, o resultado será o mesmo do algoritmo exaustivo.
Porém, se o resultado de Atkins não for o melhor, o algoritmo exaustivo apresentará um resultado superior.
Apesar de a garantia de que a melhor árvore será escolhida, o algoritmo exaustivo possui alto custo, limitando a quantidade de imagens por página.
Para estipular o número total de árvores de cortes deve- se inicialmente conhecer os valores para as duas etapas do processo:
Número de árvores binárias e número de combinações de cortes.
Knuth explica que o número total de árvores binárias segue os números de Catalan.
Estes números formam uma sequência que ocorre em diversos problemas de contagem e há diversas formas de serem obtidos:
Para n nodos internos, o número de árvores binárias possíveis é dado por:
O número total de árvores cresce muito rapidamente em relação a o número de nodos internos n, conforme apresentado na Figura 41.
Para cada árvore binária com n nodos internos existem 2 combinações de cortes, pois cada nodo pode ser H ou V. Ou seja, existem duas opções de cortes para o primeiro nodo, duas para o segundo e assim por diante.
Para obter o número N de árvores de cortes é preciso fazer a multiplicação do número de árvores binárias por o número de combinações de cortes.
Substituindo nas equações tem- se o número total de árvores de cortes dado por:
Se fosse permitido alterar a ordem das imagens, o custo seria ainda maior.
Sendo n o número de nodos internos, o número de folhas é n+ 1.
Supondo que as imagens estão numeradas de 1 a n+ 1, o número de possíveis ordens para as imagens seria dado por Para cada árvore de corte gerada deveriam ser avaliadas todas as possíveis ordens, logo, o custo final para páginas com imagens fora de ordem seria dado por:
Simplificando temos:
A Figura 42 apresenta um gráfico comparativo entre número de árvores binárias, árvores de cortes e árvores de cortes com folhas fora de ordem.
O número de árvores binárias para oito nodos internos é inferior a 2000, já para árvores de cortes o valor é próximo a 6000 árvores.
Em páginas com imagens fora de ordem, para seis nodos folha o número de árvores de cortes é superior a 95000 árvores.
Os tempos apresentados na Tabela 4 são referentes a todo o processo, incluindo a avaliação das árvores.
Embora os dados sejam aproximados, pode- se observar a inviabilidade de gerar todas as árvores para grandes conjuntos de imagens.
Algoritmo baseado em subdivisão Para viabilizar a geração de páginas com maior número de imagens, um segundo algoritmo foi desenvolvido e consiste na divisão do problema:
Dividir a seleção de imagens em subconjuntos e a página em regiões menores.
Em a Figura 43 (A) há um conjunto de imagens que devem ser distribuídas numa página com o formato indicado.
Para reduzir o custo divide- se o conjunto de imagens em subconjuntos menores e altera- se o formato da página (B).
A partir destes subconjuntos o algoritmo encontra a melhor distribuição para cada fração de página através do algoritmo exaustivo (C) e, ao final do processo, se faz a união das frações de página geradas (D).
A página será dividida de acordo com a seguinte regra:
Páginas com Aspect spect Ratio menor ou igual a 1 sofrem corte horizontal;
Ou seja, deve- se sempre dividir a página por a maior dimensão.
Em páginas quadradas, onde as dimensões são iguais, o corte pode ser tanto H quanto V. Optou-se por dividir- las horizontalmente para que a ordem das imagens fique mais próxima da ordem de leitura (cima para baixo).
Se as divisões da página forem feitas na menor dimensão, o AR das frações ficará cada vez mais distante do formato da página original, gerando áreas cada vez mais estreitas.
Isto pode ser visto na Figura 46, onde após 2 subdivisões a fração apresenta a mesma altura da página, porém largura quatro vezes menor.
Existem diversas formas de dividir um conjunto de imagens.
A Figura 47 apresenta um conjunto inicial de imagens e duas possíveis maneiras de dividir- lo.
A divisão por quantidade, em a qual se deseja que dois conjuntos com a mesma quantidade de imagens, e a divisão por área, em a qual busca- se que a soma das áreas das imagens de cada conjunto sejam o mais próximas.
A divisão por número de imagens pode apresentar grande diferença entre a área total das imagens nos subconjuntos.
Como a página será dividida em frações iguais, deseja- se que os subconjuntos ocupem áreas parecidas, equilibrando as metades da página final.
Logo, no algoritmo de subdivisão as imagens são divididas por área relativa:
Uma vez divididos o formato da página e o conjunto de imagens, utiliza- se o algoritmo exaustivo para gerar os layouts de cada fração de página.
Como resultado obtém- se duas árvores de cortes.
Para unir as duas partes geradas é feita a união das árvores de cortes, obtendo- se assim um único layout.
Para isto, um novo nodo raiz é inserido ligando as duas árvores, como apresenta a Figura 48.
O corte do novo nodo depende da forma que a página original foi dividida, se horizontalmente o nodo possuirá um corte H, se dividida verticalmente, um corte V. A nova árvore de cortes será o layout da página final.
Dividir o problema em dois viabiliza gerar páginas com até o dobro de imagens do algoritmo inicial, porém este número ainda pode ser pequeno para algumas aplicações.
É possível gerar páginas com número maior de imagens aplicando o processo de subdivisão recursivamente.
Inicialmente é preciso definir o número máximo de imagens por subconjunto.
O algoritmo exaustivo será aplicado diversas vezes, gerando árvores com, no máximo, o número definido de imagens.
Logo, o tempo de execução do algoritmo de subdivisão depende do tempo de resposta do algoritmo exaustivo para o número máximo de imagens.
A partir de os tempos medidos neste trabalho, optou- se por utilizar o número máximo de oito imagens por fração, permitindo que o algoritmo exaustivo seja aplicado centenas de vezes em poucos segundos.
Portanto, cada fração pode possuir oito imagens ou menos, mas não mais.
Se ao dividir um conjunto de imagens um subconjunto possuir mais de oito imagens, este será dividido novamente.
A Figura 49 apresenta um exemplo com vinte imagens de áreas iguais.
Inicialmente é feita a divisão em subconjuntos de dez imagens, continuando inviável de se resolver, pois o máximo é de oito imagens.
A cada divisão um novo nodo é criado e adicionado à estrutura.
Através da recursão os dois subconjuntos de dez são divididos em quatro grupos de cinco imagens, podendo ser resolvidos.
As árvores resultantes de cada subconjunto são ligadas aos nodos gerados por a subdivisão, formando assim uma única árvore.
A o aplicar o algoritmo de subdivisão, não há mais garantia que o resultado final é o melhor possível.
Apesar de cada fração de página possuir o melhor layout, não é possível garantir que sua união será o melhor layout para a página.
Assim, pode- se optar por um resultado preciso para poucas imagens, com o algoritmo exaustivo, ou uma aproximação para um grande número de imagens através do algoritmo de subdivisão.
A geração de páginas com centenas de imagens em poucos segundos deve- se ao fato de ser mais rápido encontrar n árvores com número de imagens N/ n, que encontrar uma única árvore com N imagens.
Por exemplo, uma seleção de 128 imagens possui 16 subconjuntos de oito imagens.
Supondo que o tempo aproximado para solucionar uma página com oito imagens é 0,02 segundos, para encontrar dezesseis árvores o tempo aproximado não chega a meio segundo.
Já encontrar uma única árvore para este 128 imagens é totalmente inviável.
Apesar de ser um algoritmo rápido, os resultados muitas vezes apresentam problemas visuais.
Quando os subconjuntos não atingem exatamente o AR alvo a página final aparenta ser uma coleção de páginas menores.
Em a Figura 50 é possível identificar diversas subpáginas como, por exemplo, as duas destacadas à direita.
Assim como no algoritmo exaustivo, pode- se permitir o redimensionamento das imagens, Eliminando completamente o espaço em branco, como na Figura 51.
Em páginas sem redimensionamento, foram elaborados algoritmos para corrigir os problemas visuais da subdivisão.
Estes algoritmos, chamados algoritmos de correção, são aplicados após obter- se o layout, aperfeiçoando- o.
Uma vez gerada a árvore de cortes, independente do algoritmo utilizado, é possível utilizar as dimensões das imagens para calcular suas coordenadas e as dimensões da página alvo.
A o obter estes valores a árvore de cortes pode ser descartada e a página alvo é então gerada.
Um exemplo de processo de montagem de página é o BRIC apresentado por Atkins, responsável por encontrar as coordenadas de cada imagem.
Para solucionar o problema visual gerado gerad por o algoritmo de subdivisão foram desenvolvidos algoritmos para ser aplicados após converter o melhor layout num conjunto de coordenadas.
Os algoritmos de correção também podem ser aplicados a resultados do algoritmo exaustivo, buscando aperfeiçoar- los.
Estes algoritmos utilizam apenas nas as dimensões da página e as coordenadas das imagens.
Uma forma de solucionar o problema do espaço em branco isolado é espalhar as imagens na página, dividindo o espaço em branco igualmente entre elas.
Isto pode ser feito centralizando as imagens no espaço disponível ao seu redor.
As s imagens são deslocadas uma um a uma até que todas estejam centralizadas.
A Figura 52 apresenta uma página onde será aplicado espalhamento.
O algoritmo tem inicio selecionando a primeira imagem a ser ajustada.
A centralização é feita inicialmente no n eixo X, para isto verifica- se se a distância dos objetos mais próximos à esquerda e à direita da imagem no mesmo intervalo de Y da imagem.
Ou seja, os primeiros objetos com que a imagem irá colidir se for deslocada sobre o eixo X. Estes objetos podem ser tanto nto imagens quanto a borda da página.
Em a Figura 53 (A) a imagem 1 possui dois &quot;braços «que representam a distância aos objetos mais próximos no eixo X. Uma vez feito o ajuste no eixo X, o mesmo processo é repetido para o eixo Y. A distância dos objetos mais próximos é calculada, conforme o item (A) da Figura 54, e a imagem é centralizada, item (B).
Com a primeira imagem centralizada, o algoritmo seleciona a próxima imagem.
Muitas vezes ao deslocar uma imagem, os braços de uma imagem já ajustada são afetados.
Isto pode ser visto na Figura 55, a imagem 2 ao ser ajustada em X será deslocada para a esquerda (A), (A) aproximando- se da imagem 1 (B).
O algoritmo funciona através de iterações, ou seja, um deslocamento em cada eixo para cada imagem da página.
Uma imagem que já foi ajustada não será deslocada novamente até que todas as outras passem por o mesmo processo.
O número de iterações é configurável, porém, geralmente, uma única iteração já apresenta melhoras no resultado.
Em a Figura 56, a página original (A) é ajustada por apenas uma iteração do algoritmo de espalhamento, obtendo- se como resultado a página (B).
Em a Figura 57, o item (A) apresenta uma página gerada por o algoritmo de subdivisão em a qual existem áreas em branco isoladas.
A o aplicar a correção por espalhamento com cinco iterações, obtém- se como resultado a página (B), onde não é mais possível identificar subpáginas resultantes da subdivisão.
O espaço em branco está dividido de forma mais uniforme, fazendo com que as imagens ocupem melhor a página.
O algoritmo de correção por expansão tem como objetivo preencher o espaço em branco existente ao redor de as imagens através de redimensionamento.
Diferente das páginas geradas com redimensionamento, este processo é realizado após o layout estar definido, utilizando apenas as coordenadas e dimensões das imagens.
A proporção entre as imagens é mantida, ou seja, todas as imagens sofrem a mesma taxa de redimensionamento.
Verifica- se para cada imagem o quanto esta pode ser ampliada sem invadir o espaço de outra imagem.
Para isto, assim como no algoritmo de espalhamento, utilizamse os &quot;braços «das imagens.
Inicialmente calcula- se a menor distância das quatro bordas da imagem até os objetos mais próximos, conforme a Figura 58.
Uma vez calculadas as dimensões dos braços, sabe- se quanto espaço disponível a imagem possui ao seu redor.
É preciso então definir o quanto a imagem pode crescer.
Se a imagem ocupar todo espaço disponível, é possível que as imagens vizinhas fiquem sem espaço para serem expandidas.
Em a Figura 59 a primeira imagem ocupa todo o espaço que estava disponível.
As três imagens em contato com a primeira não poderão ser ampliadas, senão irão invadir o espaço da primeira imagem.
Cada imagem deve deixar espaço para que as demais possam crescer.
Assim, permite- se que a imagem seja ampliada apenas até atingir a metade de um de seus braços, como apresentado na área tracejada da Figura 60.
Para cada imagem é calculado o valor máximo em porcentagem que a mesma pode ser aumentada sem que ultrapasse o limite definido.
A o fim, a menor taxa de redimensionamento será aplicada igualmente a todas as imagens, garantindo que a proporção será mantida sem sobreposição de imagens.
Se a imagem que obteve o menor valor de escala sofrer redimensionamento superior ao indicado, irá invadir o espaço reservado a outra imagem, assim justifica- se o uso de sua taxa.
Para que as imagens possam aproveitar melhor o espaço ao seu redor, é importante que o espaço em branco esteja distribuído igualmente.
Para isto, antes de executar o algoritmo de expansão, utiliza- se a correção por espalhamento.
Assim, pode- se definir uma iteração deste algoritmo da seguinte forma:
Realiza correção por espalhamento;
Para cada imagem calcula- se o valor máximo de escala que pode ser aplicado;
Aplica o menor valor de escala encontrado a todas as imagens da página.
A cada iteração as imagens são espalhadas novamente, equilibrando o espaço em branco existente e permitindo que o algoritmo tente fazer uma nova expansão.
Não é preciso definir um número de iterações, o algoritmo será executado enquanto as imagens ainda puderem ser redimensionadas.
Quando uma imagem atinge uma distância mínima de outra, não é mais possível expandir- las, logo o algoritmo é encerrado.
A distância mínima, também chamada de margem, entre duas imagens é configurável.
A Figura 61 apresenta a página original (A) e o resultado da correção através de expansão (B).
A distância mínima entre as imagens neste exemplo é zero, ou seja, o algoritmo de correção termina quando houver imagens em contato.
A Figura 62 apresenta o resultado da correção por expansão de uma página gerada por o algoritmo baseado em subdivisão.
O algoritmo de subdivisão foi aplicado para diferentes seleções de imagens e, para cada página gerada foram aplicados os algoritmos de correção.
Em a Figura 63 (A) é apresentada uma página com 25 imagens gerada através de subdivisão.
Em (B) a mesma página é ajustada através de cinco iterações da correção por espalhamento e em (C) através de expansão.
Os formatos, dimensões e layouts das páginas (B) e (C) são idênticos aos da página (A).
Em este caso o erro foi de 13,5% e o tempo para a geração das páginas foi 0,02 segundos.
O tempo da correção, aplicada após a geração, foi insignificante.
Em a Figura 64 é apresentada uma página gerada em 0,03 segundos, com as mesmas imagens da Figura 63, porém permitindo o redimensionamento das images.
Permitindo o redimensionamento, para as mesmas 50 imagens obtêm- se a página da Figura 66.
O tempo de geração foi de 0,03 segundos.
Em a Figura 67 o formato alvo foi alterado 1.
As páginas geradas possuem cem imagens e foram geradas radas em 0,007 segundos.
As correções por espalhamento e expansão foram realizadas em 0,001 e 0,041 segundos, respectivamente.
A o comparar (B) e (C), percebe- se se que não houve grande expansão das imagens.
Em layouts onde as imagens estão muito to próximas não há espaço para ampliar- las, ampliá, logo, como o algoritmo de espalhamento é aplicado antes da expansão, os resultados ficam semelhantes.
A página apresentada na Figura 70 contém 400 imagens redimensionadas.
O erro é de apenas 1,7% e o tempo de geração foi de 0,04 segundos.
A falta de ferramentas para geração de layouts dificulta a avaliação dos resultados obtidos por os algoritmos desenvolvidos.
Além de isto, a definição de uma boa página varia de acordo com as preferências de cada pessoa.
Assim, decidiu- se realizar um teste com usuários através da aplicação de um questionário, verificando sua preferência.
O objetivo principal foi estabelecer uma comparação entre os resultados obtidos e as soluções utilizadas na maiorias dos softwares atuais:
Templates e colagens.
Foram elaboradas quinze questões divididas em três etapas: (5 questões) Comparação de páginas sem redimensionamento geradas por o algoritmo exaustivo e o uso de templates por a ferramenta Hp Photosmart Essential; (
5 questões) Comparação de páginas com redimensionamento geradas por o algoritmo exaustivo e mosaicos gerados por o software Picasa; (
5 questões) Comparação entre páginas geradas por subdivisão sem correção, com correção por espalhamento e com correção por expansão.
A ferramenta Hp Photosmart Essential possui uma coleção de templates para diferentes números de imagens.
Para adaptar as imagens às suas lacunas, muitas vezes há redimensionamento e recorte das imagens.
Outro problema comum é não existir um template para o número selecionado de imagens.
Em estes casos, utiliza- se um template para número superior de imagens, deixando as lacunas restantes em branco.
Ainda assim, um uso de templates é o que mais se assemelha aos resultados do algoritmo exaustivo.
Os mosaicos do Picasa possuem uma proposta parecida com a geração de páginas com redimensionamento.
As imagens são redimensionadas de forma a cobrir por completo uma página de dimensões fixas, porém configuráveis.
Não há cuidados quanto a a ordem das imagens ou o quanto cada imagem será redimensionada.
Além de isto, as imagens podem ser recortadas para que se obtenham dimensões idênticas às da página.
As duas primeiras etapas, comparando os resultados do algoritmo exaustivo com páginas geradas por ferramentas, apresentaram duas páginas lado a lado.
A cada participante da pesquisa foi solicitado que escolhesse a página de sua preferência.
Em as duas primeiras etapas, a página escolhida como melhor recebeu pontuação 1 e a segunda página pontuação 2, estabelecendo um ranking entre as páginas.
A o fim, somou- se toda a pontuação recebida em cada categoria.
A forma de geração com menor pontuação representa a preferência da maioria dos usuários.
As 5 questões de cada categoria foram aplicadas a 24 usuários, obtendo um total de 120 respostas para cada etapa.
A melhor pontuação possível para uma forma de geração é 120, recebendo 1 em todas as respostas, e a pior pontuação é 240, recebendo sempre 2.
As pontuações de cada forma de geração são apresentadas na Figura 71.
Em a categoria sem redimensionamento o algoritmo exaustivo ficou mais bem colocado, obtendo 172 pontos contra 188 pontos da ferramenta Hp Photosmart Essentials.
Porém, na categoria com redimensionamento, o software Picasa obteve 22 pontos de vantagem sobre o algoritmo exaustivo, recebendo 169 pontos.
Embora a diferença entre as pontuações não seja grande em páginas sem redimensionamento, os resultados do algoritmo exaustivo obtiveram melhor colocação, sendo a preferência da maioria dos participantes.
Porém, em páginas com redimensionamento, o algoritmo exaustivo obteve um desempenho abaixo de os mosaicos do software Picasa.
Como os participantes não conheciam previamente as imagens das páginas, acredita- se que não perceberam ou não deram importância a fatores como recorte ou redimensionamento das imagens feitos por as ferramentas.
Se estivessem utilizando suas próprias fotografias possivelmente perceberiam a perda de informação, levando- os a repensar suas escolhas.
O questionário aplicado permitiu aos participantes deixar opiniões ou justificativas de escolhas.
A respeito de páginas sem redimensionamento apenas três pessoas justificaram suas escolhas, afirmando critérios como simetria, organização e alinhamento das imagens.
Como os templates possuem lacunas predefinidas é possível deixar- las perfeitamente alinhadas, pois posteriormente as imagens serão adaptadas para caberem em seus espaços.
A o manter as imagens como são originalmente, não há como alinhar- las se possuírem dimensões diferentes, logo, neste critério o algoritmo exaustivo fica em desvantagem.
Quanto a as páginas com redimensionamento não houve justificativas.
Porém, sabese que nos mosaicos gerados por o Picasa não há apenas redimensionamento das imagens, mas também recorte, permitindo que qualquer página seja completamente ocupada, independente de formato ou dimensão.
Já o algoritmo exaustivo, embora elimine o espaço em branco no interior da página, nem sempre atinge o formato de página desejado, pois nem sempre isto é possível sem recorte ou deformação das em branco, conforme pode ser visto na Figura 72.
Embora nenhum participante da pesquisa tenha feito referência a este problema, acredita- se que seja um dos motivos da vantagem do software Picasa sobre o algoritmo exaustivo.
A página da Figura 72 foi apresentada numa das cinco questões respondidas em relação a páginas com redimensionamento.
Em esta questão, 19 pessoas deram preferência à página gerada por o Picasa, sendo que a diferença total de pontuação entre as duas formas de geração nas cinco questões foi de 22 pontos.
Ou seja, esta questão foi responsável por distanciar a preferência por o software Picasa, pois nas demais questões a diferença entre as duas formas de geração foi de apenas 2 votos.
Assim, em páginas geradas por o algoritmo exaustivo onde o AR é igual ou muito próximo a o da área de exibição, as formas de geração são praticamente equivalentes.
Isto pode ser percebido no exemplo da Figura 73.
A terceira etapa do questionário aplicado tinha como objetivo traçar uma relação de preferência quanto a as páginas geradas com subdivisão, verificando a necessidade ou não dos algoritmos de correção.
Os participantes responderam cinco questões, cada uma apresentando três páginas lado a lado, sendo uma sem correção, uma com correção por espalhamento e a última corrigida por expansão.
Foi solicitado aos participantes que numerassem as páginas de 1 a 3, sendo 1 a melhor página e 3 a pior.
Assim como nas primeiras etapas foi feito um ranking dos algoritmos somando suas pontuações, sendo a melhor pontuação total possível 120 e a pior 360.
A pontuação de cada categoria pode ser conferida na Figura 74 e, assim como nas primeiras etapas, quanto menor a pontuação, melhor a colocação do algoritmo em questão.
Em 115 das 120 respostas desta etapa, a página que recebeu pontuação 1, ou seja, a melhor, apresentava algum tipo de correção, totalizando 95,8% da preferência dos usuários.
De entre os algoritmos de correção, deu- se preferência ao algoritmo por espalhamento, pontuando 207 pontos, embora a correção por expansão também tenha ficado mais bem colocada que a página sem correção.
Com estes dados, justifica- se a aplicação destes algoritmos em páginas geradas através de subdivisão.
A aplicação do questionário permitiu comparar resultados do algoritmo exaustivo e de ferramentas atuais, além de validar a necessidade dos algoritmos de correção.
Outros algoritmos, como o de Atkins, não estão disponíveis para que seja possível comparar os resultados visualmente, porém algumas afirmações podem ser feitas.
Os resultados obtidos por o algoritmo exaustivo serão sempre melhores ou iguais aos resultados do algoritmo de Atkins.
Como Atkins gera uma quantidade reduzida de árvores de cortes, pode- se dizer que toda árvore gerada por o seu algoritmo também será gerada por o algoritmo exaustivo, porém, nem toda árvore gerada por o algoritmo exaustivo será avaliada por Atkins.
As árvores de cortes geradas por o algoritmo de Atkins representam um subconjunto de todas as árvores.
Assim, se uma árvore gerada por Atkins for o melhor resultado, o algoritmo exaustivo também a encontrará, caso contrário o algoritmo exaustivo terá melhor desempenho.
O algoritmo de Atkins pode ser comparado ao algoritmo de subdivisão, uma vez que ambos são baseados em heurísticas.
Não há como saber qual irá obter o melhor resultado, mas sabe- se que o número de árvores avaliadas por Atkins cresce muito mais rapidamente que as árvores avaliadas por subdivisão.
Assim, Atkins pode garantir algumas dezenas de imagens, já o algoritmo baseado em subdivisão chega a centenas.
Outro algoritmo relacionado ao problema é o de Li que não gera layouts, apenas os corrige.
Porém, ao gerar páginas com redimensionamento relativo das imagens através do algoritmo exaustivo, o espaço em branco da página é completamente eliminado, tornando desnecessária a aplicação do algoritmo de Li no layout gerado.
Além de isto, calcular o redimensionamento durante a criação do layout permite prever como o redimensionamento afetará o formato da página final, possibilitando a escolha de um layout mais adequado.
Em ambos os algoritmos, exaustivo e baseado em subdivisão, um algoritmo semelhante ao de Li é aplicado durante a geração do layout, eliminando a necessidade de uma correção após a geração.
Embora a aplicação do questionário não tenha dado grande destaque às páginas geradas por os algoritmos desenvolvidos, permitiu identificar pontos de comparação.
Porém, existem outros fatores que não puderam ser comparados, como, por exemplo, páginas com centenas de imagens, pois neste caso não há templates disponíveis.
A geração automática de layouts é um problema amplo com muito a ser estudado.
Embora existam diversas soluções e abordagens, todas apresentam limitações.
Em este trabalho foram desenvolvidas duas formas diferentes das existentes para solucionar o problema em questão.
A primeira forma, o algoritmo exaustivo, é capaz de obter um resultado preciso para um numero reduzido de imagens.
Já a segunda, algoritmo de subdivisão, pode gerar páginas com centenas de imagens rapidamente embora não haja garantia de um bom resultado.
Os resultados obtidos neste trabalho podem ser melhorados de duas formas:
Encontrando novos critérios para avaliação de páginas ou através de algoritmos de correção, aplicados após a geração da página.
Avaliar páginas é uma tarefa complicada, é preciso encontrar regras que definam a estética de uma página, porém a definição de estética varia de pessoa para pessoa.
Isto pôde ser percebido na aplicação do questionário de avaliação dos resultados, em nenhuma questão houve unanimidade ao escolher uma página como a melhor.
O algoritmo exaustivo foi desenvolvido em módulos, permitindo que novas regras de escolha de layouts sejam propostas sem que seja necessário alterar o funcionamento do algoritmo.
O teste com os usuários permitiu verificar a importância de algoritmos de correção.
Estes algoritmos possuem um funcionamento simples e podem ser aplicados rapidamente sobre uma página qualquer.
Em este trabalho foram desenvolvidas duas formas de correção, porém, existem diversas outras possibilidades para explorar.
Independente da aparência dos resultados, a abordagem utilizada no algoritmo exaustivo supera os algoritmos relacionados quanto a a precisão.
Comparado a qualquer algoritmo de gere layouts através de árvores de cortes, se utilizarem os mesmos critérios, o algoritmo exaustivo será melhor ou igual.
Já o algoritmo de subdivisão supera algoritmos como o de Atkins quanto a o número máximo de imagens para o qual o algoritmo é capaz de gerar um layout em tempo viável.
Em ferramentas atuais, o uso de templates é uma solução pobre.
Existem infinitas combinações de imagens com diferentes dimensões, adaptar- las para caber numa lacuna fixa é uma solução inaceitável.
É necessário que os layouts sejam criados automaticamente de acordo com às imagens selecionadas.
O Picasa apresenta algumas boas alternativas, embora permita recorte das imagens.
Seus mosaicos permitem a criação de paginas com centenas de imagens em pouco tempo.
Porém, não permite uma forma de criar páginas sem redimensionamento das imagens ou uso de templates.
A grande dificuldade encontrada neste trabalho foi avaliar os resultados obtidos.
A falta de opções para fazer comparações dificultou que alternativas fossem propostas.
Por serem resultados visuais, se tornou complicado medir numericamente a qualidade de cada resultado.
É necessária a criação de métricas para avaliação de páginas.
Acredita- se que os algoritmos desenvolvidos contribuem como soluções do problema de criação de layouts.
Fica em aberto a proposta de novos critérios de avaliação de páginas e outros algoritmos de correção.
