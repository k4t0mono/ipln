Um documento de especificação de requisitos de software (Software Requirements Specification -- SRS) é decisivo para o desenvolvimento de um bom produto final.
A indústria de software vem demonstrando crescente interesse por a engenharia de requisitos (Er), isto é, entender o que se deseja construir antes de começar a fazer- lo.
Os requisitos de software constituem a base a partir de a qual a qualidade é medida.
Assim, a falta de conformidade com eles pode significar falta de qualidade.
Existem diversas abordagens para escrever um SRS e especificar casos de uso.
Os requisitos, SRS e especificação de casos de uso podem ter diferentes aspectos de qualidade, tais como, legibilidade, integralidade, consistência, não ambigüidade, etc..
As métricas desempenham um papel essencial na detecção de defeitos dos requisitos, fornecendo meios para a visualização de discrepâncias e a identificação de pontos fora de uma situação projetada.
A literatura apresenta métricas que são aplicadas nos requisitos, ou nos casos de uso, porém estas não avaliam a qualidade do mapeamento.
Em esse sentido, este trabalho tem como principal objetivo propor um modelo para a avaliação da qualidade da tradução dos requisitos para especificação de casos de uso.
Fornece informações importantes do SRS para especificar casos de uso e identificar erros e/ ou ausência de elementos no mapeamento, fazendo com que a reavaliação seja feita somente nos pontos que apresentam problemas.
A principal contribuição do modelo é permitir a geração de especificação de casos de uso consistente e de qualidade, através da descoberta de falhas no mapeamento e descoberta de requisitos ausentes no SRS.
Palavras-Chave: Requisitos.
Especificação. Casos de Uso.
Qualidade. Atributos.
Métricas. A indústria de software vem demonstrando crescente interesse em engenharia de requisitos (Er), isto é, entender o que se deseja construir antes de começar a fazer- lo.
Isso porque há a percepção de que o tempo utilizado no entendimento do problema é um excelente investimento.
Os requisitos de software constituem a base a partir de a qual a qualidade é medida.
Portanto, a falta de conformidade aos requisitos pode significar falta de qualidade.
Os requisitos de software definem o que um sistema deve fazer e sob quais circunstâncias deve operar.
Determinar e gerenciar os requisitos são atividades de grande importância no processo de desenvolvimento de um software, pois uma vez que os requisitos estejam incorretos, inconsistentes ou incompletos, o sistema, provavelmente, não atenderá às reais necessidades do cliente.
Um dos artefatos gerado, durante o desenvolvimento de software, é o documento de especificação de requisitos (Software Requirements Specification ­ SRS).
Conceitua SRS como a atividade de traduzir as informações coletadas durante a atividade de análise num documento que defina um conjunto de requisitos.
Segundo e, para que o SRS seja considerado de qualidade, ele deve ser:
Completo, consistente, não ambíguo, correto, entre outros atributos.
Os casos de uso são técnicas eficazes e de fácil compreensão para expressar os requisitos funcionais de um sistema.
Segundo, um caso de uso é um &quot;documento narrativo que descreve a seqüência de eventos de um ator que usa um sistema para completar um processo».
Os casos de uso são compostos principalmente de sentenças em linguagem natural (LN), e o uso de LN descreve o comportamento de um sistema que é sempre um ponto crítico, devido a as ambigüidades inerentes que se originam das diferentes interpretações de sentenças em LN.
A qualidade dos requisitos é um fator essencial para o sucesso dos projetos de desenvolvimento de software e a realização da qualidade de requisitos é a primeira etapa para a qualidade do software.
Por isso é tão importante avaliar a qualidade dos requisitos.
As métricas são os meios para esta avaliação.
Os requisitos podem ter diferentes aspectos de qualidade, tais como, legibilidade, integralidade, etc..
As métricas são definidas com a finalidade de medir a qualidade total de um requisito.
Podem ser aplicadas nos requisitos expressos em linguagem natural e, em casos de uso, através dos atributos e indicadores de qualidade.
As métricas desempenham um papel essencial na detecção de defeitos dos requisitos, fornecendo meios para a visualização de discrepâncias e identificação de pontos fora de uma situação projetada.
Existem técnicas que auxiliam na elaboração das métricas.
A abordagem GQM (Goal, Question, Metric), segundo Sommerville, tem como objetivo auxiliar a decidir como as medições devem ser feitas e como devem ser utilizadas.
Goal significa objetivo (meta) e representa o que a organização está tentando alcançar.
Question representa as questões que uma meta gera, quando definida.
Metric são as métricas que deverão reger as medições a serem coletadas para que as questões possam ser respondidas e para que seja confirmado se a meta foi atingida ou não.
Verificou- se que não existem modelos nem ferramentas que analisam a qualidade do mapeamento dos requisitos para especificação dos casos de uso.
De essa forma, este trabalho visa identificar os elementos envolvidos num modelo de qualidade de requisitos, tais como a estrutura da especificação dos requisitos e os atributos de qualidade.
A partir de isso, propor um modelo que permita a avaliação da qualidade do mapeamento de requisitos para especificação de casos de uso.
Para a definição do modelo, uma pesquisa na literatura foi realizada visando à identificação das informações do SRS necessárias para a especificação de casos de uso, e de atributos e métricas aplicadas na análise da qualidade dos requisitos.
A partir de essa pesquisa, foi feita uma adaptação das métricas de qualidade para que as mesmas pudessem ser aplicadas na abordagem proposta.
Por fim, foi construído o modelo que avalia a transcrição de requisitos para casos de uso.
O estudo realizado neste trabalho tem como objetivo geral desenvolver um modelo para avaliação da qualidade do mapeamento de requisitos para especificação de casos de uso.
Como objetivos específicos têm- se:·
Aprofundar o estudo teórico sobre especificação de requisitos, métricas e atributos de qualidade de requisitos de software.·
Identificar informações necessárias do SRS para especificação de casos de uso consistentes e de qualidade.·
Identificar os atributos e métricas de qualidade que serão aplicados no mapeamento.·
Aplicar o modelo proposto em documentos de especificação de requisitos e casos de uso correspondentes.
O trabalho apresentado neste documento foi realizado por meio de várias etapas, as quais estão representadas na Figura 1 e são descritas a seguir:
Etapa 1: Em esta etapa realizou- se o levantamento bibliográfico e estudo do referencial teórico que permitiu aprofundar os conhecimentos sobre qualidade de requisitos e SRS.
Incluíram estudos sobre especificação de requisitos e casos de uso;
Métricas e atributos de qualidade dos requisitos.
Etapa 2: Aqui foram estudadas as informações presentes no SRS e na especificação de casos de uso.
A partir desses estudos, foi criado o modelo de Mapeamento que reúne as informações dos dois documentos, com o objetivo de identificar mais claramente como os elementos do SRS e casos de uso se relacionam.
Etapa 3: Aqui os resultados das etapas 1 e 2 foram analisados e identificou- se as informações recomendáveis do SRS para, a partir de ele, especificar os casos de uso.
Identificaram- se também os atributos e métricas de qualidade, onde os mesmos foram adaptados para que fossem aplicados na tradução.
Etapa 4: Baseado na etapa 3, foi proposto um modelo para avaliar a qualidade do mapeamento de requisitos para especificação de casos de uso foi proposto.
O modelo foi aplicado num conjunto de documentos de especificação de requisitos e casos de uso correspondentes.
O restante deste documento está estruturado da seguinte forma:
O capítulo 2 fornece uma visão geral sobre qualidade da especificação dos requisitos.
Ainda, descreve conceitos relacionados à engenharia de requisitos, apresenta atributos e métricas que são aplicadas no SRS e sentenças dos requisitos.
Apresenta também a estrutura do SRS.
Em o capítulo 3, é apresentada uma visão geral sobre a qualidade da especificação dos requisitos, bem como o template de especificação dos mesmos.
Em o capítulo 4, é apresentada a técnica GQM, adotada neste trabalho para a adaptação das métricas.
Em o capítulo 5, são apresentados os principais trabalhos relacionados.
O capítulo 6 descreve o modelo de Mapeamento feito a partir de a análise do SRS e da especificação de casos de uso.
Em o capítulo 7, o modelo proposto é detalhado.
O capítulo 8, apresenta a aplicação do modelo.
Por fim, no capítulo 9, apresentam- se as considerações finais sobre o tema e enfocam- se os aspectos relacionados às contribuições e às limitações deste estudo.
Concluí- se destacando rumos para futuras pesquisas na área.
Este capítulo trata de alguns conceitos relacionados à Engenharia de Requisitos.
Aspectos referentes à especificação de requisitos com qualidade, bem como a estrutura de SRS.
São descritas as métricas aplicadas no SRS, relevantes para o contexto deste trabalho.
Engenharia de Requisitos (Er) é um amplo campo inserido no contexto da Engenharia de Software.
Compreende um processo que envolve todas as atividades necessárias para criar e manter a documentação de requisitos do sistema.
É a disciplina que procura sistematizar o processo de definição de requisitos.
Sua função principal é aperfeiçoar os processos para o gerenciamento do ciclo de vida dos requisitos.
Aborda um ponto fundamental do desenvolvimento de software:
A definição do que produzir.
Tem sido identificada como uma fase crucial por tratar de conhecimentos não apenas técnicos, mas também gerenciais, organizacionais, econômicos e sociais, além de estar intimamente associada à qualidade do software.
As atividades da Er vão desde a idéia de desenvolver um software até a modelagem conceitual do que será desenvolvido.
A Er é definida em função de suas atividades principais, que são o entendimento de problemas, a determinação de soluções e a especificação de uma solução testável, compreensível, manutenível e satisfatória às diretrizes de qualidade do projeto.
Descreve cinco passos distintos para a Er, quais sejam:
Elicitação de requisitos, análise e negociação de requisitos, documentação de requisitos, modelagem do sistema e validação de requisitos.
Segundo, os requisitos de software derivam de necessidades de usuários para resolver algum problema.
Os requisitos são descrições dos principais recursos de um produto de software, seu fluxo de informações, comportamento e atributos, bem como facilidades no nível de usuário ou restrições específicas do sistema;
Definem os serviços que o sistema deve prover e sob quais circunstâncias deve operar, mas não descrevem como deve ser feito.
Requisitos de alta qualidade são claros, completos, sem ambigüidade, implementáveis, consistentes e testáveis.
Os requisitos que não apresentam essas qualidades são problemáticos:
Eles devem ser revistos e renegociados com os clientes e usuários.
Os requisitos podem ser funcionais ou não funcionais.
Os requisitos funcionais definem ações principais, identificando as atividades do sistema ou o componente do sistema;
Já os requisitos não funcionais definem as atividades de controle e os atributos, planejando a engenharia humana e a garantia da qualidade;
Em suma, descrevem as facilidades do sistema, sendo diretamente ligados aos aspectos de fatores psicológicos.
A não consideração desses fatores na análise de requisitos constitui uma das principais razões de uma eventual insatisfação do usuário com relação a um produto.
Segundo, a qualidade de requisito de software é o primeiro passo para a qualidade do software.
Existe uma série de técnicas para avaliação da qualidade dos requisitos.
As técnicas disponíveis prestam- se a medir atributos de qualidade tanto de requisitos funcionais quanto de não funcionais, incluindo aqueles que são diretamente associados a ambientes e aplicações de realidade virtual.
Ainda segundo, como qualquer outro processo de avaliação, a avaliação de qualidade dos requisitos de software em linguagem natural (LN) também precisa de um modelo de qualidade que deve conter um jogo de atributos de qualidade.
Os modelos de qualidade de requisitos de software, em idioma natural, devem ser quantitativos, ou seja, devem permitir a coleta de métricas para descobrir defeitos e corrigir- los.
O objetivo da avaliação é revisar se o que foi especificado realmente representa o domínio do problema, isto é, se, de fato, retrata as necessidades do sistema.
É importante que essa fase envolva os stackhoders1 que atuaram nas fases anteriores, para que haja uma validação e verificação consistente dos requisitos identificados e descritos.
Os atributos de qualidade aplicados nos requisitos são, basicamente, os mesmos aplicados na avaliação do SRS.
Alguns atributos de qualidade são descritos abaixo:
Não Ambigüidade:
Cada requisito deve possuir apenas uma interpretação Completude:
É a capacidade de cada requisito especificar claramente seu assunto, objetivo.
Consistência: É a capacidade de cada requisito não ser contraditório a outro Correção/ Exatidão:
É a capacidade do requisito estar correto O requisito é o ponto inicial para cada etapa do desenvolvimento, assim, os requisitos de má qualidade podem causar graves conseqüências para o processo inteiro do desenvolvimento.
Por isso é tão importante avaliar a qualidade dos requisitos.
As métricas são os meios para essa avaliação.
Os requisitos podem ter diferentes aspectos de qualidade, tais Para, uma métrica será útil se usada para medir e controlar produtos, processos e recursos.
É muito importante que as métricas sejam compreendidas como meios de controle do desenvolvimento do software e não como meios para a avaliação de pessoal.
A seguir, são apresentadas algumas métricas aplicadas para avaliar a qualidade das sentenças dos requisitos.
Um stakeholder é qualquer grupo ou indivíduo que pode afetar ou ser afetado por a obtenção dos objetivos da organização.
Frases vagas $= NVag/ Nreq Onde:
NVag = nº. De sentenças que contém palavras vagas Nreq = nº.
De sentenças Freqüência de Comentário $= Nc/ Ns Onde:
Nc = nº. De sentenças comentadas Nreq = nº.
De sentenças Multiplicidade $= Nmul/ Nreq Onde:
Nmul = nº. De sentenças que contém mais de um verbo principal Nreq = nº.
De sentenças Opcionalidade $= Nopt/ Nreq Onde:
Nopt = nº. De sentenças que contém partes opcionais.
Nreq = nº. De sentenças Subjetividade $= Nsub/ Nreq Onde:
Nsub = nº. De sentenças que contém opiniões pessoais.
Nreq = nº. De sentenças Os valores das métricas variam entre 0 (totalmente desqualificado em relação a o atributo em questãototalmente qualificado em relação a o atributo em questão).
Um dos artefatos, gerado durante o desenvolvimento de software, é o documento de especificação de requisitos.
É uma declaração formal de requisitos de clientes, usuários finais e desenvolvedores de software.
É uma especificação do que é requerido a um software fazer (não como).
Conceitua especificação de requisitos de software (Software Requirements Specification ­ SRS) como a atividade de traduzir as informações coletadas durante a atividade de análise num documento que defina um conjunto de requisitos.
Em esse documento, podem ser incluídos dois tipos de requisitos:
Requisitos de usuário e requisitos de sistema, onde os requisitos de usuário são declarações abstratas dos requisitos de sistema para o cliente e os usuários finais;
E os requisitos do sistema são descrições mais detalhadas da funcionalidade a ser fornecida.
Existem diversas abordagens para escrever um SRS.
O Padrão IEEE Std 830 1998 descreve uma estrutura genérica para o SRS, ilustrado na Figura 2.
O padrão do IEEE pretende ser aplicado numa variada gama de documentos de requisitos.
Em geral, nem todas as partes do documento são necessárias para todos os documentos de requisitos.
Cada organização deverá adaptar o padrão de acordo com o tipo de sistema que desenvolve.
A seguir uma breve descrição de cada campo do SRS:
Visão geral dos documentos de requisitos.
SRS e como o mesmo está organizado.
Requisitos. -- Verificação dos dados de entrada. --
Seqüência exata das operações. --
Respostas a situações anormais.
Numéricos estáticos e dinâmicos colocados no software, ou na interação humana com o software ao todo.
Por exemplo, requisitos numéricos estáticos podem ser o número de terminais que o sistema suporta;
E requisitos numéricos dinâmicos incluem o número de transações processadas.
Quando os apêndices são incluídos, o SRS deve explicitar se eles são ou não considerados parte dos requisitos.
Em geral, a qualidade do SRS é um fator que contribui para o sucesso, garantindo a relação custo-benefício, de um software que atenda às necessidades do usuário.
Se a especificação resultante se mostra incompleta, inconsistente ou enganosa, existem grandes possibilidades do software sofrer as conseqüências desse fato, portando deficiências Segundo, um SRS de má qualidade implica:
O software não atender as necessidades dos clientes;
Múltiplas interpretações podem causar desentendimentos entre cliente e desenvolvedor;
O Padrão IEEE Std 830 ­ 1998 define um conjunto de atributos de qualidade para documentos de especificação de requisitos de software:
Correção: Um documento de especificação de requisitos é considerado correto, se todos os requisitos expressos em ele representam algo que deve estar presente no sistema que está sendo desenvolvido.
Não ambigüidade:
Um SRS é dito não ambíguo, se todo requisito em ele especificado possibilitar apenas uma interpretação.
Completude: Um documento de especificação de requisitos é dito completo se:
O tudo que é previsto ser feito por o software, estiver especificado no documento;
Consistência: Um documento é dito consistente, se não existe nenhum subconjunto de requisitos em ele descritos que conflitem entre si.
Ordenação por prioridade:
Um conjunto de requisitos de qualidade deve indicar a ordem de importância entre seus requisitos, ou seja, cada requisito expresso, no documento, deve conter um identificador para indicar o grau de importância, ou estabilidade daquele requisito.
Verificabilidade: Um conjunto de requisitos de qualidade deve indicar a ordem de importância entre seus requisitos, ou seja, cada requisito expresso, no documento, deve conter um identificador para indicar o grau de importância, ou estabilidade daquele requisito.
Modificabilidade: Um conjunto de requisitos é modificável quando seu estilo e estrutura é tal que as alterações podem ser realizadas de forma simples e consistente com os demais requisitos.
Rastreabilidade: Um documento de especificação de requisitos é dito rastreável se a origem de cada requisito é facilmente identificável.
Isso implica que cada requisito que tiver uma base, deverá ter uma referência cruzada para essa base.
Além de os atributos definidos por o padrão IEEE Std 830-1998, Alan Davis acrescenta outros atributos que devem estar presentes no SRS, para que ele seja considerado de qualidade:
Consistência Externa:
Um documento de especificação de requisitos é dito externamente consistente, se nenhum requisito é conflitante com nenhuma outra definição já documentada no projeto.
Realizável: Um documento de requisitos é dito realizável, se pode existir pelo menos um projeto e implementação de um sistema que, corretamente, implementa todos os requisitos do documento.
Conciso: Um SRS é conciso, se ele for o mais simples possível, porém sem comprometer nenhuma outra qualidade do documento.
Independente do Projeto: Um SRS é dito ser independente de projeto, se existir mais de um projeto de sistema e implementação que realize corretamente todos os requisitos do documento.
Fácil Interpretação: Um documento de requisitos é de fácil identificação, se tiver sido redigido de maneira a facilitar as referências de cada requisito individualmente.
Armazenamento Eletrônico: Executável/ Interpretável/ Prototipável:
Um documento de requisitos é dito executável, interpretável ou prototipável, se existir uma ferramenta de software capaz de prover um modelo de comportamento dinâmico, a partir de a entrada do documento.
Isso deve ser possível com o documento de requisitos escrito numa linguagem que:
É entendida diretamente por o computador, ou pode ser traduzida para uma linguagem que é entendida por o computador, ou pode ser interpretada por uma ferramenta de software e então simulada.
Comentado relativo à importância:
Um SRS é considerado comentado relativo à importância, se um leitor puder identificar, facilmente, que requisitos são mais importantes para o cliente.
Comentado relativo à estabilidade:
Um documento de requisitos é dito ser comentado por estabilidade, se um leitor puder facilmente identificar os requisitos que têm maior probabilidade de sofrer alterações.
Esse atributo é importante para os projetistas decidirem o que precisam construir com maior flexibilidade.
Comentado por versão:
Um documento de requisitos é dito ser comentado por versão, se um leitor puder determinar facilmente que requisitos serão satisfeitos em cada versão do produto.
Não redundante:
Um documento de requisitos é redundante, se um mesmo requisito estiver presente mais de uma vez no documento.
Diferentemente, dos outros atributos, redundância não é, necessariamente, ruim.
Ela pode aumentar o entendimento, porém, nas revisões do documento, é preciso ter cuidado para o requisito ser alterado em todos os lugares, a fim de não gerar inconsistência.
Alto nível de abstração/ detalhamento:
Requisitos podem estar em diferentes níveis de abstração.
Em geral, o documento de requisitos deve ser específico suficiente para que qualquer sistema construído que satisfaça os requisitos do documento, satisfaça também todas as necessidades do usuário.
Além disso, abstrato suficiente para que todo o sistema que satisfaça as necessidades do usuário satisfaça também todos os requisitos do documento.
Preciso: Um documento de requisitos é preciso se: (
a) quantitativos numéricos são usados sempre que possível e (b) o nível apropriado de precisão for usado para todo quantitativo numérico.
Reusável: Um SRS é reusável, se suas sentenças, parágrafos e seções puderem, facilmente, ser adotados ou adaptados para serem usados num outro documento de requisitos.
Organizado: Um documento de requisitos é dito organizado, se seu conteúdo é arrumado de forma que um leitor possa acessar, facilmente, uma informação desejada e os relacionamentos lógicos entre seções adjacentes sejam evidentes.
Existem vários caminhos para organizar um bom padrão para o documento de requisitos:
Referências Cruzadas:
Um documento de requisitos deve usar referências cruzadas para relacionar seções contendo requisitos de outras seções que contêm:
A seguir, são apresentadas algumas métricas aplicadas para avaliar a qualidade do Não ambigüidade $= nui/ nr Onde:
Completude $= nu/ (ni x ns) Onde:
O autor não especificou claramente o que significa cada elemento e não apresenta a aplicação da métrica, por esse motivo fica difícil entender- la e aplicar- la.
Alexander propõe um modelo para verificar a completude do SRS, em o qual ele distribui os requisitos num quadrante.
O quadrante possui quatro blocos A, B, C e D, conforme Figura 3.
Em o bloco A, encontram- se todos os requisitos do sistema que são conhecidos e estão documentados.
Em o bloco B, estão todos os requisitos do sistema que são conhecidos, porém não estão documentados.
Assim que esses requisitos estiverem documentados serão movidos para o bloco A. Em o bloco C, encontram- se todos os requisitos que são necessários, porém não são compreensíveis.
Esses requisitos devem ser explorados, para uma melhor compreensão, e assim que sejam compreendidos e documentados, são movidos para o bloco A. Finalmente, o bloco D contém todos os requisitos que são necessários, porém são desconhecidos.
À medida que esses requisitos vão sendo descobertos, eles são movidos para o bloco B e conforme vão sendo documentados são movidos para o bloco A. A idéia principal é que à medida que os requisitos vão sendo compreendidos e documentados eles sejam movidos para o bloco A. Assim, quando todos os requisitos estiverem no bloco A, o documento é considerado completo, pois todos os requisitos são conhecidos, compreendidos e documentados.
Alexander também propôs uma métrica de acordo com o modelo, para medir a completude do SRS:
Completude $= nA/ nr Onde:
Como o foco do modelo é o bloco A, ele soma o número de requisitos presentes nesse bloco e divide por o número total de requisitos do SRS.
A desvantagem desse modelo é que a análise tem que ser feita por pessoas envolvidas no processo que conheçam bem o sistema que está sendo desenvolvido, identificando os requisitos que estão ausentes.
Consistência $= nC/ nr Onde:
Os valores das métricas variam entre 0 (totalmente desqualificado em relação a o atributo em questãototalmente qualificado em relação a o atributo em questão).
Existem outras métricas aplicadas aos atributos discutidos na seção 2.3.1, porém os apresentados aqui são os que serão utilizados no trabalho.
Este capítulo apresentou conceitos relacionados à Engenharia de Requisitos focando na qualidade dos requisitos e no documento de especificação dos mesmos.
Foram explorados os atributos de qualidade dos requisitos e SRS, bem como as métricas aplicadas nas sentenças dos requisitos e SRS.
Embora a literatura apresente inúmeros atributos de qualidade, para muitos de eles não são apresentadas métricas.
Em este capítulo foram detalhadas somente as métricas adotadas neste trabalho.
Este capítulo trata de alguns de conceitos relacionados à especificação de Casos de Uso.
Aspectos referentes ao template da especificação de casos de uso bem como a qualidade dos mesmos.
Segundo, podemos dizer que um caso de uso (UC) é um &quot;documento narrativo que descreve a seqüência de eventos de um ator que usa um sistema para completar um processo».
Um caso de uso é uma técnica de modelagem usada para descrever o que um novo sistema deve fazer.
Ele é construído através de um processo interativo em o qual as discussões entre o cliente e os desenvolvedores do sistema conduzem a uma especificação do sistema sobre a qual todos estão de acordo.
Casos de uso são uma forma textual, embora possam ser escritos com o uso de fluxogramas.
Toda organização captura requisitos para satisfazer suas necessidades.
Existem padrões disponíveis para descrições de requisitos.
Casos de uso ocupam somente uma parte do total de requisitos documentados.
Os casos de uso têm por objetivo:
Decidir e descrever os requisitos funcionais do sistema;
Os componentes de um modelo de casos de uso são:
Ator: É um papel que, tipicamente, estimula/ solicita ações/ eventos do sistema e recebe reações.
Cada ator pode participar de vários casos de uso;
O ator é usado para descrever toda a pessoa que possuir um objetivo, ou que possuir interação com o sistema.
Um ator preliminar provoca o comportamento do sistema a fim de conseguir um determinado objetivo.
Um ator secundário interage com o sistema, mas não provoca o caso de uso.
Casos de uso fornecem a parte comportamental do sistema.
Cada sentença, num caso de uso, descreve uma ação que protege ou favorece algum interesse de algum stakeholder.
Uma sentença pode descrever uma interação entre dois atores, ou o que o sistema deve fazer, internamente, para proteger os interesses dos stakeholders.
O ator primário tem um objetivo e o sistema deve ajudar o ator a atingir esse objetivo.
Alguns cenários mostram o objetivo sendo alcançado, alguns terminam com ele sendo abandonado.
Cada cenário contém uma seqüência de passos, mostrando como as ações e interações se desdobram.
Um caso de uso agrupa todos os cenários, mostrando todas as maneiras para um objetivo ter sucesso ou falhar.
Casos de uso são apenas requisitos comportamentais.
Regras de negócio, glossário, desempenho, processo de desempenho e muitas outras coisas não entram na categoria comportamental.
A especificação de um Caso de Uso deve considerar:
Como e quando o Caso de Uso inicia ou termina;
Propõe um template de especificação de caso de uso descrito na Tabela 1, que define, explicitamente, os objetivos de casos de uso, bem como os níveis associados com esses objetivos.
As demais informações presentes no template também são importantes para tornar a descrição de casos de uso o mais clara possível.
A linguagem natural (LN) tem um papel importante, nos casos de uso, porque os atores, as ações, os cenários, as responsabilidades, os objetivos, etc..
São especificados em linguagem natural, por isso pode gerar diferentes interpretações.
O uso das técnicas para a análise lingüística de textos em LN pode remover os problemas de interpretação dos requisitos que são baseados em descrições do caso de uso.
A análise feita por meio de as técnicas baseada em LN pode ser útil, para reduzir diversos O campo &quot;variações Tecnológicas e Dados «do template, expressa as variações de determinada função, por exemplo, as maneiras de reembolso de clientes.
Em este campo deve ser especificado que o reembolso pode ser por cheque ou crédito para futuras compras.
O Campo Informação Relacionada lista todas as informações relacionadas ao caso de uso, como por exemplo, requisitos não funcionais do caso de uso.
Segundo, os componentes de LN de casos de uso (tipicamente sentenças) podem ser avaliados através de uma análise léxica, sintática ou semântica.
As técnicas baseadas em LN não são suficientes para cobrir, completamente, todos os problemas.
Entretanto, essas técnicas podem fornecer uma ajuda significativa para a análise dos problemas de ambigüidade e consistência de casos de uso de um ponto de vista lingüístico.
Através das técnicas é possível fornecer medidas para a avaliação da qualidade de casos de uso, definindo algumas métricas apresentadas na subseção 2.2.2.
Este capítulo apresentou conceitos relacionados a Casos de Uso, explorando a qualidade dos mesmos.
Verificou- se que as métricas aplicadas nas sentenças dos requisitos também podem ser aplicadas na especificação dos casos de uso.
Apresentou, igualmente, um template de especificação de casos de uso utilizado como base para o modelo proposto.
Este capítulo aborda a técnica GQM que foi utilizada neste trabalho para auxiliar na adaptação das métricas propostas por o modelo.
O Paradigma GQM (Goal, Question, Metric) é uma abordagem orientada a objetivos para medição de produtos e processos de Engenharia de Software.
Baseia- se na hipótese de que para uma organização medir de forma objetiva, ela deve identificar, explicitar e especificar, precisamente, os objetivos de medição da organização e também aqueles relativos a cada projeto;
Deve relacionar esses objetivos aos dados necessários, para definir- los operacionalmente;
E também deve fornecer um framework para análise e interpretação dos dados com respeito a os objetivos definidos.
Segundo Sommerville, o método GQM tem como objetivo auxiliar a decidir como as medições devem ser feitas e como devem ser utilizadas.
Goal significa objetivo (meta) e representa o que a organização está tentando alcançar.
Question representa as questões que uma meta gera, quando definida.
Metric são as métricas que deverão reger as medições a serem coletadas, para que as questões possam ser respondidas e para que seja confirmado se a meta foi atingida ou não.
Uma vantagem para a abordagem GQM é a separação entre os assuntos organizacionais (metas) dos assuntos específicos de processo (as questões).
Segundo Sommerville, &quot;ela focaliza a coleta de dados e sugere que os dados coletados devem ser analisados de diferentes maneiras, dependendo da questão que deve ser respondida».
As métricas são derivadas utilizando a técnica top-down, com base nas questões, definidas a partir de os objetivos, formalizando o processo e levando à escolha e/ ou à definição de métricas relevantes.
Esse refinamento é documentado, minuciosamente, num plano GQM, registrando todo o racional utilizado na escolha das métricas.
Os dados coletados são interpretados de maneira bottom-up, no contexto dos objetivos e questões definidos, considerando as limitações e suposições relativas a cada métrica.
A estrutura hierárquica de 3 níveis, denotada como plano GQM, é mostrada na Figura 5.
Nível Conceitual (Goal/ Objetivo):
Um objetivo é definido para um objeto, com um propósito específico, com respeito a um certo modelo de qualidade, a partir de um dado ponto de vista relativo ao ambiente.
Podem ser objetos de medida:
Produtos: Quaisquer documentos e produtos que são gerados durante o ciclo de vida do sistema:
Especificações, projetos, programas, etc..
Processos: Atividades relacionadas ao desenvolvimento de software normalmente, associadas ao consumo de tempo:
Fase de especificação, de projetos, de teste, etc..
Recursos: Itens consumidos no processo para gerar os produtos:
Pessoal, equipamentos, softwares, espaço físico, etc..
Nível operacional (Question/ Questão):
Um conjunto de questões é utilizado para definir como será feita a avaliação e como será atingido um objetivo específico.
O objeto de medição (produto, processo ou recurso) é caracterizado por meio de questões que levam em consideração o modelo de qualidade e o ponto de vista definido no objetivo.
Nível quantitativo (Metric/ Métrica):
Representa os dados que serão medidos.
Um conjunto de dados é associado às questões formuladas a fim de que sejam traduzidas quantitativamente.
Esses dados podem ser objetivos ou subjetivos.
Objetivos: Se dependerem apenas do objeto que está sendo medido e não do ponto de vista em que são tomados.
Por exemplo, horas de pessoal gastas em determinada tarefa, tamanho de um programa, etc..
Subjetivos: Se dependerem, além de o próprio objeto que está sendo medido, do ponto de vista em que será analisada a medida.
Por exemplo, facilidade de leitura de um texto, nível de satisfação do usuário, etc..
Assim, um modelo GQM é uma estrutura hierárquica que inicia com a definição de um objetivo (goal), especificando o propósito da medição, os objetos e aspectos desses objetos que serão avaliados, e o ponto de vista em que as medidas serão analisadas.
O objetivo é refinado em diversas questões (question).
Cada questão é, por sua vez, delineada nas métricas (metric).
Uma vez definidas as questões, é necessário, para cada questão, definir o que precisa ser medido para responder- las.
Um objetivo é definido tão bem quanto as questões que ele gera e os modelos em os quais essas questões são baseadas.
Uma vez que esses modelos são de difícil definição, na maioria das vezes, eles ficam implícitos nas questões.
Porém, o quanto mais formal, explícitos e completos forem os modelos, mais eficazes serão as questões e a definição dos objetivos.
Cada questão gera um conjunto de métricas, e, novamente, as questões somente poderão ser respondidas com relação a as métricas utilizadas, com respostas tão completas quanto a as métricas permitirem.
Através do GQM, pode- se chegar a um conjunto ótimo de métricas:
O menor número possível de métricas, com maior poder de resposta e que estejam, efetivamente, relacionadas aos objetivos.
Uma mesma questão pode ser utilizada para definir vários objetivos, e as métricas podem ser utilizadas para responder mais de uma questão.
As questões e métricas podem ser reutilizadas dentro um plano GQM ou mesmo entre diferentes programas de medição.
Fase de Planejamento, que envolve a seleção do que será mensurado e o planejamento do projeto de medição.
Fase de Definição, onde os objetivos, questões e métricas são definidos e documentados.
Fase de Coleta de Dados, onde é realizada a coleta de dados para atender as métricas definidas.
Fase de Interpretação, em a qual os dados coletados são analisados para responder às questões e as respostas são usadas para verificar se os objetivos estabelecidos foram alcançados.
O GQM ajuda, ainda, a garantir a adequação, a consistência e a completude do plano de medição.
A administração da complexidade do programa de medição também é apoiada por o GQM, permitindo uma discussão estruturada sobre medição e diminuindo a resistência da equipe de desenvolvimento, através de sua contínua participação no processo de medição Este capítulo apresentou o paradigma GQM, adotado, neste trabalho, para apoiar a adaptação das métricas, que tem como objetivo auxiliar a decidir como as medições devem ser feitas e como devem ser utilizadas.
Um modelo GQM inicia com a definição de um objetivo (goal), especificando o propósito da medição;
Os objetos e os aspectos desses objetos que serão avaliados;
E o ponto de vista em que as medidas serão analisadas.
O objetivo é refinado em diversas questões (question) e cada questão é delineada nas métricas.
Este capítulo tem como principal objetivo apresentar os principais trabalhos relacionados à qualidade dos requisitos utilizados no contexto desta pesquisa.
Atualmente, alguns trabalhos vêm sendo desenvolvidos por a comunidade de engenharia de software para apoiar a qualidade de requisitos de software.
Esses trabalhos abordam, de diferentes maneiras, a avaliação da qualidade de requisitos e aplicam algumas técnicas que auxiliam nessa avaliação.
Como o principal interesse desta pesquisa está relacionado à qualidade dos requisitos, neste capítulo serão descritos os trabalhos propostos por, e, os quais serviram como referência para este trabalho.
O trabalho desenvolvido por, apresenta uma técnica de leitura que apóia a construção de casos de uso e a análise de documentos de requisitos.
Essa técnica é composta de duas técnicas de leitura:
AGRT (Actor Goal Reading Technique) e UCRT (Use Case Reading Technique) cujos propósitos são, respectivamente, determinar os atores do sistema e seus objetivos e, determinar o Modelo de Caso de Uso.
Os passos dessas técnicas dão suporte à construção de Modelos de Casos de Uso e também incorporam uma revisão do Documento de Requisitos.
Também definiu alguns campos necessários no SRS para especificar casos de uso:
Introdução, Funções do Produto, Requisitos Funcionais e Atributos são suficientes para extrair as informações necessárias para gerar os casos de uso.
A idéia principal do trabalho é, a partir de o SRS, construir o Modelo de Casos de Uso e também incorporar uma revisão do Documento de Requisitos.
O trabalho desenvolvido por fornece ao usuário a análise automática dos requisitos em linguagem natural.
QuARS analisa gramaticalmente o requisito em orações escritas em linguagem natural e aponta os erros.
QuARS possui um modelo de qualidade, esse modelo é composto de um jogo de atributos de qualidade, para que os requisitos expressos em linguagem natural sejam avaliados por meio de os indicadores sintáticos e estruturais.
O modelo de qualidade de QuARS utiliza os atributos Ambigüidade, Consistência e Completude, que também são utilizados na análise da qualidade do SRS, porém com diferentes abordagens.
Os indicadores são coletados nos dicionários específicos que contém os termos e as construções lingüísticas que caracterizam um defeito particular e que são diretamente detectáveis olhando as sentenças de uma especificação de requisitos.
Os dicionários são em formato de texto simples.
A ferramenta ARM, proposta por pode ser vista similarmente a QuARS, como um DAE (dispositivo automático de entrada) para identificar fontes de riscos de software.
Produz métricas e relatórios que identificam as áreas da especificação de requisitos que possam ser melhorados.
De acordo com, o objetivo da ferramenta ARM é fornecer as medidas que podem ser usadas por gerentes de projeto para avaliar a qualidade de uma especificação de requisitos.
ARM pode executar uma análise léxica para detectar alguns defeitos.
Os defeitos são identificados, principalmente, por meio de os termos e de palavras especiais que revelam os defeitos particulares.
A ferramenta procura em cada linha da especificação dos requisitos por palavras específicas identificadas como indicadores de qualidade.
Define um modelo de qualidade composto de atributos de qualidade e de indicadores de qualidade, e desenvolve ARM para executar uma análise de acordo com o modelo de qualidade, para detectar defeitos e coletar métricas.
Essas ferramentas funcionam de maneira similar, pois ARM é baseada no modelo de qualidade de QuARS, utilizando os mesmos atributos.
A análise nas sentenças do SRS é feita através de técnicas léxicas que verificam se a sentença está escrita corretamente, e técnicas sintáticas que constroem árvores de derivação de cada oração.
Em o trabalho desenvolvido por, o autor descreve os primeiros passos para encontrar os atores e relacionar- los aos seus objetivos, também sugere as informações que devem estar presentes no SRS para especificar os casos de uso, porém não explica de maneira clara como é feita a transcrição dos requisitos para a especificação de casos de uso.
Mesmo que tal limitação tenha sido encontrada, contribuiu para a pesquisa na definição de alguns campos importantes que devem estar presentes no SRS.
Segundo o autor, ao menos os campos Introdução, Funções do Produto, Requisitos Funcionais e Atributos são suficientes para extrair as informações necessárias para gerar os casos de uso.
Embora as ferramentas automatizadas, propostas por e, sejam capazes de fornecer uma sustentação eficaz para a realização de avaliação da qualidade dos requisitos expressos em linguagem natural, elas avaliam ou a qualidade das sentenças dos requisitos ou dos casos de uso.
Mesmo com a presença de tal limitação, os trabalhos contribuíram para o esclarecimento de como é feita a avaliação da qualidade dos requisitos, como as métricas são aplicadas e, principalmente, apoiaram na escolha dos atributos adotados no modelo proposto.
Este capítulo descreve o modelo de Mapeamento desenvolvido, a fim de identificar, mais facilmente, onde cada informação necessária para especificar casos de uso pode ser encontrada no SRS.
A primeira etapa para definir o modelo para avaliar a qualidade da tradução dos requisitos funcionais para casos de uso foi identificar os elementos que devem estar presentes no SRS, para que, a partir de o mesmo, seja possível gerar a especificação dos casos de uso.
Para a identificação dos elementos foi feito o modelo conceitual do SRS e da especificação de casos de uso.
A partir de a análise desses modelos, foi criado o modelo de Mapeamento que apresenta o relacionamento entre os elementos presentes nos modelos conceituais, ou seja, mostra onde cada informação da especificação de casos de uso pode ser encontrada no SRS.
Os modelos conceituais e de Mapeamento foram trabalhos realizados por o grupo de Engenharia de Requisitos do Centro de Desenvolvimento e Pesquisas DELL/ PUCRS (CDPe).
O modelo de Mapeamento, ilustrado na Figura 7, é a união dos modelos conceituais do SRS e da especificação dos casos de usos.
A partir de aí, foi efetuado o relacionamento entre as classes dos modelos.
Esse relacionamento representa o mapeamento das informações entre os modelos, ou seja, onde cada elemento da especificação dos casos de uso pode ser encontrado no SRS.
O modelo de Mapeamento é necessário, pois a partir de ele, torna- se possível identificar quais os elementos do SRS devem estar presentes para que se possa especificar os casos de uso.
As classes no modelo conceitual foram definidas de acordo com as características e elementos componentes nos documentos de especificação de requisitos e casos de uso.
As associações foram definidas como forma de atender a objetivos específicos deste trabalho, ou seja, atender a qualidade na tradução do SRS para casos de uso.
Ainda, um conjunto de atributos para cada uma das classes foi criado.
A definição dos atributos é baseada em estudos realizados em, e.
Não foi possível ilustrar, na Figura 7, o relacionamento entre as classes dos modelos conceituais devido a falta de legibilidade, porém a Tabela 2 mostra de maneira mais clara esses relacionamentos.
A seguir, uma descrição das classes e seus atributos serão apresentados, sendo que o nome das classes será representado por palavras em negrito e o nome de seus atributos representado por palavras em itálico.
A classe nome identifica o objetivo do caso de uso numa pequena frase de verbo ativo.
Para esse elemento somente o atributo descricão é definido, sendo que este atributo mantém o nome do caso de uso.
Os dados dessa classe podem ser extraídos da classe introducaoRF do modelo conceitual do SRS, que tem como atributo descricão, onde é feita uma breve descrição do requisito funcional.
A classe escopoUC do modelo de especificação de casos de uso determina qual sistema será considerado caixa-preta.
Normalmente, essa classe serve para classificar tudo o que está dentro e fora de o escopo do trabalho.
Em o modelo de Mapeamento, essa classe está relacionada com a classe escopoSRS que identifica o produto de software que vai ser produzido, a classe possui os atributos nome, que vai identificar o produto de software, descricão onde se descreve a aplicação do software a ser especificado, incluindo benefícios relevantes, objetivos e metas, e inOut que é uma relação do que o sistema fará e, se necessário, o que não fará, essa classe também relaciona- se com introducão que se refere a descrição do SRS.
A classe contexto do modelo conceitual de especificação de casos de uso representa o objetivo geral do sistema através do atributo descricão onde a sentença é expressa.
Em o modelo de Mapeamento, as informações necessárias para a classe contexto são encontradas na classe funcoesProduto que apresenta as principais funções do produto através dos atributos idFuncão que é um identificador numérico da função, descricão que mantém uma breve descrição da função e relacão que descreve como as funções se relacionam.
A classe funcoesProduto também oferece informações para as seguintes classes do modelo conceitual dos casos de uso stakeholders, cenarioSucessoPrincipal e variacoes.
A classe stakeholders representa algo, ou alguém, que possui algum interesse legal no comportamento do caso de uso.
Mantém como atributo idStakeholders que identifica o tipo de stakeholder, ou seja, desenvolvedor, cliente, etc., e nome que mantém o nome do mesmo.
Um ator é considerado um tipo stakeholder.
A classe cenarioSucessoPrincipal descreve passo a passo a seqüência de sucesso do caso de uso.
Essa classe faz parte de especificacaoCasoUso e é do tipo fluxo.
A classe possui um atributo idFluxo que identifica o fluxo e um conjunto de passos que contém ação.
A classe acão faz parte da classe passos que possui como atributos verbo e objeto.
Esses atributos são necessários porque os passos de ação são escritos de forma gramatical, uma simples ação em a qual um ator realiza uma tarefa.
A classe cenarioSucessoPrincipal também tem associação com a classe entrada no modelo de Mapeamento.
A classe entrada apresenta as entradas (estímulo) dentro de o sistema, possui como atributo descricão que mantém a descrição de cada entrada.
Essa classe faz parte da classe funcionais.
A classe variações descreve as várias maneiras por as quais determinadas funcionalidades podem ser executadas, e que são armazenadas no atributo descricao.
Possui associação com a classe passos, pois variação possui um conjunto de passos e relaciona- se também com a classe especificacaoCasoUso.
Em o modelo de Mapeamento, variações também tem associação com a classe processamento do modelo conceitual do SRS, que apresenta todas as funções executadas por o sistema em resposta às entradas, ou no suporte, para uma saída.
O atributo seqOperações mantém a seqüência das operações, parametros descreve os parâmetros afetados por as operações e metodos mantém os métodos utilizados para transformar as entradas do sistema nas saídas correspondentes.
A classe processamento também se relaciona com a classe preCondições do modelo conceitual da descrição de casos de uso que define o que deve ser verdadeiro antes de permitir o início do caso de uso.
Tem como atributos idPreCond que armazena um identificador numérico da pré-condição e descricão que mantém a descrição da informação que deve ser verdadeira.
A classe participante do modelo conceitual do caso de uso representa quem participa do sistema que pode ser do tipo ator, ou do tipo sistema.
Os atributos definidos nessa classe são idPartic, que contém a identificação do participante, e nome, que representa o nome do participante.
A associação dessa classe, no modelo de Mapeamento, ocorre com a classe introducaoRF do modelo conceitual do SRS, pois da introdução de cada requisito funcional é possível extrair os participantes.
A classe introducaoRF apresenta uma introdução do requisito funcional que é descrita no atributo descricao.
Em o modelo de Mapeamento a classe introducaoRF também se relaciona com a classe garantiasSucesso do modelo conceitual dos casos de uso que estabelece quais os interesses dos stakeholders são satisfeitos depois de uma conclusão bem-sucedida do caso de uso.
O atributo idSucesso identifica a garantia e o atributo descricão descreve a garantia.
A classe garantiasSucesso também se associa com a classe saida do modelo conceitual do SRS que apresenta a descrição detalhada de todos os dados de saídas das funções que são mantidas no atributo descricao.
Essa classe está relacionada à classe funcionais.
A classe garantiasMinimas do modelo conceitual dos casos de uso está associada a duas classes no modelo conceitual do suposicoesDependencias respostasSituacoesAnormais.
A classe suposicoesDependencias apresenta uma lista de cada um dos fatores que afetam os requisitos.
O atributo idDependência identifica o fator e descricão mantém uma breve descrição do fator.
A classe respostasSituacoesAnormais apresenta todas as possíveis respostas às situações anormais que possam ocorrer, que são mantidas no atributo descricao.
Em o modelo de Mapeamento, também existe uma associação com a classe fluxoAlternativo do modelo conceitual da especificação de casos de uso, que descreve o que deve acontecer quando uma funcionalidade não é realizada com sucesso.
Essa classe é um tipo de fluxo que contém passos para descrever as situações que devem ocorrer, possui como atributo idFluxo que identifica o fluxo.
A classe informacoesRelacionadas do modelo conceitual da especificação de casos de uso descreve todas as informações adicionais que o projeto precisa e que não são possíveis de descrever nas outras classes.
As informações são mantidas nos atributos idInformacão, que identifica a informação através de um identificador numérico, descricão, que mantém uma breve descrição da informação, e tipo, que mantém o tipo de informação.
Esse tipo pode ser requisitos não-funcionais, por exemplo.
A classe informacoesRelacionadas tem associação com as classes atributo e performance do modelo conceitual do SRS.
A classe atributo faz parte da classe requisitosEspecificos e inclui todos os outros requisitos que não se classificam como funcionais.
Possui como atributos idAtributo, que é um identificador numérico, nome, que mantém o nome do atributo, descricão, que apresenta a descrição do requisito e tipo, que especifica o tipo do requisito.
A classe performance descreve os requisitos numéricos estáticos e dinâmicos do software, possui o atributo descricão, que mantém a descrição do requisito de performance e possui dois tipos:
NumDinamico e numEstatico.
A classe numDinamico apresenta todos os requisitos que devem ser expressos em termos mensuráveis.
Possui os atributos idDinamico, que identifica o atributo de performance, nroTarefas, que mantém o número de tarefas que devem ser realizadas, e qtDados, que mantém a quantidade de dados que devem ser processados dentro de um certo período de tempo.
A classe numEstatico descreve o número de terminais, número de usuários, e quantidade e tipo de informações a serem manuseadas.
Os atributos idEstatico mantém a identificação do atributo, nroTerminais mantém a quantidade de terminais, nroUSimultaneos, que armazena o número de usuários, e informacão, que mantém a quantidade e o tipo de informações que serão manuseadas.
A partir de o modelo conceitual, foi possível identificar os campos do SRS que contêm informações para que, a partir de eles, os casos de uso possam ser especificados.
A contribuição do modelo de Mapeamento para este trabalho foi permitir a visualização dos relacionamentos entre as classes dos modelos conceituais, identificando os cuidados que devem ser tomados no SRS, para que seja possível a especificação de casos de uso de qualidade.
A partir de o modelo de Mapeamento, foi possível propor uma estrutura de SRS com as informações que devem estar presentes no mesmo para que seja possível especificar casos de uso com qualidade.
O modelo de SRS será apresentado no próximo capítulo.
Este capítulo descreve o modelo proposto para avaliar a qualidade da tradução entre requisitos e casos de uso, descrevendo os atributos selecionados, bem como a descrição das métricas geradas a partir desses atributos.
Entre as atividades, de mais alto nível, da engenharia de requisitos, o foco do modelo está na atividade de documentação de requisitos, fase que gera dois artefatos:
SRS e especificação de casos de uso.
O modelo proposto, neste trabalho, recomenda informações que devem estar presentes no SRS, de modo que seja possível, através de ele, especificar casos de uso consistentes visando à qualidade na transcrição.
Essas informações, ilustradas na Figura 8, foram identificadas de acordo com trabalho desenvolvido por e através da análise do modelo de Mapeamento.
De acordo com, ao menos os campos Introdução, Funções do Produto, Requisitos Funcionais e Atributos são suficientes para extrair as informações necessárias para gerar os casos de uso.
Entretanto, conforme o estudo realizado no modelo de Mapeamento, verificou- se que outras informações também são importantes para gerar casos de uso com qualidade e consistência, tais como:
Escopo; Descrição;
Processamento e Saídas do Requisito Funcional;
E Performance.
A ausência das informações acima citadas não significa que os casos de uso não possam ser gerados a partir de o SRS, porém a presença dos mesmos facilita a compreensão dos requisitos, gerando, assim, especificações de casos de uso com qualidade e consistência com os requisitos.
Os atributos adotados para o modelo proposto são os mesmos adotados no modelo de qualidade da ferramenta QuARS:
Completude, não ambigüidade e consistência, porém com abordagens diferentes.
Enquanto que no trabalho do foco está na qualidade do documento em si, avaliando cada sentença do requisito, o foco deste trabalho está na qualidade da transcrição dos requisitos para especificação de casos de uso.
A seguir os atributos que fazem parte do modelo proposto e foram adaptados para serem aplicados no mapeamento:
Completude: A transcrição será completa, se todos os requisitos possuírem, pelo menos, um caso de uso correspondente;
E, se todos os elementos presentes, no requisito, estiverem presentes também nos casos de uso correspondentes.
Não ambigüidade:
Os casos de uso e os requisitos correspondentes devem ter a mesma interpretação.
Consistência: Capacidade de não existir contradição entre os casos de uso e os requisitos correspondentes.
Para guiar a seleção dos elementos que irão compor o modelo de medição, o trabalho seguiu a seqüência de passos proposta por o paradigma GQM.
O GQM propõe uma abordagem top-down para a seleção das métricas.
A idéia principal é que o processo de mensuração deve ser guiado por os objetivos que se pretende atingir.
Portanto, a seleção do que deve ser coletado inicia- se com a identificação das metas almejadas, as quais dão origem às questões como critério, para selecionar as medidas mais significativas.
A seguir a aplicação dos passos do paradigma GQM.
Como este trabalho está focado na tradução dos documentos da SRS, para especificação dos casos de uso, o principal objetivo que se pretende atingir é a avaliação da qualidade da transcrição dos documentos.
Para o modelo proposto, os objetivos de medição serão baseados nos atributos de qualidade identificados na seção 4.1: Completude, não ambigüidade e consistência.
Em esta fase foram definidos os objetivos de medição.
Para cada meta de medição foram identificadas as perguntas, com o objetivo de traduzir as metas em aspectos quantitativos que pudessem ser alvos de medição.
A partir de as questões, derivaram- se então as métricas.
A Tabela 3 apresenta o modelo GQM definido para a abordagem proposta neste trabalho.
A seguir, descreve- se com detalhes o modelo GQM definido para este trabalho.
É importante ressaltar que para todos os objetivos são avaliados dois casos:
Quando o requisito gera um caso de uso e quando o requisito gera mais de um caso de uso.
Objetivo G1 ­ Avaliar a Qualidade em Relação ao Atributo Completude Procura-se aqui, ter condições de avaliar a qualidade do SRS em relação a a completude da tradução para casos de uso, isto é, se os elementos presentes no requisito estão presentes também nos respectivos casos de uso e, se todos os requisitos possuem pelo menos um caso de uso correspondente.
Para esse objetivo foram definidas as questões:
Essa questão visa verificar se todos os elementos identificados em cada requisito estão presentes nos casos de uso correspondentes.
Para responder essa questão, a seguinte métrica foi gerada:
Através dessa métrica, é possível saber se todos os elementos presentes nos requisitos foram mapeados para os casos de uso correspondentes.
Essa questão visa identificar a presença dos atores de cada requisito nos casos de uso correspondentes.
Para responder essa questão, duas métricas foram geradas:
Métrica aplicada quando o requisito gera apenas um caso de uso.
Indica se todos os atores presentes no requisito foram mapeados para o caso de uso correspondente.
Métrica aplicada quando o requisito gera mais de um caso de uso.
Através dessa métrica, é possível saber se todos os atores identificados, no requisito, estão presentes nos casos de uso correspondentes.
Essa questão visa identificar a presença das funções identificadas em cada requisito nos casos de uso correspondentes.
Para responder essa questão, duas métricas foram geradas:
Métrica aplicada quando o requisito gera apenas um caso de uso.
Indica se todas as funções presentes, no requisito, foram mapeadas para o caso de uso correspondente.
Métrica aplicada quando o requisito gera mais de um caso de uso.
Através dessa métrica, é possível saber se todas as funções identificadas, no requisito, estão presentes nos casos de uso correspondentes.
Essa questão visa identificar a presença de todos os requisitos não funcionais do requisito nos casos de uso correspondentes.
Para responder essa questão, duas métricas foram geradas:
Métrica aplicada quando o requisito gera apenas um caso de uso.
Indica se todos os requisitos não funcionais, presentes no requisito, foram mapeados para o caso de uso correspondente.
Métrica aplicada quando o requisito gera mais de um caso de uso.
Através dessa métrica é possível saber se todos os requisitos não funcionais, identificados no requisito, estão presentes nos casos de uso correspondentes.
Essa questão visa identificar se o mapeamento do SRS está completo, isto é, se todos os requisitos do documento possuem, pelo menos um, caso de uso correspondente.
Assim, para responder essa questão foi feita uma adaptação da proposta de Alexander, por a qual os requisitos são distribuídos em quatro blocos dentro de um quadrante.
A Figura 10, ilustra a adaptação.
Em o bloco A, são os requisitos que possuem cobertura completa dos casos de uso, isto é, possui pelo menos um caso de uso correspondente, e todos os elementos presentes no requisito, estão presentes também nos casos de uso.
Em o bloco B, estão todos os requisitos que possuem casos de uso correspondente, porém nem todos os elementos foram mapeados para os casos de uso.
Em o bloco C, estão os requisitos que não possuem casos de uso correspondente, ou seja, não foram traduzidos para casos de uso.
E, finalmente, no bloco D, estão os requisitos desconhecidos, isto é, são os casos de uso gerados sem estarem associados aos requisitos especificados no SRS.
Como o objetivo é descobrir o quanto a tradução está completa, o foco é o bloco A. Assim, a seguinte métrica foi gerada:
M8 $= nA/ nr Através dessa métrica é possível saber se todos os requisitos foram mapeados para casos de uso e tiveram a cobertura completa, bem como saber quais de eles foram contemplados com a tradução e descobrir os requisitos omissos.
Porém, para que essa métrica possa ser aplicada, é necessário que a análise no mapeamento já tenha sido concluída.
Objetivo G2 ­ Avaliar a Qualidade em Relação ao Atributo Não Ambigüidade Aqui, procura- se ter condições de avaliar a qualidade do SRS em relação a a não ambigüidade da tradução para casos de uso, isto é, se todos os requisitos e casos de uso correspondentes possuem a mesma interpretação.
Para esse objetivo também são avaliados os dois casos:
Quando o requisito gera um caso de uso e quando gera mais de um caso de uso.
Para atingir esse objetivo, a seguinte questão foi elaborada.
Visa avaliar se os requisitos e os casos de uso correspondentes não estão ambíguos.
Para responder a essa questão, as seguintes medidas foram derivadas:
Medida aplicada quando um requisito gera um caso de uso.
M10 = uCun/ UC Medida aplicada quando um requisito gera mais de um caso de uso.
Indicam se os requisitos e casos de uso apresentam a mesma interpretação.
Objetivo G3 ­ Avaliar a Qualidade em Relação ao Atributo Consistência Aqui, procura- se ter condições de avaliar a qualidade do SRS em relação a a consistência da tradução para casos de uso, isto é, se todos os requisitos e casos de uso correspondentes não se contradizem.
Para esse objetivo, também são avaliados os dois casos:
Visa avaliar se os requisitos e os casos de uso correspondentes não estão se contradizendo.
Para responder a essa questão, as seguintes medidas foram derivadas:
Medida aplicada quando um requisito gera um caso de uso.
M12 = uCc/ UC Medida aplicada quando um requisito gera mais de um caso de uso.
Indicam se os requisitos e casos de uso estão consistentes.
Baseado em, os valores das métricas variam entre 0 (zero) e 1 (um).
Quanto mais próximo de 1 (um) mais qualificado está o mapeamento.
Para analisar a completude do mapeamento, primeiro deve ser aplicada a métrica M1, que analisa a presença de todos os elementos do requisito nos casos de uso correspondentes.
Quando for detectada a ausência de algum elemento, as métricas M2, M3, M4, M5, M6, M7 devem ser aplicadas de acordo com o número de casos de uso especificados para o requisito.
As métricas M2, M4 e M6 são aplicadas quando um requisito gera um caso de uso e as métricas M3, M5 e M7 são aplicadas quando o requisito gera mais de um caso de uso.
Essas métricas permitem identificar os elementos que não foram mapeados para o caso de uso.
Para finalizar a análise da completude, é necessário aplicar a métrica M8, pois a partir de o resultado obtido nessa métrica, é possível saber se o mapeamento do SRS para especificação de casos de uso está completo, descobrindo assim, quais os requisitos apresentaram problemas na tradução, quais receberam cobertura completa dos casos de uso, quais não foram mapeados para casos de uso e até mesmo os requisitos ausentes no SRS.
Após a análise da completude do mapeamento, as métricas M9 e M10 são aplicadas para avaliar a não ambigüidade da tradução.
A métrica M9 é aplicada quando um requisito gera um caso de uso e a métrica M10 quando um requisito gera mais de um caso de uso.
O mesmo acontece para avaliar a consistência da tradução, as métrica M11 e M12 são aplicadas.
A métrica M11 é aplicada quando um requisito gera um caso de uso e a métrica M12 quando um requisito gera mais de um caso de uso.
Este capítulo teve como principal objetivo apresentar o conjunto de métricas propostas por o modelo para avaliar a qualidade da tradução dos requisitos para casos de uso.
As métricas aqui apresentadas foram adaptadas para avaliar a qualidade da tradução dos requisitos para especificação de casos de uso.
Para adaptação das métricas foram aplicadas duas etapas do paradigma GQM (planejamento e definição).
Através das métricas têm- se um resultado quantitativo da tradução, permitindo identificar a ausência de elementos presentes no requisito nos respectivos casos de uso, bem como identificar a completude do mapeamento do SRS, para especificação de casos de uso, apontando quais os requisitos receberam cobertura completa, quais receberam cobertura incompleta, quais não receberam cobertura e até mesmo descobrir os requisitos omissos no SRS.
A aplicação das métricas permite também identificar as traduções ambíguas e inconsistentes.
Em o próximo capítulo, será feita a demonstração do modelo proposto, aplicando as etapas seguintes do GQM (coleta de dados e interpretação).
Este capítulo tem como objetivo avaliar o modelo proposto, aplicando as fases seguintes do GQM:
Coleta de dados e interpretação.
A coleta de dados foi feita em documentos de especificação de requisitos e casos de uso de dois sistemas.
A avaliação do modelo proposto foi feita em SRS e documentos de especificação de casos de uso de dois sistemas:
Comunicador Instantâneo (Anexos I e II) e Sistema SIMULARE (Anexos V e VI).
O sistema Comunicador Instantâneo foi desenvolvido por TIDIA-AE, uma incubadora virtual de conteúdos digitais que destina- se à criação cooperativa de conteúdos digitais abertos de interesse acadêmico, tecnológico ou social.
O sistema SIMULARE foi desenvolvido por o projeto Usina (United Software Infra--structure Alliance), um projeto educacional formado por um grupo de oito estudantes (mestrandos e PHD) da Universidade Federal de Pernambuco, que fornece à comunidade sua experiência em processos de desenvolvimento de software.
O projeto é financiado por a FAPESP (Fundação de Amparo à Pesquisa do Estado de São Paulo).
Ambos os sistemas utilizam o padrão IEEE para especificar os requisitos, porém nem todas as informações sugeridas por o modelo proposto estão presentes no SRS.
Antes de aplicar o modelo proposto, foi feita uma avaliação nos SRS dos sistemas, com a finalidade de analisar o impacto da qualidade dos mesmos na qualidade do mapeamento.
Para analisar os SRS, foram selecionados quatro estudantes de mestrado em Ciência da Computação da área de Engenharia de Software da Pontifícia Universidade Católica do Rio Grande do Sul (PUCRS), sendo que dois estão no primeiro ano de mestrado e dois já estão na fase final do mesmo.
Cada um dos participantes recebeu uma cópia do SRS e especificação dos casos de uso dos dois sistemas, em os quais eles tiveram que interpretar cada requisito funcional do SRS e associar aos casos de uso do documento de especificação de casos de uso.
A finalidade dessa análise era descobrir:
A) se os requisitos funcionais apresentam única interpretação;
B) se os participantes identificam os mesmos atores, funções e requisitos não funcionais;
C) se os participantes relacionam os requisitos aos mesmos casos de uso.
Cada participante teve 15 dias para concluir a análise dos documentos, sendo que nesse período eles não trocaram idéias sobre a interpretação.
Com o resultado da análise dos participantes, foram aplicadas as métricas para avaliar a completude, não ambigüidade e consistência dos documentos.
Essas métricas foram apresentadas no capítulo 2, subseção 2.3.2.
Com o resultado da análise da qualidade do SRS, foi feita a aplicação do modelo proposto.
Para a coleta de dados foram seguidas as fases seguintes do GQM.
Em as subseções a seguir, será apresentada uma breve descrição de cada sistema;
A análise do SRS, baseada na análise dos participantes que se encontram nos Anexos III e VII;
E a demonstração da aplicação do modelo em alguns requisitos, sendo que a demonstração completa encontra- se nos Anexos IV e VIII.
A estrutura do SRS do sistema segue as recomendações do padrão IEEE, porém não contém todas as informações propostas neste trabalho.
As informações para gerar os casos de uso foram extraídas, basicamente, do campo Requisitos Funcionais.
Abaixo, o trecho extraído do SRS do campo «Visão Geral do Sistema:
&quot;O SRS apresenta as funcionalidades da ferramenta do Comunicador Instantâneo que visa oferecer recursos para a comunicação e interação entre os usuários do sistema.
A interação dos usuários será através de conversação via texto, áudio, vídeo e videoconferência, envio e recebimento de arquivos e recursos avançados de comunicação como whiteboard, compartilhamento de programa e assistência remota.
Os principais usuários do sistema serão:
Professores, monitores, alunos, secretários.»
O SRS (Anexo I) do sistema Comunicador Instantâneo é composto de 24 requisitos funcionais.
A análise dos mesmos encontra- se no Anexo III.
De os 24 requisitos que compõem o SRS, os seguintes apresentaram as seguintes restrições:
Requisitos e:
Estão ambíguos.
Requisito: Não especifica as aplicações que podem ser compartilhadas.
Requisito: Não especifica quais os recursos avançados que podem ser utilizados.
Requisito: Não foi compreendido por as pessoas que analisaram o documento por a falta de uma definição para o termo utilizado.
Com base na análise feita nos documentos (Anexo III), aplicam- se as métricas para analisar a qualidade dos mesmos, de acordo com as métricas apresentadas no capítulo 2, subseção 2.3.2.
Completude: Os requisitos são distribuídos nos blocos A, B ou C, conforme sua classificação.
Em o bloco D, não será atribuído nenhum requisito, visto que nenhum dos participantes que analisaram o documento para este trabalho participou do processo do desenvolvimento da ferramenta Comunicador Instantâneo, assim torna- se impossível saber se há e quais são os requisitos omissos.
Abaixo, a distribuição dos requisitos:
Bloco A (requisitos conhecidos e documentados):
R1, R2, R3, R4, R5, R6, R7, R8, Bloco B (requisitos conhecidos e não documentados):
Não foi encontrado no SRS requisitos a serem definidos ou documentados.
Bloco C (requisitos não compreendidos):
R19, R20, R21.
Consideraram- se requisitos não compreendidos aqueles que deixaram algum tipo de dúvida, por exemplo, em relação a os recursos que devem ser disponíveis por o requisito e/ ou aqueles que utilizam termos que não apresentam a definição no campo definições, acrônimos e abreviaturas do SRS.
Aplicando a métrica:
Q $= nA/ n r Esse resultado revela que o SRS está incompleto, pois apresenta requisitos que não estão escritos de forma clara, deixando dúvidas em relação a as funções que os requisitos apresentam.
Ambigüidade: X $= Nº.
De requisitos não ambíguos/ Nº.
De requisitos presentes no SRS.
Esse resultado confirma a ambigüidade encontrada no SRS.
Consistência: X $= Nº.
De requisitos consistentes/ Nº.
De requisitos presentes no SRS.
De acordo com a análise do SRS, não ocorreu casos de requisitos em contradição, assim:
O resultado da métrica confirma que o documento de especificação de requisitos está consistente.
Com a aplicação das métricas, conclui- se que o SRS não é qualificado, pois, embora tenha apresentado poucos defeitos em relação a o número total de requisitos, o mesmo mostrou- se incompleto e ambíguo.
As informações para especificar os casos de uso foram extraídas dos campos Requisitos Funcionais do SRS, porém as outras informações sugeridas no modelo proposto mostraram- se necessárias, para melhor entendimento do funcionamento do sistema, dando um maior apoio na tradução dos casos de uso.
Aqui será mostrada, a título de exemplo, a aplicação das métricas para a tradução, apresentadas no capítulo 7, em apenas alguns requisitos.
A aplicação completa está demonstrada no Anexo IV.
A Figura 11 ilustra o primeiro requisito do SRS e a Tabela 4 corresponde à descrição do caso de uso, gerado a partir de o requisito, de acordo com a análise dos participantes:
O sistema deve permitir aos usuários (professores, monitores, alunos e secretários) a inclusão, alteração, exclusão, localização e visualização completa da lista de contatos.
2. Sistema exibirá uma tela com campos para a pesquisa, contatos».
Fluxo Alternativo de Eventos Ações do Ator: Ações do Sistema:
E exibe uma mensagem informativa ao usuário.
De acordo com a Figura 11, os seguintes elementos foram identificados no requisito:·
Funções F $= 5 (inclusão, alteração, exclusão, localização e visualização).·
Atores A $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
Conforme Tabela 4, os seguintes elementos foram identificados na especificação do caso de uso:·
Funções F1 $= 2 (localizar e incluir).·
Atores A1 $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
Logo, para avaliar a completude da tradução aplica- se a seguinte métrica:
Conforme a interpretação do resultado, esse valor informa que existe problemas na tradução do requisito para caso de uso, ou seja, existem elementos no requisitos que não foram mapeados para o caso de uso correspondente, porém não aponta qual elemento não está presente no caso de uso.
Para descobrir exatamente qual ponto do mapeamento apresenta falhas, o próximo passo é aplicar as métricas em cada elemento presente no SRS.
Análise do mapeamento dos atores:
Esse resultado indica que todos os atores do requisito estão presentes no caso de uso correspondente.
Esse resultado indica que existem funções identificadas no requisito que não estão presentes no caso de uso correspondente.
Assim, com a aplicação das métricas em cada elemento identificado no requisito é mais fácil identificar, exatamente, qual elemento apresentou problema no mapeamento, neste caso as funções.
Logo, podemos conluir que, em relação a a completude, a tradução está incompleta, pois nem todas as funções presentes no requisito foram mapeadas para o caso de uso.
Esse resultado foi obtido através da leitura do requisito e do caso de uso.
Embora o caso de uso não apresente todas as funcionalidades, o requisito e o caso de uso correspondente têm a mesma interpretação.
Esse resultado foi obtido da mesma maneira que M9, através da leitura do requisito e do caso de uso.
De a mesma forma que M9, a ausência de algumas funcionalidades não interferiram na consistência entre o requisito e caso de uso.
De acordo com os resultados, o mapeamento do requisito apresentou problemas somente na transcrição das funcionalidades, entretanto esta falha não afetou na consistência e não ambiguidade da tradução.
A Figura 12 ilustra o requisito do SRS e as Tabelas 5 e 6 os casos de uso correspondentes.
O sistema deve permitir aos usuários (professores, monitores, alunos e secretários) a conversação via texto, áudio, vídeo e videoconferência.
1. Usuário seleciona contato com quem quer iniciar 2.
Sistema exibe relação de todas as opções que o a conversa e clica com o botão direito do mouse.
Fluxo Alternativo de Eventos 1 Ações do Ator:
Ações do Sistema:
Quem ele quer iniciar a conversa.
Fluxo Alternativo de Eventos 2 comunicador instantâneo na barra de ferramentas contatos on-line com quem o usuário pode do sistema.
Fluxo Alternativo de Eventos 3 avisando que o usuário quer iniciar um contato via áudio e pergunta se o contato aceita pedido.
1. O usuário clica no menu &quot;Ações «na tela de conversação.
Fluxo Alternativo de Eventos 1 Ações do Ator:
Ações do Sistema:
Com o qual deseja estabelecer a conversa via vídeo.
Podem ser efetuadas por o usuário.
Videoconferência «selecionado.
Outras Informações:
O fluxo básico alternativo 1 não possui a pré-condição &quot;iniciar conversação».
Fluxo Alternativo de Eventos 2 ao seu computador o sistema notificará o usuário de que a webcam não está conectada.
O requisito gerou dois casos de uso U. C. 4.3 e U. C. 4.4.
Assim, as métricas aplicadas são as que foram desenvolvidas para os casos onde um requisito gera mais de um caso de uso.
De acordo com a Figura 12, os seguintes elementos foram identificados no requisito:·
Funções F $= 4 (conversação via texto, áudio, vídeo e videoconferência).·
Atores A $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
No caso de uso 4.3 (Tabela 5), os seguintes elementos foram identificados:·
Funções F1 $= 2 (conversação via texto e via áudio).·
Atores A1 $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
No caso de uso 4.4 (Tabela 6), os seguintes elementos foram identificados:·
Funções F1 $= 1 (conversação via videoconferência).·
Atores A1 $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
Logo, para avaliar a completude da tradução aplica- se a seguinte métrica:
9 Completude da tradução:
De acordo com esse resultado, existem elementos presentes no requistos que não foram mapeados para os casos de uso.
Portanto, é necessária a aplicação das métricas em cada elemento para chegar no foco do problema.
Com esse resultado, conclui- se que todos os atores do requisito estão presentes nos casos de uso correspondentes.
De acordo com o resultado, o problema está no mapeamento das funções, ou seja, existem funções que não foram mapeadas para o caso de uso.
Assim, é necessária uma revisão nesses elementos.
M10 = uCun/ UC Esse resultado foi obtido através da leitura do requisito e dos casos de uso.
O requisito apresenta 4 funcionalidades:
Conversação via texto, áudio, vídeo e videoconferência.
Logo, entende- se que são quatro funções distintas.
O caso de uso 4.3 possui a mesma interpretação que o requisito.
O problema encontrado foi em relação a as funções conversação via vídeo e videoconferência.
Por conversação via vídeo entende- se que a conversa ocorra entre duas pessoas via vídeo, e a videoconferência que a conversa ocorra entre várias pessoas também via vídeo.
No caso de uso relacionado, as duas funcionalidades estão sendo tratadas como se fossem a mesma, ou seja, ambas como se fossem via vídeo.
O requisito não esclarece e não distingue as funcionalidades, deixando uma livre interpretação para quem especifica os casos de uso.
Assim, o requisito deverá ser reescrito de forma mais clara, diferenciando e/ ou explicando cada uma das funções, para que o caso de uso possa ter a mesma interpretação que o requisito e para que a pessoa que especificar os casos de uso não tenha dúvidas sobre as funções.
M12 = uCc/ UC Esse resultado foi obtido da mesma maneira que M10, através da leitura do requisito e do caso de uso.
Embora tenha sido detectado a ausência de funções e a ambigüidade no mapeamento, a consistência na tradução não foi afetada, pois os casos de uso não contradizem o requisito.
A Figura 13 ilustra o requisito do SRS e as Tabelas 7 e 8 os casos de uso correspondentes.
O sistema deve permitir aos usuários (professores, monitores, alunos e secretários) o envio e recebimento de arquivos durante a conversação.
2. Sistema apresenta a tela seleção do arquivo a ser enviado.
Fluxo Alternativo de Eventos 1 Ações do Ator:
Ações do Sistema:
Manda uma notificação para o usuário.
Fluxo Alternativo de Eventos 2 conversação.
Fluxo Alternativo de Eventos 3 contato da lista de contatos para o qual deseja seleção arquivo a ser enviado.
Para o fluxo básico e alternativo 3 não é pré-condição iniciar Outras Informações:
5. O sistema recebe o arquivo e ao terminar, retorna uma mensagem dizendo que o arquivo foi recebido o arquivo.
Fluxo Alternativo de Eventos 1 pasta própria do sistema (Meus Arquivos arquivo.
Recebidos) e ao terminar, retorna uma mensagem dizendo que o arquivo foi recebido com sucesso.
Fluxo Alternativo de Eventos 2 dizendo que o recebimento do arquivo foi cancelado.
Assim como o requisito, o requisito também gerou dois casos de uso U. C. Onde um requisito gera mais de um caso de uso.
De acordo com a Figura 13, os seguintes elementos foram identificados no requisito:·
Funções F $= 2 (envio e recebimento de arquivos).·
Atores A $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
No caso de uso 4.6 (Tabela 7), os seguintes elementos foram identificados:·
Funções F1 $= 1 (enviar arquivos).·
Atores A1 $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
No caso de uso 4.19, os seguintes elementos foram identificados:·
Funções F1 $= 1 (receber arquivos).·
Atores A1 $= 4 (professores, monitores, alunos e secretários).·
Requisitos não funcionais não identificados.
Logo, para avaliar a completude da tradução aplica- se a seguinte métrica:
9 Análise da completude da tradução:
De acordo com esse resultado, o mapeamento de requisito, para casos de uso está completa, pois todos os elementos presentes no requisito estão presentes também nos casos de uso.
Assim, não é necessário aplicar as métricas em cada elemento presente no requisito.
M10 = uCun/ UC Esse resultado foi obtido através da leitura do requisito e do caso de uso.
O requisito e o caso de uso correspondente apresentam a mesma interpretação.
M12 = uCc/ UC Esse resultado foi obtido da mesma maneira que M10, através da leitura do requisito e do caso de uso.
Existe consistência entre o requisito e o caso de uso.
De acordo com os resultados, o mapeamento do requisito para casos de uso não apresentou falhas, pois tradução está completa, não ambígua e consistente.
O restante da análise do mapeamento encontra- se no Anexo IV.
Para saber se o mapeamento foi completo, isto é, se todos os requisitos possuem casos de uso correspondentes e se os mesmos receberam cobertura completa, é preciso que todo o mapeamento tenha sido analisado, assim aplica- se a métrica M8, conforme apresentado no capítulo 7.
Bloco A:
Requisitos com cobertura completa dos casos de uso.
Bloco B: Requisitos com cobertura incompleta.
Bloco C: Requisitos sem casos de uso.
Bloco D: Requisitos deconhecidos.
O SRS apresenta, no total, 24 requisitos funcionais, sendo que 6 requisitos não foram mapeados para casos de uso e o mapeamento de 4 requisitos estavam incompletos.
Além desses requisitos, também foram descobertos os requisitos ausentes, pois existem casos de uso que não estão relacionados aos requisitos.
De acordo com a Figura 14, os requisitos que estão nos blocos B e C, precisam ser reavaliados, pois não sofreram cobertura completa (bloco B) e não possuem nenhum caso de uso correspondente (bloco C), e os casos de uso que estão no bloco D correspondem aos requisitos deconhecidos, pois eles não estão relacionados aos requisitos do SRS.
A métrica será aplicada nos requisitos que receberam cobertura completa dos casos de uso.
Aplicando a métrica:
M8 $= nA/ nr Esse resultado confirma que em relação a a completude, a tradução dos requisitos está incompleta, pois nem todos possuem casos de uso correspondentes e/ ou nem todos os elementos foram mapeados para casos de uso.
O documento de especificação de requisitos utiliza o padrão IEEE, porém não utiliza todos as informações propostas por o modelo, o que pode ter contribuído para a ambigüidade encontrada em alguns requisitos e mapeamentos.
Tais informações auxiliam a melhor compreensão dos requisitos, refletindo, assim, na especificação dos casos de uso.
Em relação a a ambigüidade e consistência, o mapeamento mostrou problema no requisito R4 que apresentou duas interpretações.
A primeira interpretação não teve cobertura dos casos de uso e na segunda interpretação o caso de uso 4.1 foi relacionado ao requisito.
Entretanto, comparando o requisito R4 com o caso de uso 4.1 ao qual foi relacionado, constase que ambos apresentam diferentes interpretações concluindo, assim, que não existe relacionamento entre eles.
O requisito R5, embora não tenha apresentado ambigüidade no SRS, teve problemas com ambigüidade na tradução para caso de uso.
Em esse caso, a ambigüidade na tradução pode ter interferido no resultado final da avaliação do mapeamento, pois de acordo com a interpretação o resultado poderia ter sido diferente.
Se a interpretação de conversação, via vídeo e via videoconferência, fosse de que ambas são a mesma função, a tradução teria sido completa tanto no atributo completude, pois todos os elementos teriam sido mapeados, quanto no atributo não ambigüidade.
Mas para isso acontecer é necessário que o requisito esteja escrito de maneira mais clara, diferenciando cada função.
O requisito R18, embora tenha apresentado duas interpretações no SRS, em relação a o número de funções, o resultado do mapemanto não foi afetado, pois o requisito recebeu cobertura completa do caso de uso, mostrando- se, assim, completo, consistente e não ambíguo.
De a mesma forma que o sistema Comunicador Instantâneo, o Sistema SIMULARE utiliza o padrão IEEE para especificar os requisitos, porém nem todas as informações sugeridas por o modelo proposto estão presentes no SRS.
Abaixo, o trecho extraído do campo «Visão Geral do Produto:
&quot;O SIMULARE tem como objetivo o desenvolvimento e implantação de um simulador de um aquário.
O sistema simula a existência de peixes predadores, não predadores, corais e quaisquer outros elementos a serem definidos por o usuário.
Os peixes deslocam- se, alimentam- se e reproduzem- se, num ambiente em que a água é considerada estática e os corais também se reproduzem.
Os peixes predadores se alimentam de corais e de peixes não predadores.
Os não predadores só de corais.
Os corais se reproduzem obedecendo a ciclos O SRS do sistema SIMULARE (Anexo V) é composto de 5 requisitos funcionais.
A análise dos requisitos está no Anexo VII.
De acordo com a análise dos participantes, apenas o requisito apresentou ambigüidade.
A partir de a análise feita no SRS, aplicam- se as métricas para avaliar a qualidade do mesmo.
Completude: Os requisitos são distribuídos nos blocos A, B ou C, conforme sua classificação.
Em o bloco D, não será atribuído nenhum requisito, visto que nenhum dos participantes que analisaram o documento, para este trabalho, participou do processo do desenvolvimento da ferramenta SIMULARE, assim torna- se impossível saber se há e quais são os requisitos omissos.
Bloco A (requisitos conhecidos e documentados):
R02, R03, R04, R05.
Bloco B (requisitos conhecidos e não documentados):
Não foi encontrado no SRS requisitos a serem definidos ou documentados.
Bloco C (requisitos não compreendidos):
R01. Consideraram- se requisitos não compreendidos aqueles que deixaram algum tipo de dúvida.
Aplicando a métrica:
Q $= nA/ n r Esse resultado revela que o SRS está incompleto, pois apresenta requisitos que não estão escritos de forma clara, deixando dúvidas em relação a as funções que os requisitos apresentam.
Ambigüidade: X $= Nº.
De requisitos não ambíguos/ Nº.
De requisitos presentes no SRS.
Esse resultado confirma a ambigüidade encontrada no SRS.
Consistência: X $= Nº.
De requisitos consistentes/ Nº.
De requisitos presentes no SRS.
De acordo com a análise do SRS, não ocorreu casos de requisitos em contradição, assim:
O resultado da métrica confirma que o documento de especificação de requisitos está consistente.
Com a aplicação das métricas, concluímos que o SRS não é qualificado, pois o mesmo mostrou- se incompleto e ambíguo.
Para saber se o mapeamento foi completo, ou seja, se todos os requisitos do SRS possuem casos de uso correspondente e se os mesmos receberam cobertura completa, é preciso que todo o mapeamento tenha sido analisado e a seguir aplica- se a métrica M8, conforme apresentado no capítulo 7.
A aplicação das métricas na tradução do sistema SIMULARE está no Anexo VIII.
De acordo com a análise feita no SRS, ilustrado na subseção 8.2.2.1, o mesmo mostrou- se incompleto, uma vez que nem todos os requisitos estão escritos de forma clara;
E ambíguo, pois um requisito apresentou mais de uma interpretação.
De essa forma, a análise da tradução será feita de acordo com cada uma das interpretações:
Completude: Faz- se a distribuição dos requisitos de acordo com sua classificação, conforme Figura 15 e, a seguir, aplica- se a métrica.
M8 $= nA/ nr O mapeamento mostrou- se completo, pois todos os requisitos possuem pelo menos um caso de uso e todas as funções foram mapeadas.
Os requisitos omissos foram descobertos, pois três casos de uso não possuem requisito correspondente.
Completude: Faz- se a distribuição dos requisitos de acordo com sua classificação, conforme Figura 16 e, a seguir, aplica- se a métrica.
M8 $= nA/ nr De acordo com essa interpretação a tradução do requisito para caso de uso está completa.
Embora as funcionalidades identificadas nos casos de uso não tenham sido especificadas no requisito, os participantes concluíram que essas funcionalidades fazem parte da função &quot;configuração da simulação «encontrada no requisito, daí o relacionamento entre o requisito e os casos de uso.
As duas interpretações estão completas, consistentes e não ambíguas.
O que as diferência é o fato de que, numa das interpretações, teve a descoberta de requisitos ausentes no SRS.
Esse diferencial só pôde ser percebido com a distribuição dos requisitos e casos de uso nos quadrantes, conforme a classificação do mapeamento.
O SRS do sistema SIMULARE adotou alguns campos do SRS proposto por IEEE, porém nem todas as informações identificadas neste trabalho estão especificadas no documento.
O único problema encontrado na tradução foi em relação a o requisito, onde todos os participantes o interpretaram da mesma maneira, porém o relacionaram a diferentes casos de uso.
Dois participantes identificaram, nos casos de uso, funcionalidades que não foram especificadas nos requisitos e, mesmo assim, associaram esses casos de uso ao requisito.
Os outros participantes relacionaram o requisito somente aos casos de uso que especificaram as funcionalidades identificadas no requisito.
Embora tenha ocorrido essa discordância em relação a a associação do requisito com os casos de uso, o resultado final do mapeamento não sofreu conseqüências, pois todos os requisitos do SRS foram classificados no quadrante A, como sendo os requisitos que possuem caso de uso correspondente e que receberam cobertura completa no mapeamento.
O único diferencial encontrado foi em relação a os requisitos omissos, que foram identificados na abordagem dos participantes que associaram somente os casos de uso que especificaram as funcionalidades identificadas no requisito.
Este capítulo apresentou a avaliação da qualidade dos SRS dos sistemas Comunicador Instantâneo e SIMULARE.
Demonstrou a aplicação das métricas em alguns mapeamentos dos sistemas, sendo que a aplicação completa encontra- se nos anexos IV e VIII.
Nos mapeamento dos dois sistemas, foram encontrados problemas.
Em os dois casos, os SRS não possuem todas as informações sugeridas no modelo proposto.
Se, por exemplo, na especificação do requisito, existissem, pelo menos, os campos &quot;entrada, processamento e saída «poderia- se diminuir o problema de interpretação dos requisitos, pois esses campos permitem uma melhor compreensão do comportamento do requisito.
O modelo permitiu identificar os problemas encontrados nos SRS e no mapeamento dos requisitos para casos de uso.
Através do modelo, foi possível descobrir quais elementos de cada requisito não foram mapeados para os casos de uso e quais apresentaram problemas de ambigüidade e consistência, bem como descobrir se o mapeamento do SRS foi completo.
Assim, o modelo aponta os requisitos que possuem casos de uso correspondente, os requisitos que não receberam cobertura completa, os requisitos que não possuem casos de uso e, principalmente, o modelo identifica os requisitos ausentes no SRS.
Este capítulo apresenta as considerações finais deste trabalho, descrevendo suas principais contribuições e limitações.
Ainda, destaca rumos para futuras pesquisas na área.
Especificar requisitos de elevada qualidade não é tarefa trivial.
Por isso a necessidade da análise com o objetivo de capturar falhas.
As métricas podem ajudar a capturar os defeitos e erros de requisitos, permitindo as mudanças necessárias.
É importante que a qualidade da tradução dos requisitos, para casos de uso, possa ser analisada, pois através da análise é que os erros e a ausência de funções são identificados.
Porém, não se encontrou, na literatura, métricas aplicadas à tradução dos requisitos para caso de uso, o que se encontrou foram métricas aplicadas no SRS.
As métricas apresentadas neste trabalho foram uma adaptação das métricas encontradas na literatura.
O modelo GQM auxiliou nessa adaptação, pois através dos objetivos que se pretendia atingir foram geradas as questões e por fim as métricas.
O modelo permitiu identificar o foco do problema, ou seja, os elementos do requisito que não foram mapeados para o caso de uso correspondente e os mapeamentos ambíguos e inconsistentes.
Com essas indicações, o modelo aponta, exatamente, qual requisito deve ser reavaliado de maneira que a interpretação seja completa e não ambígua, evitando, assim, que o documento inteiro passe por uma nova avaliação.
O modelo também permite descobrir os requisitos omissos no SRS por pessoas que não estejam envolvidas no processo de desenvolvimento do software, o que o diferência do modelo proposto por Alexander.
Além de apontar os requisitos ausentes, o modelo também define o local para o registro dos mesmos, bem como o registro dos requisitos que receberam mapeamento completo, os que receberam mapeamento incompleto e até mesmo os requisitos que não possuem casos de uso correspondente.
Embora os SRS dos dois sistemas estudados não apresentem as informações propostas por o modelo, foi possível gerar a especificação dos casos de uso.
Entretanto, foram encontradas dificuldades no mapeamento por o fato de alguns requisitos estarem ambíguos.
Essas ambigüidades são conseqüências de um documento incompleto e com poucas explicações referentes aos requisitos funcionais.
Com a aplicação do modelo constatou- se que, quando o avaliador tem que associar requisitos a casos de uso há uma tendência do mesmo associar os requisitos a casos de uso que não especificam funções declaradas no requisito.
Isso se dá devido a o fato do requisito ser ambíguo e/ ou não especificar claramente as funções.
Por isso, a importância de especificar requisitos com qualidade e com maior detalhamento, diferenciando as funções e especificando as entradas, processamento e saídas para cada requisito do SRS, gerando, assim, documentos mais claros e de fácil interpretação, o que implicará, diretamente, a qualidade de especificação dos casos de uso, fazendo com que o mapeamento dos mesmos esteja completo, não ambíguo e consistente.
A proposta de um modelo que permita a avaliação da qualidade da tradução de requisitos para casos de uso visa contribuir para a área de Engenharia de Software ao preencher uma lacuna existente em relação a a qualidade do mapeamento entre requisitos e casos de uso.
O objetivo do modelo é identificar falhas no mapeamento, isto é, identificar a ausência de elementos do requisito na especificação dos casos de uso correspondentes e requisitos omissos, gerando documentos na fase de especificação de um sistema (SRS e casos de uso) com qualidade e consistência.
Tal aspecto contribui para a qualidade do produto final do software evitando os custos decorrentes de um produto implantado a partir de falhas de qualidade nos seus estágios iniciais.
Através do modelo é possível descobrir os requisitos omissos no SRS sem estar envolvido no processo de desenvolvimento do software, aplicando a métrica que analisa a completude do mapeamento.
Também, pode- se citar como contribuição a não obrigatoriedade de quem preenche o SRS preencher também o documento de especificação de casos de uso, ou seja, não há uma dependência de conhecimento de quem desenvolveu o SRS para descrever os casos de uso, uma vez que o SRS esteja completo, pois o modelo dá as diretrizes de onde as informações, para especificar os casos de uso, são encontradas no SRS.
A principal limitação deste estudo foi não aplicar o modelo proposto numa empresa com documentos mais complexos.
Essa limitação aconteceu, porque a empresa em que o modelo seria aplicado utiliza o processo inverso do modelo proposto:
Primeiro é feito o modelo de casos de uso para, posteriormente, especificar os requisitos.
Sendo que no SRS da empresa, onde os requisitos devem ser especificados, encontra- se o modelo de caso de uso bem como sua especificação.
Outra limitação importante diz respeito aos atributos de qualidade, pois não são apresentadas as métricas para todos os atributos e, muitas métricas apresentadas na literatura, não se aplicam à tradução.
Inicialmente, tentou- se adaptar a métrica correção, porém a mesma não foi adotada, pois necessitaria da opinião do cliente que não é o propósito do modelo.
Como trabalhos futuros prevêem- se o estudo e a adaptação de novos atributos e métricas que possam ser aplicados na análise da tradução, por exemplo, atributo correção.
Isso permitiria uma análise mais completa em relação a a transcrição.
Identifica- se também como trabalho futuro, a aplicação do modelo em projetos de maior complexidade, com a finalidade de comparar os resultados do modelo proposto.
Finalmente, a criação de uma ferramenta de apoio para a aplicação do modelo.
