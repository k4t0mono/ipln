Os serviços semânticos tornaram- se um desafio importante na computação, sendo capazes de encontrar, combinar e agir de acordo com informações contextuais para se adaptar dinamicamente a diferentes requisitos de comportamento.
Para facilitar o desenvolvimento de serviços semânticos e a gerência de informação, contexto e recursos este trabalho apresenta um framework chamado UBIWorks.
A arquitetura do framework permite o suporte para inferência contexto através do gerenciamento de dados e recursos que são fornecidos por um middleware em conjunto com um mecanismo para processamento de eventos complexos (CEP).
O mecanismo CEP é responsável por a inferência do contexto a partir de os dados brutos coletados por o middleware.
Através do mecanismo CEP e por um serviço para localização de informação, a gerência e disponibilização de contexto e informação são facilitadas, auxiliando a construção de serviços semânticos.
Palavras Chave: Desenvolvimento de serviços semânticos, Processamento de Eventos Complexos, Aplicações Web Semânticas, Sistemas de informação Web cientes de processo.
A computação está deixando de ser baseada em sistemas centralizados e orientados a computadores pessoais para se tornar uma computação portável, fundamentada em dispositivos móveis e com diversidade de serviços e meios de comunicação.
De acordo com estimativas da União Internacional de Telecomunicações (ITU), há mais de 1,1 bilhões de assinaturas ativas de banda larga móvel em todo o mundo.
Ao longo de os últimos quatro anos, as assinaturas de banda larga móvel cresceram 45%.
Ericsson estima um crescimento de 55% de assinaturas ano-a-ano, também atingindo mais de 1,1 assinaturas.
Eles acreditam que as assinaturas de banda larga móvel chegará a 6,5 bilhões em 2018.
A maioria dos dispositivos são, e continuarão a ser, celulares.
A explosão do tráfego de eventos ao longo de os últimos anos devido a a descentralização dos sistemas de informação criou um novo conjunto de demandas das empresas.
A infraestrutura de tecnologia da informação (Ti) das empresas de diferentes tamanhos precisa gerenciar, analisar e compreender este tráfego para extrair informações relevantes.
A partir de a extração de informações relavantes, novas demandas surgem, como por exemplo, serviços de informação capazes de atender as necessidades especificas de cada usuário.
A computação ubíqua se beneficia dessa demanda, pois visa prover uma computação onipresente (invisível, amigável e disponível para seus usuários), oferecendo acesso conveniente (a qualquer hora e em qualquer lugar) a informações relevantes e a dispositivos eletrônicos.
Estas características da computação ubíqua são essenciais para melhorar a interação entre usuários e dispositivos eletrônicos através da integração do processamento de informações com atividades e objetos do cotidiano das pessoas.
Por esses motivos, a computação ubíqua tem papel fundamental para a construção de uma cidade inteligente (smart city) que visa o crescimento e desenvolvimento urbano de forma sustentável, modernizando a cidade e melhorando a qualidade de vida.
A computação ubíqua possibilita de forma transparente o gerenciamento dos recursos de infraestrutura da cidade, permitindo também, a integração e fornecimento de serviços das diferentes áreas públicas, como por exemplo, saúde, segurança, educação, transporte, manutenção, etc..
Os serviços fornecidos por a cidade devem ser sensíveis a contextos distintos.
Contexto é qualquer informação que pode ser utilizada para caracterizar a situação de uma entidade.
Uma entidade é uma pessoa, lugar ou objeto que é considerado relevante para a interação entre um usuário e uma aplicação, incluindo também o próprio usuário e a aplicação.
Um sistema é sensível ao contexto se ele o utiliza para fornecer informações relevantes e/ ou serviços para o usuário, onde a relevância a diferentes informações contextuais, como localização e atividades diárias para atender as diferentes necessidades dos usuários finais, provendo serviços com acesso transparente (independentemente do dispositivo ou local), de fácil interação (amigáveis) e que promovem a integração e interação entre os usuários (colaborativos).
Motivação O presente trabalho está associado a um grupo de pesquisa cuja preocupação inicial era elevar a capacidade de integração de sistemas de middleware RFID (Radio Frequency Identification) através do processamento de eventos complexos distribuídos entre diferentes organizações de negócios.
Entretanto, o crescimento das assinaturas de internet banda larga móvel reforça a demanda por acesso a informações e serviços a qualquer momento e em qualquer lugar, estimulando também pesquisas para enriquecer a usabilidade dos sistemas através de serviços e conteúdos que se adaptam de acordo com o contexto e as necessidades do usuário.
Portanto, existe a necessidade de explorar e incorporar outras tecnologias além de RFID como redes de sensores que fornecem informações contextuais e também computação móvel que disponibiliza interação dinâmica independente do local do usuário.
Por esses motivos, este trabalho busca apoio nas características da computação ubíqua para desenvolver um framework de serviços semânticos.
Novos desafios devem ser superados, bem como suprir os requisitos identificados em sistemas de computação ubíqua, desenvolver serviços que adaptam seu comportamento ao contexto e aos requisitos de aplicação.
Também é necessário integrar os serviços de middleware RFID[ AHB+ 09 a, AHB+ 09 bAHB+ 09aAHBC10, Ama11, AHCa11] desenvolvidos anteriormente nos trabalhos do grupo.
Estes serviços prestam suporte essencial à tecnologia RFID.
Objetivo O objetivo geral deste trabalho é conceber um framework para desenvolvimento de serviços semânticos com suporte a ambientes ubíquos.
A arquitetura deste framework, com base na estrutura hierárquica da computação em nuvem, permite suporte a gerência dos recursos de infraestrutura, inferência de contexto e acesso conveniente à informação.
Para atingir o objetivo geral proposto foram definidos os seguintes objetivos específicos:
Aprofundar o estudo da base teórica, envolvendo computação ubíqua, computação em nuvem e processamento de eventos complexos;
Identificar funcionalidades necessárias para processamento de eventos complexos em sistemas ubíquos, bem como disponibilizar serviços sensíveis ao contexto;
Definir os elementos necessários para compor numa arquitetura de software decentralizada e modular que permita gerência de recursos, processamento de eventos complexos e cooperação entre serviços sensíveis ao contexto;
Integrar os serviços já existentes no grupo ao framework;
Validar o framework proposto através de aplicações.
Organização do texto O restante do trabalho está organizado da seguinte forma.
O Capitulo 2 contém o referencial teórico em o qual o presente trabalho tem como fundamentação.
Os trabalhos relacionados encontramse no Capitulo 3.
A descrição do framework é apresentada no Capitulo 4 enquanto no Capitulo 5 contém uma avaliação experimental do framework.
Por fim, no Capitulo 6 apresenta as conclusões e trabalhos futuros.
O referencial teórico representa uma importante etapa deste trabalho, pois em ele encontramse os conceitos básicos que este trabalho utiliza como fundamentação teórica.
As subseções seguintes apresentam uma visão geral da computação ubíqua, processamento de eventos complexos e computação em nuvem.
Computação Ubíqua O termo &quot;computação ubíqua «define a tendência que os seres humanos têm de interagir não somente com um computador, mas com um conjunto de elementos especializados de hardware e software, conectados por fios, ondas de rádio e infravermelho, tão onipresentes que a sua presença pode não ser perceptível.
Atualmente ambientes ubíquos estão se tornando heterogêneos e ricos em serviços, onde a diversidade de dispositivos de comunicação, como notebooks, assistentes digitais portáteis (PDA), eletrodomésticos digitais, telemática para automotivos, e diversos sensores, todos interconectados através de diferentes redes e plataformas.
As seguintes funcionalidades abaixo caracterizam a computação ubíqua:
Incorporação de hardware e software em equipamentos e objetos de uso diário;
Suporte a dispositivos móveis através de serviços de informação em qualquer lugar e a qualquer momento;
Sensibilidade de contexto e adaptabilidade do sistema para requisitos dinâmicos;
Reconhecimento automático e processamento autônomo de tarefas repetitivas sem necessidade de intervenção de usuário.
Diversos trabalhos citam diferentes requisitos necessários para o desenvolvimento de sistemas para computação ubíqua.
A o analisar estes requisitos, podemos sumarizar- los da seguinte maneira:
Arquitetura descentralizada, modular e heterogênea;
Interoperabilidade; Segurança e confiabilidade no funcionamento;
Escalabilidade; Auto-organizável;
Sensibilidade de contexto;
Adaptabilidade; Mobilidade;
Usabilidade. Um sistema de computação ubíquo deve suportar um grande número de agentes computacionais e dispositivos de comunicação que trabalham juntos de forma discreta.
Portanto esse sistema tem características distribuídas, sendo desejável uma arquitetura descentralizada para uma maior confiabilidade.
Esta arquitetura deve ser modular para aumentar a reutilização e extensibilidade do sistema, consequentemente facilitando a manutenção e compreensão do mesmo.
Por fim, deve suportar diferentes plataformas, dispositivos e protocolos de comunicação (suporte a heterogeneidade) Consequentemente, para suportar este ambiente heterogêneo, é necessária interoperabilidade em todos os níveis da computação ubíqua, para isso é recomendável uma arquitetura orientada a serviços (Soa), pois o conceito de Soa é altamente aplicável para o ambiente ubíquo para atingir interoperabilidade entre dispositivos heterogêneos e distribuídos.
Os diferentes dispositivos de um sistema podem possuir capacidades distintas de segurança.
De este modo é necessário fornecer mecanismos básicos para segurança e privacidade dos dados.
Além de segurança, também é necessário prover confiabilidade no funcionamento.
Isto é, um sistema ubíquo precisa fornecer prontidão de serviços corretos (disponibilidade), confiabilidade no uso desses serviços (continuidade), ausência de alterações impróprias do sistema (integridade) e de consequências catastróficas para usuários e ambiente (segurança no funcionamento), por fim, o sistema deve ser de fácil manutenção.
Uma vez que a utilização e quantidade de serviços e recursos aumentam, o sistema deve ser capaz de funcionar de forma correta e manter a continuidade e disponibilidade dos seus serviços.
Sendo assim, escalabilidade também é um requisito essencial para a computação ubíqua, já que se refere à capacidade de aumento da utilização dos recursos e das funcionalidades do sistema enquanto mantém um desempenho apropriado ou aprimorado.
Auto-organização é outro requisito fundamental na computação ubíqua, principalmente em sistemas que possuem redes de comunicação ad hoc.
Mas também quando existe a necessidade de interação dinâmica com novos dispositivos que eram previamente desconhecidos (suporte a conexão dinâmica) ou que se movimentam por o ambiente (suporte à mobilidade).
Portanto, auto-organização permite que o sistema aumente sua organização de forma espontânea, sem o controle do ambiente ou de um sistema externo.
Em a computação ubíqua, um sistema também deve ser capaz de identificar contexto ou situação.
Isso ocorre em razão de a necessidade de identificar acontecimentos ocorridos num ambiente dinâmico.
Entretanto, além de identificar estes acontecimentos, também é imprescindível extrair informações relevantes partindo de inferências feitas sobre estas ocorrências As informações extraídas podem ser enviadas através de serviços de notificação para sistemas de auxilio a tomada de decisão.
Contudo também é possível utilizar estas informações para disponibilizar diferentes serviços de aplicação baseados em contexto.
Sensibilidade de contexto, portanto, é fundamental para a computação ubíqua, pois possibilita que o sistema seja adaptável ao contexto.
Adaptabilidade é a habilidade do sistema de moldar seu comportamento dinamicamente de acordo com eventos que ocorrem em tempo real, como por exemplo, fornecer serviços especializados em usuários, que se modificam em função de a atividade que o usuário esta realizando, considerando também, o período do dia e o local em que a atividade está sendo exercida.
A mobilidade também é uma característica importante de um sistema ubíquo, visto que sistemas ubíquos devem prestar suporte a redes ad hoc, bem como prover aos usuários liberdade de locomoção de um local ou terminal para outro e ainda receber um serviço personalizado[ NL04, Já usabilidade é definida na maioria dos frameworks de qualidade de software como a preocupação do quão fácil é para o usuário realizar uma determinada tarefa e o tipo de suporte que o sistema fornece.
Posto que, a visão tradicional de usabilidade é determinada, em primeiro lugar, por a interface com usuário.
Contudo a arquitetura também pode influenciar na usabilidade do sistema, como por exemplo, fornecer suporte a funcionalidade de desfazer ações (undo).
Similarmente, serviços sensíveis ao contexto, personalizados ou adaptativos influenciam na usabilidade de inúmeras formas.
Como exemplo de serviço personalizado, podemos citar o cenário de uma parada de ônibus inteligente que tem como objetivo fornecer serviços que se adaptam as necessidades do usuário.
A partir de as informações disponibilizadas, o usuário pode escolher o ônibus de acordo com sua frequência ou tempo de espera estimado.
Este serviço deve levar em conta também as limitações dos usuários, como deficiências visuais, auditivas e motoras.
Portanto, a disponibilidade da informação deve ser acessível em formatos apropriados aos usuários.
Atualmente, novas maneiras de visualização de conteúdo estão surgindo.
Realidade aumentada e serviços personalizados são exemplos de funcionalidades que enriquecem a experiência de interatividade do usuário.
Esta experiência deve ser transparente, para isso, seu processo de interação com o usuário deve ser bem planejado.
Consequentemente usabilidade é um requisito fundamental para sistemas de computação ubíqua.
Processamento de eventos complexos (CEP) é um conjunto de técnicas e ferramentas que auxiliam na compreensão e controle de sistemas de informações orientados a eventos.
Um evento é uma ocorrência dentro de um sistema ou domínio particular;
É algo que aconteceu, ou é contemplado como um acontecimento num domínio.
A palavra evento também é utilizada para simbolizar a entidade de programação que representa está ocorrência num sistema de computação.
Portanto, processamento de eventos é ter a capacidade de tomar ação imediata baseados nessas ocorrências.
Atualmente qualquer tipo de sistema de informação, da internet a um celular, é impulsionado por eventos.
Portanto, sistemas de informações devem processar fluxos de eventos para tomar decisões inteligentes num intervalo de tempo curto correspondendo às condições de mudança refletidas nestes eventos.
De este modo CEP permite a extração de informações relevantes a partir de um fluxo de eventos.
Sistemas de cadeia de produção, financeiros, hospitalares e de telecomunicações necessitam processar um ou mais fluxos de evento em tempo real.
CEP supre esta necessidade provendo além de suporte a processamento de fluxo de eventos, também monitoração e auxilio a tomadas de decisão, conformidade em tempo real com politicas de regulamentação, segurança de sistema, integração entre aplicações de negócio e por fim, suporte a arquitetura orientada a eventos.
As relações mais comuns entre eventos são tempo, causalidade e agregação.
A relação tempo define a ordem de ocorrência entre eventos.
Causa expressa a relação de causalidade, como por exemplo, o aumento da pressão causou o aumento de temperatura.
A relação de agregação representa um conjunto de eventos, como uma notificação de alarme devido a a pressão e temperatura excedendo o limite máximo tolerado.
Cada relação simboliza um evento de maior significado, este evento é chamado de evento complexo.
Logo, eventos complexos denotam correlações entre eventos que podem ter também restrições temporais entre eles.
A tecnologia CEP pode ser dividida em três elementos básicos.
Um sistema que utiliza CEP contém pelo menos um produtor, um processador e um consumidor de eventos.
Um elemento produtor de eventos é qualquer dispositivo ou software que notifica eventos ocorridos ao processador de eventos.
A contraparte do produtor é o consumidor de eventos que recebe eventos de seu interesse a partir de o processador de eventos.
Já o processador de eventos realiza operações lógicas e temporais sobre os eventos recebidos que resulta em novos eventos.
As diferentes áreas de aplicação de CEP podem ser classificadas em cinco categorias, são elas:
Observacional, disseminação de informação, comportamento operacional dinâmico, diagnósticos ativos e processamento preditivo.
Processamento de eventos do tipo observacional classifica casos de aplicações que verificam por comportamentos excepcionais em sistemas e processos.
Estas aplicações geram avisos quando estes comportamentos ocorrem.
Outra forma de utilização de processamento de eventos são aplicações de disseminação de informação.
Aplicações deste tipo são responsáveis por a entrega da informação correta para o consumidor de interesse na granularidade e tempo corretos (entrega personalizada de informação).
Já aplicações de comportamento operacional dinâmico utilizam CEP para conduzir as ações realizadas por um sistema de forma dinâmica, reagindo a eventos de entrada.
Finalmente, as aplicações de diagnósticos ativos têm como objetivo detectar e identificar um problema e resolver- lo.
Por fim, aplicações do tipo processamento preditivo são responsáveis por identificar eventos antes de acontecerem, para então eliminar- los ou mitigar seus efeitos.
Computação em Nuvem Em a sua forma mais simples, a computação em nuvem é responsável por a entrega dinâmica dos recursos e funcionalidades de Ti como serviço através da Internet.
Os serviços prestados, as Apis e as aplicações que podem ser hospedados por fornecedores de computação em nuvem têm substituído o uso de computação em grade, se tornando cada vez mais popular entre os usuários.
Existem, obviamente, dois lados para os serviços que são prestados por fornecedores de computação em nuvem:
Aqueles que são fornecidos por entidades comerciais, tais como Amazon e Google, e aqueles que são sistemas open-source, como Open Cirrus Eucalyptus.
Em os Estados Unidos, o Instituto Nacional de Padrões e Tecnologia (NIST) especifica cinco características essenciais de computação em nuvem, três modelos diferentes de serviço, e quatro modelos diferentes de implantação.
As características essenciais são:
Serviço próprio sob demanda:
Os serviços podem ser prestados de forma unilateral e sob demanda para os clientes sem a necessidade de interação humana.
Acesso amplo à rede:
Serviços estão disponíveis através da rede em tempo real através de mecanismos padronizados.
Grupo de recursos:
Os recursos são agrupados para permitir a prestação de serviço paralelo para múltiplos usuários (modelo multi-tenant), enquanto se ajusta à demanda de cada usuário.
Elasticidade: Recursos são rapidamente fornecidos em várias quantidades de granularidade fina permitindo que os sistemas possam ser dimensionados conforme necessário.
Para o cliente da nuvem, os recursos parecem ser ilimitados.
Medidas de qualidade de serviço:
Os serviços utilizam uma capacidade de medição quantitativa e qualitativa que possibilita cobrança baseada em utilização e também a validação da qualidade do serviço.
Existem atualmente três modelos baseados de fornecimento de software em nuvem.
Software como Serviço (SaaS), onde o cliente utiliza uma aplicação, mas não controla o sistema operacional, hardware ou a infraestrutura de rede.
Em esta situação, o usuário gerência aplicações através da rede.
Em seguida existe a Plataforma como Serviço (PaaS), onde os clientes hospedam um ambiente para suas aplicações.
Os clientes gerenciam as aplicações, mas não controlam o sistema operacional, hardware ou infraestrutura de rede, que eles estão usando.
Finalmente, há Infraestrutura como Serviço (IaaS), onde o cliente acessa os recursos computacionais fundamentais, como CPU, memória, middleware e armazenamento.
O cliente controla os recursos, mas não a infraestrutura em nuvem abaixo de eles.
Uma infraestrutura em nuvem é a coleção de hardware e software que possibilita as cinco características essenciais de computação em nuvem.
A infraestrutura em nuvem pode ser vista contendo uma camada física e uma camada de abstração.
A camada física consiste nos recursos de hardware necessários para apoiar os serviços em nuvem a serem fornecidos como, por exemplo, servidores, sistemas de armazenamento e componentes de rede.
A camada de abstração consiste no software implantado em toda a camada física, que manifestam as características essenciais da computação em nuvem.
Conceitualmente a camada de abstração fica acima de a camada física.
A camada de IaaS fornece aos clientes, através da camada de abstração, uma visão abstrata do hardware.
Isto é alcançado através de uma interface de usuário para o gerenciamento de um numero de recursos da subcamada de recursos da infraestrutura.
A interface também permite aos usuários alocar um subconjunto dos recursos para consumo próprio.
Funções típicas disponíveis na interface de usuário incluem a criação ou remoção de imagens de sistemas operacionais, a expansão das capacidades exigidas (escalabilidade), ou definição de topologias de rede.
Além disso, a interface fornece a funcionalidade necessária para as operações, como iniciar e parar instâncias do sistema operacional.
Os serviços de infraestrutura tem um foco mais estreito com a aplicação.
Por exemplo, existem serviços de infraestrutura dedicada para tarefas de cálculo (Hadoop MapReduce), para armazenamento (Amazon S3, Dropbox) ou para redes (Open-Flow).
A funcionalidade fornecida ao cliente é a provisão de processamento, armazenamento, redes e outros recursos computacionais fundamentais onde o cliente é capaz de implantar e executar um software arbitrário, que pode incluir sistemas operacionais e aplicações.
As aplicações são acessíveis a partir de vários dispositivos, através de uma interface thin client, como um navegador Web (por exemplo, webmail), ou por uma interface de programação.
O cliente não possui controle sobre a infraestrutura em nuvem subjacente, mas tem domínio sobre os sistemas operacionais, armazenamento, exceto por aplicações implantadas e possivelmente um controle limitado dos componentes de rede selecionados (por exemplo, firewalls).
Os serviços em nuvem fornecidos por a camada PaaS não são, geralmente, direcionados aos usuários finais, mas sim aos desenvolvedores.
A camada PaaS contém ambientes de programação e de execução, onde o software proprietário escrito numa linguagem de programação específica pode ser executado.
Exemplo típico de ambiente de programação é o Django Framework.
Ambientes de programação permitem extensão de linguagens de programação existentes através da adição de bibliotecas de classe com foco em aplicações especificas.
O ambiente de execução executa a aplicação, que a partir de a perspectiva do projeto, é desacoplado do ambiente de programação.
Exemplos bem conhecidos de ambientes de execução baseados em nuvem são Google App Engine e o Azure da Microsoft.
No caso de Microsoft Windows Azure, são fornecidas diferentes ferramentas e uma variedade de linguagens de programação para utilização no ambiente Azure.
Já o Google App Engine suporta a criação e execução de aplicações Web escritas em Python ou Java.
A funcionalidade fornecida ao cliente neste nível intermediário é implantar na infraestrutura em nuvem as aplicações criadas ou adquiridas por o cliente.
Estas aplicações são desenvolvidas utilizando as linguagens de programação e ferramentas que fornecedor da nuvem suporta.
O cliente tem controle apenas sobre as aplicações implementadas e possivelmente configurações do ambiente de hospedagem da aplicação.
Aplicações em nuvem que abordam diretamente o usuário final pertencem à camada de SaaS.
Este modelo libera os clientes da necessidade de instalar o software localmente e também do fornecimento dos recursos necessários.
Visto da perspectiva arquitetura em nuvem, os serviços da camada SaaS podem ser desenvolvidos e controlados por o fornecedor a partir de serviços das camadas PaaS ou IaaS.
Em a camada SaaS os usuários finais podem acessar diretamente os serviços de aplicação, como por exemplo, o Google Maps.
Outros serviços são fornecidos como componentes, por exemplo, o OpenID que fornece gerenciamento de usuários.
A ligação entre os diferentes serviços pode ser feita através de associação estática ou usando os chamados mashups que permitem associação leve e flexível.
A funcionalidade provida para o cliente neste nível mais alto é a utilização de aplicações que executam numa infraestrutura em nuvem.
As aplicações são acessíveis a partir de vários dispositivos através de uma interface thin client.
O cliente pode controlar de forma limitada as configurações especificas de uma aplicação do usuário.
Por fim, os quatro modelos de implantação nuvem reconhecidos por o NIST são:
Privada: A infraestrutura de nuvem é operada exclusivamente por uma organização.
Pode ser gerenciada por a organização ou por um terceiro, podendo existir fora de os estabelecimentos da organização.
Comunitária: A infraestrutura de nuvem é compartilhada por várias organizações e suporta uma determinada comunidade que partilha preocupações similares (por exemplo, os objetivos, os requisitos de segurança, política e considerações de conformidade).
Pode ser gerenciada por as organizações ou por terceiros, podendo existir fora de os estabelecimentos das organizações.
Pública: A infraestrutura de nuvem é disponibilizada ao público em geral ou para a um grupo industrial grande e é administrada por uma organização de venda de serviços em nuvem.
Hibrida: A infraestrutura em nuvem é uma composição de dois ou mais modelos de implantação (comunitária, privada ou pública) que permanecem entidades únicas, mas estão associadas por uma tecnologia padronizada ou proprietária que permite a portabilidade de dados e aplicações (por exemplo, balanceamento de carga entre as nuvens).
Em este capítulo, são analisados trabalhos da literatura que possuem relevância com o estudo proposto.
A razão desta analise é melhorar o entendimento sobre as pesquisas atuais de desenvolvimento de serviços semânticos para a computação ubíqua visando estabelecer uma base teórica e cientifica para definição dos componentes e funcionalidades do framework.
Service-Oriented Context--Aware Middleware Os autores Gu, Pung e Zhang apresentam uma arquitetura de um middleware orientado a serviços para construção de serviços sensíveis ao contexto chamado Service- Oriented Context--Aware Middleware (Socam).
É um middleware distribuído que transfere e converte espaços físicos a partir de os quais os contextos são agregados num espaço semântico, onde contextos podem ser compartilhados e acessados por serviços sensíveis ao contexto.
A arquitetura apresentada por os autores possui três camadas.
A primeira camada é responsável por a coleta de dados a partir de sensores físicos e serviços de informação da web.
A segunda camada fornece suporte para contextualização de dados e provisão de contexto.
A interpretação de contexto é feita através de serviços de inferência que utilizam representações OWL.
Finalmente, a terceira camada consiste de serviços semânticos que fazem uso de diferentes níveis de contextos para se adaptar conforme regras pré-definidas que descrevem as condições de comportamento dos serviços de acordo com o contexto atual.
Sua arquitetura consiste dos seguintes componentes que agem como partes de serviços independentes:
Provedores de contexto:
Responsáveis por abstrair contextos a partir de fontes heterogêneas, e converter- los em representações OWL (Web Ontology Language), onde os contextos podem ser compartilhados e reutilizados por componentes de outros serviços.
Interpretador de Contexto: Fornece serviços de raciocínio lógico à informação contexto do processo.
Banco de Dados de Contexto: Armazena ontologias e os contextos ocorridos num subdomínio.
Há um banco de dados de lógica de contexto em para cada domínio.
Serviços Sensíveis ao Contexto: Fazem uso de diferentes níveis de contextos e adaptam seus comportamentos de acordo com o contexto atual.
Descoberta de Serviço: Fornece um mecanismo de notificação presencial para que o sistema fique ciente da existência de provedores e intérpretes de contexto.
Permite também que os usuários ou aplicações localizem esses serviços.
UCare vales-Alonso et al.
Propõem uma arquitetura de serviços sensíveis ao contexto para prover acessibilidade em ambientes urbanos chamada UCare.
O objetivo principal desta arquitetura é construir sistemas capazes de adaptar o ambiente às necessidade do usuário ou que facilitem a sua interação com um determinado serviço.
A arquitetura divide- se em três camadas.
A primeira camada é responsável por a comunicação e dados de sensoriamento do mundo real.
A segunda camada contém uma unidade de processamento e o perfil de três perfis distintos:
O perfil de usuário contém informações sobre as necessidades especiais do usuário, como por exemplo dificuldades físicas.
O perfil do dispositivo armazena informações sobre as capacidades dos dispositivos e os serviços oferecidos.
Por fim, o perfil de serviço contém informações sobre as preferências do usuário em relação a um determinado serviço.
A terceira e última camada, contém unidades de adaptação que são responsáveis por a provisão de serviços.
A provisão pode ser alterada conforme a necessidade do usuário, que é inferida por a unidade de processamento de perfil.
Sua arquitetura divide- se em cinco componentes (Figura 3.2):
Interfaces de Rádio:
As interfaces sem fio disponíveis.
Estes componentes permitem comunicações sem fio e fornecer descoberta de serviço e usuário.
Unidades de Sensoriamento:
É uma interface que fornece informações adicionais de contexto obtidas através de um sistema de sensores.
Exemplos desta unidade são:
Módulos RFID, GPS, Sensores de temperatura, etc..
Unidade do Usuário:
Um smartphone ou PDA com uma ou mais Interfaces de Rádio.
Este componente contém um perfil de usuário, um perfil de dispositivo e um ou mais perfis de serviço.
Unidade de Processamento de Perfil: É responsável por o processamento de perfis de usuário e execução de ações necessárias, por meio de as unidades de adaptação.
Este dispositivo está instalado nos pontos de serviço, ou seja, é ligado a semáforos, paradas de ônibus, ônibus ou táxis.
Ele geralmente carrega diversas Interfaces de Rádio para atender as Unidades do Usuário.
Unidades de Adaptação:
São dispositivos eletrônicos ou mecânicos que executam as ações que o usuário solicita, é impulsionada por a Unidade de Processamento de Perfil.
A operação do sistema ocorre em quatro etapas:
Descoberta de serviços, negociação de serviços, prestação de serviços e finalização de serviços.
Durante a etapa de descoberta de serviços, as unidades de usuário e processamento de perfil detectam um ao outro.
De o ponto de vista geral, a detecção do usuário pode ser realizada por mensagens periódicas da unidade de processamento de perfil.
No entanto, se a interface de rádio da unidade de processamento de perfil está configurada como um ponto de acesso, a responsabilidade de descoberta de usuários e de serviços é realizada por a própria interface de rádio.
Depois de estabelecer uma conexão, inicia- se a etapa de negociação de serviços.
As unidades de usuário e de processamento de perfil iniciam um protocolo de troca de perfil.
Os perfis das unidades de usuário e de processamento são combinados para gerar um perfil de serviço com configuração padrão.
Este perfil gerado é enviado para a unidade de usuário que automaticamente reconfigura este perfil e o retorna para unidade de processamento.
A unidade de processamento utiliza o perfil modificado ou a solicitação feita por o usuário para configurar um serviço personalizado.
A etapa de prestação de serviços compreende várias tarefas.
Por um lado, o serviço pode exigir informações adicionais de contexto.
Assim, a unidade de processamento de perfis recupera as informações da unidade de usuário e, se necessário, continua verificando o contexto enquanto o serviço está sendo prestado.
Por outro lado, diferentes perfis simultâneos são possíveis.
Em este caso, a unidade de processamento de perfis inclui um módulo de resolução que decide quais ações devem ser executadas de acordo com os diferentes perfis recebidos.
Em caso de ações contraditórias, a unidade toma uma decisão de acordo com um esquema de prioridade de ação.
Todos estes processos resultam na ativação das unidades de adaptação correspondentes.
A última etapa inicia uma vez que o serviço foi prestado, as unidades de processamento de perfis e de adaptação retornam ao seu estado original ou padrão.
Service Context Manager Framework Os autores De e Moessner propõem um framework para aplicações móveis sensíveis ao contexto chamado Service Context Manager Framework (SCM).
Este framework é responsável por tratar todas as etapas de gerência de contexto (coleta, processamento, inferência e raciocínio) para fornecer apresentação de serviços personalizada e também recomendação de serviços apropriados.
O SCM Framework (Figura 3.3) é formado por três componentes:
Descoberta de Dispositivos e Serviços, Framework de Transformação e o Módulo de Raciocínio.
O componente de Descoberta de Dispositivos e Serviços é responsável por a descoberta de dispositivos e serviços disponíveis, bem como a determinação das especificações de conexão de rede e dos tipos de mídia de saída.
Este componente expõe interfaces para recuperação síncrona do contexto da informação e interfaces assíncronas baseadas em eventos.
Eventos síncronos, tais como um dispositivo entrar e sair da rede são notificados via multicast na interface de rede e clientes monitoram essa interface para manter a disponibilidade dinâmica de dispositivos.
Assim, ele fornece a dupla funcionalidade de descoberta e monitoramento de rede assíncrona para o anúncio da entrada e saída dos dispositivos.
Após a descoberta do dispositivo físico é feita a recuperação das informações de contexto (descrições de dispositivos) via comandos Http/ GET para retornar um XML contendo as descrições dos dispositivos.
O Framework de Transformação está encarregado de agregar informações de contexto distribuído e abstrair- la numa estrutura formal comum para disponibilizar acesso transparente a todas as informações agrupadas.
Isto é feito através do Módulo Processador de Contexto e do Módulo de Transformação.
O primeiro reúne toda informação contextual adquirida num documento único.
Estas informações são serializadas e servem de entrada para o Módulo de Transformação.
O segundo mapeia as entradas recebidas numa estrutura formal comum, baseada numa ontologia definida e armazenada numa base de dados de ontologias.
Esta base de dados constitui o vocabulário de sistema, ela contém a modelagem de contexto do framework que representa os termos de classes e propriedades de domínio.
A transformação dos dados de contexto numa instancia de ontologia é feita através de scripts.
A instância de ontologia representa o conhecimento de objetos do mundo real, formando um componente de asserção.
A comunicação entre os recursos e o Framework de Transformação é modelada numa abordagem baseada em quadro negro (black board), onde as mensagens são colocadas num quadro de mensagens compartilhadas.
O Framework de Transformação pode se inscrever para receber as mensagens que combinem com algum padrão determinado.
O Módulo de Raciocínio é um sistema de controle e inferência hibrida.
É responsável por detectar perda de informações durante o processo de criação dos componentes de asserção e também por a filtragem de informações contextos.
Este módulo também aplica regras de inferência sobre informações de contexto fornecidas por o Framework de Transformação para fornecer apresentação e recomendação de serviços de forma apropriada.
Ubiquitous Cloud Egami, Matsumoto, e Nakamura apresentam uma plataforma para facilitar a gerência de recursos ubíquos chamada Ubiquitous Cloud.
Esta plataforma é baseada na hierarquia de serviços da computação nas nuvens (IaaS, PaaS e SaaS).
A plataforma contém quatro componentes arquiteturais que respeitam esta hierarquia (Figura 3.4), são eles:
Serviço de Registro de Recursos (IaaS), Descoberta de Recurso Adaptativo (PaaS), Gerenciador de Contexto (PaaS) e Provedor de Serviços (SaaS).
Em a base da hierarquia estão os serviços de infraestrutura (Serviço de Registro de Recursos), que disponibilizam recursos ubíquos como serviços atômicos.
Este nível tem como objetivo ser utilizado por desenvolvedores e aplicações para descobrir serviços desejados na forma de recursos e operações de maneira eficiente.
Este serviço funciona de forma similar a tecnologia UDDI (Universal Description, Discovery and Integration), mas ao invés de focar somente nos serviços e negócios empresariais dos sistemas de informação, ele também é responsável por a interconexão entre dispositivos do mundo real e os sistemas de informação.
Em a visão da computação estes dispositivos são recursos e podem ser caracterizados através dos seguintes atributos:
Nome, classe que este recurso pertence, o endereço do web service (recurso como serviço), localização física, usuário (responsável por o recurso) e descrição.
Através dos atributos que a descoberta de recursos é realizada.
Após a descoberta é possível utilizar o recurso como serviço através de suas operações.
As operações dos recursos podem ser caracterizadas por um nome, uma categoria de operação, um valor de retorno, uma descrição, por palavras-chave que representam um propósito e a hora operacional.
As operações de um recurso podem retornar resultados, bem como receber parâmetros de entrada.
Em a camada intermediaria da arquitetura estão os componentes de Gerência de Contexto e de Descoberta de Recurso Adaptativo.
Estes componentes são responsáveis por disponibilizar a plataforma como serviço.
O componente de Gerência de Contexto fornece serviços para reunir informações do mundo real através de sensores e também serviços para a interpretação das informações recolhidas na forma de contextos explícitos que caracterizam o estado do usuário, suas necessidades, suas preferências e a situação do ambiente.
Estes serviços fornecidos são bastante utilizados por aplicações adaptativas e também por o componente de descoberta de recursos adaptativo.
O componente de Descoberta de Recursos Adaptativo tem como objetivo disponibilizar um serviço para encontrar os melhores recursos e operações que atendem a um determinado critério de aplicação.
Os objetivos primários deste serviço são:
Entender a necessidade da aplicação e recomendar recursos e operações apropriados para a aplicação.
A necessidade de uma aplicação é expressa através de seis atributos:`
O Que',` Quem',` Quando',` Onde',` POR QUE 'e` Como'.
O atributo` O QUE' deve conter palavras-chave para caracterizar qual é a necessidade principal.
O atributo` Quem' contém informações subjetivas do usuário, bem como o objetivo do usuário na utilização do serviço.
Quando existe a necessidade de expressar a data e hora pretendida para a utilização do serviço, o atributo` Quando 'é utilizado para descrever esta necessidade, e` Onde' especifica o local desejado.
Já o atributo` POR QUE' representa o cenário e motivações do pedido de utilização do serviço.
Finalmente, o atributo` Como' contém os meios concretos de como o serviço deve ser realizado (se houver).
Os atributos não são obrigatórios, eles dependem da necessidade da aplicação que requisitou o serviço.
Através dos atributos e em conjunto com o gerenciador de contexto as requisições são processadas e um serviço que atende as necessidades da aplicação é recomendado.
Situado na camada superior de software como serviços, está o Provedor de Serviços que recomenda e executa aplicações adaptativas como serviços personalizados aos usuários finais.
O usuário final pode utilizar o serviço sem a necessidade de saber quais recursos estão sendo utilizados.
O comportamento dos serviços é determinado dinamicamente de acordo com a requisição do usuário.
Context Directory Framework Lowe, Mandl e Weber apresentam um framework que suporta a coleta de atributos de contexto distribuídos para permitir sensibilidade de contexto para aplicações móveis distribuídas.
A estrutura oferece um conjunto de serviços de aquisição de contexto para aplicações móveis.
O framework disponibiliza um conjunto de serviços para aquisição de contexto onde cada serviço é responsável por um domínio de aplicação.
Os domínios são criados através regras de condições que descrevem modelos contexto, métodos de interpretação e possibilidades de adaptação.
Os serviços podem ser interconectados, formando assim, uma rede de diretórios de contexto.
O framework também é capaz de transformar os modelos de contexto existentes em outros formatos, tais como representações OWL para aplicações baseadas em ontologia.
A arquitetura do framework (Figura 3.5) segue o modelo cliente/ servidor.
O servidor é responsável por cumprir partes intensas de computação da representação, armazenamento, interpretação e adaptação.
O cliente, portanto, é reduzido para aquisição, representação e adaptação.
O cliente também funciona como proxy para múltiplas aplicações.
O framework possui três componentes básicos:
Cliente de Contexto:
É responsável por a comunicação com os sensores dos dispositivos móveis, realizando coleta de atributos de contextos e cria uma representação contextual.
A coleção de atributos utiliza o modelo chave/ valor.
Um conjunto de clientes coletam atributos de diferentes dispositivos móveis e enviam para o Diretório de Contexto para consolidação.
API sensível ao contexto:
Tem como objetivo simplificar o desenvolvimento de aplicações sensíveis ao contexto para plataformas especificas.
Aplicações podem ser construídas somente utilizando a API, entretanto, se for necessário maior controle sobre a sensividade de contexto, deve- se utilizar o Cliente de Contexto.
Diretório de Contexto:
É responsável por a consolidação dos atributos coletados por os clientes, após a consolidação, são armazenados para interpretações baseadas em histórico.
Cada diretório de contexto também fornece um serviço para disponibilizar contexto.
Análise das arquiteturas apresentadas nos trabalhos relacionados Cada um dos trabalhos apresentados possui uma abordagem diferenciada e contribuem de forma considerável para esta dissertação.
Em destaque, as publicações de Egami (Ubiquitous Cloud) e Vales-Alonso (UCare) servem de suporte para a definição da arquitetura e funcionalidades do framework proposto neste trabalho.
A Tabela 3.1 apresenta as funcionalidades identificadas em cada camada das arquiteturas dos trabalhos relacionados, bem como a base da arquitetura do framework proposto com fundamentação nas funcionalidades identificadas.
Em esta seção são apresentados os detalhes do trabalho para a concepção de um framework baseado nas motivações discutidas previamente na Seção 1.1.
O framework utiliza o conceito de nuvens de domínios.
Cada serviço fornecido pode ser classificado quanto a sua área de aplicação, como por exemplo, as diferentes áreas de serviços públicos de uma cidade.
Serviços que compartilham a mesma classificação pertencem ao mesmo domínio e formando assim, uma nuvem de domínio.
Para facilitar a gerência de modelos e regras que caracterizam um domínio, este pode ser divido em sub domínios como pode ser visto na Figura 4.2.
Os domínios também podem ser caracterizados como públicos ou restritos, onde domínios restritos possuem restrições de acesso baseado em funções (roles).
Após a analise dos trabalhos relacionados (Seção 3.6) foi possível identificar algumas funcionalidades básicas que os componentes devem fornecer, assim como a estrutura base da arquitetura do framework.
A Figura 4.3 apresenta uma visão geral da arquitetura do framework.
A arquitetura possui quatro camadas, a camada superior se chama Domínios em Nuvens e tem a finalidade de gerenciar diferentes domínios e encontrar serviços nos domínios.
As camadas inferiores pertencem a um domínio particular e se baseiam na estrutura hierárquica IaaS, PaaS e SaaS da computação em nuvem.
Em as seções seguintes são apresentados os detalhes e componentes internos de cada camada da arquitetura do framework.
Infraestrutura como Serviço A finalidade da camada IaaS é disponibilizar, monitorar e gerenciar os diferentes dispositivos ubíquos na forma de recursos.
Ela contém dois componentes:
Recurso Lógico e o Middleware Orientado a Recursos.
Recurso Lógico O Recurso Lógico é uma abstração dos recursos contidos numa infraestrutura e pode ser dividido em Recursos Básicos e Compostos (Figura 4.4).
Um recurso é uma entidade em que existe o interesse de tornas- la explícita a um ambiente para prover algum beneficio.
Se for possível encontrar um substantivo para uma entidade, esta pode ser qualificada como um recurso em potencial.
Os recursos de uma infraestrutura podem ser dispositivos físicos ou serviços atômicos.
Exemplos de dispositivos físicos são sensores, atuadores, leitores RFID, e etc..
Já serviços atômicos são programas de computador ou dispositivos físicos que expõem suas interfaces através de web services.
Os Recursos Lógicos podem ser descritos através de perfis (Figura 4.5).
Estes perfis contém diversos atributos, tais como nome, fabricante, finalidade, modelo, URI, etc..
Estes atributos são utilizados por aplicações na busca por recursos.
O Recurso Básico é uma extensão de um Recurso Lógico.
É um componente para desenvolvimento de recursos de infraestrutura, integrando- os com a camada IaaS.
Um Recurso Básico contém, além de o Perfil, mais dois elementos de auxilio para o desenvolvimento e integração de recursos com o middleware:
Um Módulo de Comunicação e um Serviço.
O Módulo de Comunicação é responsável por a publicação do recurso e também por o envio de dados e notificações de status para o middleware.
O Serviço expõe as interfaces e funcionalidades dos dispositivos para o middleware.
O perfil é enviado para registro num formato XML, JSON ou RDF e o destino a ser enviado pode ser um endereço de multicast, um web service ou um servlet de captura, todos parametrizáveis.
A Figura 4.6 apresenta uma visão geral do protocolo de comunicação para a publicação de um recurso através de um endereço multicast.
Por fim, o elemento Serviço é responsável por a exposição das operações disponíveis do recurso, isso pode ser realizado através de REST ou SOAP.
Por fim, um Recurso Composto é uma composição de Recursos Lógicos.
Pode- se citar como exemplo de composição, os diferentes equipamentos responsáveis por monitorar um determinado aspecto (respiratório, cardiovascular, etc) de um determinado paciente.
Portanto, se uma aplicação deseja coletar dados deste aspecto, ao invés de selecionar cada recurso, ela selecionaria apenas o recurso composto.
Middleware Orientado a Recursos O Middleware Orientado a Recursos (Figura 4.7) é uma extensão de um trabalho anterior para permitir o suporte para uma maior variedade de dispositivos.
O middleware permite coleta de dados ou realização de operações em recursos.
Ele também fornece um conjunto de funcionalidades que permitem a execução de operações e também para a gerência de dados como filtragem, coleta, agregação e divulgação.
O Serviço de Comunicação recebe informações do perfil do recurso e notifica o Gerente de Recursos para realizar o registro.
O serviço pode receber informações através de um endereço de multicast configurável, um servlet de captura, um web service ou um serviço de WebSockets.
O Serviço de Comunicação também é utilizado para receber dados, estado de funcionamento (por exemplo, ligado ou desligado), informações de carga de trabalho atual e também os problemas ocorridos durante a utilização.
Isso é útil para a gerência de carga, pois permite uma seleção adequada dos recursos disponíveis.
O Gerente de Recursos é responsável por tratar a configuração, permitindo a composição dos recursos de infraestrutura numa estrutura lógica de acordo com as necessidades das aplicações de negócio.
Além de a configuração dos recursos, o gerente também lida com a persistência e a reaquisição dos recursos.
Para enriquecer a consulta dos recursos, o gerente fornece maneiras para realizar pesquisa em texto completo.
Isto é possível através do framework Hibernate em conjunto com o motor de pesquisa Apache Lucene.
O Manipulador de Recursos é responsável por a coordenação das atividades os recursos, bem como a verificação de seu funcionamento, relatando quaisquer erros ocorridos.
O Manipulador de Recursos é integrado com Drools uma plataforma de integração de lógicas de negócio.
Drools permite suporte a regras ECA (evento-condição- ação), elas facilitam a incorporação de novos recursos no middleware e também a gestão e utilização dos mesmos, como por exemplo, a coleta de dados, a execução de operações e o monitoramento em tempo real.
A figura 4.8 mostra um exemplo de coleta de dados de um monitor de SpO2 (saturação periférica de oxigênio).
A regra verifica se o valor recebido na mensagem está dentro de os limites normais, caso contrário, a mensagem não é valida e o recurso em utilização pode não ser confiável.
A regra também define o nível de prioridade dos dados, onde mensagens com maior prioridade devem ser enviadas imediatamente para os assinantes do recurso.
A figura 4.9 apresenta um exemplo de uma regra básica para execução de operações num leitor de RFID.
O Manipulador de Eventos é responsável por a gerência dos dados e das operações das requisições recebidas por o Serviço de Coleta e por o Serviço de Operações.
Isto é feito através de ciclos de coleta e ciclos de operação.
Um ciclo de coleta é um intervalo de tempo em o qual os dados são coletados a partir de um ou mais recursos com auxilio do Manipulador de Recursos.
Os dados, em seguida, são filtradas e agregados com a finalidade de selecionar apenas informações relevantes para as aplicações.
Em o final de cada ciclo de coleta de um relatório é enviado para a aplicação que contendo os dados de interesse e também uma lista dos problemas ocorridos durante a coleta, se houverem.
Um Ciclo de Coleta é definido por através da especificação de um relatório de coleta (Figura a coleta de dados, o tempo de duração e as restrições de funcionamento do ciclo, a forma como os dados devem ser filtrados e agrupados e finalmente o intervalo de tempo entre cada relatório (utilizado quando é necessário a coleta periódica de dados).
Um Ciclo de Operações é um intervalo de tempo durante o qual operações são executadas por os recursos.
Como o Ciclo de Coleta, um Ciclo de Operações pode ser periódico isto é útil para cenários de automação, como por exemplo durante separação e preparação de envio de pedidos numa cadeia de suprimentos, onde o através dos ciclos de operações o middleware coordena as operações de um recurso composto por um sistema de controle de pedidos, algumas esteiras automatizadas e uma leitora RFID.
A leitora RFID é responsável por identificar produtos únicos (SKUs), após a identificação o sistema de controle de pedidos busca a fatura eletrônica e identifica o destino do produto, por fim, o produto é separado utilizando as esteiras para o local de envio adequado.
O Manipulador de Recursos é responsável por a execução das operações nos recursos, enquanto o Ciclo de Operações gerência as restrições de tempo e execução.
Em o final de cada ciclo de um relatório é enviado para a aplicação contendo cada operação que terminou com sucesso e uma lista de operações que não executaram corretamente.
Figura 4.11 apresenta um exemplo de uma especificação de um Ciclo de Operações.
Os serviços de Coleta e de Operações permitem que aplicações solicitem dados e executem operações num ou mais recursos.
Através do Serviço de Coleta, recebe requisições das aplicações na forma de uma especificação de um relatório de coleta que descreve onde a informação deve ser coletada, quais são os dados desejados e como o middleware deve enviar o relatório de dados.
O comportamento Serviço de Operações é semelhante ao do Serviço de Coleta.
Ele recebe uma especificação de Operações que expressa o que deve executar as operações, uma lista das operações desejadas a serem executadas e como o middleware deve relatar os resultados.
Tanto os relatórios de operações quanto de coleta de dados são enviados para a aplicação em formatos XML ou JSON através de diferentes protocolos, como TCP, UDP, WebSockets e Http, conforme a necessidade da aplicação.
Os protocolos são escolhidos conforme a URI de notificação da aplicação recebida por o middleware.
A frequência de envio dos relatórios podem ser periódicas (de forma constante), aperiódicas (na ocorrência de um dado de interesse) ou modo pull onde a coleta é feita uma única vez.
A figura 4.12 apresenta um exemplo de um relatório de coleta de dados.
O Serviço de Administração fornece aos gerentes de sistema um serviço para configurar e gerenciar os recursos de infraestrutura.
Basicamente, o serviço expões funcionalidades do Gerente de Recursos, tais como a composição de recursos, configuração e operações de persistência.
Também é responsável por expor a funcionalidade de gerência de regras ECA do Manipulador de Recursos.
O serviço de consulta fornece os meios para aplicações para procurar por os recursos de infraestrutura necessários para realizar alguma determinada tarefa.
Os parâmetros de consulta da pesquisa são construídos num formato XML, utilizando os atributos do recurso.
Cada atributo literal possui uma lista de predicados, onde cada predicado contém um operador de consulta e um conjunto de valores.
É possível definir restrições entre predicados e valores (conjunção ou disjunção).
A tabela 4.1 contém os operadores válidos para atributos literais utilizados numa consulta.
Os operadores disponíveis para atributos do tipo inteiro são:
Maior que, menor que, igual, menor ou igual, maior ou igual.
O serviço de consulta utiliza o Gerente de Recursos para encontrar os recursos que correspondem a requisição de consulta.
NMATCH Verificação se o valor não corresponde ao padrão especificado.
Plataforma como Serviço A camada de PaaS oferece processamento de eventos complexos como serviço de plataforma que fornece suporte a inferência de contexto e integração de dados para facilitar o desenvolvimento de aplicações sensíveis ao contexto.
Esta camada contém o mecanismo CEP e o Localizador de Informação.
Mecanismo CEP O mecanismo de CEP foi desenvolvido em trabalhos anteriores por o grupo de pesquisa associado a este trabalho.
Em este trabalho ele é estendido para suportar eventos oriundos dos recursos de infraestrutura.
O mecanismo possui um Serviço de Processamento que é responsável por a recepção das requisições feitas por as aplicações e também para notificar- las quando ocorrer eventos de interesse.
Uma requisição é descrita por um conjunto de parâmetros que expressam uma necessidade a ser atendida (Tabela 4.2).
Cada requisição é enviada para o Motor de Regras para ser processada e o resultado é enviado à aplicação.
Durante o processamento, o motor de regras é encarregado por a composição dos recursos e informações necessárias para atender a requisição.
O Motor de Regras é integrado com Drools[ Red12a] para permitir processamento de eventos baseado em lógica de negócio.
As regras e modelos contidos no Motor de Regras são descritas de acordo com a linguagem definida por o Drools e são mantidas por o Gerente de Modelos/Regras.
O Motor de Regras também fornece suporte a lógica difusa através da biblioteca jFuzzyLogic.
O fluxo de eventos é capturado através do Serviço de Captura de Eventos permitindo o mecanismo CEP a recepção de eventos dos recursos de infraestrutura para processamento, armazenamento, ou geração de novos eventos.
Eventos capturados são tratados através de um módulo de Tratamento de Eventos que envia os eventos para o Motor de Regras.
O módulo de Tratamento de Eventos também se comunica com o Middleware Orientado a Recursos e o Localizador de Informações para reunir os recursos e informações necessárias para satisfazer as solicitações de aplicações.
Localizador de Informação O Localizador de Informação tem a função de buscar informações em documentos e bancos de dados.
Para isso o Localizador de Informação fornece um Serviço de Consulta responsável por a recepção de requisições de pesquisa.
As requisições são enviadas ao Motor de Busca que é encarregado por a busca de informações de acordo com os parâmetros utilizados na pesquisa.
A Tabela 4.1 contém os operadores válidos para consulta O Motor de Busca é integrado com o Apache Solr, uma plataforma de busca que permite busca e indexação de documentos e bancos de dados.
A integração com múltiplos bancos de dados é feita através de um arquivo de configuração seguindo um formato definido por o Apache Solr, em ele contém os dados a serem indexados.
A indexação de documentos é feita por o Serviço de Captura, são aceitos documentos no formato XML, JSON ou binário.
Software como Serviço A camada de SaaS implanta e fornece serviços semânticos.
É a camada mais visível para os usuários finais da nuvem ubíqua.
Os serviços providos nesta camada são sensíveis à mudança de contexto.
Isto é, dependendo da requisição feita por o usuário o serviço é capaz de se adaptar as condições em que a requisição foi realizada e fornecer um serviço transparente.
Esta camada é composta por dois componentes:
Software Semântico e Provedor de Serviços Semânticos.
Software Semântico Através do componente Software Semântico é possível desenvolver serviços sensíveis ao contexto.
Este componente é descrito através de um Perfil de Aplicação que contém as características e propósito da aplicação.
O perfil é enviado ao Provedor de Serviços Semânticos por o Módulo de Comunicação utilizando um protocolo similar ao visto na Figura 4.6.
O servico de monitoracão fornece coleta sistematica de informações de saude de pacientes individuais.
As informações de saude contidas por o servico sao:
Historico medico, medicamentos e alergias, sinais vitais, estatisticas pessoais, como idade e peso.
O componente de Software Semântico tem um serviço de notificação para receber eventos.
Esses eventos são enviados ao Motor de Regras, que é integrado com Drools.
O Motor de Regras correlaciona eventos recebidos para inferir eventos de alto nível.
Os eventos de alto nível são consumidos por o serviço que o software fornece.
Finalmente, o elemento Serviço contém um conjunto de bibliotecas que fornece assistência para a construção de aplicações web, como PrimeFaces que provém meios de apresentação para diferentes dispositivos e o Atmosphere Framework que fornece aos serviços suporte a recepção de eventos assíncronos através de WebSockets.
O serviço também possui uma biblioteca para autenticação, autorização e busca de perfis.
A autenticação e autorização é feita utilizando JaaS.
JaaS permite autenticação de usuários de diferentes maneiras, como por exemplo módulos de login ou autenticação via formulários web.
A autorização permite um controle de acesso maior, isso é feito através de politicas de acesso baseadas em funções (roles).
Usuários possuem um perfil global, com informações gerais, entretanto ao acessar um serviço especifico ele pode possuir alguma função especial, que lhe permite acesso a funcionalidades restritas a uma determinada função.
Provedor de Serviços Semânticos O Provedor de Serviços Semânticos permite a descoberta, monitoração e requisição de softwares semânticos.
O Canal de Comunicação é responsável por a descoberta e recepção de eventos para monitoração de softwares semânticos, isto é feito de maneira similar a dos recursos lógicos conforme foi visto na subseção Infraestrutura como Serviço.
A o selecionar um serviço adequado, é necessário realizar a monitoração de problemas eventuais durante a execução do serviço.
Isto é feito por o Serviço de Monitoração, que também compensa por efeitos indesejáveis, sendo capaz de realizar a ocultação do serviço falho, recomendando um serviço adequado em requisições futuras.
Um serviço adequado é um serviço que possui o mesmo tipo e um propósito igual ou similar ao serviço falho.
Domínios em Nuvem Esta camada contém o componente Descoberta de Serviços em Nuvens (Figura 4.23).
Este componente possui três elementos:
Um Serviço de Administração, um Serviço de Consulta e um Canal de Comunicação.
O Serviço de Administração é responsável por a gerência dos domínios.
Através de ele monta- se a estrutura hierárquica dos domínios de aplicação.
A estrutura hierárquica dos domínios é armazenada num banco de dados de domínios.
Através do Serviço de Consulta é possível localizar serviços de acordo com a necessidade do usuário.
Os provedores de serviços semânticos se registram por o Canal de Comunicação que armazena seus dados no banco de dados de provedores.
O Serviço de Consulta utiliza as informações contextuais do usuário para buscar e recomendar serviços, como por exemplo através da localização do usuário, o serviço realiza a busca nos provedores para recomendar serviços disponíveis para o local em que o usuário se encontra.
Os serviços podem ser recomendados ou restritos a uma determinada localização, como país, estado, cidade, bairro ou região.
A localização baseada em região é feita utilizando a fórmula de Haversine:
Onde: Sin2+ cos 1 × cos 2 × sin2 é o raio da Terra em Km;
A fórmula é uma equação utilizada na navegação, fornecendo distâncias entre dois pontos de uma esfera a partir de suas latitudes e longitudes.
Um serviço que utiliza localização por região possui um par de coordenadas e uma área de cobertura.
Portanto, se um usuário estiver dentro de esta área de cobertura receberá a recomendação do serviço.
Não é necessário estar autenticado para buscar recomendações por localização, entretanto os serviços retornados podem necessitar de autenticação para disponibilizar conteúdo personalizado.
A validação do trabalho foi feita a partir de a aplicação do framework para a construção de um serviço de monitoração de pacientes numa UTI com o objetivo de realizar um teste de conceito dos componentes do framework.
O teste estende- se somente sobre a verificação funcional do framework.
Serviço de monitoração O serviço de monitoração de pacientes pertence ao domínio da área de saúde e possui os seguintes objetivos:
Melhorar a cuidado dos pacientes;
Reduzir as disparidades nos cuidados de saúde;
Fornecer privacidade e segurança.
O serviço deve suportar diferentes equipamentos eletrônicos, diferentes dispositivos de interação, como computadores e smartphones, e também atender as necessidades dos usuários, fornecendo operações distintas de acordo com a profissão do usuário.
Os principais requisitos do serviço de prontuário eletrônico são:
Apoiar a entrada de dados diretamente por o médico.
Verificar compatibilidade entre drogas e antialérgicos.
Manter uma lista atualizada de problemas de diagnósticos atuais e ativos.
Manter uma lista ativa de medicações e alergias.
Registrar alterações nos sinais vitais.
Prover regras de apoio à decisão clínica.
Proporcionar ao paciente e usuários autorizados acesso eletrônico da sua informação de saúde.
Ter capacidade de medir o estado funcional e de saúde do paciente.
Permitir visualização simultânea e customizada dos dados do paciente por os profissionais.
Implementação A infraestrutura de física do hospital utilizada na validação é composta por seis leitos.
Cada leito contém um conjunto de equipamentos para monitoração dos sinais vitais do paciente.
Serão utilizados equipamentos &quot;virtuais «com o objetivo de simular os dados vitais dos pacientes.
Os equipamentos utilizados para a simulação, bem como a sua descrição e o intervalo de medição baseado em algumas fichas técnicas de aparelhos com o mesmo propósito, estão listados a seguir:
Termômetro: Mede a temperatura do corpo numa faixa entre 32 C e 43 C.
Oxímetro de pulso:
Monitora a taxa de saturação do oxigênio (SpO2) com medidas entre 0% e 100%.
Capnógrafo: Monitora a frequência respiratória apresentando medições entre 0 a 150 rpm e também a quantidade de dióxido de carbono presente na expiração (EtCO2) medindo valores entre 0 e 150 mmHg.
Monitor Cardíaco: Monitora a frequência cardíaca apresentando medições entre 2 a 200 bpm.
Monitor de pressão arterial:
Monitora a pressão arterial sistólica e diastólica com medições entre 0 a 299 mmHg.
Estes equipamentos foram implementados na forma de recursos lógicos para avaliar o funcionamento do protocolo de descoberta e também a funcionalidade de gerência de dados do Middleware Orientado a Recursos.
Inicialmente, a simulação dos dados de cada equipamento são gerados com pequenas variações dentro de as condições normais de um paciente.
A simulação das condições do paciente são feitas através de comandos nos recursos lógicos, onde a condição do paciente pode ser alterada de forma lenta e gradual ou abrupta.
A coleta dos dados simulados é feita de forma continua, possuindo períodos com duração de 30 segundos, contendo 100 milissegundos de intervalo entre cada período.
Durante o intervalo entre cada período de coleta, é realizado por o middleware uma média dos dados obtidos de cada equipamento com o intuito de amenizar as variações devido a leituras imprecisas.
A o final um relatório é enviado para o mecanismo CEP.
O mecanismo CEP monitora os sinais vitais dos pacientes para determinar a condição do paciente, conforme pode ser visto na Tabela 5.1.
Através do mecanismo CEP, a partir de a correlação entre a frequência cardíaca e respiratória, a saturação de oxigênio (SpO2) e o dióxido de carbono expirado (EtCO2), é possível calcular o índice integrado pulmonar (IPI).+
0,08% da leitura a cada 1 mmHg acima de 38 mmHg Variação em relação a leitura apresentada.
O IPI tem como objetivo fornecer uma interpretação simples do estado pulmonar do paciente independentemente da origem e do nível de treinamento do profissional.
O índice possui uma variação de 1 a 10, onde índices baixos significam que o paciente requer intervenção imediata e índices altos significam que o paciente se encontra em condições normais.
Serão simulados diferentes alertas que correspondem o estado de saúde do paciente, onde o serviço de prontuário deve notificar os profissionais adequados e registrar as ocorrências no histórico do paciente.
A camada SaaS é responsável por a disponibilização do serviço de monitoração.
O serviço fornece suporte para computadores e smartphones como meios de interação.
O Apêndice A apresenta alguns screenshots do Serviço de Monitoração de Pacientes.
Através da utilização de perfis, o serviço oferece suporte para funcionalidades distintas de acordo com as diferentes funções na UTI (Tabela o motor de regras do serviço busca a lista de alergias do paciente e realiza uma verificação se o existe alguma restrição entre as medicações a serem administradas e as alergias, assim como também verifica por incompatibilidades com as medicações correntes do paciente.
Outro exemplo a ser citado é a atribuição de tarefas por o enfermeiro aos auxiliares de enfermagem, o motor de regras verifica a carga de trabalho atual, baseando- se na quantidade de pacientes e na severidade de cada paciente, o motor recomenda quais funcionários estão aptos para executar a tarefa.
Além de a alocação de tarefas, o motor também é responsável por a alocação dos auxiliares quando um paciente começa o tratamento para uma condição médica, os funcionários são atribuídos a eles com base em sua carga de trabalho.
Após a seleção dos funcionários, o motor envia uma solicitação ao mecanismo CEP para receber eventos sobre as condições do paciente.
A Figura 5.2 apresenta uma visão geral dos principais componentes do framework aplicados no desenvolvimento do serviço de monitoração e também a interação básica entre os componentes.
Inicialmente o usuário que possui perfil de médico acessa o serviço de consulta do componente Descoberta de Serviços em Nuvens.
Através da localização do usuário o serviço de consulta realiza uma busca no provedor de serviços.
O usuário seleciona então o serviço de monitoração.
O usuário recebe do provedor um serviço personalizado de acordo com seu contexto (profissão, local, etc) (3).
Após o usuário selecionar um dos seus pacientes, o serviço de monitoração gera uma requisição contendo a necessidade do usuário ao CEP hospitalar.
A requisição é processada por o CEP que utiliza o middleware e de localização de informações para reunir as informações necessárias para atender a requisição.
O componente CEP utiliza as informações recebidas para gerar um relatório das condições do paciente.
Após isso o relatório é enviado ao serviço de monitoração que disponibiliza para o usuário visualizar.
O framework proposto neste trabalho explora recursos e gerência de informação para fornecer inferência de contexto e suporte a ambientes ubíquos para facilitar o desenvolvimento de serviços semânticos.
A arquitetura do framework é descentralizada para fornecer maior confiabilidade, modular para aumentar a reutilização de componentes e também facilitar a manutenção.
O framework suporta diferentes plataformas, dispositivos e meios de comunicação (heterogêneo).
Para fornecer interoperabilidade, o framework possui componentes que fornecem serviços REST ou SOAP.
Através do Middleware Orientado a Recursos e do componente de Descoberta em Nuvens de Serviço, o framework possibilita descoberta de recursos e serviços para prover iteração dinâmica e mobilidade.
Cada recurso fornece os dados necessários para reunir informações contextuais do mundo real.
Estes dados são consumidos por o mecanismo CEP que correlaciona dados e modelos de contexto, criados usando as regras do tipo ECA (condição de evento e ação), para fornecer sensibilidade a contexto e adaptabilidade os serviços semânticos.
O framework provê também segurança e controle de acesso através do framework JaaS (Java Authentication and Authorization Service).
Por fim, os requisitos de escalabilidade, confiabilidade no funcionamento e usabilidade, fundamentais para a computação ubíqua, não são avaliados no trabalho proposto.
Como trabalhos futuros, inicialmente é possível aumentar a usabilidade dos serviços através de diferentes técnicas para inferência de contexto, como por exemplo fornecer suporte a ontologias.
Através da integração com redes sociais é possível enriquecer a usabilidade facilitando o acesso aos serviços desenvolvidos, permitindo ao usuário autenticação através de suas contas nas redes sociais.
A integração com redes sociais oferece principalmente capacidade para aumentar a colaboração e integração entre usuários.
A incorporação das atividades dos usuários também é essencial para disponibilizar um serviço com facilidade no uso, portando, a capacidade de identificar a atividades diárias dos usuários é fundamental para realizar recomendações de serviços e auxiliar o usuário durante execução de tarefas.
Outra necessidade para aumentar a usabilidade é através da imersão dos usuários durante a utilização dos serviços, sendo necessário criar componentes para plataformas específicas como por exemplo, Android e iOS.
Quando ao desenvolvimento, é interessante facilitar a criação de modelos e regras.
Um serviço de modelagem auxiliaria desenvolvedores de serviços semânticos mitigando erros provindos de falhas humanas durante um processo manual de modelagem sem ajuda de ferramentas.
Por fim, é necessário verificar a escalabilidade, confiança e usabilidade dos componentes do framework e dos serviços desenvolvidos.
