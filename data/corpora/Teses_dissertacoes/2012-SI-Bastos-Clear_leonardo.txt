Os modelos de processos de negócio definidos por os analistas de negócio servem como fonte de requisitos para a modelagem dos sistemas de informação que podem ser construídos para dar suporte a esses processos.
A transformação de um modelo em nível de negócio para um modelo em nível de sistema não é trivial.
A notação ou linguagem utilizada para modelar o negócio é diferente da utilizada para modelar sistema.
Atualmente a BPMN é a notação padrão para construção de modelos de processos de negócio e a UML é a linguagem padrão para modelagem de sistemas.
O objetivo desse trabalho é apresentar um método que auxilie na transformação de modelos de processos de negócio feitos em BPMN para modelos de sistema utilizando casos de uso da UML.
A transformação é realizada através da análise de como cada elemento de um diagrama BPMN pode dar origem a elementos de casos de uso da UML.
O método apresenta diferentes possibilidades de transformar um elemento da BPMN em casos de uso da UML, identificando os relacionamentos e informações iniciais da descrição dos casos de uso.
Palavras chave:
Modelagem de sistemas, modelagem de processos de negócio, BPMN, UML, casos de uso, transformação de modelos.
Esse trabalho tem por finalidade apresentar um método que auxilie na transformação de modelos de processos de negócio expressos usando a Business Process Modeling Notation (BPMN) para modelos de sistemas baseados em casos de uso da Unified Modeling Language (UML).
O método proposto auxilia o analista de sistemas a realizar essa transformação, identificando os casos de uso e seus relacionamentos.
Atualmente as organizações necessitam aperfeiçoar os seus processos de negócio para permanecerem competitivas.
Uma das formas de visualizar ou definir esses processos é através da construção de modelos.
A modelagem dos processos de negócio ajuda na identificação e entendimento das atividades realizadas por diferentes participantes de uma organização.
O processo do negócio consiste num conjunto de um ou mais procedimentos ou atividades que, coletivamente, realizam um objetivo do negócio dentro de um contexto organizacional.
Um modelo de processo de negócio é uma representação visual dos elementos que formam esse processo.
Esses elementos podem ser tarefas, participantes, transições, documentos, arquivos, entre outros.
Uma vez identificados e modelados os processos de negócio pode ser necessária a criação de um sistema que automatize determinadas atividades desses processos.
O desenvolvimento de um sistema é uma tarefa complexa, sendo que é preciso seguir determinadas etapas antes da sua efetiva programação.
As etapas iniciais do desenvolvimento são basicamente a análise de requisitos e a modelagem do sistema.
A modelagem do sistema ajuda o analista de sistemas a entender a informação, função e comportamento de um sistema, tornando a análise de requisitos mais fácil e sistemática.
Para a modelagem de sistemas a linguagem utilizada como padrão atual na indústria é a UML.
A UML possui diferentes diagramas que podem ser usados para modelagem dos diversos aspectos do sistema.
De entre esses diagramas pode- se destacar o diagrama de casos de uso.
Esse diagrama permite obter uma modelagem da visão dos casos de uso do sistema mostrando os casos de uso, os atores e seus relacionamentos.
A identificação correta dos requisitos de um sistema de informação é um fator determinante para a construção de um sistema que atenda as necessidades dos usuários.
Uma das formas de expressar requisitos de sistema é através da utilização de casos de uso.
O conceito de caso de uso proposto por Jaboson e contemplado por a UML é utilizado atualmente na indústria de software como principal meio de capturar e documentar os requisitos de um sistema.
Um analista de sistemas pode identificar os casos de uso de um sistema através da análise de diferentes fontes de informação.
Entre elas, estão os modelos de processos de negócio relacionados com o sistema que está sendo desenvolvido.
Os modelos de processos de negócio podem servir como fonte de requisitos para o desenvolvimento de um sistema que suporte esses processos.
Esses modelos expressam informações fundamentais que devem ser consideradas no sistema.
Por isso cada vez mais os desenvolvedores de software estão percebendo a necessidade de entender os modelos de processos de negócio propostos por os analistas de negócio.
Analisando as informações contidas nos modelos de processo de negócio pode ser possível identificar casos de uso do sistema.
Entretanto, não há uma relação direta entre os elementos do modelo no nível do negócio para elementos dos casos de uso, que estão num nível do sistema.
O que se verifica hoje é que existe uma lacuna (um gap) entre a modelagem feita no nível do negócio e a modelagem realizada no nível de sistema, sendo necessário realizar uma transformação dos elementos existentes nos modelos de negócio para elementos dos modelos em nível de sistema.
Essa transformação de modelos do nível de negócio para os do nível de sistema vem sendo objeto de diversos estudos na área de Engenharia de Software.
Analisando a questão a partir de uma abordagem da Arquitetura Dirigida por Modelos (Model-driven Architecture, MDA), verifica- se que os modelos de processos de negócio estão num nível de Modelo Independente de Computação (Computing Independent Model, CIM), enquanto que os modelos de sistemas localizam- se nos níveis de Modelos Independentes de Plataforma (Plataform Independent Model, Pim) e de Modelos para Plataforma Específica (Platform Specific Model, PSM).
Sendo assim, a transformação entre um modelo num nível CIM para um modelo do nível Pim e, posteriormente, de nível PSM, pode ser apoiada usando os princípios de transformação entre modelos propostas por a MDA.
Uma revisão sistemática realizada por o autor desta pesquisa em 2010 com o objetivo de identificar e avaliar abordagens para realizar essa transformação verificou a predominância do uso da BPMN e da UML como notação e linguagem padrão para a modelagem de negócio e sistema, respectivamente.
Essa revisão sistemática também apontou que várias propostas existentes não contemplam uma série de elementos da notação BPMN, bem como geram modelos de sistema baseados em casos de uso incompletos.
A finalidade da presente pesquisa é apresentar um método que auxilie o analista de sistemas a modelar o sistema ­ utilizando casos de uso ­ a partir de modelos de processos de negócio construídos em BPMN.
O método proposto apresenta alternativas de transformação de elementos da BPMN para elementos de casos de uso da UML que podem ser utilizadas por o analista auxiliando o mesmo no processo de transformação dos modelos.
As organizações estão cada vez mais buscando agilidade na identificação e definição dos seus processos de negócio, bem como desenvolvendo ferramentas para automatizar e melhorar a execução dos mesmos.
A modelagem dos processos de negócio de uma organização geralmente é realizada por um analista de negócio.
Esse profissional se dedica especificamente a identificar, documentar e melhorar os processos de negócio.
Uma vez modelados os processos, pode- se partir para uma automatização dos mesmos através do desenvolvimento de um sistema de informação.
Esse sistema de informação, por sua vez, geralmente é modelado por outro profissional, o analista de sistema.
O analista de sistema é responsável por analisar e documentar os requisitos do sistema, muitas vezes utilizando como base os processos de negócio definidos por o analista de negócio.
Esses dois profissionais, entretanto, utilizam diferentes notações e linguagens para realizar essas duas tarefas.
Em o contexto da modelagem de negócio o padrão atualmente é o uso da BPMN.
Já para modelagem de sistemas o padrão é a utilização da UML.
Esses dois profissionais trabalham em níveis de abstrações diferentes e a transformação dos modelos criados no nível de negócio para modelos em nível de sistema se torna difícil justamente por a diferença semântica existente entre os elementos que formam os modelos em cada um desses níveis.
Sendo assim, a proposta de um método que auxilie na transformação de elementos de um modelo em nível de negócio para um modelo em nível de sistema se torna pertinente para a área de Engenharia de Software.
O método proposto, neste trabalho, tem seu escopo limitado a transformações de modelos de processo de negócio expressos em BPMN para casos de uso da UML, contemplando tanto os diagramas de casos de uso como os elementos do detalhamento dos mesmos.
Essa limitação se justifica por o fato da BPMN ser a notação padrão atualmente na indústria para a modelagem em nível de negócio e os casos de uso da UML serem amplamente utilizados por a empresas de desenvolvimento de software para a modelagem de sistemas.
Com base no exposto acima a questão de pesquisa apresentada no presente trabalho é &quot;Como transformar modelos de processo de negócio, feitos em BPMN, para modelos de sistema expressos através de casos de uso da UML?».
A partir de a questão de pesquisa proposta é possível definir o objetivo geral e os objetivos específicos do trabalho, apresentados a seguir.
Desenvolver um método que auxilie na transformação de modelos de processos de negócio criados em BPMN para modelos de sistema expressos através de casos de uso da UML.
OE1 ­ Analisar as propostas existentes que procuram realizar a transformação entre modelos de negócio e modelos de sistema.
OE2 ­ Estudar a arquitetura dirigida por modelos (MDA) e metamodelos da BPMN e da UML, identificando os elementos envolvidos nas transformações.
OE3 ­ Definir os elementos de negócio contemplados na transformação bem como a estrutura do caso de uso resultante da transformação.
OE4 ­ Criar um método que auxilie na transformação, visando considerar os principais elementos utilizados na BPMN bem como os principais elementos dos casos de uso.
OE5 ­ Aplicar o método proposto analisando os resultados obtidos.
Uma revisão sistemática realizada por o autor desta pesquisa em 2010 indicou que não há uma solução padrão na área para realizar a transformação de modelos de processos de negócio para modelos de sistema.
Também se verificou na literatura que apenas os trabalhos mais recentes utilizam a BPMN como notação para a modelagem de negócio, sendo que vários elementos não são abordados, como diferentes gateways, eventos e artefatos.
A presente pesquisa caracteriza- se por ser do tipo exploratória, pois estuda assuntos ainda não abordados nas anteriores, ou abordados de forma não aprofundada.
A estratégia de pesquisa é do tipo Projeto e Criação (Design and Creation), segundo a classificação de Oates.
Essa estratégia tem como foco o desenvolvimento de um novo produto ou artefato, nesse caso o método de transformação.
Para sua validação são utilizadas aplicações de exemplo para a solução proposta.
As etapas para realização do trabalho estão descritas abaixo.
Etapa1 Atualizar o referencial teórico relacionado às propostas existentes para transformação de modelos de processo de negócio para modelos de sistema.
Em esse sentido, deve ser utilizada como base a revisão sistemática realizada em 2010 por o autor desta pesquisa.
Etapa2 Estudar os metamodelos da BPMN e da UML, assim como as definições acerca de transformações de modelos da MDA, verificando os elementos dos metamodelos envolvidos na transformação.
Etapa 3 Identificar os principais estudos com o mesmo escopo definido, ou seja, que utilizem BPMN e casos de uso da UML.
Através desses estudos, verificar melhorias que podem ser realizadas visando à criação de um método que atenda necessidades não tratadas nas propostas atuais.
Etapa 4 Definir as limitações que devem ser consideradas no modelo de processo de negócio utilizado na transformação, bem como a estrutura do caso de uso resultante da transformação.
Etapa 5 Desenvolver o método que auxilie na transformação de um modelo de processo de negócio feito em BPMN para casos de uso da UML, gerando o diagrama de casos de uso bem como o detalhamento parcial dos mesmos.
Etapa 6 Aplicar o método proposto através de exemplos de processos de negócio que contenham os elementos contemplados por o método analisando o resultado obtido.
O texto está organizado em 7 capítulos.
O Capítulo 1 apresenta a introdução, motivação, objetivos da pesquisa e metodologia utilizada.
O Capítulo 2 apresenta conceitos básicos sobre modelagem de processos de negócio e descreve os elementos da BPMN assim como seu metamodelo.
Em o Capítulo 4 estão apresentados os trabalhos relacionados com a presente dissertação, assim como considerações sobre os mesmos.
Em o Capítulo 6 são descritas aplicações do método proposto.
Para isso são utilizados dois exemplos de aplicações do método.
Por fim, o Capítulo 7 apresenta as considerações finais e propostas de trabalhos futuros, seguido das referências bibliográficas utilizadas.
Esse capítulo apresenta conceitos básicos sobre modelagem de processos de negócio e sobre a BPMN, que é uma notação utilizada para representação desses processos.
O capítulo está organizado da seguinte forma:
A Seção 2.1 descreve conceitos básicos relacionados à modelagem de processos de negócio;
A Seção 2.2 apresenta elementos da BPMN utilizados no presente trabalho;
A modelagem de processos de negócio permite uma série de benefícios, tais como:
Uniformização do entendimento da forma de trabalho;
Análise e melhoria do fluxo de informações;
Para entender o que é a modelagem de processos de negócio é importante consolidar alguns conceitos básicos, como processos do negócio, gestão de processos do negócio, sistemas de gerenciamento de processos do negócio e modelo de processos do negócio.
Segundo Weske, um processo do negócio consiste num conjunto de atividades que são executadas coordenadamente num ambiente organizacional.
A execução conjunta dessas atividades visa atingir um objetivo de negócio.
Por sua vez, Verdanat define um processo do negócio como sendo uma seqüência (ou um conjunto parcialmente ordenado) de atividades organizacionais, cuja execução é disparada por algum evento gerando resultados quantificáveis ou visíveis.
A Workflow Management Coalition (WfMC) diz que um processo de negócio é um conjunto de um ou mais procedimentos relacionados que coletivamente contribuem para a realização de um objetivo de negócio, normalmente dentro de uma estrutura organizacional definindo papéis e relacionamento.
A gestão de processos de negócio inclui conceitos, métodos e técnicas para permitir o design, administração, configuração, implantação e análise dos processos de negócio.
A base da gestão de processos de negócio é a explícita representação dos processos de negócio com suas atividades e restrições de execução entre elas.
Uma vez definidos esses processos se torna possível a analisar e melhorar os mesmos.
Para a automatização dos processos do negócio das organizações se faz necessário a utilização de um software de apoio.
Esses softwares podem ser chamados de Sistemas de Gerenciamento de Processos do Negócio (SGPN).
Um SGPN consiste num software dirigido a partir de representações de processos utilizado para coordenar a adoção de processos do negócio definidos.
Um modelo de processos de negócio consiste num conjunto de modelos contendo atividades e restrições de execução entre as mesmas.
Uma instância de um processo do negócio representa um caso concreto do ambiente operacional de uma empresa formado por instâncias de atividades.
Uma das finalidades da modelagem de processos de negócio é expressar de forma clara e objetiva as atividades realizadas por os diferentes envolvidos no processo dentro de uma ou mais organizações.
A utilização de soluções informatizadas para dar suporte aos processos de uma organização é fundamental para que as mesmas se mantenham competitivas.
A falta de entendimento das necessidades de negócio é um dos motivos de insucesso de alguns sistemas.
Para que os sistemas efetivamente auxiliem a organização é necessário que atendam as necessidades de negócio da mesma.
Em esse sentido a modelagem de processos de negócio se torna importante para entendimento dos requisitos de um sistema.
A representação de um modelo de processo de negócio pode ser feita através de diagramas desenhados utilizando uma determinada notação como, por exemplo, a Os modelos de processos de negócio são desenhados utilizando alguma notação específica para esse fim.
Algumas abordagens tentaram unificar a forma de desenhar processos de negócio, como o uso de redes de Petri e modelagem de processos baseadas em eventos (eventdriveen process chain).
A UML também já foi utilizada para modelagem de processo de negócio.
Em os últimos anos a BPMN vem se consolidando como padrão da indústria para modelagem de processos de negócio.
A BPMN foi proposta em 2004 por o Business Process Management Institute (BPMI), e logo se tornou a principal notação utilizada para desenho dos processos de negócio.
A BPMN consiste numa notação gráfica utilizada para criação dos modelos que representam os processos de negócio de uma determinada organização.
O principal objetivo da BPMN é prover uma notação que seja facilmente entendida por todos envolvidos no negócio O processo de negócio é desenhado na BPMN utilizando seus elementos gráficos.
Esses elementos estão divididos em quatro categorias:
Objetos de fluxo;
Objetos de conexão;
Partições (swinlanes);
Artefatos. Os objetos de fluxo são divididos em três tipos:
Atividades, desvios (gateways) e eventos.
Atividade Uma atividade descreve um trabalho realizado dentro de a organização por alguma pessoa ou setor.
A atividade pode ser atômica ou complexa.
Tarefa Uma atividade atômica é chamada de tarefa.
Uma atividade atômica, ou tarefa, representa uma ação realizada que não pode (ou não é interessante) dividir- la em outras.
A BPMN apresenta diferentes tipos de tarefas, de entre as quais se destacam:
Tarefas manuais;
Tarefas de usuário e tarefas de serviço.
Uma tarefa de usuário representa uma ação realizada por um participante que não necessita o uso de uma aplicação, como atender um telefonema.
Uma tarefa de usuário representa uma ação realizada com o auxílio de uma aplicação (sistema).
A tarefa de serviço representa a execução de um serviço automatizado, como um WebService.
Subprocesso Uma atividade não atômica representa um subprocesso.
Um subprocesso é uma atividade composta por uma série de outras atividades.
O subprocesso pode ser visto no diagrama como uma atividade única, semelhante a uma tarefa, abstraindo os outros elementos contidos dentro de ele.
As atividades são representadas no diagrama BPMN através de um retângulo com as bordas arredondadas.
A Figura 1 apresenta os símbolos usados para a atividade do tipo tarefa e atividade do tipo subprocesso.
Desvio (gateway) Os gateways são utilizados para controlar o fluxo do processo, podendo esse convergir ou divergir ao longo de a sua execução.
Um gateway é um elemento não-obrigatório no processo.
Caso o fluxo não necessite ser controlado não se faz necessária a utilização de um gateway.
Em a BPMN o mesmo tipo gateway é usado tanto para dividir como para unir o fluxo do processo.
A BPMN apresenta cinco tipos de gateways:
Gateway exclusivo, gateway inclusivo, gateway paralelo, gateway complexo, gateway baseado em eventos.
Em esse trabalho são abordados os três primeiros citados.
Gateway Exclusivo Um gateway exclusivo divide o fluxo em dois ou mais fluxos, cada um de eles com uma condição específica.
As condições apresentadas são avaliadas e no momento em que uma de elas é verdadeira o fluxo do processo segue por aquele caminho, ignorando os demais.
De essa forma apenas uma das condições apresentadas no gateway exclusivo pode ser verdadeira.
Um dos fluxos do gateway pode ser definido como default.
Esse será o fluxo a ser seguido caso nenhuma condição seja verdadeira.
Gateway Inclusivo O gateway inclusivo é semelhante ao exclusivo, sendo que a diferença está no fato de que mais de um fluxo pode ser seguido caso mais de uma condição seja verdadeira.
As condições verdadeiras dão origem a fluxos paralelos.
Também pode ser definido um caminho default, usado quando nenhuma das demais condições é verdadeira.
Uma vez utilizado um gateway inclusivo para dividir o fluxo outro gateway inclusivo deve ser usado para unir o mesmo novamente.
Esse gateway inclusivo aguarda o término da execução de todos os fluxos que tiveram condições verdadeiras no gateway inclusivo que dividiu o fluxo.
Gateway Paralelo Um gateway paralelo é usado para dividir o fluxo em vários fluxos paralelos e para sincronizar os mesmos posteriormente.
Um gateway paralelo não avalia nenhuma condição.
Todos os fluxos originados por o gateway paralelo são executados de forma paralela.
A sincronia desses fluxos é feita por outro gateway paralelo, que aguarda que todos os fluxos paralelos sejam encerrados para a continuidade do processo.
Eventos Evento representa algo que ocorre no início, meio ou final do processo.
Pode representar a chegada de uma mensagem ou um determinado tempo transcorrido.
Os eventos podem ser de três tipos:
Eventos de início, eventos intermediários e eventos de final.
Evento de Início Eventos de início são usados para indicar o início de um processo.
Os eventos de início podem ser de diferentes tipos, de acordo com a causa do mesmo Em esse trabalho são abordados três tipos de eventos de início:
O evento sem causa especificada e o evento de início do tipo tempo (timer) ou evento temporal e o evento condicional.
Quando nenhuma causa é especificada o evento de início representa apenas o ponto de início do processo e o mesmo é iniciado sem que nenhuma condição seja necessária.
Já um evento de início do tipo tempo pode indicar que o mesmo só inicia quando uma data/ hora for atingida ou quando um ciclo de tempo for completado.
O evento condicional possui uma condição de negócio associada ao mesmo.
Evento Intermediário Um evento intermediário ocorre entre o início e o final do processo.
Pode ser de diferentes tipos, assim como o evento de início.
Um evento intermediário do tipo tempo, por exemplo, é usado para indicar tempos de espera no processo.
Um evento intermediário pode estar localizado no fluxo do processo ou anexado a uma tarefa.
Em esse último caso o evento só pode ser do tipo exceção ou compensação.
Um evento do tipo exceção indica que uma determinada exceção ocorreu na execução da tarefa e um determinado fluxo do processo deve ser executado.
Evento de Fim Um evento fim indica o final do processo.
O evento de fim é opcional, podendo o processo ter nenhum, um, ou vários eventos de final.
A Figura 3 apresenta o símbolo utilizado para os diferentes tipos de eventos citados anteriormente.
Os objetos de conexão são utilizados para conectar os diferentes elementos do modelo.
Os objetos de conexão existentes na BPMN são:
Fluxo de seqüência, fluxo de mensagem e associação.
Fluxo de Seqüência Um fluxo de seqüência é usado para mostrar a ordem em que as atividades ocorrem no processo.
Fluxo de Mensagem O fluxo de mensagem é usado para mostrar a troca de mensagens entre participantes do processo.
Esse fluxo é usado quando o diagrama possui mais de um pool.
Associação O objeto de associação se utiliza para associar os artefatos aos objetos do fluxo.
As partições são usadas para organizar as atividades dentro de o modelo.
A BPMN possui dois tipos de partições:
Participante (Pool) e Raia (Lane).
Participante Um pool representa um participante do processo.
Um pool contém um processo de negócio e pode ser usado em modelos de processos Business to Business (B2B).
Raia As raias são partes de um participante.
São utilizadas para representar diferentes categorias dentro de um participante.
Geralmente são usados para indicar diferentes papéis da organização representada por o participante.
Os artefatos permitem adicionar informações ao diagrama BPMN permitindo uma maior flexibilidade na construção do modelo.
Os artefatos não interferem no fluxo normal do processo, sendo usados apenas para documentar melhor o processo modelado.
A BPMN apresenta alguns tipos pré-definidos de artefatos, como o objeto de dados, anotação e grupo.
Objeto de Dados Um objeto de dados representa dados gerados ou utilizados por algum elemento do processo.
Pode representar um documento, eletrônico ou não.
O objeto de dados é ligado ao elemento do processo através de uma linha pontilhada.
Anotação Anotações são utilizadas para associar um determinado comentário a um elemento do processo.
É usado para explicar de forma mais detalhada alguma parte do processo.
Grupo O artefato grupo é usado na BPMN para agrupar atividades e/ ou outros elementos do processo.
A BPMN não define uma semântica associada a esse elemento, sendo usado apenas para fins de visualização no diagrama.
Um metamodelo é basicamente um modelo de modelos.
Um metamodelo pode ser representado através de um diagrama de classes.
De essa forma ele se torna uma espécie de dicionário visual dos elementos de um modelo.
Em essa seção é apresentado um metamodelo da BPMN obtido a partir de a documentação da OMG para a BPMN.
O metamodelo apresentado na Figura 7 mostra os principais elementos utilizados para a criação de modelos de processo de negócio e que são pertinentes a esse trabalho.
Os elementos em destaque são os utilizados por o método proposto no Capítulo 5 para transformação de modelos em BPMN para casos de uso da UML.
Em a seção anterior estão apresentados os principais elementos da BPMN divididos em quatro categorias:
Objetos de fluxo, objetos de conexão, partições e artefatos.
Em o metamodelo essas quatro categorias aparecem representadas como classes abstratas.
A classe Flow Object (Objeto de Fluxo) é a base para a criação dos elementos de fluxo que compõem o processo de negócio, tais como tarefas, eventos e gateways.
A conexão entre os objetos de fluxo se dá no nível da superclasse Flow Object.
Cada objeto de uma classe concreta derivada dessa classe pode possuir um fluxo de entrada e/ ou de saída e esse fluxo está associado a outro objeto de uma classe concreta também derivada de Flow Object.
A associação ocorre utilizando objetos da classe Sequence Flow.
Por exemplo, uma User Task está associada a um Exclusive Gateway no momento em que um objeto da classe User Task se associa a um objeto de Sequence Flow que está associado a um objeto da classe Exclusive Gateway.
Os elementos do tipo artefato são subclasses da classe abstrata Artifact, podendo ser objetos das classes Group, Annotation e DataObject.
Os objetos de Annotation e DataObject podem ser conectados como elementos do fluxo através de objetos de conexão do tipo Association.
Já objetos da classe Group não são conectados com objetos do fluxo.
Esses objetos são utilizados para destacar visualmente determinadas partes do diagrama e não possuem restrição em relação a Lanes e Pools.
As classes existentes nos metamodelos auxiliam na identificação dos elementos envolvidos nas transformações de BPMN para UML.
Não é escopo do presente trabalho aprofundar as descrições das classes dos metamodelos.
Ele é usado para auxílio na definição das transformações.
Esse capítulo tem por finalidade apresentar conceitos básicos relacionados à modelagem de sistemas utilizando casos de uso da UML, sobre Model-driven Architecture (MDA) e transformações entre modelos.
As Seções de 3.1 até 3.5 apresentam uma visão geral sobre casos de uso na UML, modelos, descrição e metamodelos de casos de uso.
A Seção 3.6 apresenta a MDA.
Já a Seção 3.7 mostra conceitos relacionados com transformações entre modelos utilizando os princípios da MDA.
Os casos de uso foram propostos por Jacobson na metodologia de desenvolvimento orientado a objetos.
Segundo Jacobson um caso de uso é uma maneira específica de utilizar um sistema usando alguma funcionalidade.
Constitui um curso completo da interação que ocorre entre um ator e o sistema.
Vários autores apresentam diferentes definições sobre o que é um caso de uso, entretanto a idéia fundamental é a mesma:
Representar as interações que ocorrem entre o ator, ou atores, e o sistema para atingir um determinado objetivo de interesse do ator.
Um caso de uso engloba um conjunto de cenários em que cada cenário é um encadeamento isolado ao longo de o caso de uso.
Casos de uso descrevem as interações entre o usuário e o sistema, focando no que o sistema faz para o usuário.
O modelo de casos de uso descreve na totalidade o comportamento funcional do sistema.
Um caso de uso é uma descrição narrativa do processo do domínio da aplicação.
Ele representa um requisito funcional do sistema.
Casos de uso são fundamentalmente textuais, embora possam ser escritos em fluxogramas ou outras formas gráficas.
Casos de uso são tipicamente oferecidos como uma maneira de capturar e modelar requisitos funcionais conhecidos.
Pessoas acham o formato de história mais fácil de compreender do que as longas especificações de requisitos tradicionais.
A UML utiliza o conceito de casos de uso para expressar os requisitos de sistema.
Em a definição da UML um caso de uso é uma descrição de um conjunto de seqüências de ações, inclusive suas variantes, que um sistema realiza para produzir um resultado de valor observável para o ator.
A utilização de caso de uso tomou um grande impulso a partir de o Rational Unified Process (RUP).
O RUP é um framework para desenvolvimento de software dirigido por casos de uso.
Os requisitos funcionais do sistema são mapeados para casos de uso.
O RUP utiliza as definições da UML relativas aos casos de uso.
Um modelo de casos de uso é uma abstração visual dos casos de uso do sistema e seus relacionamentos.
Os componentes de um modelo de casos de uso são:
Ator: Representa um papel que tipicamente solicita ações e recebe reações do sistema.
Cada ator pode participar de vários casos de uso.
Caso de Uso:
Representa um documento narrativo que descreve a seqüência de eventos feitos por um ator do sistema.
Sistema: O sistema que está sendo modelado.
A UML apresenta o diagrama de caso de uso para representar o modelo de casos de uso.
Esse diagrama é formado por os casos de uso com seus atores e os relacionamentos entre os casos de uso e entre os atores.
A Figura 1 apresenta os símbolos usados para representar atores e casos de uso no diagrama da UML:
A descrição de um caso de uso consiste no detalhamento textual do mesmo utilizando um determinado formato.
A descrição de um caso de uso deve considerar informações do tipo como e quando o caso de uso se inicia;
As interações com os atores envolvidos;
As seqüências normais de execução;
As seqüências alternativas de execução.
O RUP apresenta um formato resumido para o detalhamento de casos de uso.
Esse formato contém os elementos abaixo:
Nome do caso de uso.
Breve descrição:
Breve descrição do caso de uso.
Fluxo básico de eventos:
Contém a descrição textual (geralmente um passo a passo numerado) da interação básica entre o ator e o sistema para atingir um objetivo.
Fluxos alternativos:
Contém a descrição textual dos diversos fluxos alternativos ao fluxo básico definido.
Pré-condições: Descrição textual que define as condições necessárias no sistema para que o caso de uso inicie.
Pós-condições: Descrição textual que define possíveis estados que o sistema poderá se encontrar depois do término do caso de uso.
Pontos de Extensão:
Uma lista de locais dentro de o fluxo de eventos (básico ou alternativo) do caso de uso cujo comportamento adicional é inserido usando relacionamentos de extensão.
Requisitos especiais:
Descrição textual de algum requisito não funcional, como requisitos de confiabilidade, desempenho ou suportabilidade.
Outro formato de detalhamento de casos de uso é apresentado por Cockburn.
Seguem alguns dos elementos desse formato:
Número do caso de uso.
Nome: Nome do caso de uso.
Objetivo no contexto:
Objetivo do caso de uso dentro de o contexto.
Escopo: Escopo do caso de uso.
Nível: Resumido, tarefa primária, subfunção.
Pré-condições: Estado esperado para início do caso de uso.
Ator primário:
Ator primário do caso de uso.
Acionador: Ação do sistema que dispara o caso de uso, podendo ser um evento de tempo.
Cenário de sucesso principal:
Passos do cenário desde o gatilho até o término do objetivo.
Os passos são numerados.
Extensões: Extensões dos passos do cenário principal, podendo ser outra ação ou apontar para outro caso de uso.
A definição da UML apresenta três tipos de relacionamentos entre casos de uso:
A Extensão, a Inclusão e a Generalização.
Um relacionamento de extensão entre casos de uso indica que um caso de uso tem seu comportamento estendido por outro caso de uso.
O caso de uso base pode permanecer isolado, mas em determinadas situações seu comportamento pode ser estendido por o comportamento de outro caso de uso.
Essa extensão do comportamento pode ocorrer em diferentes pontos do caso de uso base, que são chamados de pontos de extensão.
O relacionamento de extensão é utilizado para modelagem de uma parte de um caso de uso que pode ser considerada como opcional do sistema, separando assim o comportamento opcional do obrigatório.
Esse relacionamento pode ser utilizado para modelar um subfluxo em separado.
Também pode ser usado para modelar vários fluxos que podem ser inseridos em certo ponto de acordo com uma interação explícita com um ator.
A extensão é representada como uma dependência na UML, utilizando o estereótipo conforme ilustrado na Figura 9 Em essa figura o caso de uso Enviar Pedido Parcial é disparado no passo do caso de uso base em que é feita a verificação se os produtos estão prontos.
Caso não estejam todos prontos (condição descrita no detalhamento textual do caso de uso) é disparado o caso de uso Enviar Pedido Parcial.
Em a documentação do RUP o relacionamento de extensão é definido como um relacionamento que estabelece a conexão entre um caso de uso de extensão e um caso de uso base.
Esse relacionamento é utilizado para mostrar que uma parte do caso de uso pode ser é opcional (ou possivelmente opcional).
A extensão é condicional, dessa forma a sua execução depende da interação ocorrida no caso de uso base.
As condições para que o relacionamento de extensão ocorra devem ser descritas na descrição do caso de uso numa seção para os relacionamentos de extensão.
A descrição do relacionamento de extensão deve ter referências aos pontos de extensão do caso de uso base ao qual se refere assim como a condição para que o relacionamento ocorra.
A extensão é descrita no caso de uso base.
A descrição do relacionamento de extensão da Figura 9 pode ser realizada da seguinte forma:
Ponto de Extensão:
Produtos Prontos Essa extensão depois do passo n (n é o passo onde é feita a verificação se os produtos estão prontos) Condição:
Produtos não estão totalmente disponíveis Um relacionamento de inclusão entre casos de uso indica que o caso de uso base incorpora explicitamente o comportamento de outro caso de uso num local específico do caso de uso base.
Esse relacionamento é utilizado para evitar descrever o mesmo fluxo de eventos várias vezes, colocando esse comportamento num caso de uso próprio.
A execução do caso de uso incluído é obrigatória.
Esse caso de uso é sempre disparado por o caso de uso base.
O relacionamento de inclusão é representado como uma dependência utilizando o estereótipo conforme a Figura 10.
Em esse exemplo o caso de uso Rastrear Pedido inclui em algum ponto do seu fluxo o caso de uso Validar Usuário.
Para especificar a localização no fluxo de eventos do caso de uso base em a qual é incluído o comportamento do outro caso de uso, deve simplesmente ser escrito include seguido do nome do outro caso de uso.
A generalização entre casos de uso é semelhante à generalização entre classes.
Um caso de uso filho herda o comportamento do caso de uso pai, sendo que o caso de uso filho deve acrescentar ou até sobrescrever o comportamento do caso de uso pai.
Um relacionamento de generalização entre casos de uso define que o caso de uso filho contém todos os atributos, relacionamentos, seqüência de comportamento e pontos de extensão definidos no caso de uso pai.
A representação da generalização entre casos de uso é feita através de uma linha cheia com uma seta aberta, da mesma forma que é feita entre classes.
A Figura 11 mostra um exemplo.
Em esse exemplo o caso de uso pai é o Validar Usuário.
Essa validação pode ser realizada de duas formas, através da senha ou através da análise biométrica (por a retina, por exemplo).
O comportamento inicial da validação é o mesmo independente do método usado para validar o usuário.
Um metamodelo é uma espécie de dicionário visual dos elementos de um modelo e pode ser expresso utilizando um diagrama de classes.
A OMG apresenta um metamodelo para os diagramas da UML, inclusive para o diagrama de casos de uso.
Entretanto, o metamodelo apresentado por a OMG não contempla itens relativos ao detalhamento dos casos de uso.
O metamodelo da OMG apresenta elementos que identificam os casos de uso, atores e relacionamento entre casos de uso.
A Figura 12 apresenta o metamodelo da UML para casos de uso.
Esse metamodelo não apresenta elementos referentes ao detalhamento dos casos de uso, ficando restrito apenas ao diagrama de casos de uso.
A principal classe é a UseCase.
Essa classe é filha de outra classe abstrata chamada de BehavioredClassifier.
A classe Actor também é filha da classe BehavioredClassifier, que também é filha da classe Classifier (não está representada na figura).
A relação entre o ator e o caso de uso ocorre no nível do relacionamento definido entre os classificadores da UML.
O metamodelo da UML é complexo e as definições de suas classes e relacionamentos são revisadas a cada nova versão da linguagem.
Não é escopo desse trabalho uma explicação detalhada dos elementos desse metamodelo.
O metamodelo foi utilizado para analisar como as transformações entre elementos de diferentes modelos poderiam ser realizadas e quais classes dos metamodelos estão envolvidas em cada transformação.
Em o trabalho de Somé é apresentado um metamodelo para o detalhamento textual de casos de uso.
Esse metamodelo contempla uma série de elementos utilizados na descrição do caso de uso, como passos do fluxo, acionadores, pré e pós-condições, entre outros, estendendo o metamodelo definido por a Object Management Group (OMG).
A utilização de um metamodelo que contenha elementos relativos à descrição do caso de uso possibilita uma modelagem mais padronizada do detalhamento do mesmo, uma vez que os elementos a serem utilizados estão definidos no metamodelo.
A principal classe desse metamodelo é a UseCaseDescription.
Essa classe é abstrata, tendo como subclasses concretas a NormalDescription e a ExtendDescription.
Por a definição do metamodelo cada caso de uso pode ter várias descrições.
Somé argumenta que isso permite que cada caso de uso possua várias descrições associadas cada uma de acordo com um determinado nível de detalhamento.
A classe NormalDescription possui uma seqüência de passos (classe StepsSequence) que é composta por vários passos, que podem ser do tipo ActionStep.
Cada objeto da classe ActionStep pode ter uma seqüência de passos alternativos, através da associação com objetos da classe Alternative.
Esse metamodelo é utilizado no presente trabalho com o objetivo de indicar quais elementos dos metamodelos estão envolvidos nas transformações realizadas entre elementos dos modelos de processos de negócio em BPMN para elementos da descrição de casos de uso.
Não é escopo do presente trabalho detalhar os elementos do metamodelo da parte textual, mas sim utilizar o mesmo como um complemento ao metamodelo da UML para auxiliar na identificação das transformações apresentadas no Capítulo 5.
A Model-Driven Architecture (MDA), ou Arquitetura Dirigida por Modelos, consiste numa abordagem para desenvolvimento de software que coloca a criação de modelos como centro do processo de desenvolvimento.
O princípio geral da MDA é separar a especificação de operações do sistema de detalhes de implementação numa determinada plataforma.
Os softwares são desenvolvidos a partir de modelos criados dentro de os diversos níveis de abstração.
Esses níveis de abstração vão desde o mais alto nível, que independe da plataforma ou tecnologia até o nível mais baixo que seria o próprio código-fonte.
Essa passagem de um nível para outro é feita através de transformações entre modelos, assunto discutido com mais detalhes na Seção 3.7.
Em o nível CIM não são mostradas informações estruturais dos sistemas.
Em esse nível estão contidos os modelos de processos de negócio.
Esses modelos têm como objetivo modelar o processo de negócio sem levar em consideração restrições de tecnologia.
Esses modelos geralmente são criados por os analistas de negócio.
Algumas partes de um modelo CIM podem ser suportadas por um sistema.
Entretanto, o CIM independe de plataforma e para transformar um modelo CIM para um Pim é necessário identificas quais partes do CIM são suportadas por um sistema.
Os modelos de sistema representados através da UML com o uso de diagramas de casos de uso são exemplos de modelos no nível Pim.
Eles são independentes de plataforma.
Entretanto, são direcionados a identificar funcionalidades específicas do sistema não entrando em detalhes de como essas são implementadas.
Já diagramas de seqüência da UML constituem exemplos de modelos no nível PSM, pois contém detalhes específicos da plataforma de implementação utilizada.
A Figura 14 mostra os diferentes níveis e os tipos de modelos pertencentes a cada um de eles.
A transformação entre modelos é o processo de conversão de um modelo em outro modelo do mesmo sistema.
Essa transformação é feita através da definição de regras de mapeamento entre os modelos.
Essas regras são definidas para elementos dos metamodelos de cada um dos modelos criados.
A partir de a definição dessas regras um modelo criado utilizando um metamodelo pode ser transformado em outro modelo baseado num metamodelo diferente.
Em o trabalho de Mens, é proposta uma taxonomia para transformação entre modelos.
Essa taxonomia classifica as transformações entre modelos de acordo com determinadas características, de entre as quais podem se destacar: --
Número de modelos de origem e destino Um modelo de origem pode ser transformado num ou mais modelos.
O contrário também é verdade, ou seja, vários modelos de origem podem resultar em apenas um modelo destino. --
Transformação endógena versus exógena Uma transformação endógena acontece dentro de um mesmo metamodelo.
Por exemplo, um modelo representado em UML transformado em outro modelo em UML constitui uma transformação endógena.
A transformação exógena ocorre quando os metamodelos são diferentes.
Um exemplo é a transformação de um modelo em BPMN para um modelo em UML. --
Transformação horizontal versus vertical Quando um modelo é transformado em outro dentro de o mesmo nível de abstração essa transformação é chamada de horizontal.
Por sua vez, a transformação vertical acontece quando um modelo num nível de abstração é transformado em outro modelo num nível de abstração maior ou menor. --
Nível de automação O nível de automação faz uma distinção entre as transformações que são automáticas e as que necessitam de um trabalho manual para realizar a mesma.
As automáticas são passíveis de implementação de rotinas para realizar as mesmas. --
Transformação sintática e/ ou semântica A transformação sintática leva em consideração apenas elementos sintáticos da transformação, não verificando a semântica da mesma.
A transformação semântica é mais complexa, pois o novo modelo deve levar em conta a semântica dos elementos do modelo original.
Para a transformação de um modelo num nível de abstração para um modelo em outro nível de abstração (transformação vertical) é necessária a análise dos elementos em nível de metamodelos.
Os metamodelos da BPMN e de casos de uso da UML apresentados nas seções anteriores são utilizados para identificação das transformações entre os modelos de processo de negócio em BPMN (nível CIM) para modelos de casos de uso da UML (nível Pim).
A transformação de modelos de nível Pim para PSM não é abordada nesse trabalho, mas pode ser assunto de um trabalho futuro.
Esse capítulo apresenta alguns trabalhos relacionados com a transformação de modelos de processo de negócio para modelos de sistema.
Esses trabalhos foram obtidos a partir de uma revisão sistemática realizada por o autor do presente trabalho em 2010 e depois atualizada em 2011.
Em a análise dos trabalhos encontrados, realizada na revisão sistemática, verifica- se que não existe um método, estratégia ou abordagem que seja padrão atualmente.
O que existe são diferentes propostas que tentam resolver o problema de transformar um modelo num nível de abstração de negócio para um modelo num nível de abstração de sistema.
Em relação a as linguagens/ notações utilizadas para criação dos modelos verifica- se que em trabalhos mais recentes existe um predomínio do uso da BPMN para modelagem dos processos de negócio.
Outros trabalhos utilizam uma notação de modelagem de processo de negócio mais genérica, como é o caso de Okawa e Dijkman, sendo que esse último utiliza um diagrama de atividades.
Já para a modelagem do sistema as propostas utilizam predominantemente os casos de uso da UML[ DIJ02, BAE07, LIE04, ROD10, ODE03, LUN03, AZE08, EST03, BER09].
Além de o diagrama de casos de uso também são utilizados diagramas de classes em alguns trabalhos.
As próximas seções apresentam com mais detalhes alguns desses trabalhos citados anteriormente.
Os trabalhos detalhados são os que procuram identificar casos de uso a partir de processos de negócio, descrevendo como realizar essa tarefa.
Apenas um dos trabalhos citados não identifica casos de uso, mas sim classes de projeto software.
Esse trabalho se torna interessante de ser estudado porque mostra outra forma de identificar elementos no nível de sistema a partir de modelos de processos no nível de negócio.
O trabalho de Dijkman, publicado em 2002, é um dos primeiros a abordar a transformação de processos de negócio para casos de uso, sendo utilizado como referência por a maioria dos estudos sobre o assunto.
A proposta do trabalho é apresentar uma técnica para simplificar a captura de requisitos com casos de uso buscando derivar casos de uso a partir de processos de negócio.
Em esse trabalho é apresentado o conceito de Role (Papel) e Step (Passo), que é utilizado por outros autores[ LIE04, VAR08, BER09].
Um Passo consiste num conjunto de atividades realizadas sem desvios por o mesmo Papel do processo de negócio.
Também é de Dijkman a ideia de diferenciar as tarefas do processo de negócio em manuais ou executadas por o sistema, essa última podendo ser com ou sem intervenção de um usuário.
Os processos de negócio não são feitos em BPMN, mas sim em diagrama de atividades da UML.
A técnica consiste basicamente num mapeamento entre os elementos do diagrama de processo de negócio e os casos de uso, definidos na Tabela 1.
Elementos de processo de negócio Papel Passo Associação entre Papel e Passo Tarefa Tarefa num Passo Transição entre Tarefas num mesmo Passo Restrição na transição Caminhos de um desvio Elementos do caso de uso Ator Caso de Uso Associação entre Ator e Caso de Uso Interação Interação dentro de um Caso de Uso Interações ordenadas dentro de um mesmo Caso de Uso Restrição na interação Extensão de Caso de Uso ou caminho alternativo na descrição.
O mapeamento é realizado com base nas regras definidas.
Posteriormente é feita uma validação do resultado obtido com o objetivo de eliminar possíveis inconsistências.
Uma proposta de transformação de modelos BPMN para diagramas de casos de uso pode ser vista no trabalho de Liew.
Em esse trabalho o autor faz uso da estrutura de annotations disponível na BPMN.
Usando annotations é possível adicionar uma informação textual a qualquer elemento do modelo.
Em esse artigo o autor propõe um mapeamento entre elementos do modelo de negócio para elementos de um diagrama de casos de uso.
Para atender a todos os conceitos de negócio necessários é proposta a inclusão de uma annotation que identifique o Ator do caso de uso.
O Ator poderia ser identificado por a raia, mas o uso de uma annotation, denominada Role (Papel), permite uma maior flexibilidade para associar qualquer elemento do modelo a um determinado ator.
Essa proposta é basicamente uma extensão do trabalho de Dijkman, mas utilizando a BPMN ao invés de uma notação genérica de modelagem de negócio.
Os conceitos de Step (Passo) e Role (Papel) são os mesmos.
Uma contribuição desse trabalho é a geração de diagramas de colaboração da UML.
Esses são gerados a partir de as annotations utilizadas no modelo em BPMN.
Um exemplo de mapeamento de modelo de processo de negócio para diagrama de caso de uso usando esse método pode ser visualizado na Figura 15 e na Figura 16.
Em Okawa é apresentada uma proposta que utiliza uma notação genérica de BPM para modelagem de processo de negócio e diagramas de classes para modelagem das classes de projeto de sistema.
Apesar de não utilizar casos de uso é interessante a análise desse trabalho porque o mesmo busca identificar diretamente classes de projeto de software em diagramas de processo de negócio, ao invés de os casos de uso.
O autor divide o processo todo em quatro estágios.
Em o primeiro é feita uma análise dos processos de negócio atuais e criados modelos que representam esses processos.
Uma simulação de cada processo de negócio é realizada num segundo momento.
Posteriormente são realizadas melhorias e correções nos processos analisados.
Por último, é feita a transformação de cada processo definido para diagrama de classes da UML.
A transformação dos modelos de processo de negócio para diagrama de classes é realizada seguindo uma determinada política:
Associar cada processo de negócio definido a uma classe única do diagrama de classes.
Obter os dados necessários para a criação e execução do processo de negócio e tratar os mesmos como candidatos a atributos no diagrama de classes.
Tratar os elementos do modelo que descrevem fenômenos (ou atividades) como candidatos a métodos da classe.
Quando alguma especificação adicional parecer necessária nos passos 2 e 3 citados acima, adicionar outros atributos e métodos as classes.
Após os passos acima, verificar elementos comuns as classes que poderiam ser compartilhados.
Em esse caso preparar uma classe para esses elementos compartilhados.
A Figura 17 apresenta um exemplo do processo de transformação.
A partir de o workflow que representa o processo de negócio é obtida a classe e os candidatos a atributos e métodos da classe.
O estudo de Vara utiliza rótulos nos elementos de um diagrama BPMN para identificar e mapear esses elementos para uma estrutura semelhante a casos de uso.
Mais precisamente ele utiliza um template para o detalhamento de um caso de uso baseado no conceito de Task and Descriptions (Tarefa e Descrição), proposto por Lauesen.
Esse template é semelhante a uma descrição de caso de uso, mas com algumas informações adicionais.
De entre as informações contidas no template estão:
Nome da tarefa, responsável por a execução, gatilhos, précondições e pós-condições, dados de entrada/ saída, detalhamento da interação entre usuário e o sistema.
Além de o procedimento de rotular os diagramas BPMN o autor também sugere a criação de documentos complementares para representação de informações que não podem ser exibidas graficamente, como regras de negócio.
Esses documentos servem como complementos para as Task and Description geradas.
Os elementos do diagrama em BPMN são rotulados como:
&quot;O», que indica um elemento fora de o sistema e que não fará parte do mesmo;
&quot;Is», indicando um item que fará parte do sistema e será controlado por o mesmo sem intervenção humana;
&quot;U», que identifica algo que será executado por o usuário, sendo que essa execução implica numa interação do usuário com o sistema.
A figura 8 contém um exemplo de um diagrama BPMN com os rótulos definidos.
Em o método proposto as informações contidas no template gerado são oriundas do diagrama BPMN e nas documentações complementares.
Em linhas gerais, a transformação de um modelo de negócio expresso em BPMN para um template Task and Description baseado em casos de uso utilizando essa técnica segue os seguintes passos:
1) Cada tarefa do diagrama BPMN rotulada com &quot;U «é transformada num Task and Description com o mesmo nome.
2) O participante da tarefa definido na raia do diagrama BPMN se torna o role do Task and Description.
3) Os eventos do tipo &quot;Is «que precedem a tarefa são transformados em gatilhos.
4) Os gateways marcados como &quot;Is «que precedem e sucedem a tarefa se tornam précondições e pós-condições, respectivamente.
5) Os objetos de dados no diagrama BPMN tornam- se os dados de entrada/ saída.
6) A interação entre o usuário e sistema é definida partir do comportamento do usuário para executar a respectiva tarefa, contido nas documentações complementares.
7) As regras de negócio também são obtidas a partir de os documentos adicionais que descrevem cada tarefa.
A Figura 19 apresenta a Task and Description da tarefa Notify Customer do processo de negócio da Figura 18.
Em o trabalho de Javier são propostos padrões para extração de casos de uso a partir de modelos de processos de negócio em BPMN.
Esse trabalho tem como principal contribuição a identificação de padrões para identificar tanto os casos de uso como seus relacionamentos (inclusão e extensão).
Esses padrões abordam os diferentes tipos de gateways e quais relacionamentos entre casos de uso eles originam.
Esse trabalho utiliza o conceito de Step (Passo), proposto por Dijkman, assim como rotula as tarefas do BPMN entre Automáticas, Manuais ou Suportadas.
As tarefas automáticas e suportadas podem se tornar casos de uso do sistema.
O processo para identificar os casos de uso ocorre da seguinte forma:
1) Os atores são identificados através das raias.
2) Os passos (série de tarefas executadas sem interrupção) são identificados e transformados em casos de uso.
3) A partir desse ponto são identificados os relacionamentos entre os casos de uso através dos padrões apresentados, de entre os quais se podem destacar:
4) Após o término da identificação dos casos de uso e dos seus relacionamentos o analista de requisitos deve refinar o resultado obtido.
A proposta apresentada por Rodriguez parte de um modelo inicial em BPMN e transforma esse modelo num diagrama de classes e em diagramas de casos de uso, tendo como foco requisitos de segurança em processos de negócio.
Em esse trabalho são utilizadas regras bem definidas para a transformação entre os modelos dos diferentes níveis.
Em um primeiro momento é realizada uma transformação entre o modelo BPMN para um diagrama de atividades da UML.
Essa transformação ocorre num mesmo nível de abstração.
Posteriormente, o diagrama de atividades gerado dá origem a um diagrama de classes e a diagramas de casos de uso.
Os diagramas gerados são refinados para incluir requisitos de segurança pré-definidos através de um framework proposto.
A transformação entre o diagrama em BPMN para o diagrama de classes e para o diagrama de casos de uso é relativamente simples.
Conforme mencionado anteriormente, a primeira transformação realizada é entre um diagrama BPMN e um diagrama de atividades.
Cada Pool ou Lane do diagrama em BPMN é transformado numa Partição de Atividade no diagrama de atividades.
Cada tarefa da BPMN é mapeada para uma Ação;
Cada fluxo de mensagem é mapeado para um fluxo de objeto;
Os objetos de dados são mapeados para datastores e o evento inicial é mapeado para um nodo de início.
Uma vez gerado o diagrama de atividades esse é transformado num diagrama de classes e num diagrama de casos de uso.
Cada partição de atividade da origem a uma classe no diagrama de classes.
Todas as ações dentro de a partição são colocadas como operações das classes.
Os datastores também dão origem a classes.
Em os casos em que existem subpartições, essas são transformadas em classes que se relacionam com a classe da partição (que contém essa subpartição) através de um relacionamento de generalização.
Observando o diagrama BPMN da Figura 22, de acordo com o método proposto o diagrama de classes gerado teria uma classe expedição com quatro métodos, cada um de eles correspondendo a uma das tarefas do BPMN.
Deve- se reforçar que antes da geração do diagrama de classes se faz necessária a geração do diagrama de atividades, que nesse caso conteria uma partição de atividade (expedição) e quatro ações (cada uma das quatro tarefas).
A Figura 23 apresenta o diagrama de classe (com uma classe apenas) gerado a partir de o modelo de processo de negócio da Figura 22.
A geração do diagrama de casos de uso também ocorre a partir de o diagrama de atividades obtido do BPMN, conforme mencionado anteriormente.
Para fazer a transformação do diagrama de atividades para casos de uso as seguintes regras são utilizadas:
Cada partição de atividade dá origem a um ator com o mesmo nome;
Cada ação origina um caso de uso, que é relacionado à partição em que está contido.
No caso de existirem subpartições, essas dão origem a atores com relação de especialização.
As subpartições se tornam atores especializados enquanto que a partição principal se torna ator generalizado.
Os trabalhos apresentados nas seções anteriores mostram um esforço da comunidade científica em propor soluções que busquem aproximar os modelos em nível de sistema dos modelos em nível de negócio.
Em o trabalho de Dijkman é utilizado um diagrama de atividades da UML para modelar o processo de negócio.
Dijkamn é um dos precursores nesse tema de identificação de casos de uso a partir de processos de negócio.
Os conceitos propostos são utilizados em outros trabalhos Um dos problemas do trabalho de Dijkamn é justamente a notação utilizada para a modelagem do processo de negócio.
Atualmente a BPMN oferece maior poder de expressão para elementos em nível de negócio do que um simples diagrama de atividades da UML.
O trabalho de Liew é uma evolução do trabalho anterior de Dijkman à medida que utiliza a BPMN para desenhar o negócio.
Entretanto, vários elementos da BPMN não são considerados, como os diferentes tipos de tarefas, eventos e gateways.
Em a geração dos casos de uso apenas o diagrama e interações do fluxo básico são geradas.
É necessária uma intervenção no diagrama BPMN para identificar os Roles (que dão origem aos atores) e os Steps (que dão origem aos casos de uso), assim como a marcação do tipo da tarefa, manual, automática ou suportada.
A transição entre o nível de negócio para o nível de sistema também é assunto do trabalho de Okawa.
A diferença é que o objetivo não é a geração de casos de uso de sistema, mas sim das classes de projeto de software.
O princípio utilizado é que cada processo de negócio pode representar uma classe e as tarefas que ocorrem dentro de o processo tornam- se candidatas a métodos dessa classe.
Essa transformação direta entre um artefato de negócio e um artefato em nível de projeto de sistema pode gerar um diagrama de classes de projeto que não reflete a realidade necessária para implementação do sistema.
Por isso que o autor reforça que os elementos gerados nas classes são apenas candidatos a propriedades e métodos, devendo ser validados por o analista ou projetista.
O trabalho de Vara acrescenta informações relacionadas à descrição das interações que ocorrem no nível dos casos de uso.
Em a realidade é usado um artefato que estende as informações de um caso de uso, sendo esse artefato chamado de Task and Description.
A Task and Description é um template de descrição de caso de uso contendo elementos adicionais, como dados de entrada/ saída, regras de negócio, gatilho, entre outros.
Apesar de esse método gerar uma descrição mais detalhada ele acaba não tendo a expressão visual que se obtém ao utilizar os diagramas de casos de uso e seus relacionamentos.
Em Berrocal é apresentado um conjunto de padrões para extração de casos de uso em modelos de processos de negócio em BPMN.
As idéias utilizadas são basicamente as propostas por Dijkman.
A contribuição desse trabalho está em tratar diferentes tipos de gateways e também a ocorrência de exceções ligadas a tarefas.
Apesar de fazer uso da notação BPMN os diferentes tipos de tarefas possíveis na BPMN não são abordados, assim como os diferentes tipos de eventos.
A descrição dos casos de uso gerados também não é trabalhada.
Os padrões propostos são limitados e acabam gerando diagramas de casos de uso com relacionamentos incorretos.
É o que ocorre quando um caminho padrão de um gateway exclusivo origina um caso de uso com relacionamento de inclusão com o caso de uso que precede o gateway.
Esse relacionamento está incorreto porque implicaria dizer que o caso de uso incluído é sempre executado.
Em o gateway exclusivo apesar de se ter um caminho padrão não necessariamente esse caminho é sempre percorrido.
Ele será o percorrido apenas quando nenhuma condição associada a outro caminho for verdadeira ou quando a sua própria condição for verdadeira.
Um relacionamento de inclusão não expressa esse tipo de situação.
O último trabalho estudado é o de Rodriguez.
Esse trabalho apresenta um método que parte de um diagrama BPMN e dá origem tanto a diagrama de classes como diagrama de casos de uso, que depois são refinados utilizando requisitos específicos de segurança.
Inclusive são apresentadas definições formais das transformações realizadas, sendo utilizada uma linguagem de transformação entre modelos, a Query View Transformation (QVT).
A transformação ocorre em duas etapas.
Primeiro o modelo em BPMN é transformado num diagrama de atividades da UML.
Em seguida o diagrama de atividades é transformado em diagrama de classes e diagrama de casos de uso.
Os autores não deixam claro porque é feita essa transformação para o diagrama de atividades ao invés de gerar diretamente os diagramas de classes e casos de uso.
Uma contribuição desse trabalho está na formalização das transformações permitindo uma automatização das mesmas, bem como no uso dos princípios da MDA para transformações entre modelos de diferentes níveis de abstração.
Entretanto, os modelos gerados não são completos.
No caso de o diagrama de classes não é mencionado como os atributos são obtidos.
Em os diagramas de casos de uso não são tratados itens de descrição dos casos de uso assim como relacionamento entre os que foram obtidos a partir de o modelo inicial em BPMN.
Os diferentes tipos de tarefas da BPMN bem como os eventos também não são abordados.
O método proposto tem escopo limitado a requisitos de segurança sendo que todos os modelos gerados na transformação são refinados com informações complementares.
Uma conclusão que se pode obter a partir de os estudos relacionados é que não há uma proposta consolidada que permite gerar um artefato em nível de sistema a partir de um artefato em nível de negócio.
O que se pode perceber é que os esforços estão mais evoluídos na geração de casos de uso de sistema e que a notação utilizada nos trabalhos mais recentes para a modelagem de processo de negócio é a BPMN[ LIE04, VAR08, O fato de não haver uma proposta consolidada para realizar essa transformação indica que ainda existem evoluções que podem ser feitas nesse assunto, de entre as quais se destacam: --
Tratamento de diferentes tipos de tarefas da BPMN; --
Tratamento dos eventos de um diagrama BPMN; --
Diferentes possibilidades de transformação dos gateways; --
Geração da descrição dos casos de uso (ou parte de ela);
A proposta apresentada no próximo capítulo tem como objetivo apresentar um método que atenda as evoluções mencionadas acima.
O objetivo desse capítulo é apresentar um método de transformação de elementos de modelo de processos de negócio usando diagrama BPMN para elementos do modelo de casos de uso, esse último formado por o diagrama e descrições iniciais dos casos de uso.
Para que isso seja possível é necessário que o modelo de processos de negócio expresso em BPMN represente o negócio considerando tarefas que devem ser executadas por um sistema de informação a ser modelado.
O método consiste basicamente em analisar as diferentes alternativas possíveis de transformação dos elementos da BPMN para elementos do modelo de casos de uso.
O método proposto apresenta um caminho que deve ser percorrido para que se atinja o resultado final.
O resultado final é o modelo de casos de uso do sistema.
O método consiste em três atividades:
I) Verificação do modelo de processos de negócio de origem;
Transformação dos elementos da BPMN para casos de uso;
Iii) Refinamento das descrições dos casos de uso.
A verificação do modelo de origem consiste em analisar se o modelo de processos de negócio utilizado como origem permite a identificação de elementos de sistema, ou seja, se o modelo pode ser usado como base para identificação de requisitos de um sistema.
Um processo de negócio que define somente tarefas manuais sem prever a utilização de um sistema não possibilita identificar quais elementos estariam relacionados com o sistema.
A BPMN permite diferenciar tarefas manuais com tarefas relacionadas com um sistema.
O modelo utilizado como origem na transformação deve possuir essa distinção entre os tipos de tarefas.
A transformação dos elementos da BPMN para casos de uso é a principal atividade do método proposto.
Essa atividade consiste em analisar cada elemento da BPMN verificando como o mesmo pode ser transformado num elemento de caso de uso do sistema.
Por exemplo, raias da BPMN podem dar origem a atores de casos de uso, assim como tarefas de sistema podem dar origem aos casos de uso.
A última atividade consiste num ajuste das transformações realizadas anteriormente, principalmente na descrição dos casos de uso gerados.
Por exemplo, a transformação pode dar origem a um caso de uso contendo apenas a identificação do seu ator e uma pré-condição.
Em esse caso é necessário um refinamento dessa descrição.
A atividade de refinamento não ocorre necessariamente após a atividade ii.
Elas podem ocorrer concomitantemente para cada transformação realizada.
As condições para se transformar o modelo de processo de negócio assim como a descrição das transformações estão explicadas no restante do capítulo, que está organizado da seguinte forma:
Seção 5.2 apresenta considerações sobre a validação do modelo de processo de negócio utilizado como origem;
A Seção 5.3 apresenta as definições das transformações entre os elementos de negócio e os de sistema, assim como observações relativas ao refinamento dos casos de uso;
Finalmente a Seção 5.4 apresenta as considerações finais sobre o método.
Conforme mencionado no Capítulo 3, sobre modelagem de sistemas, os casos de uso são utilizados para expressar de forma mais detalhada os requisitos de um sistema.
Um caso de uso é uma descrição textual e estruturada da interação que ocorre entre um (ou mais) ator (es) e o sistema para atingir um determinado objetivo de interesse desse ator ou desses atores.
Segundo Booch, um caso de uso especifica o comportamento de um sistema e é uma descrição de um conjunto de ações, incluindo suas variantes, que produz um resultado observável para um ator.
Larman explica que o modelo de casos de uso é formado por as descrições dos casos de uso e pode incluir um diagrama de casos de uso da UML.
O diagrama de casos de uso é utilizado na UML para visualização dos casos de uso com seus respectivos relacionamentos.
É um artefato que fornece uma visão geral dos requisitos do sistema e como esses requisitos estão associados aos atores do sistema.
Já o detalhamento de um caso de uso é um documento textual contendo a descrição detalhada das ações que ocorrem para que um ator atinja um determinado objetivo definido por o caso de uso.
Por ser textual a forma de se descrever um caso de uso varia muito, assim como variam os elementos considerados em cada formato de descrição.
Cockburn comenta que o mesmo caso de uso escrito por uma pessoa pode ser diferente do escrito por outra pessoa.
O estilo de escrita depende da finalidade do caso de uso.
Um caso de uso válido num projeto pode não ser adequado em outro.
Por esse motivo é necessário definir qual o formato do caso de uso a ser trabalhado, ou mais especificamente, quais os elementos que compõem o caso de uso.
O formato de caso de uso utilizado nesse trabalho está definido na seção a seguir.
Essa seção descreve o formato de caso de uso obtido a partir de as transformações.
Esse formato está baseado nos formatos propostos por o RUP e Cockburn, descritos no Capítulo O princípio básico das transformações é extrair do diagrama de processo de negócio os elementos do caso de uso.
Entretanto, apenas alguns elementos podem ser obtidos analisando o diagrama BPMN.
O restante da descrição deve ser completado posteriormente por o profissional que está fazendo a análise dos casos de uso, geralmente um analista de sistemas.
Por esse motivo o formato utilizado para a descrição é uma simplificação dos formatos do RUP e de Cockburn, utilizando campos dos dois formatos, cujo conteúdo desses campos pode ser obtido a partir de informações contidas nos modelos de processo de negócio.
O elemento Acionador é específico do formato de Cockburn.
O elemento Lista de Atores é uma simplificação do Ator principal e demais atores.
Os demais campos são comuns aos formatos do RUP, de Cockburn e de outros autores A Tabela 2 apresenta os elementos do formato proposto.
Elemento Descrição Nome Nome do caso de uso.
Descrição Breve descrição do caso de uso.
Lista de Atores Lista com os atores que participam do caso de uso.
Pré-condições Condições que devem ser verdadeiras no sistema para que o caso de uso inicie.
Acionador Ação que dispara o caso de uso, podendo ser um evento de tempo.
Fluxo básico de eventos Descrição textual, passo a passo e numerada que define a interação básica, ou o cenário típico de sucesso, entre os atores e o sistema para atingir um objetivo.
Fluxos Alternativos Fluxos alternativos ao fluxo básico definido.
Devem ter nomes, passos numerados e a indicação de quando eles ocorrem.
Pontos de Extensão Lista de locais dentro de o fluxo de eventos (básico ou alternativo) cujo comportamento adicional é inserido usando relacionamentos de extensão.
Geralmente está associado a uma condição para que o relacionamento aconteça.
Pós-condições Descreve o que deve ser verdadeiro após a execução bem sucedida do caso de uso.
O acionador indica uma ação que ocorre e que é responsável por o início do caso de uso.
Pode ser um evento de tempo, como um horário programado do dia para execução de um caso de uso.
O fluxo básico contém uma lista de passos que representa a troca de informações entre o ator, ou atores, e o sistema.
Essa lista de passos deve ser numerada.
Existe apenas um fluxo básico para cada caso de uso.
Os outros fluxos possíveis devem ser colocados no elemento Fluxos Alternativos.
Cada fluxo alternativo deve possuir um nome e ter seus passos numerados.
