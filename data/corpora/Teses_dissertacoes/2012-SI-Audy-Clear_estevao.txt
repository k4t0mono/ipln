Em busca de vantagens competitivas, tais como redução de custo e ganho de produtividade, cada vez mais as organizações optam por distribuir seus processos de desenvolvimento de software em países com custo de produção mais acessível.
Os projetos estão também cada vez mais sendo desenvolvidos em ambientes geograficamente distribuídos, caracterizando o desenvolvimento distribuído de software.
Entretanto, os desafios inerentes a este ambiente de desenvolvimento de software são significativos.
De entre estas adversidades está a diferença de fuso horário, a qual pode ser também encarada como uma vantagem, através da aplicação da estratégia Follow-the-Sun.
Entretanto, a estratégia Follow-the-Sun apresenta alguns desafios, principalmente durante a transferência de trabalho de um centro de desenvolvimento para outro.
Portanto, o foco desta pesquisa é apresentar um processo para amenizar estas dificuldades inerentes aos projetos que utilizam a estratégia Follow-the-Sun, focando na fase de desenvolvimento do ciclo de vida de software.
Foi também realizado um experimento para avaliar a eficiência do processo proposto.
Os resultados encontrados mostram indícios que o processo criado realmente ameniza as dificuldades encontradas na aplicação da estratégia Follow-the-Sun.
Atualmente, o processo de globalização está se destacando gerando grande desafio para a área de Engenharia de Software (ES).
Hoje em dia, mais projetos estão sendo desenvolvidos em ambientes geograficamente distribuídos, caracterizando o Desenvolvimento Distribuído de Software (DDS).
O DDS é caracterizado sempre que um ou mais recursos humanos envolvidos no projeto estiver fisicamente distantes dos demais.
Pode- se dizer também que uma equipe global de desenvolvimento de software está tipicamente em países diferentes, porém colaborando num mesmo projeto de qualquer natureza (criação ou manutenção de software).
Durante a implementação do DDS, surgem diversos desafios de gerenciamento.
De entre estes desafios, diversos autores mostram que a diferença de fuso horário pode ser um fator de extrema relevância[ HOL06, HER01, CAR10, TRE06].
Para amenizar este desafio, alguns estudos indicam o uso da estratégia Follow-the-Sun (FTS).
Contudo, recentes trabalhos mostram que são poucos os casos de sucesso na indústria utilizando esta estratégia.
Os principais problemas apontados por a literatura estão relacionados às dificuldades de coordenação, sincronização e comunicação, principalmente durante a transferência de trabalho de um centro de desenvolvimento para outro.
Dentro de esta área de estudo, a literatura mostra que o uso da estratégia FTS apresenta diversos desafios.
Entretanto, não apresenta formas para amenizar estes desafios durante as transferências de trabalho.
Em este sentido, o foco desta pesquisa concentra- se na transferência de trabalho entre centros de desenvolvimento, durante a fase de desenvolvimento de software em projetos que utilizam a estratégia FTS.
Conforme a literatura nos mostra, a utilização da estratégia FTS pode apresentar diversos desafios.
Entre estes, os principais listados por a literatura são os problemas de comunicação e sincronização de tarefas entre as equipes distribuídas e problemas de coordenação entre os centros de desenvolvimento distribuídos.
Grande parte dos trabalhos apresentados na literatura ligados a esta temática visam comparar o uso da estratégia FTS com projetos realizados da forma tradicional, ou seja, projetos co-localizados.
Estes trabalhos, geralmente apresentam os problemas que a utilização da estratégia FTS pode apresentar.
Entretanto, trabalhos com o objetivo de amenizar estas dificuldades ainda são escassos na literatura, tornando esta pesquisa relevante para esta temática.
Apesar de os diversos desafios para a aplicação da estratégia FTS, esta forma de desenvolver software desperta o interesse da indústria, pois através do uso desta estratégia é possível diminuir o time- to-- market, aumentando assim a sua produtividade.
A estratégia FTS pode ser utilizada em todas as fases do desenvolvimento de software.
Entretanto, a utilização da estratégia FTS de uma mesma maneira em todas as fases do ciclo de vida do desenvolvimento do software pode- se apresentar muito complexa e, em alguns casos, até inviabilizar a sua utilização.
Segundo, os processos para utilizar o FTS em cada fase devem ser diferentes.
A utilização do FTS dentro de uma fase particular de forma distinta das demais fases é mais adequada para a esta estratégia, pois as suas características específicas permitem uma estrutura mais controlada para as transferências de trabalho (hand-offs).
Portanto, esta pesquisa torna- se relevante, pois a criação de um processo para a transferência de trabalho na fase de desenvolvimento pode facilitar o uso desta estratégia nos projetos de software e assim, facilitar a sua utilização em projetos distribuídos de software.
Além de isto, para a teoria da área, esta pesquisa torna- se importante, pois, devido a a escassez de trabalhos publicados neste campo de estudo, a literatura não apresenta a definição de um processo para a transferência de trabalho em projetos que utilizam esta estratégia, focados na fase de desenvolvimento do ciclo de vida.
Sintetizando, a questão de pesquisa que norteia este estudo é:
Como transferir trabalho durante a fase de desenvolvimento do ciclo de vida de software num ambiente de DDS, utilizando estratégia FTS?
Para responder esta questão de pesquisa, emergem os seguintes objetivos: --
Objetivo Geral:
O objetivo geral deste trabalho é propor um processo de transferência de trabalho (hand-off) para a fase de desenvolvimento do ciclo de vida, para projetos que utilizam a estratégia FTS.
Para alcançar estes objetivos, emergem os seguintes objetivos específicos:
As formas de distribuição das equipes em ambientes de DDS podem variar entre as companhias.
Conforme a Figura 1, temos:
Outsourcing e Insourcing repre esentando o as diferen ntes forma as de relac cionamento o entre empresas e, Inshore e Of ffshore rep presentando as distrib buições ge eográficas.
A escolha a da distrib buição a ser utilizada po ode variar com base e no projet to a ser de esenvolvido o.
Com o objetivo de contextualiz zar esta pe esquisa, ab baixo é apresentado uma breve e descrição sobre os c conceitos relacionad dos às dif ferentes distribuições geográficas.
O profundo deta alhamento destes con nceitos est tá descritos s na seção o 2.1.
Onshore entre e a empre esa contra atante e a empresa contratada a (ou matriz e subs sidiária).
Esta a distribuiçã ão acontec ce num mesmo pa aís, como por p exemp plo, podemos ter a matr riz na cida ade de São o Paulo, e a sua su ubsidiária ou o contrata ada na cid dade de Belo o Horizonte e.
Offshore e:
Este te ermo representa um ma distribuição mai is distante e.
Uma distr ribuição off ffshore dev ve obrigato oriamente acontecer r entre paí íses distint tos.
Um exem mplo para esta distrib buição pod deria ser o caso ond de temos a matriz na a cidade de L Londres (In nglaterra), e a sua su ubsidiária ou o contrata ada na cida ade de Ba angalore (Índi ia).
O detalh hamento destas difer rentes form mas de dis stribuições em ambie entes de S está desc crito na seç ção 2.1.
Após es sta breve descrição d diferen das ntes formas s de distrib buição geo ográfica, o en nfoque des sta pesquisa está em e equipes que utilizam a dis stribuição do tipo offsh hore, ou seja, comp panhias lo ocalizadas em paíse es distintos s.
Este fa ato está relac cionado à diferença de d fuso ho orário, nece essária para a utiliza ação da es stratégia FTS.
A Figur ra 1 apre esenta as diferentes s formas de distrib buições en ntre as empresas num ambiente de DDS e, em destaque, distribuições offshore, as quais representam o enfoque desta pesquisa.
Para alcançar os objetivos citados, este trabalho está estruturado da seguinte forma:
A seção dois é destinada a apresentar a Base Teórica envolvendo o Desenvolvimento Distribuído de Software (DDS) e a estratégia Follow-the-Sun (FTS);
A seção três aborda a metodologia de pesquisa utilizada;
A seção quatro apresenta o processo proposto, o qual foi chamado de FTSProc, juntamente com a ferramenta de apoio ao processo desenvolvido;
A seção cinco descreve o estudo experimental realizado;
A seção seis apresenta uma análise crítica dos resultados encontrados;
E finalmente, a seção sete expõe as considerações finais, onde são destacados os resultados obtidos nesta pesquisa juntamente com as principais contribuições, limitações e os estudos futuros.
O Desenvolvimento Distribuído de Software (DDS) tornou- se uma tendência na indústria de software, pois apresenta diversos fatores motivadores que levam as empresas a utilizar cada vez mais este conceito em seus negócios.
Porém, o DDS adiciona inúmeros desafios ao processo de desenvolvimento de software.
De entre estes desafios, podemos citar a diferença de fuso horário entre as equipes distribuídas.
Entretanto, o fuso horário pode ser encarado como uma vantagem para o projeto.
Esta diferença de fuso horário pode ser utilizada para realizar o uso do desenvolvimento FTS.
Sendo assim, na seção 2.1 é apresentado o desenvolvimento distribuído de software (DDS), juntamente com suas vantagens e os seus desafios.
Em a seção suas definições e conceitos encontrados na literatura, juntamente com alguns estudos realizados nesta temática.
Finalmente, na sessão 2.3 são apresentados os trabalhos relacionados à temática desta pesquisa.
Em o ambiente atual da indústria de software, o processo de globalização está se destacando, gerando um grande desafio para a área da engenharia de software (ES).
Em a busca de vantagens econômicas na construção de software, empresas estão tornando o desenvolvimento cada vez mais distribuído e global.
Hoje em dia, mais projetos estão sendo desenvolvidos em ambientes geograficamente distribuídos, caracterizando o Desenvolvimento Distribuído de Software (DDS), o qual está tornando- se uma tendência na indústria de software As empresas de software são levadas ao uso de DDS, pois a construção de software torna- se cada vez mais cara e a competitividade da empresa diminui num ambiente co-localizado.
De esta maneira, empresas utilizam o DDS com o objetivo de reduzir seus custos de produção de software e, portanto, aumentar a sua competitividade no mercado.
O DDS não é um conceito novo.
Este conceito surgiu nos anos 90, onde as empresas começaram a desenvolver software com equipes distribuídas.
O DDS é caracterizado sempre que um ou mais recursos envolvidos no projeto estiverem fisicamente distante dos demais.
Quando a distância física entre os elementos das equipes do projeto abrange mais de um país, caracterizase o Desenvolvimento Global de Software (GSD, do inglês Global Software Development).
As formas de distribuição das equipes em DDS podem variar entre as companhias.
A escolha da forma de utilização do DDS deve ser realizada com base no tipo de projeto a ser desenvolvido.
Com isso, torna- se relevante a definição de alguns conceitos utilizados para realizar esta caracterização:
Outsourcing e Insourcing (formas de relacionamento entre empresas);
Inshore e Offshore (distribuições geográficas).
Outsourcing: Também conhecido como terceirização é a contratação de uma empresa para realizar um serviço.
É encontrado no momento em que uma empresa designa uma tarefa a ser realizada por uma empresa contratada.
Alguns autores defendem que esta é a forma mais fácil e rápida de implementação do DDS.
Insourcing: Conceito que surgiu em oposição ao outsorcing.
Este conceito é caracterizado quando as empresas criam os seus próprios centros de desenvolvimento.
De entre os motivos que levam a utilização do insourcing está o maior controle sobre os negócios da empresa, a maior flexibilidade e o menor custo num longo prazo.
Este modelo é considerado o que possui maior complexidade e que demanda mais tempo para implementação.
Offshore: Consiste em enviar serviços ou projetos para uma companhia localizada num país diferente da localização da matriz.
Pode ser uma empresa contratada ou até mesmo uma subsidiária da matriz.
Países componentes do grupo econômico BRIC, estão cada vez mais tornado- se uma alternativa atraente para este tipo de serviço, pois apresentam baixo custo de produção quando comparados com Estados Unidos e Europa.
A motivação para a utilização deste mode elo está na a redução de custos s, capacida ade de am mpliar e redu uzir a equip pe conform ma dema anda e o ac cesso a pr rofissionais s com habilidades espe ecíficas.
Esta a forma de e distribuição é mais indicada para projetos que poss suem plan no de projeto bem definid do e com m requisit tos de sistemas completamente e entendid de os[ AUD07 Onshore e:
Ocorre quando a matriz e o cliente es stão localizados no mesmo país.
Duas situações distintas podem ocorrer neste modelo.
Todo envolvimen nto é realizado na empresa contratada a num local fisic camente dese distin nto da em mpresa contratante, o que ca aracteriza o offsite.
Outra situ uação é quan ndo o dese envolvimen nto é realiz zado fisica amente no mesmo local onde o cliente está, e assim caracteriza ando o ons site[ PRI09 A Figura a 2 mostra à combinação dos s modelos de negóc cio mais ad dotados as em rela ação ao mo odelo de tr rabalho en ntre as em mpresas e as a suas por as empresa ribuições geográficas s.
A Figur ra 2 nos remete a quatro prin ncipais mo odelos de desenvolv vimento distr ribuído, os quais são caracteriz zados a seg guir:
Onshore e insourcin ng:
Este é o modelo mais sim mples e conhecido.
Ocorre quan ndo uma demanda interna da a empresa a, onde a partir de à necessidade da cons strução de um softwa are, um de epartamen nto dentro de a própria a empresa, ou até mesmo uma subsidiária é respons sável por o seu desen nvolviment to.
Como temos mo Onshore e, vale de estacar que e este dep partamento o ou subsidiária dev ve estar term localizado geo ograficamente no mes smo país.
Onshore outsorcing: É um modelo semelhante ao onshore insourcing, a principal diferença é que ao invés de um departamento interno da empresa ou uma subsidiária desenvolver o projeto, neste modelo, o desenvolvimento é realizado por uma empresa terceirizada.
Como, novamente, temos o termo onshore, deve ficar claro que a companhia que desenvolverá o projeto deve estar localizada fisicamente no mesmo país que a companhia contratante.
Offshore insourcing:
Este modelo implica na criação de um centro de desenvolvimento da própria empresa.
Devido a o uso do termo offshore, está implícito que esta subsidiária criada deve estar obrigatoriamente num país distinto da matriz.
Esta subsidiaria é responsável por executar serviços de desenvolvimento de software para a matriz (insourcing).
Offshore outsorcing:
O termo outsorcing nos leva a definir que uma empresa terceira será contratada e offshore remete a diferente localização geográfica da contratante.
Então, este modelo representa a contratação de uma empresa terceira, localizada num país diferente para prover serviços de desenvolvimento de software.
O DDS apresenta muitos fatores motivadores que levam as empresas a utilizarem cada vez mais este conceito em seus negócios.
A seguir são apresentados alguns destes fatores.
Optou- se por apresentar as vantagens mais citadas por diferentes autores. --
Redução de custos:
As organizações procuram alternativas para que o custo de produção seja cada vez menor.
De esta maneira, elas contratam mão de obra de outro país ou localidade onde o custo de produção é mais baixo e assim conseguem reduzir custos; --
Ganho de proximidade com o cliente:
Como a demanda de software cresce em diversos países, uma empresa que esteja expandindo seus negócios para uma nova região poderia iniciar uma operação de DDS nesta localidade e assim, estaria se aproximando dos seus clientes. --
Redução do tempo de projeto:
Também chamado de time- to-- market, incluir um produto no mercado antes do concorrente pode ser vital para o sucesso de uma empresa.
Sendo assim, com mais recursos trabalhando nos projetos, o tempo de desenvolvimento pode ser reduzido.
Ainda é possível citar a vantagem que é alcançada através da diferença de fuso horário entre os diferentes centros de desenvolvimento de uma empresa.
Esta diferença torna possível a aplicação da estratégia de desenvolvimento de software Followthe-Sun (FTS), onde a qualquer momento do dia haverá uma equipe trabalhando na construção do software. --
Recursos especializados e globais[ DAM06, PRI08, AUD07, MAR09]:
Com o DDS é possível obter a disponibilidade da mão de obra tão especializada quanto em projetos tradicionais, porém, com a vantagem de manter o baixo custo.
Apesar de todas as vantagens que o DDS disponibiliza para as organizações, o processo de desenvolvimento de software continua sendo uma atividade complexa.
Utilizando o DDS, adiciona- se ao processo inúmeros problemas, como a distância física, diferenças de fusos horários e diferenças culturais, os quais tornam este tipo de projeto extremamente complexo de ser gerenciado.
Portanto, diversas dificuldades são adicionadas ao processo de desenvolvimento de software, e essas novas adversidades devem ser conhecidas e gerenciadas para alcançar o sucesso no DDS.
Segundo alguns autores, as adversidades encontradas no DDS podem ser divididas em algumas categorias, as quais afetam determinadas áreas do processo.
Abaixo estão listadas algumas das dificuldades encontradas no DDS mais citadas por diferentes autores:
Desafios relacionados à Projetos também identificados como problemas técnicos, contemplam dificuldades relacionadas à forma como o projeto será desenvolvido, incluindo o uso de ferramentas e métodos.
Dizem respeito ainda às adversidades relacionadas com a gerência de requisitos, integração, gerência de configuração, dificuldades no acompanhamento do projeto e na utilização de ferramentas.
Exemplos destas adversidades são: --
Arquitetura de Software:
Um dos fatores decisivos para o sucesso de um projeto de DDS é a escolha da arquitetura de software (As).
Uma AS apropriada para este tipo de projeto deve ser uma arquitetura modular, pois desta forma é possível alocar tarefas complexas de forma distribuída. --
Processos de desenvolvimento:
A utilização de um processo de desenvolvimento único no ambiente DDS é fundamental.
Com a distribuição de tarefas, a falta de sincronização pode tornar- se um fator decisivo.
Para contornar este problema, a utilização de uma metodologia de desenvolvimento de software impõe rigor à equipe.
Em este sentido, é possível verificar que cada vez mais companhias buscam excelência na qualidade do desenvolvimento de software.
Para comprovar esta busca por a melhoria de processos, submetem- se a diversas avaliações tais como, Iso e -- Telecomunicações:
A coordenação entre equipes distribuídas envolve alto custo.
Em este sentido, é fundamental a existência de uma boa infraestrutura de comunicação.
É essencial a existência de conexões confiáveis e de alta velocidade para que todas as formas de comunicações possam ser utilizadas.
Atualmente a maior parte das localidades já possui esta infraestrutura.
A segurança nesta comunicação também é um fator importante.
Hoje em dia, existe grande diversidade de opções tecnológicas que garantem comunicações seguras.
Ultimamente tem crescido a opção por o uso de VPN (do Inglês, virtual private network) devido a o baixo custo, confiabilidade e alta disponibilidade. --
Gerência de configuração:
O gerenciamento de configuração de software também apresenta desafios.
O controle das modificações dos artefatos em localidades distintas, juntamente com o gerenciamento dos processos de desenvolvimento do sistema pode ser complexo.
Para diminuir esta dificuldade é recomendada a utilização de um repositório central, para que o controle seja realizado de forma única. --
Gerenciamento de projetos:
De forma a diminuir os impactos inerentes ao DDS, o gerenciamento de projeto deve sofrer adaptações em relação a o modelo tradicional utilizados em times co-localizados.
É recomendada a utilização de técnicas mais formais de gerenciamento.
Desafios relacionados à Pessoas, também identificado como problemas sociais dizem respeito aos problemas que afetam diretamente os recursos envolvidos no projeto.
Alguns exemplos são -- Confiança:
Sendo o processo de desenvolvimento de software uma tarefa que geralmente depende da cooperação de vários membros dentro de a equipe, a confiança torna- se fundamental.
Esta relação é essencial para o bom funcionamento da equipe, resultando em diversos benefícios, como melhora no desempenho, redução de custo e maior sociabilidade entre os membros da equipe.
Algumas formas de interação podem facilitar o aumento da confiança entre os elementos dos times distribuídos, de entre elas, podemos citar:
Reuniões de kick-off e encontros em determinados milestones do projeto.
O gráfico da Figura 3 demonstra como o nível de confiança tende a cair com o passar tempo.
Por esta razão, torna- se importante encontros no decorrer de o projeto. --
Conflitos: Como em qualquer projeto de desenvolvimento de software, conflitos podem acontecer.
Em alguns casos, eles podem ser benéficos para o projeto e podem ser resolvidos no próprio processo de desenvolvimento.
Porém, podem acontecer problemas maiores, o que poderia acarretar na perda da produtividade.
Em este caso, é interessante que seja definido a figura de um líder no início do projeto.
Este teria o papel de sanar os conflitos, tomando a decisão que julgar mais adequada.
Deve ser a autoridade central do projeto. --
Diferenças culturais:
Diferenças culturais fazem parte do cotidiano no DDS.
Com equipes distribuídas ao redor de o globo, os problemas relacionados à cultura emergem rapidamente.
Diferentes culturas fazem com que pessoas pensem, comuniquemse e agem de formas distintas.
Em um país, algo que possa ser trivial e corriqueiro, em outro local pode ser algo completamente incomum.
Em este sentido, é recomendado que as equipes compreendam cada cultura e se adéquem as suas expectativas em relação as diferenças existentes.
Algumas companhias utilizam o conceito de liaison, que consiste em ter um membro da equipe que age como uma ponte entre culturas diferentes[ AUD07, HER99, HOL06, LAN08, LIN07].
Normalmente esta pessoa já conviveu com essa cultura e por isso pode fazer este papel.
Por exemplo, um brasileiro trabalhando nos Estados Unidos auxiliando o lado brasileiro da equipe distribuída a compreender comportamentos da equipe americana. --
Liderança: Questões relacionadas à liderança são tratadas de forma diferente dependendo da cultura.
Algumas culturas tratam a liderança com menos rigor do que em outras, ou seja, encorajam a participação do time na tomada de decisões.
Enquanto que outras culturas utilizam uma estrutura mais hierárquica e tomam as decisões de maneira autônoma, sem permitir que seus comandados expressem suas opiniões.
Quanto a os problemas relacionados à Organização[ PRI09, HER01, PIL06, KNO07], mostram dificuldades que afetam as definições estratégicas de processos e métodos de gestão de uma organização.
Alguns exemplos são: --
Legislação: Algumas questões importantes dizem respeito às diferenças legais entre os locais envolvidos (principalmente em casos de distribuição global).
Essas diferenças implicam em maior complexidade no estabelecimento de contratos, bem como a necessidade de cautela com questões de sigilo e propriedade intelectual. --
Gerenciamento de portfólio de projeto:
Este tipo de gerenciamento tem surgido como um importante aliado no gerenciamento de projetos.
O principal objetivo deste tipo de gerenciamento não é executar projetos de desenvolvimento de software corretamente.
Seu principal objetivo é realizar os projetos corretos, nos momentos adequados, baseado nas estratégias da empresa.
Os desafios desta área estão em determinar, através de diversas análises, quais os projetos de DDS serão desenvolvidos, definir como os projetos serão realizados e para quais localidades será realizada a distribuição dos mesmos. --
Modelos de negócio:
Conforme pode ser visto na Figura 2, as organizações podem optar por diversos modelos de negócio.
Não existe somente um modelo correto, mas existe o modelo mais adequado ao problema a ser resolvido.
Para tomar a decisão sobre qual modelo será utilizado, as empresas devem realizar uma análise, identificando suas reais necessidades com a utilização do DDS e quais os tipos de projetos que pretendem distribuir geograficamente.
A prática demonstra que um bom planejamento tem determinado o sucesso no modelo escolhido. --
Diferentes fusos horários:
As diferenças de fusos horários podem afetar os projetos de DDS de diferentes formas.
Equipes separadas por uma pequena diferença de horário podem passar a maior parte do dia trabalhando ao mesmo tempo.
Em este modo, a comunicação fica mais fácil, pois é possível usar a comunicação síncrona, como ferramentas de mensagens instantâneas, ligações telefônicas, vídeo conferências, etc..
Como exemplo, podemos citar uma equipe localizada na cidade de Nova Iorque e outra em São Paulo.
Para este caso a diferença seria de apenas uma hora na maior parte do ano.
Os problemas relacionados ao fuso horário começam a se tornar mais evidentes na medida em que a diferença de horário aumenta.
Por exemplo, quando essa diferença atinge algo em torno de cinco horas, a possibilidade de trabalhar juntos na maior parte do tempo já não é mais válida.
Então, para este caso, a comunicação síncrona tende a diminuir e a comunicação assíncrona aumenta.
Como por exemplo, pode- se citar uma equipe localizada em Nova Iorque e outra em Londres.
Para este caso a diferença seria de cinco horas na maior parte do ano.
Finalmente, tem- se o caso em que as equipes distribuídas não trabalham no mesmo horário.
Em este caso, quando uma equipe está terminando o seu dia de trabalho a outra está começando.
Portanto, além de a falta de comunicação síncrona, torna- se vital que a comunicação assíncrona seja realizada de forma clara e efetiva.
Qualquer dependência de uma resposta de algum membro do outro time pode demorar no mínimo um dia.
Com esta diferença de fuso horário, alguns autores defendem que seja possível utilizar a estratégia Follow-the-Sun, ou seja, desenvolvimento 24 horas por dia, sete dias por semana.
Para este exemplo, pode- se citar uma equipe localizada em São Paulo e outra em Tóquio, onde a diferença será de doze horas na maior parte do ano.
Nota- se que os problemas relacionados ao fuso horário tendem a ficar mais evidentes na medida em que as diferenças de horário aumentam.
Para que esta diferença possa ser utilizada como uma vantagem, alguns autores defendem a utilização da estratégia FTS.
Porém, devido as suas dificuldades, atualmente este conceito é pouco explorado na indústria.
Devido a os desafios impostos por o DDS relacionado às diferenças de fusos horários, surge o conceito chamado de desenvolvimento Follow-the-Sun (FTS).
O desenvolvimento FTS é um subconjunto do desenvolvimento global de software, o qual está principalmente focado na diminuição do tempo de desenvolvimento de um projeto.
O FTS utiliza a diferença de fuso horário entre as equipes distribuídas como uma vantagem[ CAR09, HOL06, LIN07, SET07, SOL10, KNO07, TRE06] para o desenvolvimento do projeto durante as 24 horas do dia.
Porém, devido a o fato do FTS ser uma área nova de estudo na engenharia de software, pouco sobre esta temática foi publicado.
Conforme o trabalho, casos de sucesso na indústria utilizando o FTS ainda são escassos.
Em consonância a esta afirmação, o trabalho apresentado com Carmel et al.
Afirma que não há casos de sucesso na indústria.
Esta forma de trabalho, em outros ramos da indústria não é uma novidade.
Dependendo do tipo de produto a ser criado, existe a necessidade de se trabalhar num único local, durante as 24 horas do dia, implicando em trabalhos fora de o horário convencional.
Um exemplo é a indústria automobilística, onde uma equipe termina o seu turno e a próxima assume logo após, para iniciar a sua jornada, mantendo a produção 24 horas por dia, porém, no mesmo local.
Este fato poderia afetar a qualidade do produto, pois pessoas ao redor de o mundo estão acostumadas a trabalhar durante o dia e descansar durante a noite[ CAR09, Em a indústria do desenvolvimento de software, a primeira tentativa documentada do uso do desenvolvimento FTS foi protagonizada por a IBM.
Em 1997, a IBM decidiu desenvolver um projeto utilizando o desenvolvimento FTS.
Para isto, criou cinco equipes distribuídas em cinco centros de desenvolvimento distintos em cinco países diferentes.
Durante o projeto, muitas dificuldades de coordenação foram encontradas, principalmente durante as transferências diárias de trabalho.
Portanto, como o FTS não estava funcionando como planejado, não trazendo o ganho esperado por os gestores, os responsáveis por o projeto desistiram de utilizar o FTS para acelerar o processo de desenvolvimento, mantendo apenas o desenvolvimento global de software.
Para melhor entender do desenvolvimento FTS, nas próximas seções este tema será abordado em maior profundidade.
Para isto, na seção 2.2.1 serão mostrados os conceitos encontrados na literatura, na seção 2.2.2 será exposta uma breve descrição sobre os estudos publicados relacionados à estratégia FTS.
Devido a o fato do FTS ser um assunto recente na literatura e na indústria do desenvolvimento de software, existem poucos trabalhos publicados neste campo de pesquisa.
Em este sentido, é possível observar a existência de diversas formas de definir o desenvolvimento FTS, também chamado como desenvolvimento 24-h oras, desenvolvimento round- the-- clock, desenvolvimento around- the-- clock e software shift work.
Diversos autores possuem suas próprias definições para este tema, sendo assim, na literatura desta área, não há um consenso na forma de definir o desenvolvimento FTS.
A seguir são apresentadas definições de diferentes autores e ao final desta seção, é apresentada uma reflexão sobre estas definições, com o objetivo de oferecer uma definição onde sintetizaremos as principais ideias encontradas na literatura.
Segundo Visser, o desenvolvimento FTS pode ser determinado ao ter equipes de desenvolvimento de software distribuídas por múltiplos fusos horários, onde ao final do dia de trabalho, uma equipe deve entregar as informações relevantes do trabalho realizado até o momento, juntamente com o código fonte do produto para a próxima equipe, a qual está iniciando a sua jornada.
O trabalho deve ser continuado do ponto onde a equipe anterior parou.
Desta forma, o projeto estará sendo desenvolvido 24 horas por dia e não apenas durante oito horas, como normalmente acontece.
Outra forma de identificar esta maneira de desenvolver software é apresentada por Gorton e Motwani, onde é proposta uma nova denominação:
Software shift work.
Os autores mostram que a indústria tem a necessidade de criar seus produtos num tempo cada vez menor, porém, dependendo do tipo de produto a ser criado, existe a necessidade de trabalhar num único local, durante as 24 horas do dia (implicando no desenvolvimento de tarefas fora de o horário convencional de trabalho), como exemplo, o autor cita a indústria automobilística.
Porém, a criação de software difere radicalmente, pois o produto final é uma coleção de arquivos binários, documentação, código-fonte e executáveis, onde utilizando redes modernas e rápidas de comunicação de dados como as que existem atualmente na grande parte dos países onde o desenvolvimento global de software é utilizado, estes artefatos podem rapidamente ser transferidos para qualquer lugar do mundo.
Portanto, o desenvolvimento 24 horas de software pode ser alcançado apenas utilizando a diferença de fuso horário entre os locais onde os times estão alocados.
Cada time trabalha no seu horário convencional e, ao final do seu turno (um dia de trabalho), o próximo time, o qual está iniciando o seu turno assume o trabalho de onde a equipe anterior parou.
Gupta, Mattarelli, Seshasai Broschak desenvolvimento FTS pode ser estendido para diferentes tarefas, além de o desenvolvimento.
Os autores mostram o conceito de fábrica de conhecimento, onde as tarefas a serem desenvolvidas num projeto podem ser voltadas ao conhecimento, o qual é passado entre os times globalmente distribuídos ao final de cada dia.
Para exemplificar este conceito de desenvolvimento contínuo durante 24 horas por dia, é apresentado o ciclo de testes de um software, onde o conhecimento é o próprio software em desenvolvimento, e o conhecimento está onde o software atende os requisitos de forma satisfatória ou não.
Este conhecimento é passado entre os times de desenvolvimento e de testes, os quais estão distribuídos em locais distintos.
Desta forma, a fase de testes pode ser finalizada de forma mais rápida, o que segundo os autores, é um dos principais benefícios ao distribuir equipes de desenvolvimento em fusos horários distintos e utilizar o desenvolvimento FTS.
Treinen e Miller-Frost definem o FTS de uma forma mais sucinta.
Para estes autores, a diferença de fuso horário deve ser vista como uma vantagem para assim, distribuir equipes com o objetivo de criar um ambiente de desenvolvimento de software onde as equipes trabalham apenas durante as suas horas normais de trabalho, e ao final do dia, apenas redistribuem as suas tarefas ao time que está iniciando a sua jornada, criando assim, efetivamente o desenvolvimento 24 horas.
Carmel, Dubinsky e Espinosa, propõem uma definição para o follow-the-sun aonde quatro ideias básicas devem ser seguidas:
Equipes de desenvolvimento devem estar localizadas a diversos fusoshorário de diferença;
Ii. Um dos principais objetivos é reduzir o tempo de desenvolvimento/ time-- tomarket;
Iii. A cada momento existe somente uma equipe que possui a posse do produto;
A transferência de tarefas deve ser realizada diariamente, onde esta é definida por um check-in de uma unidade de trabalho de a qual a próxima equipe depende para dar continuidade ao trabalho.
Após apresentar estas quatro ideias básicas, o trabalho de apresenta a seguinte caracterização para o desenvolvimento FTS:
Um tipo de fluxo de trabalho de conhecimento global, criado com o objetivo de reduzir a duração de um projeto, onde o produto é de propriedade de um centro de desenvolvimento até ser entregue ao próximo.
Esta entrega deve ser diária, e a próxima equipe deve estar localizada diversos fusos horários a frente para dar continuidade ao trabalho.
Para cada critério (colunas), procurou- se saber se a definição apresentada, de alguma forma, indicou importância para este fator.
Os fatores utilizados para a análise comparativa apresentada na Tabela 1 surgiram de uma avaliação prévia dos conceitos apresentados por os autores.
Procurou- se identificar os principais fatores de cada conceito encontrado na literatura, os quais poderiam ser comparados entre as definições.
Como podemos perceber, não há uma convergência para apenas uma definição para o desenvolvimento FTS.
Podemos identificar que apenas um autor define o FTS somente para a codificação, enquanto que os autores restantes defendem a utilização para qualquer tarefa dentro de o projeto.
Outra característica nas definições está relacionada ao objetivo principal da utilização do FTS.
Apesar de expresso de maneira distinta por os autores, podemos perceber que o objetivo principal do FTS é a redução do tempo necessário para desenvolver um projeto.
A diferença mínima necessária de fusos horários entre as equipes distribuídas foi pouco citada.
Também existem poucos trabalhos que consideram relevante a importância de ter equipes distintas trabalhando no seu horário habitual, evitando horas extras durante a noite.
Este fator poderia ser mais considerado, pois a maior parte das pessoas ao redor de o mundo está acostumada a trabalhar durante o dia e descansar durante a noite.
Portanto, após esta análise comparativa das diferentes definições sugeridas por os autores, foram identificados pontos importantes em todas elas.
Assim, através destas informações coletadas, propõe- se uma definição para o desenvolvimento FTS, a qual sintetiza as principais ideias e pode ser descrita da seguinte forma:
O Follow-the-Sun (FTS) é um tipo de desenvolvimento global de software onde o principal objetivo é a diminuição do time- to-- market, acelerando a construção do produto final desde a concepção até a sua distribuição.
Este ambiente opera com equipes distribuídas em fusos horários e países distintos, onde cada equipe detém o trabalho por determinado período, até que o mesmo seja transmitido para a próxima equipe que inicia a sua jornada.
A transferência pode ser para qualquer tipo de tarefa relacionada com o desenvolvimento do projeto de software.
Esta transferência deve acontecer diariamente e de forma padronizada.
Durante o desenvolvimento desta pesquisa, esta caracterização foi tema de A literatura apresenta poucos trabalhos relacionados ao desenvolvimento FTS.
Após uma extensa pesquisa, encontrou- se um número reduzido de artig gos que re ealizam es studos teó óricos nest ta área.
Esta seção o apresenta uma compilação do os principa ais estudo os relacion nados à esta temá ática.
Os e estudos esentados versam sobre dife erentes óticas para avaliar as a vantagens da apre utiliz zação do desenvolv vimento FTS em comparaçã ão à form ma tradicio onal de dese envolvimen nto de sof ftware.
Logo após, na seção 2.3, são apresenta ados os traba alhos relac cionados ao a tema desta pesqui isa.
Apresen ntado por Setamanit, Wakeland d e Raffo[ S SET07], o estudo mo ostra as vant tagens ao utilizar o FTS em rel lação a um m projeto re ealizado num únic com o local.
O ob bjetivo é id dentificar quando há uma vanta agem ao ut tilizar o FT Ts, e quais s são os requ uisitos para a alcançar r uma van ntagem qu ue seja int teressante para um projeto dese envolvido desta forma.
O estud do inicia descrevend do a forma a como as s equipes devem realizar o dese envolvimen nto do proj jeto.
Para esta fase, duas equi ipes distint tas foram criadas.
Uma a de elas opera em m apenas s uma localidade, sem fa azer o uso do dese envolvimen nto FTS.
A outra eq quipe é div vidida em duas loca alidades com o om fuso horá ário distinto o, e faz o uso u do des senvolvime ento FTS.
A Figura 4 ilustra o formato das equipes.
Em este primeiro cenário, após realizar 30 3 testes para cada configuraç ção (coF os au utores identificaram que a utilização do desenvolv vimento localizado e FTS), u o ganho esperado.
FTS não gerou empo nece essário pa ara o dese envolvimen nto do projeto, foi no otado tamb bém um no te aumento de 70% no esforço, e a qualidade foi pior, pois a quantidade de defeitos foi maior que o dobro.
Após adquirir estes dados iniciais sobre o desempenho das equipes, os autores buscaram identificar fatores que teriam um forte impacto para a melhoria destas medidas.
Estes fatores, segundo os autores, podem direcionar os projetos para a utilização de práticas onde os benefícios podem ser alcançados com maior facilidade.
Após a identificação destes fatores, os autores mostram que os principais resultados foram: --
Diminuir o esforço:
Aumentando o tempo de trabalho simultâneo (também conhecido como overlap) entre equipes distribuídas resulta num menor esforço necessário.
Como na primeira configuração, as equipes não tinham a possibilidade de trabalhar ao mesmo tempo, a comunicação síncrona não existia.
A o introduzir a possibilidade deste tipo de comunicação, foi possível notar um aumento na produtividade.
Entre outras vantagens, este tipo de comunicação melhora a confiança entre os membros da equipe, resultando, assim na diminuição do esforço. --
Diminuir duração do projeto:
Aumentar o overlap entre as equipes distribuídas pode aumentar duração do projeto, pois tempo de desenvolvimento diário diminui.
Porém, ao notar que, além de ter um período maior de trabalho simultâneo entre equipes distribuídas, outros fatores já citados (produtividade, confiança), ajudam a diminuir o esforço, resultando assim num menor tempo de desenvolvimento. --
Diminuição do número de defeitos:
Tendo um aumento na efetividade da comunicação síncrona entre as equipes através do trabalho simultâneo, diminuíram os problemas de entendimento das comunicações assíncronas.
Isto resultou num número menor de defeitos encontrados.
Após identificar os fatores que poderiam melhorar o desempenho do projeto, realizou- se o experimento novamente, porém, desta vez com um overlap de horas de trabalho entre as equipes distribuídas.
O resultado encontrado apresentou uma pequena melhora em relação a a primeira execução, porém, o desempenho do FTS ainda mostrou- se pior que o desenvolvimento num único local.
Em a tentativa de alcançar uma melhora significativa, os autores incluíram mais um centro de desenvolvimento, obtendo assim, a distribuição em três locais distintos para o desenvolvimento.
Em este modelo, o tempo de duração foi menor.
Entretanto o esforço foi significativamente maior (45,4%).
Porém, segundo os autores, este fator não se mostra relevante, devido a o fato dos centros de desenvolvimento distribuídos normalmente estarem em países que possuem baixo custo.
A qualidade continuou inferior neste modelo, devido a a dificuldade de comunicação coordenação entre os centros de desenvolvimento.
Finalmente, os autores afirmam que o FTS pode ser uma boa estratégia se de entre as necessidades do projeto está diminuição do tempo de desenvolvimento.
Porém, salientam que se esta decisão for tomada, deve- se utilizar a abordagem com no mínimo três centros distribuídos de forma a obter o desenvolvimento 24 horas por dia, e tendo um período de trabalho simultâneo para comunicação síncrona entre as equipes distribuídas.
O recente estudo apresentado por Carmel, Dubinsky e Espinosa relata um quasi-experimento comparando duas formas distintas de desenvolver um projeto de software.
O objetivo deste estudo foi medir o ganho no tempo de desenvolvimento de um projeto de software, o qual, para este tipo de projeto, teoricamente deveria ser de 50%.
O experimento controlado inicia com a definição de duas equipes de desenvolvimento de software, uma de elas denominada controle (Com o), composta por 7 integrantes e a outra equipe, denominada de FTS, composta por 8 participantes.
As duas equipes deveriam implementar os mesmos requisitos de um sistema.
Todos os participantes do estudo eram estudantes de Ciência da Computação ou Engenharia Elétrica de uma grande universidade.
O tempo de desenvolvimento por recurso era o mesmo para ambos os times.
Definiu- se que o tempo de desenvolvimento do projeto seria 5 semanas.
Porém, como a equipe FTS faria o uso do desenvolvimento FTS, teoricamente, o tempo necessário para o pr rojeto deve eria ser de e duas semanas e meia.
A Figura 5 ilu ustra o tem mpo de proje eto definido o para cad da equipe.
Para a equipe Com o O, nenhum ma restriçã ão foi impo osta, ou se eja, o softw ware foi dese envolvido da d forma tradicional, com todo os os recursos da eq quipe traba alhando no mesmo loca al.
Para a equipe FT Ts, a prime eira etapa foi f dividir a equipe em m duas, SubTeamA, com o omposta por p 3 recursos, e Su ubTeamB, integrada a por 5 re ecursos.
Cada horá ários difere entes, para a simular a diferenç ça de fuso o horário:
SubTeamA A entre 30 e 11:00 0 e SubTe eamB re 11:30 e 21:00, mantendo 30 minuto os para alguma hora extra, quan ndo neces ssário.
Para a garantir que nenhu uma comunicação síncrona entre e as equip pes SubTe eamA e SubTeamB B ocorress sem, meca anismos gens SMS S, comunic cador inst tantâneo, e qualquer outro tipo de como mensag f proibido foi o.
Para com o ontrolar os horários de d trabalho comunicação síncrona o, cada a das duas s equipes do FTS só poderia a alterar códigos no repositó ório nos uma horá ários deter rminados.
Este con ntrole foi realizado ca por o de forma automátic siste ema de rep positório de e código ut tilizado no projeto.
A o final do estudo o, os result tados apre esentados por os auto ores ficaram m muito aqué ém do esp perado no início do estudo.
Houve um ganho de e apenas 10% no temp po de dura ação do projeto, ao invés de os s 50% que teoricam mente deve eria ser alcançado.
An nalisando as estatís sticas gera adas por o sistema de d reposit tório de códig go utilizad do, uma com o onstatação o foi impor rtante para a justificar a pouca redução do t tempo de desenvol lvimento deste experimento.
A equipe e FTS rea almente term minou o para o ojeto num tempo menor que a equipe Com o O. Porém, devido a falta de uma a diretriz so obre o momento de parar a com o odificação, mesmo te endo terminado a codif ficação da as funciona alidades pr ropostas, continuouc se apenas s aprimora ando- as.
Foi p possível id dentificar que q na últim ma semana do proje eto a equip pe FTS fez z check-ins apenas sobre arquivos que já estavam no repositório, ou seja, atualizaram arquivos, melhorando funcionalidades prontas. Enquanto
isso, a equipe Com o realizava a criação das funcionalidades.
Cabe lembrar, que segundo os autores, ambas as equipes concluíram a codificação dos requisitos de forma satisfatória.
Os autores argumentam que apesar de terem identificado um ganho de apenas 10%, este número poderia ser maior, se tivessem definido o momento para terminar a fase de codificação para a equipe FTS.
Este ponto foi identificado como uma limitação do estudo.
Em o estudo apresentado por Solingen e Valkema, os autores apresentaram algumas hipóteses e através de um experimento controlado, apontaram a validade ou não das hipóteses propostas.
O estudo foca na investigação do impacto do aumento do número de centros distribuídos na velocidade de desenvolvimento de projetos que utilizam o FTS.
Procura- se saber qual o número ideal de equipes para se trabalhar num projeto FTS.
O experimento inicia definindo a configuração das equipes, as quais foram definidas da seguinte forma:
Cada execução do experimento seria realizada utilizando um número de centros de desenvolvimento diferente entre 2 e 4.
Estes centros foram assim configurados:
Sempre existe um centro responsável por prover os requisitos e os feedbacks do trabalho realizado, então, na configuração com duas equipes, existirá uma equipe de desenvolvimento e uma de requisitos, para três equipes, da mesma forma, haverá uma de requisitos enquanto as outras duas para o desenvolvimento e assim sucessivamente.
Devido a o fato de ser um experimento controlado, as diferenças de fusos horários foram simuladas, criando horários de trabalho pré-definidos entre as diferentes equipes.
Cada ciclo diário consiste de 2 a 4 shifts trabalhados (um para cada equipe distinta), dependendo do número de centros adotados.
Os dias de trabalhos são contínuos, quando um dia termina (para um determinado centro) outro está começando, simulando assim fusos horários distintos.
A o final de um dia, o trabalho é repassado ao próximo time que está iniciando a sua jornada.
O experimento foi realizado com estudantes de Ciência da Computação.
A cada dia, três execuções foram realizadas, utilizando 4, 3 e 2 centros de desenvolvimentos.
A o final de cada execução, retirou- se uma equipe aleatoriamente.
A o final de cada dia, a primeira equipe (responsável por requisitos e feedbacks) relatava para o primeiro time de desenvolvimento as informações necessárias para iniciar o próximo ciclo.
As tarefas a serem realizados eram extremamente simples, sendo possível assim, simular um dia de trabalho em apenas quatro minutos.
Com esta configuração, segundo os autores, foi possível analisar o efeito do número de centros distribuídos num projeto FTS relacionado com o tempo de desenvolvimento.
O estudo discute os resultados obtidos da seguinte forma:
Apresenta- se a hipótese, e a validade ou não da mesma.
A seguir estão relacionadas às hipóteses propostas por os autores, juntamente com o resultado obtido em relação a as mesmas. --
Quantidade de trabalho entregue:
Htotal: Total4\&gt; total3\&gt; total2 Com os dados coletados, foi possível identificar que a quantidade de trabalho entregue realmente aumenta à medida que a quantidade de centros de desenvolvimento aumenta, concluindo assim, favoravelmente a esta hipótese. --
Velocidade média de trabalho por centro:
Havgspd: Avgspd4 avgspd3 Os dados mostram que a adição de centros de desenvolvimento aumenta a velocidade de trabalho por volta de 20% na média por centro de desenvolvimento.
Portanto, concluindo assim favoravelmente a está hipótese. --
Exatidão do trabalho realizado: Haccur:
Accur4 accur3, nada se pôde afirmar sobre está hipótese. --
Percepção de velocidade: Hperspd:
Perspd4 perspd3 os dados obtidos, houve apenas uma diminuição desta percepção na configuração com 4 centros.
Portanto, segundo a conclusão dos autores, esta hipótese não foi confirmada. --
Percepção de exatidão do trabalho: Hperacc:
Peracc4 peracc3 2 centros, a percepção de exatidão mostra- se normal, porém, quando esta configuração possui mais de 2 centros distintos trabalhando, esta percepção reduz drasticamente.
Em esta situação, os participantes encontram mais dificuldade para medir a exatidão do trabalho em desenvolvimento entre todos os centros, confirmando assim a hipótese.
A o final do estudo, os autores discutem os resultados obtidos e mostram que, apesar de as dificuldades de coordenação comunicação que desenvolvimento FTS impõe, dependendo do que se espera de um projeto de software, a sua utilização pode ser benéfica.
A principal vantagem que o FTS pode alcançar, segundo os autores, está na diminuição do tempo de projeto, o que está em consonância com os outros estudos apresentados no capítulo 2.2.2.
Após a apresentação dos estudos analisados, a Tabela 2 mostra uma análise comparativa entre os diferentes trabalhos.
Para cada critério (colunas), procurou- se saber se o experimento relacionado, de alguma forma indicou importância para este fator.
Os fatores utilizados para a análise comparativa apresentada na Tabela 2 surgiram de uma avaliação prévia dos estudos apresentados.
Procurou- se identificar os principais fatores de cada estudo, os quais poderiam ser utilizados para critério de comparação entre os estudos.
A primeira constatação que podemos perceber em relação a os estudos apresentados está relacionada às métricas utilizadas.
Percebe- se que todos os estudos medem a diminuição do tempo de projeto através do uso do FTS.
E identificam esta métrica de uma maneira semelhante, comparando um projeto executado de forma tradicional, co-localizada num único centro, com um projeto executado de forma distribuída, utilizando o FTS.
Executa o experimento uma única vez, alcançando um resultado inferior ao esperado, enquanto, ao obter um resultado aquém de o esperado, investiga os problemas enfrentados e refaz o experimento, para tentar melhorar o ganho no tempo de projeto, alcançando um pequeno ganho.
Já faz o experimento utilizando diversas distribuições com 2, 3 e 4 equipes, buscando avaliar se há uma melhora no ganho do tempo de projeto ao adicionar novos times.
A métrica relacionada ao número de centros necessários para obter vantagem na utilização do FTS foi utilizada por e.
Estes estudos fazem uma comparação do ganho no tempo de desenvolvimento adicionando mais de dois centros de desenvolvimento, obtendo resultados satisfatórios.
Consequentemente, estes trabalhos sugerem um número mínimo de centros de desenvolvimento para aumentar as chances de sucesso na utilização do desenvolvimento FTS.
Para, a vantagem no tempo de desenvolvimento só é atingida quando existem, pelo menos, três centros distribuídos.
Enquanto que defende que o ganho aumenta conforme o número de centros distribuídos aumenta (este estudo utilizou distribuição entre dois e quatro centros para chegar a esta conclusão).
O resultado mais importante apresentado nos estudos avaliados está relacionado ao ganho que o FTS pode prover.
Percebemos que houve realmente um ganho em relação a o tempo de desenvolvimento em todos os trabalhos apresentados.
Porém, este ganho ficou muito aquém de o ganho teórico esperado por o desenvolvimento FTS.
Segundo, este ganho ficou em torno de 10%, já para, o ganho foi de 11,1%, porém, apenas quando um terceiro centro de desenvolvimento foi adicionado ao projeto, pois utilizando apenas dois, o tempo para desenvolver o projeto, foi 50% maior.
Mostra apenas que a quantidade de trabalho entregue é maior se aumentarmos o número de centros de desenvolvimento distribuídos, obtendo melhor resultado com quatro centros distribuídos (número máximo utilizado).
Portanto, segundo os resultados apresentados, o desenvolvimento FTS ainda não produz o ganho teórico esperado, principalmente devido as dificuldades impostas, porém pode- se obter algum ganho no tempo de projeto.
Percebe- se que todos os estudos indicam a utilização do desenvolvimento FTS.
Porém, devido a as dificuldades de coordenação, comunicação e sincronização de tarefas neste tipo de projeto, principalmente durante a transição de tarefas, a utilização desta forma de desenvolvimento deve ser utilizada, segundo os estudos, apenas quando há a necessidade de desenvolver o produto num tempo menor, ou seja, diminuir o time- to-- market.
As conclusões destes estudos vão ao encontro com a literatura desta área, a qual afirma que a principal vantagem do uso do desenvolvimento FTS está na diminuição do tempo de desenvolvimento de um projeto.
Como o objetivo deste trabalho é propor um processo de transferência de trabalho (hand-off) para a fase de desenvolvimento do ciclo de vida, buscou- se na literatura por trabalhos com este foco.
A literatura ainda carece de trabalhos relacionados à estratégia FTS.
As publicações que apresentam formas para a utilização da estratégia FTS ainda são escassas.
Entretanto, alguns trabalhos que versam com uma temática semelhante a este estudo, ou seja, formas para atenuar adversidades durante transferência de trabalho estão descritos a seguir.
O trabalho proposto por Fadel et al.,
mostra formas para acelerar o tempo de desenvolvimento de um projeto.
Para alcançar tal objetivo, os autores distribuíram equipes através de diferentes fusos horários, e fizeram o uso da estratégia FTS.
Criou- se um processo de transferência de trabalho de um site para outro.
Este processo consistiu em alocar trinta minutos (da equipe terminando o turno de trabalho e a que está começando) para preparar as informações a serem utilizadas durante o hand-off.
Em este momento de trabalho simultâneo, todos os artefatos criados são entregues, assim como qualquer informação relevante para dar continuidade ao trabalho.
Esta comunicação é realizada de forma síncrona, utilizando recursos de telefonia.
Logo após, a equipe que iniciou o dia de trabalho, realiza um brainstorm, onde o estado atual do trabalho é discutido.
Baseado no trabalho que ainda deve ser realizado, as tarefas são alocadas para todos os recursos dentro de a equipe.
Chegando ao final do dia, este processo é repetido.
Este ciclo encerra- se no momento em que os requisitos estão todos alcançados.
O trabalho publicado por Taweel et al.
Apresenta os resultados de um experimento para avaliar a viabilidade o uso de um processo sequencial e colaborativo de engenharia de software para ambientes distribuídos em diferentes fusos horários.
Em este experimento foi desenvolvida uma calculadora com funções simples.
O projeto foi dividido em 3 fases:
Set-up, onde foram apresentados todos os requisitos para todas as equipes, juntamente com a distribuição do trabalho e o prazo para conclusão;
Execução, onde ocorreu a implementação usando os times distribuídos;
Finalização, onde os dados do experimento foram coletados.
O processo colaborativo avaliado estava baseado no envio de e-mails entre as equipes com o status atual do projeto, contendo todas as informações relativas ao trabalho realizado.
O trabalho mostra que, apesar de tratar apenas de tarefas simples, os resultados demonstram a viabilidade deste tipo de processo.
O trabalho apresentado por Denny et al.
Apresenta o conceito de Composite Personae (CP).
Este conceito mostra como equipes distribuídas podem trabalhar como um único time virtual.
Para que isto aconteça, é importante ter uma equipe coesa, espalhada por diferentes fusos horários.
Desta forma, o trabalho pode ser passado de um site para outro, e o mesmo é continuado.
Todo o trabalho está baseado em hand-off, onde uma equipe termina o seu dia de trabalho e a outra inicia.
Porém, alguns problemas podem ocorrer nesta transferência.
Para tanto, este trabalho mostra uma forma simples de transição de trabalho.
Esta transição está baseada em reuniões de stand-up, oriundas do Scrum.
A o se aproximar do final de um dia de trabalho, os desenvolvedores devem adicionar os seus resultados no repositório de código, e preencher um formulário automatizado, chamado de ferramenta de hand-off.
Em este formulário deve- se responder às três perguntas básicas de uma reunião stand-up:
Após preencher estas informações, o trabalho é considerado entregue para a equipe seguinte.
O próximo site inicia o dia de trabalho coletando as informações disponibilizadas por o site anterior e definindo o que deve ser realizado, utilizando como principal referência, as respostas para as perguntas i, ii e iii.
Este trabalho destaca a importância de ter equipes equivalentes em todos os sites distribuídos.
Esta equivalência não está relacionada ao número de recursos em cada site, mas em capacidade de entrega e de solução de problemas.
Denny et al.
Apresentam um processo de transferência de conhecimento, criado especialmente para o uso do conceito de fábrica de conhecimento em ambientes distribuídos.
Este processo foi criado com base no Personal Software Process (PSP).
Este processo é desenvolvido para facilitar a transferência de conhecimento de uma equipe para outra ao final de cada dia (hand-off).
Esta pesquisa apresenta ainda algumas formas de facilitar o entendimento do trabalho entre as equipes distribuídas.
Uma destas formas é através da técnica de Test-Diven Development (TDD).
Segundo os autores, TDD indica a utilização de testes unitários automatizados para redução de defeitos e controle de qualidade.
Em esta técnica, os casos de teste são escritos de forma a validar se todos os requisitos estão implementados de forma correta.
Os casos de teste tornam- se um registro documentado da compreensão do requisito e da solução encontrada para atender o mesmo.
Após a apresentação dos trabalhos relacionados, a Tabela 3 expõe uma análise comparativa entre os mesmos.
Para cada critério (colunas), procurou- se saber se o trabalho relacionado, de alguma forma indicou importância para este fator.
Os fatores utilizados para a análise comparativa apresentada na Tabela 3 surgiram de uma análise prévia dos trabalhos apresentados.
Procurou- se identificar os principais fatores de cada estudo, os quais poderiam ser utilizados para critério de comparação entre os estudos e como base para o FTSProc.
Através da comparação apresentada na Tabela 3, podemos identificar que não há uma convergência para a forma como um processo deste tipo deve ser.
Entretanto, podemos identificar características que podem ser utilizadas para um processo que está voltado exclusivamente para a fase de desenvolvido.
O primeiro ponto que podemos identificar através da comparação apresentada na Tabela 3 é que o planejamento diário é um ponto importante, presente na maioria dos trabalhos.
Este fato é relevante, pois no início de cada dia, antes de iniciar um dia de trabalho uma equipe não sabe o ponto onde o trabalho parou.
Desta forma, o planejamento diário torna- se importante para continuar o trabalho do ponto em que parou.
Outro fator que mostra a importância do planejamento diário é que a maioria dos trabalhos faz a transferência de trabalho inacabado, ou seja, o trabalho continua do ponto em que parou por o próximo centro de desenvolvimento.
Apenas o trabalho apresentado por não faz esta transferência, pois as tarefas são realizadas de forma paralela, ou seja, cada centro de desenvolvimento trabalha numa funcionalidade distinta, sendo assim, não é necessária a transferência de trabalho inacabado.
Nenhum dos trabalhos relacionados aponta o uso de um processo numa fase específica do ciclo de desenvolvimento de software.
Entretanto, de acordo com, não é possível utilizar a estratégia FTS de uma única forma em todas as fases do ciclo de desenvolvimento de software.
Por esta razão, o processo proposto nesta pesquisa foca especificamente na fase de desenvolvimento.
A maior parte dos trabalhos relacionados aponta que a transferência está concluída no momento em que o check-in da unidade de trabalho é realizado, juntamente com as informações relevantes ao shift que está terminando.
Estas informações são passadas através de um formulário padronizado, e-mails ou telefone, no caso de comunicação síncrona entre as equipes.
Devido a o fato desta pesquisa estar focada em projetos distribuídos de forma global, para fazer o uso da diferença de fuso horário, a utilização de comunicação síncrona não pode ser utilizada, pois não há um período de trabalho simultâneo.
Desta forma, os trabalhos relacionados nos mostram que a utilização de um formulário padronizado, onde cada recurso sabe a informação que deve ser adicionada, pode facilitar o uso do processo.
Em este sentido, o trabalho proposto por mostra que um formulário de hand-off padronizado, utilizando as 3 questões das reuniões de stand-up (oriundas da metodologia Scrum) podem ser úteis, pois são simples, rápidas de serem preenchidas e contém todas as informações necessárias.
Finalmente, outra sugestão, proposta por o trabalho de mostra que a utilização de Test-driven (TDD) também pode ser efetiva neste tipo de processo, pois facilita no entendimento das funcionalidades e nas validações de suas implementações.
A principal diferença entre os trabalhos relacionados e o trabalho desenvolvido está no momento e na forma como a transferência de trabalho deve ser realizada.
O processo proposto está focado exclusivamente na fase de desenvolvimento do ciclo de vida de desenvolvimento do software, pois de acordo com, não é possível utilizar a estratégia FTS de uma única forma em todas as fases do ciclo de desenvolvimento de software.
Enquanto que os trabalhos relacionados não estão focados numa única fase.
Outra diferença importante é com o trabalho proposto por onde as tarefas que cada centro distribuído irá desenvolver são definidas a priori, ao invés de tratar o time inteiro como um único time virtual.
Desta forma, o centro de desenvolvimento que inicia o trabalho não continua o trabalho do ponto onde o centro anterior parou, mas apenas desenvolvem diferentes funcionalidades de forma paralela.
Após esta análise da base teórica, o capítulo 4 apresenta o processo criado, denominado FTSProc.
Uma pe esquisa do o tipo explo oratória de eve ser utilizada qua ando o ob bjetivo é exam minar um tema de pe esquisa po ouco estud dado ou qu ue não ten nha sido es studado sob uma mesma abordagem, anteriormente, na literat tura.
Apó ós um apro ofundamen nto da bas se teórica, descrito no capítulo 2, nota- se que ai inda há uma a escassez z de trabalhos abord dando esta a mesma temática sob a pers spectiva adot tada nesta a pesquis sa:
Um pr rocesso fo ocado esp pecificame ente na fa ase de dese envolvimen nto do So oftware De evelopmen nt Life Cyc cle (SDLC C).
Portant to, esta pesq quisa pode e ser classi ificada com mo explora atória.
A seguir, a seção o 3.1 apres senta o de esenho de e pesquisa utilizado durante este trabalho.
Logo após s, na seção 3.2 é ex xposto o pr rincipal mé étodo de pe esquisa zado, junta amente com m as razõe es para est ta escolha.
Para alc cançar os o objetivos desta pesq quisa, a Fig gura 6 apre esenta o desenho pesquisa de esenvolvid da no decorrer deste trabalho.
Os obje etivos das quatro etapas princ cipais que constituír ram este trabalho são descritas a seguir:
Estudo da base e teórica:
O objetivo desta etapa fo oi aprofun ndar os hecimentos s obtidos durante os trabalh hos de In ntrodução à Pesqui isa I e conh Introdução à Pesquisa II relacionados às duas temáticas principais desta pesquisa:
DDS e FTS.
Os resultados desta fase foram os insumos para a criação do processo.
Os resultados desta fase estão descritos no capítulo 2.
Processo preliminar:
Consistiu em criar um processo preliminar de transferência de tarefas, baseado nos dados oriundos do aprofundamento dos estudos da base teórica.
O processo criado foi chamado de FTSProc e está descrito no capítulo 4.
Experimento e ferramenta de apoio:
Esta fase foi responsável por a criação de uma ferramenta de apoio, a qual controla todo o processo proposto.
Após o desenvolvimento desta ferramenta, a mesma foi utilizada durante o experimento.
A especificação e os detalhes da implementação desta ferramenta de apoio estão descritos na seção 4.1.
Esta etapa também foi responsável por a realização de um experimento para avaliar os benefícios do processo preliminar criado e identificar pontos de melhorias para este processo.
Durante o planejamento e condução do experimento realizado, utilizou- se como guia os estudos de e, os quais estruturam experimentos nas seguintes etapas:
Definição, planejamento, operação, análise e interpretação dos resultados e apresentação.
Os detalhes sobre o desenvolvimento de cada uma destas etapas estão descritos no capítulo Processo proposto:
Baseado nos dados provenientes do experimento, nesta etapa seriam realizadas as melhorias necessárias, e uma versão final do processo de transferência de tarefas seria elaborada.
Entretanto, conforme exposto no capítulo 6, devido a os resultados obtidos no experimento não houve alterações no processo preliminar criado.
Esta pesquisa utilizou o experimento controlado como principal método de pesquisa, pois é crucial a avaliação desta nova proposta, sendo o experimento uma forma de realizar esta avaliação.
A principal ideia deste método de pesquisa é obter conclusões a partir de o teste de hipóteses, o qual estabelece uma relação de causa-efeito.
Antigamente, a investigação científica estava focada na observação do universo, sem que nada pudesse ser alterado.
Atualmente, uma das formas de investigação é baseada na experimentação, ou seja, na observação dos fenômenos provocados para fins de investigação e na medição das variáveis envolvidas no fenômeno.
Atualmente, na ES, experimentos são atividades caracterizadas por a manipulação de algumas variáveis e a observação de outras, em ambientes controlados.
Experimentos também envolvem controle, onde o pesquisador pode decidir que grupo de pessoas realizará cada atividade dentro de o experimento.
Isto difere de pesquisas observacionais, onde o pesquisador não tem controle sobre o grupo de pessoas.
Normalmente, experimentos são realizados em laboratório, pois permite alto grau de controle.
Um dos usos mais comuns de experimentos na ES é para testar teorias.
Visto que esta pesquisa visa investigar a aplicação de um novo processo de transferência de trabalho em ambientes distribuídos que utilizam a estratégia FTS e, devido a as características deste método, optou- se por a realização de um experimento.
Esta escolha deve- se ao fato deste método possibilitar a avaliação de novas propostas, permitir o controle do ambiente de execução e proporcionar a obtenção de conclusões a partir de uma hipótese.
Existem duas abordagens para realizar estudos empíricos:
Pesquisa quantitativa e pesquisa qualitativa.
Pesquisa quantitativa tem como objetivo obter números provenientes do objeto de estudo, como por exemplo, o percentual de aumento de produtividade no desenvolvimento de um software num ambiente distribuído que utiliza a estratégia FTS, ao fazer o uso de um novo processo de transferência de trabalho em comparação ao mesmo software sendo desenvolvido sem este processo.
Em esse caso, o percentual obtido fornece o que a pesquisa quantitativa se propõe a fazer, ou seja, fatos em forma de números para evidenciar o que antes era uma apenas uma ideia.
A pesquisa qualitativa não foca somente em números, mas também em explicar fatores de qualidade associados ao uso de alguma técnica, ferramenta ou processo.
Um exemplo para esta abordagem poderia ser demonstrar por que os desenvolvedores tem mais produtividade ao utilizar um processo de transferência de trabalho.
Em esse caso, sabe- se, a priori, que os desenvolvedores são mais produtivos utilizando o processo de transferência de trabalho.
Como resultado, a pesquisa qualitativa apresenta explicações em forma de texto, gráficos, imagens, Como a priori não havia evidências que a utilização do processo proposto resultaria num ganho de produtividade, o principal método de pesquisa utilizado foi o experimento com abordagem quantitativa.
Entretanto, devido a o número de participantes não permitir o uso de uma análise estatística, complementou- se o estudo com uma análise qualitativa para alcançar os resultados do experimento.
O capítulo 5 apresenta a estrutura utilizada durante a execução do processo experimental.
O aprofundamento da base teórica, juntamente com uma análise dos trabalhos relacionados, ambos apresentados no capítulo 2, serviram como insumos para a criação do processo de transferência de trabalho.
Este processo proposto visa atenuar os desafios de coordenação, sincronização e comunicação durante a transferência de trabalho na fase de desenvolvimento do ciclo de vida de software.
Em este sentido, os principais objetivos do processo são:
Os processos desta natureza ainda são insuficientes na literatura.
Entretanto, alguns trabalhos mostram que este tipo de processo deve ser &quot;leve», ou seja, não pode acarretar um grande aumento na carga de trabalho (overhead) num dia típico de trabalho.
O processo proposto foi chamado de FTSProc.
Este processo utiliza como base os conceitos chamados de Composite Persona (CP) e 24h r Design and Development.
Estes trabalhos estão detalhadamente descritos na seção 2.3 juntamente com os trabalhos relacionados.
Ainda, o processo criado utiliza algumas técnicas provenientes das metodologias ágeis, como por exemplo, Test-driven (TDD), integração contínua e as perguntas que guiam as reuniões de stand-up, oriundas de Scrum.
Para a adequada utilização do FTSProc, alguns pré-requisitos são necessários.
Estes requisitos iniciam com a necessidade de uma boa infraestrutura de comunicação entre todos os centros de desenvolvimentos envolvidos no projeto.
Uma rede de comunicação de alta velocidade é essencial para que grandes volumes de dados sejam transferidos entre os centros de desenvolvimentos.
Além de esta infraestrutura, é importante que o processo seja utilizado em projetos que possuam centros de desenvolvimento com uma grande diferença de fuso horário entre eles.
Esta diferença deve ser o suficiente para que não haja um período de trabalho simultâneo.
Normalmente oito horas de diferença são suficientes.
Finalmente, o projeto deve ser realizado utilizando a metodologia cascata, também chamado de ciclo de vida clássico ou, do inglês, waterfall.
Apresar de utilizar diversas práticas oriundas das metodologias ágeis, este processo deve ser utilizado em projetos que utilizam a metodologia cascata, pois o FTSProc é utilizado apenas na fase de desenvolvimento.
Como descrito anteriormente, o FTSProc atua apenas durante a fase de desenvolvimento do SDLC, pois segundo, a utilização dentro de uma fase específica é mais adequada para esta estratégia, pois as suas características específicas permitem uma estrutura mais controlada para os ciclos de transferência de trabalho (hand-offs).
Entretanto, conforme descrito nos dois itens abaixo, algumas pré-condições das fases anteriores (definição de requisitos e projeto) do SDLC auxiliam para o funcionamento do processo:
Para o bom funcionamento do processo é importante que os requisitos sejam definidos da forma mais específica possível preferencialmente utilizando o conceito de User Stories, as quais dividem os mesmos em pequenas funcionalidades para diminuir a complexidade das tarefas, que normalmente são desenvolvidas num único dia de trabalho.
É importante que as User Stories tenham os critérios de aceitação bem definidos.
Isto facilita o entendimento dos requisitos e, conforme apresentado no trabalho de, neste tipo de projeto é essencial que toda a equipe de desenvolvimento tenha o total entendimento sobre os requisitos que serão desenvolvidos durante o projeto.
Test-driven Portanto, cada requisito ser desenvolvido, ao final desta fase, irá gerar diversos testes unitários.
A utilização de TDD ainda está relacionada ao fato de manter um registro documentado da compreensão do requisito e da solução encontrada para atender o mesmo.
Ainda, segundo, antes de iniciar a implementação, o TDD pode atuar como parte da especificação e, depois de construída a aplicação, o TDD torna- se o conhecimento sobre como a aplicação foi desenvolvida.
Conforme podemos identificar no diagrama de atividades apresentado a seguir, na Figura 7, a execução do processo inicia somente quando temos a definição dos requisitos e dos testes de aceitação finalizados.
Enquanto estas atividades não estiverem concluídas, o processo não está apto a iniciar.
Identificando a conclusão destas etapas, é iniciada a fase de desenvolvimento, sobre a qual o processo será utilizado.
De acordo com a Figura 7, o processo possui um ciclo, o qual é executado a cada dia de trabalho de cada centro de desenvolvimento, sempre verificando se a funcionalidade está totalmente implementada (requisitos definidos).
A o final de cada dia, se ainda houver trabalho a ser realizado, este é transferido para o próximo centro de desenvolvimento.
Além de estas pré-condições, durante cada ciclo diário serão utilizados os seguintes artefatos, desenvolvidos para o FTSProc: --
Artefato 1 -- Formulário de hand-off (Apêndice A):
Representa o estado atual do trabalho e deve ser preenchido com informações sobre trabalho desenvolvido.
Todas as informações necessárias estão contidas neste artefato.
Estas informações são necessárias para que o trabalho do próximo shift possa ser iniciado do ponto onde a equipe anterior parou.
Um exemplo deste artefato está no Apêndice A. -- Artefato 2 -- Relatório de testes unitários (Apêndice B):
Todos os testes unitários que não estão cobertos, ou seja, os quais ainda não têm os requisitos atendidos, devem estar neste relatório.
A importância deste artefato está em auxiliar o planejamento de um dia de trabalho (shift), conforme pode ser visto no passo 2 do FTSProc.
Um exemplo deste artefato está no Apêndice B. Conforme ilustrado na Figura 8, a fase de desenvolvimento inicia quando temos a fase de definição de requisitos e a fase de projeto concluídas.
Portanto, os passos 1, 2, 3, 4 e 5, representam um único dia de trabalho de uma equipe de desenvolvimento, ou seja, um ciclo diário do processo.
Estes passos representam o detalhamento do estado denominado &quot;Executar ciclo diário do processo «apresentado anteriormente, na Figura 7.
O FTSProc é um processo iterativo e estes cinco estados serão repetidos a cada dia de trabalho, para cada time de desenvolvimento distribuído.
Os dados da saída de cada estado são utilizados para iniciar o estado imediatamente seguinte.
Estes cinco estados que compreendem um ciclo diário de trabalho estão detalhadamente descritos a seguir:
Este estado marca o início de um dia de trabalho (shift) de uma equipe.
O diagrama apresentado na Figura 9 apresenta as principais etapas que compõem este estado:
Conforme apresentado na Figura 9, é possível observar que este estado do processo é composto por três etapas principais, conforme descrito a seguir:
Carregar código fonte:
O centro de desenvolvimento que está iniciando o seu shift deve carregar a versão mais recente do código-fonte disponível no repositório.
Desta forma, é garantido que o trabalho será iniciado sobre o código-fonte mais recente disponibilizado por a equipe anterior.
Gerar relatório de testes unitários:
A equipe que está iniciando um dia de trabalho deve gerar um relatório com os testes que já estão e os que ainda não estão aceitos.
Ou seja, se o teste unitário está &quot;passando», significa que aquele critério de aceitação já está coberto e não é necessário trabalhar no mesmo.
Caso contrário, ainda será necessário aplicar esforço neste requisito.
Este relatório é representado por o Artefato 2 do FTSProc.
Gerar relatório com informações da equipe anterior:
Além de o relatório de testes unitários, cada equipe que está iniciando um dia de trabalho deve gerar um relatório com todas as informações disponibilizadas por a equipe que trabalhou no shift anterior.
Este relatório está baseado no formato das reuniões de stand-up, oriundas da metodologia Scrum.
Conforme, as reuniões de stand-up acontecem a cada dia, e o seu objetivo principal é identificar o andamento do projeto.
Durante esta reunião, cada membro da equipe responde a três perguntas: --
O que você fez desde a última reunião? --
O que você está planejando fazer até a próxima reunião? --
Existe algo impedindo você de continuar o seu trabalho?
Cada um dos desenvolvedores que trabalhou no shift anterior deve preencher este formulário (Artefato respondendo perguntas baseadas neste formato (estado 5 do FTSProc).
Portanto, este relatório é composto por o conjunto das informações passadas por todos os desenvolvedores.
Após estas três etapas principais serem concluídas, tem- se todas as informações necessárias para iniciar o planejamento diário para o shift que está iniciando.
De este modo, o fluxo de trabalho pode ser continuado no próximo estado do FTSPRoc, o qual está descrito a seguir.
O diagrama apresentado na Figura 10 apresenta as etapas que compõe este estado:
Este é iniciado imediatamente ao final do estado 1 (início do dia de trabalhorelatórios) serão utilizados neste estado.
Conforme apresentado na Figura 10, temos três passos principais para que este estado seja concluído.
Estes passos são:
Analisar as informações do site anterior:
A o final do estado 1 (Início do dia de trabalho) todas as informações fornecidas por o shift anterior estão disponíveis através de relatórios.
Portanto, o primeiro passo deste estado é analisar estas informações que o site anterior disponibilizou.
Estas informações são compostas por o relatório com as informações relativas ao shift anterior, assim como o resultado dos testes unitários fornecidos (Artefato 2).
Um modelo do relatório de testes unitários é apresentado no Apêndice B. Identificar os recursos participantes do shift:
A equipe que está iniciando um shift deve identificar todos os recursos que participarão deste shift para que o planejamento diário possa ser realizado.
Distribuir tarefas para os recursos:
Depois de concluído este planejamento, este estado do FTSProc é finalizado.
Em este ponto, todos os desenvolvedores envolvidos no shift que está iniciando possuem o conhecimento do ponto onde a equipe anterior parou e como o trabalho deve ser continuado.
Portanto, neste ponto os desenvolvedores podem iniciar o trabalho de implementação das funcionalidades, continuando um trabalho que estava sendo realizado no shift anterior, ou iniciando o desenvolvimento de uma nova funcionalidade.
Com o trabalho de implementação pronto para ser iniciado, este estado está finalizado, e o próximo estado do FTSProc pode ser executado, conforme descrito a seguir.
Esta etapa apenas marca a implementação dos requisitos, seguindo as definições acordadas durante o planejamento (estado 2).
Em esta etapa é iniciado ou continuado o trabalho de implementação das funcionalidades.
Cada desenvolvedor é individualmente responsável por esta etapa, ou seja, o término deste estado não depende de todos os envolvidos.
É o estado do ciclo diário do processo mais longo, pois é onde o desenvolvimento do projeto é realizado.
Em a perspectiva do FTSProc, o principal objetivo deste estado é fazer o controle do fluxo de trabalho, ou seja, com este estado, é possível controlar em qual etapa do projeto cada desenvolvedor está num determinado momento.
Quando cada desenvolvedor chegar ao final deste estado do processo, significa que o seu dia de trabalho está acabando e deve ser realizado o check-in do código-fonte, para isto, cada desenvolvedor deve iniciar o próximo estado, o qual está descrito a seguir.
Após finalizar a implementação, cada membro da equipe deve completar o check-in do trabalho realizado durante o dia, disponibilizando todas as informações necessárias para a próxima equipe continuar o trabalho do ponto onde parou.
O controle de check-in é importante, pois evita que um recurso termine o seu dia de trabalho sem disponibilizar o código mais recente no repositório.
Desta forma, evita- se iniciar um dia de trabalho sem o código mais recente disponível no repositório.
Por esta razão, o FTSProc faz este controle.
Após realizar o check-in e garantir que o código fonte mais recente está no repositório, este estado está finalizado.
Em este ponto, cada recurso pode adicionar as informações relacionadas ao trabalho desenvolvido durante o shift além de o código-fonte.
Estas informações serão disponibilizadas no último passo do processo, conforme descrito a seguir.
Chegando ao final do dia de trabalho, cada membro da equipe deve reservar um tempo para preencher o formulário de hand-off, com todas as informações necessárias para o próximo site.
Este formulário foi adaptado do formato de reuniões stand-up, oriundas do Scrum e será utilizado para formalizar a transferência de trabalho.
As seguintes questões abaixo devem ser respondidas por cada desenvolvedor envolvido no shift, as quais foram adaptadas do trabalho de:
O que foi realizado durante este período de trabalho?
Ii. O que deve ser continuado no próximo período de trabalho?
Iii. Existe algo bloqueando a equipe?
Iv. Com o shift finalizado, o próximo centro de desenvolvimento pode iniciar o seu trabalho.
Para isto, este irá repetir as cinco etapas do processo.
Estas cinco etapas são repetidas em todos os dias de trabalhos por cada centro de desenvolvimento até que todos os critérios de aceitação estejam atendidos, ou seja, todos os testes criados durante a fase de projeto (TDD) para cada requisito estão cobertos, pois cada requisito gera diversos testes unitários.
Após atender todos os critérios de aceitação encerra- se a fase de desenvolvimento e temos a funcionalidade implementada.
Em função de o processo proposto ser inédito, foi necessário desenvolvimento de uma ferramenta de apoio.
A ferramenta desenvolvida realiza todo o controle necessário para a execução do FTSProc.
Este controle inicia com a verificação dos recursos participantes do projeto.
Estes recursos preenchem os seguintes papéis na ferramenta:
Administrador: Responsável por a manutenção dos usuários da ferramenta e controle (adição, atualização e remoção) dos centros de desenvolvimentos do projeto.
Gerente global:
Responsável global do projeto.
Suas responsabilidades estão voltadas ao acompanhamento do projeto.
Para isto, a ferramenta disponibiliza diversos relatórios que apresentam o andamento do projeto.
De entre estes relatórios temos:
Quantidade de testes coberto por cada centro de desenvolvimento, quantidade de recursos em cada centro de desenvolvimento, informações passadas em cada hand-off, etc..
Gerente de Projeto: Em cada centro existe um gerente de projeto.
Este é responsável por a inicialização dos shifts.
Durante esta inicialização, o gerente de projeto pode designar as tarefas que cada um dos desenvolvedores irá trabalhar.
Após iniciado o shift, os desenvolvedores podem iniciar o seu trabalho.
O gerente de Projeto também pode ser considerado um desenvolvedor.
Desenvolvedor: Responsável por o desenvolvimento do projeto.
Durante o seu dia de trabalho, deve informar a ferramenta em qual passo do FTSProc se encontra.
Desta forma, a ferramenta garante que todos os passos definidos no processo são efetivamente realizados, ou seja, controla o fluxo de trabalho.
É importante ressaltar que o FTSProc não define papéis.
Entretanto, a ferramenta criada fez este uso para facilitar qual tipo de informação cada usuário pode ter acesso.
Outro ponto a ser destacado é o fato que a ferramenta exige apenas um Administrador e um gerente de Projeto para realizar um projeto.
O Administrador é necessário apenas para configurar a ferramenta, e o Gerente de Projeto é necessário para iniciar o shift, e posteriormente, realizar o desenvolvimento, já que um Gerente de Projeto também é um Desenvolvedor.
Além de o controle de usuários, a ferramenta faz o controle do fluxo de trabalho de cada um dos desenvolvedores que atuam em cada centro de desenvolvimento durante os shifts.
A ferramenta faz ainda, o controle dos centros de desenvolvimento, verificando qual será o próximo a iniciar o shift.
Para atender todos estes requisitos, a Figura 12 apresenta o diagrama de casos de uso da ferramenta desenvolvida, seguida de uma descrição detalhada dos principais casos de uso.
Finalmente uma breve descrição dos outros casos de uso é mostrada, juntamente com algumas imagens do funcionamento da ferramenta.
O Quadro 1 apresenta a especificação do caso de uso &quot;Consultar relatório de hand-off».
Este caso de uso é executado a cada ciclo do processo, no início de cada dia de trabalho.
Este é responsável por buscar as informações fornecidas por a equipe que trabalhou no shift imediatamente anterior.
De forma automática, este caso de uso identifica qual equipe está iniciando o shift, e com esta informação gera um relatório com todas as informações necessárias, conforme definido no FTSProc, apresentando dados do site anterior, juntamente com os testes unitários ainda não cobertos.
Quadro 1.
Especificação do caso de uso &quot;Consultar relatório de hand-off «UC:
Consultar relatório de hand-off Ator Gerente de Projeto Objetivo Permite ao usuário exibir as informações fornecidas por o site imediatamente anterior.
Estas são as informações relativas ao último shift finalizado, e essenciais para iniciar o próximo shift.
Fluxo Básico Usuário seleciona a opção para visualizar o relatório.
Sistema identifica a qual site o usuário pertence, baseado nestas informações apresenta os seguintes dados:
Respostas para as três perguntas definidas no processo.
Todos os testes alocados para cada recurso, mostrando se este foi coberto ou não;
Fluxo Alternativo Caso usuário selecionar a opção para verificar o relatório de testes unitários:
UC &quot;Consultar Relatório de Testes Unitários «é acionado Pós-condições:
O Quadro 2 apresenta o caso de uso &quot;Iniciar Shift».
A cada dia de trabalho, este caso de uso será executado.
Sempre após o caso de uso especificado no Quadro 1.
Este caso de uso é responsável por informar a ferramenta, dados sobre o shift que está sendo iniciado, para que a ferramenta consiga identificar o momento em que o shift é finalizado e a próxima equipe possa iniciar o desenvolvimento.
Durante a execução deste caso de uso, deve- se informar a ferramenta quais os recursos que irão participar do shift, ou seja, os desenvolvedores que irão trabalhar neste dia.
Esta informação é imprescindível, pois ao finalizar um shift, a ferramenta deve garantir que todos os recursos envolvidos no shift adicionaram as informações relativas ao shift.
Este caso de uso ainda é responsável por designar recursos para trabalhar em determinadas tarefas.
Com base nos testes que ainda devem ser cobertos, a ferramenta disponibiliza a opção para indicar qual recurso trabalhará em casa tarefa.
Este passo é opcional, mas fortemente recomendado, pois facilita o controle das atividades de desenvolvimento.
Quadro 2.
Especificação do caso de uso &quot;Iniciar shift «UC:
Iniciar Shift Ator Gerente de Projeto Objetivo Permite ao usuário iniciar um novo shift.
Para isto, é necessário executar o UC &quot;Consultar relatório de hand-off».
Pré-condições: Fluxo Básico Usuário seleciona a opção para iniciar o shift.
Sistema identifica a qual site o usuário pertence, baseado nestas informações solicita os seguintes dados para o usuário:
Desenvolvedores pertencentes a este site, juntamente com a opção para confirmar a sua participação no shift que está iniciando;
Testes que ainda precisam ser trabalhados, juntamente com uma opção para designar um desenvolvedor para este teste;
Campo de comentário para o shift, para adicionar outra informação relevante;
Usuário preenche todas as informações, e confirma o início do shift;
Pós-condições: Iniciando.
De a mesma forma que os casos de uso apresentados nos quadros 1 e 2, o caso de uso especificado no Quadro 3 também é executado a cada dia de trabalho, entretanto, ao final de cada dia.
Este caso de uso é responsável por garantir que todas as informações necessárias para que o próximo centro de desenvolvimento possa iniciar o seu trabalho seja adicionado na ferramenta.
A o chegar ao final de um dia de trabalho, cada recurso que trabalhou no shift é responsável por adicionar as informações na ferramenta de apoio.
Quando cada recurso adiciona as suas informações, a ferramenta verifica se todos os recursos envolvidos neste shift já adicionaram os dados.
Quando for identificado que todos os recursos realizaram esta etapa, este caso de uso é responsável por executar outros dois casos de usos:
Executar testes unitários e Finalizar Shift.
Em este ponto, o shift está finalizado e um novo shift pode ser iniciado.
Quadro 3.
Especificação do caso de uso &quot;Preencher formulário de hand-off «UC:
Preencher formulário de hand-off Ator Desenvolvedor Objetivo Informar ao sistema todos os dados relacionados ao trabalho durante o shift.
Fluxo Básico Usuário informa ao sistema os seguintes dados:
O que foi realizado durante este período de trabalho?
O que deve ser continuado no próximo período de trabalho?
Existe algo bloqueando a equipe?
Usuário informa quais os testes designados a ele que estão concluídos.
Sistema altera o status do usuário para que o mesmo não possa mais interferir neste shift.
Sistema armazena estas informações e faz a seguinte validação:
Fluxo Alternativo A Fluxo Alternativo Caso o usuário seja o último recurso do shift a preencher o relatório:
UC &quot;Executar testes unitários «é acionado UC &quot;Finalizar Shift «é acionado Pós-condições:
Após todos os desenvolvedores do shift submeterem os dados, o sistema armazena as informações e o shift é finalizado.
O sistema habilita a opção para iniciar um novo shift para o próximo centro de desenvolvimento.
Os casos de uso &quot;Informar Início da Implementação «e &quot;Informar Check-in «são utilizados apenas para a ferramenta controlar o fluxo de trabalho de cada recurso durante o projeto.
O caso de uso &quot;Executar Testes Unitários «é responsável por a execução remota de testes.
Configura- se a localização dos testes, e a ferramenta executa estes testes, coletando métricas como:
Número de testes executados, quais os testes estão cobertos e detalhes dos testes ainda não cobertos.
O caso de uso &quot;Consultar Relatório de Testes Unitários «apresenta as informações relacionadas à situação atual dos testes unitários.
O caso de uso &quot;Designar Testes para Recursos «apenas faz a associação dos testes e dos desenvolvedores para que possa ser realizado um controle sobre o trabalho de cada um dos desenvolvedores.
A ferramenta não exige que esta associação seja realizada, e é apenas mais uma forma de realizar o controle.
O perfil de usuário &quot;Gerente Global «tem a possibilidade de acessar o caso de uso &quot;Solicitar Relatórios».
Em este caso de uso, existe a opção para escolher diversos relatórios, para fazer o acompanhamento do projeto.
Alguns exemplos de relatórios são:
Percentual de recursos alocados em cada centro de desenvolvimento (site).
Dados detalhados sobre todos os shifts já executados.
Quantidade de testes cobertos por cada shift.
Tempo de duração de cada shift.
A ferramenta proposta foi implementada e utilizada durante a execução do experimento.
Optou- se por desenvolver uma aplicação Web, para que a mesma pudesse ser utilizada de uma forma centralizada por todas as equipes.
Utilizou- se a linguagem Java para a criação da mesma.
Desta forma, é facilitada a instalação da ferramenta em qualquer plataforma (Servidor Web).
Ainda, o banco de dados utilizado foi MySQL e, em todas as consultas, utilizou- se a linguagem SQL padrão.
Desta forma também fica facilitada a alteração do banco de dados, alterando apenas configurações de conexão.
Abaixo, algumas imagens da ferramenta em funcionamento:
Em a figura acima, com o identificador A, temos uma lista com todos os possíveis participantes do shift, ou seja, todos os recursos alocados para o centro que está iniciando o shift.
Deve- se, obrigatoriamente, selecionar os participantes (por padrão, todos são selecionados).
Destacado com o identificador B está a lista de testes unitários gerada por a ferramenta.
Com base nesta lista é possível associar testes para os participantes dos shifts, para que estes fiquem responsáveis por trabalhar nas atividades relacionadas ao teste.
Este passo não é mandatório, mas recomendável, pois facilita no controle das atividades do projeto.
Esta tela mostra ainda um campo de texto onde é possível adicionar qualquer informação que o Gerente de Projeto julgar relevante.
Após informar todos os dados, deve- se clicar no botão &quot;Iniciar Shift».
Em esta tela, na área destacado com o identificador A, o usuário deve indicar, respondendo essas três perguntas, todas as informações relevantes para que o próximo centro inicie o trabalho do ponto onde parou.
Ainda, na área destacado com o identificador B, estão listados os testes designados ao usuário logado.
Em esta área, o usuário pode indicar os testes que foram trabalhados.
Esta informação é validada de forma automatizada por a ferramenta, se os testes foram realmente cobertos, o teste é considerado concluído, e não é mais apresentado no relatório de testes unitários, caso contrário, o shift seguinte identificará o teste como não coberto no relatório de testes unitários.
O shift é considerado concluído somente quando todos os usuários alocados para este shift informarem os dados necessários para concluir o hand-off.
A o identificar este caso, a ferramenta habilita automaticamente o próximo centro a iniciar o seu shift, caso contrário, o shift não pode ser iniciado.
Com esta informação é possível acompanhar o progresso do projeto, e identificar quais os shifts foram mais ou menos produtivos.
Assim é possível tomar ações, como por exemplo, a adição de recursos a determinado centro de desenvolvimento.
Este relatório mostra o tempo transcorrido desde o início do shift, até o momento em que o último desenvolvedor alocado no shift finalizou o seu hand-off.
Esta informação é relevante, por exemplo, para verificar se está sendo necessária a utilização de horas-extras para a conclusão do processo.
Conform me aprese entado no capítulo 3, o principal méto odo de pe esquisa utiliz zado neste e trabalho foi f o experimento com o ontrolado.
Um dos usos mais comuns de e experiment tos na ES S é para te estar teoria as[ JUR01 1].
Visto que esta pe esquisa visa investigar r a aplicaçã ão de um novo proc cesso de tr ransferência de traba alho em bientes dist tribuídos que q utilizam m a estraté égia FTS e, e devido a as caracte erísticas amb dest te método, optou- se por a realiz zação de um experim mento.
Esta a escolha deve- se ao f fato deste método possibilitar r a avalia ação de novas prop postas, permitir o cont trole do am mbiente de e execuçã ão e propo orcionar a obtenção de conclu usões a parti ir de uma hipótese.
As seç ções a se eguir deta alham as etapas do d proces sso exper rimental realizado.
Em esta etapa S94] que define os objetivos (nível com o onceitual) para estabelecer qu uestões (nível operacional) e então identificar métricas (nível quantitativo).
Em o contexto de experimentos esta abordagem auxilia a etapa de definição de objetivos.
O objetivo global deste experimento consiste em investigar qual abordagem é mais eficiente em projetos que utilizam a abordagem FTS:
Utilizando o FTSProc ou sem o uso de tal processo (chamado de ad hoc), possibilitando, assim, identificar qual abordagem permite a entrega do maior número de requisitos implementados num determinado intervalo de tempo.
Para alcançar o objetivo deste estudo buscou- se responder a seguinte questão:
&quot;Projetos que utilizam o FTSProc têm a mesma eficiência que projetos distribuídos realizados de forma ad hoc?».
A métrica associada a esta questão corresponde à eficiência do método, calculada por o somatório dos requisitos corretamente implementados por os participantes em cada uma das duas abordagens.
Em este trabalho definiu- se como requisitos corretos aqueles que possuíam as seguintes características:
Requisitos implementados em linguagem Java, de acordo com a descrição dos requisitos do sistema, entregue aos participantes (Apêndice C);
Cada requisito possui uma série de critérios de aceitação onde, para os critérios de cálculos temos:
Vale ressaltar que na análise dos resultados do experimento focou- se para identificar a quantidade de requisitos implementados corretamente.
A seguir, apresenta- se a fórmula para o cálculo da métrica:
Eficiência do projeto FTSProc $= reqImpleFTSProc Eficiência do projeto FTSProc $= reqImpleAdHoc.
Onde &quot;reqImpleFTSProc «representam os requisitos implementados de forma correta utilizando o FTSProc e &quot;reqImpleAdHoc «representam os requisitos implementados de forma correta sem a utilização do FTSProc (projeto ad hoc).
Para este experimento, utilizou- se a seguinte abordagem de contexto:
O experimento ocorreu num ambiente controlado (in-vitro) num dado instante de tempo (off-line);
O grupo de participantes era composto por alunos do Programa de Pós Graduação em Ciência da Computação da PUCRS (PPGCC) e profissionais experientes, oriundos de empresas do Parque Tecnológico da PUC/RS (TECNOPUC);
A realidade do experimento é considerada modelada, visto que os requisitos serem implementados foram desenvolvidos por o Pesquisador;
A generalização do experimento é considerada específica.
Este contexto foi adotado por motivos de complexidade e viabilidade para a realização do experimento.
De esta maneira, a execução do experimento ocorreu num ambiente controlado durante um momento previamente estabelecido, com uma amostra definida por conveniência (participantes estudantes de mestrado e profissionais da área) e com um problema fictício desenvolvido por o Pesquisador.
Definiu- se as seguintes hipóteses para o experimento:
Hipótese Nula:
A eficiência de um projeto que utiliza o FTSProc é igual ao de um projeto distribuído desenvolvido de forma ad hoc.
H0: ReqImpleFTSProc $= reqImpleAdHoc Hipótese Alternativa:
A eficiência de um projeto que utiliza o FTSProc é maior que a de um projeto distribuído desenvolvido de forma ad hoc.
H1: ReqImpleFTSProc\&gt; reqImpleAdHoc Hipótese Alternativa (H2):
A eficiência de um projeto que utiliza o FTSProc é menor que a de um projeto distribuído desenvolvido de forma ad hoc.
H2: ReqImpleFTSProc reqImpleAdHoc As duas abordagens, com a utilização do processo e sem a utilização do mesmo (ad hoc), são consideradas as variáveis independentes do experimento e a eficiência é a variável dependente.
Os sujeitos do experimento incluíram 8 pessoas, as quais formaram dois grupos de quatro componentes.
Cada grupo executou o mesmo projeto onde num de eles foi utilizado o FTSProc e o outro foi executado de forma ad hoc, ou seja, sem um processo definido.
Antes de iniciar o experimento cada participante preencheu um questionário com informações sobre os conhecimentos das áreas da pesquisa, as quais incluíram DDS e FTS, juntamente com outros conhecimentos técnicos necessários para a realização do experimento (Apêndice F).
Este instrumento auxiliou de duas formas:
Em a preparação dos treinamentos necessários e na divisão das duas equipes da forma mais balanceada possível.
A Tabela 4 expõe os conhecimentos e o tempo de experiência dos participantes nas áreas pertinentes ao experimento.
A amostragem do experimento é considerada por conveniência e não probabilística, optando- se por esta opção por questões de viabilidade.
Para minimizar a possível obstrução causada por as diferenças no nível de experiência e conhecimento dos participantes nos temas relacionados ao experimento (DDS e FTS) foram selecionados estudantes de mestrado e profissionais que trabalham em projetos que utilizam DDS (pressupondo obter homogeneidade em relação a experiências e conhecimentos) e foram fornecidos treinamentos sobre estes temas.
Foi adotado o princípio de balanceamento para que cada abordagem fosse utilizada por a mesma quantidade de participantes.
A Tabela 4 apresenta os dados dos participantes obtidos através de um questionário aplicado previamente ao experimento (Apêndice F).
Estes dados representam o nível de conhecimento dos participantes nas áreas necessárias para a execução do experimento, as quais foram usadas para fazer o balanceamento das equipes.
As informações contidas em cada coluna são:
Id: Identificação do participante;
DDS: Nível de conhecimento do participante em DDS;
DDS Tempo: Anos de experiência profissional do participante em DDS;
FTS: Nível de conhecimento do participante em FTS;
FTS Tempo: Anos de experiência profissional do participante em FTS;
Exp. Java:
Anos de experiência profissional em desenvolvimento na linguagem Java;
JUnit: Nível de conhecimento do participante em na ferramenta JUnit;
TDD: Nível de conhecimento do participante na técnica de TDD;
A Tabela 6 apresenta todos os instrumentos utilizados durante o processo experimental realizado, incluindo o tipo de objeto e a descrição detalhada de cada um, como por exemplo:
Ferramentas utilizadas e questionários aplicados.
Ferramentas: Ide Eclipse Indigo para o desenvolvimento da aplicação, Tortoise SVN para a sincronização de arquivos (check-in e check-out) com o repositório e navegador Chrome para utilização da ferramenta de apoio.
Ferramenta de apoio desenvolvida por o Pesquisador para controle do processo FTSProc e coleta das métricas durante a realização do experimento para o projeto FTS e, para a coleta de métricas no projeto ad hoc.
Descrição do sistema a ser desenvolvido, diagramas de casos de uso e diagramas de classes necessárias para o desenvolvimento da aplicação (Apêndice C).
Código fonte sobre o qual o desenvolvimento foi realizado.
Todas as classes e arquivos necessários foram disponibilizados por o Pesquisador.
Apresentação para a equipe que utilizou o FSTProc, contendo informações sobre DDS, FTS, processo FTSProc, ferramenta de apoio e a dinâmica do experimento (Apêndice D).
Apresentação para a equipe que realizou o projeto de forma ad hoc, contendo informações sobre DDS, FTS e a dinâmica do experimento (Apêndice E).
Questionário enviado aos participantes alguns dias antes da execução do experimento, para a coleta de dados demográficos e sobre o conhecimento dos mesmos em relação a a DDS e FTS (Apêndice F).
Questionário entregue no final da execução do experimento, para coletar as percepções dos participantes sobre o experimento e suas sugestões para o método que utilizou (Apêndice G).
A Tabela 7 apresenta as considerações acerca de a validade do processo experimental.
Alguns dados que esta tabela apresenta são:
Validade interna, como dados históricos e seleção dos participantes;
Validade externa como a possibilidade de generalização;
Validade de construção como a explicação aos participantes sobre a forma como os dados seriam extraídos;
E dados sobre a validade de conclusão do experimento mostrando, por exemplo, a falta de poder estatístico devido a o número reduzido de participantes.
A data de aplicação do experimento foi definida evitando períodos em que os participantes poderiam sofrer influências externas (choque de horários com compromissos).
Devido a a dificuldade de encontrar uma data comum onde todos os participantes tivessem a disponibilidade, o experimento foi realizado em dois dias distintos, um para a equipe FTSProc e outro para a equipe ad hoc.
Buscou- se motivar os participantes durante a execução do experimento indicando a importância da realização do mesmo.
Os participantes participaram voluntariamente do experimento.
Durante a execução do experimento, não foi permitido qualquer tipo de interação entre os participantes que representavam sites diferentes, simulando times distribuídos em locais e fusos horários distintos.
Validade externa Interação de seleção e tratamento Interação do ambiente e tratamento Interação entre histórico e tratamento Possibilidade de generalização Os participantes possuíam conhecimento prévio sobre os assuntos relacionados a pesquisa.
Foram utilizadas ferramentas atuais e amplamente conhecidas.
Todas as ferramentas foram previamente configuradas por o Pesquisador.
A execução do experimento ocorreu num momento em que os participantes não sofreram influências externas.
Devido a o fato do experimento ser in-vitro e off-line, a generalização do experimento é considerada específica.
Validade de construção Inadequada explicação pré-operacional Adivinhação de hipóteses Apreensão sobre a avaliação Buscou- se explicar detalhadamente questões operacionais do experimento (como ocorreria a extração dos dados, uso de ferramentas, etc.) Manteve- se o foco no objetivo planejado, não divulgando a métrica do experimento.
Foi declarado que se manteria o anonimato dos participantes e que eles não estavam sendo &quot;avaliados».
Validade de conclusão Poder estatístico Confiabilidade das medidas Configurações do ambiente do experimento Heterogeneidade do ambiente do experimento O pequeno tamanho da amostra resultou na impossibilidade da utilização de métodos estatísticos para o teste de hipóteses, por isto optou- se por uma interpretação analítica de base qualitativa dos resultados, conforme apresentado seção 5.4 (Análise e interpretação de resultados).
Utilizou- se medidas objetivas no experimento.
O experimento foi conduzido em laboratório totalmente controlado.
Foram escolhidos participantes alunos do PPGCC e profissionais da área.
Em esta etapa ocorreu a preparação, execução e validação inicial dos resultados do experimento realizado.
Este processo experimental realizado para avaliar a efiCiência do FTSProc foi realizado num ambiente totalmente controlado, atendendo todos os pré-requisitos necessários para a utilização do FTSProc.
Durante a preparação foi fornecido o embasamento teórico necessário para a participação dos sujeitos deixando claro quais eram os objetivos do experimento e como ele ocorreria.
Foi pedido que os participantes assinassem um termo de consentimento em o qual foram descritos os objetivos da pesquisa e os direitos dos participantes (Apêndice H).
Para evitar influências nos resultados, foi adotada uma postura de anonimato dos participantes na descrição do experimento.
A execução do experimento foi estruturada em quatro fases sequenciais, apresentadas a seguir:
Os tempos disponibilizados para cada projeto, FTSProc e ad hoc, eram os mesmos e estão apresentados na tabela a seguir:
A o final desta fase, as equipes disponibilizaram todo o código fonte desenvolvido durante a execução do experimento, juntamente com os dados de cada hand-off coletados através da ferramenta de apoio.
Em esta fase, nenhum imprevisto ocorreu e a Tabela 9 e Tabela 10 apresentam os tempos necessários para concluir esta etapa em cada abordagem:
Fase 4 ­ Coleta de dados finais:
Em a fase final, o Pesquisador aplicou um questionário (Apêndice G) para coletar as percepções dos participantes sobre o experimento e sobre a utilização do FTSProc.
Em esta fase não ocorreu nenhum desvio ou imprevisto, tudo ocorreu conforme o planejamento.
O tempo total desta fase em cada abordagem foi:
Projeto FTSProc:
5 minutos.
Projeto ad hoc:
8 minutos.
Esta etapa compreende a análise e interpretação dos resultados com o intuito de obter conclusões sobre as hipóteses do experimento.
Conforme descrito anteriormente, o tamanho da amostra do experimento foi de 8 participantes.
Este baixo número foi obtido devido a os conhecimentos necessários para cada participante e a viabilidade para a realização do experimento, incluindo:
Conhecimentos básicos em Orientação a Objetos;
Conhecimentos em linguagem Java (J2SE);
Conhecimentos da Ide Eclipse; Conhecimentos em Test-driven (TDD);
Conhecimento em testes unitários (JUnit);
A restrição de tempo para que o experimento ocorresse no cronograma e prazo planejados para a conclusão desta pesquisa.
Todos estes fatores restringiram a possibilidade de obtenção de uma amostra maior.
De esta maneira, devido a este baixo número da amostra não se obteve dados suficientes para a utilização de métodos estatísticos no teste das hipóteses, optando- se então, por uma interpretação analítica de base qualitativa utilizando uma estatística simples para analisar os resultados obtidos.
O resultado mais importante oriundo do experimento está relacionado diretamente à quantidade de requisitos desenvolvidos por as equipes em cada abordagem.
Este resultado será utilizado para a verificação da hipótese proposta em relação a a eficiência do método FTSProc proposto.
A Tabela 11 apresenta os resultados obtidos em relação a o número de requisitos implementados corretamente e parcialmente em cada projeto.
Analisando os resultados da Tabela 11, podemos verificar que a eficiência da equipe que utilizou o FTSProc é maior do que a equipe que realizou o projeto de forma ad hoc.
A equipe que utilizou o FTSProc implementou uma quantidade maior de requisitos corretos do que a equipe do projeto ad hoc.
Além de isto, a equipe que utilizou o FTSProc obteve uma maior taxa de aproveitamento de trabalho:
A equipe que utilizou o FTSProc obteve uma percentagem de aproveitamento de dos requisitos corretamente implementados em relação a o total de requisitos que elas trabalharam;
A equipe que executou o projeto de forma ad hoc obteve uma percentagem de aproveitamento de dos requisitos corretamente implementados e 66,6% dos requisitos parcialmente implementados, em relação a o total de requisitos que elas trabalharam É importante salientar que, conforme podemos ver na Tabela 9, a equipe que utilizou o FTSProc precisou somente de 3 shifts e 7 minutos do quarto shift, para garantir que todos os requisitos fossem implementados corretamente.
Enquanto isso, a outra equipe utilizou todos os 4 shifts integralmente, para terminar apenas 4 requisitos corretamente.
Com estes resultados percebemos que a quantidade de requisitos corretos e a taxa de aproveitamento é maior quando utilizamos o FTSProc para a execução de projetos distribuídos utilizando a estratégia FTS.
Estes dados fornecem indícios para a aceitação da hipótese alternativa &quot;H1( «A eficiência de um projeto que utiliza o FTSProc é maior que a de um projeto distribuído desenvolvido de forma ad hoc&quot;).
Em a fase 4 do experimento (Coleta de dados finais), o Pesquisador aplicou um questionário (Apêndice G) para que os participantes respondessem sobre suas percepções acerca de o método que eles utilizaram:
FTSProc ou ad hoc.
Para cada pergunta aplicada para os dois grupos, procurou- se comparar as percepções dos participantes nas duas abordagens.
Os resultados obtidos nesta etapa estão representados nas tabelas a seguir, onde, para cada pergunta, apresenta- se a contagem de respostas positivas e negativas para cada uma das equipes.
Logo após, é apresentada uma análise destes resultados.
A transferência de trabalho de um centro ao outro ocorreu da forma adequada?
Em o início de cada shift, você percebia de forma direta como o trabalho deveria ser continuado?
Você acredita que a transferência de trabalho de um centro de desenvolvimento para o outro acarretou um overhead significativo no trabalho?
Nota- se que, na percepção dos participantes, a transferência de trabalho de um centro para o outro aconteceu de uma forma adequada em ambas as abordagens.
Apenas um participante no projeto ad hoc discorda.
Entretanto, podemos observar claramente que a identificação do ponto em que o trabalho deveria ser continuado não foi direto na equipe ad hoc.
Já na equipe que utilizou o FTSProc, esta identificação foi facilitada.
Este resultado vai ao encontro de um dos objetivos do processo proposto, o qual é facilitar a identificação do ponto onde o trabalho deve ser continuado.
Finalmente, podemos identificar que, na percepção dos participantes, o overhead causado por o uso do FTSProc não foi significativo.
Os resultados encontrados estão em consonância com a literatura, a qual mostra que este tipo de processo deve ser &quot;leve», ou seja, não pode acarretar um grande aumento na carga de trabalho (overhead) num dia típico de trabalho.
Adicionalmente, outros questionamentos foram aplicados aos participantes, conforme apresentados no Apêndice G, visando a identificação de pontos positivos, pontos negativos e oportunidades de melhorias das duas abordagens (FTSProc ou ad hoc).
Os resultados obtidos de cada participante estão transcritos a seguir, divididos em duas partes, uma para a equipe ad hoc e outra para a equipe FTSProc.
Logo após é apresentado uma breve análise sobre estes dados.
Ad hoc o Pontos Positivos Baixa complexidade das tarefas;
Comentários no código fonte e no repositório ajudaram na continuação das tarefas.
Não houve uma didática para a transferência de trabalho;
Não tinha como saber em que ponto do trabalho a equipe anterior parou, sem olhar diretamente todo o código fonte;
Em todos os shifts, antes de iniciar o trabalho era preciso verificar o que tinha sido feito por a outra equipe e então continuar;
Não é muito intuitivo se as equipes não tiverem um mecanismo de sincronização;
Falta de visibilidade do progresso do trabalho realizado;
Código implementado de forma parcial, bem como testes unitários dificultaram o trabalho;
Dificuldade para saber em que ponto começar.
O Sugestões para melhorar o processo Com auxilio de kanban ou outras técnicas de gerenciamento;
Utilização de padrões de código;
Utilização de Unit Tests (TDD) e comentários no código fonte e durante os check-ins;
Definição de um sistema de sincronização de tarefas.
FTSProc o Pontos Positivos Utilização de TDD;
Requisitos diretos, com critérios definidos de forma clara;
3 Perguntas utilizadas no processo.
Dependente da ferramenta;
Todos tem que usar um mesmo &quot;vocabulário «para que a comunicação seja efetiva.
Utilizar algum mecanismo de controle automático para checkin.
Desta forma, evita- se que o próximo shift inicie sem o código mais recente no repositório.
Os pontos positivos em relação a o método ad hoc citados por os participantes do experimento incluem a baixa complexidade das tarefas, pois os requisitos do experimento foram criados com este objetivo.
Outro ponto positivo apontado foi a forma como os participantes procuraram mostrar à outra equipe o estado atual do trabalho.
Para isto, os participantes utilizaram comentários no código fonte e no repositório de código a cada check-in.
Já os pontos negativos citados em relação a o método ad hoc nos mostram, principalmente, os problemas que a falta de um processo pode ocasionar.
De entre estes problemas, a falta da percepção do ponto onde o trabalho havia parado no shift anterior e como este deveria ser continuado foram os mais citados por os participantes.
Cabe ressaltar que estes pontos estão em consonância com literatura.
Os principais problemas apontados por a literatura estão relacionados as dificuldades de coordenação, sincronização e comunicação, principalmente durante a transferência de trabalho de um centro de desenvolvimento para outro.
O FTSProc procura amenizar estes problemas.
As sugestões de melhorias listadas por os participantes que utilizam o método ad hoc mostram a necessidade da utilização de uma forma padrão para a transferência de trabalho, tal qual o FTSProc.
Ainda, a utilização da técnica de TDD foi citada como um possível facilitador para a sincronização entre as equipes.
Os pontos positivos citados por os participantes que utilizaram o FTSProc estão relacionados diretamente com a forma como o processo foi criado, ou seja, a utilização de requisitos diretos, utilização de TDD e as 3 perguntas utilizadas como base para a transferência de trabalho.
Como era esperado no início do experimento, os pontos negativos apontados por os participantes do projeto FTSProc eram poucos, se comparados com o projeto ad hoc e não estão relacionados a sincronização ou coordenação de trabalho.
Um ponto levantado versa acerca de o vocabulário utilizado.
Como as 3 perguntas do processo eram respondidas com texto podem haver problemas de entendimento e interpretação entre os diferentes centros de desenvolvimento.
Apenas este ponto negativo foi citado por os participantes do experimento nesta abordagem.
Apenas uma sugestão de melhoria para o FTSProc foi citada e não está relacionada diretamente ao processo, mas às ferramentas utilizadas.
Esta sugestão refere- se à utilização de uma forma automática de check-in do trabalho realizado.
Desta forma, caso algum dos participantes do shift anterior não faça o check-in, evita- se que o próximo shift seja iniciado sem o código fonte mais recente no repositório.
Após esta breve apresentação dos resultados qualitativos e quantitativos oriundos do processo experimental, o capítulo 6 apresenta uma análise crítica sobre estes achados, juntamente com as conclusões sobre o processo experimental.
Em esta seção são apresentadas as lições aprendidas com a realização do experimento, as quais poderão futuramente auxiliar pesquisadores no planejamento e execução deste método de pesquisa. --
Lição aprendida 1: Escolha dos participantes A escolha dos participantes do experimento, também chamados de sujeitos experimentais, é vital para o sucesso do processo experimental.
Para a realização do experimento desta pesquisa, foi necessária a utilização de participantes que tivessem sólidos conhecimentos em desenvolvimento de sistema.
Este requisito se fez necessário para evitar problemas voltados unicamente ao desenvolvimento, podendo assim, ter o foco total na avaliação do processo proposto.
Devido a esta necessidade, a quantidade de possíveis participantes tornou- se menor.
Ainda, a necessidade de todos os participantes estarem presentes num mesmo momento para a execução do experimento tornou o número de sujeitos ainda menor.
A ideia inicial era realizar este experimento com 12 participantes, simulando 3 centros distribuídos.
Entretanto, reunir 12 pessoas num mesmo momento não foi possível.
Para contornar este problema, a solução encontrada foi utilizar 8 pessoas e dividir em 2 momentos separados.
Para isto, foi realizado o experimento em 2 etapas, sendo uma com a equipe FTSProc e a outra com a equipe ad hoc.
Salientamos que esta abordagem pode aumentar o risco de sucesso no experimento, pois havendo algum problema no segundo grupo, todo o experimento é invalidado e deve- se iniciar novamente, selecionando outro problema e outros participantes.
Para amenizar este risco, realizou- se a primeira etapa com a equipe FTSProc, pois envolvia o uso da ferramenta de apoio, a qual poderia ocasionar problemas. --
Lição aprendida 2: Experiência dos participantes Outro ponto positivo na escolha dos participantes foi a experiência dos participantes.
Os alunos e profissionais escolhidos para o experimento possuíam sólidas experiências em desenvolvimento de software, bem como em projetos de DDS.
Isto facilitou o inicio da execução do experimento e o tempo necessário para os treinamentos dos participantes foi reduzido.
Se estes participantes fossem pessoas com pouca experiência, isto poderia impactar os resultados obtidos.
O ponto negativo no uso de 8 participantes foi o fato que isto limitou o uso de cálculos estatísticos para a validação das hipóteses.
Por esta razão, é interessante que a quantidade de participantes do experimento seja maior. --
Lição aprendida 3: Infraestrutura necessária A infraestrutura necessária para este tipo de experimento deve ser bem planejada.
Este ponto é importante para a execução deste tipo de processo experimental.
Este planejamento inicia por os recursos computacionais necessários.
Em esta etapa, atentou- se para computadores atualizados, onde fosse possível a utilização de ferramentas atuais para o desenvolvimento das atividades.
Com estas informações, buscou- se por laboratórios que pudessem ser utilizados dentro de a universidade.
Finalmente, avaliou- se as necessidades de redes para comunicações.
A o final do planejamento da infraestrutura, optou- se por utilizar uma sala de aula, a qual foi reservada para os dois dias, conforme disponibilidade dos participantes.
Em esta sala, foram instalados três computadores, previamente configurados e testados por o Pesquisador.
De estes computadores, um de eles foi utilizado como servidor de arquivos (repositório SVN), e servidor web e de banco de dados da ferramenta de apoio.
Os outros dois estavam configurados com as ferramentas necessárias para o desenvolvimento das atividades dos participantes.
A conexão entre estes computadores foi realizada através de uma rede local, a qual estava conectada apenas estes três computadores.
Desta forma, tinha- se maior controle e qualquer problema na rede da universidade não afetaria o andamento do experimento. --
Lição aprendida 4: Ferramenta de apoio Para evitar qualquer tipo de problema relacionado à ferramenta de apoio, durante o desenvolvimento da mesma, executaram- se diversos testes, incluindo a utilização por mais de um usuário simultaneamente, como ocorreria durante o experimento.
Assim, foi possível identificar problemas e corrigir- los antes da execução do experimento evitando imprevistos.
Esta etapa foi fundamental, já que qualquer problema identificado durante o experimento poderia invalidar o processo experimental.
Um ponto negativo sobre a ferramenta está no fato da mesma ter sido desenvolvida como um protótipo e testada para a utilização do experimento.
Para futuros experimentos, utilizando um número maior de participantes, ou até mesmo em empresas, seria necessário rever aspectos de usabilidade, desempenho e confiabilidade da ferramenta. --
Lição aprendida 5: Requisitos do sistema fictício Para a elaboração dos requisitos a serem utilizados neste tipo de experimento buscou- se na literatura qual seria um domínio propício.
Encontrou- se em alguns trabalhos o uso de um sistema matemático, devido a sua facilidade e provável conhecimento de todos os participantes.
Em este sentido, os requisitos foram criados dentro deste domínio (Apêndice C).
Após a criação destes requisitos os mesmos foram implementados e validados por o Pesquisador.
Ainda, durante esta etapa, foram criados os testes para serem utilizados para o critério de cálculo dos requisitos implementados.
O esforço empregado nesta etapa de elaboração dos requisitos foi um fator positivo, já que não se encontrou nenhum tipo de problema durante a execução do experimento, relacionado aos requisitos do sistema fictício. --
Lição aprendida 6: Disponibilidade dos materiais Finalmente, outro ponto positivo durante o experimento, foi o fato de utilizar o que foi chamado de pacote experimental.
Este pacote era composto por todos os materiais necessários para cada um dos participantes durante toda a execução do experimento.
Estes materiais foram impressos para facilitar a consulta por parte de os participantes.
Estes pacotes eram compostos por: --
Termo de consentimento para ser assinado por cada participante (Apêndice H); --
Documento de requisitos (Apêndice C); --
Manual da Ferramenta de Apoio, somente para os participantes da equipe FTSProc (Apêndice I); --
Questionário pós-experimento (Apêndice G); --
Dados para acesso as ferramentas, contendo usuário e senha para cada participante (SVN e Ferramenta de apoio);
Este pacote entregue para cada um dos participantes foi apontado por os mesmos como um facilitador durante a execução do experimento.
O próximo capítulo apresenta uma análise crítica sobre os resultados obtidos a partir de o processo experimental realizado.
Essa análise é uma complementação da análise preliminar realizada sobre os resultados qualitativos e quantitativos do experimento.
Após apresentar os resultados obtidos e os indícios para a confirmação da hipótese H1, a qual mostra que um projeto que utiliza o FTSProc é mais eficiente que um projeto executado de forma ad hoc, esta seção apresenta mais alguns fatores que corroboram para este resultado.
Analisando os resultados qualitativos obtidos, verificamos que parte da vantagem do FTSProc está no fato de que a equipe FTSProc percebe de forma clara e rápida como o trabalho deve ser continuado.
Assim, o tempo destinado nesta identificação é menor do que a equipe ad hoc, resultando num tempo de desenvolvimento de requisitos maior durante cada dia de trabalho (shift).
Esta vantagem deve- se a dois fatores principais, relacionados ao FTSProc:
Utilização de TDD e às três perguntas principais que o processo propõe.
A utilização do TDD é eficaz, pois a equipe ad hoc implementou 8 requisitos parcialmente, ou seja, alguns critérios de aceitação não estavam cobertos.
Em um projeto real, estes problemas seriam identificados posteriormente, apenas numa fase de testes.
Por o fato de não utilizar TDD, esta equipe deveria além de implementar os requisitos, testar- los.
Em este sentido, a falta desta técnica prejudica também no tempo necessário para a implementação.
Enquanto a equipe FTSProc tinha os testes unitários para garantir a correta implementação dos requisitos, a equipe ad hoc investia parte do seu tempo criando e executando testes.
Outro fator que o TDD auxilia é na percepção do progresso do trabalho, pois verificar os testes já cobertos e os que ainda devem ser trabalhados, facilita o entendimento sobre o progresso do trabalho, ou seja, o quanto ainda falta para finalizar todos os requisitos.
Por esta razão, durante o experimento, em apenas sete minutos do quarto shift, a equipe FTSProc identificou que todo o trabalho havia sido realizado, e não existia mais trabalho a ser continuado.
As três perguntas principais que o processo propõe( (i) O que foi realizado durante este período de trabalho?,
O que deve ser continuado no próximo período de trabalho?,
Existe algo bloqueando a equipe?)
também auxiliaram as equipes na identificação de onde o trabalho deveria continuar.
Facilmente, os participantes verificavam as respostas disponibilizadas por o centro anterior e rapidamente sabiam o que havia sido implementado.
Após esta leitura, o ponto para iniciar o desenvolvimento era confirmado com a utilização dos testes unitários e, a partir destes, as tarefas eram distribuídas na equipe.
Desta forma, em pouco tempo, a equipe iniciava o trabalho de desenvolvimento.
Enquanto a equipe FTSProc de forma rápida e direta identificava como o trabalho deveria ser continuado, diferentemente, a equipe ad hoc não tinha esta percepção.
Para identificar o ponto que o trabalho deveria ser continuado, a equipe ad hoc precisava analisar grande parte do código fonte criado ou modificado por a equipe anterior, o que despende muito tempo.
Como não havia tempo de trabalho simultâneo para a transferência e não havia a ferramenta de apoio, a equipe ad hoc utilizou comentários no código fonte e nos check-ins do repositório para informar o que havia sido realizado.
Entretanto, por não haver uma estrutura definida para passar esta informação e nem uma obrigação, não eram todos os participantes que utilizaram este recurso e, os que usavam, não seguiam um padrão definido.
A o final do experimento, estes comentários foram citados como pontos positivos.
Mais uma vez, este fato vai ao encontro de o que o FTSProc propõe para facilitar a transferência de trabalho, com a utilização das três perguntas.
Analisando os pontos negativos apontados por as equipes (seção 5.4.2), notamos que o projeto realizado de forma ad hoc apontou diversos problemas.
De entre estes problemas, notamos que a maior parte de eles foram originados por a falta de um padrão na transferência de trabalho de um centro ao outro.
Notamos que diversos problemas apontados por a equipe ad hoc não foram identificados na equipe FTSProc.
Este fato é mais um indício que o processo criado, de fato facilita a transferência de trabalho.
Ainda, ao analisar as sugestões de melhorias para a equipe que não utilizou o FTSProc verificamos que há indicações para utilizar técnicas e práticas que o FTSProc já utiliza, tais como:
Testes unitários, Test-driven (TDD), uma forma de informar o que foi realizado e a definição de um sistema de sincronização de tarefas.
A o analisarmos os pontos negativos apontados na equipe FTSProc notamos que os poucos pontos citados, são relacionados não ao processo em si, mas às dificuldades encontradas em qualquer projeto, mesmo os que são desenvolvidos de forma co-localizados.
A dependência da ferramenta, apontada como um dos pontos negativos, está relacionada ao fato da ferramenta de apoio desenvolvida ser responsável por o controle do fluxo de trabalho, então, qualquer problema na ferramenta pode prejudicar o andamento do projeto.
Outro ponto levantado está no fato de não haver a definição de um &quot;vocabulário «único.
Em este caso, pode haver problemas de interpretação, já que as perguntas são respondidas através de texto livre.
O último ponto levantado mostra que problemas gerados afetam o time como um todo.
Em este sentido, notamos que este problema está relacionado ao fato do trabalho ser continuado shift após shift, ou seja, um defeito gerado e não concertado é transferido para o próximo site.
Esta análise qualitativa nos permitiu identificar que o FTSProc apresentou diversos pontos positivos, como a utilização das 3 perguntas base do processo e utilização de TDD.
Ainda, a análise dos resultados do experimento e do questionário apresenta indícios da maior eficiência de projetos que utilizam o FTSProc em relação a os projetos executados de forma ad hoc.
Devido a o fato dos resultados do experimento realizado terem sido amplamente favoráveis ao processo proposto, optamos por não fazer modificações no processo proposto.
Portanto, o FTSProc descrito no capítulo 4 é considerado a versão final do processo desenvolvido neste trabalho.
Entretanto, por este ser um estudo exploratório numa nova temática de pesquisa, o mesmo não pode ser considerado um trabalho final nesta área.
Portanto, apesar de os resultados favoráveis encontrados durante desenvolvimento desta pesquisa foram identificadas algumas limitações, como por exemplo, a falta de um experimento com um número maior de participantes possibilitando assim, uma análise estatística dos resultados.
Ainda, durante esta pesquisa foram identificados ainda alguns trabalhos futuros, como por exemplo, a necessidade de expandir este tipo de pesquisa para outras fases do desenvolvimento de software.
O capítulo 7 apresenta detalhadamente estas informações nas sessões de limitações do trabalho e estudos futuros.
A o final deste estudo, objetivos inicialmente propostos para este trabalho foram alcançados.
Conforme abordado nos capítulos 4 e 5, o objetivo geral desta pesquisa, o qual sugeria criação de um processo de transferência de trabalho (hand-off), foi atingido.
Este processo proposto, denominado FTSProc, é considerado a principal contribuição desta pesquisa.
O objetivo específico de complementar os estudos da base teórica, focando nas temáticas principais desta pesquisa (DDS e FTS) também foi atingido, conforme apresentado no capítulo 2.
Este aprofundamento da base teórica foi utilizado para alcançar outro objetivo específico, o qual era propor um processo preliminar de transferência de trabalho durante fase de desenvolvimento do ciclo de vida.
Este processo foi denominado FTSProc e está detalhadamente apresentado no capítulo 4 portanto, este objetivo específico foi atingido.
Outro objetivo específico proposto no inicio desta pesquisa foi a criação de uma ferramenta de apoio ao processo criado.
Após a criação do processo, foi desenvolvida uma ferramenta de apoio, descrita na seção 4.1, portanto, este objetivo específico foi atingido.
Após definir o processo e desenvolver a ferramenta de apoio, foi realizado um experimento para avaliar a eficiência do processo criado.
Os resultados obtidos neste experimento foram favoráveis ao FTSProc.
Conforme apresentado nos capítulos 5 e 6, os resultados oriundos do experimento fornecem fortes indícios de que projetos que utilizam o FTSProc tem maior eficiência.
Através do experimento, verificou- se também que o processo alcança os seus objetivos iniciais, os quais facilitam a adoção da estratégia FTS em projetos de desenvolvimento de software.
As contribuições deste estudo situam- se em três dimensões:
Para a teoria, para o mercado e para o pesquisador:
Para a teoria da área, a principal contribuição desta pesquisa foi a criação de um processo para a transferência de trabalho, durante a fase de desenvolvimento.
Conforme apresentado no capítulo 4, o processo foi proposto com dados oriundos da base teórica.
Conforme podemos verificar na Tabela 1, o objetivo principal do FTS é a redução do tempo de desenvolvimento de um projeto.
Já a Tabela 3 apresenta como os trabalhos relacionados buscam alcançar esta redução.
Com base nestas comparações e nos resultados obtidos, podemos verificar que o FTSProc consegue reduzir o tempo de desenvolvimento, utilizando diversas contribuições de diferentes trabalhos relacionados.
Após o experimento, descrito no capítulo 5, e os seus resultados descritos no capítulo 6, verificamos que o mesmo mostrou- se eficaz.
Este ponto é outra contribuição importante para a teoria, pois enquanto a literatura ainda não apresenta um processo específico para a fase de desenvolvimento, neste estudo foi proposto um processo, realizado um experimento, e apontado indícios da eficácia do processo proposto.
Além de isto, como contribuição deste trabalho pode- se citar a avaliação do processo FTSProc através de um método experimental num cenário de DDS, identificando os benefícios de sua utilização e ainda, a descrição detalhada, lições aprendidas e disponibilização da instrumentação do experimento realizado, permitindo que o mesmo seja replicado para novas avaliações do processo.
Ainda, para a teoria, outra contribuição está no fato da estratégia FTS ser uma área recente de estudo na engenharia de software, havendo poucos estudos publicados sobre esta temática.
Portanto, esta pesquisa é um avanço nesta área de estudo.
Finalmente, outra contribuição desta pesquisa para a teoria foi a criação de uma definição para este conceito, o qual está apresentado na seção 2.2.1.
Cabe salientar ainda, que esta definição foi tema de um artigo publicado no decorrer de esta pesquisa.
Para o mercado, notamos que atualmente, na busca de vantagens competitivas, como a diminuição de custo e o ganho de produtividade, as indústrias estão realizando operações offshore.
Em este sentido, este trabalho pode contribuir com o aumento do ganho de produtividade, já que o processo criado facilita o uso da estratégia FTS durante a fase de desenvolvimento, diminuindo assim, o tempo gasto durante esta fase do ciclo de vida.
Portanto, acredita- se que o processo proposto seja um ponto de partida para que as organizações que trabalham de forma distribuída possam iniciar a utilização desta estratégia.
Ainda, além de o processo, considera- se também a ferramenta de apoio que, mesmo ainda sendo um protótipo, uma importante contribuição do ponto de vista prático, já que a mesma oferece um importante conjunto de funcionalidades.
Para o pesquisador, este trabalho proporcionou a oportunidade de pesquisar uma área de estudo até então desconhecida:
A estratégia FTS.
Por outro lado, possibilitou o aprofundamento nos conhecimentos na área de DDS.
Com o conhecimento adquirido durante o desenvolvimento desta pesquisa será possível dar continuidade aos estudos na área acadêmica ou ainda, aplicar os conhecimentos obtidos durante esta pesquisa no aspecto profissional.
A primeira limitação deste trabalho está no tempo disponível da pesquisa.
Conforme o planejamento inicial, o tema desta pesquisa era a utilização de Arquitetura Orientada a Serviço (Soa) em ambientes de DDS.
Entretanto, ao final do primeiro semestre, houve a troca do tema para a estratégia FTS.
Desta forma, foi necessário refazer grande parte do estudo da base teórica principalmente na temática da estratégia FTS e por esta razão, foi perdido aproximadamente 25% do tempo disponível.
Portanto, apesar de os objetivos terem sido atingidos de forma satisfatória, acredita- se que a pesquisa poderia ter avançado ainda mais.
Outras limitações deste trabalho estão diretamente relacionadas a avaliação utilizada do processo FTSProc.
Em o experimento realizado obteve- se um baixo número de participantes, o que impossibilitou a utilização de métodos estatísticos para a comprovação das hipóteses, optando- se então, por uma interpretação de base qualitativa para analisar os resultados obtidos.
Esta interpretação apresentou indícios da maior eficiência do projeto que utilizou o FTSProc, porém não permitiu a obtenção de conclusões com um grau de confiança significativo, o que é alcançado através do uso de experimentos com análise estatística dos resultados.
Além de isto, como restrições deste trabalho, têm- se a generalização do experimento considerada específica, devido a o fato do escopo do projeto ser fictício e criado por o Pesquisador.
Ainda, têm- se as questões pertinentes a aplicação de um método de pesquisa experimental, como a influência subjetiva do pesquisador ou dos participantes nos resultados.
A ferramenta de apoio criada para o FTSProc ainda é um protótipo e portanto, pode ser considerada uma das limitações desta pesquisa.
Apesar de ter sido implementado todos os requisitos planejado, antes de utilizar a ferramenta num ambiente real, seria necessário rever, aspectos de usabilidade, desempenho e confiabilidade da ferramenta.
A interpretação dos resultados do experimento apresentaram indícios favoráveis para projetos que utilizam o FTSProc, indicando que ele é mais eficiente para projetos distribuídos que utilizam a estratégia FTS do que projetos ad hoc, comumente utilizado nas empresas.
De esta maneira, com o finalidade de comprovar os indícios apresentados por o método experimental, sugere- se como estudos futuros a replicação do experimento com uma amostra maior para avaliar o FTSProc, a qual permita uma validação estatística significativa para a obtenção de conclusões sobre as hipóteses.
Ainda, é relevante a realização de um estudo de caso para avaliar a utilização do processo criado num ambiente real, utilizando um projeto e uma equipe real numa empresa que utiliza o desenvolvimento distribuído de software.
Desta forma, será possível verificar o comportamento do processo neste tipo de ambiente.
Assim pode- se comprovar se os resultados encontrados nesta pesquisa, através de um experimento controlado, são equivalentes num ambiente real.
Finalmente, trabalhos com o objetivo de expandir este processo para outras fases dos projetos de software são relevantes.
Desta forma, outras fases do SDLC poderiam ser contempladas com a criação de um processo para facilitar o uso da estratégia FTS.
Focando em fases especificas de diferentes formas, ao final, pode- se criar um processo composto por diversos sub-processos, os quais contemplariam todas as fases do SDLC.
Desta forma, todo o projeto de software poderia ser realizado utilizando a estratégia FTS e, assim, reduzindo o tempo de construção em todas as fases de um projeto.
Outro objetivo específico desta pesquisa inicialmente planejado foi a submissão de artigos científicos no decorrer de o trabalho.
Este objetivo foi atingido, pois no decorrer de a pesquisa, foram produzidos os seguintes artigos:
Artigo Publicado ­ Researching into Follow-the-Sun Software Development:
Challenges and Opportunities -- Local de publicação:
Global Software Engineering.
IEEE Computer Society, Finlândia. --
Em esse artigo é descrito a necessidade da criação de um processo de transferência de trabalho para projetos que utilizam a estratégia FTS;
Proposta de uma definição para o conceito FTS.
Artigo Publicado ­ Follow-the-Sun:
Um Processo para Minimizar as Dificuldades de Projetos que Adotam esta Estratégia -- Local de publicação:
V Workshop de Desenvolvimento Distribuído de Software ­ WDDS 2011 -- CBSoft, São Paulo; --
Em esse artigo é apresentado o processo preliminar proposto para a transferência de trabalho para projetos que utilizam a estratégia FTS, e demonstra a necessidade da realização de um experimento para avaliar a eficiência do processo.
Artigo aceito como pôster ­ Challenges in the Follow-the-Sun strategy:
How to alleviate them. --
Local de Publicação: AMCIS 2011 Proceedings -- All Submissions, Detroit, EUA. --
Em este artigo está descrito algumas dificuldades que a estratégia FTS apresenta, e formas para amenizar estas dificuldades, incluindo a ideia principal do processo proposto.
