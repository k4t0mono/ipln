A crescente globalização do ambiente de negócios tem afetado diretamente o mercado de desenvolvimento de software.
Em busca de vantagens competitivas como baixos custos, produtividade e qualidade na área de desenvolvimento de sistemas, diversas organizações optaram por distribuir o processo de desenvolvimento de software dentro de seu país, ou em outros países, como Índia, China e Brasil.
Entretanto, os desafios apresentados por a distribuição da equipe envolvida no processo de software são significativos.
Em esse contexto, a engenharia de requisitos é uma atividade influenciada por a distribuição das equipes.
O processo de requisitos, mesmo em ambientes co-localizados, é crítico no desenvolvimento de software.
A o lidar com a distância entre os envolvidos, as dificuldades com requisitos tendem a se exacerbar.
Para tratar questões como dispersão geográfica, diferenças culturais e dificuldades de comunicação, torna- se necessária a definição de novos processos, padrões e ferramentas, de forma a reduzir o impacto da dispersão das equipes na engenharia de requisitos.
Em esse sentido, esta dissertação de mestrado tem como objetivo propor um modelo de processo de engenharia de requisitos visando tratar questões relacionadas ao desenvolvimento distribuído de software.
O principal método de pesquisa utilizado foi o estudo de caso e a base empírica da pesquisa envolve uma unidade de desenvolvimento de software de uma empresa multinacional de grande porte localizada no Brasil.
A pesquisa contribui no sentido de propor um modelo de processo de engenharia de requisitos adequado à realidade de equipes dispersas.
Palavras-chave: Engenharia de Software, Processo de Desenvolvimento de Software, Desenvolvimento Distribuído de Software, Desenvolvimento Global de Software, Engenharia de Requisitos.
A crescente globalização do ambiente de negócios tem afetado diretamente o mercado de desenvolvimento de software.
Em busca de vantagens competitivas em termos de custos, produtividade ou qualidade na área de desenvolvimento de sistemas, por exemplo, diversas organizações optaram por distribuir o processo de desenvolvimento de software dentro de seu país, ou em outros países, como a Índia e o Brasil.
Estas regiões oferecem, muitas vezes, incentivos fiscais ou possuem grande concentração de massa crítica em determinadas áreas.
Embora o desenvolvimento de software tenha evoluído consideravelmente nas últimas décadas, ainda são enfrentadas diversas dificuldades.
Muitos projetos de software têm sido entregues atrasados ou com custos superiores ao esperado.
Freqüentemente, o software não realiza as funcionalidades desejadas por seus usuários.
A o optar por distribuir o processo de desenvolvimento, além de todas as dificuldades inerentes ao desenvolvimento co-localizado, uma organização começa a enfrentar diversos desafios de adaptação, diferenças culturais, planejamento do trabalho, comunicação, entre outros.
Em o processo de desenvolvimento de software, a engenharia de requisitos destaca- se como um ponto fundamental para o sucesso dos projetos.
Estudos mostram que os maiores problemas no desenvolvimento de software são relacionados com requisitos.
Uma incorreta engenharia de requisitos pode exercer um impacto negativo num projeto de software, como a necessidade de um novo ciclo de especificação, projeto, codificação e teste, afetando diretamente os custos e prazos envolvidos.
Em ambientes de desenvolvimento distribuído de software (DDS), dificuldades como distância, comunicação e cultura causam um aprofundamento dos problemas inerentes ao processo de engenharia de requisitos, que adquire um caráter ainda mais crítico.
Como a distância envolvida pode compreender países distantes, comumente a linguagem e a cultura são diferentes.
Com isso, os problemas causados por ambigüidade e falta de clareza nos requisitos são intensificados.
A compreensão dos requisitos ao serem lidos numa língua diferente da nativa é mais limitada, levando a interpretações incorretas.
Diferenças culturais como atitude em relação a a hierarquia, riscos e valores culturais podem ampliar a possibilidade de conflitos.
Sem o conhecimento presencial do ambiente onde o software será inserido, a compreensão das razões e expectativas motivadoras do software por parte de a equipe de desenvolvimento é reduzida.
A comunicação também apresenta novos desafios.
Com a perda de contato face-a-face entre a equipe de desenvolvimento e os usuários, existe uma maior dificuldade de esclarecimento em caso de dúvidas.
Além disso, com a utilização de meios de comunicação de baixo contexto, como correio eletrônico, o contato informal entre os membros dos diversos grupos é limitado, reduzindo a confiança entre eles.
Em casos de grupos separados por diversos fusos horários, em geral, ocorre uma maior demora na tomada de decisões.
Uma simples troca de mensagens por correio eletrônico para esclarecimento de um requisito pode levar dias se os horários de trabalho não coincidirem.
Reuniões por vídeo ou teleconferência podem perder a efetividade.
O comprometimento entre as equipes pode ser reduzido, se não houver confiança entre elas.
Considerando- se a crescente adoção do desenvolvimento distribuído de software, ainda existem poucos estudos abordando seu impacto na engenharia de requisitos.
Em os estudos encontrados, os aspectos técnicos não são avaliados em detalhe.
De essa forma, mostra- se necessário novos estudos sobre processos, padrões e ferramentas para compensar as dificuldades causadas por a distribuição das equipes na engenharia de requisitos.
Com base nesta contextualização, o tema escolhido para esta dissertação de mestrado é o processo de engenharia de requisitos em ambientes de desenvolvimento distribuído de software.
Este assunto é considerado de grande relevância por diversos autores, se constituindo numa boa área para pesquisa e aplicação.
É cada vez mais significativo o número de empresas que estão distribuindo seus processos de desenvolvimento de software ao redor de o mundo.
Por isso, o desenvolvimento distribuído tem atraído um maior volume de pesquisas na área de engenharia de software.
Os engenheiros de software têm reconhecido a grande influência desta nova forma de trabalho e estão em busca de modelos que facilitem o desenvolvimento de software com equipes geograficamente dispersas.
Segundo Carmel, as principais características que diferenciam o desenvolvimento distribuído de software do desenvolvimento co-localizado são a dispersão geográfica, a dispersão temporal e as diferenças culturais.
Problemas fundamentais da engenharia de requisitos são exacerbados quando as equipes de desenvolvimento de software estão distribuídas geograficamente.
A engenharia de requisitos, por ser uma atividade largamente dependente da comunicação, sofre com o impacto da dispersão das equipes.
Com as equipes distribuídas, a comunicação torna- se menos freqüente e mais restrita.
A dispersão temporal, principalmente advinda da diferença de fuso-horário, afeta atividades como a elicitação e a negociação de requisitos, introduzindo demoras e dificultando o contato síncrono entre as equipes.
A engenharia de requisitos, por depender de um bom relacionamento entre os envolvidos, também é influenciada por as diferenças culturais.
Estes desafios apresentados por a dispersão das equipes na engenharia de requisitos conduzem à necessidade de novas abordagens para redução de seu impacto.
Segundo Zowghi, o desenvolvimento distribuído de software necessita claramente de um processo de engenharia de requisitos diferenciado, tema central deste estudo.
Com base na contextualização apresentada na seção anterior, o objetivo principal desta pesquisa é a definição de um modelo de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software, respondendo à seguinte questão de pesquisa:
Como desenvolver a engenharia de requisitos num ambiente de desenvolvimento distribuído de software visando melhorar a qualidade das especificações geradas e simplificar as tarefas de gerenciamento?
A engenharia de requisitos é uma das fases mais importantes no desenvolvimento de software, pois em ela são identificados, analisados e definidos os propósitos, funcionalidades e o escopo do software.
A distribuição das equipes envolvidas no processo de desenvolvimento de software apresenta diversos desafios à engenharia de requisitos.
Por ser uma atividade rica em comunicação a engenharia de requisitos é afetada diretamente por a distância geográfica.
Ambigüidades e problemas de entendimento são exacerbados com as diferenças de idioma e cultura.
De a mesma forma, questões como gestão do conhecimento e diferenças de fuso horário exercem impacto nas atividades da engenharia de requisitos em ambientes de desenvolvimento distribuído de software.
De essa forma, o objetivo geral desta pesquisa é propor um modelo de processo de engenharia de requisitos visando tratar questões relacionadas ao desenvolvimento distribuído de software.
Para atender a este objetivo geral emergem os seguintes objetivos específicos:
Aprofundar o conhecimento em engenharia de requisitos, DDS e tópicos relacionados;
Identificar as principais categorias e fatores relacionados à engenharia de requisitos em ambientes de desenvolvimento distribuído de software;
Elaboração de uma proposta preliminar de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software;
Este volume está organizado em 8 capítulos.
Em o capítulo 2 apresenta- se o referencial teórico desta pesquisa, envolvendo os principais conceitos e implicações das áreas do estudo:
Em o capítulo 3, apresenta- se a metodologia de pesquisa, descrevendo cada uma das etapas do estudo, e apresentando o desenho de pesquisa em detalhe.
As principais categorias e fatores associados à engenharia de requisitos no desenvolvimento distribuído de software são descritos no capítulo 4, com base na teoria existente na área.
O capítulo 5 apresenta a proposta preliminar de processo de engenharia de requisitos para ambientes de DDS, avaliado num dos estudos de caso descritos no capítulo 6.
Em o capítulo 6 descrevem- se detalhadamente os dois estudos de caso desenvolvidos em organizações que realizam desenvolvimento distribuído de software.
O modelo de processo proposto é apresentado no capítulo 7, como conseqüência do processo de pesquisa como um todo, apoiado na revisão teórica desenvolvida (Capítulo 2) e nos resultados obtidos com o estudo de caso (Capítulo 6).
Finalmente, no capítulo 8 apresentam- se as considerações finais sobre o tema e enfocam- se os aspectos relacionados às contribuições e limitações deste estudo.
Concluí- se destacando rumos para futuras pesquisas na área.
Coerente com estudos de base qualitativa, o referencial teórico representa importante etapa da pesquisa.
Em a seção 2.1 apresenta- se a base teórica em engenharia de requisitos, incluindo conceituação e descrição do processo.
Após, na seção 2.2 é abordado o desenvolvimento distribuído de software, descrevendo os principais conceitos e motivações.
A o final são descritos os trabalhos relacionados (seção 2.3).
O sucesso no desenvolvimento de um software é medido principalmente por a forma com que ele realiza a tarefa para qual foi proposto.
O esforço de desenvolvimento é total ou parcialmente desperdiçado se o software, por melhor que seja a qualidade de sua codificação, não cumpre com a tarefa a que foi destinado.
De a mesma forma, se a base tecnológica (hardware, software e dispositivos) necessária ao software em questão não for compatível com a base existente onde ele será utilizado, todo (ou a maior parte) o trabalho de desenvolvimento pode se tornar inútil.
Para que o sucesso possa ser atingido, é fundamental que seja realizada uma tarefa de identificação e documentação das necessidades e propósitos de um software.
Esta tarefa, muitas vezes, exige uma compreensão do ambiente onde o software será inserido, considerando as características do negócio, as possíveis modificações futuras e as necessidades reais envolvidas no processo.
Pressman destaca que não existe uma forma incontestável de assegurar que a especificação de um sistema está propriamente de acordo com as necessidades do cliente, e que satisfaz suas necessidades.
Este é um desafio complexo enfrentado por os engenheiros de software, e o melhor modo de encarar- lo é através de um processo consistente de engenharia de requisitos.
Em este capítulo são apresentados os conceitos básicos e é destacada a importância da engenharia de requisitos no processo de desenvolvimento de software, de acordo com a visão de diversos autores.
Em seguida são apresentadas algumas das dificuldades e riscos da engenharia de requisitos, como forma de caracterização do assunto em estudo.
A engenharia de requisitos possui uma diversidade de termos que recebem diferentes definições dependendo dos autores e do momento em que foram escritos.
Existem críticas inclusive à utilização do termo engenharia de requisitos, pois alguns autores não consideram esta uma verdadeira &quot;engenharia».
Em 1995, Pressman utilizava o termo análise de requisitos, para referir- se ao processo como um todo.
Atualmente, adotou o termo engenharia de requisitos, considerando a análise de requisitos como uma de suas etapas.
Considerando esta diversidade de definições e termos existentes, esta seção busca reunir a visão de diversos autores com relação a os principais conceitos envolvidos na engenharia de requisitos, oferecendo um embasamento inicial do assunto.
Software Durante o desenvolvimento deste texto, o termo software será utilizado com significado equivalente a sistema, cujo significado é mais abrangente e de aplicação a variados contextos.
Sendo assim, software deve ser entendido como uma ferramenta de suporte à solução de problemas com o uso da informática.
Requisito De acordo com Dorfmann e Thayer um requisito é uma característica do software necessária para o usuário solucionar um problema de forma a atingir um objetivo.
Uma característica de software que deve ser realizada ou implementada por um sistema ou componente de sistema para satisfazer um contrato, padrão, especificação ou outra documentação formalmente imposta.
Siddiqi define requisitos como uma declaração completa do que o software irá fazer sem referir- se a como fazer- lo.
Kruchten define um requisito como uma condição ou capacidade que um software deve realizar.
Estas definições caracterizam os requisitos como forma de expressar as características necessárias e restrições impostas a um software, para que ele satisfaça as expectativas existentes.
Gougen acrescenta mais um elemento a esta definição, que tem se mostrado importante na utilização de requisitos.
Em sua visão, requisitos são propriedades que um software deve possuir para funcionar com sucesso no ambiente onde será utilizado.
Em este caso, o autor considera tanto o contexto social como o técnico do ambiente em que o software será utilizado.
Esta contextualização é necessária, pois muitas das informações para os requisitos estão ligadas ao ambiente social dos usuários e gerentes, e podem ser informais ou tácitas.
Diversos autores dividem os requisitos em dois tipos:
Funcionais (o que o software deve fazer) e não-funcionais (como o software se comporta em relação a alguns atributos observáveis, como desempenho, confiabilidade, etc).
De acordo com Kruchten, requisitos funcionais são utilizados para expressar o comportamento de um software através da especificação das condições de entrada e saída que deve possuir.
Requisitos não-funcionais são atributos desejados de qualidade que não são descritos por os requisitos funcionais.
Thayer e Dorfman complementam:
&quot;Os requisitos funcionais capturam a natureza da interação entre o componente e seu ambiente.
Os requisitos não-funcionais restringem os tipos de solução que podem ser consideradas».
Stakeholder A definição mais utilizada para stakeholder provavelmente é a de Freeman, na literatura de gerência estratégica (apud):
&quot;Um stakeholder numa organização é (por definição) qualquer grupo ou indivíduo que pode afetar ou ser afetado por a obtenção dos objetivos da organização».
Em uma definição aplicada a sistemas de informação, Leffingwell e Widrig caracterizam stakeholder como qualquer pessoa que possa ser afetada por a implementação de um sistema ou aplicação.
Kruchten define stakeholder como qualquer pessoa ou representante de uma organização que possua um stake -- um grande interesse -- no resultado de um projeto.
O stakeholder mais óbvio é o usuário final, mas devemos lembrar de considerar outros stakeholders importantes:
Compradores, contratantes, desenvolvedores, gerentes de projeto ou quaisquer outros que se importem ou cujas necessidades devam ser satisfeitas por o projeto.
Engenharia de requisitos Segundo Zave, a engenharia de requisitos é a área da engenharia de software que se preocupa com as metas reais, funções e restrições de software.
Ela também se preocupa com o relacionamento destes fatores com uma precisa especificação do comportamento do software e sua evolução através do tempo e das famílias de software.
Em a visão de Pressmann, a engenharia de requisitos fornece os mecanismos apropriados para entender o que o cliente quer, analisar necessidades, analisar o que é possível ser feito, negociar uma solução razoável, especificar uma solução não ambígua, validar a especificação e gerenciar os requisitos conforme eles se transformam num software operante.
Thayer e Dorfman definem engenharia de requisitos como a ciência e disciplina preocupada com a análise e documentação dos requisitos, incluindo análise das necessidades e análise e especificação dos requisitos.
Além disso, a engenharia de requisitos fornece mecanismos apropriados para facilitar as atividades de análise, documentação e verificação.
Um processo de engenharia de requisitos é um conjunto estruturado de atividades que são seguidas para derivar, validar e manter um documento de requisitos de um sistema.
Uma descrição completa de um processo deve incluir as atividades que devem ser conduzidas, sua estrutura ou agenda destas atividades, as entradas e saídas de cada atividade e as ferramentas utilizadas para suportar a engenharia de requisitos.
Não existe um processo único que possa ser utilizado por todas as organizações.
Cada organização deve desenvolver seu próprio processo para adaptar- se aos tipos de sistema em desenvolvimento, cultura organizacional, experiência dos envolvidos, entre outros.
De forma abstrata, a maioria dos processos de engenharia de requisitos podem ser descritos num modelo de atividades de alta granularidade, como apresentado na Figura 1.
Elicitação de requisitos Análise e negociação de requisitos Documentação de requisitos Informações do domínio das necessidades dos usuários, informações sobre o sistema existente, regulamentos, normas, etc..
As atividades apresentadas no modelo são descritas a seguir Elicitação dos requisitos:
Em esta fase são identificadas as expectativas e necessidades dos stakeholders com relação a o software a ser desenvolvido;
Análise e negociação dos requisitos:
Depois de obtidos os requisitos iniciais, estes são utilizados como base para análise dos requisitos.
A análise distribui os requisitos em categorias, explora as relações entre eles, e classifica a importância de cada um dos requisitos de acordo com as necessidades dos stakeholders.
Os requisitos são negociados para decidir quais devem ser aceitos, de forma a obter consenso;
Documentação dos requisitos:
Os requisitos são documentados num nível apropriado de detalhe.
Em geral, é produzido um documento de especificação de requisitos, de forma que todos os stakeholders possam entender- lo;
Validação dos requisitos:
Esta etapa examina a especificação do software, de forma a assegurar que todos os requisitos foram definidos sem ambigüidades, inconsistências ou omissões, e que todos os erros foram detectados e corrigidos.
Em paralelo com estas atividades está o processo de gerência dos requisitos, voltado ao endereçamento de modificações nos requisitos.
A gerência de requisitos busca manter registro das modificações e assegura que elas ocorram de forma controlada no documento de requisitos.
A maior dificuldade na construção de um software é decidir precisamente o que construir.
Nenhuma outra parte do trabalho conceitual é mais difícil quanto estabelecer detalhadamente os requisitos técnicos.
Nenhuma outra parte é mais difícil de ser corrigida tardiamente.
Embora esta dificuldade tenha sido percebida há mais de 10 anos, ainda hoje ela está presente no processo de software.
A engenharia de requisitos é a área da engenharia de software onde a distância entre teoria e prática está mais evidente.
A Tabela 1 apresenta uma compilação das principais dificuldades relatadas na literatura da área de engenharia de requisitos, detalhadas ao longo de a seção.
Durante o processo de Er, costuma- se dedicar pouca atenção à identificação dos stakeholders Esta deficiência já foi percebida por diversos autores, onde as abordagens foram criticadas por assumirem que a identificação dos stakeholders é óbvia, ou por fornecerem categorias abrangentes que são muito genéricas para uso prático.
A dificuldade de identificação de stakeholders torna- se ainda mais crítica em ambientes de desenvolvimento global.
Sem a percepção presencial do ambiente onde o software em desenvolvimento será utilizado, a capacidade de descoberta das pessoas envolvidas é prejudicada.
Em a Engenharia de Requisitos, os stakeholders exercem um papel fundamental na definição dos requisitos.
Se forem selecionadas pessoas com pequeno grau de envolvimento, ou um número insuficiente ou excessivo de stakeholders, o resultado final pode ser desastroso.
B) Ambigüidade e Falta de Clareza Tendo em vista que as especificações de requisitos servirão como base para contratos e desenvolvimento do software em questão, esta especificação de funcionamento do sistema deve ser clara.
A especificação dos requisitos de software não deve ser ambígua tanto para aqueles que a criaram quanto para aqueles que a utilizarão.
Entretanto, estes grupos freqüentemente não têm o mesmo nível de conhecimento e tendem a descrever os requisitos de forma diferente.
Em ambientes geograficamente distribuídos as diferenças de língua e cultura podem facilmente levar a ambigüidades e redução na clareza dos requisitos.
A utilização de gírias ou palavras de pouco uso dificulta o entendimento e a correta especificação dos requisitos.
Estes erros ainda podem surgir de uma compreensão diferenciada de um termo entre participantes de paises diferentes.
Além disso, os meios de comunicação utilizados (computadores, videoconferência, teleconferência) em geral não possuem mecanismos que permitam perceber componentes não-verbais na interação.
Alternativas, como emoticons, em geral são insuficientes ou de pouca eficácia para melhorar a percepção e o entendimento da comunicação.
A utilização de linguagem natural para especificação simplifica o entendimento por parte de os stakeholders, mas possibilita a expressão de características ambíguas, inconsistentes, e provavelmente de difícil gerenciamento devido a o tamanho.
Além disso, a linguagem natural pode ser pouco clara, levando os desenvolvedores a criar um produto com funcionamento incorreto.
Por outro lado, a expressão dos requisitos utilizando técnicas mais formais, como maquinas de estados finitos, pode tornar claro para os desenvolvedores, mas será de difícil compreensão por parte de os clientes.
É necessária a definição de uma linguagem de especificação comum ao pessoal técnico e não técnico envolvido no projeto, que contribua com a clareza e a redução de ambigüidades na especificação dos requisitos.
C) Rastreamento dos Requisitos O rastreamento dos requisitos refere- se à habilidade para descrever e seguir a vida de um requisito em ambas as direções, para frente e para trás.
Isto é, desde a raiz, desenvolvimento e especificação (para trás), no subseqüente emprego e uso e durante períodos de refinamento e iteração em qualquer das fases relatadas (para frente).
É uma técnica fundamental no apoio às diversas atividades do projeto, assegurando que sistemas e software estão em conformidade às mudanças dos requisitos.
Entretanto, é citada como uma área problema por os desenvolvedores.
O rastreamento dos requisitos é necessário para garantir a qualidade do processo de software (mas não suficiente) e relativamente simples (em conceito e implementação), mas mesmo assim muitas empresas não o realizam.
A principal justificativa é o esforço necessário para o rastreamento dos requisitos, que se manifesta em aumento no custo e no tempo de um projeto.
E ambientes distribuídos, a dificuldade de se rastrear requisitos pode ser ampliada se existirem diferentes tratamentos para os requisitos por as equipes de desenvolvimento.
Determinadas equipes podem utilizar rastreamento, enquanto que outras não, reduzindo (ou eliminando) os benefícios deste processo.
Sem a utilização de mecanismos de rastreamento, podem surgir inconsistências durante o processo de adição, remoção ou substituição de requisitos na Er, que são resultado de enganos ou conflitos entre os requisitos.
D) Dificuldades de Comunicação A engenharia de requisitos envolve grande interação social, entre os diversos participantes do processo.
O desenvolvimento de um novo software sempre afeta as pessoas (usuários e gerentes) envolvidas, tanto em aspectos comportamentais como processuais.
Conseqüentemente, a Er deve ser sensível à forma com que as pessoas percebem e entendem o mundo a sua volta, como eles interagem, e como a sociologia do local de trabalho pode afetar suas ações.
Em este sentido, a comunicação entre os participantes do projeto torna- se crítica.
A consciência deste tipo de dificuldade no processo de Er tem levado alguns analistas a procurar apoio em outras áreas do conhecimento, tais como psicologia, sociologia e lingüística.
A compreensão do ambiente sociológico em que a Er está inserida nem sempre é uma tarefa simples.
Se os participantes no processo não analisarem corretamente o ambiente e se posicionarem de acordo, podem surgir diversas dificuldades de comunicação, provavelmente causando uma especificação incompleta ou incorreta, e a um produto final não satisfatório.
Em caso de ambientes geograficamente distribuídos, as dificuldades de comunicação se acentuam, uma vez que a comunicação entre os grupos não ocorre pessoalmente, e sim através de ferramentas de e-mail, teleconferência e trocas de mensagens, por exemplo.
Interações mais freqüentes levam a uma maior credibilidade das pessoas.
As pessoas de maior crédito são aquelas mais acessíveis ou disponíveis.
Enquanto equipes de mesma localização podem ampliar a credibilidade através de interações formais e informais, a distância é um fator impeditivo na construção de relações de credibilidade.
A tarefa da conversa no cafezinho é importante novamente, uma vez que à distância é difícil tornar- se uma equipe.
O contato pessoal, o conhecimento das personalidades e valores é necessário para obter o engajamento, credibilidade e o espírito de equipe.
E) Diferenças Culturais A diversidade cultural existente na maioria das empresas atuais pode gerar problemas na etapa de Er.
Os diferentes valores, expectativas e dinâmicas podem levar a desentendimentos entre os participantes do processo.
Por outro lado, toda esta diversidade, se corretamente conduzida, introduz visões e possibilidades que poderiam não ser percebidos em ambientes de cultura homogênea.
Os resultados obtidos da interação em ambientes culturalmente diversos podem ser surpreendentes.
Em ambientes distribuídos, as dificuldades causadas por as diferenças culturais são ampliadas, devido a a distribuição geográfica em questão.
Por exemplo, para algumas culturas, a estabilidade é muito importante.
Então, ao solicitar requisitos para um novo release, eles podem solicitar alguns requisitos puramente porque eles estavam numa versão anterior do software.
Clientes de outros ambientes culturais, entretanto, podem solicitar características completamente novas, apenas porque querem estar atualizados e em progresso na sua abordagem tecnológica.
Estes valores culturais conflitantes influenciam na ordem, priorização e negociação dos requisitos.
Esta dificuldade dependendo de como é tratada, pode introduzir elementos prejudiciais ou benéficos, isto torna a heterogeneidade cultural um fator importante a ser explorado em estudos futuros.
Em os últimos anos, o software se tornou um componente vital de negócios.
O sucesso de uma organização cada vez mais depende da utilização do software como um diferencial competitivo.
Ao mesmo tempo, a economia tem convertido os mercados nacionais em mercados globais, criando novas formas de competição e colaboração.
Entretanto, o mercado global de software vem passando por diversas crises.
Por um lado, um grande número de falhas em projetos.
De outro, uma demanda crescente, atingida por a escassez de recursos capacitados.
Em esse contexto, muitas organizações perceberam o desenvolvimento distribuído de software como uma alternativa, experimentando o desenvolvimento em locais remotos.
Atualmente um grande número de organizações realiza desenvolvimento distribuído de software, e o assunto está cada vez mais presente em congressos, workshops e grupos de Global Software Development Working Group2 e o grupo de pesquisa MuNDDoS3.
Esta seção apresenta uma revisão bibliográfica em desenvolvimento distribuído de software.
Inicialmente são apresentados os principais conceitos envolvidos.
Em seguida são descritas as razões que levam ao uso do DDS.
A o final, são apresentados os principais desafios impostos por o desenvolvimento distribuído de software.
O desenvolvimento distribuído de software, considerada sua recente aplicação e grande abrangência, possui uma diversidade de conceitos que auxiliam sua caracterização.
Dentro de o contexto de desenvolvimento distribuído de software, foram aplicados conceitos de equipes globais e organizações virtuais, por exemplo, ampliando a extensão do conhecimento envolvido.
Considerando a diversidade conceitual atingida por o DDS, esta subseção reúne a visão de diversos autores com relação a os principais conceitos envolvidos no desenvolvimento distribuído de software, oferecendo um embasamento inicial do assunto.
Desenvolvimento Distribuído de Software (DDS) O desenvolvimento distribuído de software caracteriza- se por a distância física e/ ou temporal entre alguns elementos (cliente, usuário e desenvolvedores, por exemplo) envolvidos no processo de desenvolvimento.
Outsourcing Outsourcing é a prática de contratar uma organização externa para desenvolver um software, ao invés de desenvolver- lo na própria sede (in-house).
Desenvolvimento Global de Software (DGS) O desenvolvimento global de software (Global Software Development -- GSD) ocorre quando a distância física entre os elementos de um DDS envolve mais de um país.
Offshore outsorcing é uma opção do outsorcing que tem se tornado bastante popular nos últimos anos.
Organizações offshore são empresas localizadas em outro país, geralmente oferecendo um custo menor de desenvolvimento.
Offshore insourcing O offshore insourcing é caracterizado por a contratação de uma subsidiária da própria organização, localizada em outro país.
Organização virtual de desenvolvimento de software Uma organização virtual de desenvolvimento de software é caracterizada por realizar partes de um projeto em locais distintos, comportando- se como se estivesse no mesmo local Equipes globais Uma equipe global, de acordo com Marquardt, refere- se a um grupo de pessoas de diferentes nacionalidades que trabalham unidas num projeto comum, através de culturas e fusos horários distintos, por um extenso período de tempo.
Equipes Globais de Desenvolvimento de Software Uma equipe global de desenvolvimento de software (Global Software Team) é distribuída em dois ou mais países, colaborando ativamente num projeto comum de desenvolvimento de software.
O desenvolvimento de software costumava ser realizado apenas por pessoas com altíssimo grau de especialização, trabalhando em centros de processamento de dados de países avançados.
Hoje, entretanto, o desenvolvimento de software, cada vez mais, ocorre de forma distribuída.
Em 2000, 203 das empresas americanas na Fortune 5004 realizavam outsorcing offshore.
A) Demanda e custos A demanda por serviços de software tem superado historicamente a disponibilidade de pessoas que os realizam (Figura 3).
Como conseqüência, o custo dos profissionais de desenvolvimento de software cresceu, conforme as empresas competiam por suas contratações.
Em o mercado americano, responsável por grande parte da demanda, as cotas de vistos de trabalho temporário para área de tecnologia se esgotavam antes do final do ano fiscal, gerando uma maior escassez de profissionais.
De essa forma, com um número de funcionários insuficiente e custos de contratação altíssimos, a disponibilidade de recursos equivalentes em outras localidades a um custo mais baixo, tornou- se um grande atrativo para as empresas de software, motivando o desenvolvimento distribuído.
B) &quot;Time- to-- market «As pressões para reduzir o tempo necessário para colocar um produto em mercado (time- to-- market) também auxiliam no crescimento do DDS.
A possibilidade de desenvolvimento follow-the-sun é um grande atrativo para empresas que visam reduzir o timeto-- market.
Em o desenvolvimento follow-the-sun equipes são distribuídas ao redor de o globo, de forma que há sempre pelo menos uma equipe disponível realizando o trabalho.
De essa forma, uma desvantagem do DDS (distância geográfica) transforma- se numa vantagem competitiva, permitindo trabalhar 24 horas por dia.
C) Mercado e presença global Outro fator importante é o crescente mercado de software externo à América do Norte e Europa.
Conforme os custos se reduzem e o poder computacional aumenta, o mercado global de informática cresce, apresentando grande demanda por soluções de software.
Em conjunto, para melhor satisfazer o mercado consumidor, a presença das corporações se torna necessária para venda, projeto e manutenção do software.
De essa forma, muitas empresas optam por o DDS para atingir o mercado global e ficarem próximas a seus consumidores.
Além disso, obtém- se o diferencial de se tornar uma empresa global, um bom atrativo de marketing.
D) Rigor e experiência no desenvolvimento Equipes de desenvolvimento co-localizadas tendem a utilizar mais de mecanismos informais, descuidando no uso de metodologias formais de desenvolvimento e práticas de qualidade.
Equipes de DDS, por outro lado, na tentativa de melhorar a comunicação entre os locais de desenvolvimento, tendem a melhorar significativamente a documentação utilizada Além disso, em muitos casos, determinados locais desenvolvem experiência e habilidade em áreas pouco difundidas em outros pontos da organização.
Em estes casos, a experiência de um local específico pode ser um diferencial para que o desenvolvimento seja realizado em ele.
E) Sinergia cultural A diversidade amplia a criatividade e a inspiração na organização de desenvolvimento de software.
Uma equipe global cria uma sinergia cultural, encontrando novas formas de resolver problemas, projetar produtos, ou pensar sobre os processos de desenvolvimento.
Além disso, a sinergia cultural, ligada à demanda e aos desafios envolvidos, amplia a capacidade de aprendizado da organização.
F) Escala Conforme os centros de desenvolvimento de software aumentam, tornam- se grandes e difíceis de gerenciar.
Com isso, faz- se necessário distribuir o desenvolvimento de forma a atender a demanda.
O desenvolvimento de software sempre se apresentou de forma complexa.
Existem uma série de problemas e desafios inerentes ao processo.
O DDS ao acrescentar fatores como dispersão física, distância temporal e diferenças culturais, acentuou alguns dos desafios existentes e acrescentou novos desafios ao processo de desenvolvimento.
Em esta seção são apresentados os principais desafios gerados por o DDS, de acordo com a visão de diversos autores.
A Tabela 2 apresenta uma compilação dos principais desafios e questões envolvidas com o DDS.
O gerenciamento da diversidade cultural é fundamental para a efetividade de uma equipe distribuída, principalmente em âmbito global.
A cultura, consciente ou inconscientemente, forma os valores, percepções e o comportamento de um grupo, bem como de cada um de seus membros.
Culturas diferem em muitas dimensões críticas, como a necessidade de estrutura, atitudes com relação a a hierarquia, senso de tempo e estilos de comunicação.
De essa forma, membros de uma equipe podem ver a realidade de forma diferente, cada um acreditando que sua própria percepção é a mais correta.
O desafio de equipes globais é atingir um equilíbrio entre encorajar o livre fluxo de idéias, e o controle das diferenças culturais entre seus membros.
Questões como liderança, por exemplo, costumam fazer com que o processo decisório em equipes distribuídas seja mais demorado ou complexo.
Líderes de algumas culturas costumam tratar a equipe de forma participativa e democrática, encorajando a manifestação de opiniões.
Em contraste, líderes de outras culturas podem tratar a liderança de forma mais hierárquica, tomando decisões sem consultar os subordinados.
Pode haver uma hierarquia clara baseada em status, como família, idade, sexo ou títulos, desencorajando os subordinados a expressarem suas opiniões, por questões de respeito.
Problemas relacionados à formação de grupos também são comuns em ambientes de DDS.
Enquanto algumas culturas valorizam a independência e os direitos individuais, outras são coletivistas, subordinando os interesses do indivíduo para o bem do grupo.
Essas diferenças podem ser fonte de conflitos e rancor entre as equipes.
A comunicação entre membros de um grupo pode ser praticada de diversas formas, dependendo de sua cultura.
O estilo de comunicação pessoal, por exemplo, pode variar de expressivo a instrumental.
Um estilo de comunicação expressivo preocupa- se com o estabelecimento e manutenção de conexões pessoais e sociais, deixando a precisão da comunicação em segundo plano.
As pessoas são encorajadas a expressar emoções.
Abraços e toques são comuns.
Em comunicações de estilo instrumental, a preocupação maior é com o que está sendo dito.
Este estilo de comunicação é mais impessoal, centrado em problemas e orientado a objetivos.
A precisão é mais importante que um formato apropriado.
A resolução de problemas também pode ser vista de forma diferente de acordo com a cultura:
Pode ser linear, onde problemas são dissecados em pequenas partes ligadas em cadeias de causa e efeito, ou sistêmico, onde problemas são vistos de forma mais holística, com relacionamentos e caos como componentes comuns.
Além disso, a cultura difere na forma com que as soluções são feitas.
Algumas culturas buscam soluções genéricas, com a aplicação consistente de regras, procedimentos e generalização.
Outras culturas têm ênfase em diferenças, relativismo e individualidade.
A solução depende totalmente da situação e do contexto.
Diversas outras diferenças culturais podem afetar o DDS, como a forma de tratar conflitos, tempo, flexibilização, entre outros.
Todos estes fatores devem ser cuidadosamente analisados, de forma a minimizar seu impacto no andamento dos projetos.
B) Dispersão geográfica A tarefa de gerenciamento de grupos adquire maior complexidade com a dispersão.
A distância física e psicológica é considerada a segunda maior dificuldade em equipes distribuídas.
Embora a tecnologia permita que as organizações optem por a descentralização, ainda existem diversas limitações devido a o reduzido contato face a face entre os membros da equipe e entre a equipe e seus contatos externos.
Obter consenso e aprovação na tomada de decisões pode ser mais difícil.
Encontrar membros distantes do projeto, especialmente quando trabalham para diferentes organizações, e obter aprovação adequada de todos os locais envolvidos pode consumir bastante tempo Além de a dispersão física, a dispersão temporal exerce efeitos sobre o desenvolvimento distribuído de software.
Membros de uma equipe estão dispersos no tempo quando há diferença nos horários de trabalho, fusos horários, e/ ou ritmos de trabalho que diminuam o tempo disponível para interação síncrona (isto é, ao mesmo tempo).
Por exemplo, equipes separadas no eixo terrestre leste-oeste têm menor número de horas de trabalho coincidentes que equipes separadas no eixo norte-sul, tornando mais difícil a coordenação e comunicação.
Mesmo equipes co-localizadas podem ser separadas no tempo se seus membros trabalham em diferentes turnos.
A dispersão temporal também afeta a comunicação devido a os estados físicos e mentais dos participantes.
Elementos num local podem estar iniciando o dia, enquanto outros estão no final do expediente.
Equipes distribuídas globalmente também podem sofrer com o sentimento de isolamento.
Viagens constantes e ausências demandadas por as atividades da equipe podem ser desmoralizantes e prejudicar a convivência familiar.
Equipes globais podem operar vinte quatro horas por dia ao redor de o mundo, com decisões importantes ocorrendo durante a madrugada de alguns países envolvidos.
Dias de trabalho em algumas regiões (como sábados e domingos no golfo arábico) podem ser dias de descanso em outras.
Outras questões importantes dizem respeito às diferenças legais entre os locais envolvidos (principalmente em casos de distribuição global).
Essas diferenças implicam em maior complexidade no estabelecimento de contratos, bem como na necessidade de cautela com questões de sigilo e propriedade intelectual.
A co-localização e a dispersão estão ligadas ao antigo paradigma da centralização e descentralização das organizações.
A centralização concentra a tomada de decisão num único ponto da organização.
De acordo com antigas noções de gerenciamento, a descentralização da autoridade leva a perda de controle e aumento de custos, por exemplo, em telecomunicações.
Com novas tecnologias e redução nos custos, estes problemas foram amenizados, mas não removidos.
C) Coordenação e controle Coordenação (integração das tarefas e unidades organizacionais de forma que o esforço da equipe contribua para o objetivo geral) e controle (o processo de adesão a metas, políticas e padrões) têm ainda maior importância em equipes distribuídas.
As dificuldades e desafios na coordenação e controle em ambientes distribuídos são ampliados devido a os problemas de cultura, língua e tecnologia.
Equipes distribuídas apresentam dificuldades nos mecanismos de coordenação e controle, principalmente os informais.
Devido a a distância, o gerenciamento não pode ser feito por observação enquanto se caminha por o local de trabalho, ou reunindo a equipe em reuniões informais.
O grau de dependência das tarefas exerce um papel fundamental na coordenação.
Quando dois membros de uma equipe, com tarefas fortemente relacionadas, colaboram, a diferença de fuso horário pode dificultar a coordenação.
Não poder utilizar o telefone para resolver rapidamente questões simples pode desacelerar o progresso do grupo.
Freqüentemente as requisições não são claras, necessitando de novas comunicações.
Quando membros da equipe estão trabalhando face a face, a clarificação necessária pode ser obtida quase instantaneamente.
Entretanto, quando os membros da equipe estão distantes, a clarificação pode introduzir demoras.
Conforme a necessidade de coordenação em equipes distribuídas de desenvolvimento de software aumenta, cresce a carga em todas as formas de comunicação, do telefone ao software de gerenciamento de projetos.
O custo de coordenar o trabalho aumenta quando tarefas são novas ou incertas, ou quando as unidades de trabalho tornam- se mais interdependentes.
Isso significa que conforme a dependência entre as equipes aumenta, a necessidade de coordenação também aumenta, conforme Figura 4.
Custos de coordenação aumentam conforme a interdependência aumenta Recursos saída entrada Coordenação por união:
Equipes compartilham seus recursos, como espaço nos escritórios ou redes de computadores Coordenação seqüencial:
Comum em manufatura, bem como em projetos de software saída Coordenação recíproca:
Outro fator que torna a coordenação e o controle mais difíceis é o tamanho das equipes distribuídas.
Uma equipe distribuída é, em geral, maior, para uma mesma tarefa, que equipes co-localizadas.
Quanto mais pessoas e papéis envolvidos, mais desafiadores os problemas de coordenação e controle.
O gerenciamento da configuração de software (Software Configuration Management SCM) também apresenta novos desafios.
Controlar modificações nos artefatos em cada uma das localidades e coordenar o processo de modificação destas localidades com o processo de desenvolvimento de todo o produto pode ser bastante complexo.
A manutenção da consistência de padrões, como formato de documentação também é mais difícil em ambientes distribuídos.
Além disso, coordenar e tornar disponíveis as diferentes versões do software num tempo reduzido pode ser uma tarefa desafiadora.
A consciência das atividades desenvolvidas também apresenta desafios ao desenvolvimento distribuído de software.
Em o desenvolvimento de software é importante que se tenha consciência sobre o que está acontecendo, quem está realizando e onde está acontecendo, principalmente sobre dois itens:
Documentação e código.
Participantes necessitam saber os resultados dos outros, de forma a ampliar a colaboração D) Comunicação A dispersão geográfica tem impacto direto em todas as formas de comunicação.
A comunicação informal é reduzida drasticamente.
As pessoas deixam de se comunicar devido a as dificuldades impostas.
Mais reuniões são necessárias, e a complexidade de coordenar- las torna- se maior.
Comunicação clara e efetiva é absolutamente essencial para o sucesso de equipes distribuídas.
Entretanto, em muitos casos é necessário comunicar- se indiretamente (devido a a distância temporal), prejudicando a riqueza de contexto.
Comunicações podem variar de alto a baixo contexto, e diferentes culturas comunicam de forma diferente de acordo com a necessidade de contexto.
Culturas de alto contexto (ou ricas em contexto) têm a habilidade de compartilhar experiências e tornar inteligíveis determinadas mensagens sem precisar declarar explicitamente.
Regras de comportamento e expressão estão implícitas no contexto.
O sentido de uma frase não está somente nas palavras.
Ele pode estar no tom de voz, linguagem corporal, expressões faciais, contato visual ou uso do silêncio, por exemplo.
O significado tende a ser implícito, indireto, não literal.
Culturas de baixo contexto, por outro lado, enfatizam a troca de fatos e informações.
A mensagem é mais importante que a forma.
A informação está primariamente nas palavras, e o significado é explícito.
Em essas culturas, videoconferência e e-mails são usualmente aceitos como substitutos eficientes para comunicações face a face.
De a mesma forma, os meios de comunicação podem ser classificados de acordo com o nível de interação.
Meios de comunicação ricos permitem interações nos dois sentidos envolvendo mais de um canal sensorial.
A Figura 5 apresenta os diversos níveis de interação contextual.
Dados os diferentes estágios do ciclo de desenvolvimento de software, algumas tarefas necessitam de comunicação mais rica que outras.
O contato com o cliente deve ser o mais próximo de face a face possível durante a elicitação dos requisitos.
Análise e projeto de software necessita de meios ricos para que a colaboração ocorra.
De forma geral, qualquer tarefa que necessite de intensa cooperação requer mais comunicação, e quanto mais rica, melhor.
Determinadas tarefas exigem muito cuidado na escolha do meio de comunicação a ser utilizado.
Por exemplo, um gerente de desenvolvimento distribuído de software deve, regularmente, transmitir a visão de equipe para todos os grupos e culturas envolvidos, de forma que seja entendida.
Uma vez que a &quot;visão «deve utilizar níveis altos de motivação e emoção, um meio de comunicação adequado a essas características deve ser utilizado Alguns dos impactos da dispersão são:
O uso excessivo de comunicação, falta de comprometimento e desconforto ao utilizar alguns meios.
E) Espírito de equipe A palavra equipe, em geral, tende a subentender co-localização, homogeneidade cultural, confiança, padrões de comunicação, um pequeno número de membros e, mais importante, coesão.
Equipes são unidades sociais frágeis, que podem facilmente ser quebradas.
Quando apresentadas dificuldades como distância e diferenças culturais e de fuso horário, o espírito de equipe geralmente desaparece.
O espírito de equipe é o efeito sinérgico que torna a equipe uma unidade coesa.
Compartilhar uma visão das metas e ações da equipe pode ser difícil inclusive em ambientes com uma única cultura.
Em ambientes globais, multiculturais, é difícil até mesmo afirmar que todos os membros entendem o que é uma equipe.
Algumas culturas têm pouca experiência com trabalho em equipe, em algumas línguas a palavra equipe nem mesmo existe A coesão é uma característica fundamental o sucesso das equipes.
Equipes coesas têm maior motivação, moral e produtividade, além de melhor comunicação e satisfação com o trabalho.
Em o DDS a coesão é mais difícil de ser obtida, por diversos motivos.
Pessoas podem desconfiar de outras devido a a formação de estereótipos incorretos, falta de comunicação externa ao grupo, ou mesmo por os problemas causados por a diferença de linguagem.
A confiança, fundamental para o espírito de equipes, torna- se de difícil manutenção no DDS.
A construção desse tipo de relacionamento é impedida por a distância.
Equipes co-localizadas adquirem confiança uns nos outros através de encontros informais e face a face.
Como esse tipo de encontro não pode ser realizado devido a distância, muitas organizações investem em viagens para integração da equipe.
Além disso, equipes globais são, comumente, maiores que equipes co-localizadas, reduzindo o espírito de equipe.
A intimidade que surge da co-localização é perdida, e a complexidade da comunicação aumenta.
O tamanho do grupo é importante para assegurar que a comunicação de todos os membros ocorra de forma efetiva.
Quanto menor número de membros de uma equipe, menor o número de canais de comunicação necessários.
Com nove membros, uma equipe precisa gerenciar 36 canais de comunicação, que crescem de forma geométrica com a adição de membros ao grupo (Figura 6).
Por isso é importante que as equipes sejam pequenas, preferencialmente não contendo mais de dez pessoas.
O desenvolvimento distribuído de software apresenta algumas características que o diferenciam fundamentalmente do desenvolvimento co-localizado.
A engenharia de requisitos possui diversas tarefas que necessitam de alto nível de coordenação e comunicação, o que tende a ampliar as dificuldades quando em ambientes distribuídos.
Embora diversos estudos reconheçam a necessidade de ampliar o conhecimento em engenharia de requisitos em ambientes distribuídos, após uma pesquisa extensa, um número reduzido de artigos no tema foi encontrado.
Em esta seção é apresentada uma compilação dos principais artigos relacionados à engenharia de requisitos em ambientes distribuídos.
Os estudos de Damian e Zowghi têm como foco principal o entendimento e descrição do impacto exercido por a distância na negociação de requisitos de software, compreendendo grande parte do conhecimento atual sobre engenharia de requisitos em ambientes de desenvolvimento global de software.
Em um artigo recente, foi apresentada a relação entre cultura, conflitos e distância na negociação de requisitos de forma distribuída globalmente.
Para isso foi conduzida uma pesquisa baseada em estudos de caso, visando esclarecer o impacto causado por a distribuição dos stakeholders nas atividades de engenharia de requisitos em ambientes de DGS.
Como resultado foi construído um modelo dos desafios apresentados por a distribuição dos stakeholders à engenharia de requisitos, conforme apresentado na figura 5.
A camada superior do modelo apresenta os quatro maiores problemas da distribuição geográfica dos stakeholders:
Comunicação inadequada, gerência do conhecimento, diversidade cultural e diferença temporal.
Esses problemas se alinharam com estudos anteriores de DGS.
A segunda camada da figura mostra as dificuldades específicas encontradas, decorrentes dos problemas identificados.
Em a terceira camada, são apresentadas as atividades da engenharia de requisitos afetadas por cada uma das dificuldades encontradas.
O estudo, além de a construção do modelo, pôde obter também diversos resultados, relacionados com conflito, cultura e distância.
Este artigo apresenta um estudo empírico sobre como ferramentas de groupware podem ser utilizadas no auxílio da engenharia de requisitos em ambientes distribuídos.
Os principais objetivos do estudo foram:
Identificar os fatores que levam os grupos a produzirem uma especificação de requisitos de software (Software Requirements Specification -- SRS) de alta qualidade;
Avaliar a efetividade do groupware utilizado como suporte as atividades de engenharia de requisitos;
E avaliar a efetividade das diversas técnicas de elicitação de requisitos quando utilizadas em ambientes distribuídos.
O estudo foi realizado com grupos de estudantes universitários, divididos nos papéis de clientes e engenheiros, realizando especificação remotamente.
Como suporte, foi utilizado um conjunto de ferramentas de groupware.
Através da correlação entre pesquisa, observação e medição da qualidade dos documentos produzidos, os grupos participantes foram classificados em grupos de alta e de baixa performance.
Os grupos classificados como baixa performance tenderam a reclamar mais sobre a falta de participação dos clientes no processo de engenharia de requisitos (56% dos membros do grupo).
Os grupos classificados como alta performance registraram menor volume de reclamações.
A percepção de participação dos membros do grupo pôde ser relacionada, embora fracamente, de forma direta com a qualidade do SRS.
Os resultados desse estudo sugerem que a engenharia de requisitos em ambientes distribuídos é mais efetiva quando os stakeholders participam ativamente nas atividades síncronas do processo de requisitos.
O estudo aponta diversas possibilidades de trabalho futuro, ressaltando que a engenharia de requisitos em ambientes distribuídos é uma grande área para pesquisa futura.
O artigo escrito por Prikladnicki, Audy e Evaristo apresenta resultados iniciais de um estudo de caso do processo de gerência de requisitos no DGS, sob um contexto SW-CMM (Capability Maturity Model).
O método de pesquisa utilizado foi estudo de caso, com o acompanhamento de dois projetos numa organização de DGS.
Os projetos foram estudados sob o ponto de vista do centro de desenvolvimento localizado no Brasil.
A organização utiliza como base para o processo de desenvolvimento de software o MSF (Microsoft Solutions Framework) e o SWCMM.
O estudo tinha como objetivo identificar os problemas, vantagens e desvantagens da gerência de requisitos em projetos geograficamente distribuídos.
A implementação do nível 2 do SW-CMM no centro de desenvolvimento brasileiro, deu origem a algumas diferenças de processo com relação a as equipes de outras localidades, que não estavam envolvidas na certificação.
Isto ampliou o tempo de algumas atividades, devido a a necessidade de explanações a respeito de o processo.
Por outro lado, a implementação do SW-CMM auxiliou significativamente no processo de gerência dos requisitos e padronização das atividades.
Treinar a equipe em assuntos como confiança, cultura, comunicação e colaboração, por exemplo, é essencial;
A padronização do trabalho é obrigatória;
Encontros freqüentes com pessoas geograficamente distantes são importantes para rastrear o projeto;
Um processo bem definido é a chave para o sucesso;
Se possível, viagens devem ser feitas para que as equipes envolvidas se conheçam;
A diferença de fuso horário pode ser, ao mesmo tempo, uma vantagem e uma desvantagem;
O uso de ferramentas como correio eletrônico, teleconferência e videoconferência é muito importante;
Um processo de certificação como SW-CMM nível 2 pode ampliar o overhead;
O modelo SW-CMM nível 2 auxiliou a definir uma forma padrão de trabalho;
É muito importante conhecer as pessoas com quem se está trabalhando, considerando as formas de comunicar, as diferenças culturais, etc..
O artigo de Mahemoff e Johnston[ MAH98] embora não trate explicitamente do impacto do DDS na engenharia de requisitos, apresenta um estudo interessante quanto a o relacionamento da internacionalização de software e engenharia de requisitos.
Em o estudo é realizada uma revisão da bibliografia existente sobre o assunto e proposta a utilização de um repositório de informações culturais como forma de auxílio à internacionalização de software.
Os pontos principais estão destacados na seqüência.
Em geral, o desenvolvimento de software direcionado a diversas culturas envolve dois estágios:
Preparar o sistema principal de forma a permitir o processo de internacionalização (chamado de localization-enabling), e incluir os dados específicos de localização na estrutura internacionalizada (localization).
Quando apenas as características dependentes das necessidades específicas dos usuários são adaptadas, o esforço de desenvolvimento é otimizado.
As demais partes do sistema são comuns a todas as versões.
Separar os requisitos específicos de uma cultura dos requisitos que se aplicam a todas as versões é uma tarefa complexa.
O autor propõe categorizar os fatores culturais, permitindo a criação de um repositório central de informações culturais, de forma a auxiliar no processo.
Em o estudo, os fatores foram divididos em visíveis e ocultos, e classificados em subcategorias, conforme apresentado na Tabela 4.
Atualmente, pouco trabalho tem sido feito para documentar esse tipo de informação.
Muitos textos de internacionalização focam em problemas de implementação ao invés de conceitos de mais alto nível, como usabilidade.
Um repositório de informações poderia ser útil para desenvolvedores, projetistas, criadores de protótipos e testadores, por exemplo, adquirindo ainda mais importância para casos em que não fosse possível contratar um consultor local.
Zowghi apresenta um estudo cuja questão central é identificar se o desenvolvimento global de software necessita de um processo de engenharia de requisitos diferenciado.
O impacto do DGS no processo de engenharia de requisito é descrito, conduzindo à resposta da questão apontada, conforme apresentado na seqüência.
A engenharia de requisitos é a atividade mais rica em comunicação do desenvolvimento de software, uma vez que neste estágio ocorre a maioria das interações entre as pessoas que possuem o problema a ser resolvido e as pessoas que resolverão o problema.
A distância geográfica entre os locais de desenvolvimento tem um impacto direto em todas as formas de comunicação, dessa forma, afetando diretamente a engenharia de requisitos.
A distância também afeta mecanismos de comunicação e controle que são ingredientes centrais para o gerenciamento efetivo das equipes.
Durante o processo de engenharia de requisitos, os participantes devem buscar obter uma visão comum sobre os requisitos do sistema a ser construído.
A distância não somente desacelera este processo, como dificulta a obtenção de consenso.
Outro desafio para engenharia de requisitos que é influenciado por a distância é a gestão de conhecimento.
Informações de diversas origens devem ser compartilhadas com todos os stakeholders.
Muito do conhecimento que necessita ser compartilhado é tácito e não documentado, principalmente nas fases iniciais da engenharia de requisitos.
A diferença de fuso horário afeta as atividades de elicitação, negociação e priorização da engenharia de requisitos.
Demora é introduzida durante o processo, devido a a dificuldade de participação dos stakeholders.
Além disso, ainda existe o impacto causado por as diferenças culturais.
Equipes com diversas culturas tem um potencial maior para produtividade, bem como para problemas.
De essa forma, percebe- se que questões sociais são o centro de muitos dos problemas na engenharia de requisitos e como não pode ser endereçados somente por os métodos atuais, novas abordagens e paradigmas devem ser procurados.
De essa forma, a resposta para a questão &quot;O desenvolvimento global de software necessita de um processo de engenharia de requisitos diferenciado?»
é claramente &quot;Sim».
Após ampla revisão teórica, percebeu- se que o problema apresentado ainda não foi abordado sob a mesma perspectiva.
Assim, esta pesquisa se caracteriza como um estudo predominantemente exploratório.
Segundo Yin, a pesquisa exploratória tem como principal finalidade desenvolver, esclarecer e modificar conceitos e idéias, com vistas a a formulação de novas teorias, modelos e hipóteses pesquisáveis em estudos posteriores.
A pesquisa exploratória muitas vezes constitui- se na primeira etapa de uma investigação mais ampla, que é o caso deste estudo.
Em esse sentido, o método de pesquisa utilizado é o estudo de caso, adotado conforme proposto por Yin.
Foram desenvolvidos dois estudos de caso num centro de desenvolvimento de software de uma multinacional de grande porte.
Por tratar- se de uma pesquisa qualitativa, devem- se ter claras as limitações, principalmente quanto a a generalização dos resultados obtidos.
O desenho de pesquisa contempla os componentes básicos de uma pesquisa qualitativa, quais sejam:
Objetivo, unidade de análise e critérios para interpretar os resultados (protocolo de análise).
O objetivo geral da pesquisa foi propor um modelo de processo de engenharia de requisitos visando tratar questões relacionadas ao desenvolvimento distribuído de software.
Fase 1: Em esta fase foi realizado um extenso estudo da base teórica nos assuntos relacionados, como engenharia de requisitos, desenvolvimento distribuído de software, qualidade de software e melhoria de processo de software.
Esta fase foi fundamental para formação de uma base conceitual consistente para a continuidade do estudo.
Fase 2: Após a consolidação de uma base teórica consistente no assunto, foi definido um processo preliminar de engenharia de requisitos para ambientes de DDS.
O processo foi definido apoiado por a teoria estudada, bem como em estudos empíricos realizados anteriormente no PPGCC (dissertações de mestrado, estudos de caso, etc).
Fase 3: Em esta fase foram desenvolvidos dois estudos de caso.
O primeiro estudo de caso visou avaliar a percepção dos envolvidos no desenvolvimento de software em relação a a utilização do processo preliminar.
Um segundo estudo de caso foi conduzido buscando capturar a percepção de engenheiros de requisitos em relação a os problemas da engenharia de requisitos em ambientes de DDS.
Seu principal objetivo foi a identificação da influência da distribuição das equipes na especificação de requisitos.
Fase 4: A etapa final do desenho de pesquisa é a elaboração de uma proposta de modelo de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software.
Esta proposta foi elaborada com base nos resultados dos estudos de caso, à luz de a teoria existente.
Durante o processo de pesquisa foram conduzidos dois estudos de caso visando explorar o problema escolhido, bem como obter dados da aplicação do processo preliminar de engenharia de requisitos.
A descrição dos estudos de caso conduzidos é realizada a seguir.
De acordo com o desenho de pesquisa, foi conduzido o primeiro estudo de caso, visando avaliar a percepção dos envolvidos na aplicação do processo preliminar de engenharia de requisitos para ambientes de desenvolvimento distribuído de software.
Inicialmente foi desenvolvido um protocolo de estudo de caso, definindo objetivo, escopo, unidade de análise, procedimento, dimensões e questões.
A unidade de análise do estudo de caso 1 é composta de projetos de desenvolvimento de software que utilizaram o processo preliminar de engenharia de requisitos para ambientes de DDS.
Em esse sentido, foi selecionada uma organização que realiza desenvolvimento global de software, de forma a acompanhar projetos de desenvolvimento de software desde seu início.
A organização selecionada trabalha com manufatura e suporte de computadores, possuindo três unidades de desenvolvimento de software localizadas em dois continentes, responsáveis por atender a demanda de projetos internos da mesma em âmbito mundial.
Também é considerada uma empresa de grande porte para o seu segmento e a sua matriz está localizada nos Estados Unidos.
O processo de desenvolvimento de software é baseado no MSF, e em metodologias conhecidas, como RUP (Rational Unified Process) e PMI (Project Management Institute).
A unidade de desenvolvimento onde foi conduzido o estudo é reconhecida como uma organização SW-CMM nível 2.
Foram selecionados dois projetos na organização para utilização do processo preliminar de engenharia de requisitos para ambientes de DDS, doravante chamados de Projeto 1 e Projeto 2.
Estes projetos seguiram o processo preliminar durante todo a engenharia de requisitos.
Após todos os envolvidos terem contato com a versão final dos artefatos de requisitos, foi aplicado um questionário de avaliação.
Como instrumento de coleta de dados, foi utilizado um questionário composto principalmente de questões em escala Lickert de cinco níveis.
O instrumento de coleta de dados passou por validação de face e conteúdo por dois pesquisadores (doutores), além de um gerente de projetos da empresa, passando por refinamentos decorrentes das contribuições obtidas na validação de face e conteúdo, até sua versão preliminar.
Um pré-teste foi conduzido com dois líderes técnicos da organização selecionada, sobre a versão preliminar do instrumento, de forma a descobrir os inconvenientes, eliminar equívocos e ambigüidades e escolher a formulação mais adequada das perguntas para a finalidade da pesquisa.
Depois de adequar o instrumento à luz de o resultado do pré-teste e valendo- se de sugestões decorrentes das modificações realizadas, foram enviados os questionários aos respondentes por correio eletrônico.
Em o projeto 1 o questionário foi respondido por sete pessoas envolvidas no processo de desenvolvimento:
O gerente de projetos, o analista de aplicação, o líder técnico, um desenvolvedor e três testadores.
Em este projeto, apenas um dos desenvolvedores teve acesso a todos os artefatos de requisitos utilizados, e por este motivo ele foi o único respondente nesse papel.
Os demais utilizaram como base para o desenvolvimento somente o documento de projeto do software (Software Design Document), não estando aptos a responder o questionário.
Em o projeto 2 o questionário foi respondido por seis pessoas:
O gerente de projetos, o analista de aplicação, o arquiteto do sistema e três desenvolvedores.
Em este projeto o analista de aplicação também realizou o papel de líder técnico.
O teste desta aplicação foi considerado um projeto separado e foi realizado em outro país.
Embora o questionário tenha sido enviado para o líder de teste, não foi obtido retorno.
Após o recebimento das respostas dos questionários enviados, foi realizada a análise de resultados.
Para isso, foram utilizados a técnica de análise de conteúdo e o módulo estatístico do Excel, triangulando- se os dados do questionário com documentos de projeto, de forma a obter maior confiabilidade nos resultados.
Um segundo estudo de caso foi conduzido, de acordo com o desenho de pesquisa, visando capturar a percepção de engenheiros de requisitos com experiência no desenvolvimento distribuído de software com relação a os problemas que a distribuição tende a ampliar na especificação de requisitos.
Um protocolo de estudo de caso foi desenvolvido de forma a guiar a condução do estudo (veja Apêndice 2 -- Protocolo Para Estudo De Caso 2).
Foi selecionada uma empresa que realiza desenvolvimento global de software, para que fossem entrevistados os engenheiros de requisitos de forma a obter sua opinião com relação a os problemas na especificação de requisitos causados por fatores relacionados ao DDS.
A organização selecionada no estudo de caso 2 foi a mesma escolhida no estudo de caso engenheiros de requisitos, usuários, clientes e equipe de desenvolvimento.
O instrumento de coleta de dados utilizado foi um artefato possibilitando relacionar os principais fatores da engenharia de requisitos no desenvolvimento distribuído de software com os problemas na especificação de requisitos.
Os fatores da engenharia de requisitos no DDS foram obtidos com base na teoria existente e nas categorias e fatores apresentado no capítulo 4.
A taxonomia para problemas na especificação foi obtida com base no estudo de Shull.
O instrumento de coleta de dados passou por validação de face e conteúdo por dois pesquisadores.
Com base nas considerações realizadas foram feitas alterações no instrumento.
Em seguida, foi conduzido o pré-teste com um engenheiro de requisitos da organização em estudo.
Após estabelecimento da versão final do instrumento de coleta de dados, deu- se início às entrevistas.
Seis engenheiros de requisitos da organização foram entrevistados.
Todas as entrevistas foram gravadas, possibilitando consulta posterior.
Os entrevistados, durante o período previamente agendado, relacionavam os principais fatores do desenvolvimento distribuído de software com os problemas nos requisitos, de forma a apontar os problemas ampliados por cada fator.
Após a conclusão das entrevistas, foi realizada a análise de resultados.
Para isso, foram utilizados a técnica de análise de conteúdo e o módulo estatístico do Excel, relacionando os dados obtidos com a literatura no assunto.
Em este capítulo, são identificadas as principais categorias e fatores relacionados à engenharia de requisitos em ambientes de desenvolvimento distribuído de software, com base na teoria existente no assunto.
Em uma primeira análise do tema, foram identificadas as categorias comunicação, cultura e gestão do conhecimento.
Entretanto, observando a divisão realizada por Carmel da forças centrífugas e centrípetas em equipes globais de software, podemos perceber que as forças centrífugas relacionam- se a aspectos não técnicos, e as forças centrípetas, em sua maioria, a aspectos técnicos.
Traçando um paralelo com as abordagens apresentadas, podemos perceber um domínio de estudos sobre aspectos não técnicos na engenharia de requisitos em ambientes de DDS.
Considerando a escassez de estudos que abordam a influência de aspectos técnicos, decidiu- se incluir, além de os aspectos não-técnicos (comunicação, cultura e gestão do conhecimento), uma categoria voltada aos aspectos técnicos da engenharia de requisitos em De esse modo, foram identificadas quatro categorias, conforme a Figura 9.
Cada uma das categorias foi estudada em maior detalhe, destacando seus principais fatores, de acordo com a influência apresentada por as abordagens.
Essas categorias compreendem diversos fatores e se relacionam de diversas maneiras, sendo, muitas vezes, difícil de se definir a fronteira entre cada uma.
Outros fatores poderiam ter sido relacionados, mas para efeito desse estudo, foram considerados apenas os principais, devido a a importância que adquiriram nas abordagens estudadas.
A análise visa encontrar e detalhar os fatores que devem ser endereçados por um modelo de processo de engenharia de requisitos para ambientes distribuídos.
O processo de engenharia de requisitos depende largamente da comunicação entre os envolvidos.
Em as diversas abordagens estudadas, a comunicação aparece como um ponto crítico para o sucesso da engenharia de requisitos em ambientes distribuídos.
De entre os fatores relacionados com a comunicação destacam- se idioma, diferença de fuso-horário e meio de comunicação, conforme exposto na Figura 10.
Ambientes de DDS comumente atingem nível global, dessa forma o idioma utilizado por as equipes passa a exercer influência na engenharia de requisitos em ambientes DDS.
Quando a comunicação envolve grupos que possuem idiomas nativos diferentes, a probabilidade de erros de interpretação cresce.
A o tratar com requisitos, onde a clareza é fundamental, a diferença de idiomas entre os grupos introduz um risco maior de erros.
Por outro lado, quando as equipes possuem o mesmo idioma nativo, a comunicação torna- se mais fácil e eficaz.
A diferença de fuso horário entre equipes também exerce efeito na comunicação, com impacto na engenharia de requisitos.
Quando a diferença de fusos horários é muito grande, as equipes podem possuir pouco ou nenhum horário de trabalho em comum, dificultando ou impedindo o uso de ferramentas de comunicação síncrona como videoconferência.
O uso de correio eletrônico nesses casos é comum.
Entretanto, questões simples, como o esclarecimento de um requisito pode levar dias para se concretizar se conduzido de forma assíncrona com grupos trabalhando em horários distintos.
Em casos com menor diferença de fuso horário, a comunicação se torna mais livre, permitindo a utilização de mecanismos síncronos e, em geral, acelerando o processo.
O meio de comunicação influência na engenharia de requisitos em ambientes distribuídos.
Quando temos contato face-a-face, utilizamos diversos mecanismos para expressar a mensagem que desejamos.
Expressões faciais, gestos, alteração no tom de voz, entre outros, auxiliam na comunicação.
De essa forma, o meio utilizado, dependendo do nível de interação que possibilita, pode afetar a qualidade da comunicação.
A cultura é apontada como uma categoria de grande influência na engenharia de requisitos em ambientes de DDS.
Tanto a cultura nacional quanto a organizacional podem afetar a engenharia de requisitos.
Com base nas abordagens estudadas, foram selecionados os fatores contexto, atitude e valores, conforme apresentado na Figura 11.
Contexto é um fator cultural com impacto na engenharia de requisitos.
A compreensão do contexto onde o software em desenvolvimento será inserido é importante para o correto desenvolvimento do software.
A o abranger culturas diferentes, a dificuldade de entendimento tende a crescer.
Em culturas similares, as dificuldades causadas por contexto, em geral, se reduzem.
As atitudes dos envolvidos no processo de requisitos podem variar de acordo com a cultura a que pertencem.
Atitudes em relação a a hierarquia, pontualidade, formalidade e contato físico, por exemplo, tendem a variar entre culturas.
Com isso, pessoas de culturas diferentes podem se sentir incomodadas com as atitudes umas das outras, favorecendo situações de conflito.
Outro fator a ser considerado sob a ótica da cultura são os valores.
Culturas diferentes têm valores diferentes, dificultando a priorização e negociação dos requisitos.
Algumas culturas valorizam a estabilidade, tendendo a desejar que características existentes de um sistema sejam mantidas.
Outras culturas valorizam inovação, priorizando mais novas funcionalidades do que a manutenção de antigas, por exemplo.
Por outro lado, pessoas com valores similares tendem a obter mais facilmente consenso na definição de requisitos.
A cultura organizacional, muitas vezes, auxilia a reduzir as diferenças de cultura nacional entre equipes, ao guiar, mesmo que indiretamente as atitudes e valores de seus colaboradores.
O processo de engenharia de requisitos envolve grande volume de informações.
Captar, processar, armazenar e disponibilizar o conhecimento gerado por o processo de requisitos, bem como unificar a visão organizacional são questões que devem ser endereçadas por a gestão do conhecimento.
Os principais fatores identificados em relação a gestão do conhecimento são gerenciamento de papéis, awareness5 e gerenciamento de informações, como apresentado na Figura 12.
O gerenciamento de informações influência a engenharia de requisitos em ambientes DDS.
A gestão do conhecimento atua de forma transversal às categorias identificadas, auxiliando, por exemplo, nos processos utilizados e na gerência de informações culturais.
O processo engenharia de requisitos, por exemplo, envolve documentos cujo conteúdo pode ter diversas origens.
A obtenção, processamento e disponibilização dessas informações agilizam o processo de requisitos e auxiliam na obtenção de bons resultados.
Além disso, a necessidade de informações culturais relacionadas com o local onde o software a ser desenvolvido será utilizado é importante para definir características desse software.
O sistema métrico utilizado em cada país, por exemplo.
Essas informações são fundamentais para as equipes envolvidas consciência, percepção, conhecimento geral sobre as atividades e sobre o grupo.
Outro fator importante no DDS é a gestão do conhecimento relativo aos papéis e contatos envolvidos no processo de requisitos.
Durante o processo é importante o conhecimento dos responsáveis por cada atividade.
Em o desenvolvimento co-localizado esse conhecimento circula de maneira informal.
Entretanto, com a distribuição das equipes, há a necessidade de uma forma de disponibilizar esse conhecimento, facilitando a identificação dos papéis e localização dos responsáveis por cada tarefa.
O awareness, também relacionado com a gestão do conhecimento, é um importante no DDS.
Equipes distribuídas necessitam ter conhecimento do que está acontecendo em cada uma das localidades envolvidas no processo.
Mudanças na especificação e alterações nas regras de negócio, por exemplo, devem ser alertadas para as equipes.
Padrões são aspectos técnicos associados com o processo de engenharia de requisitos.
Com a necessidade de maior formalização causada por o desenvolvimento distribuído de software, evoluiu- se em busca de padrões.
Modelos de maturidade do processo de desenvolvimento, como o SW-CMM tratam diversas dificuldades comuns no DDS.
Ao mesmo tempo, há a necessidade de padronização dos documentos envolvidos no processo, bem como na estrutura dos requisitos e casos de uso utilizados.
A utilização de processos também é um fator técnico associado com a engenharia de requisitos em ambientes distribuídos.
A estruturação das atividades das equipes envolvidas na engenharia de requisitos é fundamental para controle do que está sendo realizado.
Processos equivalentes para toda organização é uma prática importante, pois evita entendimentos diferentes da ordem das atividades, papéis e responsabilidades de cada um.
O groupware é um aspecto técnico que influência a engenharia de requisitos em ambientes de DDS.
O uso de ferramentas de groupware pode melhorar a interação entre as equipes e ampliar sua consciência em relação a o andamento às atividades das localidades envolvidas.
O groupware pode também ser utilizado na elicitação e negociação dos requisitos, por exemplo, como ferramenta auxiliar nessas atividades.
Os diversos documentos utilizados e a necessidade de rastreabilidade fazem da gerência de configuração um fator importante na engenharia de requisitos em DDS.
O controle de versões dos documentos utilizados é fundamental para que a equipe trabalhe sobre uma versão consistente do documento de requisitos.
Além disso, é necessário que documentos com alterações à especificação inicial estejam disponíveis rapidamente, e de forma consistente para todas as equipes envolvidas.
A gerência dos requisitos em ambientes distribuídos adquire novas dimensões, pois, em alguns casos, requisitos de um software são divididos entre diversos locais de desenvolvimento.
A manutenção da rastreabilidade é fundamental para evitar dificuldades na identificação da localidade responsável por cada requisito do software.
Conforme previsto no desenho de pesquisa, foi definido um processo preliminar de engenharia de requisitos para ambientes de desenvolvimento distribuído de software, com base na proposta apresentada em.
O objetivo deste processo é reduzir o impacto da dispersão das equipes na engenharia de requisitos.
Para isso, são definidos os papéis envolvidos e a forma de evolução dos artefatos de requisitos, buscando o consenso entre os grupos participantes.
Também está incluído no processo um modelo de especificação de requisitos em linguagem natural, visando principalmente a redução de ambigüidades e padronização do trabalho entre as equipes.
Em a seqüência, são descritos em detalhe o contexto onde o processo se aplica, o processo preliminar e o modelo de especificação de requisitos em linguagem natural.
O processo preliminar considera a existência de distância física entre membros da equipe de desenvolvimento e do grupo de usuários/ clientes.
A dispersão entre as equipes pode ser representada utilizando uma adaptação do formato proposto por Prikladnicki, conforme o exemplo de cenário na Figura 14.
Os principais grupos envolvidos no processo preliminar são a equipe de engenheiros de requisitos, o grupo de usuários e clientes, e a equipe de desenvolvimento.
A equipe de engenheiros de requisitos (Er) é responsável por a elicitação, análise, negociação, documentação, validação e gerência dos requisitos.
Em a proposta preliminar a equipe de engenheiro de requisitos possui membros próximos ao grupo de usuários e clientes, chamados de analistas de negócio, e membros próximos à equipe de desenvolvimento, chamados de analistas de aplicação, como apresentado na Figura 15.
O grupo de usuários (U) e clientes (C) representa as pessoas físicas ou jurídicas que solicitaram e contrataram o projeto, bem como os responsáveis por a utilização do produto gerado.
Esta equipe fornece informações para especificação do software.
A equipe de desenvolvimento (D) representa os envolvidos no desenvolvimento de um determinado projeto, utilizando como entrada os requisitos especificados por o grupo de engenheiros de requisitos.
Esta equipe pode envolver gerentes de projeto, codificadores, testadores, controladores de qualidade, equipe de suporte a ferramentas, entre outros.
A forma de interação utilizada no processo preliminar define o grupo de engenheiros de requisitos como intermediários entre o grupo de usuários/ clientes e a equipe de desenvolvimento.
O grupo de engenheiros de requisitos é responsável por a criação e manutenção dos artefatos de especificação do software, sendo o único grupo com permissão de alterar estes artefatos.
Usuários, clientes e desenvolvedores podem avaliar os artefatos de especificação durante todo o processo de engenharia de requisitos, solicitando alterações quando necessário.
Representantes significativos de todos os grupos devem ser engajados desde o início do processo, permitindo que a especificação seja constantemente avaliada e adaptada conforme a necessidade dos participantes.
Todas as alterações nos artefatos de especificação devem passar por o grupo de engenheiros de requisitos, permitindo que seja o controle do documento seja mantido centralizado neste grupo.
Alterações podem ser solicitadas por membros do grupo de usuários/ clientes ou membro da equipe de desenvolvimento, sendo avaliada por o grupo de engenheiros de requisitos e aprovada por todos os representantes.
Conforme apresentado anteriormente, o processo preliminar considera a existência de pelo menos um representante do grupo de engenheiros de requisitos junto ao grupo de usuários/ clientes (papel chamado de analista de negócios), e um representante do grupo de engenheiros de requisitos junto à equipe de desenvolvimento (papel chamado de analista de aplicações).
O processo consiste em cinco etapas, conforme representado na Figura 17 e detalhado na seqüência.
Etapa 1 -- Envio dos artefatos de requisitos para a equipe de desenvolvimento.
Após criar o conjunto inicial de artefatos de requisitos, o analista de negócios envia estes artefatos para o analista de aplicação.
O conjunto inicial de artefatos pode ser constituído de documentos de alto nível, como um documento Visão/ Escopo, ou mesmo incluir uma versão inicial de um documento de especificação de requisitos.
O envio destes artefatos marca o início da participação da equipe de desenvolvimento e do analista de aplicação no processo de engenharia de requisitos.
Etapa 2 -- Análise e evolução dos artefatos de requisitos.
A o receber os artefatos iniciais de requisitos do analista de negócios, o analista de aplicação busca, em primeiro lugar o entendimento destes artefatos e seu contexto.
Representantes da equipe de desenvolvimento também são colocados em contato com os artefatos para contextualização.
Durante esta etapa os artefatos de requisitos são complementados com informações e adaptados para reduzir potenciais fontes de problemas.
Ambigüidade e falta de clareza são ainda mais prováveis quando diferenças culturais e de linguagem estão envolvidas.
Dúvidas surgem e devem ser esclarecidas com o analista de negócios ou o grupo de usuários/ clientes, caracterizando grande volume de comunicação entre as equipes.
A comunicação entre as equipes, além de esclarecimentos, visa obter consenso quanto a a especificação em construção, alinhando as múltiplas visões em relação a os requisitos.
Etapa 3 -- Envio dos artefatos de requisitos para aprovação por o grupo de usuários/ clientes.
Após a evolução dos artefatos de requisitos, estes devem ser validados por o grupo de usuários/ clientes, assegurando que a especificação construída atende às necessidades e objetivos que motivaram o processo de desenvolvimento.
Em esta etapa o analista de aplicações envia os artefatos de requisitos para aprovação final por o grupo de usuário e cliente e o analista de negócios.
Etapa 4 -- Validação dos artefatos de requisitos por os usuários/ clientes.
O grupo de usuários/ clientes deve verificar os artefatos de requisitos, assegurando que eles refletem os objetivos do projeto.
Como a participação de todos os grupos ocorreu durante a etapa 2, esta etapa é simplificada, pois o grupo de usuários e clientes já esteve em contato com os artefatos de requisitos durante toda a sua evolução.
O mesmo vale para o analista de negócios, que deve aprovar os artefatos de requisitos, verificando se eles contém todas as informações exigidas para o software a ser desenvolvido.
Etapa 5 -- Versão final dos artefatos de requisitos é definida.
Após aprovação formal por os usuários/ clientes, os artefatos aprovados formam o conjunto de artefatos de entrada para equipe de desenvolvimento.
Qualquer modificação nestes artefatos deve passar por aprovação de todas as equipes.
O processo preliminar inclui um modelo para especificação de requisitos em linguagem natural, visando principalmente a redução de ambigüidades e padronização dos trabalhos entre as equipes.
O modelo de especificação de requisitos foi desenvolvido com foco na elicitação e documentação de requisitos, visando capturar necessidades e objetivos do grupo de usuários e clientes.
Quando a equipe de desenvolvimento atende a diversas equipes de especificação, é natural que os documentos de requisitos advindos das várias equipes tenham formatos e padronizações diferentes.
Com isso, questões como o nível de detalhe dos requisitos, formato do documento, glossário e formato de casos de uso e requisitos, por exemplo, afetam diretamente o processo de desenvolvimento e as métricas envolvidas.
Com o uso de um modelo de especificação de requisitos em linguagem natural busca- se padronizar a documentação de entrada, reduzindo o efeito causado por a diversidade de padrões das equipes de especificação.
São incluídos neste modelo um meta-modelo de requisitos e uma estrutura textual.
O meta-modelo de requisitos é constituído de uma série de definições utilizadas para classificar as informações obtidas durante a elicitação, bem como o relacionamento entre elas.
A estrutura de texto define estruturas de frase a serem utilizadas para cada classe de informação, com o objetivo de simplificar a compreensão das informações representadas.
Esta abordagem foi construída com base em um estudo das principais definições de requisitos e estruturas de frase da literatura.
O modelo foi testado preliminarmente utilizando dados históricos de dois projetos de desenvolvimento de software.
Em este capítulo são apresentados os resultados dos estudos de caso.
Em as seções 6.1 é detalhado o estudo de caso 1, incluindo uma descrição do processo preliminar de engenharia de requisitos, a apresentação do instrumento de coleta de dados utilizado, a análise dos dados e as lições aprendidas.
A seção 6.2 aborda os resultados do estudo de caso 2, descrevendo o instrumento de coleta de dados, a análise dos dados para cada cenário e as lições aprendidas.
O estudo de caso 1 visava avaliar a percepção de equipes envolvidas na aplicação do processo preliminar de engenharia de requisitos para ambientes de desenvolvimento distribuído, com relação a o processo preliminar e a qualidade do artefato gerado.
Com este objetivo, foi acompanhada a utilização do processo preliminar em dois projetos de desenvolvimento distribuído de software.
Após o contato de toda equipe com o documento final de requisitos, foi aplicado um instrumento de pesquisa estruturado, composto principalmente de questões em escala Lickert.
Em a seqüência é apresentado o instrumento de coleta de dados e a análise dos dados deste estudo de caso.
A o final, são apresentadas as lições aprendidas.
O instrumento de coleta de dados utilizado no estudo de caso 1 é um questionário composto de sete dimensões, visando avaliar o processo preliminar de engenharia de requisitos para ambientes de desenvolvimento distribuído de software.
A primeira dimensão do questionário, relativa aos dados demográficos, tem como objetivo identificar os respondentes, quanto a a formação acadêmica e profissional, bem como em relação a a função desempenhada na organização em estudo.
Em a segunda dimensão, é solicitado aos respondentes que descrevessem o processo de engenharia de requisitos utilizado anteriormente na organização.
A terceira dimensão constituí- se de um grupo de questões em escala Lickert de cinco níveis, variando de &quot;Discordo Totalmente «a &quot;Concordo Totalmente «(com peso 5).
Estas questões buscam avaliar o processo preliminar de forma não comparativa.
Ou seja, nesta dimensão é solicitado aos respondentes que avaliassem afirmações sem comparar o processo preliminar com os processos que utilizavam anteriormente.
De a mesma forma que a terceira dimensão, a quarta dimensão é composta de questões em escala Lickert.
Entretanto, este grupo de questões visa avaliar o processo de forma comparativa.
Em este caso, é solicitado aos respondentes que avaliassem as afirmações comparando com sua experiência anterior.
A quinta dimensão, também em escala Lickert, visa capturar a percepção dos respondentes com relação a a qualidade da especificação de requisitos (SRS) produzida por o processo preliminar.
Os construtos utilizados foram obtidos no Padrão 830 de 1998 da IEEE A dimensão 6 é composta de questões abertas visando identificar as vantagens e desvantagens do uso do processo preliminar de engenharia de requisitos em ambientes de desenvolvimento distribuído de software.
A sétima e última dimensão é composta de questões abertas com o objetivo de obter informações sobre os projetos em estudo.
A análise dos resultados do estudo de caso foi realizada utilizando o módulo estatístico do Microsoft Excel.
Os dados do questionário foram triangulados com documentação do projeto de forma a obter maior confiabilidade nos resultados.
Foram também entrevistados alguns membros dos projetos para sanar dúvidas com relação a as respostas obtidas no questionário.
Em o projeto 1 foram entrevistados sete participantes, incluindo o gerente de projetos, o analista de aplicação, o líder técnico, três testadores e um desenvolvedor (Figura 18).
De estes, todos possuíam o ensino superior completo, sendo que dois de eles já haviam concluído mestrado.
O tempo de empresa dos respondentes é bastante variado.
Quatro dos respondentes estavam há menos de um ano na organização.
Os demais respondentes haviam trabalhado entre um e cinco anos na organização em questão.
A maioria dos respondentes (cinco) possuía experiência de dois a cinco anos na função que estavam desempenhando.
Dois dos respondentes eram vinculados a uma empresa terceira, que presta serviço para organização onde o estudo de caso foi conduzido.
Com relação a o processo de engenharia de requisitos utilizado anteriormente na organização (dimensão 2 da entrevista), segundo o analista de aplicação, baseava- se no MSF.
Os projetos eram entendidos através da leitura da documentação disponível.
Em seguida, era realizado o entendimento do escopo, modelagem do sistema e criação do SRS quando este não estava disponível.
O gerente de projetos destacou que era utilizada a modelagem de casos de uso.
O líder técnico apontou que não havia participado no levantamento de requisitos em projetos anteriores.
O primeiro conjunto de questões em escala Lickert referia- se ao processo preliminar, utilizado no projeto em questão, de forma não comparativa.
Ou seja, os respondentes foram instruídos a escolher a opção que melhor representasse a opinião de eles, sem comparar com o processo utilizado em projetos anteriores.
A consolidação dos resultados para o projeto 1 está representado na Tabela 5.
Desvio Padrão dos requisitos por pessoas cuja língua nativa não é o inglês.
Questão Média entendidos por os usuários tipos de informação necessárias à especificação.
Em esta dimensão da entrevista, três das cinco questões tiveram um desvio padrão alto.
A o abordar a simplicidade do processo, abrangência e facilidade de entendimento dos requisitos observamos que não existe consenso entre os respondentes.
A o questionar se o processo preliminar permite a captura de todos os tipos de informação necessários à especificação, o gerente de projetos avaliou como &quot;Discordo totalmente», enquanto que as respostas do analista de aplicações e do líder técnico foram &quot;Concordo».
A o ser questionado sobre a motivação desta resposta, o gerente de projetos justificou a importância de se utilizar diversas formas de representação de requisitos.
De acordo com ele, nem todo requisito deve ser representado textualmente, muitas vezes sendo necessário utilizar diagramas e representações formais.
Com a média mais alta da dimensão (4,33), foi avaliado por os respondentes que o processo utilizado permite a escrita de requisitos mais simples de serem entendidos por os usuários.
Assim, a validação dos requisitos junto aos clientes, foi simplificada.
Alinhando- se com esta resposta, todos os respondentes concordaram (4 na escala Lickert) que, com o uso do processo preliminar, a equipe estava confiante que os envolvidos no processo de Er entenderiam os requisitos especificados.
A dificuldade de entendimento, comum em ambientes de DDS onde há diferença de linguagem entre as equipes, pode causar a redução da confiança, redução do espírito de equipe, desalinhamento de visões, entre outros.
De essa forma, com a confiança no entendimento da especificação por os demais envolvidos, reduzimos a probabilidade destas dificuldades ocorrerem.
O próximo conjunto de questões (dimensão 4) era comparativo.
Em esta dimensão, foi solicitado aos respondentes que avaliassem as questões comparando com sua experiência anterior em projetos de DDS.
Os resultados consolidados para dimensão quatro no projeto 1 são apresentados na Tabela 6.
Média Desvio Padrão Questão 1 -- As múltiplas interações contribuem para um melhor entendimento das necessidades envolvidas no desenvolvimento do sistema 2 -- A utilização do novo processo promove uma melhor comunicação, fornecendo às equipes uma linguagem comum para comunicação (com relação a a estrutura de frase).
Todos os respondentes concordaram que as interações entre as equipes foram benéficas, permitindo um melhor entendimento das necessidades envolvidas no desenvolvimento do sistema.
Ainda em relação a a comunicação, os respondentes apontaram que a estruturação das frases na especificação auxiliou a fornecer uma linguagem comum na comunicação, tornando- a mais eficiente.
Os resultados em relação a entendimento de características específicas de contexto, bem como redução das ambigüidades e dificuldades de interpretação causadas por diferenças culturais ou de contexto, foram duas das questões com média mais baixa desta dimensão.
Assim, percebe- se que ainda são necessários esforços para melhoria no processo preliminar nesse sentido.
A compreensão do ambiente onde os requisitos em especificação serão utilizados, bem como as características culturais que podem afetar o sistema são fundamentais para que o esforço de desenvolvimento não seja desperdiçado, como destacado por.
Os respondentes também apontaram que a especificação produzida tende a ser mais detalhada e agregar uma maior volume de conhecimento quando realizada utilizando o processo preliminar de Er em DDS.
Quando em ambientes distribuídos, a obtenção de informações e esclarecimentos é dificultada.
De essa forma é ainda mais importante a presença de todas as informações relevantes na especificação.
Alinhando- se com o apresentado na dimensão 3, os respondentes tenderam a considerar que a confiança no entendimento dos requisitos entre as equipes aumenta com a utilização do processo preliminar.
Uma visão comum dos objetivos do sistema é de difícil obtenção em ambientes de DDS, como apontado por Damian.
A o melhorar a compreensão dos requisitos entre todos os envolvidos, são dados os primeiros passos na direção de reduzir esta dificuldade.
Conforme esperado, os respondentes em média apontaram que o processo utilizado foi mais lento para especificação de requisitos.
A o inserir um maior volume de interações, bem como detalhamento e formato na especificação de requisitos, a tendência à redução na velocidade de especificação era esperada.
Entretanto, como apresentado na questão 3 a comunicação foi considerada mais eficiente.
De acordo com o analista de aplicação envolvido, a maior demora ocorrida na especificação de requisitos foi, em parte, motivada por a inexperiência da equipe com o processo utilizado.
Esta demora pode ser reduzida, de acordo com a curva de aprendizado da equipe.
Com relação a a descoberta de requisitos ocultos e a clareza nos requisitos a média das respostas foi quatro, com um desvio padrão um pouco alto.
De essa forma, houve uma tendência a avaliar positivamente os benefícios do processo utilizado.
Considerando- se os benefícios obtidos em etapas posteriores do processo de desenvolvimento, como estimativa, teste e documentação do software, as respostas tenderam a ficar acima de quatro, demonstrando que a percepção dos envolvidos foi de uma melhora nesse sentido ao utilizar o processo preliminar.
Em as fases do MSF de planning e developing, as respostas também apontaram contribuições com a utilização do processo.
Entretanto, para a fase de stabilizing, o desvio padrão foi muito alto, apontando a falta de consenso na resposta.
A quinta dimensão da entrevista consiste numa avaliação da especificação de requisitos produzida, com relação a as características de um bom SRS, de acordo com.
Em esta dimensão foram utilizadas afirmações em escala Lickert visando obter a percepção dos envolvidos no projeto em questão com relação a a qualidade do SRS.
Esta dimensão também é comparativa, sendo solicitado aos respondentes que avaliassem as afirmações com base em sua experiência passada.
A consolidação das respostas para esta dimensão está na Tabela 7.
Questão Média 1 -- Com a utilização do novo processo o SRS torna- se mais correto.
De forma geral as respostas foram positivas, com média superior a três, indicando que, de acordo com a percepção dos participantes, o SRS foi melhorado em consideração às características definidas por o IEEE.
Quando considerando o atributo &quot;correto», a média de respostas foi próxima a cinco, com um desvio padrão baixo, indicando que a percepção dos participantes foi de uma melhora em relação a este item.
Considerando a redução de ambigüidades, a média de respostas foi quatro, com o segundo maior desvio padrão da entrevista.
Em uma análise aprofundada, os testadores indicaram os menores valores, com uma média de 3, enquanto que a média dos demais foi 4,5.
Isto foi clarificado por um testador por a seguinte afirmação:
&quot;é importante levar em consideração que devido a as características do projeto (reengenharia e recodificação de um sistema existente), o sistema existente foi utilizado como entrada para o desenvolvimento, o que reduziu o nível de detalhe».
Com relação a a afirmação que o SRS se tornou mais completo as respostas foram, em média, 3,71, com desvio padrão de 0,95.
Isto indica uma tendência dos respondentes considerarem o SRS produzido mais completo.
Considerando consistência, as respostas tiveram um desvio padrão alto, com uma leve tendência positiva.
Uma vez que consistência é relacionada a documentação de mais alto nível e alguns respondentes não tiveram acesso a ela, este resultado não é significativo.
Os melhores resultados foram obtidos na afirmação de que o SRS se tornou mais verificável.
A média de respostas foi próxima a cinco (4.43), com o menor desvio padrão na dimensão.
Isto indica que, na percepção dos entrevistados, o modelo produziu um SRS mais verificável.
Em a afirmação que o SRS se tornou mais modificável as respostas foram, em média, positivas.
O desvio padrão foi 0,9, demonstrando uma tendência a considerar que o SRS tornou- se mais modificável.
Considerando- se rastreabilidade, a média de respostas foi acima de 4, indicando uma melhora.
Este resultado deriva principalmente do processo de numeração utilizado neste projeto, baseado no documento de nível superior de forma a deixar explícita a rastreabilidade.
B) Projeto 2 Em o projeto 2 foram entrevistados seis participantes, incluindo o gerente de projetos, o analista de aplicação, três desenvolvedores e o arquiteto de sistemas.
Em este projeto o analista de aplicação também exerceu o papel de líder técnico.
A equipe de teste estava distante da equipe de desenvolvimento.
Embora a entrevista tenha sido enviada, não foi respondida.
O arquiteto do sistema fazia parte da equipe de usuários e clientes.
Apenas um dos seis respondentes ainda não havia finalizado o curso superior.
Os demais possuíam o ensino superior completo ou especialização.
A maior parte da equipe (cinco pessoas) estava há mais de um ano trabalhando na organização.
De os seis respondentes, cinco eram funcionários da organização.
Um de eles trabalhava para uma empresa sub-contratada por a organização em pesquisa.
Quatro dos respondentes possuíam mais de cinco anos de experiência na função que estavam realizando.
Apenas um estava há menos de um ano na função realizada no projeto em pesquisa.
Quando questionado a respeito de o processo de engenharia de requisitos utilizado anteriormente por a equipe (dimensão 2 da entrevista), o gerente do projeto explicou que o levantamento de requisitos era realizado através de uma documentação textual dos requisitos.
O analista de aplicação ressaltou que, em alguns casos, o SRS era finalizado e enviado apenas para desenvolvimento offshore.
Quando o desenvolvimento do SRS fazia parte do escopo do projeto da localidade em questão, este era aprovado por os clientes.
A terceira dimensão da pesquisa visava obter dados sobre o processo preliminar de engenharia de requisitos para ambientes de DDS utilizado por a equipe entrevistada.
A síntese dos resultados para esta dimensão está apresentada na Tabela 8.
Questão 1 -- A escrita dos requisitos é simples utilizando o novo processo.
Em esta dimensão a média das respostas foi alta, com questões onde o desvio padrão foi zero.
Todos os respondentes concordaram fortemente que o processo utilizado simplifica o entendimento dos requisitos por pessoas cuja língua nativa não é o inglês.
Este fator é importante para redução de ambigüidades e alinhamento das visões entre as equipes, conforme.
Com relação a a simplicidade de entendimento dos requisitos por os usuários e confiança no entendimento dos requisitos por os demais envolvidos no processo de desenvolvimento (questões 2 e 5), a média das respostas foi de 4,5, com um desvio padrão de 0,71, apontando que os entrevistados concordam com estas características no processo preliminar em uso no projeto.
A média mais baixa entre as respostas, embora um consenso entre os respondentes, foi de 4, onde todos concordaram que o processo utilizado permite a captura de todas as informações necessárias à especificação.
A o avaliar se os requisitos são simples de serem escritos com o processo preliminar utilizado no projeto a média das respostas foi de 4,5 com desvio padrão de 0,71, indicando que os entrevistados concordam com a afirmação.
Entretanto foi apontado como um problema a curva de aprendizagem do processo, durante a qual é despendido um tempo muitas vezes importante para o andamento do projeto.
1 -- As múltiplas interações contribuem para um melhor entendimento das necessidades envolvidas no desenvolvimento do sistema 2 -- A utilização do novo processo promove uma melhor comunicação, fornecendo às equipes uma linguagem comum para comunicação (com relação a a estrutura de frase).
Todos os respondentes concordaram que as múltiplas interações promovidas por o processo contribuem fortemente para um melhor entendimento das necessidades envolvidas no desenvolvimento do sistema.
De essa forma, é possível um maior alinhamento da visão das diversas equipes envolvidas no processo.
Com relação a a comunicação, da mesma forma que a questão anterior, todos os respondentes concordaram fortemente que ela é melhorada com o novo processo, permitindo, com a estruturação das frases, uma linguagem comum de comunicação entre as equipes.
Em conjunto, nota- se que, na percepção dos respondentes, a comunicação tornou- se mais eficiente com o novo processo, questão onde a média foi 4,5, com desvio padrão 0,71.
Os respondentes concordaram que o processo utilizado reduz as dificuldades de interpretação e ambigüidades devido a as diferenças culturais e de contexto.
Entretanto, ao avaliar se o processo utilizado simplifica o entendimento de características de contexto do local onde o software será utilizado, a média de respostas foi de 3,5, indicando que os benefícios não foram muito significativos nesse sentido.
Um consenso entre os respondentes foi de que o processo utilizado permitiu que se produzisse uma especificação mais detalhada, com uma média 5.
Em conjunto, com média 4 e desvio padrão 0, os respondentes concordaram que o processo utilizado permite um conhecimento mais claro sobre o sistema a ser desenvolvido.
Os respondentes concordaram totalmente (média 5) que os requisitos escritos com o processo proposto tornaram- se mais claros.
Assim, alinhando- se com o respondido na dimensão 3, a média das respostas da questão 8 foi de 4,5, apontando que, na percepção dos respondentes, a confiança no entendimento dos requisitos entre as equipes é ampliada com a utilização do processo preliminar.
Com relação a a velocidade de especificação, a média das respostas foi 3,5, indicando que não houve grande diferença no tempo de especificação com o uso do processo.
Este resultado é esperado, considerada a curva de aprendizado necessária, já que esta foi a primeira vez que a equipe utilizava o processo.
Além disso, a especificação mais detalhada, conforme apontado na questão 6, tende a demandar mais tempo.
A única questão com média abaixo de 3 foi com relação a a descoberta de requisitos ocultos, com média 2,5.
Isso indica um provável ponto de melhoria no processo, de forma a auxiliar a descoberta de requisitos ocultos em ambientes de DDS, onde sua obtenção é dificultada.
Com relação a melhorias na estimativa do processo de desenvolvimento a média das respostas foi 3, com desvio padrão de 1,71, indicando falta de consenso no assunto.
Assim, são necessários mais dados para melhor identificar a tendência.
Conforme apontado por a opinião dos entrevistados o processo trouxe benefícios para as atividades de teste e documentação.
A o avaliar as atividades do MSF beneficiadas por o processo, os respondentes concordaram totalmente (média 5) que o processo trouxe melhorias para a fase de Planning.
A fase de Developing obteve média 4,5, indicando ser também beneficiada por o processo.
Com a média mais baixa entre as fases do MSF, a fase de Stabilizing obteve média 3,5, com desvio padrão 0,71, indicando que o processo introduziu pouca ou nenhuma melhoria nesta fase.
Em a quinta dimensão, foi solicitado aos respondentes que avaliassem a especificação produzida no projeto com relação a as características de um bom SRS, de acordo com a IEEE.
A Tabela 10 apresenta a síntese dos resultados para esta dimensão.
Questão 1 -- Com a utilização do novo processo o SRS torna- se mais correto.
Em este conjunto de questões, todas as médias foram acima de 3, indicando uma melhoria geral na qualidade do SRS no que tange as características definidas por a IEEE.
Com relação a o atributo &quot;correto», a média das respostas foi de 4,17, com desvio padrão de 0,75.
Isso demonstra que os respondentes avaliaram como positiva a contribuição do processo para tornar o SRS mais correto.
Em a percepção dos entrevistados, as ambigüidades do SRS são reduzidas com o novo processo.
A média de respostas foi 4, com um desvio padrão baixo, indicando alinhamento entre os respondentes.
Com a mesma avaliação, o atributo correto também foi melhorado no SRS.
Ambigüidade e informações incorretas são uma fonte de retrabalho, e sua redução contribui para diminuição de custo e tempo no processo de desenvolvimento.
Com um desvio padrão alto os atributos &quot;consistência», &quot;priorização «e &quot;rastreabilidade «tiveram respostas bastante divergentes dentro de a equipe, impossibilitando uma melhor avaliação de suas tendências.
Se desconsiderarmos a avaliação do gerente de projetos, a média de respostas indicando que o SRS tornava- se mais consistente com o novo processo foi de 4,4, com desvio padrão de 0,55.
De forma similar, se eliminarmos a resposta do gerente de projetos na questão sobre rastreabilidade, a média das respostas torna- se 4,4, com desvio padrão 0,89, indicando melhoria no SRS em relação a este atributo.
A o avaliar se o SRS produzido por o processo proposto era mais verificável, a média de respostas foi de 4,17, com desvio padrão de 0,75, indicando uma melhoria.
O mesmo ocorreu com o atributo &quot;modificável», com média 4,33 e o menor desvio padrão da dimensão, indicando um maior consenso quanto a o benefício do processo em relação a este item.
A o consolidar os resultados dos dois projetos podemos identificar os pontos fortes e fracos do processo preliminar de engenharia de requisitos para ambientes de DDS em estudo.
De forma geral na avaliação, todas as questões tiveram média acima de três indicando que, no pior caso, não houve diferença com uso do processo e, na maioria das questões, houve melhoria com o uso do processo preliminar.
Diversas melhorias foram apontadas com o uso do processo preliminar.
Os pontos onde a média de respostas foi mais alta (acima de 4,3) estão apresentados na Tabela 11.
Média Desvio Padrão 6 -- A especificação de requisitos resultante do novo processo é mais detalhada. --
Planning -- Developing Questão Dimensão 3 -- Avaliação não comparativa do processo 2 -- Os requisitos escritos utilizando o novo processo são simples de serem entendidos por os usuários.
Dimensão 4 -- Avaliação comparativa do processo 1 -- As múltiplas interações contribuem para um melhor entendimento das necessidades envolvidas no desenvolvimento do sistema.
Dimensão 5 -- Avaliação da qualidade do SRS 1 -- Com a utilização do novo processo o SRS torna- se mais correto.
Os pontos de destaque do processo preliminar estão relacionados à comunicação, nível de detalhe, confiança, clareza e benefícios para demais fases e atividades do desenvolvimento de software.
A o obter requisitos de simples compreensão por os usuários, a atividade de validação é simplificada.
O feedback torna- se mais eficiente, permitindo uma melhor evolução dos artefatos de requisitos.
Em conjunto, a confiança no entendimento dos requisitos entre as equipes é ampliado, permitindo um melhor relacionamento entre os envolvidos das diversas localidades.
Este resultado reflete- se nas respostas apontando que a especificação tornou- se mais correta com a utilização do processo preliminar.
A estruturação dos requisitos num formato padrão (neste caso, em relação a a estrutura de frase) permitiu uma melhor comunicação entre as equipes, pois estas passaram a ter uma forma comum de expressar suas necessidades e objetivos.
A melhora na comunicação promovida por as diversas interações entre as equipes foi consenso entre os entrevistados.
Com isto, os requisitos se tornaram mais claros e a especificação mais rica em detalhes.
Com a maior clareza e profundidade dos requisitos, as atividades de documentação e teste, bem como as fases de planning e developing são beneficiadas.
O resultado em relação a o teste foi corroborado por os respondentes que apontaram que a especificação tornou- se mais verificável com o uso do processo preliminar.
Através do estudo de caso foram também identificados pontos de melhoria no processo preliminar.
A síntese dos pontos avaliados com médias mais baixas na pesquisa está na Tabela 12.
Média Desvio Padrão 5 -- O novo processo de engenharia de requisitos simplifica o entendimento de características específicas do contexto onde o software será utilizado.
Questão Dimensão 3 -- Avaliação não comparativa do processo 3 -- A escrita de requisitos com o novo processo permite a captura de todos os tipos de informação necessárias à especificação.
Dimensão 4 -- Avaliação comparativa do processo 12 -- Com a utilização do processo é possível se realizar uma melhor estimativa do esforço necessário para os próximos estágios de desenvolvimento. --
Stabilizing Dimensão 5 -- Avaliação da qualidade do SRS 4 -- Com a utilização do novo processo o SRS torna- se mais consistente.
A o avaliar se o processo preliminar permitiu capturar todos os tipos de informação necessários à especificação, a média aponta um provável ponto de melhoria.
Entretanto, todos os respondentes concordaram com esta afirmação, exceto o gerente de projetos do projeto 1.
A o ser consultado a respeito, ele ressaltou que não existe forma única de representar requisitos, formas complementares de representação de requisitos podem ser utilizadas para simplificar o entendimento e tornar a especificação mais completa.
O entendimento de características de contexto também apresentou uma avaliação média baixa no estudo.
Embora fosse esperado que com a melhora na comunicação fosse facilitada a descoberta de características de contexto, este resultado não se refletiu na pesquisa.
Uma possível forma de melhorar esta característica é apresentada por Mahemoff.
Assim, a descoberta de requisitos ocultos poderia ser melhorada, principalmente quando relacionados à questões específicas de uma localidade.
O tempo despendido na especificação de requisitos obteve a avaliação mais baixa na pesquisa.
Como esta foi a primeira vez que as equipes utilizaram o processo preliminar, é esperado que o tempo de treinamento e aprendizado exerça impacto.
Entretanto, ainda são necessários mais dados para poder avaliar com maior precisão o efeito do uso do processo no esforço total da equipe e no tempo de desenvolvimento.
Contribuições para estimativa eram esperadas, uma vez que foi apontado que os requisitos estavam mais claros, corretos e detalhados com o processo preliminar, entretanto isto não ocorreu.
Como o processo de estimativa da organização é baseado em dados históricos, talvez fosse necessário um maior número de projetos utilizando o processo preliminar para adequar a estimativa.
A contribuição do processo preliminar para fase de stabilizing do MSF também apresentou uma média baixa quando comparado aos demais resultados da pesquisa.
A influência de uma melhoria nos requisitos nesta fase do MSF pode não ser clara, por isso recebendo uma menor avaliação em relação a as demais fases.
Com relação a as características de um bom SRS, as avaliações mais baixas foram com relação a a consistência e priorização.
A priorização não foi tratada como foco no processo preliminar, sendo esperado este resultado.
Com relação a a consistência a média foi baixa, entretanto teve um alto desvio padrão, apontado para uma falta de consenso entre os respondentes.
Um possível motivo para isso foi o uso dos requisitos em linguagem natural na especificação nos dois projetos.
De essa forma, a identificação de inconsistências é reduzida quando comparada a representações formais de requisitos.
Com base nos resultados consolidados e nas observações realizadas durante o estudo, foram identificadas as lições aprendidas do estudo de caso.
Estas lições servirão como base para melhorias no processo preliminar de engenharia de requisitos para ambientes de DDS.
Em a seqüência, são apresentadas as lições aprendidas do estudo de caso 1: Lição 1: As interações entre as equipes visando evoluir os artefatos de requisitos permitem um melhor entendimento das necessidades envolvidas no desenvolvimento do software em questão.
As interações entre as equipes de desenvolvimento e grupo de usuários e clientes com o objetivo de evoluir os artefatos promovem uma melhor compreensão dos motivos que guiaram o processo de desenvolvimento.
Sem estas interações, o projeto e a codificação de software podem ser iniciados com a equipe de desenvolvimento desalinhada em relação a os objetivos que devem ser atingidos.
De essa forma, evita- se o modelo de desenvolvimento apontado por Al-- Rawas como &quot;sobre o muro «onde, em cada estágio do projeto, a especificação é lançada sobre o muro para a próxima equipe, que está aguardando para conduzir a próxima etapa do processo.
Lição 2: O uso de estruturas de frase para requisitos em linguagem natural contribui para melhorar a comunicação e o entendimento entre as equipes.
Em a avaliação dos resultados percebeu- se que um ponto importante para a melhoria na comunicação entre as equipes, bem como na clareza e entendimento dos requisitos foi o uso de estruturas de frases para especificação de requisitos em linguagem natural.
Como havia diferença de idioma nativo entre as equipes, a utilização de estruturas simples de frases permitiu um melhor entendimento dos requisitos escritos.
A comunicação também foi influenciada por a estrutura, uma vez que as equipes passaram a utilizar- la quando interagindo.
A clareza obtida com a estruturação das frases promove uma melhor comunicação.
Lição 3: São necessárias melhorias no processo visando entender questões relacionadas ao contexto dos grupos envolvidos.
A captura de informações referentes ao contexto não obteve benefícios claros com o processo preliminar.
Embora as interações entre as equipes visando evoluir os artefatos de requisitos pudessem auxiliar no entendimento do contexto, não existem atividades especificas com este objetivo no processo preliminar.
Este é um ponto de melhoria para a proposta de um modelo de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software.
Em especial, a estudo de caso evidenciou a necessidade da captura de informações de contexto dos usuários e clientes, visando melhor compreender o ambiente onde o software em desenvolvimento será inserido.
Lição 4: O processo preliminar necessita de novas atividades de forma a reduzir as inconsistências e melhorar a priorização dos requisitos.
Em o estudo de caso, as principais características de qualidade da especificação de requisitos apontadas como passíveis de melhoria foram a consistência e a priorização dos requisitos.
Em esse sentido são necessárias novas atividades no processo de engenharia de requisitos de forma a reduzir inconsistências e melhorar a priorização.
Lição 5: Melhorias no processo preliminar devem ser realizadas de forma a permitir a captura de uma maior diversidade de informações, bem como a descoberta de informações ocultas.
Outro ponto de melhoria no processo é o estabelecimento de formas que permitam a captura de uma maior variedade de informações, bem como a descoberta de informações ocultas.
O uso da linguagem natural para captura de requisitos foi insuficiente em termos de representação.
É necessário ampliar a forma de representação de acordo com o tipo de projeto.
Em esse sentido, são necessárias novas atividades ao processo de engenharia de requisitos em DDS.
O estudo de caso 2 tinha como objetivo identificar os problemas na especificação de requisitos ampliados por fatores relacionados à engenharia de requisitos em ambientes de desenvolvimento distribuídos de software na especificação de requisitos.
Visando atingir este objetivo, foram entrevistados engenheiros de requisitos com experiência em desenvolvimento distribuído de software.
A entrevista foi conduzida com base em um instrumento de pesquisa que permitia relacionar os principais fatores do desenvolvimento distribuído de software com problemas na especificação de requisitos, em cenários previamente estabelecidos.
Uma descrição do instrumento de coleta de dados é apresentada na seqüência.
Em seguida, é descrita a análise dos dados obtidos.
A o final, são apresentadas as lições aprendidas.
O instrumento de coleta de dados utilizado no estudo de caso 1 era uma entrevista composta de três dimensões, visando capturar a percepção dos respondentes quanto a os problemas na especificação de requisitos ampliados por fatores do desenvolvimento distribuído de software (veja Apêndice 2 -- Protocolo Para Estudo De Caso 2).
A primeira dimensão do questionário, relativa aos dados demográficos, tinha como objetivo identificar os respondentes, quanto a a formação acadêmica e profissional.
Em a segunda dimensão foram apresentados dois cenários do desenvolvimento distribuído de software.
O primeiro cenário apresentava um grupo co-localizado de engenheiros de requisitos distantes globalmente de um grupo, também co-localizado, de usuários e clientes.
Em este cenário, foi solicitado aos entrevistados que estabelecessem relações numa matriz composta de problemas na especificação de requisitos (colunas) e fatores do desenvolvimento distribuído de software (linhas), identificando quais problemas eram ampliados por cada fator.
O segundo cenário apresentava uma distribuição onde um grupo colocalizado de engenheiros de requisitos está distante de um grupo de usuários e clientes disperso globalmente.
Em este cenário foi questionado aos entrevistados se os problemas na especificação causados por os fatores apontados no cenário 1 eram ampliados quando no cenário 2.
Em seguida, foi questionado aos respondentes apontar se existiam novas relações entre fatores do DDS e problemas na especificação no cenário 2 e, se existirem, quais são elas.
Em a terceira dimensão da entrevista eram apresentados dois cenários de desenvolvimento distribuído de software.
O primeiro cenário apresentava um grupo colocalizado de engenheiros de requisitos distantes globalmente de uma equipe de desenvolvimento co-localizada.
Em este cenário, era solicitado ao entrevistado que estabelecesse relações numa matriz composta de problemas na especificação de requisitos (colunas) e fatores do desenvolvimento distribuído de software (linhas), identificando quais problemas eram ampliados por cada fator.
O quarto cenário apresentava uma distribuição onde um grupo co-localizado de engenheiros de requisitos está distante de uma equipe de desenvolvimento dispersa globalmente.
Em este cenário era questionado aos entrevistados se os problemas na especificação causados por os fatores apontados no cenário 3 eram ampliados quando no cenário 4.
Em seguida, era questionado aos respondentes apontar se existiam novas relações entre fatores do DDS e problemas na especificação no cenário 4 e, se existissem, quais seriam elas.
Em o estudo de caso 2 foram entrevistados seis engenheiros de requisitos com experiência em projetos de desenvolvimento global.
De estes cinco possuíam curso ensino superior completo, sendo que um de eles já havia concluído mestrado e dois possuíam curso de especialização, conforme apresentado na Figura 20.
Quatro dos entrevistados possuíam mais de cinco anos de experiência profissional.
Todos os respondentes trabalhavam na unidade brasileira de uma organização que realiza desenvolvimento global de software.
As respostas obtidas para cada cenário foram analisadas utilizando o módulo estatístico de uma planilha eletrônica.
Os resultados foram comparados com a base teórica existente em engenharia de requisitos para ambientes de DDS.
Em a seqüência é apresentada a análise dos resultados do estudo de caso 2 divididos segundo os cenários que guiaram a entrevista.
As tabelas completas com os dados consolidados deste estudo de caso estão no Apêndice 3 -- Dados Consolidados do Estudo De Caso 2.
A) Cenário 1 O cenário 1 apresenta um ambiente de desenvolvimento de software global, onde os engenheiros de requisitos estão distantes dos usuários e clientes.
Entretanto, usuários e clientes estão na mesma localidade, bem como engenheiros de requisitos estão colocalizados.
Ou seja: Engenheiros de requisitos numa mesma localização física;
Usuários e clientes numa mesma localização física, distante globalmente dos engenheiros de requisitos.
Alguns exemplos deste cenário são:
Engenheiros de requisitos em São Paulo e usuários e clientes num prédio em Londres.
Engenheiros de requisitos em Bangalore e usuários e clientes em Tóquio.
Em este cenário foi solicitado aos respondentes que apontassem os principais problemas na especificação de requisitos causados por o fatores relacionados ao desenvolvimento distribuído de software.
Em a seqüência são apresentados os resultados consolidados para este cenário, agrupados por tipo de problema na especificação.
A Tabela 13 apresenta a síntese das respostas para afirmação ambígua no cenário 1.
Os resultados são comentados na seqüência, após a Tabela.
Os seis respondentes relacionaram a diferença de idioma dos stakeholders como uma fonte de ambigüidades para a especificação de requisitos quando o engenheiro de requisitos está distante de usuários e clientes.
Durante o processo de engenharia de requisitos, as interações realizadas entre as equipes, bem como a escrita e leitura do documento de especificação num idioma diferente do nativo tende a ampliar a possibilidade de malentendidos e ambigüidades.
Alinhando- se com o encontrado na literatura, onde Al-- Rawas aponta o risco de interpretações incorretas devido a opiniões pré-concebidas, a comunicação por teleconferência foi indicada por a maioria dos respondentes como fonte de ambigüidade nos requisitos, quando utilizada como meio para interação entre engenheiros de requisitos e usuários e clientes.
Layzell aponta para problema similar quando a comunicação num projeto ocorre por e-mail, uma vez que os participantes tendem a ser menos comprometidos.
Entretanto, apenas metade dos respondentes apontou a comunicação por email como fator ampliador de ambigüidades na especificação.
Este resultado foi justificado por alguns dos respondentes devido a a vantagem do e-mail sobre a teleconferência ao permitir um histórico de mensagens, reduzindo, desta forma, a possibilidade de ambigüidades além de as comuns ao uso da linguagem.
Embora a relação entre diferença de contexto e ambigüidades fosse esperada, apenas um dos entrevistados estabeleceu esta ligação.
Conforme apresentado em, as diferenças de contexto e cultura podem inserir ambigüidades no entendimento da especificação de requisitos.
Uma hipótese para este desvio é obtida por a relação entre diferença de contexto e informação faltante estabelecida por a maioria dos respondentes.
A o realizar esta relação, os respondentes possivelmente consideraram que as informações relacionadas a contexto que poderiam originar ambigüidades ocorreriam devido a a falta de um maior detalhamento que impedisse múltiplas interpretações.
A síntese dos resultados para informação faltante é apresentada no Tabela 14 e detalhada a seguir.
O awareness foi considerado como um dos fatores causadores de falta de informações na especificação por todos os respondentes.
A consciência do ambiente de negócio e suas alterações é importante para que não sejam deixadas de lado informações críticas para o desenvolvimento do software.
Este resultado alinha- se com o estudo de Damian.
Os valores pessoais dos stakeholders, bem como atitudes e forma de agir (ambos influenciados por a cultura) foram relacionados com a falta de informações por 5 dos 6 respondentes.
Isto pode ser justificado por a resistência de alguns grupos de fornecer informações importantes para a engenharia de requisitos.
Esta resistência tende a ser ampliada por o desenvolvimento offshore, devido a questões como a rivalidade entre as equipes e o receio da perda de empregos para outros países.
Também de acordo com a maioria dos respondentes, informações dispersas em diversas localidades tendem a causar a falta de informações na especificação de requisitos.
Este resultado alinha- se com os estudos de Zowghi.
O acesso a documentos e informações referentes ao negócio é necessário durante o processo de elicitação e especificação de requisitos.
Quando em ambientes distribuídos o acesso a estes documentos é dificultado, podendo ocasionar a falta de requisitos importantes para o sistema.
Conforme esperado, de acordo com outros estudos, a dificuldade de identificação dos stakeholders também foi apontada como fonte para a falta de informações na especificação (5 dos 6 respondentes).
Uma vez que não sejam identificados corretamente os stakeholders, informações importantes podem ser deixadas de lado, gerando uma especificação incompleta.
Além de estas, foi observada uma relação da diferença de contexto entre as localidades e a falta de informações (5 dos 6 respondentes).
A diferença de contexto pode fazer com que os stakeholders deixem de fornecer informações importantes por considerarem óbvias.
Este resultado se alinha com o estudo de Damian.
Os resultados consolidados para informações inconsistentes no cenário 1 são apresentadas na seqüência.
A dificuldade de identificação dos stakeholders foi apontada por 5 dos 6 respondentes como fonte para inconsistência das informações na especificação.
Se identificados incorretamente, os stakeholders selecionados podem não possuir domínio sobre o universo de informações em questão e fornecer informações contraditórias ao engenheiro de requisitos, causando inconsistências na especificação.
O idioma nativo dos stakeholders foi relacionado com a presença de informações inconsistentes nos requisitos por 83% dos respondentes.
Esta informação não foi encontrada em outros estudos da área.
Uma possível explicação para este fato é o incorreto entendimento do termo inconsistência, muitas vezes tratado como equivalente a ambigüidade.
Outra hipótese provável é o surgimento de inconsistências devido a a incorreta interpretação ou mau uso da linguagem no documento de requisitos.
O principal fator apontado como ampliador das informações incorretas na especificação foi o awareness (todos os respondentes).
Este fator tem efeito principalmente sobre o gerenciamento de requisitos.
Se uma modificação no negócio não for refletida na especificação de requisitos, serão utilizadas informações desatualizadas, ou incorretas, no desenvolvimento.
Este resultado era esperado, estando de acordo com o estudo.
Além disso, foi observada uma relação entre a diferença de contexto entre as localidades e informações incorretas (5 dos 6 respondentes).
A diferença de contexto pode fazer com que os stakeholders deixem de fornecer informações importantes por considerarem óbvias.
Em conjunto, o responsável por a especificação pode assumir determinadas questões com base em seu contexto (como legislação, por exemplo) e não consultar usuários e clientes, definindo requisitos incorretos.
O cenário 2 aborda a distribuição de um grupo de engenheiros de requisitos colocalizados em relação a usuários e clientes distribuídos (Figura 22).
Ou seja: Engenheiros de requisitos numa mesma localização física;
Usuários e clientes distribuídos globalmente, distantes dos engenheiros de requisitos.
Alguns exemplos deste cenário são:
Engenheiros de requisitos em Porto Alegre, usuários no Canadá, Inglaterra e Japão e clientes nos Estados Unidos.
Engenheiros de requisitos em Bangalore, usuários dispersos na Ásia e Oceania e clientes na Austrália.
Em o cenário 2 foi questionado aos respondentes se os problemas na especificação ampliados por os fatores relacionados ao DDS eram aprofundados em relação a o cenário 1.
Em seguida, foi solicitado ao respondentes para identificar se existem novos relacionamentos entre problemas na especificação e fatores relacionados ao DDS emergem no cenário 2 e, se existirem, quais são.
Em a percepção de todos os respondentes os problemas nos requisitos causados por os fatores selecionados no cenário 1 são aprofundados quando existem diversos grupos de usuários e clientes dispersos (cenário 2).
Assim, de acordo com a experiência dos entrevistados, a tendência a erros na especificação é ampliada quando existem múltiplos grupos dispersos de usuários e clientes.
De a mesma forma, todos os respondentes concordaram que emergem novos problemas na especificação de requisitos ampliados por os fatores relacionados ao DDS, além de os apontados no cenário 1.
Entretanto, analisando os dados consolidados dos novos problemas apontados por os entrevistados, não foi possível obter nenhuma tendência significativa.
Uma possível explicação para este fato é de que nem todos os respondentes tiveram experiência com usuários e clientes em múltiplas localidades.
Outra possibilidade é de que os problemas na especificação de requisitos ampliados por o DDS sejam os mesmos nos cenários 1 e 2, sendo apenas ampliados neste último.
O cenário 3 apresenta um ambiente de desenvolvimento de software global, onde os engenheiros de requisitos estão distantes da equipe de desenvolvimento.
Entretanto, toda a equipe de desenvolvimento está na mesma localidade, bem como engenheiros de requisitos estão co-localizados (Figura 23).
Ou seja: Engenheiros de requisitos numa mesma localização física;
A equipe de desenvolvimento está numa mesma localização física, distante globalmente dos engenheiros de requisitos.
Alguns exemplos deste cenário são:
Engenheiros de requisitos em Porto Alegre e equipe de desenvolvimento em Bangalore.
Engenheiros de requisitos em Londres e equipe de desenvolvimento em Porto Alegre.
Em este cenário foi solicitado aos respondentes que apontassem os principais problemas na especificação de requisitos causados por os fatores relacionados ao desenvolvimento distribuído de software.
Em a seqüência são apresentados os resultados consolidados para este cenário, agrupados por tipo de problema na especificação.
O Tabela 17 apresenta a síntese das respostas para afirmação ambígua no cenário 3.
Os resultados são comentados na seqüência, após o quadro.
A maioria dos respondentes apontou o idioma nativo dos stakeholders como uma fonte para ambigüidades.
Quando a especificação de requisitos é escrita por um grupo distante da equipe de desenvolvimento, a diferença de idioma nativo tende a ampliar as ambigüidades.
Este resultado alinha- se com o estudo de Damian onde a diferença de idioma é apontada como uma fonte de ambigüidades.
Os valores pessoais dos stakeholders, bem como atitudes e forma de agir dos envolvidos no processo de desenvolvimento foram considerados origem de ambigüidades para 5 dos 6 respondentes.
Estes fatores foram apontados, de acordo com um dos respondentes, porque muitas vezes por inibição, ou receio de demonstrar o não conhecimento de uma determinada característica do sistema, os envolvidos deixam de solicitar clarificações.
De essa forma, especificações são realizadas com ambigüidade propositadamente, onde seus responsáveis deixam para buscar maiores informações no decorrer de o processo de desenvolvimento.
O mesmo ocorre com os responsáveis por o projeto da aplicação e os desenvolvedores.
O DDS amplia este problema, pois existe receio de que a confiança seja abalada se forem realizados muitos questionamentos.
Este resultado não foi encontrado em outros estudos da literatura.
Tabela 18 -- EC2 -- Síntese das respostas para Informação Faltante no cenário 3 O fator mais fortemente relacionado por os respondentes com a falta de informações foi a diferença de idioma entre os stakeholders.
Com a diferença de idioma, a comunicação é prejudicada, fazendo com que requisitos importantes possam ser deixados de lado.
Os valores pessoais dos stakeholders também foram apontados como uma possível fonte de falta de informações.
O motivo para isso é a provável resistência dos stakeholders a compartilharem informações, com receio da perda de empregos ou status para outra localidade.
Esta dificuldade tem aparecido em diversas empresas que realizam desenvolvimento offshore, como apontado em.
A dificuldade de identificação dos stakeholders também foi apontada como fonte de falta de informações.
Em este cenário isto acontece principalmente por a dificuldade da equipe de desenvolvimento de identificar os responsáveis por a clarificação das informações na especificação.
A redução da comunicação informal é um fator envolvido com essa dificuldade, como apresentado em e.
A diferença de contexto entre as localidades também foi apontada como causa para a falta de informações neste cenário.
Se o responsável por a especificação dos requisitos não considera o contexto existente nas localidades onde o desenvolvimento será realizado e omite informações necessárias por considerar- las óbvias, poderão faltar informações importantes na especificação de requisitos.
O Tabela 19 apresenta a síntese das respostas para informações inconsistentes no cenário 3.
Estas informações são detalhadas na seqüência.
Em o cenário de distribuição da equipe de engenheiros de requisitos em relação a a equipe de desenvolvimento, as informações inconsistentes foram relacionadas principalmente à diferença de idioma, awareness e dificuldade de identificação dos stakeholders.
A relação entre a diferença de idioma nativo dos stakeholders e informações inconsistentes na especificação foi apontada por 83% dos respondentes.
As possíveis justificativas para esta resposta são similares a do cenário 1.
Os respondentes podem ter confundido os termos inconsistência e ambigüidade.
Outra possibilidade é que a inconsistência seja decorrente de erros de interpretação devido a a diferença de linguagem.
A consciência das mudanças ou progresso nas localidades envolvidas foi identificado por 83% dos respondentes como ampliador de inconsistências nos requisitos.
Quando em ambientes distribuídos, alterações numa das localidades, se não forem corretamente identificadas e alertadas para todas as localidades envolvidas, podem levar a inconsistências.
A dificuldade de identificação dos stakeholders foi apontada por 5 dos 6 respondentes como fator que amplia informações inconsistentes nos requisitos.
A o contatar os stakeholders em busca de informações ou clarificação de requisitos, se não forem identificados corretamente os responsáveis, podem ser obtidas informações conflitantes, originando inconsistências.
Os resultados consolidados para informação incorreta no cenário 3 são apresentadas no Tabela 20 e detalhadas a seguir.
Os principais fatores que foram apontados como causa para informações incorretas no cenário 3 foram o gerenciamento de informações dispersas em múltiplas localidade, awareness e a dificuldade de identificação dos stakeholders.
Informações dispersas em múltiplas localidades, em conjunto com a dificuldade de identificar mudanças nas informações (relacionada ao awareness) tendem a fazer com que informações incorretas façam parte da especificação.
Se a equipe de desenvolvimento não é alertada de alteração nos requisitos, o processo de desenvolvimento ocorre sobre uma especificação desatualizada, com requisitos incorretos.
Isto é ampliado no DDS, onde mecanismos informais de troca de informação, como conversas em encontros casuais nos corredores da empresa, são reduzidos.
A dificuldade de identificação dos stakeholders também foi apontada como causa para a presença de informações incorretas na especificação.
A o buscar clarificação sobre a especificação, se não forem contatadas as pessoas corretas, informações incorretas poderão ser utilizadas.
D) Cenário 4 O cenário 4 aborda a distribuição de um grupo de engenheiros de requisitos colocalizados em relação a equipes de desenvolvimento distribuídas (Figura 24).
Ou seja: Engenheiros de requisitos numa mesma localização física;
Equipes de desenvolvimento distribuídas globalmente e distantes globalmente dos engenheiros de requisitos.
Alguns exemplos deste cenário são:
Engenheiros de requisitos em Toronto, equipe de desenvolvimento em Toronto, Porto Alegre e Pequim.
Engenheiros de requisitos em Porto Alegre, desenvolvimento (codificação) em Porto Alegre e Bangalore, testes em Lisboa.
Em o cenário 4 foi questionado aos respondentes se os problemas na especificação ampliados por os fatores relacionados ao DDS eram aprofundados em relação a o cenário 3.
Em seguida, foi solicitado ao respondentes para identificar se existem novos relacionamentos entre problemas na especificação e fatores relacionados ao DDS emergem no cenário 4 e, se existirem, quais são.
Todos os respondentes concordaram que, no cenário 4, todos os fatores relacionados ao desenvolvimento distribuído de software apontados no cenário 3 que ampliam a incidência de problemas nos requisitos são aprofundados.
De essa forma observamos que, na percepção dos respondentes, a existência de diversas equipes de desenvolvimento distribuídas entre si e em relação a os engenheiros de requisitos tende a ampliar os problemas na especificação apontados no cenário 3.
Em a questão 2 todos os respondentes concordaram que existem outros fatores relacionados ao DDS que ampliam os problemas em requisitos, além de os apontados no cenário 3.
Entretanto, não foram encontrados dados significativos de entre os novos fatores apontados para este cenário.
A principal hipótese que emerge é que não existem novas relações entre fatores e problemas nos requisitos no cenário 4, somente uma ampliação dos apontados no cenário 3.
A o consolidar os resultados dos cenários, podemos identificar tendências que ocorreram de forma geral no estudo, conforme identificado na seqüência.
A diferença de fuso-horário não apresentou relações significativas com nenhum dos problemas nos requisitos, embora fosse esperada sua relação com a falta de informações, por exemplo.
A o considerar equipes com grandes diferenças de fuso-horário, os horários de trabalho podem ser pouco ou nunca sincronizados.
Com isso, espera- se que problemas na especificação surjam, como a falta de informações devido a a dificuldade de comunicação síncrona.
Entretanto, esta relação não foi encontrada.
O número de respondentes que consideraram que os fatores listados ampliavam o número de informações desnecessárias na especificação de requisitos foi, de maneira geral, baixo.
De acordo com dois dos entrevistados, a dificuldade de se obter informações com o DDS é comumente grande, fazendo com que toda a informação trocada seja importante.
De entre os fatores analisados, destacaram- se como causadores de problemas na especificação de requisitos a diferença de idioma, a dificuldade de identificação dos stakeholders e o awareness, como apresentado na Tabela 21.
A diferença de idioma apresenta- se como um fator ampliador de problemas na especificação, em especial ambigüidade, inconsistência e falta de informações.
A identificação incorreta dos stakeholders tende a ampliar a ocorrência de informações incorretas ou inconsistentes, bem como causar a falta de requisitos na especificação.
Dificuldades com o awareness, como as localidades envolvidas não estarem a par de todas as modificações nos negócios ou requisitos do software em desenvolvimento, tendem a ampliar as informações incorretas na especificação, bem como reduzir a completude e gerar inconsistências.
De entre os problemas na especificação ampliados por os fatores do desenvolvimento distribuído de software destaca- se a falta de informações, com o maior número de respostas.
Diversos fatores podem causar a falta de informações.
Dificuldades de comunicação causadas por a diferença de idioma nativo dos stakeholders, pelo meio de comunicação, ou mesmo, por a diferença de fuso horário, tende a reduzir o volume de informações transmitido para equipes distantes, causando assim a falta de informações na especificação.
Além disso, a dispersão de documentos, dificuldade de identificação dos stakeholders, entre outros, também contribuem para que informações importantes não sejam descobertas por os engenheiros de requisitos, ou ainda, não estejam disponíveis para a equipe de desenvolvimento.
Com base nos resultados do estudo de caso, foram obtidas lições aprendidas em relação a os problemas na especificação causados por os fatores do desenvolvimento distribuído de software.
Estas lições são apresentadas na seqüência.
Lição 1: Os problemas na especificação de requisitos são ampliados quando existe diferença de idioma nativo entre os envolvidos.
A diferença de idioma é um dos principais fatores que ampliam os problemas na especificação de requisitos.
A diferença de idioma apresenta- se como um ampliador de ambigüidades, inconsistências e falta de informações.
As ambigüidades são ampliadas, por exemplo, por a falta de conhecimento do idioma utilizado na especificação, levando à má interpretação, ou mesmo à escrita de requisitos incorretos.
As inconsistências podem ser ampliadas, por exemplo, devido a a incorreta compreensão das necessidades dos stakeholders durante a elicitação, fazendo com que apareçam conflitos entre os requisitos especificados.
A falta de informações pode ocorrer por a dificuldade de expressão numa língua diferente da nativa, por parte de os envolvidos, que deixam de informar ou questionar informações importantes para especificação.
Lição 2: A identificação incorreta dos stakeholders tende a ampliar os problemas na especificação de requisitos quando em ambientes de DDS.
A identificação incorreta dos stakeholders é um fator que amplia o volume de informações incorretas, de inconsistências e a falta de informações na especificação.
Se não forem consultadas pessoas com conhecimento profundo do ambiente durante a elicitação de requisitos, informações incorretas podem passar a fazer parte da especificação, sendo descobertas tardiamente no processo de desenvolvimento.
O mesmo pode causar inconsistências, se opiniões conflitantes fizerem parte da especificação, por exemplo.
Além disso, se os todos os stakeholders significativos não forem entrevistados, pode ocorrer a falta de requisitos na especificação.
Lição 3.
Problemas na especificação são ampliados devidos à falta de consciência das modificações ou progressos nas localidades envolvidas.
O awareness tende a aprofundar as informações incorretas na especificação, ampliar o volume de inconsistências e a falta de requisitos.
Se mudanças no negócio durante a especificação, por exemplo, ocorrerem sem que a equipe de engenheiros de requisitos seja alertada, informações desatualizadas, e portanto incorretas, podem fazer parte da especificação.
Isso também pode provocar inconsistências quando as modificações não forem alertadas completamente a todos os grupos.
De a mesma forma, a falta de informações pode ocorrer se todas as equipes não estiverem conscientes do estado do negócio.
Lição 4: O principal problema na especificação ampliado por os fatores do DDS é a falta de informações.
O principal problema na especificação ampliado por fatores relacionados ao desenvolvimento distribuído de software é a falta de informações.
A falta de informações é causada principalmente por a diferença de idioma nativo dos stakeholders, pelo meio de comunicação utilizado, por a dispersão dos documentos e por a dificuldade de identificação dos stakeholders.
Lição 5: Quanto maior o número de grupos de stakeholders envolvidos, mais ampliados tornam- se os problemas na especificação.
Conforme apresentado nos cenário 2, os problemas na especificação identificados no cenário 1 são ampliados quando existem diversos grupos de usuários e clientes dispersos.
De a mesma forma, no cenário 4, apresentou- se que, quando o número de equipes de desenvolvimento dispersas aumenta, os problemas na especificação tendem a ser ampliados.
Em este capítulo é apresentada a proposta de um modelo de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software, com base na teoria existente no assunto e nos resultados dos estudos de caso (sintetizado nas lições aprendidas).
O modelo de processo visa reduzir o impacto da dispersão das equipes na engenharia de requisitos.
Zowghi apresenta a necessidade de definição de um processo de engenharia de requisitos para o desenvolvimento global de software.
De acordo com essa abordagem, foi construída a proposta de um modelo de processo, identificando as principais atividades que devem ser realizadas para atenuar as dificuldades promovidas por o desenvolvimento distribuído de software.
De acordo com Sommerville, modelos de processo são dependentes de interpretação para serem instanciados de acordo com conjuntos particulares de circunstâncias.
As atividades e suas implementações não são definidas em detalhe nestes modelos.
A quebra do processo em atividades de baixa granularidade é uma tarefa específica de cada projeto.
Modelos de processo identificam os produtos do processo de software e as interações entre os desenvolvedores.
De essa forma, o modelo proposto não se restringe a apresentar técnicas específicas durante o processo, definindo atividades de mais alto nível, com os artefatos de entrada e saída e sugestões de técnicas para sua realização.
De essa forma, de acordo com a estrutura organizacional, forma de distribuição das equipes, idiomas e culturas envolvidas, por exemplo, podem ser definidas diferentes técnicas para cada atividade do processo.
A proposta de modelo de processo de engenharia de requisitos para ambientes de DDS é composta de quatro fases (Figura 25):
Definições iniciais (Fase 1), mapeamento do contexto (Fase 2), criação da especificação de requisitos (Fase 3) e gerência de requisitos (Fase 4).
Estas fases foram identificadas com base nos resultados do estudo de caso 1, que evidenciou a necessidade de atividades anteriores (como planejar o processo e estabelecer o contexto) e posteriores ao processo preliminar (como a gerência de requisitos).
Em a Fase 1 é estabelecida a infra-estrutura a ser utilizada durante o processo de engenharia de requisitos.
Em este momento são definidos a linguagem de especificação, os embaixadores (pontos focais), o dicionário, os meios de comunicação a serem utilizados, os padrões de especificação, a equipe e as responsabilidades.
Durante a Fase 2 é realizado o mapeamento do contexto onde o software será inserido, incluindo a criação ou atualização da base de conceitos do universo de informações (UdI), criação ou atualização da base de informações culturais e obtenção das informações gerais de negócio.
Em a Fase 3 é criada a especificação de requisitos.
Em este momento os artefatos iniciais de requisitos são obtidos, evoluídos, inspecionados e validados.
Em paralelo com esta fase, são mantidas atualizadas as bases de informações culturais e de conceitos do UdI.
Em a Fase 4 é realizado o gerenciamento de requisitos, das bases de conceitos do UdI e da base de informações culturais, de forma a assegurar que todas as informações que sofrerem alterações durante o processo de desenvolvimento são alertadas para todas as equipes envolvidas.
Existem ainda atividades de suporte, para manutenção das bases de conceitos e de informações culturais ao longo de as fases 3 e 4.
Em a seqüência são descritos os papéis e responsabilidades envolvidos no processo.
Em seguida, são apresentadas em detalhe as fases do modelo de processo proposto, incluindo sugestões de técnicas a serem utilizadas para cada uma das atividades.
Os principais papéis envolvidos no modelo de processo são engenheiros de requisitos, usuários, clientes, gerentes de projeto e a equipe de desenvolvimento.
O engenheiro de requisitos (Er) é responsável por a elicitação, análise, negociação, documentação, validação e gerência dos requisitos.
O engenheiro de requisitos próximo a os usuários e clientes é chamado de analista de negócios.
O engenheiro requisitos próximo a a equipe de desenvolvimento é chamado de analista de aplicações.
Usuários (U) são os responsáveis por a utilização do produto gerado.
Clientes (C) são as pessoas físicas ou jurídicas que solicitaram e contrataram o projeto.
Tanto usuários quanto clientes são importantes fontes de informações para a especificação do software.
O gerente de projetos (GP) é o responsável por o planejamento e condução do projeto de desenvolvimento de software contratado.
O gerente de projetos pode fazer parte da equipe de desenvolvimento, do grupo de usuários e clientes, ou mesmo existir um gerente de projetos junto a cada um desses grupos.
A equipe de desenvolvimento (D) representa os envolvidos no desenvolvimento de um determinado projeto, utilizando como entrada os requisitos especificados por o grupo de engenheiros de requisitos.
Esta equipe pode envolver gerentes de projeto, codificadores, testadores, controladores de qualidade, equipe de suporte a ferramentas, entre outros.
A primeira fase do modelo de processo visa estabelecer a infra-estrutura necessária à condução do processo de engenharia de requisitos em ambientes distribuídos.
Em este ambiente é necessário escolher o idioma da especificação, o dicionário a ser utilizado, os meios de comunicação, os embaixadores e pontos focais, a equipe e responsabilidades, bem como os padrões de especificação.
A Figura 27 apresenta o diagrama destas atividades.
Os artefatos de entrada para a fase de definições iniciais são:
Documentos iniciais do projeto (como charter ou documento de visão/ escopo);
O plano de projeto;
E o plano de comunicação (pode ser uma seção do plano de projeto).
Os artefatos de saída para esta fase são:
O plano de projeto e o plano de comunicação atualizado.
Estas atividades foram definidas com base na literatura e nos resultados dos estudos de caso.
A Tabela 22 apresenta a origem de cada uma das atividades propostas.
Em seguida, estas atividades são descritas em detalhe.
Em o início do processo de desenvolvimento de software, ao estabelecer a demanda, a primeira definição necessária refere- se ao idioma de especificação de requisitos.
Quando o idioma nativo é o mesmo entre usuários, clientes, engenheiros de requisitos e equipe de desenvolvimento, esta etapa é desnecessária.
Entretanto, quando existem múltiplos idiomas nativos entre as equipes, deve ser escolhido um para ser utilizado na condução do processo.
A escolha do idioma a ser utilizado na especificação deve considerar diversos fatores, como:
O uso da especificação após final do processo de desenvolvimento, em caso de manutenção do sistema, por exemplo;
Problemas de interpretação que podem ser causados quando utilizando um idioma diferente do nativo da equipe de desenvolvimento;
A necessidade de validação dos requisitos por os usuários e clientes;
Por ser uma atividade que envolve interesses diretamente relacionadas ao negócio a definição do idioma da especificação deve envolver os clientes, o gerente de projetos e os engenheiros de requisitos.
A Tabela 23 apresenta os artefatos de entrada e saída desta atividade.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto (ex :
Charter ou documento Visão/ Escopo); --
Plano de projeto; --
Plano de comunicação; --
Diretrizes da organização quanto a o idioma a ser utilizado em especificações de requisitos (se houver).
Quando em ambientes com múltiplos idiomas nativos entre as equipes envolvidas, após a seleção do idioma a ser utilizado na especificação, é necessário definir- se um dicionário padrão a ser utilizado por as equipes.
Este dicionário serve como base na resolução de dúvidas de linguagem.
O uso de um dicionário reduzido como, por exemplo, as duas mil palavras mais utilizadas do idioma selecionado, permite que as equipes não nativas no idioma tenham maior facilidade de compreensão das informações.
Em este caso, pode ser decidido que palavras que não constam no dicionário reduzido serão aceitas, desde que definidas explicitamente utilizando apenas palavras já existentes no dicionário.
A definição do dicionário a ser utilizado como base no processo de engenharia de requisitos deve ser realizada por consenso entre os engenheiros de requisitos envolvidos, que passam então a assegurar que os artefatos de requisitos gerados baseiam- se nas definições do dicionário escolhido.
Em casos onde diversos projetos são desenvolvidos por as mesmas organizações envolvidas, ou em offshore insourcing, por exemplo, um dicionário reduzido comum a todos os projetos desenvolvidos pode ser definido, evitando que termos tenham múltiplas interpretações dependendo do momento ou localidade onde a especificação foi desenvolvida.
A Tabela 24 apresenta os artefatos de entrada e saída desta atividade.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto (ex_ Charter ou documento Visão/ Escopo); --
Plano de projeto; --
Plano de comunicação; --
Diretrizes da organização quanto a o idioma a ser utilizado em especificações de requisitos (se houver).
Em esta etapa do processo é definida a responsabilidade do analista de negócios e do analista de aplicações, com relação a as atividades da engenharia de requisitos.
A responsabilidade por a elicitação de requisitos, por exemplo, pode ser definida para o analista de negócios de acordo com suas habilidades e de sua disponibilidade.
Em outros cenários, onde o analista de aplicação está preparado para realizar esta atividade, a elicitação pode ser conduzida por ele, com o analista de negócios agindo como facilitador junto aos usuários e clientes.
De a mesma forma, a responsabilidade por a especificação de requisitos pode ser compartilhada, com o analista de negócios sendo responsável por a especificação de requisitos de alto nível, e o analista de aplicação responsável por completar a especificação.
Este tipo de decisão deve ser tomada por o gerente de projetos, em conjunto com o cliente e os engenheiros de requisitos.
A Tabela 25 apresenta os artefatos de entrada e saída da atividade de definição de responsabilidades.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto (ex_ Charter ou documento Visão/ Escopo); --
Plano de projeto;
A identificação dos responsáveis por cada informação é dificultada por a distribuição das equipes.
Assim, a definição de pontos focais em todas as localidades, responsáveis por cada equipe ou tipo de informação, por exemplo, tende a reduzir os problemas existentes na busca de informações entre equipes distantes.
A lista de pontos focais deve ser compartilhada e de fácil acesso, para que todos os envolvidos no processo de engenharia de requisitos possam consultar, quando necessário, para solicitar esclarecimentos e informações adicionais, por exemplo.
Em caso de mudanças no negócio que afete o produto em desenvolvimento, os pontos focais são responsáveis por alertar as equipes envolvidas, gerando requisições de mudanças nos requisitos.
O envio de membros da equipe próxima ao negócio para junto da equipe de desenvolvimento (chamados de embaixadores) em também pode ser benéfico para o processo de engenharia de requisitos em DDS.
Como a comunicação face a face tende a ser mais efetiva, as equipes se aproximam e o contexto de negócio é mais facilmente transmitido para equipe de desenvolvimento.
O inverso também é válido, o envio de membros da equipe de desenvolvimento para junto aos usuários e clientes auxilia na compreensão das necessidades de negócio, bem como permite que se estabeleça um melhor relacionamento entre as equipes.
Outra importante atividade dos embaixadores é servir como ponte para comunicação informal entre as localidades envolvidas.
Em projetos de software existe um grande volume de comunicação informal e, embora grande parte não seja útil, em alguns casos importantes informações deixam de ser comunicadas por os canais formais para as demais localidades.
Em estes casos, os embaixadores são responsáveis por a transferência dessas informações.
A definição dos pontos focais e embaixadores é conduzida por o gerente de projetos em conjunto com usuários, clientes e engenheiros de requisitos, buscando obter representantes de todos os grupos e áreas de negócio envolvidas.
Os artefatos de entrada e saída relacionados a esta atividade são apresentados na Tabela 26.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto (ex_ Charter ou documento Visão/ Escopo); --
Plano de projeto; --
Plano de comunicação. --
Plano de projeto atualizado com a definição das pessoas que serão embaixadores e/ ou pontos focais de cada área.
A definição da forma de interação entre os stakeholders é importante para evitar mal entendidos e problemas de comunicação.
A forma de interação é dependente de restrições tecnológicas (infra-estrutura) e relacionadas à dispersão (como a diferença de fuso horário).
Em conjunto com a definição dos pontos focais e embaixadores, devem ser consideradas as formas de comunicação disponíveis a cada um de eles e como utilizar- las.
O uso de listas de distribuição de e-mail ou fóruns, por exemplo, podem ser uma alternativa para ampliar a consciência das equipes sobre o andamento ou mudanças nas localidades envolvidas.
Em este caso, todos os envolvidos receberiam mensagens de alerta quando informações de interesse fossem enviadas por um dos membros da equipe.
A forma de interação também varia quanto a o nível de contexto.
Quando temos contato face-a-face, utilizamos diversos mecanismos para expressar a mensagem que desejamos.
Expressões faciais, gestos, alteração no tom de voz, entre outros, auxiliam na comunicação.
Conforme apontado no estudo de caso 2, embora mensagens eletrônicas sejam um meio de baixo contexto, ele possui a vantagem de manter registro histórico das comunicações, permitindo consultas posteriores.
A definição da forma de interação a ser utilizada durante o processo de requisitos pode ser realizada junto com o plano de comunicação do projeto, ou através de consenso entre o gerente de projetos, usuários, clientes e engenheiros de requisitos envolvidos.
A Tabela 27 apresenta os artefatos de entrada e saída desta atividade.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto (ex_ Charter ou documento Visão/ Escopo); --
Plano de projeto; --
Plano de comunicação; --
Plano de comunicação atualizado com a definição das formas de interação a serem utilizadas para engenharia de requisitos.
O objetivo da atividade de definição de padrões de especificação é negociar entre os envolvidos a forma de documentação a ser utilizada no processo de engenharia de requisitos.
Em este momento, são definidas as estruturas dos documentos bem como seu conteúdo previsto.
De entre os padrões de especificação, podem ser negociados o uso de estruturas de frase, cenários, casos de uso, diagramas, entre outros.
Para isso, é importante considerar o idioma que será utilizado para especificação, e as alternativas existentes para melhorar a clareza e simplificar a leitura neste idioma.
Em muitos casos, como no offshore insourcing, estes padrões podem ser organizacionais, sendo selecionados de um conjunto pré-definido por a organização.
Os padrões devem ser escolhidos por consenso entre os engenheiros de requisitos, gerentes de projetos e clientes, de forma que todos os grupos contribuam na definição de padrões que melhorem a clareza da especificação para os leitores.
Os artefatos de entrada e saída relacionados a atividade de definição dos padrões de especificação são apresentados na Tabela 28.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto (ex_ Charter ou documento Visão/ Escopo); --
Plano de projeto; --
Documentos de padrões de especificação da organização (se houver). --
Plano de projeto atualizado com a definição de padrões de especificação a serem utilizados no projeto, com referências para obtenção de maior detalhamento.
A segunda fase do modelo de processo visa mapear o contexto da localidade e do negócio onde o software em desenvolvimento será inserido, de forma a simplificar o entendimento por as equipes distantes.
Em esta fase são conduzidas a criação ou atualização da base de informações culturais e de contexto, a criação ou atualização da base de conceitos do UdI, e a obtenção de informações gerais sobre o negócio.
A Figura 28 apresenta o diagrama com as atividades desta fase.
Os artefatos de entrada para a fase de mapeamento do contexto são:
Os documentos iniciais do projeto;
O plano de projeto;
E o plano de comunicação.
Os artefatos de saída para esta fase são:
A base de informações culturais e de contexto atualizada;
E a base de conceitos do UdI atualizada.
Estas atividades foram derivadas dos resultados dos estudos de caso e da literatura existente no tema, conforme apresentado na Tabela 29, e descritas em detalhe na seqüência.
Em o desenvolvimento distribuído de software, as diferenças culturais e de contexto podem fazer com que as equipes envolvidas tenham uma compreensão diferenciada do sistema a ser desenvolvido.
Conforme apontado por Mahemoff, em culturas distintas podem existir medidas e regras de interação social variadas, que se não forem explicitamente definidas podem causar o desenvolvimento incorreto do software.
Um exemplo deste tipo de erro ocorreu numa sonda espacial da Nasa enviada para Marte Em este momento do processo é construída (ou atualizada, se existente) uma base de informações culturais e de contexto, para servir como base para as equipes de especificação e desenvolvimento no conhecimento das características do local onde o software será inserido.
Uma forma de organizar esta base de informações é proposta por Mahemoff.
É importante ressaltar que todas as informações inseridas na base de dados devem ser validadas por pessoas pertencentes à cultura ou contexto em questão, evitando a entrada de dados incorretos.
A partir de o momento de sua criação esta base deve ser mantida atualizada até o final do processo de desenvolvimento, através de uma atividade de gerenciamento.
Assim assegura- se que todas as novas informações descobertas durante o desenvolvimento poderão ser utilizadas em projetos posteriores.
A base de informações culturais deve ser alimentada por todos os envolvidos no processo de desenvolvimento.
Muitas vezes, pode ser difícil para pessoas nativas numa determinada cultura compreender as próprias características.
Em esse momento, os embaixadores podem ser fontes importantes de informações culturais para a base.
Tabela 30 -- Artefatos de entrada e saída da atividade de criar/ atualizar base de informações culturais e de contexto.
Outra atividade na fase de mapeamento de contexto é a criação (ou atualização, se existente) de uma base de conceitos do universo de informações em questão.
De essa forma, o vocabulário específico da aplicação é mapeado, permitindo uma melhor compreensão do ambiente de negócios.
Os conceitos podem ser capturados num glossário, um thesaurus, ou mesmo através de modelos conceituais, do LEL ou ontologias.
É importante que sejam de simples consulta e associação com os requisitos do software.
Caso tenha sido adotado um dicionário reduzido, a descrição dos conceitos do UdI deve ser realizada preferencialmente utilizando palavras deste dicionário ou conceitos já descritos.
Uma atividade de gerência da base de conceitos do UdI assegura que as informações existentes na base são atualizadas até a finalização do processo de desenvolvimento de software.
A criação da base de conceitos, em geral, deve ser conduzida por o analista de negócio, dada sua proximidade dos usuários e clientes, e de seu conhecimento do negócio.
O analista de aplicação, ao ter contato com os documento do projeto pode gerar demandas para serem incluídas na base de conceitos, bem como verificar se o conteúdo é de simples compreensão.
A Tabela 31 apresenta os artefatos de entrada e saída da atividade de criar/ atualizar base de conceitos do universo de informações (UdI).
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto; --
Plano de projeto; --
Plano de comunicação. --
Base de conceitos do UdI atualizada.
Durante a condução das atividades desta fase, diversas informações relacionadas ao negócio em questão emergem.
Estas informações, como escopo, necessidades, entre outros devem ser identificadas e transmitidas às equipes envolvidas, de forma a permitir uma melhor compreensão das razões que levaram ao desenvolvimento do software em questão.
O principal responsável por a distribuição das informações de negócio é o analista de negócios, devido a a sua proximidade dos usuários e clientes e maior conhecimento das motivações que geraram a demanda por o projeto de software.
Esta atividade auxilia na identificação de informações para serem incluídas nas bases de conceitos e de informações culturais e de contexto.
De a mesma forma, as informações tendem a ser melhor compreendidas com a consulta a estas bases para obter clarificações.
As fases um e dois permitem formar as bases para o início da especificação de requisitos.
Em a terceira fase do modelo de processo proposto, é criada a especificação de requisitos.
Esta fase é composta das atividades de obtenção, evolução, inspeção e validação dos artefatos de requisitos.
A Figura 29 apresenta as atividades desta fase.
Os artefatos de entrada para a fase de criação da especificação de requisitos são:
Os documentos iniciais do projeto;
O plano de projeto;
O plano de comunicação;
A base de conceitos do UdI;
E a base de informações culturais e de contexto.
Os artefatos de saída para esta fase são:
Os artefatos de especificação de requisitos do software;
A documentação resultante da inspeção realizada;
E a aprovação formal das localidades envolvidas.
Estas atividades foram selecionadas com base na literatura e resultados dos estudos de caso, conforme apresentado na Tabela 33.
Em a seqüência são descritas em detalhe cada uma das atividades desta fase do processo.
A primeira atividade da fase 3 é a criação e distribuição dos artefatos iniciais de requisitos para as equipes de desenvolvimento (ou a equipe de desenvolvimento, se existir apenas uma).
Em este momento o analista de negócios é responsável por reunir as informações necessárias para criar os artefatos iniciais de requisitos (conforme definidos para sua responsabilidade no plano de projeto) e enviar estes artefatos para os analistas de aplicação.
O conjunto inicial de artefatos pode ser constituído de documentos de alto nível, como um documento Visão/ Escopo, ou mesmo incluir uma versão inicial de um documento de especificação de requisitos.
Caso uma versão inicial de um documento de especificação de requisitos seja criada nesta fase, sob responsabilidade do analista de negócios, este deve conduzir a elicitação e negociação dos requisitos junto aos usuários e clientes, bem como sua documentação.
A rastreabilidade dos requisitos deve ser mantida, de forma a permitir a identificação de sua origem.
A Tabela 34 apresenta os artefatos de entrada e saída da atividade de criar e distribuir artefatos iniciais de requisitos.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto; --
Plano de projeto; --
Plano de comunicação. --
Base de conceitos do UdI; --
Base de informações culturais e de contexto. --
Artefatos iniciais de especificação de requisitos do software, conforme definido por as responsabilidades no plano de projeto.
Caso o analista de negócios seja o responsável por as atividades de elicitação e documentação dos requisitos, é criada e enviada a especificação de requisitos.
Caso contrário, a saída desta fase pode ser composta somente de documentos de alto nível;
A o receber os artefatos iniciais de requisitos o analista de aplicação busca, em primeiro lugar, o entendimento destes artefatos e seu contexto.
Representantes da equipe de desenvolvimento também são colocados em contato com os artefatos para contextualização.
A compreensão dos artefatos iniciais de requisitos é simplificada por a base de conceitos do UdI e, em caso de diferença de idioma entre as equipes, por o uso de um dicionário reduzido.
Durante esta etapa os artefatos de requisitos são complementados com informações e adaptados para reduzir potenciais fontes de problemas.
Dúvidas surgem e devem ser esclarecidas com o analista de negócios ou o grupo de usuários/ clientes, caracterizando grande volume de comunicação entre as equipes.
Caso a especificação de requisitos deva ser criada nesta fase, o analista de aplicação deve estar preparado para conduzir a elicitação, análise e documentação dos requisitos à distância dos usuários e clientes.
A rastreabilidade dos requisitos deve ser mantida, de forma a permitir a identificação de sua origem.
A comunicação entre as equipes, além de esclarecimentos, visa obter consenso quanto a a especificação em construção, alinhando as múltiplas visões em relação a os requisitos.
Os artefatos finais de requisitos devem estar de acordo com os padrões planejados na fase de definições iniciais e registrados no plano de projeto.
Os artefatos de entrada e saída relacionados a esta atividade são apresentados na Tabela 35.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto; --
Plano de projeto; --
Plano de comunicação. --
Base de conceitos do UdI; --
Base de informações culturais e de contexto; --
Artefatos iniciais de especificação de requisitos do software. --
Artefatos de especificação de requisitos do software conforme definido nas responsabilidades no plano de projeto.
A o finalizar a evolução dos artefatos de requisitos, todas as localidades envolvidas devem realizar uma inspeção nestes artefatos, de forma a assegurar que todos compreendem e são capazes de realizar o processo de desenvolvimento com base em eles.
Como resultado das inspeções, diversas alterações podem ser necessárias à especificação, de forma a clarificar e melhorar sua qualidade.
A equipe de inspeção de requisitos deve ser composta por uma grande variedade de papéis, como o líder técnico, o gerente de projetos, o engenheiro de testes, entre outros, como destacado para o Firesmith.
Existem várias técnicas de inspeção que podem ser utilizadas nesta atividade, como Ad-Hoc, baseada em Checklist, baseada em cenários e baseada em perspectiva.
A Tabela 36 apresenta os artefatos de entrada e saída desta atividade.
Artefatos de entrada:
Artefatos de saída: --
Documentos iniciais do projeto; --
Base de conceitos do UdI; --
Base de informações culturais e de contexto; --
Artefatos de especificação de requisitos do software. --
Documentação resultante da inspeção realizada.
Após a evolução dos artefatos de requisitos, estes devem ser validados por o grupo de usuários/ clientes, assegurando que a especificação construída atende às necessidades e objetivos que motivaram o processo de desenvolvimento.
O grupo de usuários/ clientes deve verificar os artefatos de requisitos, assegurando que eles refletem os objetivos do projeto.
Como a participação de todos os grupos ocorreu durante a atividade de evolução dos artefatos de requisitos, esta etapa é simplificada.
Caso a especificação seja validada, esta é definida com a base inicial para o processo de desenvolvimento.
Os artefatos de entrada e saída relacionados a atividade de validar artefatos de requisitos são apresentados na Tabela 37.
Artefatos de entrada:
Artefatos de saída: --
Base de conceitos do UdI; --
Base de informações culturais e de contexto; --
Artefatos de especificação de requisitos do software. --
Aprovação formal das localidades e grupos envolvidos.
A quarta e última fase do modelo de processo é responsável por o gerenciamento dos requisitos.
Em esta fase, é conduzida a manutenção dos artefatos de requisitos, assegurando que estão constantemente alinhados com os objetivos de negócios e atualizados de acordo com as modificações do ambiente.
Os artefatos de entrada para a fase de gerenciamento de requisitos são:
Os artefatos de especificação de requisitos do software inspecionado;
A solicitação de alteração nos requisitos do software;
A base de conceitos do UdI;
E a base de informações culturais e de contexto.
Os artefatos de saída para esta fase são:
A análise de impacto das modificações nos requisitos;
A aprovação ou rejeição das alterações;
E os artefatos de requisitos atualizados (caso a modificação tenha sido alterada).
Esta atividade foi proposta com base na literatura e nos resultados dos estudos de caso, conforme apresentado na Tabela 38 e descrito em detalhe na seqüência.
A atividade de gerenciar os artefatos de requisitos é realizada durante todo o processo de desenvolvimento de software, com o objetivo de gerenciar as mudanças nos requisitos.
Em esta atividade é realizado o controle a análise de impacto das modificações.
Mudanças nos requisitos podem ocorrer por alterações nas necessidades dos stakeholders, no ambiente onde o sistema será utilizado ou na legislação, por exemplo.
Em o desenvolvimento distribuído de software a gerência de requisitos adquire caráter ainda mais crítico, devendo assegurar que todas as equipes e localidades sejam alertadas de modificações nos requisitos.
Requisições de mudanças iniciadas por os usuários e clientes devem ser analisadas por o analista de negócios.
Este deve encaminhar a requisição para todos os analistas de aplicação e gerentes de projetos, para análise de impacto e aprovação.
Durante a análise de impacto, analistas de negócios e aplicação trabalham em conjunto, para assegurar que as alterações estão refletidas em todas as localidades envolvidas.
A aprovação de todas as partes é necessária para assegurar que todos estão cientes da mudança e aptos a executar- la.
A rastreabilidade dos requisitos deve ser mantida durante esta fase, bem como usada como entrada para a avaliação de impacto das modificações.
A Tabela 39 apresenta os artefatos de entrada e saída desta atividade.
Artefatos de entrada:
Artefatos de saída: --
Base de conceitos do UdI; --
Base de informações culturais e de contexto; --
Artefatos de especificação de requisitos do software inspecionados e aprovados; --
Solicitação de alteração nos requisitos do software; --
Análise de impacto das modificações nos requisitos; --
Aprovação ou rejeição das alterações; --
Artefatos de requisitos atualizados (caso a modificação tenha sido aceita).
Após a finalização da fase 2 surgem duas atividades de suporte, de forma a assegurar que as bases de informações culturais e conceitos do UdI.
Estas atividades estão apresentadas na Figura 31 e descritas na seqüência.
Os artefatos de entrada para as atividades de suporte são:
A base de conceitos do UdI;
A base de informações culturais e de contexto;
E uma solicitação de alterações na base de conceitos do UdI ou solicitação de alterações na base de informações culturais e de contexto.
Os artefatos de saída para estas atividades são:
A base de conceitos do UdI atualizada com as modificações solicitadas;
A base de informações culturais e de contexto atualizada com as modificações solicitadas.
Esta atividade é conduzida durante as fases 3 e 4 do modelo de processo, com o objetivo de manter atualizada a base de informações culturais.
Para isso, devem ser definidos os responsáveis por gerenciar as alterações nesta base, bem como os mecanismos de alteração.
De forma geral, todos os envolvidos podem solicitar a inclusão, remoção ou atualização de informações culturais ou de contexto.
Assim, deve ser definida uma forma para que estes possam encaminhar as mudanças para avaliação.
Os artefatos de entrada e saída relacionados a atividade de gerenciar base de informações culturais e de contexto são apresentados na Tabela 40.
Artefatos de entrada:
Artefatos de saída: --
Base de informações culturais e de contexto; --
Solicitação de alterações na base de informações culturais e de contexto; --
Base de informações culturais e de contexto atualizada com as modificações solicitadas.
De a mesma forma que o gerenciamento de informações culturais, esta atividade é realizada durante as fases 3 e 4 do modelo de processo visando manter atualizada a base de conceitos do UdI.
Durante o processo de desenvolvimento, pode ser necessária a inclusão de novos conceito, por exemplo.
Assim, devem ser definidos os responsáveis por a manutenção da base de conceitos do UdI.
Como a base de conceitos é ligada a informações de negócio, específicas do ambiente da aplicação em andamento, alterações nesta base devem ser alertadas para todos os analistas de negócios e de aplicação envolvidos.
A Tabela 41 apresenta os artefatos de entrada e saída desta atividade.
Artefatos de entrada:
Artefatos de saída: --
Base de conceitos do UdI; --
Solicitação de alterações na base de conceitos do UdI.
A engenharia de software vem realizando progressos nos últimos anos.
Modelos de processo como o RUP e modelos de maturidade como o SW-CMM têm sido adotados largamente e com sucesso no meio empresarial.
Entretanto, novos desafios estão surgindo, exigindo diferentes abordagens para processos existentes.
O desenvolvimento distribuído de software é um destes desafios.
A engenharia de requisitos sempre foi reconhecida como uma área crítica no desenvolvimento de software.
O seu estudo em ambientes de desenvolvimento distribuído de software oferece grandes oportunidades de pesquisa por ser uma área nova, com crescimento acelerado e poucos trabalhos desenvolvidos no Brasil.
Novas técnicas, processos e ferramentas são claramente necessários, aumentando a relevância dos estudos.
Conforme apresentado no capítulo 7, o objetivo geral desta dissertação foi atingido, com a proposta de um modelo de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software.
O objetivo específico de aprofundar o conhecimento em engenharia de requisitos, DDS e tópicos relacionados foi atingido, conforme demonstrado por a base teórica apresentada no capítulo 2.
As principais categorias e fatores relacionados à engenharia de requisitos em ambientes de desenvolvimento distribuído de software foram identificados de acordo com a literatura, conforme apresentados no capítulo 4.
A elaboração de uma proposta preliminar de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software foi realizada conforme descrita no capítulo 5, tendo sido utilizado como base para o estudo de caso 1.
A proposta de um modelo de processo de engenharia de requisitos para ambientes de desenvolvimento distribuído de software visa contribuir na área de engenharia de software, ao preencher uma lacuna existente na área de desenvolvimento distribuído de software, especificamente em engenharia de requisitos, conforme apontado por Zowghi.
Além disso, o estudo apresenta novos dados empíricos relativos à área de engenharia de requisitos em ambientes de desenvolvimento distribuído de software.
Finalmente, este estudo visa contribuir com a prática ao atender uma demanda organizacional crescente por melhorias nos processos de engenharia de requisitos, bem como, por tratar das dificuldades causadas por a distribuição das equipes de desenvolvimento.
Uma das principais limitações da pesquisa refere- se ao número de empresas estudadas na parte empírica do estudo, restringindo a generalização dos resultados obtidos.
Deve- se, entretanto, destacar que os resultados do estudo de caso foram sustentados na base teórica estudada, o que permite um bom grau de segurança nas conclusões obtidas.
Isto também é típico do tipo de pesquisa desenvolvida, exploratória e de base qualitativa, permitindo o uso de inferência nas conclusões obtidas.
Outra limitação do estudo foi a definição de um modelo de processo de alto nível, sem explorar técnicas específicas a serem utilizadas em cada atividade.
A opção por esta abordagem foi feita devido a restrições de escopo e tempo impostas ao trabalho.
Identifica- se grande potencial de crescimento nesta linha de pesquisa, centrada no tema de engenharia de requisitos em ambientes de desenvolvimento distribuído de software.
Como pesquisas futuras, sugere- se:
A realização de experimentos visando avaliar quantitativamente o modelo de processo proposto em relação a o uso de modelos tradicionais de engenharia de requisitos;
Abordar detalhadamente as atividades do modelo de processo, identificando técnicas para utilização de acordo com cada cenário envolvido;
Um aprofundamento do estudo na área de manutenção, onde problemas como acesso à documentação e stakeholders, por exemplo, é dificultada em ambientes de DDS;
Estudos visando identificar critérios para distribuição de requisitos entre diversas localidades.
