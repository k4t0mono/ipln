Este trabalho apresenta resultados da pesquisa de mestrado que busca investigar requisitos e características que uma metodologia deve oferecer que possibilite a modelagem de Sistemas Tutores Inteligentes (STI) Multiagentes.
Uma vez que, este tipo de aplicação educacional se constitui como um Sistema Multiagente (SMA), foi selecionada uma metodologia de referência denominada MaSE (Multi-agent System Engineering), proposta por Wood, e com o objetivo de verificar a aplicação da metodologia proposta foi desenvolvida a simulação de um estudo de caso baseado no trabalho de Andrade, a fim de que os requisitos e particularidades desta aplicação pudessem ser estudados.
Os resultados obtidos através do processo de simulação permitiram validar a aplicação da metodologia como instrumento de modelagem do ciclo de tutoração presentes em STI multiagentes.
Para contextualizar esta pesquisa, foi realizada, uma revisão bibliográfica dos principais STI que utilizam a tecnologia de agentes em seu projeto, com o objetivo de identificar alguns aspectos específicos em seu desenvolvimento.
E, também, uma pesquisa sobre metodologias para o desenvolvimento de Sistemas Multiagentes, a fim de obter uma maior fundamentação e reunir subsídios para auxiliar no desenvolvimento dessa pesquisa.
Estes resultados podem ser acessados em.
Palavras Chave: Sistemas Multiagentes, Sistemas Tutores Inteligentes, Engenharia de Software, Metodologias Com o advento da Informática e a evolução do hardware e das ferramentas de software, surgiu uma nova técnica que revolucionou o processo de ensino/ aprendizagem:
A autoinstrução, que possibilitou a veiculação de uma vasta gama de informações de forma mais dinâmica do que os métodos de educação convencionais.
Com o surgimento da Internet, redes e sistemas distribuídos, observa- se que os ambientes destinados ao ensino começaram a ser projetados numa escala diferente.
Passa- se a ter sistemas de maior porte, de maior complexidade de concepção e modelagem, e que trazem de forma intrínseca as mesmas características e problemas de outras aplicações que se utilizam destas mesmas tecnologias, como o caso dos Sistemas de Informação.
Os Sistemas Tutores Inteligentes (STI) são programas educacionais projetados para oferecer algum tipo de auxílio personalizado ao aluno, considerando o processo de aprendizagem de um determinado conteúdo.
Modelar e implementar um STI envolve aspectos de Engenharia de Software e aspectos pedagógicos associados a organização e manipulação do conteúdo a ser apresentado para o aluno.
Em os últimos anos, observa- se a tendência de utilização/ aplicação da tecnologia de agentes a fim de ampliar as possibilidades de se fazer esta assistência personalizada ao aluno.
Quando aplicamos a tecnologia de agentes em STI, estes passam a ser considerados, também, como Sistemas Multiagentes (SMA).
Entretanto, por se tratarem de software educacionais, precisam ser tratados de forma diferenciada devido a suas características peculiares.
Portanto, a adaptação e/ ou criação de ferramentas e metodologias mais específicas para STI é um campo de pesquisa novo, relevante e com diversificadas potencialidades investigativas.
Utilizamos a expressão &quot;tecnologia de agentes», ao invés de &quot;paradigma de agentes «porque ainda não existe consenso na área de Inteligência Artificial (Ia) para este novo padrão.
Segundo Kuhn, paradigmas são as realizações científicas universalmente reconhecidas que, durante algum tempo, fornecem problemas e soluções modulares para a comunidade de praticantes de uma ciência.
Portanto, tecnologia de agentes ainda não pode ser definido desta forma por não ter uma especificação, um modelo padrão totalmente estabelecido e aceito.
Contexto Este trabalho de pesquisa envolve diversas áreas do conhecimento, especialmente, a área de Inteligência Artificial Distribuída (IAD), especificamente na área de SMA.
Além de incluir características interdisciplinares tanto da própria área de Inteligência Artificial (Ia), Informática na Educação (IE), bem como, da área de Engenharia de Software (ES).
A Figura 1 tem como objetivo representar o contexto desta pesquisa.
Pode- se observar que, a pesquisa sobre STI Multiagentes, representado por o retângulo mais escuro, é intrinsecamente interdisciplinar, abrangendo as três grandes áreas:
Inteligência Artificial, Informática na Educação e Engenharia de Software.
Este trabalho está inserido no contexto do projeto MASP (MultiAgent System develoPment) 1 onde busca- se a especificação de uma metodologia e uma linguagem de modelagem para sistemas multiagentes e o conjunto de atividades a serem desenvolvidas para a construção de um sistema baseado nesta tecnologia.
O Problema considerado nesta pesquisa De os primeiros programas educacionais em modalidade Cai (Computer Assisted Instruction) 2 aos atuais ambientes de aprendizagem cooperativos na Web que se utilizam da tecnologia de agentes, observa- se a crescente complexidade do projeto destes softwares educacionais.
O volume de informações a serem modeladas e tratadas cresceu de forma significativa.
Projetar um software educacional não é mais uma tarefa que pode ser feita de forma empírica.
É necessário planejar e usar formalismos e especificações que garantam a qualidade e confiabilidade ao sistema e, também, permita o reutilização de seus componentes.
Logo, existe a necessidade de se utilizar ou de desenvolver uma metodologia que permita a especificação de tais ambientes, visando qualidade, tanto em nível pedagógico, bem como, computacional.
A carência de tais metodologias, que permitam a modelagem destes sistemas constitui- se na principal motivação deste trabalho.
Delimitação do estudo Para a elaboração da proposta, adotou- se alguns pressupostos para que a proposta seja exeqüível num tempo compatível com uma dissertação de mestrado.
Como o desenvolvimento de STI é um processo que exige uma equipe interdisciplinar, atendendo aspectos referentes à modelagem de conteúdo, modelagem de estratégias de ensino e aspectos referentes ao projeto da interface gráfica, existe a necessidade de uma abordagem interdisciplinar para a execução do trabalho de pesquisa.
Como estamos tratando de questões envolvendo STI multiagentes, faz- se necessário o estudo de metodologias para se modelar SMA, interações entre agentes e, escolha de um estudo de caso que permitisse avaliar os aspectos relacionados com aplicações educacionais, especificamente STI.
Esta proposta concentra- se em modelar os aspectos relacionados a interação entre os agentes ou sociedade de agentes que compõem o STI.
Especificamente, pretende-se modelar a assistência que o tutor presta ao aluno.
As interações são o aspecto mais importante que acontecem no ciclo de tutoração dos STI.
Para realizar a modelagem dessas interações adotou- se uma metodologia de referência denominada MaSE (Multiagent Systems Engineering), proposta por Wood.
A partir deste estudo, verificará- se- se existe ou não a necessidade de se propor extensões para a metodologia MaSE.
Uma vez que, propor uma metodologia nova e específica para STI não pareceu exeqüível no tempo disponível.
Além de o fato que para se propor uma nova Cai -- Instrução Assistida por Computador metodologia existe a necessidade de se comparar trabalhos correlatos, identificar reais necessidades e carências na área, que justifiquem tal esforço.
Questão de pesquisa Tendo em vista o contexto do problema e a delimitação do estudo descrito acima, emerge a seguinte questão de pesquisa:
Que inclusões/ adaptações devem ser feitas à metodologia MaSE, a fim de poder- se especificar as características e funcionalidades dos STI multiagentes?
As hipóteses associadas à questão de pesquisa são:
Hipótese 1 -- Os Agentes Pedagógicos se dividem em 2 grupos:
Assistentes e Executores de Tarefas;
Hipótese 2 -- Os Assistentes possuem funcionalidades específicas que não costumam aparecer em sistemas convencionais.
De aí a necessidade de se adaptar a notação da metodologia MaSE para sua especificação;
Hipótese 3 -- Os Executores de Tarefas podem ser modelados da mesma forma que outros agentes de SMA voltados para outras áreas de aplicação;
Hipótese 4 -- Uma metodologia que permita a especificação das interações e papéis dos agentes num SMA poderá ser adaptada para modelar STI Multiagentes.
Hipótese 5 -- As adaptações necessárias, se houverem, serão a nível dos diagramas, uma vez que precisam expressar o ciclo de tutoração existente entre os agentes.
Objetivos Investigar a possibilidade de uso de metodologia MaSE para modelagem e projeto de STI Multiagentes.
O objetivo geral pode ser desdobrado nos seguintes objetivos específicos:
A fim de aprofundar os conhecimentos sobre esses domínios;
Trabalhos Correlatos Em esta seção apresenta- se alguns trabalhos que de alguma forma estão relacionados ao nosso foco de pesquisa.
Um outro trabalho que busca um primeiro passo na definição de uma metodologia para a construção de STI multiagentes pode se encontrado na pesquisa realizada por Costa, onde é apresentado um framework e também introduz uma metodologia baseada na modelagem do domínio do conhecimento para o projeto de STI num ambiente de aprendizagem à distância, que adotam uma abordagem multiagente.
Segundo Costa, este trabalho faz parte de um projeto chamado MathNet, que é concebido para o projeto de desenvolvimento de ambientes de aprendizagem à distancia baseado numa abordagem multiagente.
A idéia central da pesquisa de Costa é definir e desenvolver um ambiente que forneça meios efetivos para envolver aprendizes e professores humanos com o sistema tutor em interações cooperativas produtivas.
Especificamente neste trabalho, o foco está na sociedade de agentes.
Isto é, como projetar um agente tutor na sociedade de acordo com o framework proposto.
Desta forma, a pesquisa de Costa foca- se na definição de uma metodologia para a construção de STI multiagente por a definição de cada um dos agentes tutores que fazem parte da sociedade.
Nota- se que este campo de pesquisa é altamente promissor visto a pouquíssima quantidade de trabalhos encontrados que tratam de metodologias para a construção de STI.
Organização do texto Este trabalho está estruturado em seis capítulos.
O capítulo 3, ainda relacionado ao referencial teórico, apresenta algumas considerações sobre metodologias para o desenvolvimento de SMA.
Este capítulo é um resumo de um amplo estudo realizado por o autor.
O capítulo 4 descreve, primeiramente, a proposta para a modelagem de STI Multiagentes.
Em seguida, apresenta- se a descrição da arquitetura proposta por Andrade, trabalho escolhido para servir como estudo de caso.
O capítulo 5 apresenta as considerações finais, descrevendo as contribuições, limitações deste trabalho e os trabalhos futuros a serem desenvolvidos a partir destes resultados.
O capítulo 6 apresenta a bibliografia utilizada para a redação deste volume.
2 Sistemas Multiagentes e Sistemas Tutores Inteligentes A abordagem de agentes se preocupa em estudar o comportamento de uma sociedade constituída por agentes, que possuem como característica principal a autonomia e, têm como objetivo realizar tarefas que não são possíveis de serem realizadas individualmente.
Segundo Russell &amp; Norvig, um agente é um sistema capaz de perceber através de sensores as informações do ambiente onde está inserido e reagir, neste mesmo ambiente, através de atuadores.
Segundo Woodridge, um agente pode ser definido como uma entidade de software que exibe um comportamento autônomo, que está situado em algum ambiente sobre o qual é capaz de realizar ações para alcançar seus próprios objetivos.
Um agente é um software que possui um conjunto de propriedades específicas associadas ao seu objetivo/ papel na sociedade multiagente onde está inserido.
O seu objetivo/ papel vai determinar as propriedades que deve ter.
Porém, já existe consenso na comunidade de IAD que um agente deve ter no mínimo:
Autonomia, reatividade e habilidade social (comunicar- se com outros agentes do ambiente).
Em uma abordagem clássica para a área de agentes encontramos a definição de Wooldridge, que visualiza um agente como sendo uma entidade com capacidade de resolução de problemas encapsulada.
Em este contexto, define- se agente como tendo as seguintes propriedades:
A adoção da tecnologia de agentes e a utilização de uma metodologia de análise e projeto orientada a agentes na concepção de uma solução baseada em agentes traz diversos benefícios que podem ser analisados sob diferentes aspectos.
Esses benefícios podem ser mensurados do ponto de vista da qualidade da solução proposta, ou seja, do produto.
Bem como, o processo de desenvolvimento do software, na forma de uma metodologia mais adequada garantindo, assim, maior segurança e confiabilidade ao desenvolvedor.
De o ponto de vista da Engenharia de Software, a utilização de métodos e técnicas que valorizem o conceito de agente como uma poderosa abstração para compreensão e modelagem do mundo real, reduzindo a complexidade da fase de análise, remetendo o esforço do processo de desenvolvimento de software para as etapas de projeto e implementação.
Em esse aspecto, o ganho da seleção da tecnologia de agentes é representado por a redução da lacuna existente entre o mundo real e o seu modelo.
Desta forma, vários aspectos relacionados a agentes podem ser vantajosos no desenvolvimento de STI, como por exemplo:
A cooperação que os agentes do STI.
Segundo, a justificativa de aplicação da tecnologia de agentes na concepção de Sistemas de Informação é justificada quando o problema possui as seguintes características:
O Instituto Europeu de pesquisa e Estudos Estratégicos em Telecomunicações seguintes critérios para ajudar o desenvolvedor decidir se a utilização da abordagem multiagente é apropriada ou não ao seu projeto.
Um dos objetivos do projeto é definir um guia para a identificação de áreas de aplicação onde a abordagem multiagente é mais adequada do que outras abordagens.
Segundo este projeto, a abordagem multiagente é adequada na seguintes situações:
Logo, os softwares educacionais podem se utilizar da tecnologia de agentes porque possuem todas essas características.
As propostas de utilização de arquiteturas SMA em STI trazem uma grande vantagem em relação as arquiteturas tradicionais de STI por apresentarem uma flexibilidade maior no tratamento dos elementos que compõem o sistema.
Além disso, o fato de usarmos agentes para modelar os seus componentes possibilita o agrupamento da arquitetura tradicional (um módulo $= um agente) ou na explosão de cada módulo em vários agentes.
Segundo Giraffa, a modelagem de STI numa arquitetura funcional de agentes é mais do que uma abordagem generalista.
Teoricamente a modelagem não apresenta limites para o número de agentes que podem participar do processo de aquisição do conhecimento.
Processo este que ocorre através de negociação dos papéis dos agentes tanto tutores, como aprendizes.
Existem diversos exemplos na literatura sobre a utilização de agentes em sistemas educacionais.
Segundo Shoham, uma sociedade de agentes para aprender e ensinar pode ser a solução para a construção de ambientes de ensino e aprendizagem, se os agentes trabalham de uma maneira concorrente e autônoma para alcançar seus objetivos.
Os agentes num ambiente de ensino/ aprendizagem são considerados autônomos porque:
As atividades dos agentes individuais não requerem constante supervisão externa (humana), e não há (ou deveria haver) autoridade central projetada para controlar todas as interações desempenhadas entre os agentes.
Segundo Gürer, o uso de agentes na concepção de sistemas educacionais traz algumas vantagens, tais como:
Reagir às ações do usuário, credibilidade, modelagem de sistemas colaborativos multi-usuário e modularidade, por o fato de que cada agente é um módulo único e independente do outro ficando mais fácil adicionar outros agentes a estes sistemas.
Para Giraffa as vantagens são as seguintes:
Conforme Webber, as tecnologias baseadas na Web em conjunto com metodologias multiagentes formam uma nova tendência na modelagem e desenvolvimento de ambientes de aprendizagem.
A Educação baseada na Web tem sido extensivamente pesquisada, onde os benefícios de aprendizagem são grandes.
Como por exemplo, alcance da informação sem condicionamento ao espaço físico, facilidade de atualizar o conteúdo, etc..
Entretanto, as metodologias multiagentes tem surgido com uma alternativa para conceber aplicações de aprendizagem distribuída, devido a o conjunto de características inerentes ao conceito de SMA e as peculiaridades de uma sociedade de agentes.
A principal razão para isto deve- se ao fato que esta tecnologia lida muito bem com aplicações criticas, tais como:
Distância, cooperação entre diferentes entidades e integração de diferentes componentes de software.
Segundo Vassileva, no futuro, os ambientes da aprendizagem estarão acessíveis a qualquer lugar e a qualquer hora.
Os estudantes desses ambientes estarão distribuídos no espaço e no tempo.
Logo, trabalhos que utilizam arquiteturas multiagentes oferecem uma promissora abordagem para o projeto desses ambientes, desde que estes ambientes sejam distribuídos.
Com a modularidade e a uniformidade dos agentes e com a padronização dos protocolos de interação, o nível de escalabilidade e interoperação podem ser alcançados, o que não pode ser conseguido tão facilmente com o uso de outras técnicas.
As arquiteturas multiagentes permitem o constante crescimento e a heterogeneidade do ambiente de software.
Atualmente, não há muitos ambientes distribuídos de aprendizagem baseados em arquiteturas multiagentes.
Isto deve- se a vários fatores:
A complexidade em modelar e implementar STI e ambientes de ensinoaprendizagem inteligentes.
Sua arquitetura é mais complexa e a modelagem dos seus componentes e inter-relações é demorada, necessitando de uma grande quantidade de trabalho cooperativo em equipe interdisciplinar;
A tecnologia de agentes aplicada a tais ambientes pode ser considerada como um fato mais recente.
Trabalhos mais significativos remontam aos últimos 5 anos de pesquisa.
Os princípios dos sistemas multiagentes têm mostrado um potencial bastante adequados ao desenvolvimento de sistemas de ensino, devido a o fato da natureza do problema de ensino-aprendizagem ser mais facilmente resolvido de forma cooperativa,.
Além disso, ambientes de ensino baseados em arquiteturas multiagentes possibilitam suportar o desenvolvimento de sistemas de forma mais robusta, mais rápida e com menores custos.
STI Multiagentes Segundo Wenger, STI são sistemas computacionais com modelos de conteúdo instrucionais que especificam o que ensinar e estratégias de ensino que especificam como ensinar.
Murray, ressalta como um dos objetivos dos STI, é ser capaz de modelar complexos comportamentos de ensino, os quais devem se adaptar às necessidades do estudante, à situação de aprendizagem e ao assunto da instrução.
Para Kearsley, os STIs fazem parte de um campo interdisciplinar envolvendo Ciência da Computação, Psicologia cognitiva e Educação.
Apesar de haver diversas arquiteturas para STI, segundo[ YAZ1987, SEL1988, VIC1990, OLI1994, GIR1999], há um consenso quanto a os componentes básicos que um STI apresenta:
Módulo do Aluno, Módulo Tutor, Módulo de Domínio e Interface.
A Figura 2, apresenta a arquitetura multipartida onde os módulos estão representados com suas interrelações e em seguida há uma pequena descrição dos módulos que compõe a arquitetura clássica de um STI:
Módulo do Aluno:
Este módulo armazena informações específicas para cada estudante de forma individual.
Em o mínimo, este módulo deve manter um histórico sobre como o estudante está trabalhando no material em questão.
É interessante também manter registro sobre os erros do estudante,.
Segundo, o módulo do aluno representa o conhecimento e as habilidades cognitivas do aluno num dado momento.
Contém uma representação do estado do conhecimento do aluno no momento qu interage com o STI.
A partir desse modelo e do conteúdo representado na base do domínio, o sistema deve ser capaz de inferir a melhor estratégia de ação a ser utilizada para cada aluno.
Módulo Tutorial: O módulo tutorial, ou módulo pedagógico oferece uma metodologia para o processo de aprendizado.
Possui o conhecimento sobre as estratégias e táticas para selecionar- las em função de as características do aluno.
As entradas deste módulo são fornecidas por o Módulo do Aluno.
Módulo de Domínio:
O módulo de domínio armazena a informação que o tutor está ensinando.
A modelagem do conhecimento a ser disponibilizado é de grande importância para o sucesso do sistema como um todo.
Deve- se procurar uma representação do conhecimento que esteja preparada para o crescimento incremental do domínio.
Interface: Intermedia a interação entre o tutor e o aluno.
Segundo, a complexidade para a implementação deste módulo é bastante variável, podendo ser desde simples janelas de diálogo até linguagem natural e reconhecimento de voz.
Outra questão a ser considerada é a aplicação de realidade virtual para permitir uma imersão total do estudante no sistema.
Em as seguintes seções, descreve- se, brevemente, alguns STI desenvolvidos com a utilização da tecnologia de agentes.
Este levantamento tem como finalidade principal, fornecer elementos para uma análise a fim de identificar padrões utilizados no desenvolvimento destes sistemas.
Maiores detalhes podem ser obtidos em.
White Rabbit é um sistema desenvolvido por o Departamento de Informática e Pesquisa Operacional da Universidade de Montreal (Montreal ­ Canadá), este sistema tem como objetivo aumentar a cooperação entre um grupo de pessoas por a análise de suas conversações.
Cada usuário é assistido por um agente inteligente o qual estabelece um perfil de seus interesses.
Com o comportamento móvel e autônomo o agente pesquisa agente pessoais de outros usuários, a fim de encontrar aquele que tenham interesses comuns e então os colocam em contato.
Um agente Mediador é usado para facilitar a comunicação entre os agentes pessoais e para realizar agrupamentos nos perfis que eles tenham recolhidos.
Esta abordagem usa agentes inteligentes para descobrir os interesses particulares de um grupo de pessoas trabalhando num domínio particular com a intenção de colocar- los em contato para aumentar o nível de cooperação.
Os agente analisam a conversação entre os usuários através de um chat para construir para cada um de eles, um perfil de seus interesses.
A Figura 3 apresenta a arquitetura geral do sistema.
O perfil do usuário contém todas as informações relevantes sobre o interesse do usuário na escolha do domínio, o qual permitirá aos agentes encontrar similaridades e consequentemente realizar agrupamentos coerentes.
O módulo de aprendizagem é responsável por modificar o perfil do usuário fazendo- o mais acurado e mais realista.
O perfil do usuário é composto por um conjunto de informações ponderadas, isto é, cada um de eles possui um peso associado ao contexto onde estão inseridos.
Isto permite um ajuste mais personalizado e detalhado do aluno.
Dois aspectos demonstram a mobilidade e autonomia dos agentes.
Primeiro, a analise da discussão dos usuários por os agentes pessoais.
Depois de ter analisado e atualizado os perfis dos clientes, o agente vai para uma outra máquina conectada a rede e encontra outros agentes.
A segunda importante evidência da mobilidade acontece quando o usuário pergunta para o segundo usuário quem é o membro do mesmo grupo, como determinado por o agente mediador.
Em este momento a requisição do agente do usuário (A) usará a sua autonomia para mover- se e encontrar o agente associado ao cliente (B).
Então o agente (A) terá possibilidade de questionar mais sobre o agente (B).
Se o agente) B) aceitar as requisições, então o agente (B) dará ao agente (A) as informações pessoais (nome real, e-mail, descrição do projeto, etc) Estas duas situações demonstram a força alcançada por a mobilidade e autonomia dos agentes, a qual permite considerável redução do número de mensagens transmitidas na rede, desta maneira o risco de sobrecarga na rede e falta de recursos são reduzidas.
Mesmo quando o número de agentes pessoais é alto (o número de agente é igual ao número de usuários) O LeCS (Learning from Case Studies) foi desenvolvido por o Departamento de Computação e Estatística da Universidade Federal de Santa Catarina -- UFSC (Santa Catarina ­ Brasil), em conjunto com a Universidade do Vale do Itajaí (Univali) e a Unidade de Aprendizagem Baseada em Computador da Universidade de Lees (Leeds ­ UK), LeCS é um sistema inteligente de aprendizagem à distância, o qual, segundo, possui uma arquitetura baseada num Sistema Federativo de agentes.&amp;&amp;&amp;
A Figura 4 descreve a arquitetura e a estrutura da comunicação usada, a qual estabelece que a comunicação não acontece diretamente entre os agentes, mas através de um Facilitador (Facilitator).
O Facilitator é um programa especial (implementado como um agente) que guarda a informação sobre cada agente no sistema e é responsável por o roteamento dessas mensagens, trabalhando como um broker.
Há dois banco de dados implementados:
O primeiro é o próprio Facilitator que armazena todas informações necessárias para rotear as mensagens, e o segundo é um mecanismo de logs que armazena todas as trocas de mensagens.
A arquitetura inclui três classes de agentes:
Agente Interface, Agente de Informação e Agente Conselheiro.
Comunicação dos agentes está baseada na Agent Comunication Language (ACL) e as mensagens trocadas entre os agentes usam o formato da Knowledge Query and Manipulation Language (KQML).
Segundo Rosatelli, o LeCS pode ser caracterizado como um sistema inteligente para o ensino a distância.
LeCS dá suporte à aprendizagem colaborativa através da World Wide Web (Www) usando o método de ensinar com estudos de casos (Case Based Resoning -- CBR).
O cenário de aprendizado para o uso do sistema é um grupo de alunos que está geograficamente disperso, cursando uma disciplina (por exemplo engenharia, medicina, administração, etc) de um curso a distância onde o método de aprender através de estudos de casos.
O sistema inclui as ferramentas necessárias para desenvolver a solução para um determinado caso (a ser modelado por o professor) e desempenha funções que dão apoio ao processo de aprendizado.
Em o projeto LANCA, os autores procuram expor o porque do uso de agentes inteligente em STI e como podem ser adaptados para aprendizagem à distância.
O projeto foi desenvolvido por o grupo do Departamento de Informática e Pesquisa Operacional da Universidade de Montreal (Montreal ­ Canadá) e da Unidade de Informática da Universidade de Pau (Bayonne ­ França).
LANCA apresenta as principais características dos agentes para um ambiente de aprendizagem à distância, bem como suas funções em ambientes distribuídos.
Propõe, também uma arquitetura para o ambiente com a especificação dos papéis dos diferentes agentes inteligentes que compõem a sociedade.
A arquitetura proposta inclui quatro agentes cognitivos:
Pedagogical agent, dialog agent, negotiating agent e o moderator agent, Figura 5.
Learner O projeto Baguera, foi desenvolvido por a Universidade de Grenoble (Grenoble ­ França), cujo objetivo é desenvolver uma fundamentação teórica e metodológica para guiar a concepção e modelagem de ambientes de aprendizagem.
A plataforma Baguera está fundamentada no princípio que a função educacional do sistema está nas interações organizadas entre os componentes:
Agentes e humanos e, não meramente na funcionalidade de uma de suas partes.
O primeiro resultado desse projeto inclui uma arquitetura multiagente baseada na Web para ambientes de aprendizagem e um protótipo para a aprendizagem de geometria.
A plataforma Baguera foi desenvolvida usando JatLite3.
Cada agente foi estendido por um módulo de interação que fornece suporte ao gerenciamento de protocolos entre os agentes.
Os agentes possuem habilidade de comunicar- se com outros agentes, raciocinar e tomar decisões.
A comunicação entre agentes está baseado na Teoria dos Atos de Fala, em adequação com o padrão FIPA-ACL4.
A arquitetura multiagente da plataforma Baguera foi concebida por a metodologia AEIO (Agent, Environment, Interactions, Organisation), uma metodologia para a análise e projeto orientados a agentes proposta por Demazeau.
Como resultado desse processo, estudantes e professores interagem com diferentes agentes.
Cada estudante é apoiado por três agentes artificiais, que são:
Companion Student (Companheiro do Estudante), Tutor Agent (Tutor) e Mediator Agent (Agente Mediador).
O protótipo do ambiente para a ensinar prova de uma determinada geometria está baseado na plataforma multiagente apresentada.
Os usuários podem ter acesso ao ambiente de aprendizagem através de qualquer browser que suporta Applets Java, acessando a seguinte URL:
O I-Help foi desenvolvido por a Universidade de Saskatchewan ­ Canadá), este projeto descreve uma infra-estrutura multiagente para o I-Help, um ambiente de aprendizagem baseado na Web para auxiliar aprendizes na solução de problemas.
O sistema contém uma variedade de recursos da aprendizagem, fóruns, materiais on-line, chat, etc..
Para ilustrar a funcionalidade do I-Help imaginemos o seguinte cenário.
Um estudante tem uma questão e este delega a tarefa de encontrar ajuda a seu agente pessoal.
O agente pessoal tenta encontrar um outro agente (agente de aplicação ou um outro agente pessoal) que ofereça os recursos da informação relacionados ao pedido da ajuda.
Podem ser também recursos humanos (representado no sistema por seus agentes pessoais), isto é, os estudantes que estão online e são capazes de ajudar a solucionar a questão.
O sistema I-Help é baseado numa arquitetura multiagente, consistindo em agentes pessoais (usuários e humanos) e em agentes de aplicação, Figura 5.
Estes agentes usam uma ontologia e uma linguagem de comunicação comum.
Cada agente controla recursos específicos do usuário (ou da aplicação) que ele representa, incluindo por exemplo, os conhecimentos do usuário sobre determinados conceitos, ou os materiais instrutivos que pertencem a uma aplicação.
Os agentes usam seus recursos para conseguir os objetivos de seus usuários, seus próprios objetivos, e objetivos de outros agentes.
Todos os agentes são autônomos.
Cada agente possui um modelo de seu usuário e de outros agentes que ele encontrou e negociou.
Os agentes comunicam- se com outros agente e com Agentes Matchmaker (combinadores) para procurar por recursos apropriados para seus usuários, dependendo do tópico da ajuda requisitada.
Se um recurso eletrônico for encontrado (representado por agentes de aplicação), o agente pessoal apropria- se do recurso e apresenta- o ao usuário num browser.
A ajuda é arranjada (negociada) inteiramente por os agentes pessoais, livrando o aprendiz da necessidade de negociar e pensar sobre o &quot;custo «da ajuda.
De esta maneira os agentes pessoais negociam a ajuda de seus usuários num &quot;mercado virtual de ajuda».
Arquiteturas multiagentes envolvem vários níveis de organização, incluindo negociação entre os agentes.
De esta maneira, consegue- se um sistema distribuído, multi-usuário, multiaplicação, adaptável e auto-organizado que suporta alocação de recursos de ajuda (outros usuários, aplicações e informações).
O Explanantion Agent ou Agente de Explicações de, desenvolvido por o Departamento de Informática e Pesquisa Operacional da Universidade de Montreal (Montreal ­ Canadá), tem como objetivo principal prover respostas ou explicações sobre o conteúdo com maior qualidade, identificando problemas que possam ocorrer durante o processo de explicação ou resolução de problemas.
Ele tem dois objetivos específicos:
Descobrir a fonte do mal entendimento do aprendiz através do modelo do estudante, e ajudar o projetista do curso a adaptar suas explicações de acordo com estas observações.
É utilizado a teoria de Mapas Conceituais para estruturar as explicação numa representação formal.
Esta representação é usada por o Agente Explicação para fazer suas deduções sobre conceitos mal entendidos por o aprendiz.
O termo Agentes Pedagógicos, é usado para referir- se a agentes criados para ajudar pessoas iniciantes no processo de aprendizagem, por meio de a interação com o aprendiz.
Agentes Pedagógicos exibem um conjunto de características:
Eles podem adaptar suas interações à necessidades do aprendiz, e o estado corrente do ambiente.
Eles podem colaborar com aprendizes e outros agentes e são capazes de providenciar um contínuo feedback ao aprendiz.
E eles podem mostra- se como figuras vivas, introduzindo emoções e aspectos sociais em suas interações e ralações com o aprendiz.
A arquitetura do ambiente de aprendizagem é uma arquitetura cliente-servidor dividida em duas partes, como mostra a Figura 7.
A arquitetura do agente é dividida em camadas.
Uma de cognição, outra de explicação e outra de percepção, Figura 8.
Cada uma sintetizando uma ou várias das características do agente.
As características do agente são:
Reatividade, mobilidade, autonomia, aprendizagem, dedução e capacidade de compreensão.
Ame-A é um ambiente multiagente de ensino-aprendizagem, em o qual se propõe o estudo e o desenvolvimento de um sistema educacional interativo para o ensino à distância.
A proposta é o ensino genérico e adaptável às características psico-pedagógicas do aprendiz.
As características principais do sistema são a aprendizagem estática e a aprendizagem dinâmica.
A aprendizagem estática corresponde a primeira interação do aprendiz com o ambiente, onde um agente modela o aprendiz conforme suas características afetivas, motivação e nível de conhecimento.
A aprendizagem dinâmica ocorre durante a interação, quando é validado o modelo de aluno e estratégias pedagógicas em vigor.
Este ambiente utiliza a abordagem de sistemas multiagentes conforme mostra a Figura si, com o intuito de que o aprendiz atinja uma aprendizagem efetiva.
As características psicopedagógicas são relevantes para o ensino adaptado e viabilizam a apresentação do material instrucional de uma maneira individualizada.
Cada agente é responsável por suas tarefas e agem continuamente no ambiente, com a finalidade de cooperar para promover uma aprendizagem inteligente e adaptável às características dos aprendizes.
A análise deste ambiente mostrou a possibilidade de utilização de múltiplas estratégias de ensino, selecionadas em função de parâmetros que o agente recebe de outros agentes.
O Eletrotutor III é a 3º versão do STI Eletrotutor proposto por Silveira, em sua dissertação de mestrado.
Esta 3º versão foi desenvolvida no Instituto de Informática da Universidade Federal do Rio Grande do Sul (UFRGS), por.
O Eletrotutor III implementa um ambiente distribuído de ensino-aprendizagem inteligente (Intelligent Learning Environment -- Ile) baseado numa arquitetura multiagente, em a qual os agentes possuem as seguintes características:
Perceber dinamicamente as condições do ambiente;
Tomar decisões para afetar condições do ambiente;
Interpretar percepções, resolver problemas, extrair inferências e determinar ações.
O ambiente Eletrotutor aborda o conteúdo constituído por alguns capítulos de Eletrodinâmica, um capítulo da Física que estuda alguns fenômenos da Eletricidade e aborda as relações entre algumas grandezas elétricas como Corrente Elétrica, Tensão, ou Diferença de Potencial, Resistência e Potência Elétrica.
A sociedade de agentes é composta por sete agentes, onde cada um de eles possui uma função específica e como objetivo principal tem- se o aprendizado do aluno.
Em este ambiente é de vital importância a coordenação do comportamento dos agentes e da maneira por a qual eles compartilham seus conhecimentos, objetivos, habilidades e seus planos para, em conjunto, tomar as ações necessárias para solucionar um problema.
Para que diferentes agentes autônomos possam cooperar mutuamente a fim de atingirem seus objetivos é necessário que a sociedade possua organização (arquitetura) e comunicação.
A organização diz respeito à natureza e à função da sociedade e de seus elementos constituintes e a comunicação é o principal instrumento que os agentes utilizam para desenvolver a coordenação de suas ações.
A fim de poder atuar sobre o ambiente, cada agente possui uma representação interna parcial do mundo que o rodeia.
Para isso, empregou- se a metáfora de estados mentais para modelar a base de conhecimento que representa os estados do ambiente onde o agente está inserido.
A sociedade de agentes proposta na terceira versão do Eletrotutor contém agentes autônomos que comunicam- se uns com outros, cada agente possui funções e objetivos dentro de sua especialidade.
A Figura 10 representa a arquitetura elaborada neste trabalho.
O ambiente de aprendizado inteligente proposto, seguindo a Figura 15 contém um agente responsável por a recuperação do conhecimento do domínio sobre cada ponto a ser apresentado ao aluno, agentes responsáveis por a tarefa de propor exercícios e avaliação de respostas, exemplos ao aluno e atividades extras.
Este trabalho está sendo desenvolvido no programa de Pós-graduação em Informática na Educação (PGIE) -- UFRGS, Programa de Pós-graduação em Computação (PPGC) UFRGS e Faculdade de Informática (FACIN) -- PUCRS.
O trabalho propõe um framework para uso da Tecnologia da Informação na educação.
Está baseado na teoria sócio-cultural interacionista de Vygotsky e é projetado como uma sociedade multiagente para suportar a aprendizagem a distância.
Segundo, o objetivo deste trabalho é propor um ambiente que privilegie a colaboração como forma de interação social através do uso de linguagens, símbolos e sinais.
Para suportar essa aprendizagem colaborativa existe uma sociedade formada Semiótico e Agente Social.
Para suportar o modelo coletivo de aprendizagem a distância, foi utilizada a teoria de Vygotsky, como base da fundamentação teórica da proposta.
Um importante conceito nesta teoria é que as atividades mentais são baseadas em relacionamentos sociais entre o indivíduo e o ambiente e este relacionamento é mediado por um sistema simbólico.
Zona de Desenvolvimento Próximal. Onde o nível de desenvolvimento do aluno:
O Level of Real Development (LRD) que refere- se as funções que o usuário já processou e o Level Potencial Development (LPD) que determina as funções que ele pode desenvolver.
A Figura 11 apresenta a sociedade de agentes proposta por.
O modelo pedagógico desta pesquisa está baseado numa forma colaborativa de aprendizagem que é obtido através da interação social.
As interações podem ser de vários tipos, considerando critérios tais como:
Temporalidade, número de participantes, reciprocidade, hierarquias.
E, até critérios baseados em comportamentos:
Personalidade, motivação, estado emocional, etc..
O sistema é composto por quatro tipos de agentes artificiais:
O Agente ZPD, o Agente Mediador, o Agente Social e o Agente Semiótico, e por agentes humanos (Estudantes ou aprendizes).
Maiores detalhes podem ser obtidos no capítulo 4, seção 4.1.
Estudo comparativo sobre os ambientes selecionados O estudo comparativo dos ambientes identificados na seção anterior foram organizados num quadro comparativo onde são destacados o conjunto de aspectos considerados relevantes para este estudo.
Estes aspectos permitiram identificar o conjunto de requisitos utilizados por os autores para modelar/ implementar os ambientes inteligentes que utilizam a tecnologia de agentes.
O preenchimento do quadro segue a seguinte convenção:
Cada célula possui uma descrição de como o STI atende este critério (por exemplo, &quot;KQML «para o critério &quot;Comunicação entre os agentes&quot;).
No caso de o critério Atividades dos Agentes (Tipo, Nome e atividade) inserimos os símbolos:
C e/ ou d, para indicar o tipo de agente, de acordo com as características que apresentam em relação a as atividades que desempenham no ambiente de ensino-aprendizagem.
O símbolo c identifica que o agente em questão é do tipo Executor de Tarefas e o símbolo d identifica que o agente é tipo Assistente.
Utiliza- se o símbolo(?)
para indicar, simplificadamente, a dúvida dos autores deste texto (autor e orientadora) com relação a o posicionamento do STI em relação a a um determinado aspecto.
E, também, por o fato de não conseguirmos, a partir de as informações disponíveis nos textos e/ ou figuras obter conclusões mais efetivas.
Em alguns casos coloca- se a interpretação a partir de as informações disponíveis por julgar- se que o conjunto de indicadores permitia um alto grau de certeza.
Os itens que foram considerados relevantes para compor o quadro comparativo são:
Objetivo: Visa identificar o objetivo do ambiente;
Domínio: Visa identificar o conteúdo a ser trabalhado no sistema;
Quantidade, nome e atividades dos agentes:
Visa identificar o número de agentes associados e respectivas atividades dentro de a sociedade multiagente;
Comunicação: Visa identificar se existe ou não um padrão utilizado para a comunicação entre os agentes;
Linguagem/ Ferramenta de desenvolvimento:
Visa identificar o tipo de ambiente utilizado para implementar os ambientes;
Arquitetura SMA:
Visa identificar se os autores utilizaram ou explicitaram o tipo de arquitetura para a sociedade de agentes que está relacionada com a proposta do ambiente;
Estratégias de Ensino:
Visa identificar o tipo de estratégias de ensino utilizada para auxiliar a promover a aprendizagem do conteúdo (domínio) nos usuários dos ambientes;
Modelo do Aluno:
Visa identificar o tipo de modelo do aluno criado/ desenvolvido a partir de as interações do sistema com o usuário em função de os modelos encontrados na literatura de STI;
Interface Gráfica: Visa identificar se o sistema utiliza ou não interfaces gráficas e o grau de adaptabilidade que oferece ao usuário;
Ferramentas auxiliares:
Visa identificar quais as ferramentas auxiliares mais utilizadas em ambientes de ensino-aprendizagem.
Prover respostas ou explicações sobre o conteúdo com maior qualidade, identificando problemas que possam ocorrer durante o processo de explicação ou resolução de problemas.
Quadro comparativo sobre os ambientes selecionados Gráfica interativa Modelos pré-definidos, 4 pares de modelos:
Extrovertido ­ Introvertido;
Sensitivo Intuitivo; Emocional Racional;
Perceptivo Julgador, gerando 16 perfis psicológicos, classificados por uma Rede Neural.
Múltiplas estratégias de ensino Sociedade heterogênea e fechada Java Agente Analisa Aprendizagem:
Agente Orienta Aprendizagem:
Agente Pedagógico:
Agente Seleciona atividades, etc..
Estratégia: Seleciona estratégia apropriada conforme o perfil do aluno.
Independente de domínio Agente Interface:
Professor: Orientar o professor d Agente Conselheiro:
E armazenar o material do realiza intervenções quando curso.
Propor um ambiente que privilegie a colaboração como forma de interação social através do uso de linguagens, símbolos e sinais.
Gerência a interface do ambiente com os demais agentes.
Modelo do Aluno:
Constrói e mantém o modelo do estado cognitivo do aluno.
Atividades: Propõe atividades extras ao aluno.
Exemplo: Apresenta exemplos ao aluno.
Browser, fórnuns e chat Gráfica interativa Múltiplas estratégias de ensino Sociedade heterogênea, aberta e baseada em leis.
Gráfica interativa Múltiplas estratégias de ensino Java Agente Humano:
Exercício: Propõe exercícios e controla recursos específicos responsável por a interface avalia respostas.
Domínio: Recupera controla recursos específicos por observar informações referentes ao dos usuários (alunos ou desenvolvimento e propor domínio, etc..
Desenvolver um instrumento Auxiliar estudantes na solução para verificar a eficácia do de problemas através da Web uso de diferentes abordagens de ambientes de ensino por computador na escola.
Esse estudo permitiu levantar requisitos e funcionalidades necessários para a definição de aspectos relevantes para o projeto de STI que utilizam a tecnologia de agentes na sua concepção.
A seguir apresenta- se a análise comentada dos itens discutidos na seção anterior.
Quanto a o objetivo, a maioria dos ambientes na Web, não apresentam uma proposta para um conteúdo específico.
Ou seja, suas propostas são independentes do domínio/ conteúdo.
em os STI tradicionais, os domínios modelados eram essencialmente domínios lógicos, bem estruturados e muito restritos, tais como:
Ensino de Matemática, Física, Linguagens de Programação, etc..
Logo, altamente dependente do conteúdo.
Com a incorporação da tecnologia de Agentes no projeto e desenvolvimento de STI, verificou- se que o conteúdo do domínio passou a ser variado, ou seja, o conteúdo passou a ser modelado independentemente do domínio.
Segundo Vassileva, os agentes quando desempenham tarefas e/ ou atividades em aplicações voltadas para suporte ao processo de ensino-aprendizagem são denominados de Agentes Pedagógicos.
De acordo com a Figura 12, pode- se observar que conjunto de atividades que dão suporte ao processo de ensino-aprendizagem dos Agentes Pedagógicos, pode ocorrer de duas maneiras:
Atuação direta e atuação indireta.
Em a atuação direta, o processo se dá na seguintes seqüências:
Coleta de informações;
Enviar mensagens para outros agentes ou para o aluno;
Todas essas atividades são realizadas por o Executor de Tarefas.
É importante salientar que o papel do Executor de Tarefas não está relacionado diretamente com a parte pedagógica, ou seja, a seleção e adoção de estratégias do estudante.
Já na atuação direta, o processo é realizado, por o que denominamos de Assistentes, cujas tarefas são:
Intermediar e/ ou analisar o fluxo de informações entre os estudantes;
Selecionar informações e/ ou materiais;
Relacionar e determinar estratégias de ensino para os estudantes e realizar o processo de modelagem do aluno.
O que se observa é que os agentes do tipo Assistentes na realidade executam as tarefas do módulo tutor, na arquitetura clássica de STI.
O Agente Executor de Tarefas pode buscar informações, executar instruções solicitadas por o Agente Assistente.
Basicamente, ele faz o papel de auxiliar do Agente Assistente, desempenhando tarefas que são importantes para a tomada de decisão ou execução de o (s) plano (s) adotado por o Agente Assistente.
Em ambientes que possuem mais de um agente, existe a necessidade de troca de informações.
Em este sentido, torna- se claro a necessidade de uma Linguagem de Comunicação comum.
A linguagem de comunicação entre os agentes, utilizada na grande maioria dos ambientes estudados foi a linguagem KQML.
A Linguagem de Implementação utilizada determina a portabilidade, performance, bem como recursos audiovisuais que podem ser utilizados no sistema.
A maioria dos trabalhos analisados não descrevem a forma como está organizada e/ ou estruturada a sociedade ou a arquitetura do sistema.
Entretanto, podemos supor que vários ambientes apresentam características em que sua sociedade é considerada uma sociedade heterogênea e fechada e possuem regras de comportamento para seus agentes.
Segundo Giraffa, a seleção do conjunto de estratégias de ensino que será utilizada no STI é um aspecto muito importante para garantir a qualidade pedagógica do ambiente de ensino-aprendizagem.
Muitos sistemas selecionam e adotam mais de uma estratégia.
Isso ocorre porque os sistemas geralmente tem mais de um objetivo, princípios diferentes de instruir, diferentes métodos de estruturar o conhecimento, etc..
Em a grande maioria dos trabalhos avaliados, não foi encontrada a citação explícita do tipo de modelo do aluno.
Entretanto, todos trabalham, basicamente, no tratamento do erro cometido por o aluno, quando está resolvendo um exercício ou uma tarefa proposta.
Para qualquer sistema interativo, a Interface Gráfica é de grande importância.
Em relação a a esse aspecto, todos os ambientes analisados possuem interface gráfica interativa.
Em o desenvolvimento de STI a preocupação com este aspecto não é diferente.
Pelo contrário, segundo Giraffa, é na interação que o sistema tutor exerce duas de suas principais funções, que são:
Apresentação do material instrucional e a monitoração do progresso do estudante através da recepção da resposta do aluno.
Em relação a as ferramentas auxiliares que foram incorporadas nos ambientes, podemos dizer que ferramentas tais como:
Browser e chat são essenciais por darem suporte à comunicação em ambientes baseados na Web.
Durante o desenvolvimento desta pesquisa, observou- se que trabalhar com a adaptação de metodologias já existentes poderia facilitar a criação de uma nova metodologia.
Desta forma, a utilização de uma metodologia multiagente já consolidada e atual tornou- se uma alternativa interessante para os trabalhos relacionados ao projeto MASP.
Observou- se, também, que os agentes descritos nesses ambientes, apresentados no agentes de aplicações não educacionais.
Ou seja, os papéis que cada agente desempenham dentro de o contexto da sociedade multiagente podem ser classificados em dois grandes grupos:
Como passo seguinte, realizou- se um estudo sobre metodologias para o desenvolvimento de SMA, em.
Este estudo possibilitou uma visão geral das características das principais metodologias e permitiu identificar uma metodologia de referência para este trabalho.
A seguir apresenta- se um resumo deste estudo.
Novamente, maiores detalhes podem ser obtidos em.
Metodologias e abordagens para o desenvolvimento de SMA Realizou- se uma revisão das principais metodologias para a modelagem de SMA, a fim de analisarmos a abordagem de cada uma e os principais pontos do processo de desenvolvimento de software multiagente.
As abordagens para o desenvolvimento de metodologias orientadas a agentes, conforme, estão concentradas, essencialmente, em duas áreas:
Orientação a Objeto (OO) e Engenharia do Conhecimento (EC).
Em os últimos anos, diversas tentativas foram feitas para desenvolver técnicas de modelagem e metodologias, como apresenta o trabalho de.
Entretanto, nenhuma dessas metodologias pode ser considerada como uma metodologia compreensiva para a análise e projeto de SMA.
Extensões das metodologias OO Conforme, metodologias para a análise e projeto são pouco adaptáveis para SMA devido, fundamentalmente, a falta de combinação entre os respectivos níveis de abstração.
Algumas propostas estendem diretamente a aplicabilidade de metodologias OO e técnicas para o projeto de SMA.
Por exemplo, a proposta de tenta aplicar diretamente a notação UML (Unified Modelling Language) para representar agentes e seus padrões de interação.
Entretanto, estas propostas falham em capturar a autonomia e comportamento pró-ativo dos agentes, bem como, a riqueza de suas interações.
Por outro lado, algumas propostas procuram estender e adaptar modelos e técnicas OO para definir uma metodologia para desenvolver SMA.
Entretanto, segundo, a extensão da metodologia OO pode ser justificada por diversas razões.
Primeiramente, existe a similaridade entre o paradigma OO e o paradigma orientado a agente (OA).
A popularidade das metodologias OO é uma outra importante justificativa.
Ou seja, muitas metodologias OO estão sendo usadas na indústria com sucesso, tais como:
Object Modelling Technique (OMT), Object Oriented Software Engineering (OOSE), Responsability Driving Desing (RDD) e a linguagem de modelagem UML.
A distinção entre os requisitos envolvidos no projeto de um SMA e um sistema OO é evidenciada por as próprias diferenças existentes entre agentes e objetos.
Segundo Shohan, agentes podem ser vistos como objetos ativos com estados mentais, traçando semelhanças entre os dois conceitos, tais como a existência de troca de mensagens entre as entidades para a troca de informações e solicitação de serviços, e os conceitos de herança e agregação.
Entretanto, na visão de Wooldridge, os conceitos são equivalentes por ambos serem entidades que:
Encapsulam seus dados, comunicam- se através da passagem de mensagens.
Por outro lado, existem distinções significativas entre agentes e objetos:
Agentes são autônomos -- Objetos têm autonomia sobre seu estado interno, mas não exibem controle sobre seu comportamento.
Agentes apresentam um comportamento autônomo flexível (reativo, pró-ativo, social);
Objetos agem em função de mensagens, enquanto que os agentes podem apresentar comportamentos em função de mudanças ambientais.
Os modelos existentes no paradigma OO não especificam nenhuma forma de representar estes tipos de comportamento, embora isto possa ser implementado utilizando- se técnicas OO.
As três visões dos sistemas nas metodologias OO são também interessantes para a visualização de agentes:
Apesar de as similaridades entre objetos e agentes, agentes não podem ser considerados simplesmente como objetos.
Desta forma, as metodologias OO não irão abranger os diferentes aspectos necessários para modelar SMA.
Primeiramente, apesar de objetos e agentes usarem mecanismos de troca de mensagens para comunicar- se, os objetos utilizam apenas invocação de métodos enquanto que os agentes diferenciam tipos de mensagens e usam complexos protocolos para negociar.
Agentes analisam essas mensagens e podem decidir se executam a requisição.
Outra diferença consiste em que agentes podem ser caracterizados por seus estados mentais e metodologias OO não definem técnicas para modelagem de como os agentes cumprem suas inferências, seus planos, etc..
Exemplos de metodologias que foram concebidas como extensões da metodologia OO, segundo, são:
Agent-Oriented Analysis and Design by Burmeister,;
MASB (Multi-Agent scenario-Based Method),;
Agent Oriented Methodology for Enterprise Modelling;
Extensões das metodologias da EC Diferentes conjuntos de propostas são construídas sobre metodologias e técnicas de modelagem da EC, por exemplo, no trabalho de.
Estas abordagens são adaptáveis a agentes orientados a conhecimento e informação.
Entretanto, estas abordagens geralmente assumem sistemas baseados em conhecimento como ponto central.
Metodologias da EC podem fornecer uma boa base para a modelagem de SMA, desde que agentes tenham características cognitivas, essas metodologias podem fornecer técnicas para a modelagem do conhecimento do agente.
A definição do conhecimento de um agente pode ser considerada como o processo de aquisição de conhecimento, e somente este processo é explorado por essas metodologias.
A existência de ferramentas, bibliotecas de métodos de resolução de problemas podem ser reutilizados.
Entretanto, a maioria dos problemas em metodologias de EC são encontradas no projeto de SMA:
Aquisição de conhecimento, modelagem e reutilização.
No entanto, essas metodologias entendem um sistema baseado em conhecimento como um sistema centralizado, não endereçando os aspectos de distribuição, aspectos sociais dos agentes e seus atributos reflexivos e orientado ao objetivo.
Exemplos de metodologias que foram concebidas como extensões da metodologia EC, segundo, são:
Mas- CommonKADS.
Além de a classificação proposta por, na seção anterior, no que diz respeito a abordagem utilizada para a elaboração de metodologias para SMA, existem várias outras alternativas que foram concebidas com outras abordagens.
O êxito na aplicação de SMA tem sido realizada em diferentes áreas usando diferentes plataformas multiagentes.
Durante desenvolvimento destas aplicações, alguns desenvolvedores tem tomado a Engenharia de Software como perspectiva inicial.
Entretanto, não definem, formalmente uma metodologia orientada a agente (A o).
Conforme, tais desenvolvedores apresentam uma genérica direção ou recomendações sobre técnicas para o desenvolvimento de SMA.
Algumas dessas abordagens são:
ARCHON (ARchitecture for Cooperative Heterogeneous On-line systems);
Cassiopéia; Metodologias para SMA Uma metodologia de modelagem de software proporciona detalhes de como fazer para se construir um software, envolvendo um amplo conjunto de tarefas que abrangem desde o planejamento até sua codificação, teste e manutenção.
Esses métodos introduzem uma visão gráfica, propiciando um conjunto de critérios para a qualidade do software.
Cada método de análise de sistemas tem seu próprio ponto de vista, sua própria notação e sua própria abordagem.
O objetivo desta seção é citar as principais metodologias, que fornecem uma abordagem top-down e interativa em direção a modelagem e desenvolvimento de sistemas baseados em agentes.
De entre as metodologias que contemplam o universo dos agentes algumas foram escolhidas para constar deste estudo devido a o seu freqüente uso por a comunidade científica.
São elas:
AAII (Australian Artificial Inteligence Institute);
MaSE (Multiagent Systems Engineering);
Através da revisão das principais metodologias e abordagens para o desenvolvimento de SMA destacadas na seção anterior, verificou- se que a metodologia Gaia, a qual é a metodologia mais amplamente referenciada([ LIN2001, CAI2001, ZAM2000, OMI2000, WOOD2000 WOOD2000], por apresentar de forma mais detalhada a direção que o projetista deve tomar ao construir o sistema, foram analisadas com maior atenção, por apresentarem características interessantes, as quais vão de encontro a os nossos objetivos.
Ambas são melhor apresentadas nas seguintes seções.
Gaia é a primeira tentativa de definir uma metodologia completa e genérica para especificar análise e projeto de SMA.
Em a metodologia Gaia, SMA são visualizados como sendo compostos de um grande número de entidades autônomas (como uma sociedade organizada por indivíduos) que apresentam um ou mais papéis específicos.
Segundo Wooldridge, os principais conceitos de Gaia podem ser divididos em duas categorias:
Abstratos e concretos.
A Tabela 1 resume estes conceitos.
Entidades abstratas são aquelas usadas durante a análise conceitual do sistema.
Entidades concretas, ao contrário, são usadas na fase de projeto.
Gaia, bem como outras metodologias orientadas a agentes, defini a estrutura de um SMA em termos de modelos de papéis.
Este modelo identifica os papéis que os agentes devem desempenhar no SMA e os protocolos de interação em o qual os diferentes papéis estão comprometidos.
Segundo, na metodologia Gaia, a análise e projeto são fases bem separadas, veja a Figura 13.
Passam a idéia de que algo bom vai acontecer (somethings good happens).
Segurança Fase de Projeto A fase de análise objetiva desenvolver o entendimento do sistema e sua estrutura, em termos de papéis que tenham que ser desempenhados na organização, sem qualquer referência à detalhes da implementação.
A fase de projeto objetiva definir a estrutura do sistema, em termos de classes e instâncias que comporão o sistema, serviços que deverão ser fornecidos por os agentes e a estrutura do conhecimento.
A fase de análise sugere os seguintes passos:
Identificar os papéis do sistema;
Para cada papel, identificar protocolos associados, isto é, padrões de interação que podem ocorrer entre os papéis;
Elaborar completamente o modelo de papéis e o modelo de interação.
O resultado esperado da fase de análise são:
O modelo de papéis completamente elaborado (com a descrição de cada papel em termos responsabilidades, permissões, protocolos de interação e atividades) e o modelo de interação (com a descrição de cada protocolo em termos de troca de dados e patterns envolvidos).
A fase de projeto começa a partir de os modelos definidos durante a fase de análise e objetiva definir o sistema tal que sua implementação seja facilmente executada.
Para este fim, a fase de projeto tem que decidir quais classes de agentes tem que desempenhar os papéis identificados na fase de análise, quais serviços os agentes devem fornecer para o desempenho de seu papel e qual a topologia das interações.
A fase de projeto envolve os seguintes passos:
Identificar o modelo do agente, isto é, agregar papéis nos tipos de agentes e refinalos, formar um tipo de agente hierárquico e avaliar o número de instancias necessárias para cada classe;
Identificar os serviços que os agentes devem fornecer para o desempenho dos papéis designados, por a análise da atividade e responsabilidades, bem como, o protocolo definido para cada papel;
Desenvolver o modelo de conhecimento para identificar a ineficiência do projeto;
O resultado da fase de projeto é a arquitetura do sistema, a qual pode então ser implementada por o uso de técnicas tradicionais, tais como:
Técnicas OO, component-ware, etc..
A MaSE é uma metodologia para Engenharia de Sistemas Multiagentes proposta por Wood.
MaSE é independente de qualquer arquitetura multiagente, arquitetura do agente, linguagem de programação ou sistema de troca de mensagem.
Como esta metodologia foi adotada como referência, ela será mais detalhada que as demais.
Uma visão geral da metodologia e seus modelos podem ser verificados na Figura 14.
Em as seções subsequentes cada modelo será descrito em maiores detalhes.
A primeira fase de MaSE é denominada de Capturar Objetivos, pegando as especificações iniciais do sistema e transformando- as num conjunto estruturado de objetivos através do diagrama de hierarquia de objetivos, como mostra a Figura 15.
Em esta fase são consideradas duas etapas:
Identificar e estruturar os objetivos.
Os objetivos são identificados por a análise do conjunto de requerimentos.
Estes requerimentos podem incluir documentos técnicos detalhados, relatos dos usuários, ou especificações formalizadas Segundo, a conversação entre os agentes é a verdadeira espinha dorsal de um SMA, elas capacitam a distribuição das operações que é a força da tecnologia de agentes.
A segunda fase da metodologia MaSE, denominada Aplicando Use Cases, olha a construção dessas conversações e cria use cases7 para facilitar o processo.
A fase Aplicando Use Cases captura use cases dos requerimentos iniciais do sistema e, realiza uma reestruturação na forma de um Diagrama de Seqüência.
Este diagrama descreve a seqüência de mensagens entre os múltiplos papéis dos agentes.
A Figura 16, a seguir, mostra um exemplo de um diagrama de seqüência.
A tradução encontrada na bibliografia em português para use case é &quot;caso de uso», mas, para fins de familiarização, utilizaremos o termo em inglês.
Os use cases são descrições narrativas da seqüência de eventos que define o comportamento do sistema.
Eles são exemplos de como o usuário acredita que o sistema deveria comportar- se em dado caso.
O diagrama de seqüência é usado para determinar o mínimo conjunto de mensagens que deve ser trocado entre os papéis.
Geralmente cria- se pelo menos um diagrama de seqüência de um use case.
Porém, se diversos cenários são possíveis, deve- se criar tantos diagramas quantos forem necessários.
O terceiro passo da metodologia MaSE é o Refinamento de Papéis.
Ele consiste em transformar os objetivos estruturados do Diagrama de Hierarquia de Objetivos numa forma mais útil para a especificação de papéis em SMA.
Papéis são usados para definir classes dos agentes e capturar os objetivos do sistema durante a fase de projeto.
A transformação de objetivos em papéis é feita um-para-um.
Ou seja, cada objetivo é mapeado para um papel, Figura 17.
Entretanto, há algumas muitas situações excepcionais onde é mais útil combinar objetivos.
Isto é, objetivos relacionados e similares podem ser combinados num simples papel.
A quarta fase da MaSE é a Criação das Classes de Agentes.
Em esta fase as classes dos agentes são identificados por os papéis.
O resultado desta fase é um diagrama das Classes dos Agentes, como mostra a Figura 18, em a qual é descrito as classes dos agentes e as conversações entre eles.
As caixas na figura representam os agentes, contendo o nome da classe e o papel associado.
Linhas com setas representam conversações entre os agentes.
Durante esta fase, as classes de agentes consistem em dois componentes:
Papéis e conversações.
Em uma fase posterior de MaSE, detalhes internos são adicionados.
A sexta fase é denominada Montagem das Classes dos Agentes.
Em esta fase as especificações internas das classes dos agentes são criadas.
Conforme, existe três métodos para montar os componentes para definir uma classe de agente.
O primeiro é utilizar uma das quatro arquiteturas pré-definidas (BDI, reativo, planning (planejamento) e baseado em conhecimento).
Cada uma dessas arquiteturas possuem um conjunto de componentes específicos.
Por exemplo, a arquitetura reativa possui um Controller, MessageInterface, RuleContainer e Effectors, Figura 21.
Os componentes são então instanciados, ou modificados por a adição, exclusão ou modificação dos atributos e métodos.
O segundo método consiste em resgatar os componentes pré-definidos montando- os numa arquitetura definida por o usuário.
Este método também permite a modificações dos componentes, atributos e métodos como descrito acima.
O terceiro método é definir os componentes e arquitetura do nada, neste caso torna- se difícil decidir qual componente utilizar ou evitar.
A fase final da metodologia MaSE, é denominada de Projeto do Sistema.
Em esta fase organiza- se as classes dos agentes e instancia- as como agentes reais (agentes concretos, com toda a sua funcionalidade especificada).
Ela usa o Diagrama de Disposição para mostrar os números, tipos e locações de agentes dentro de o sistema.
Esta fase é a fase mais simples da metodologia MaSE, a maioria do trabalho foi feito nas etapas anteriores.
A idéia de instanciar os agentes das classes dos agentes é o mesmo que instanciar objetos de classes de objetos na programação orientada a objetos.
A Figura 22 ilustra um exemplo de Diagrama de Implantação (Deployment Diagram).
As caixas são consideradas como agentes e as linha conectadas representam as conversações entre os agentes.
O quadro com a linha tracejada que os agentes estão hospedados numa mesma plataforma física.
Segundo desenvolvedor define graficamente comportamento do sistema em alto nível baseando- se nas fases e diagramas da metodologia MaSE.
A ferramenta agentTool implementa todas as sete etapas de desenvolvimento da metodologia MaSE.
A interface gráfica da ferramenta agentTool, em sua versão 1.8.3, é apresentada por a Figura 23.
Os menus no topo da janela permitem diversas funções, incluindo:
Persistência em Base de Conhecimento, Verificação e Conversações e Geração de Código.
Os botões à esquerda servem para adicionar objetos específicos nos diagramas, enquanto que abaixo apresenta- se uma área reservada para mensagens do sistema.
Diferentes diagramas da MaSE são acessados através de painéis no alto da janela principal.
Quando um diagrama de MaSE é selecionado, o desenvolvedor pode manipular- lo graficamente na janela.
A seguir, apresenta- se alguns diagramas da metodologia MaSE, construídos com o auxílio da ferramenta agentTool.
Em o primeiro passo, captura- se os requisitos iniciais do usuário transformando- os num conjunto estruturado de objetivos através do Diagrama de Hierarquia de Objetivos, Figura 24.
Após definir a hierarquia de objetivos, define- se os Use Cases, Figura 25.
Esta fase captura as especificações iniciais do sistema e realiza uma reestruturação na forma de Diagramas de Seqüência, Figura 26.
O Diagrama de Seqüência descreve a seqüência de mensagens entre os múltiplos papéis dos agentes.
O terceiro passo da fase de Análise é o Refinamento de Papéis.
Ou seja, transformar os objetivos estruturados do Diagrama de Hierarquia de Objetivos numa forma mais útil para a especificação de papéis em SMA.
Como quarto passo, já na fase de projeto, transformam- se o modelo de análise em construções úteis para realmente implementar o SMA.
A fase de projeto possui 4 etapas:
Criação das Classes dos Agentes, Construção das Conversações, a Montagem das Classes dos Agentes e o Projeto do Sistema.
Em o primeiro passo da fase de Projeto, cria- se classes específicas dos agentes para adaptar os papéis definidos na fase de Análise.
O resultado desta fase é um diagrama das Classes dos Agentes, em o qual são descritas as classes dos agentes e as conversações entre elas, Figura 28.
O segundo passo compreende o processo de Conversação.
Uma conversação na metodologia MaSE define um protocolo de coordenação entre dois agentes, a qual consiste de dois Diagramas de Comunicação, uma para o iniciador da mensagem e um para aquele que responde.
Um Diagrama de Comunicação é uma máquina de estados finitos que define os estados da conversação de duas classes participantes, Figura 29.
O terceiro passo dentro de a fase de Projeto é denominada de Montagem das Classes dos Agentes, Figura 30.
Maiores detalhes sobre a ferramenta podem ser consultadas diretamente na URL:
Ou consultando- se o Relatório Técnico, onde a ferramenta é apresentada em suas 3 versões:
1.8.2, 1.8.3 e 2.0.
MaSE como metodologia de referência As metodologias Gaia e MaSE cobrem todo o ciclo de vida do desenvolvimento de SMA e, também, são metodologias semelhantes por basearem- se na visão de que um SMA consiste de organizações computacionais com a interação de vários papeis.
Em cada metodologia, um agente pode desempenhar um ou muitos papeis num dado tempo.
Em essas metodologias, os agentes interagem entre eles através de conversações.
Estas metodologias diferem principalmente no que diz respeito aos detalhes fornecidos para a construção de SMA.
Além de MaSE fornecer mais detalhes para a definição de conversações do que Gaia, ainda fornece modelos para a construção de estruturas de conhecimento internas para os agentes.
Após a análise das diversas abordagens e metodologias para o desenvolvimento de SMA, sobretudo da comparação entre as metodologias Gaia e MaSE, na seção anterior, decidiu- se adotar MaSE como metodologia de referência para o estudo por as seguintes razões:
Gaia usa atividades para modelar computações desempenhadas dentro de os papéis e protocolos para definir interações com outros papéis.
Estas características são capturadas dentro de as tarefas de MaSE, ela fornece mais detalhes sobre quando ações serão realizadas, dados de entrada e saída, e como as ações estão ligadas com os protocolos de interação;
A metodologia Gaia foi concebida para ser usada em sistemas distribuídos fechados onde:
Estas características tornam Gaia inadequada para aplicações Web por as seguintes razões:
Não prevê Sistemas Abertos:
Necessita que todos os agentes no sistema, bem como todos os protocolos de interação entre eles sejam conhecidos a priori.
Entretanto, na Web existe a possibilidade de dois agentes necessitarem interagir entre si, embora eles não conheçam o projeto de cada um e nem seu protocolo de interação;
Não prevê agentes com interesse próprio:
Não trabalha explicitamente com situações em que interações são não-- cooperativas de natureza.
Entretanto, a Web é predominantemente populada por entidades auto-interessadas que procuram alcançar seus próprios objetivos;
Não prevê Leis sociais:
Não identifica uma organização de agentes como uma sociedade em a qual existem leis globais que devem ser respeitadas por a sociedade de agentes.
A definição de SMA conta com tarefas individuais de cada agente, mas também com tarefas sociais e a aplicação de leis sociais.
Optamos por escolher a metodologia MaSE devido a o fato de ser uma metodologia recente, o que nos dá um bom aporte no que tange ao aspecto do estado da arte.
Ela agrega aspectos positivos de outras metodologias mais antigas e amplamente utilizadas e por possuir características próprias que se mostraram mais coerentes com nossos objetivos.
MaSE é mais focada, levando o desenvolvimento em etapas bem definidas, desde o levantamento de requisitos até a fase de implantação.
Além de todas estas vantagens, MaSE também oferece a possibilidade de utilizarmos o ambiente de desenvolvimento gráfico associado, agentTool, o que torna o estudo mais facilitado.
Em este trabalho pretendeu- se modelar apenas os aspectos referentes ao nível macro do sistema, isto é, preocupou- se em especificar o comportamento da sociedade de agentes.
Segundo Giraffa, o ciclo de tutoração é considerado central em STI, entende- se por o conjunto de interações existentes entre o usuário (aluno) que executa uma ação (ou ações), percebida por a interface e repassada (s) ao sistema.
Estas informações são registradas no modelo do aluno, e repassadas ao modulo tutor que as utiliza para deliberar qual a estratégia e tática de ensino que será utilizada para este aluno.
A instância física desta deliberação (plano de ação) se reflete nas escolhas associadas ao módulo de domínio (exercícios, mensagens, etc.) que retornam ao aluno, via interface do ambiente.
Esta coreografia representa assistência personalizada do tutor, em função de o modelo cognitivo atual do aluno.
Esta assistência tem com finalidade organizar o domínio de acordo com os objetivos educacionais modelados no STI.
Esta organização do domínio busca alterar o estado cognitivo do aluno (modelo do aluno), finalizando um ciclo na coreografia desenvolvida por o tutor.
Desta forma, o tutor realiza suas funções com a finalidade de assistir o aluno em função de suas características individuais, auxiliando- o a organizar o conteúdo apresentado.
Esta assistência segue então os objetivos educacionais desempenhados por o tutor, e que são explicitados através das estratégias e táticas selecionadas.
Assim, os STI podem desempenhar suas tarefas, auxiliar o aluno e principalmente coletar informações e complementar as tarefas do professor.
Os STI apesar de apresentarem características próprias (inerentes ao seu funcionamento), possuem características que podem ser modeladas com metodologias genéricas para SMA.
Nossa proposta é, portanto, definir quais as extensões e/ ou adaptações que são necessárias para que uma metodologia para o desenvolvimento de SMA comporte os aspectos específicos de STI.
A Figura 33 apresenta o contexto do problema.
A Figura 33 apresenta a idéia de que as metodologias concebidas para o desenvolvimento de SMA, atualmente, possuem poder de modelar as características comuns a todos os sistemas que contenham agentes com funcionalidades desempenhadas por os que denominamos de agentes Executores de Tarefas, identificados no Capítulo 2, seção 2.2.1.
Entretanto, até o início do trabalho, não sabíamos se as características específicas apresentadas por os STI, no que concerne às atividades que dão suporte ao processo de ensinoaprendizagem desempenhadas por os agentes Assistentes, poderiam ser especificadas por metodologias genéricas para SMA sem qualquer adaptação e/ ou extensão.
Para a análise e validação da proposta metodológica, utilizou- se o desenvolvimento de um estudo de caso, onde verificou- se a aplicabilidade da metodologia multiagente MaSE, em STI Multiagentes.
Esta metodologia foi selecionada como referência para este trabalho.
Maiores detalhes podem ser consultados no capítulo 3, seção 3.2.
Estudo de Caso Para o desenvolvimento deste estudo de caso, utilizou- se o trabalho de Andrade.
Em este trabalho, Andrade propõe a Construção de um Agente Pedagógico de Diagnóstico para a Aprendizagem Colaborativa, a qual foi elaborada a partir de a arquitetura Multiagente proposta anteriormente por a autora.
Maiores detalhes sobre a arquitetura Multiagentes proposta por Andrade podem ser obtidos diretamente nos trabalhos da autora.
Este trabalho foi escolhido devido as sua características onde estão bem definidas as atividades de cada agente dentro de seus níveis hierárquicos.
E, por apresentar um ambiente completamente especificado.
Aprendizagem Colaborativa Este trabalho propõe a modelagem de um ambiente educacional como uma sociedade multiagente composta por agentes artificiais e agentes humanos, baseada na teoria sociointeracionista de Vygotsky8.
Em esta sociedade todos os personagens (aprendizes e agentes artificiais) são modelados como agentes sociais integrados num ambiente de ensino-aprendizagem.
A proposta é modelar um ambiente que privilegie a colaboração como forma de interação social, a utilização de linguagem, símbolos e signos.
A arquitetura é formada por quatro agentes artificiais que irão suportar a aprendizagem a distância, são eles:
A arquitetura foi projetada para ser independente de conteúdo e pode ser voltado a qualquer domínio de conhecimento.
Dentro de a arquitetura, os agentes artificiais têm como função monitorar e auxiliar os agentes humanos em suas atividades colaborativas.
Segundo Andrade, todos os personagens, aprendizes e agentes, são modelados como agentes sociais integrados num ambiente de aprendizagem colaborativa.
Em a Figura 34 é ilustrada a arquitetura do sistema proposto.
A arquitetura proposta acima faz parte do projeto na área de IAED (Inteligência Artificial Aplicada à Educação) da UFRGS envolvendo diversos trabalhos de mestrado e doutorado.
Portanto, cabe salientar, que não será objeto desse estudo, a modelagem completa da arquitetura proposta por Andrade, mas sim, a modelagem parcial desta arquitetura.
Ou seja, a modelagem do ponto considerado por Andrade como o núcleo básico da arquitetura, cujo papel é desempenhado por o agente pedagógico, denominado de Agente Diagnóstico, responsável por a seleção de estratégias, táticas e suportes adequados a partir de o diagnóstico do aluno.
Este agente será melhor descrito a seguir, conforme já salientado anteriormente.
Agente Diagnóstico O Agente Diagnóstico, segundo Andrade, é definido como um agente tutor capaz de observar o desenvolvimento real do aprendiz e propor atividades que tornem suas habilidades o mais próximo possível do nível potencial9.
Ou seja, a ZPD10 é a distância entre o nível de desenvolvimento real e potencial.
O objetivo deste agente é a amplitude de capacidade entre o nível de capacidade observável (desempenho) e a capacidade latente (competência) do aluno.
Para identificar a ZPD do anulo, o agente de diagnóstico deverá delimitar a área de aprendizagem em estudo e delimitar um domínio de conhecimento específico, para então definir seus desempenhos e competências.
O Agente Diagnóstico terá, entre outras, as seguintes funções:
Maiores detalhes sobre o Agente Diagnóstico podem ser consultados em[ AND2001b, AND2001a].
Aplicando MaSE ao estudo Esta seção descreve a aplicação da metodologia MaSE ao estudo de caso.
Desenvolveu- se este estudo de caso a partir de a modelagem do Agente Diagnóstico, cujas definições prévias já foram realizadas por Andrade.
Segundo Andrade, as especificações foram realizadas, sem aplicação de uma metodologia específica para o desenvolvimento de SMA.
Andrade, baseou- se, inicialmente, no trabalho de Papasimeon, para a modelagem do Agente Diagnóstico, em o qual o autor utiliza uma extensão da UML, para uma análise através de Use Cases11, Figura 35.
Habilidades que ainda estão na forma de aptidões do aluno, mas ele consegue realizar com o auxilio de outro indivíduo mais capacitado.
Atores são papéis desempenhados por várias pessoas, ou outros sistemas de computação.
Use Cases são, então, interações típicas que atores têm com o sistema.
A Figura 35, representa o use case desenvolvido por Andrade para descrever as interações entre os atores ocorridas no cenário da sua aplicação.
A descrição textual deste cenário é apresentada no Quadro 2, seção 4.3.1.1.
Dividiu- se a modelagem do Agente Diagnóstico nas seguintes fases:
Análise: Esta fase compreende as seguintes etapas:
Capturando Objetivos (Capturing Goals), Aplicando Use Cases (Applying Use Cases), Refinando Papéis (Refining Roles);
Projeto: Já esta fase divide- se na seguinte etapas:
Criando Classes de Agentes (Creating Agent Classes), Construindo Conversações, (Constructing Conversations), Montando Classes de Agentes (Assembling Agents Classes) e Projeto do Sistema (System Design).
Todas as etapas são apresentadas e comentadas nas seções seguintes.
Cada etapa é inicialmente descrita e em seguida apresenta- se a aplicação da modelagem do Agente Diagnóstico.
A o final de cada etapa da modelagem, é desenvolvida uma análise sobre a sua aplicabilidade real/ efetiva.
Utilizou- se a ferramenta agentTool para o desenvolvimento e apresentação dos diagramas.
Detalhes sobre a utilização da ferramenta agentTool podem ser encontrados em A abordagem da fase de Análise na metodologia MaSE é simples.
Define- se o conjunto de objetivos do sistema e define- se os papéis necessários para alcançar esses objetivos.
MaSE sugere o uso de use cases para ajudar a avaliar os objetivos do sistema e direcionar a identificação do conjunto inicial de papéis.
A fase de Análise, em MaSE, pode ser resumida da seguinte forma:
Hierarquia de Objetivos;
Inicial do conjunto de papéis e processo de comunicação;
As etapas individuais na fase de análise, Capturando Objetivos, Aplicando Use Cases e Refinando Papéis são apresentadas nas seguintes seções.
Capturando Objetivos Há dois passos identificados nesta etapa.
Primeiro, os objetivos devem ser identificados através da descrição inicial do sistema.
Logo, use cases são identificados através dos requisitos do sistema.
Posteriormente, os objetivos são estruturados para serem usados na fase de projeto da metodologia MaSE.
Identificando Objetivos O primeiro passo na fase Capturando Objetivos, é capturar a essência inicial de um conjunto de requisitos funcionais.
Este processo começa por a extração de especificações iniciais através de um cenário e da descrição de seus objetivos.
De acordo com Andrade, tem- se o seguinte cenário:
O Agente Mediador observa o comportamento individual ou do grupo e informa ao Agente Diagníostico.
O Agente Diagnostico deve registrar estas habilidades ou dificuldades no modelo do aprendiz.
O Agente Diagnóstico verifica as habilidades do usuário e procura identificar quais habilidades que o aprendiz não realiza sozinho e, necessita então de algum tipo de apoio.
Se o estudante estiver no ZPD, o Agente Diagnóstico deve selecionar as habilidades do estudante que precisa de algum apoio (scaffold) e sugestiona algum nível de ajuda.
O Agente Diagnóstico deve selecionar táticas adequadas de acordo com o nível de ZPD do estudante.
O Agente Diagnóstico tem que criar um grupo analisando as habilidades que estão na, com as habilidades que estão no &quot;core «1.
Quadro 2: Descrição textual do use case Considerando o cenário descrito no Quadro 2 e, aplicando- se o primeiro passo da metodologia MaSE (Identificação de Objetivos), tem- se os seguintes objetivos: --
observar o comportamento individual do aluno ou do grupo de alunos; --
informar ao Agente Diagnóstico o comportamento individual ou do grupo; --
registrar habilidades ou dificuldades no modelo do aprendiz; --
verificar as habilidades do usuário e identificar quais habilidades que o aprendiz não realiza sozinho, necessitando, assim, de algum apoio; --
verificar se o estudante está na ZPD.
Selecionar as habilidades que o estudante precisa de algum apoio (scaffold) e sugerir algum nível de ajuda; --
selecionar táticas adequadas de acordo com o nível de ZPD do estudante e criar um grupo analisando as habilidades dos que estão no ZPD, com as habilidades que estão no &quot;core».
Estruturando Objetivos O passo complementar desta primeira etapa é estruturar os objetivos de forma hierárquica:
Aplicando- se este processo na ferramenta agentTool, tem- se o Diagrama de Hierarquia de Objetivos, (Figura 36).
Um Diagrama de Hierarquia de Objetivos é um gráfico direcionado, onde os nodos representam objetivos e os arcos os relacionamentos entre eles.
Para desenvolver uma hierarquia de objetivos, o analista deve estudar o conjunto inicial de objetivos e a importância de seu inter-relacionamento.
Essa hierarquia de objetivos possui diversas relações, tais como:
Importância, tamanho e nível de detalhe.
Sendo que tal diagrama preserva tais relações tornando mais fácil a sua administração e seu entendimento.
Aplicando- se este passo ao cenário, tem- se a seguinte hierarquia de objetivos, representada por a Figura 36: Em esta primeira fase, não observou- se a necessidade de alterações na metodologia MaSE.
Ou seja, a sua proposta, com a incorporação da identificação de uma hierarquia de objetivos, pode ser aplicada em STI Multiagentes sem necessidade de qualquer alteração.
Aplicando Use Cases O objetivo desta segunda fase é capturar um conjunto de use cases do contexto inicial do sistema e criar Diagramas de Seqüência para auxiliar na identificação inicial de papéis e processos de comunicação dentro de o sistema.
Os Diagramas de Seqüência capturam os use cases como um conjunto de eventos que ocorrem entre os papéis.
Estas seqüências de eventos são utilizadas posteriormente para as tarefas que determinado papel deve realizar.
Criando Use Cases (Casos de Uso) Criar use cases é o primeiro passo nesta segunda fase.
Extrai- se os use cases do contexto inicial definindo a seqüência de eventos que podem acontecer.
Durante esta etapa, ao iniciar a construção dos use cases, pode- se identificar a necessidade de outras informações.
Se isto acontecer, deve- se voltar à fase anterior, a fim de, modificar e/ ou adicionar outros objetivos ao Diagrama de Hierarquia Objetivos.
Conforme a OMG (Object Management Group), a modelagem através de use cases, introduzido por a UML, é amplamente utilizada no desenvolvimento inicial de sistemas.
Novamente, não houve a necessidade de alterações para o contexto deste STI multiagente.
Entretanto, sugere- se a aplicação de uma forma de representação gráfica, assim como ocorre na UML12, onde desenha- se os use case, os atores e seus relacionamentos, Figura 38.
Essa sugestão possui uma aplicabilidade maior, sobretudo na ferramenta agentTool, para facilitar sua construção e visualização.
Isto permitirá a visualização mais explicita das relações entre os agentes durante o ciclo de tutoração.
Criando Diagrama de Seqüências Um Diagrama de Seqüência descreve a seqüência de eventos que são trocados entre os papéis identificados através dos use cases.
As caixas no alto do diagrama representam os papéis do sistema, as setas entre as linhas representam os eventos passados entre os papéis.
Assumese que a ordem dos eventos é de cima para baixo (top-down).
A transformação de use cases em Diagrama Seqüências é praticamente direta.
As entidades identificadas nos use cases correspondem aos papéis, enquanto que, qualquer tipo de comunicação ou passagem de informações entre os use cases tornam- se os eventos do diagrama.
A seqüência de eventos está baseada na descrição dos use cases.
O conjunto de papéis identificados nos Diagramas de Seqüência serão usados na próxima fase de MaSE, Refinando Papéis, onde os papéis podem ser decompostos em múltiplos papéis ou combinados com outros.
Em geral, cria- se um Diagrama de Seqüência para cada use case.
Entretanto, se há diversas possibilidades de seqüências de execução, podese criar múltiplos Diagramas de Seqüência para cada use case.
Considerando o fluxo de eventos trocados entre as entidades identificadas através da descrição do cenário e dos use cases identificados na fase anterior, pode- se construir, para cada use case, os seguintes Diagramas de Seqüência:
Nome: Registrar comportamento do Grupo Descrição:
O Agente Mediador observa o comportamento individual do aprendiz ou do grupo e informa ao Agente Diagnóstico.
O Agente Diagnóstico deve registrar as habilidades ou dificuldades no modelo do aprendiz.
Pré-Condições: O aprendiz realiza alguma ação, resultado de alguma atividade ou tarefa Fluxo de eventos:
Aprendiz realiza alguma tarefa;
Agente Mediador visualiza alguma ação executada e envia mensagem ao Agente Diagnóstico;
Pós-condições: O Agente Diagnóstico registra a ação Agente Diagnóstico atualiza o nível de performance do grupo.
Nome: Avaliar ZPD Descrição:
O Agente Diagnóstico verifica as habilidades do aprendiz e identifica quais habilidades o aprendiz realiza sozinho ou com algum apoio.
Pré-Condições: O aprendiz realiza alguma ação, sem qualquer apoio (ajuda).
Fluxo de eventos:
Agente Diagnóstico examina o modelo de auto-confidencia;
Agente Diagnóstico registra as habilidades no módulo Core;
Agente Diagnóstico avalia a performance do aprendiz, sem apoio;
Agente Diagnóstico registra as dificuldades no módulo ZPD.
Pós-condições: Agente Diagnóstico registra o ZPD no Modelo do Grupo.
O professor deve validar o diagnóstico descrito por o Agente Diagnóstico.
Nome: Criar Modelo do Grupo Descrição:
O Agente Diagnóstico deve criar um modelo do grupo por a análise das habilidades que estão no ZPD, com as habilidades que estão no core.
Pré-Condições: Agente Diagnóstico recebe solicitação do professor para criar um grupo;
Agente Diagnóstico recebe uma solicitação do aprendiz para participar do grupo já existente;
Fluxo de eventos:
Agente Diagnóstico verifica atributos no Modelo do Aprendiz;
Agente Diagnóstico compara o modelo do aprendiz para construir o modelo do grupo.
Pós-condições: Modelo do grupo é formado.
Nome: Informar apoio (Scaffold) (Figura 42) Descrição:
Se o aprendiz esta no ZPD, o Agente Diagnóstico deve selecionar as habilidades do aprendiz que necessita alguma ajuda e sugerir algum nível de assistência.
Pré-Condições: O aprendiz está no ZPD;
Agente Mediador solicita alguma tática para aplicar no grupo;
Fluxo de eventos:
Agente Mediador observa as dificuldades do aprendiz no grupo;
Agente Diagnóstico procura por habilidades no ZPD;
Agente Mediador envia mensagem ao Agente Diagnóstico, solicitando alguma tática;
Agente Diagnóstico deve inspecionar o módulo de auto-confidebcia do aprendiz para encontrar o nível certo de assistência;
Agente Diagnóstico deve selecionar o tipo de apoio (Scaffold);
Agente Diagnóstico consulta o banco de táticas;
Agente Diagnóstico ajusta táticas de apoio e nível;
Agente Diagnóstico envia táticas ao Agente Mediador.
Pós-condições: Aprendiz recebe algum apoio;
Agente Diagnóstico atualiza o modelo do grupo, registrando táticas aplicada no grupo;
Agente Diagnóstico registra o histórico do suporte para futuras interações;
Agente Diagnóstico deve validar se as tática aplicadas no grupo foram adequadas.
Nome: Processo de diagnóstico (auxiliar) (Figura 43) Descrição:
Definição do fluxo de entradas e saídas para auxiliar no processo de diagnostico.
Pré-Condições: O aprendiz realiza alguma ação;
Fluxo de eventos:
O Agente Mediador fornece informações pessoais sobre o estudante;
O aprendiz fornece informações para o mediador;
O Agente Mediador fornece o perfil emocional do aprendiz;
O Agente Mediador fornece informações sobre tarefas;
O Agente Mediador fornece a performance do aprendiz;
O Agente Mediador fornece o nível de confidência do aprendiz depois de avaliar as tarefas;
O Agente Diagnostico solicita informações pessoais;
O Agente Diagnostico solicita informações sobre o perfil emocional do aprendiz;
O Agente Diagnostico solicita informações sobre tarefas;
O Agente Diagnostico solicita informações sobre a correção dos exercícios;
O Agente Diagnostico solicita informações ao nível de confidência do aprendiz durante a realização das tarefas;
O Agente diagnóstico sugere táticas para mostrar exemplos para o aprendiz;
O Agente diagnóstico sugere táticas para dar dicas para o aprendiz;
O Agente diagnóstico sugere táticas para começar a solução para o aprendiz iniciante (beginers);
O Agente diagnóstico sugere a táticas para dar explicação para o aprendiz;
O Agente diagnóstico sugere táticas de solicitar explicação para um aprendiz mais avançado;
O Agente diagnóstico sugere táticas de questionar o aprendiz;
O Agente Mediador fornece o perfil do grupo;
O Agente Diagnóstico solicita a performance do aprendiz após a aplicação das táticas;
O Agente Diagnóstico solicita o perfil do grupo de interações.
Pós-condições: O objetivo da última etapa da fase de análise da metodologia MaSE, Refinando Papéis, é transformar a estrutura de objetivos e os diagrama de seqüências em papéis com suas respectivas tarefas associadas.
Os papéis formam a base para a definição das classes dos agentes.
O diagrama apresentado por a Figura 44 foi automaticamente construído através da identificação dos use cases (cada entidade no use case transforma- se num papel).
Ou seja, à medida que se identifica entidades através dos use cases, cada entidade transforma- se num papel e, é adicionada, automaticamente, ao Diagrama de Papéis.
Esse diagrama apresenta- se como um passo inicial.
Ou seja, a partir deste estágio os papéis serão posteriormente refinados.
O Diagrama de Papéis apresenta informações sobre as interações entre as tarefas desempenhadas por os papéis.
Papéis são representados através de retângulos, enquanto que suas tarefas são representadas por elipses ligadas à cada papel.
A descrição de uma tarefa é fornecida por o Diagramas de Tarefa, descrito na próxima seção.
Linhas entre tarefas representam protocolos de comunicações que acontecem entre as tarefas.
O primeiro passo no processo de refinamento do diagrama é associar os objetivos, identificados na primeira fase, aos papéis.
Após realizar este processo tem- se o seguinte diagrama.
Após este primeiro passo passa- se, então, a determinação das tarefas.
Em este caso, como já tem- se os objetivos determinados a cada papel, determina- se as tarefas com base nesses objetivos.
Para exemplificar, tomemos o diagrama anterior, especificamente, o Agente Mediador.
Para este agente, definiu- se os seguintes objetivos:
&quot;Observar o comportamento individual do aluno ou do grupo «e &quot;Informar o comportamento individual do aluno ou do grupo».
De essa forma, para determinar as tarefas para esse agentes, naturalmente, pode- se definir as seguintes tarefas:
&quot;Observar o comportamento «e &quot;Informar o comportamento».
Aplicando- se esse processo a todos os papéis, tem- se o seguinte diagrama.
Após os papéis serem criados, as tarefas são associadas a cada papel que descreve o comportamento que o papel deve desempenhar para alcançar seus objetivos.
As tarefas são geralmente derivadas dos objetivos para a qual a tarefa está associada.
Geralmente, um único papel pode ter múltiplas tarefas.
Cada tarefa especifica uma única linha de execução que define um comportamento próprio do papel.
Tarefas são especificadas graficamente usando- se diagramas de estados finitos, o qual é referenciado como Diagrama de Tarefas Concorrentes, como mostra a Figura 47.
Tarefas Concorrentes possuem dois componentes:
Estados e transições.
A sintaxe para a transição é mostrada abaixo.
Um trigger é um evento recebido de outro agente ou de outra Tarefa Concorrente, o guard é uma condição Booleana, e transmission representa o evento enviado a outra Tarefa Concorrente ou uma mensagem para outro agente.
São usados dois eventos especiais para indicar que uma mensagem é de fato enviada e recebida de um agente para outro agente:
O evento receive possui a sintaxe semelhante ao evento send:
Receive (message, agent) Maiores detalhes sobre a sintaxe podem ser consultados em.
A Figura 47, mostra um exemplo de uma tarefa, denominada Registrar Táticas.
A tarefa inicia no estado start representado por o círculo completamente preenchido:
Registrar informa que a tarefa foi adicionada.
O processo de exclusão de tarefas segue o mesmo raciocínio.
Estados podem conter atividades, que podem ser usadas para representar raciocínio, percepção através de sensores ou atuação através de atuadores.
Várias atividades podem ser incluídas num único estado, as quais são realizadas em seqüência.
Atividades são definidas em forma de funções.
Cada função pode retornar um resultado e pode ter parâmetros como entrada.
Por exemplo, na Figura 48, no estado 1, há duas atividades apresentadas em seqüência:
Uma vez iniciar o processamento do estado 1, ambas as atividades devem ser completadas antes da transição do estado 1 ser ativada.
A sintaxe de uma atividades é mostrada abaixo.
Como dito anteriormente, tarefas definem o que o papel deve realizar para alcançar seus objetivos.
Os diagramas de Seqüência definidos na faz Aplicando Use Cases são usados como um ponto de partida para ajudar o desenvolvedor na definição das tarefas.
Como discutido acima, Diagramas de Seqüência definem um conjunto mínimo de mensagens que um papel deve responder.
O desenvolvedor pode criar um Modelo de Tarefas Concorrentes inicial para o cenário tomando as seqüências de mensagens (enviar e receber) e criar uma seqüência correspondente de estados e mensagens. Segundo,
pode- se categorizar as tarefas por sua duração e por suas responsabilidades.
Há dois tipos de tarefas quanto a sua duração:
Persistentes e transientes.
Uma tarefa persistente é aquela que possui uma transição nula (null) do estado inicial para o primeiro estado -- ela não possui um evento que inicia a sua execução.
Assume- se que uma tarefa persistente começa quanto o agente é inicializado e continua até o agente ou a tarefa serem finalizados.
Já tarefas transientes, possuem um trigger 13 específico na transição do estado inicial (start).
A tarefa transiente não é executada quando o agentes é inicializado, mas sim, até que o trigger seja recebido por o agente.
Com tarefas transientes, é possível ter múltiplas tarefas do mesmo tipo sendo executadas.
Quanto a a responsabilidade, uma tarefa pode ser reativa, pró-ativa ou heterogênea.
A tarefa reativa tem um estado ocioso onde ele espera por um trigger antes de realmente iniciar qualquer processamento ou é uma tarefa transiente que começa a execução em resposta a um evento.
Tarefas pró-ativas não possuem estados ociosos e não são transientes, elas estão continuamente gerando requisições (requests) para outros agentes ou tarefas.
Uma tarefa heterogênea, como o nome sugere, é uma combinação de tarefas reativas e pró-ativas.
Uma tarefas heterogênea pode ter estados ociosos, mas não começando por um estado ocioso.
Ela gera pelo menos uma requisição para outro agente ou tarefa antes de entrar no estado ocioso.
Baseado nestas definições, pode- se categorizar agentes de acordo com suas tarefas, próativos ou reativos.
Um agente pró-ativo é um agente com pelo menos uma tarefa pró-ativa ou Trigger (do inglês_ Gatilho).
Sinal que causa o começo de uma certa atividade.
Considerando a analise especifica desta etapa que compreende a criação de Tarefas Concorrentes, viu- se que a utilização de máquinas de estado como forma de criação de Tarefas Concorrentes, é uma alternativa eficaz na especificação de atividades mais complexas.
Acredita- se que a habilidade de MaSE em modelar o comportamento de agentes deva- se, especialmente, à utilização de Tarefas Concorrentes, especificamente, por a adoção de máquinas de estado como forma de modelar esse comportamento.
Segundo, grande parte do trabalho feito sobre Tarefas Concorrentes derivou- se do trabalho originalmente desenvolvido por Harel, cujo trabalho trata sobre Statecharts14, que é a base para os diagramas de estados em muitas linguagens de modelagem OO.
Segundo, Statecharts são muito mais complexos, suportando:
A fase de projeto da metodologia MaSE, é composta por quatro etapas.
A primeira etapa, denominada Criando Classes dos Agentes, o projetista determina os papéis para tipos específicos de agentes.
A segunda etapa, Construindo Conversações, as reais conversações entre os agentes são definidas, enquanto que no terceiro passo, Montando Classes de Agentes, a arquitetura interna e processos de raciocínio das classes dos agentes são projetadas.
Finalmente, no último passo, Projeto do Sistema, o projetista define o número real de agentes e sua localização na implantação do sistema.
A fase de Projeto de MaSE pode ser resumida da seguinte forma:
Conversações por o exame do modelo de tarefas, que está baseado nos papéis desempenhados por cada classe de agente.
As etapas da fase de Projeto, Criando Classes de Agentes, Construindo Conversações, Montando Classes de Agentes e Projeto do Sistema são apresentadas, individualmente, nas seguinte seções.
Criando Classes de Agentes Em a etapa denominada Criação das Classes dos Agentes, as classes dos agentes são criadas com base nos papéis definidos na fase de Análise.
Uma classe de agente é um molde de um agente do sistema e, é análogo a uma classe de objetos no paradigma OO.
Durante esta etapa, classes de agentes são definidos em termos de os papéis que eles desempenham e das conversações que eles devem participar.
Em este ponto da modelagem, apenas identifica- se os papéis e as tarefas que as classes do agentes devem desempenhar.
Ou seja, os detalhes dessas funcionalidades são definidas na fase de Montagem das Classes dos Agentes, seção 4.4.3.
Papéis são a base sobre a qual as classes dos agentes são projetadas e correspondem ao conjunto de objetivos do sistema definidos na fase de Análise.
Eles formam a ligação do &quot;o que «o sistema está tentando alcançar (objetivos na fase de Análise) para &quot;como «ele vai alcançar- los (classes de agentes na fase de Projeto).
Durante esta fase, também, identifica- se as conversações em as quais diferentes classes de agentes devem participar, mas, novamente, sem tratar de maiores detalhes, que serão adicionados durante a fase de Construção de Conversações descrita na seção 4.4.2.
As classes de agentes e conversações são documentadas através do Diagrama de Classes de Agentes, similarmente a um Diagrama de Classes no modelo OO.
Entretanto, há duas principais diferenças.
Primeiro, as classes dos agentes não são definidas por atributos e métodos e sim por os papéis que eles desempenham.
A segunda diferença está na semântica dos relacionamentos entre as classes de agentes.
Statecharts é um formalismo visual concebido por Harel para especificar sistemas em tempo real reativo.
Os retângulos representam as classes de agentes que possuem o nome da classe e o conjunto de papéis que cada agente tem associado.
Sendo que as conversações são identificadas por setas.
Construindo Conversações O objetivo desta etapa é definir os detalhes das conversações.
Uma conversação consiste de dois Diagramas de Comunicação de Classes -- (Communication Class Diagrams), uma para o remetente da mensagem e outro para o destinatário.
O remetente sempre inicia a conversação enviando a primeira mensagem.
Quando um agente recebe a mensagem este compara- à as suas conversações ativas e esse encontrar uma combinação, a transição para um novo estado é efetuada.
Caso contrário, o agente assume que a mensagem é uma solicitação para iniciar uma nova conversação e, novamente, compara- à a todas as possíveis conversações que o agente pode participar com o agente que esta enviando a mensagem.
A sintaxe de uma transição segue a seguinte notação UML:
A sintaxe acima diz que se a mensagem rec-mess é recebida com o argumento args1 e a condição cond é satisfeita, então o método action é chamado e a mensagem trans-mess é enviada com o argumento args2.
Cabe salientar que todos os elementos são opcionais.
Para exemplificar, tomemos a conversação Nova Tarefa, da figura anterior.
Considerando que o Agente 1 desempenha o papel Agente Diagnóstico e o Agente 2 desempenha o papel Agente Mediador o desenvolvedor deve definir uma conversação entre Agente 1 e Agente 2 para implementar a conversação descrita entre os papéis.
Assim como um Diagrama de Comunicação de Classes é formado por um par de máquina de estados, que define os duas classes participantes:
O remetente (initiator), mostrado por a Figura 49 e o destinatário (responder) apresentado por a Figura 50.
Em esta conversação decidiu- se que o processo de armazenar uma nova tarefa fornecesse uma resposta se a tarefa foi registrada ou não, dando a oportunidade de reenviar uma nova tarefa no caso de esta não ser aceita.
Montando Classes de Agentes Durante a etapa de Montagem das Classes dos Agentes, os detalhes internos das classes dos agentes são definidos.
Isto é realizado, basicamente, através de dois passos:
Primeiro definindo a arquitetura e em segundo definindo os componentes que formam esta arquitetura.
O projetista tem à sua escolha, projetar sua própria arquitetura ou utilizar uma arquitetura predefinida.
No caso de o projetista optar por desenvolver sua própria arquitetura, pode- se utilizar componentes de agentes.
Um componente de agente é uma parte de um agente que define como aquele agente desempenha alguma parte de seu papel.
Componentes consistem de conjuntos de atributos e métodos, e, dependendo do nível de complexidade, podem possui inúmeras subarquiteturas com seus respectivos componentes.
Conectores de componentes representam os caminhos das mensagens entre os componentes.
Há dois tipos de conectores.
O primeiro é a conexão entre componentes (representados por linhas sólidas no diagrama).
Esse tipo de conexão informa os componentes conectados e a direção dessas conexões.
O segundo tipo de conector conectar um componente a um framework.
Este conector (representado por uma linha tracejada, finalizada por um triângulo), representa uma porta de input/ output para uma outra arquitetura.
Ou seja, a ferramenta automaticamente interpreta que definiu- se uma conexão externa.
Considerando nosso estudo, decidiu- se criar um agente (Agente 3) responsável por o processo de gerenciamento de informações persistentes para todos os módulos.
Para isso utilizou- se a funcionalidade que a ferramenta agentTool oferece, de criar subarquiteturas para cada componente, como apresenta a Figura 51.
A Figura 51 (a) representa o Diagrama de Classes.
Quando seleciona- se determinada classes, automaticamente, a ferramenta torna disponível outros dois diagramas, o diagrama de arquitetura, e o diagrama de estados).
Através do diagrama de arquitetura, pode- se criar componente específicos para aquela arquitetura e, da mesma forma, quando seleciona- se um componente, pode- se especificar sua arquitetura).
Portanto, uma classe de agente pode possuir inúmeras arquiteturas que são construídas por componentes, que por sua vez podem, também, possuir inúmeras outras arquiteturas e subarquiteturas.
Processos de armazenamento são especificados nesta fase.
Até então, não tem- se a possibilidade de representar acesso à base de dados.
Apenas representava- se os agentes e suas conversações.
No caso de haver uma consulta a um banco de dados, deve- se especificar esta funcionalidade na fase de montagem das classes dos agentes, adicionando componentes à sua arquitetura.
Uma funcionalidade interessante apresentada por a ferramenta agentTool é a possibilidade de se armazenar qualquer parte do sistema para futura utilização.
Ou seja podese armazenar:
Arquiteturas, componentes, conversações, agentes, papeis, etc, como apresenta a Figura 52.
No entanto, nota- se que esta funcionalidade apresenta alguns problemas, tanto na segunda versão 1.8.3, quanto em sua última versão, a 2.0 (versão beta, ainda instável).
Um exemplo de um problema que pode- se citar é o fato de quando realiza- se uma ação para armazenar ou recuperar um determinado objeto, a ferramenta, interrompe sua execução, causando a perda das informações não gravadas.
De essa forma, no que diz respeito à utilização da ferramenta agentTool, esta fase da metodologia torna- se prejudicada, já que é nesta fase que, conforme visto anteriormente, o comportamento interno dos agentes é construído, através da definição de suas arquiteturas e da possibilidade de fazer- se uso de arquiteturas já previamente definidas, tais como:
Uma outra questão importante a ser levantada e que não refere- se especificamente apenas à esta fase do desenvolvimento, é que a metodologia MaSE não oferece uma notação gráfica para representar acesso à base de dados.
Ou seja, quando um determinado agente tem de realizar um procedimento de registro, armazenamento ou consulta à uma base de dados, esta base de dados só pode ser representada na forma de classes de agentes, através da adição de componentes específicos.
Talvez, isto deva- se à própria concepção da metodologia, em que tudo é visto como sendo agente.
Isto é, no que se refere a representação, não existe a possibilidade de modelar objetos que não tenham ou não necessitem das características de agentes, por definição.
Entretanto, esta forma de modelagem, talvez, não seja a melhor forma de representação de acessos à bases de dados persistentes.
Portanto, torna- se importante que a notação 15/ linguagem gráfica utilizada tenha condições de especificar módulos de Conjunto de sinais com que se faz essa representação ou designação.
Projeto do Sistema O passo final na metodologia MaSE é implantar os agentes.
Usa- se para isso o Diagrama de Implantação para mostrar o número e a localização dos agentes dentro de o sistema.
O conceito de instanciar agentes das classes de agentes é similar à instanciar objetos de classes de objetos na programação OO.
As caixas tridimensionais representam os agentes, enquanto que as setas representam suas conversações.
Só pode haver uma conversação entre agentes, neste diagrama, se houver uma conversação entre os mesmos agentes no Diagrama de Classes.
Além de isto, caixas com linhas tracejadas indicam agentes sendo executados numa mesma plataforma física.
O sistema deve ser organizado através do Diagrama de Implantação, antes deste ser codificado.
Isto deve- se às diferenças entre 'classes de agentes' e agentes propriamente ditos.
Um agente necessita de informação adicional, tal como:
O hostmane, endereço IP, etc., para atuar num SMA.
Um Diagrama de Implantação também oferece a oportunidade ao desenvolvedor de modularizar o sistema.
Ou seja, agentes podem ser alocados em diferentes computadores e/ ou redes de computadores.
Um elemento que deve ser considerado dentro de o desenvolvimento é a geração automática de código.
O código gerado serve de base para implementação do sistema, aumentando desta forma a produtividade a curto prazo.
O processo de geração de código não faz parte da metodologia MaSE, mas assume- se que este processo deva ocorrer nesta fase de desenvolvimento.
Apenas para fins meramente ilustrativos, apresenta- se a seguir, na Figura 54, alguns trechos de código gerados automaticamente por a ferramenta agentTool.
Gerou- se os códigos fonte dos agentes:
Agente 1 (Figura 54 (a)), Agente 2 (Figura 54 (b)) e uma conversação (Figura 54 (c)).
A geração de código é auxiliada por o framework denominado de agentMom, o qual fornece blocos básicos para a construção/ implementação de agentes, conversações entre agentes e mensagens que são passadas nessas conversações.
Segundo a OMG16, a notação UML é considerada uma das linguagens para modelagem de sistemas orientados a objetos, mais expressivas de todos os tempos.
Através dos diagramas oferecidos por essa linguagem, particularmente por o Diagrama de Implantação, é possível representar sistemas de softwares sob diversas perspectivas de visualização, demonstrando, por exemplo, a arquitetura run-time de processadores, componentes físicos (devices), e de software que rodam no ambiente onde o sistema desenvolvido será utilizado.
É a última descrição física da topologia do sistema, descrevendo a estrutura de hardware e software que executam em cada unidade.
No entanto, fazendo- se uma comparação com a UML, o Diagrama de Implantação na MaSE, em sua notação gráfica, não possui capacidade de representar objetos físicos que podem fazer parte do sistema, tais como:
Uma máquina cliente numa LAN (Local Area Network), uma máquina servidora, uma impressora, um roteador, etc., que juntos compõem toda a arquitetura física do sistema.
Portanto, sugere- se fortemente que uma notação gráfica seja elaborada ou adaptada de linguagens convencionadas, por exemplo a UML, para que seja possível representar funcionalidades levantadas anteriormente.
Cabe salientar que já existem propostas para a extensão do padrão UML para a especificação de protocolos de interação entre agentes e outras noções de sistemas multiagentes.
Esta linguagem, denominada AUML17 (Agent Unified Modelling Language), fornece ferramentas para especificar protocolos de interações entre agentes e representar o comportamento interno de um agente.
É muito importante utilizar metodologias que facilitem o processo de desenvolvimento do software educacional e gerem produtos com qualidade e confiabilidade.
Para tanto, é necessário que se considere modelos de ciclo de vida, métodos de desenvolvimento, técnicas para estimativa de custos, controle de qualidade, documentação e integração de equipes multidisciplinares.
Acredita- se que a partir de a adaptação de resultados da Engenharia de Software aplicados à área de STI, estaremos contribuindo para que se altere o quadro corrente do desenvolvimento dos programas educacionais, o qual ainda apresenta um certo grau de empirismo no desenvolvimento dos programas educacionais.
Muitas decisões nesta área de pesquisa são, ainda, baseadas em experimentos sem metodologia, sem observações mais formais e, basicamente questões intuitivas.
Ainda temos a considerar o fato do projeto de um software educacional implicar numa série de tomadas de decisão que vão desde o aspecto técnico até o pedagógico, implicando numa equipe interdisciplinar que deve trabalhar de forma coordenada.
Logo, a importância de utilizar- se uma metodologia permitirá que as necessidades da equipe sejam melhor dimensionadas e É importante ressaltar que este trabalho é um primeiro passo para uma possível metodologia para o desenvolvimento de STI.
Ou seja, observou- se que a modelagem do ciclo de tutoração pode ser feito com a metodologia MaSE.
De essa forma, uma metodologia completa só pode ser efetivamente desenvolvida se considerarmos a importância de profissionais de outras áreas envolvidas na concepção do software, tais como o projetista, o especialista no domínio e profissionais de educação envolvidos na pesquisa de teorias de aprendizagem, etc..
Inicialmente, tinha- se como hipótese de que a metodologia MaSE poderia ser utilizada para se modelar parte das características dos STI Multiagentes.
Ou seja, alguma das particularidades apresentadas por os STI não poderiam ser modeladas através de MaSE sem alguma alteração ou adaptação.
No entanto, verificou- se que a abordagem que a metodologia oferece para a modelagem de agentes é apropriada para a modelagem do ciclo de tutoração apresentados por os STI multiagentes.
A essência do ciclo de tutoração consiste nas interações entre os agentes.
Interação, por sua vez, traz uma idéia de inter-relação, de comunicação.
De essa forma, o motivo principal por o qual a metodologia MaSE é adequada para a modelagem do ciclo de tutoração é o fato da metodologia apresentar uma maior atenção ao desenvolvimento de processos de comunicação entre agentes, através da adoção do modelo de papéis com suas respectivas tarefas concorrentes e a adoção de diagramas de máquinas de estados finitos como técnica para especificar tarefas e processos de comunicação entre agentes.
Portanto, pode- se dizer que a grande característica que a metodologia MaSE apresenta e, que a torna adequada para modelar as particularidades dos STI multiagentes, é a utilização dos diagramas de máquinas de estados finitos para modelar tarefas concorrentes e conversações entre agentes.
A o final dessa pesquisa, pode- se confirmar que MaSE por ser uma metodologia genérica possibilita ao desenvolvedor explicitar todas as fases do processo de desenvolvimento de um SMA.
Ou seja, desde o levantamento de requisitos até a fase de implantação do sistema, a metodologia apresenta uma ligação clara de uma fase a outra, deixando bem documentado e explicito o que deve ser realizado em cada fase.
Fazendo, assim, com que a continuidade no desenvolvimento seja cuidadosamente clarificada, permitindo, também, um feeadback das etapas anteriores onde o projetista pode verificar possíveis omissões ou erros no projeto.
Isto é facilitado por a ferramenta agentTool.
A maior contribuição deste trabalho, é o fato de dar- se o primeiro passo em direção a um conjunto de pressupostos e requisitos que uma metodologia para o desenvolvimento de STI deve observar.
Visto que, até o presente momento, não se tem conhecimento de alguma proposta completa nesse sentido.
A partir deste estudo verificou- se que não existe a necessidade de se propor extensões para a metodologia MaSE.
Constatou- se que a proposta de MaSE atende às especificidades dos STI multiagentes, pelo menos no que concerne as interações dentro de o contexto do ciclo de tutoração.
Assim, através desta abordagem original e recente, podemos simplificar e interpretar problemas tradicionais no que diz respeito ao processo de modelagem de STI Multiagentes.
Logo, um STI Multiagente pode ser modelado como uma outra aplicação multiagente.
Pois, a parte mais crítica, o ciclo de tutoração parece ficar bem atendida na metodologia MaSE.
Concluímos que essa pesquisa foi, também, de grande utilidade para os objetivos do projeto MASP, sobretudo no que diz respeito às metodologias para o desenvolvimento de SMA.
Através deste trabalho conseguimos obter informações mais detalhada das principais metodologias, suas características, peculiaridades e abordagens.
Limitações e Trabalhos Futuros Uma das limitações encontradas nesta pesquisa, primeiramente foi as várias e sucessivas trocas de ambientes que serviriam como base para a elaboração do estudo de caso.
Inicialmente, tínha- se a intenção, expressa no Plano de Estudos e Pesquisa, de realizar a modelagem do W-MCOE (Web-- Multi Cooperative Environment), a versão Web do ambiente MCOE proposto por.
Entretanto, devido a descontinuidade do projeto, passamos para a modelagem do agente assistente dentro de o contexto do projeto Proograma.
Mas, novamente, substituiu- se o objeto de estudo por verificar- se que, mesmo ainda em desenvolvimento, o trabalho de Andrade seria melhor adequado à nossa pesquisa.
Relacionado a isso, umas das outras limitações está no fato de que o nosso estudo de caso ter sido realizado num contexto específico.
Ou seja, aplicou- se a metodologia MaSE na modelagem de um agente específico numa arquitetura específica.
De essa forma, necessita- se de um estudo maior a ser realizado em outros ambientes e contextos, a fim de verificar a generalidade de a aplicação da metodologia em contextos distintos de ambientes de ensinoaprendizagem.
Assim, o Agente Diagnostico, objeto de estudo, faz parte de uma arquitetura, que por sua vez é composta por outros agentes.
Segundo, apenas o agente semiótico, denominado de Agente Mediador, e a arquitetura de comunicação já foram implementados.
Com relação a o Agente Diagnóstico apenas foram realizados teste de implementação.
Portanto, o trabalho está em desenvolvimento e a consolidação da arquitetura só poderá será vislumbrada após a conclusão de todos os trabalhos.
Isto é, só poderá ser comprovada quando todos os seus componentes estiverem operantes (modelados e implementados).
Desta forma, esta pesquisa torna- se dependente da conclusão do desenvolvimento dos outros trabalhos para ter- se a possibilidade de testar e avaliar a modelagem do Agente Diagnóstico.
É importante destacar a interação ocorrida entre os autores na elaboração do estudo de caso.
Como qualquer interação a elicitação de requisitos e coleta de informações sobre o sistema é um processo complexo.
Entender as necessidades e atender os desejos dos clientes sempre foi colocado como um dos maiores desafios da Engenharia de Software, sem falar em lidar com conhecimento interdisciplinar envolvendo, muitas vezes, aspectos de Ciências Sociais e Ciência Cognitiva.
Algumas considerações sobre limitações da metodologia MaSE e sugestões para o seu aprimoramento, foram levantadas no decorrer de o desenvolvimento do estudo de caso, em cada fase de seu desenvolvimento.
Além disso, como esta pesquisa está altamente vinculada e relacionada á metodologia MaSE, todas as pesquisas relacionadas à metodologia podem ser associadas ao desenvolvimento de STI Multiagentes.
De essa forma, como o desenvolvimento da metodologia MaSE faz parte de um projeto do departamento de Ciência da Computação e Informação da Universidade do Kansas18 em conjunto com o Instituto de Tecnologia da Força Aérea dos Estados Unidos (AFIT -- Air realizadas sobre o desenvolvimento da metodologia MaSE tornem- se, consequentemente, benéficas ao desenvolvimento de STI Multiagentes.
Portanto, pesquisas neste sentido devem ser avaliadas para poder- se dizer se trazem, ou não, avanços ao desenvolvimento de STI Multiagentes.
A o final da redação deste volume, verificou- se que algumas pesquisas estão sendo realizadas em o que concerne à incorporação de funcionalidades para especificar mobilidade na metodologia MaSE.
Como podemos ver no trabalho de, em o qual tenta- se cobrir a lacuna entre as metodologias para Engrenhara de Software Orientadas a Agentes (AOSE Agent-Oriented Software Engineering) onde não se tem especificado as propriedades de agentes moveis.
Segundo, sistemas de agentes dinâmicos estão mostrando um promissor meio de resolver alguns problemas, tais como:
Encontrar serviços e informações na Internet, etc..
Estes sistemas tem mostrado vantagens relacionados à robustez e funcionalidade sobre outras soluções cliente-servidor, tais como:
RPC (Remote Procedure Calls), sockets, etc..
Em o trabalho de Self, este adota a especificação da FIPA, onde agentes dinâmicos devem possuir uma das seguintes propriedades:
Cloning -- é a habilidade de um cliente criar uma outra instância numa mesma ou diferente localização;
Instantiation -- é a habilidade de um agente criar uma instância de uma outra classe de agente ou de ele mesmo;
Mobility -- é a habilidade de um agente mover- se de uma máquina para outra.
Estas três propriedades devem ser o foco de novas pesquisas na IAD, sendo que a propriedade de mobilidade deve receber uma maior atenção.
Uma outra pesquisa que está sendo desenvolvida relaciona- se à integração de ontologias na metodologia MaSE.
Esta pesquisa, desenvolvida por Dileo, estende a metodologia para incluir o uso de ontologias para a especificação do domínio da informação.
Esta extensão permite ao projetista especificar a informação usando objetos da ontologia como parâmetros na conversações dos agentes.
Com isso o projetista pode assegurar- se da funcionalidade do sistema por a verificação de que cada agentes possui a informação necessária para alcançar os objetivos do sistema.
Para usar ontologias para descrever o domínio da informação de um sistema em MaSE, esta pesquisa introduz uma nova fase em o qual o projetista contrói a ontologia do sistema durante a fase de análise de MaSE.
Segundo, determinou- se que esta fase deveria ocorrer depois da fase Aplicando Use Cases.
Desta forma, o projetista utiliza os objetos na a hierarquia de objetivos, use cases e diagramas de seqüência como possíveis conceitos na ontologia.
A ontologia resultante pode ser usada para criar tarefas na fase de refinamento de papeis em MaSE.
Como a metodologia MaSE está associada à ferramenta agentTool, consequentemente, qualquer adaptação/ extensão realizada na metodologia deve ser refletida na ferramenta.
Como dito anteriormente, essa pesquisa tem o objetivo de dar um primeiro passo na elaboração de uma metodologia completa para STI Multiagentes.
Naturalmente, surge a possibilidade de fazer com que a metodologia MaSE seja o centro, o kernel de uma metodologia maior, onde acoplamos em ela outras metodologias e técnicas desenvolvidas para outros assuntos específicos no desenvolvimento de STI, como por exemplo, a modelagem do de essa forma, um conjunto de métodos específicos para auxiliar o desenvolvimento de STI Multiagentes.
