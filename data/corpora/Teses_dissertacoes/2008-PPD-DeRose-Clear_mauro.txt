Pesquisas utilizando virtualização de hardware vêm sendo feitas em diversas áreas dentro de a Ciência da Computação.
A criação de ambientes virtuais com essa tecnologia pode ser implementada utilizando- se poucos recursos computacionais.
Porém, a falta de ferramentas de configuração dificulta a criação de ambientes de larga escala.
Recursos de rede, por exemplo, precisam ser gerenciados e configurados para atender às especificações do ambiente virtual que se deseja criar.
Em a intenção de facilitar esta gerência e reduzir os erros na configuração do ambiente virtual, apresentamos neste trabalho uma arquitetura de gerência de rede de máquinas virtuais.
De entre suas funções encontram- se questões como configuração de isolamento de rede e controle de vazão e latência.
Em a validação, aspectos de rede de um ambiente de emulação de sistemas distribuídos são configurados e uma aplicação é executada nesse ambiente na intenção de avaliar esses aspectos de comunicação.
Palavras-chave: Virtualização.
Gerência de rede.
Ambientes virtuais.
Emulação de sistemas.
Virtualização Gerência de Rede Gerência de Rede de Máquinas Virtuais Avaliação e Resultados Ambiente de Emulação de Sistemas Distribuídos baseado em Virtualização Configuração e Controle de Rede num Ambiente Distribuído Emulado Conclusão Apêndice A ­ Descrição de tipo dos arquivos XML 1 Introdução Com o aumento do poder computacional das máquinas nos últimos anos, pesquisas utilizando tecnologias de virtualização de hardware surgem para explorar esse recurso através da execução de múltiplas máquinas virtuais num mesmo computador.&amp;&amp;&amp;
Dentro desse contexto, a possibilidade de criar ambientes virtuais de larga escala é facilitada.
Porém, a configuração desse tipo de ambiente é difícil por a falta de ferramentas de suporte para atividade como a configuração e gerência de recursos como os de rede.
Questões como isolamento e controle de vazão e latência de rede entre máquinas virtuais são parâmetros que podem ser controlados por um administrador de um ambiente virtual.
Esses aspectos precisam ser configurados em todas as máquinas do ambiente, porém, num ambiente de larga escala, a configuração manual desses parâmetros demandaria muito tempo e também estaria sujeita a erros.
Em este caso, uma ferramenta de configuração dos recursos de rede serviria como auxílio na criação de ambientes baseados em máquinas virtuais, diminuindo o trabalho dos administradores e reduzindo erros de configuração.
A observação de tal necessidade motiva o desenvolvimento deste trabalho que consiste em apresentar uma arquitetura para gerência e configuração de recursos de rede de máquinas virtuais.
Essa arquitetura tem como objetivo agilizar o processo de configuração dos aspectos de rede de ambientes virtualizados.
Ela consiste em elementos de descrição dos ambientes reais e virtuais, módulo de mapeamento de conexões de rede e estrutura de configuração distribuída.
De entre os cenários que podem ser explorados utilizando este contexto, emulação de sistemas distribuídos foi o caso escolhido para validação da arquitetura.
Esse tipo de sistema exige que as conexões entre as máquinas virtuais sejam configuradas de forma a se comportarem de diferentes modos, desde conexões locais de alta velocidade, até conexões de longa distância, com variação das taxas de vazão e latência.
Em este sentido, a arquitetura de gerência de rede de máquinas virtuais auxilia nas configurações também nesse tipo de ambiente, atendendo aos requisitos recebidos do administrador do ambiente virtual.
A criação de um ambiente distribuído com máquinas virtuais é uma alternativa onde com poucos recursos computacionais se pode criar um ambiente de larga escala.
Além disso, é possível explorar questões como o controle de execução de aplicações, já que sistemas de virtualização oferecem nativamente recursos como monitoração e controle de máquinas virtuais.
A gerência dos recursos de rede deste ambiente precisa ser feita com o objetivo de aproximar o seu comportamento ao de ambientes reais.
Questões como disponibilidade de nós e variação de vazão e latência de rede podem alterar a execução de uma aplicação, por isso é importante que estas e outras questões sejam avaliadas na intenção de minimizar seus problemas quando de a execução num ambiente real.
Dentro desse contexto será desenvolvido o principal foco deste trabalho, que apresenta uma arquitetura para configuração e gerência de redes de um ambiente baseado em virtualização.
O principal objetivo dessa arquitetura é configurar as conexões de rede entre máquinas virtuais, previamente instaladas e inicializadas num sistema, de forma a aproximar seu comportamento ao de um ambiente real.
Em o final deste trabalho, componentes de um ambiente distribuído real são instalados e configurados num ambiente de máquinas virtuais na intenção de demonstrar e validar os aspectos de rede gerenciados por a arquitetura proposta.
Para melhor organização deste trabalho apresentam- se, nos dois próximos capítulos, os principais aspectos conceituais sobre virtualização e gerência de rede.
O Capítulo 4 apresenta a descrição e implementação da arquitetura de gerência de rede para a configuração de sistemas distribuídos baseado em máquinas virtuais.
Logo após, no Capítulo 5, é feita a avaliação da arquitetura com a implementação de um ambiente de Grid1 formado por máquinas virtuais.
Questões como isolamento, vazão e latência de rede foram medidos no intuito de demonstrar a efetividade da configuração feita por a arquitetura proposta.
Para finalizar, o Capítulo 6 apresenta as conclusões e as considerações finais deste trabalho.
Grid: O termo refere- se ao conceito de Grade Computacional 2 Virtualização A tecnologia de virtualização é um conceito importante no desenvolvimento deste trabalho.
Em este capítulo será feita a apresentação dos tipos de virtualização e do modelo que será utilizado neste trabalho.
Historicamente a virtualização nasceu nos anos 1960 quando a IBM disponibilizou esse recursos em seus mainframes, de forma a prover o acesso de clientes através de terminais.
Em o mainframe cada terminal tinha a sua máquina virtual de forma independente.
Assim, um único computador servia processamento para múltiplos clientes, dando a impressão para o usuário de estar utilizando uma máquina local real.
Durante os anos 1980 e 1990 a virtualização de hardware praticamente desapareceu, em função de o aumento do poder computacional das estações e a redução de seu custo, ao ponto de não ser mais vantagem a aquisição de um supercomputador para atender estações de trabalho.
Porém, surgiram outras tecnologias de virtualização, de mais alto nível, como as máquinas virtuais Java.
Com o aumento considerável da capacidade de processamento dos computadores nos últimos anos, novas pesquisas surgem para explorar este poder computacional utilizando a virtualização de hardware.
Um computador pode, basicamente, ser ilustrado como camadas dividas em quatro níveis sobrepostos horizontalmente:
Hardware, sistema operacional, bibliotecas e aplicações.
A virtualização é uma camada intermediária que pode surgir em qualquer ponto dessa arquitetura, seja ela de mais alto nível, como as máquinas virtuais Java, ou de um nível mais baixo, como os virtualizadores de hardware.
Em ambos os modelos a função principal é a abstração da camada inferior.
Por exemplo, um programa Java executa sobre a máquina virtual independentemente do Sistema Operacional que está executando sobre o hardware.
Para que se possam demonstrar algumas diferenças entre os níveis de aplicação da virtualização, nas próximas seções serão apresentadas características específicas de funcionamento de diferentes modelos de virtualização.
O conceito de virtualização no nível de hardware vem sendo utilizado nos últimos anos na intenção de melhor aproveitar os recursos computacionais oferecidos por os computadores.
A virtualização do nível de hardware atua, basicamente, oferecendo suporte a execução de mais de um sistema operacional num mesmo computador.
Ela é responsável por gerenciar os recursos físicos e os compartilhar com as máquinas virtuais.
A seguir é feita a apresentação do modelo de virtualização VMM.
VMM: Monitores de Máquinas Virtuais Consideremos um ambiente de produção onde desenvolvedores precisam testar novas funcionalidades de um sistema.
Em um ambiente convencional usa- se um computador para o desenvolvimento e outro, normalmente de menor capacidade, para os testes.
Uma alternativa para este caso seria a utilização dos recursos de um Monitor de Máquinas Virtuais (VMM), que nos possibilita a execução de duas máquinas virtuais num mesmo computador de forma completamente independente.
Assim, pode- se ter uma máquina virtual como ambiente de desenvolvimento e outra como ambiente de testes.
Basicamente um computador opera em modo user (com restritos privilégios para execução de instruções) e em modo supervisor (com total privilégio de execução de instruções).
Em um ambiente de Máquinas Virtuais, o VMM opera em modo supervisor e controla todos os recursos físicos do hardware, compartilhando- os com as VMs que executam em modo user.
O VMM escalona as Máquinas Virtuais de forma semelhante ao escalonamento de processos em Sistemas Operacionais e aloca ciclos de processa-mento para cada uma de elas.
Como as Máquinas Virtuais executam em modo user, nenhuma instrução executada por um Sistema Operacional convidado (executado numa máquina virtual) acessa diretamente o hardware.
O VMM é o responsável por a execução de instruções de hardware:
Ele intercepta e trata essas instruções para garantir a segurança e a integridade do ambiente.
Assim, por exemplo, se uma Máquina Virtual recebe do seu Sistema Operacional a instrução de halt, o VMM irá simplesmente desativar a Máquina Virtual que originou a instrução e continuará a execução das demais VMs.
Essa intervenção do VMM é a causa do overhead desse tipo de sistema.
Mas podemos realçar algumas vantagens da virtualização como:·
Segurança: Execução de ambientes com níveis de segurança diferentes em Máquinas Virtuais diferentes;·
Confiabilidade: A falha de um software numa Máquina Virtual não altera o funcionamento das demais;·
Custo: É possível a redução de custos implementando pequenos servidores num mesmo computador;·
Balanceamento de carga:
Pode- se migrar Máquinas Virtuais para computadores de poder computacional mais elevado.
Pode- se visualizar, na Figura 1, um exemplo de como a virtualização atua num ambiente com várias Máquinas Virtuais.
Sobre a camada mais inferior, que se refere ao hardware físico, encontra- se o Monitor de Máquinas Virtuais que nos oferece suporte à execução de múltiplas Máquinas Virtuais, cada uma com seu Sistema Operacional, compartilhando os recursos físicos de um mesmo computador.
Técnicas de escalonamento, como time-sharing, aplicadas em Sistemas operacionais são também utilizadas por os VMMs para o compartilhamento de recursos hardware entre as Máquinas Virtuais.
Desta forma cabe uma revisão da virtualização de recursos de hardware por Monitores de Máquinas Virtuais, que é feita a seguir.
Virtualização de Recursos Em os mainframes da década de 1960 o sistema de E/ S (Entrada e Saída) era baseado numa arquitetura onde os dispositivos eram acessados por diferentes canais por o processador.
Assim, as Máquinas Virtuais podiam fazer E/ S diretamente no dispositivo sem causar danos ao ambiente e, por isso, o overhead desse tipo de operação era baixo.
Atualmente, a arquitetura dos computadores evoluiu e um grande conjunto de dispositivos pode ser associado a eles.
Por isso se tornou mais complicado manter a segurança na virtualização, sendo necessário que o VMM gerencie esses diferentes dispositivos causando, assim, um overhead na performance.
Além disso, alguns dispositivos como placas gráficas e interfaces de rede de alta velocidade necessitam de alto desempenho do ambiente, causando situações críticas na virtualização como a necessidade de utilização de novas técnicas de escalonamento do processador para suprir essa demanda.
Mesmo em ambiente convencionais a utilização de recursos físicos que dependem de E/ S é sempre causa de overhead no desempenho do sistema.
Em um ambiente virtualizado o problema relacionado ao desempenho se agrava porque a camada intermediária entre as instruções e os dispositivos trata questões de segurança e consistência para garantir, por exemplo, o isolamento das Máquinas Virtuais.
Esta camada, chamada de VMM, é responsável por verificar a integridade das instruções de hardware, executálas e devolver uma resposta para a Máquina Virtual.
O seu funcionamento varia de acordo com o tipo de dispositivo podendo, em alguns casos, não afetar o desempenho significativamente.
Pode- se tomar como exemplo o acesso de Máquinas Virtuais à memória, onde cada máquina virtual recebe uma faixa de endereços e a permissão de leitura e escrita.
Em este caso, o VMM precisa somente garantir que não haverá interrupções fora de a faixa de endereços delegada a cada Máquina Virtual.
Em muitos modelos de dispositivos é preciso um gerenciamento bem restrito das requisições.
O caso dos dispositivos de rede possui algumas características particulares de virtualização que serão abordadas no Capítulo 4.
Conhecido da literatura como Operating system--, este modelo de virtualização é utilizado em ambientes onde o kernel da máquina real e da máquina virtual é o mesmo.
Um pouco diferente do modelo de virtualização anterior, onde era preciso ser feita a instalação de todo um sistema com kernel modificado na Máquina Virtual, neste modelo é feito apenas o isolamento dos processos, mantendo a instalação do sistema idêntico em todas as máquinas virtuais.
Dependendo do virtualizador utilizado, ele pode oferecer diferentes recursos de isolamento.
Em a Tabela 11 pode- se perceber que sistemas como OpenVZ e Virtuozzo oferecem total isolamento para as instâncias de Máquinas Virtuais.
1-Isolamento do sistema de arquivos 2-Cota de Disco 3-Limitação de E/ S 4-Limitação de memória 5-Cota de CPU 6-Isolamento de Rede 7 Migração e checkpointing Em este conceito de virtualização o principal objetivo é oferecer recursos, como sistema operacional, sistema de arquivos, arquivos de configuração e bibliotecas, de forma isolada ­ se diferenciando do modelo anterior apenas quanto a as Máquinas Virtuais (máquinas convidadas), que utilizam o mesmo kernel da máquina hospedeira.
O conceito de virtualização no nível de linguagem de programação vem sendo, nos últimos anos, fortemente introduzido no mercado com as Máquinas Virtuais Java (JVM, do inglês Java Virtual Machine).
O principal objetivo deste modelo de virtualização é oferecer uma plataforma de execução para aplicações, de forma que a arquitetura do hardware e o sistema operacional não tenham influência sobre estas, ou seja, um ambiente para aplicações multiplataforma.
Este modelo de virtualização introduz uma camada de abstração entre a aplicação e o sistema operacional.
Essa camada é responsável por interpretar e invocar as chamadas de sistema feitas por a aplicação.
Assim, independentemente do sistema operacional que esteja sob a esta camada de virtualização, a aplicação será sempre a mesma.
A única mudança será da própria camada de abstração, que deverá se adaptar de acordo com o sistema operacional.
Assim como nos outros modelos de virtualização, a camada de abstração causa overhead na execução da aplicação, no entanto, oferece o recurso de portabilidade da aplicação para diferentes sistemas operacionais e arquiteturas de hardware.
Além de a máquina virtual Java existem no mercado outros virtualizadores de nível de linguagem de programação como o.
Net CLI.
Em a maioria das aplicações, a utilização de bibliotecas de programação permite a adaptação de um programa a um determinado ambiente abstraindo alguns aspectos es-pecíficos.
Essa abstração é oferecida através de interfaces de programação, também conhecida na literatura como API (Application Programming Interface).
A virtualização, no caso de bibliotecas, não acontece como nos outros níveis onde há isolamento de processos ou compartilhamento de recursos.
Em este caso a vantagem está na possibilidade de desenvolver uma aplicação que, ao ser portada para outros ambientes, precisar ser apenas recompilada com bibliotecas específicas, não sendo necessária a modificação do seu código fonte.
Isso pode ser um fator relevante quando se trata de aplicações de grande porte que possuem códigos extensos.
A virtualização é uma tecnologia que pode ser aplicadas em diferentes níveis de sistemas de computação.
Através de exemplos comuns no mercado como as Máquinas Virtuais Java, pôde- se apresentar como se aplicam os conceitos de virtualização.
No entanto, a virtualização de hardware teve uma maior ênfase neste capítulo, pois, seus conceitos e funcionalidades serão discutidos e utilizados no desenvolvimento deste trabalho.
Em o próximo capítulo, ainda sobre os conceitos tecnológicos aplicados a este trabalho, serão discutidos e apresentados conceitos e características de gerência de rede.
Aspectos como funcionalidades e ambientes de aplicação concluem o embasamento teórico deste trabalho.
Em os últimos anos o tamanho e a complexidade das redes de computadores vêm crescendo junto com a demanda de comunicação exigida por sistemas de computação.
Sistemas on-line são uma realidade hoje em dia e que em muitos casos precisam de uma comunicação estável e, principalmente, segura.
Em uma rede com milhares de componentes de comunicação, um defeito ou utilização incorreta de um desses componentes pode causar uma falha em todo o sistema de comunicação.
As principais funções da Gerência de Rede são manter estáveis condições de funcionamento, monitorar- las e controlar seus componentes de forma a maximizar seu desempenho.
Com o passar dos anos, os conceitos de gerência de rede começaram a ser aplicados também em componentes de software como, por exemplo, configuração de serviços como Http, DNS, FTP.
Em este capítulo é feito um breve estudo sobre o que é Gerência de Redes e quais suas principais aplicações.
São também apresentados dois protocolos de Gerência de Rede utilizados atualmente;
Ainda, a aplicação dos conceitos de gerência de rede para a configuração de sistemas e, ao final serão apresentadas algumas considerações relevantes deste capítulo para o desenvolvimento deste trabalho.
Embora os conceitos de Gerência de Rede tenham sido desenvolvidos para componentes físicos, com o passar do tempo e de acordo com as necessidades de gerência seus conceitos foram aplicados também para a gerência de sistemas.
A Figura 2 ilustra os componentes envolvidos neste processo.
Essa arquitetura de gerência pode ser facilmente aplicada em diversos contextos, como por exemplo, para gerência de componentes de software.
Em este caso, é preciso apenas implementar agentes específicos que atuem nos objetos gerenciáveis.
A forma com que os gerentes manipulam as informações acontece da mesma maneira que na gerência de componentes de rede e pode variar dependendo do protocolo de gerência que se está utilizando.
Atualmente os protocolos SNMP (Simple Network Management Protocol) e WBEM (Web-Base Enterprise Management) são utilizados tanto para gerência de dispositivos quanto para a gerência de componentes de software.
Em a próxima seção será feita a apresentação desses dois protocolos.
WBEM -- Web--Based Enterprise Management WBEM é um conjunto de tecnologias de gerência e de recursos comuns da Internet que tem como objetivo controlar recursos de ambientes distribuídos.
O WBEM permite a criação de componentes de gerência de forma rápida e objetiva facilitando a administração de diversos tipos de sistemas.
A arquitetura do sistema de gerência proposto por o WBEM oferece a possibilidade de interação remota através do protocolo de comunicação Http (HyperText Transfer Protocol), comum em comunicações via Internet.
Através deste recurso pode- se definir um cliente (ou gerenciador) capaz de se comunicar com um sistema gerenciável através de uma rede simples com suporte a comunicação via Http.
A Figura 3 ilustra a arquitetura do WBEM.
De o lado do cliente (ou gerente) o sistema recebe uma descrição CIM-XML, protocolo de comunicação utilizado por o WBEM.
Essa descrição é submetida ao servidor através do protocolo Http.
O servidor interpreta a descrição e consulta a base mantida por o Gerenciador de Objetos CIM (Common Information Model).
Este componente é responsável por manter uma base de informações dos objetos gerenciáveis presentes no servidor.
Essas informações podem ser lidas diretamente desta base ou obtidas em tempo de execução através dos provedores.
Os provedores são responsáveis por ler e escrever informações nos recursos do servidor sejam estes softwares ou hardwares.
Basicamente, o cliente pode executar três instruções com relação a os objetos hospedados no servidor (dependendo do nível de segurança):
Criar, modificar ou excluir um objeto.
A única intervenção por parte de o servidor ao cliente são os avisos de modificações no sistema.
A gerência remota oferecida por o WBEM é implementada através de web services.
Este modelo de implementação possibilita a criação de sistemas on-line utilizando conceitos comuns da web como, a linguagem XML e o protocolo Http.
Através desta tecnologia, a integração da gerência oferecida por o WBEM com outros sistemas é facilitada e possibilita maior produtividade.
Embora o WBEM seja uma tendência no mercado de gerência de ambientes, ainda existem resistências com relação a as tecnologias aplicadas no seu desenvolvimento.
Em a próxima seção é apresentado um protocolo de gerência de ampla utilização no mercado e ao final, será feito um breve comparativo entre os dois modelos de gerência.
SNMP -- Simple Network Management Protocol O SNMP foi implementado inicialmente para gerência de redes de computadores.
No entanto, sua flexibilidade permitiu sua aplicação em diferentes ambientes, possibilitando a gerências de hardwares e softwares.
A estrutura deste protocolo é baseada em gerentes e agentes, que se comunicam através de um acesso direto.
O objeto a ser gerenciado é descrito numa base de informações que no SNMP é chamada de MIB (Management Information Base).
Essa estrutura contém informações sobre os objetos e também sobre os agentes.
A MIB tem a estrutura de árvore e pode ser dividida em sub-árvores, cada uma para um tipo de gerenciamento.
Em essa estrutura, cada fabricante de produtos de rede possui uma ramificação descrevendo os objetos utilizados na gerência de seus produtos.
A posição de um determinado objeto na árvore é determinada por uma seqüência de números, identificando os nós da árvore.
A identificação, denominada OID (Object IDentifier), é dividia por pontos e apresentada como x_ y_ z.
A flexibilidade do protocolo de gerência SNMP está na possibilidade de definição de novos objetos.
Junto a estes objetos é preciso a implementação de um agente.
Em este caso, o agente pode fazer gerência tanto de elementos de hardware quanto de software.
Outro ponto relevante na utilização do protocolo SNMP é que se podem criar estruturas com um gerente que controla diversos elementos, ou ainda, um mesmo elemento pode ser gerenciado por vários gerentes (NxN).
A Figura 5 apresenta uma aplicação genérica do protocolo SNMP onde um gerente controla diferentes tipos de objetos.
Embora protocolos de gerência de rede como o WBEM proponham a utilização de tecnologias mais atuais de comunicação e integração com sistemas, atualmente, no mercado, o protocolo de gerência SNMP é encontrado com maior freqüência.
Sua simplicidade de implementação facilita sua aplicação em sistemas embarcados o tornando um padrão em equipamentos como roteadores, switches, ADSL modems, entre outros.
É eminente a utilização de recursos computacionais em diversas áreas, tanto na indústria, quanto no comércio e na academia.
A monitoração e controle desses recursos computacionais são feitas por protocolos de gerência como os apresentados neste capítulo.
Os dois protocolos apresentados compartilham o mesmo objetivo:
Gerenciar recursos computacionais.
No entanto, o que os diferência é a forma de implementação que torna um ou outro melhor aplicável a determinados ambientes.
Máquinas Virtuais, suas interfaces de rede e demais recursos, podem ser gerenciados com o auxílio desses protocolos.
Esses dois temas, virtualização e gerência de recursos, impulsionam o desenvolvimento deste trabalho que visa utilizar os recursos da virtualização de hardware para criação de ambientes virtuais.
Tendo como principal foco os aspectos de rede dos ambientes, o próximo capítulo apresenta uma arquitetura para gerência desses recursos.
Em o desenvolvimento deste trabalho o protocolo SNMP foi escolhido para a tarefa de gerência.
Esta escolha foi feita a partir de a comparação dos dois protocolos (WBEM e SNMP) de forma que o SNMP apresenta maior facilidade de integração com o trabalho e, também, por o fato de ser atualmente um padrão para gerência em diversos tipos de sistemas.
Em os capítulos anteriores apresentaram- se as tecnologias utilizadas neste trabalho, que tem como contexto a proposta de utilizar a virtualização de hardware para criação de ambientes virtuais.
Essa proposta surge como uma alternativa no intuito de melhor utilizar os recursos computacionais e prover um ambiente controlado para, por exemplo, criação de ambientes para avaliação de aplicações distribuídas.
Em este capítulo será apresentada uma arquitetura para configuração e gerência dos recursos de rede de ambientes virtualizados.
Questões como mapeamento de conexões, o método de gerência utilizado para configuração dos recursos de rede e as ferramentas utilizadas na intenção de aproximar o comportamento de rede dos ambientes reais e virtuais serão apresentados e discutidos.
Em o primeiro momento do capítulo discutem- se os elementos da arquitetura de gerência da rede de máquinas virtuais, organizada em três níveis.
Logo após são apresentados os componentes envolvidos na comunicação de rede em máquinas virtuais Xen.
Essas duas seções servirão como base de integração da arquitetura de gerência de rede para máquinas virtuais baseadas em Xen.
Ainda, será feita uma análise sobre a integração da arquitetura com outros sistemas de virtualização.
Com o objetivo de configurar a rede de um ambiente de máquinas virtuais, desenvolveu- se uma arquitetura de gerência capaz automatizar este processo.
Esta arquitetura foi dividida em três níveis, de forma a facilitar a apresentação de seus componentes.
A Figura 6 ilustra a interação entre estes níveis, de forma que é possível identificar, no nível um, dois componentes de descrição utilizados como entrada da arquitetura.
Abaixo, no nível dois, encontra- se o módulo de gerência de rede, e no nível mais abaixo na figura as máquinas do ambiente.
Essas máquinas devem ser previamente instaladas com um sistema virtualizador e com suporte a gerência de recursos via SNMP.
Virtuais. A) Componentes de Entrada da Arquitetura Os dois componentes de descrição, representados no nível um da figura, são arquivos XML (eXtensible Markup Language).
O primeiro descreve o ambiente real apresentando informações como características de rede e conexões entre as máquinas físicas e quais máquinas virtuais cada uma hospeda.
O segundo arquivo, de descrição do ambiente virtual, apresenta a estrutura de rede que se deseja configurar entre as máquinas virtuais.
A estrutura do arquivo que descreve o ambiente físico (ou real) é organizada de forma que se possa representar conjuntos de máquinas reais divididas em grupos, chamados de SubNets.
As máquinas destes grupos são conectadas entre si e a um determinado Router por meio de um NetworkLink.
Outras informações relevantes para gerência de rede, a cerca de as máquinas virtuais, também são informados nesse arquivo:
Número de interfaces de rede e como elas são identificadas por o sistema de virtualização.
O arquivo que descreve o ambiente virtual é organizado de forma que se possa representar a estrutura de uma rede de computadores, neste caso formada por máquinas virtuais.
Em ele são descritas SubNets de máquinas, conectadas a um Router por um NetworkLink ­ que, por sua vez, possui informações referentes a vazão e a latência com que a SubNet irá se comunicar com o seu referente Router.
Cada SubNet descrita no arquivo pode ter N máquinas que são identificadas por o nome.
Além disso, cada uma das máquinas pode ter N interfaces de rede que são identificadas por o endereço MAC.
O nome da máquina e o endereço MAC das interfaces são utilizados para cruzar informações com o arquivo de descrição do ambiente real.
O cruzamento dessas informações completa a seqüencia de dados utilizados para criação do ambiente virtual.
A Figura 8 ilustra a estrutura do arquivo XML referente a descrição do ambiente virtual que se deseja configurar.
Em o Apêndice A é apresentado o modelo DTD (Document Type Definitions) de descrição do arquivo junto com um exemplo de construção de uma descrição neste formato.
Por fim, esses dois arquivos são utilizados como entrada para a camada intermediária da arquitetura de gerência, o Módulo de Gerência de Rede, ilustrado na Figura 6.
B) Módulo de Gerência de Rede O Módulo de Gerência de Rede é uma aplicação desenvolvida em Java que tem por principal objetivo mapear as informações descritas nos arquivos de entrada e configurar um ambiente baseado em máquinas virtuais.
O primeiro procedimento deste nível da arquitetura é carregar os arquivos de configuração e validar os dados de acordo com o arquivo de descrição de tipo de documento (DTD).
Em o Apêndice A foram descritos dois exemplos de arquivos XML, um com a descrição de um ambiente real e outro com a descrição de um ambiente virtual.
O primeiro arquivo lido é o de descrição do ambiente real.
O módulo cria o objeto da classe RealNetwork e faz a leitura dos elementos do próximo nível do arquivo de descrição.
Em este caso, o módulo cria o objeto da classe NetworkLink e o armazena numa lista como atributo da classe RealNetwork relacionada.
Esse procedimento se repete para todos os tipos de classes e para todos os níveis da estrutura descrita no arquivo, até que todos os elementos e suas informações sejam carregados na estrutura de objetos do módulo.
MAC para que se complete as informações de rede referentes ao ambiente virtual que se deseja criar.
Com isso, o Módulo de Gerência de Rede de Máquinas Virtuais tem a visão da estrutura do ambiente de dois diferentes pontos:
De o ambiente real, com informações de máquinas e redes reais;
E do ambiente virtual que se deseja criar com as máquinas virtuais.
A partir de essas informações o módulo gera um script de configuração, que é armazenado em cada um dos objetos que representam as máquinas reais do ambiente, RealMachine.
Esse script possui instruções referentes a configurações de rede, como regras de tráfego e controle de vazão e latência entre as interfaces de rede das máquinas virtuais.
No entanto, a construção desse script ­ utilizado para configurar o Monitor de Máquinas Virtuais -- depende das ferramentas de controle de rede disponíveis.
Já as informações utilizadas para a configurações das máquinas virtuais são extraídas do arquivo de definição do ambiente virtual.
Após os scripts de configuração das máquinas reais e as informações das máquinas virtuais estarem completas é possível fazer a configuração do ambiente.
Em este trabalho utilizam- se os conceitos de gerência de rede baseados no protocolo SNMP, apresentado no Capítulo 3, Seção 3.2.2.
Em sistemas paravirtualizados, uma máquina virtual chamada de domínio privilegiado, identificado na Figura 6 como dom0, tem acesso a todos os recursos de hardware e de softwares presentes, como apresentado no Capítulo 2.
Sendo assim, a arquitetura apresentada neste trabalho interage apenas com o serviço SNMP presente neste domínio privilegiado para configurar o ambiente.
Em a Figura 6 pode- se perceber essa interação entre os dois níveis inferiores da arquitetura.
Para configurar as máquinas virtuais e seus componentes de rede através do SNMP uma MIB (Management Information Base) com suporte a gerência dos recursos virtuais deve ser instalada.
A MIB utilizada na implementação deste trabalho foi desenvolvida em paralelo, dentro de o grupo de pesquisa ao qual este trabalho também faz parte.
Apresenta a vMIB, que descreve os componentes físicos e virtuais de um sistema paravirtualizado que podem ser monitorados e/ ou modificados.
Os componentes das máquinas virtuais gerenciados por a vMIB utilizados neste trabalho são as interfaces de rede das máquinas virtuais.
Através deste recurso pôde- se fazer o controle de atributos como endereço de rede, definições de máscara para formação de sub-redes de máquinas, definições de rotas de rede, de entre outras configurações pertinentes à comunicação entre máquinas virtuais.
Assim, o módulo de gerência modifica as informações dos objetos referentes as interfaces de rede das máquinas virtuais de forma direta, ou seja, mapeia a configuração tal qual foi lido do arquivo de descrição do ambiente virtual.
Após a configuração das interfaces das máquinas virtuais a rede do ambiente virtual está parcialmente configurada, porém, ainda faltam definições como controle de tráfego, vazão e latência.
Essas configurações podem ser feitas de diferentes maneiras, dependendo do sistema paravirtualizador utilizado.
Para o módulo de gerência a diferença está na geração dos scripts de configuração, que são submetidos às máquinas reais do ambiente.
Em a próxima seção apresentam- se as ferramentas e os componentes de rede no sistema de paravirtualização Xen.
Após, apresenta- se a integração do Módulo de Gerência de Rede com este sistema de paravirtulização.
O Monitor de Máquinas Virtuais Xen é um projeto desenvolvido por a Universidade de Cambridge, amplamente utilizado no meio acadêmico por ser distribuído livremente.
Seguindo o modelo de virtualização de hardware, apresentado na Seção 2.2, o Xen é uma camada de software localizada entre o hardware e o sistema operacional.
Em a inicialização do sistema uma máquina virtual com acesso privilegiado aos componentes de software e hardware, chamada de dom0, é criada para oferecer suporte a inicialização de outras máquinas virtuais, com menor privilégio de execução, chamadas domUs.
Cada domU possui recursos virtuais de hardware como memória, CPU, disco e rede.
Esses componentes são disponibilizados isoladamente a cada domU para que se possa executar um sistema operacional na máquinas virtuais de forma independente.
Ou seja, o sistema operacional executa como se numa máquina sem virtualização e sem interferir na execução das outras máquinas virtuais.
O suporte a comunicação de rede oferecida às máquinas virtuais por o Xen é composta de um conjunto de elementos reais e virtuais.
As interfaces de rede virtuais, responsáveis por a comunicação das máquinas virtuais, são componentes de software, para a rede, no caso de o buffer de envio, ou enviados para a aplicação da determinada máquina virtual, no caso de o buffer de recebimento.
O dom0 implementa também um componentes de software chamado switch virtual, que é encarregado de encaminhar pacotes entre as interfaces de rede virtuais.
Em este switch também estão conectadas as interfaces de rede reais, possibilitando a comunicação remota das máquinas virtuais hospedadas num determinado host.
A função do switch é encaminhar os pacotes sob demanda às outras interfaces virtuais, caso a comunicação seja entre máquinas virtuais;
Ou encaminhar os pacotes à interface de rede real.
Este encaminhamento segue um conjunto de regras, especificadas por o iptables, no dom0.
Esses componentes garantem a comunicação de rede entre máquinas virtuais localizadas num mesmo computador ou em computadores remotos.
A Figura 10 ilustra os componentes envolvidos na comunicação de rede do Xen.
Com base nos conhecimento da estrutura de comunicação do Xen pode- se, então, configurar os elementos responsáveis por definir regras de comunicação como isolamento, vazão e latência de rede entre máquinas virtuais.
Como mencionado na Seção ao sistema paravirtualizador e às máquinas utilizadas para criação do ambiente de emu-lação de sistemas distribuídos.
Em esta seção será apresentada a integração do Módulo de Gerência de Rede com o sistema de paravirtualização Xen, instalado num conjunto de máquinas conectadas por uma rede.
Seguindo a arquitetura proposta neste capítulo, após as etapas de leitura dos arquivos de configuração e do mapeamento das informações referentes as máquinas virtuais é feita então a configuração dos domínios privilegiados de cada uma das máquinas reais, no Xen chamados de dom0.
Este processo é feito com a submissão dos scripts de configuração gerados nos objetos do módulo referentes a cada uma das máquinas reais do ambiente, através de um agente SNMP, que recebe o script e executa as instruções no dom0 do host.
O script de configuração é dividido em três partes:
Configuração de regras de tráfego, definição de vazão de rede e definição de latência de rede entre as máquinas virtuais.
Ambos os três controles são feitos na camada de rede da pilha do protocolo TCP/ IP.
Além disso, as configurações são replicadas em todas as máquinas reais, garantindo os requisitos de isolamento e controle de tráfegos feitos no arquivo de descrição do ambiente virtual, independentemente da localização das máquinas virtuais.
Ou seja, embora máquinas de sub-redes diferentes estejam hospedadas numa mesma máquina real, o controle feito no domínio privilegiado garantirá que essas máquinas não se comuniquem através da rede.
Para exemplificar melhor esta situação supõem- se uma máquina real que hospeda duas máquinas virtuais de sub-redes diferentes, onde o objetivo do controle é o isolamento de rede entre as máquinas.
Para este caso, defini- se então duas regras aplicadas na tabela de encaminhamento de pacotes do iptables do domínio privilegiado da máquina, como as apresentadas na Tabela 2.
A primeira regra veta o encaminhamento de pacotes que tem como origem a rede 192.168.1.0/24 e como destino a rede 192.168.2.0/24.
A segunda regra veta o encaminhamento de pacotes no sentido inverso.
As definições de vazão e latência de rede também são configuradas de forma a limitar a comunicação entre sub-redes de máquinas.
Assim, através do comando tc (traffic simular o controle de vazão e latência da rede.
Para exemplificar como são feitas essas configurações, supõem- se o mesmo ambiente proposto para o isolamento de rede apresentado anteriormente.
Após o isolamento, feito utilizando as regras do iptables, deseja- se definir uma vazão de 5M Bit/ s e 20ms de latência entre as duas sub-redes.
Para a implementação deste problema, o comando tc cria um buffer onde são armazenados os pacotes que serão liberados na rede, novamente, de acordo com um tempo de espera (atraso ou latência).
Este controle é feito por o módulo NetEm.
A simulação de vazão é feita por o módulo TBF e é também controlado através do comando tc.
O módulo intercepta os pacotes e adiciona, no final, um &quot;conteúdo virtual», O que irá definir a vazão com que os pacotes serão transmitidos.
Este conteúdo é nulo e é descartado por o sistema que irá receber o pacote.
O calculo do tamanho deste &quot;conteúdo virtual «é feito por o próprio modulo que implementa este controle, de forma que o usuário apenas informa a capacidade total do link e a vazão que se deseja limitar.
A o final da replicação dessas configurações em todas as máquinas reais, a rede do ambiente baseado em máquinas virtuais está pronta para comunicar de acordo com as configurações passadas nos arquivos de descrição do ambiente.
A arquitetura de gerência de rede proposta neste capítulo foi modelada para suportar sua implementação também em outros sistemas de virtualização, que não o Xen.
Em sistemas baseados em Linux, e que seguem o modelo de paravirtualização ­ onde uma máquina virtual privilegiada gerência as demais máquinas virtuais, a arquitetura poderá se adaptar com a modificação de pequenas funções, como detalhes referentes aos aspectos de rede entre os sistemas de virtualização.
Isso porque os aspectos de isolamento de rede e controle de vazão e latência são implementados por ferramentas comuns do Linux, portanto não precisam ser modificadas.
A principal mudança estaria na necessidade do desenvolvimento de uma agente SNMP para gerência dos recursos de rede das máquinas virtuais.
De entre os sistemas de virtualização baseados em Linux pode- se citar kvm, OpenVZ, Virtuozzo e User- Mode Linux.
Por outro lado sistemas de virtualização não baseados em Linux precisariam de adaptação de toda a gerência dos recursos de rede para controle de vazão, latência e isolamento.
Sistemas como VMWare e Microsoft Virtual Server também oferecem características de virtualização ­ como isolamento de VMs e compartilhamento de recursos ­ porém possuem ferramentas de controle de rede pertinentes ao sistemas operacional ou, em alguns casos, específicas, como a ferramenta de gerência centralizada para o VMWare.
Este capítulo apresentou uma proposta de arquitetura de configuração de rede para a criação de ambientes distribuídos baseados em máquinas virtuais.
A arquitetura tem como entrada dois arquivos XML, de descrição do ambiente real, e das definições de rede do ambiente virtual que se deseja criar.
O Módulo de Gerência de Rede faz a leitura desses arquivos e mapeia a configuração no ambiente através de um protocolo de gerência de rede.
A o final do processo o conjunto de máquinas virtuais deverá se comportar assim como um ambiente de máquinas reais conectadas entre si.
Para avaliar a arquitetura e a efetividade da configuração proposta, um framework de criação de ambientes distribuídos utiliza os recursos da arquitetura para configurar a rede de um ambiente.
Em ele são feitos testes, através da execução de uma aplicação distribuída real, na intenção de avaliar a configuração proposta por a arquitetura.
A especificação e os resultados dos testes são apresentados no próximo capítulo.
Este capítulo apresenta a avaliação da arquitetura de gerência de rede de máquinas virtuais em dois momentos.
Em o primeiro, serão feitos testes para avaliar a efetividade de controle de vazão e latência de rede, feitos por as ferramentas apresentadas na seção num contexto onde, além de a gerência de rede, são feitos procedimento de criação e configuração de ambientes distribuídos para avaliação de aplicações.
Em este contexto, a arquitetura é utilizada para configurar as conexões de rede de um ambiente de Grid na intenção de isolar conjuntos de máquinas virtuais e simular atrasos na comunicação entre elas.
Para demonstrar a efetividade do controle de largura de banda e a perda de desempenho que as ferramentas causam na comunicação entre máquinas virtuais, criou- se um conjunto de testes, a partir de os quais se conseguiu obter resultados para avaliação da abordagem.
As máquinas reais utilizadas para os testes são cada uma um Pentium 4 2.8 GHz com 1 MB de cache e 2.5 GB de RAM.
As máquinas são conectadas entre si por uma rede Fast Ethernet, tem Xen VMM 3.
1 e o dom0 utiliza 328 MB da memória disponível por a máquina.
Em ambos os testes, de vazão e latência, a configuração foi feita nas interfaces virtuais, localizadas no nível privilegiado da virtualização de hardware, relacionadas às interfaces de suas respectivas máquinas virtuais.
Em os testes, o controle de largura de banda foi feito com a ferramenta TBF (Token Bucket Filter) usando o comando tc (Linux Traffic Control).
Um arquivo de 300 MB foi transferido através do protocolo SCP (Secure Copy Protocol) em dois cenários:
Em a Figura 11 é apresentado o gráfico plotado com os resultados da transmissão do arquivo em diferentes larguras de banda, configuradas com as ferramentas apresentadas na seção 4.3.
Foram criados dez casos onde a largura de banda é acrescida em 100% em relação a o caso anterior, começando em 256 KBit/ s até 10 MBit/ s.
A diagonal principal demonstra o valor de banda configurado e as linhas pontilhadas apresentam os valores obtidos na transferência do arquivo para ambos os testes ­ comunicação local e remota.
A tabela 3 apresenta as médias obtidas na transferência do arquivo junto com o desvio padrão através de 32 amostras coletadas durante a transmissão do arquivo.
A análise do gráfico permite- nos concluir que a perda de desempenho na comunicação de rede acentua conforme a largura de banda vai aumentando.
Em um ambiente distribuído, menores larguras de banda são mais comuns visto que, hoje em dia, o meio mais comum de comunicação entre sites remotos é a Internet, não havendo então uma rede exclusiva para a execução de aplicações.
Em este caso, os experimentos demonstram valores satisfatórios para a proposta de utilizar ferramentas de controle de rede e virtualização de hardware na emulação de sistemas distribuídos.
De uma mesma maneira, foram feitos testes para avaliar a latência na rede entre os dois casos (comunicação local e remota).
A configuração deste recurso foi feita utilizando a ferramenta NetEm (Network Emulator) com o comando tc (Linux Traffic Control).
Para mensurar os tempos de latência foram transferidos pacotes ICMP nos dois cenários (máquinas virtuais locais e remotas).
Foram criados dez casos onde a latência foi aumentada em 10ms com relação a o caso anterior, variando entre 10ms até 100ms. A partir desse valor a latência foi aumentada em 100ms criando- se mais oito casos, até 900ms.
A tabela 4 apresenta a médias dos valores obtidos em 1000 amostras feitas durante a transmissão dos pacotes ICMP.
A Figura 12 apresenta o gráfico plotado com os tempos de resposta na transmissão dos pacotes entre os dois cenários.
A linha cheia apresenta o tempo de latência configurado e as linhas pontilhadas apresentam os tempos de latência obtidos.
Foi possível constatar que quanto menor o valor de latência configurado, maior é a diferença entre o esperado e o obtido.
A proposta de criar um framework para emulação de sistemas distribuídos baseado em virtualização é uma alternativa que tem como objetivos controlar a execução de uma aplicação neste ambiente, melhor utilizar os recursos computacionais disponíveis e integrar ferramentas open-source tanto para virtualização dos recursos físicos quanto para gerência do ambiente.
Computing, teste de protocolos como P2P e aplicações de larga escala.
A Figura 13 ilustra os componentes envolvidos e o fluxo de dados entre eles.
Dois arquivo XML (eXtensible Markup Language) são utilizado como entradas que descrevem respectivamente o ambiente real onde o sistema será instalado e o ambiente virtual que se deseja criar.
O arquivo que descreve o ambiente real possui informações referentes às características físicas das máquinas (memória, disco, CPU, rede) disponíveis para criação do ambiente e as conexões de rede entre essas máquinas (switches, roteadores).
O segundo arquivo, que descreve o ambiente virtual que se deseja criar, possui informações como o número de máquinas do ambiente, recursos (CPU, memória, disco) de cada máquina do ambiente e também a descrição da rede que conecta essas máquinas.
Em um primeiro momento o módulo de mapeamento do sistema interpreta os arquivos e gera duas saídas:
Uma encaminhada ao módulo de deployment, que utiliza ferramentas como, e outra encaminhada para o módulo de gerência da rede do ambiente.
O módulo de deployment é responsável por criar as máquinas virtuais nas suas respectivas máquinas reais, instalando os serviços requisitados por o módulo de mapeamento.
De entre os serviços que podem ser instalados nas máquinas virtuais podemos citar servidores de banco de dados, clientes de uma rede P2P ou softwares para execução de tarefas de um Grid.
Por outro lado, o módulo de gerência de rede é responsável por configurar as conexões entre as máquinas virtuais tal qual a configuração definida no arquivo onde foi descrito o ambiente virtual.
Questões como isolamento de redes, controle de trafego (vazão e latência) e definição de regras de comunicação são configuradas por este módulo com o objetivo de aproximar o comportamento do ambiente virtual ao de um ambiente real.
A o final do processo de deployment e da configuração da rede, o ambiente está pronto para a execução da aplicação distribuída para o qual foi configurado.
Em este momento é preciso a intervenção do módulo de gerência de experimentos, que é responsável por executar a aplicação de acordo com regras que visam explorar seus pontos de falha como, por exemplo, a disponibilidade de nós no ambiente ou mesmo a qualidade da conexão de rede entre um conjunto de máquinas.
O gerenciador de experimentos analisa a execução da aplicação e gera relatórios que o usuário poderá analisar a fim de avaliar os problemas da aplicação.
Emulado Utilizando o framework apresentado na seção anterior e a arquitetura apresentada no executou- se uma aplicação de teste na intenção de avaliar as conexões de rede do ambiente.
Os arquivos de descrição, utilizados como entrada da arquitetura de configuração de rede, dos ambientes reais e virtuais apresentados a seguir, econtram- se no Apêndice O ambiente Físico O ambiente físico utilizado para ciração do ambiente virtual utilizado na avaliação ambiente têm a mesma configuração das utilizadas no controle de vazão e latência apresentados na seção 5.1.
As imagens das máquinas virtuais convidadas estão hospedadas no disco de seus respectivos hospedeiros.
Cada uma das máquinas reais hospeda 8 máquinas virtuais, cada uma de elas utilizando 256 MB de memória RAM e compartilhando os demais recursos.
Em o momento dos testes, somente o tráfego gerado por os experimentos era presente da rede.
O ambiente Virtual O ambiente virtual criado para implantação do sistema distribuído escolhido consiste em três conjuntos de máquinas virtuais.
Cada um dos conjuntos pertence a uma sub-rede ao qual somente uma máquina virtual, o Proxy, tem permissão de comunicarse com os Proxies dos outros conjuntos de máquinas.
Cada um dos sites possui um número diferente de máquinas virtuais e máquinas virtuais de um mesmo site podem estar em diferentes máquinas reais, como mostra a Tabela 5 ­ onde cada linha corresponde a uma máquina real e as colunas correspondem aos conjuntos de máquinas virtuais.
Assim podemos identificar em cada célula da tabela as máquinas correspondentes ao determinado site e hospedadas no determinado host.
O middleware de grade utilizado neste trabalho foi o OurGrid[ 35].
Em o sistema de grade OurGrid, cada peer é responsável por a comunicação com outros peers no objetivo de conseguir recursos computacionais necessários para sua demanda local e também oferecer seus recursos, num modelo econômico conhecido como o network of favors.
O escalonador MyGrid oferece recursos da grade para os usuários do Grid que executam o software chamado UserAgent, também chamado de SWAN.
Uma máquina de cada site virtual é utilizada para iniciar a aplicação.
Essas máquinas executam o componente MyGrid que acessa o peer do mesmo site virtual ao qual elas pertencem.
O restante das máquinas de cada um dos sites virtuais são identificadas como Máquinas da Grade (GuMs na terminologia do OurGrid) e executam o UserAgent, componente do OurGrid que habilita a execução de tarefas da grade.
Nenhum outro componente do OurGrid foi utilizado na execução dos testes neste trabalho.
Três usuários, cada um localizado num site virtual, executam uma aplicação.
Esta é composta de 20 tarefas, dividas em três etapas:
Cópia de 1 MB de dados para o nó, execução de uma pausa de 10 minutos e cópia de 1 MB de dados de volta à máquina do usuário que iniciou a aplicação.
Em o intuito de aumentar o tráfego de rede, a execução da aplicação foi configurada para que as tarefas fossem executadas somente em sites virtuais remotos.
Por exemplo, tarefas da aplicação inicializada no site virtual 1 foram executadas somente nos sites 2 e 3.
Todas as aplicações foram inicializadas ao mesmo tempo, cada uma a partir de um dos sites.
Em o intuito de demonstrar a efetividade do controle de rede, executaram- se testes de comunicação no ambiente de grade proposto nesta avaliação.
Conforme apresentado anteriormente, a aplicação executada no ambiente copia dados entre a máquina do usuário e os nós da grade que executam as tarefas.
Levando em consideração que as tarefas foram executadas somente nos sites virtuais remotos, criaram- se dois casos de controle de largura de banda entre os peers, sobre os quais os experimentos foram realizados.
Um dos casos utiliza a largura total da banda disponível, no caso 100M Bit/ s.
Em o segundo caso é feito o controle de largura de banda em 1M Bit/ s.
O controle foi feito utilizando as ferramentas apresentadas na seção 4.3 através da arquitetura de gerência de rede de máquinas virtuais.
A Tabela 6 apresenta a média de 20 (vinte) execuções em milissegundos para envio e recebimento dos dados de cada tarefa para os dois cenários de configuração de banda.
Analisando a tabela é possível perceber e eficiência do controle de rede através da comparação dos tempos de comunicação entre dois cenários apresentados.
Embora a diferença do valor de vazão configurado entre os dois cenários seja de 100 vezes, os valores de comunicação obtidos não acompanharam a mesma proporcionalidade.
Ou seja, a transferência de 1 MB de dados da tarefa no cenário de 100M Bit/ s deveria ocorrer em 1000ms, já no cenário de 1M Bit/ s deveria ocorrer em 100000ms.
Esse comportamento não foi observado devido a os efeitos de colisão num ambiente de rede Fast Ethernet causados por a execução simultânea de diversas tarefas da aplicação, o que também é comum em ambientes reais.
Além de o mais, num ambiente virtualizado existe o overhead no compartilhamento de recursos físicos, neste caso a interface de rede.
Ambos os fatores influenciam no desempenho da comunicação de rede.
Em ambientes distribuídos, principalmente os de larga escala intermediados por a Internet, existem variações nos elementos de comunicação como a largura de banda e a latência de rede.
Os testes realizados e apresentados neste capítulo demonstram a viabilidade de utilizar a virtualização de hardware, combinado com ferramentas de controle de rede, para emular ambientes distribuídos facilmente escaláveis.
Com a utilização da arquitetura de gerência de rede de máquinas virtuais e do framework apresentado na seção 5.2, pode- se configurar um ambiente onde quatro máquinas reais hospedaram um ambiente de grade computacional de 32 nós (Máquinas Virtuais).
Em este ambiente foi executada uma aplicação que se comportou da mesma forma como num ambiente somente com máquinas reais.
Em este ambiente também foi avaliada a efetividade, focada na emulação de ambiente distribuídos, do controle de largura de banda e latência utilizando ferramentas comuns de rede.
A criação de ambientes virtuais utilizando virtualização de hardware é uma alternativa onde com poucos recursos computacionais se pode criar ambientes controlados e escaláveis.
Dependendo da utilização desses ambientes, em alguns casos é necessária a configuração dos recursos de rede de forma a garantir questões como isolamento, controle de vazão e latência de rede.
Em este trabalho, foi feita uma pesquisa na intenção de utilizar os recursos de virtualização, focado na gerência de componentes de rede, para prover ambientes onde tais recursos precisam ser controlados.
Assim, para automatizar a gerência dos recursos de rede, desenvolveu- se uma arquitetura de gerência onde questões como controle de vazão, latência e isolamento de rede foram estudados.
A arquitetura recebe como entrada a descrição de dois ambientes:
O real, que descreve a estrutura de máquinas e suas conexões de rede;
E o virtual, que descreve a estrutura de rede que se deseja configurar entre as máquinas virtuais.
Utilizando ferramentas como o TBF/ NetEm e o iptables, combinadas com os recursos do sistema de virtualização, foi possível criar sub-redes de máquinas virtuais com controle de vazão e latência entre suas conexões.
Para validar a arquitetura de gerência de rede no sistema de virtualização, foi utilizado como contexto um framework de criação de ambientes para avaliação de aplicações distribuídas.
Este framework criou um ambiente de máquinas virtuais e, com o auxilio da arquitetura proposta neste trabalho, configurou os aspectos de rede de um ambiente de Grid.
Em este ambiente, organizou- se um conjunto de testes que demonstrou a possibilidade da execução de uma aplicação real num ambiente utilizando tecnologias de virtualização.
Então, pode- se concluir que é possível criar um ambiente distribuído utilizando máquinas virtuais e que recursos de rede são configurados de forma a atender o comportamento especificado como entrada da arquitetura.
A arquitetura de gerência de rede apresentada neste trabalho, embora desenvolvida para configurar diferentes sistemas de virtualização, foi validada sobre o Monitor de Máquinas Virtuais Xen.
Em trabalhos futuros também esperamos fazer testes de configuração de componentes de rede em outros sistemas de virtualização, como o VMWare e KVM.
Além disso, também pode ser avaliada a possibilidade da arquitetura fazer configurações em tempo de execução, visto que em ambientes reais seus componentes são instáveis e podem sofrer alterações em vários momentos da execução das aplicações.
