Este Trabalho apresenta o design de uma sistema de controle para uma célula de produção.
O design usa uma abstração chamada Dependable Multiparty Interaction (DMI), a qual é usada para juntar todas as interações entre os dispositivos da célula de produção.
Este trabalho também apresenta uma breve descrição do estudo de case da célula de produção.
Objetivo do trabalho é mostrar que os requisitos de tempo real e tolerância a falhas podem ser atingidos num software de controle implementado com DMIs.
Palavras-Chave: Sistema Distributívos, Dependable Multiparty Interaction, Tempo Real, Tolerância a falhas.
O aumento do uso dos computadores em quase todos os aspectos da vida moderna tem conduzido a uma necessidade de elevar a confiança dos sistemas de computadores e dos próprios computadores.
Existem muitas áreas onde os computadores desempenham tarefas críticas.
Um exemplo é a área de tempo real.
Em esta área, uma falha nos computadores pode ocasionar resultados catastróficos, pois os resultados devem estar corretos não somente do ponto de vista lógico, mas também devem ser gerados no momento correto.
Alguns sistemas críticos e de tempo real envolvem atividades concorrentes complexas.
Em alguns casos, estas atividades concorrentes podem trabalhar juntas, cooperando, para resolver um determinado problema.
Em outros casos, as atividades podem ser completamente independentes ou podem ser essencialmente independentes apesar de necessitar concorrer para compartilhar recursos comuns do sistema.
Em a prática, diferentes espécies de concorrência podem coexistir numa aplicação complexa, que irá necessitar de um mecanismo de suporte geral para controlar e coordenar as atividades concorrentes complexas.
Em este trabalho, mostra- se como projetar e implementar aplicações críticas de tempo real usando uma abstração de controle geral, chamada Interações Multi--Participantes Confiáveis.
Como estudo de caso, foi usado um modelo de uma célula de produção que descreve um problema real da indústria.
O modelo da Célula de Produção, usado nesta seção, foi desenvolvido por o Forschungszentrum Informatik (FZI), Karlsruhe, Alemanha, como um estudo de caso que apresenta propriedades de tempo real.
Esta célula de produção é composta de duas esteiras transportadoras (esteira alimentadora e esteira depósito), um leitor de código de barras, quatro unidades de processamento (UP) e dois guindastes (ver Figura 1).
A Célula de Produção FZI utiliza Pesquisa financiada por a Hp-Brasil (Convênio CPAD/ FACIN/ HP) um conjunto de atuadores e sensores.
Os atuadores podem ser usados para alterar o estado do sistema, como ligar e desligar a esteira alimentadora, mover os guindastes, entre outros.
Já os sensores fornecem informações sobre o estado do sistema, e.
g se há um bloco no final da esteira alimentadora ou quais são as posições dos guindastes.
Processamento dos Blocos.
Os blocos entram no sistema através da esteira alimentadora e são transportados por ela até o sensor que está localizado no final de ela detectar a presença de um bloco, ocasionando a parada da esteira.
Em esse momento, o leitor de código de barras transmite as informações para o sistema de controle depois de ter lido de cada bloco.
Cada bloco possui um código de barras que contem informações para o seu processamento:
I) quantas UP (no mínimo numa e no máximo em quatro), quais e os tempos, mínimo e máximo, que são necessários para o processamento do bloco;
Ii) o tempo máximo que o bloco pode gastar em todo o sistema;
E iii) se deve respeitar a ordem de processamento que foi informada no código de barras, pois um bloco pode ser processado sem respeitar essa ordem.
O controlador da célula deve garantir que os guindastes levem os blocos para a correta UP.
Um bloco somente pode ser colocado numa UP quando ela estiver desocupada.
Existem dois tipos de UP:
I) prensa:
É ligada por o controlador da célula e será desligada automaticamente quando ela terminar o processamento;
E ii) forno:
Está sempre ligado.
Um bloco é processado durante o tempo que permanecer nesse dispositivo.
Depois dos blocos terem passado por as UP, eles devem ser colocados na esteira depósito.
Propriedades. As propriedades do sistema estão organizadas em três classes:
Safety properties, liveness properties e correctness properties.
Se todas as safety properties são satisfeitas, então nenhum dispositivo será danificado.
Evitar colisões dos guindastes, evitar colisões entre os blocos e garantir que os blocos fiquem em áreas seguras são classificadas como safety properties.
As liveness properties asseguram a ausência de deadlocks no sistema, isto é, todos os blocos são introduzidos no sistema por a esteira alimentadora e irão sair do sistema por a esteira depósito.
Já as correctness properties asseguram que todas as informações lidas por o controlador a partir de o código de barras serão respeitadas.
Um mecanismo que abriga diversos processos executando um grupo de atividades em conjunto é chamado de interação multi-participantes (multiparty interactions).
Em uma interação multi-participantes, diversos processos (threads, objetos) de alguma forma &quot;se reúnem «para produzir resultados combinados e intermediários, usam este estado para executar atividades em conjunto, e então abandonam a interação e continuam suas execuções normais.
Mecanismos existentes para interações entre diversos participantes não fornecem recursos para tratar possíveis falhas que podem ocorrer durante a execução da interação.
Em alguns, o sistema simplesmente pára como resposta a uma falha.
Isto não é aceitável em diversas situações.
Em, o tratamento de exceções é adicionado ao mecanismo de interação multi-participantes.
Este novo mecanismo é chamado de Interações Multi--Participantes Confiáveis (Dependable Multiparty Interaction -- DMI).
Uma DMI é uma interação entre diversos participantes que fornece recursos para:
I) Tratar Exceções Concorrentes;
E ii) Garantir Consistência na Saída.
Discussões a respeito de as características de uma DMI podem ser encontradas em.
Para a construção de um controlador para o simulador da Célula de Produção FZI foi desenvolvido um projeto que satisfaz os requisitos de segurança (safety) e de tempo real (correctness) do estudo de caso (ver Seção 2), assegurando a ausência de deadlocks no sistema (liveness).
O projeto foi separado num conjunto de DMIs que controla as interações entre os dispositivos;
DMIs que determina a ordem em a qual as DMIs são executadas.
Os requisitos de segurança são satisfeitos no nível de DMIs, enquanto os outros requisitos são atendidos por os controladores dos dispositivos e por o escalonador de DMIs (requisitos de tempo real).
De essa forma, o software controlador para toda a Célula de Produção FZI consiste simplesmente num conjunto de DMIs, em controladores dos dispositivos e num escalonador de DMIs.
Este controlador foi implementado na linguagem de programação Java.
Cada DMI está representada por um retângulo pontilhado, a fim de salientar quais os dispositivos estão envolvidos na DMI.
Devido a os possíveis processos de recuperação, duas DMIs, que possuem seus respectivos retângulos pontilhados sobrepostos, não podem ser executadas concorrentemente, porque o mesmo dispositivo (ou bloco) não pode estar envolvido em mais do que uma DMI ao mesmo tempo.
Os movimentos de quase todos os dispositivos são desempenhados por as DMIs e os dispositivos envolvidos na DMI são desligados antes do término de ela.
Assim, todos os dispositivos estão imóveis quando não estão sob o controle da DMI.
O único dispositivo que não é controlado por as DMIs é a esteira depósito, que é ativada por o ambiente que engloba a célula.
O conjunto de DMIs do controlador executa várias operações críticas, i.
e passagem de um bloco entre os dispositivos.
A ativação destas DMIs e a ordem em que elas são executadas é a responsabilidade, respectivamente, dos controladores dos dispositivos e do escalonador de DMIs, que pode ser feito através de uma grande DMI.
Os participantes neste outro nível de DMI, são ativados por threads de execuções externas, criadas imediatamente após o sistema iniciar sua execução.
Foram desenvolvidas vinte e três DMIs para controlar as interações entre os dispositivos:
CarregaCelula (CC), CarregaGuindaste1 (CG1), RecuaGDT1 (RG1), RecuaGDT2 (RG2), CarregaUnidadeProcA (CUPA), CarregaUnidadeProcB (CUPB), DescarregaUnidProcA (DUPA), Descarrega Unidade ProcB (DUPB), ProcessaBloco (PB), CarregaEsteiraDeposito (CED) e DescarregaCelula (DC).
O índice representa uma das quatro unidades de processa mento, portanto existem quatro DMIs para cada DMI que possuir o índice.
O ciclo de produção completo de um bloco na Célula de Produção FZI é o seguinte:
Um bloco entra no sistema da célula de produção através do ambiente.
Este bloco é colocado no dispositivo esteira alimentadora por a DMI CarregaCelula.
Após, a DMI CarregaGuindaste1 é responsável por fazer o dispositivo leitor de código de barras ler as informações necessárias sobre o processamento do bloco.
Essas informações são transmitidas, por esta DMI, para o dispositivo guindaste 1.
A DMI CarregaGuindaste1 também é responsável por fazer o dispositivo guindaste 1 agarrar o bloco no final da esteira alimentadora.
Quando o bloco estiver no dispositivo guindaste 1, a DMI CarregaUnidadeProcA levará o bloco até a UP informada no código de barras do bloco.
Após a chegada do bloco nesta UP, ele deverá ser processado.
A DMI ProcessaBloco será responsável por processar o bloco.
Terminando esta etapa, o software controlador poderá:
I) fazer o dispositivo guindaste 1 pegar o bloco através da DMI DescarregaUnidProcA.
Através desse caminho, o bloco deverá, mais tarde, ser colocado em outra UP, ocasionando um processo recursivo;
Ou ii) fazer o guindaste 2 pegar o bloco.
Esta operação será realizada por a DMI DescarregaUnidadeProcB.
Quando o bloco estiver no dispositivo guindaste 2, ele poderá:
I) voltar para uma UP através da DMI CarregaUnidadeProcB, para continuar o seu processamento;
Ou ii) ser colocado no dispositivo esteira depósito por a DMI CarregaEsteiraDeposito.
Após o bloco ser colocado na esteira depósito, a DMI DescarregaBloco será responsável por fazer o bloco sair da Célula de Produção.
Em este ciclo de produção não foram citadas as DMIs RecuaGDT1 e RecuaGDT2.
Estas duas DMIs são utilizadas para os guindastes irem para áreas seguras.
Estas são áreas onde somente um guindaste poderá chegar.
De essa forma, no momento em que um dos guindastes estiver executando a sua DMI de recuo, estará garantido que ele não poderá colidir com o outro guindaste.
A maioria das DMIs projetadas para o estudo de caso da Célula de Produção FZI, têm dois participantes:
Um que recebe o bloco como um argumento de entrada e o outro que retorna o bloco como um argumento de saída.
O dispositivo que tem o bloco como um argumento de entrada, passa para o dispositivo que tem o bloco como um argumento de saída.
A DMI CarregaGuindaste1 usa três objetos externos e é composta de três papéis1:
EsteiraAlimentadoraRole, LeitorCodigoBarrasRole e Guindaste 1 Role.
Em a Figura 3, a passagem de um bloco de um papel para outro é representada por uma seta sólida com uma direção.
Como pode ser visto nessa figura, o papel EsteiraAlimentadoraRole recebe o objeto Bloco como um parâmetro de entrada.
Depois, é realizada a passagem física do Bloco da esteira alimentadora para o leitor de código de barras, que neste momento faz a leitura do código de barras e depois envia esse objeto para o papel Guindaste1Role, que representa o guindaste que está pegando fisicamente o objeto.
A partir desse momento, o papel Guindaste1Role retorna esse objeto como um parâmetro de saída.
Os acessos aos objetos externos bloco, esteira alimentadora, leitor de código de barras e guindaste 1 são representados por setas tracejadas.
Já as atividades desempenhadas por os papéis (roles) são representadas por quadrados pontilhados.
Durante a implementação do projeto da Célula de Produção FZI encontraram- se alguns problemas.
Para resolver estes problemas foram tomadas as seguintes decisões:
I) realizar o processamento dos blocos na Célula de Produção, sempre respeitando a ordem que foi informada no código de barras;
E ii) para evitar a ocorrência de deadlocks, o número máximo de blocos que a célula de produção pode processar ao mesmo tempo foi estipulado em dois.
De forma a fazer com que as DMIs sejam executadas de maneira correta e que respeitem os requisitos de tempo real necessários para essa célula, foi necessária a implementação de um escalonador em vez de adicionar novas características de tempo real dentro de uma DMI.
O escalonador de DMIs é responsável por determinar a ordem em que as DMIs são executadas.
Assim, os controladores dos dispositivos se comunicam com o escalonador de DMIs para agendar a ordem de execução das DMIs.
Essa comunicação é realizada através da troca de mensagens entre eles, isto é, os controladores informam ao escalonador o estado dos dispositivos ou algum pedido e ficam aguardando uma resposta do escalonador para executarem alguma DMI.
Por sua vez, o escalonador recebe as mensagens dos controladores, verifica qual ação deve ser tomada e, após, envia mensagens para os controladores dos dispositivos que participarão da ação, a fim de que eles executem uma determinada DMI.
O estudo de caso apresenta dois tipos de requisitos de tempo.
O primeiro refere- se ao tempo máximo que cada bloco pode gastar em toda a célula, já o segundo refere- se ao tempo mínimo e máximo necessários para o processamento de cada bloco nas UP.
Para satisfazer o primeiro tipo de requisito, toda a vez que um guindaste estiver carregando um bloco, será verificado se o deadline desse bloco é menor que o deadline do outro bloco que está presente na célula de produção.
De essa forma, o bloco que possuir o menor deadline será processado primeiro.
Já para satisfazer o segundo tipo de requisito, quando existirem dois blocos sendo processados ao mesmo tempo, os deadlines desses blocos são comparados para verificar qual bloco tem o menor deadline, ou seja, qual bloco deve ser retirado primeiro de uma UP.
Os requisitos de tempo do estudo de caso foram satisfeitos através do escalonador de DMIs.
Porém, para ter uma maior segurança quanto a o cumprimento desses requisitos, foram realizadas diversas medições de tempo de execuções das DMIs desenvolvidas para o estudo de caso.
Para realizar essas medições foi utilizado um computador PC IBM Pentium Celerom, de 330 MHz, com 64 MB de memória RAM e tendo como sistema operacional o Linux Red Hat de iterações compostas por o processamento de quatro blocos.
Os valores foram obtidos em duas etapas, sendo que em cada uma houve a repetição de cada iteração mil vezes, totalizando duas mil vezes o processamento de quatro blocos.
Como o processamento de cada bloco envolve a execução de algumas DMIs, após as duas etapas de medição dos tempos, obteve- se vários valores correspondente ao tempo de execução de cada DMI.
Para cada DMI foram descartados os valores que estavam destoando em relação a os demais valores.
Com base nesses novos valores, determinou- se que os maiores valores de cada DMI corresponderiam ao tempo máximo de execução de cada uma.
Com base nos tempos da Tabela 1, foi realizada a soma dos tempos de execução das DMIs que estão envolvidas no processamento de um bloco numa e duas UP.
Para cada UP foi obtido um valor.
Todos os valores podem ser visualizados na Tabela 2.
Após a obtenção dos tempos da Tabela 1 determinou- se que os tempos mínimos necessários para realizar o processamento de cada bloco nas UP devem ser maiores que os valores apresentados na Tabela 2, pois se o deadline de um bloco for menor que esses tempos, a célula de produção poderá não cumprir o deadline numa determinada UP.
Um outro detalhe a ser acrescentado é que o tempo gasto para realizar o escalonamento foi desconsiderado por ser muito menor que o tempo gasto para executar uma DMI.
Por exemplo, para executar o escalonamento leva- se microseg/ miliseg, Enquanto que o processamento mecânico de um bloco leva segundos ou até minutos.
Em algumas linhas da segunda coluna, da Tabela 2, têm- se dois valores.
O primeiro valor foi obtido com o guindaste 1 fazendo a maior parte da operação na célula de produção, deixando só a retirada do bloco da célula de produção para o guindaste 2.
Já o segundo valor que aparece nesta coluna foi obtido com o guindaste 2 fazendo a maior parte da operação, deixando somente a inclusão do bloco na célula de produção para o guindaste 1.
O controlador da célula de produção irá levantar uma exceção toda a vez que o deadline de um bloco for menor que o tempo mínimo de processamento determinado na Tabela 2.
Assim, quando um bloco irá ser processado, o escalonador verifica quanto tempo levará para processálo.
Após, será levantada uma exceção se o tempo necessário para realizar o processamento do bloco for:
I) menor que o tempo mínimo determinado no código de barras do bloco;
Ii) maior que o deadline do bloco na UP;
E iii) maior que o deadline do bloco em todo o sistema.
Se uma exceção for levantada, o controlador irá interromper a execução do sistema.
Em esse trabalho não foi realizado o tratamento das exceções levantadas durante a execução do controlador, pois o objetivo é mostrar que as DMIs podem ser usadas em sistemas de tempo real.
Em sistemas de tempo real existe uma dificuldade em compatibilizar dois objetivos fundamentais:
Garantir que os resultados sejam produzidos no momento desejado e dotar o sistema de flexibilidade para adaptar- se a um ambiente dinâmico e, assim, aumentar sua utilidade.
De essa forma, o uso de um escalonador deve assegurar que os deadlines das tarefas sejam cumpridos.
Em alguns sistemas, mesmo em caso de falha de algum componente, as tarefas que em ele estavam sendo executadas devem ser asseguradas.
Para isso, o escalonador deve implementar tolerância a falhas.
Um exemplo de um sistema que engloba estas duas características, tolerância a falhas e tempo real, é o estudo de caso da Célula de Produção FZI.
Para projetar e implementar o sistema de controle para a Célula de Produção FZI (estudo de caso) foi utilizado o mecanismo proposto em, DMI.
Porém, o mecanismo de DMI não fornece, de maneira direta, as propriedades necessárias para poder ser usado em interações entre diversos participantes que possuem requisitos de tempo real.
Um método para atender os requisitos de tempo real pode ser a inclusão, nas próprias DMIs, dessas características.
Este tipo de filosofia foi adotada em e, onde foi estudado um método para incluir requisitos de tempo real num mecanismo similar às DMIs, as Ca Actions.
Uma outra forma de atender estes requisitos é a utilização de um escalonador de DMIs, ao invés de incluir novas propriedades nas DMIs.
De essa forma, é possível atender aos requisitos de tempo real, para problemas similares aos da célula de produção, sem incluir estes requisitos nas DMIs.
Parte desses resultados estão apresentados em e.
As propriedades descritas na Seção 2 foram atendidas da seguinte maneira:
I) as safety properties foram satisfeitas por as DMIs;
Ii) as liveness properties foram atendidas por a maneira como foi projetado o sistema controlador e também por o escalonador de DMIs;
E iii) as correctness properties foram atendidas por o escalonador de DMIs, por exemplo, o escalonador não deixa a DMI DUPA retirar uma peça da UP 2 antes de ela ter sido totalmente processada, ou ainda, a ordem com as quais as peças têm que passar por as UP é respeitada por o escalonador.
Em este trabalho, mostrou- se como usar as DMIs para projetar um sistema crítico:
O da Célula de Produção FZI.
Foi demonstrado que aplicando as DMIs para este estudo de caso ajudou- se a melhorar a construção do projeto para esse sistema, pois o uso de DMIs para implementar o sistema permite garantir todos os requisitos relacionados com as atividades concorrentes da Célula de Produção FZI.
Foi mostrado que a utilização de um mecanismo que pode confinar os erros e, conseqüentemente, fornecer tolerância a falhas também pode ser utilizado em sistemas de tempo real.
Embora um projeto baseado em DMIs possa diminuir o desempenho de alguns sistemas, acredita- se que os benefícios ganhos por um projeto simples, usando componentes reutilizáveis e fornecendo ao sistema uma disciplina de tolerância a falhas, possibilitem construir aplicações críticas de tempo real com mais eficiência.
