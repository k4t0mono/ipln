O objetivo desta dissertação de mestrado é descrever o projeto experimental envolvendo o processo de agentificação de software educacional.
Este trabalho foi desenvolvido com o propósito de identificar o conjunto de premissas, a questão envolvendo reutilização do código fonte existente, os recursos necessários, as características de modelagem e os pré-requisitos referentes à estrutura de pessoal necessária para desenvolver um software educacional baseado na arquitetura de sistemas tutoriais inteligentes.
Para o desenvolvimento desta pesquisa partiu- se de um software educacional já existente, modalidade tutorial.
Ou seja, já existia um domínio e um conjunto de regras de comportamento do tutor modeladas de acordo com objetivos pedagógicos bem definidos.
O conjunto de desafios e restrições encontrados durante a pesquisa são descritos e analisados neste volume.
O referencial teórico, detalhamento do processo de agentificação aplicado a ambientes educacionais e o novo ambiente, construído a partir de o antigo sistema, são analisados e comentados.
O que se busca é mostrar o volume de trabalho, premissas e implicações inerentes a um projeto desta natureza.
Palavras-chave: Agentes Pedagógicos, Engenharia de Software Educacional.
Sistemas Tutores Inteligentes, À medida que aumenta o volume das tarefas que são automatizadas, num dado setor da sociedade, aumenta também, a complexidade para o desenvolvimento dos sistemas computacionais que as manipulam.
Isto ocorre tanto nas aplicações industriais e comercias bem como nos sistemas (software) educacionais.
A abordagem multiagente se constitui numa destas novas propostas para modelar sistemas complexos volumosos e com informação distribuída.
Um dos objetivos desta abordagem multiagente é construir sistemas compostos de múltiplas entidades resolvedoras de problemas (agentes) que interagem entre si, aumentando o desempenho geral do programa.
O escopo de cada entidade é limitado, diminuindo a complexidade e permitindo unidades de processamento menores e mais confiáveis.
Logo, a adoção desta abordagem como alternativa para modelagem e projeto de software educacionais foi adotada há mais de dez anos como a possibilidade concreta para ambientes educacionais.
Os diversos trabalhos publicados nos eventos da comunidade nacional e internacional (WIE, SBIE, ITS, AIED, Fie e muitos outros) são a prova concreta deste fato.
Além de isto, esta vertente da Inteligência Artificial Distribuída (IAD) e da Engenharia e Software (ES) vêm sendo adotada no GIE/ FACIN desde os trabalhos de Giraffa, e suas orientações Goulart e Giraffa, Zamberlan, Giraffa e Mora, Schuck e Giraffa, Kozen, Giraffa e Oliveira, Bolzan e Giraffa, Cunha e Giraffa, Marczak, Giraffa e Almeida e no grupo de pesquisa onde este projeto foi desenvolvido.
A motivação para desenvolver este trabalho deu- se logo após a conclusão do desenvolvimento do software denominado Matematiquinha e, sua avaliação em situação de sala de aula.
Observou- se que o ambiente possuía uma grande potencialidade no que tange a exploração do conteúdo com diferentes estratégias de ensino e, ao mesmo tempo, uma série de limitações para poder implementar- las.
O sistema preenchia os requisitos inicialmente identificados para Trabalho de Conclusão do curso de graduação em Ciência da Computação, do Campus Uruguaiana da PUCRS, como pode ser observado em Ribeiro e Ribeiro.
Entretanto, o programa apresenta um conjunto de restrições relacionadas à personalização das atividades do aluno e sua respectiva avaliação.
Todos os usuários do Matematiquinha são tratados de forma padronizada no que tange ao processo de avaliação.
Ou seja, submetidos a uma mesma seqüência de exercícios, com os mesmos critérios de avaliação.
Logo, não existe uma seleção de possíveis exercícios, levando em consideração as necessidades de cada aluno.
Outro problema identificado por a professora especialista está relacionado ao atendimento aos alunos.
Quando estes tinham dúvidas quanto a o uso do sistema ou na resolução de algum exercício e desejavam atendimento imediato, não havia suporte do próprio programa.
O auxílio era externo e centrado no professor.
No entanto, prestar auxílio personalizado para todos os alunos era uma tarefa impossível, pois o número de alunos é muito maior que o número de pessoas disponíveis para auxiliar- los (professor e técnico responsável por o laboratório da escola).
Aliás, esta é uma situação padrão nas escolas do Rio Grande do Sul e, especialmente na cidade de Uruguaiana, onde foi realizado o experimento.
Logo, gerou- se imediatamente uma restrição e uma demanda a ser atendida numa versão futura do sistema.
O número de alunos em sala de aula deve- se mais às questões financeiras e modelo administrativo da escola do que pedagógicas.
Embora, esta decisão administrativa de conter custo acabe sempre por impactar as questões pedagógicas.
Em este sentido, a utilização de assistentes pessoais ganha um reforço no que tange a sua exploração em ambientes educacionais, uma vez que a tendência é ter- se um número elevado de alunos (mais de trinta) em cada sala de aula.
As limitações do Matematiquinha estão ligadas ao fato deste ser um sistema tutorial sem contemplar atendimento personalizado ou outro tipo de assistência.
Nem mesmo um sistema simples de ajuda.
Portanto, o Matematiquinha foi concebido sem a preocupação de modelar o estado cognitivo do aluno ou, mesmo, procurar variar as estratégias de ensino de forma a adequar- las a um determinado perfil de aluno.
Estas estratégias de ensino podem ser aplicadas através de um tutor e resumidas, segundo Giraffa e Vicari, como reativo, guia e assistente.
Cada estratégia traz implícita um determinado grau de interferência no trabalho do aluno.
Quando o tutor é um guia, ele sugere de forma mais direta o que o aluno deve fazer e sugere ações específicas, independente do estado dos elementos do ambiente.
Em a estratégia reativa, o tutor se comporta em função de os pontos críticos (problemas) que vão surgindo.
Cada problema gera um conjunto de ações selecionadas (táticas) para ajudar os estudantes a construir as próprias soluções para um determinado problema.
O estudante é induzido a pensar em possibilidades de solução através do trabalho cooperativo com o seu colega.
Em a estratégia assistente, o tutor se comporta como um parceiro que sugere ações de forma menos invasiva e procura reforçar o aluno a descobrir caminhos e refletir sobre o que está acontecendo no sistema.
Esta questão das estratégias, perfil de aluno e assistência e a construção de sistemas com algum tipo de adaptação ao usuário, tem sua origem a partir de projetos da área de Inteligência Artificial aplicada à Educação (IAED).
Segundo Giraffa e Vicari, os primeiros programas educacionais concebidos com uso de técnicas de Inteligência Artificial (Ia), originalmente eram denominados de Intelligent Computer Assisted Instruction (ICAI).
Os ICAIs utilizam técnicas de Ia e resultados da Psicologia Cognitiva como uma arquitetura modular.
E, atualmente, estão considerando aspectos da Psicologia Social.
Uma vez que, se esta projetando estes sistemas como Sistemas Multiagentes (SMAS).
Embora, o termo agente venha sendo utilizado freqüentemente na Ia, ainda não existe uma definição formal de total consenso para o seu significado.
Existe, entretanto, o consenso que o centro da noção de agentes é a autonomia.
Ou seja, a capacidade de atuar sem intervenção humana constante, controlar suas ações e seu próprio estado interno e, a possibilidade de aprender a partir de suas interações com o ambiente.
Segundo Bordini, Vieira e Moreira, agentes são entidades de software autônomas que interagem através de um ambiente compartilhado por todos os agentes de uma sociedade, e sobre o qual estes agentes atuam alterando o seu estado.
O agente recebe informações através de sensores do ambiente e executa ações neste ambiente.
A atuação dos agentes acontece através de um repertório pré-definido de ações que ele pode executar para modificar o ambiente com a finalidade de satisfazer seus objetivos de projeto.
Segundo Giraffa, o projeto de um agente e o ambiente onde ele está inserido determinam as propriedades que o agente terá.
Um SMA pressupõe uma sociedade de agentes que desempenham funções/ papéis específicos dentro de o contexto do ambiente.
Uma das principais vantagens dos SMA em relação a outras técnicas de concepção de sistemas está no proveito que tais sistemas tiram da capacidade de paralelismo e distribuição das arquiteturas de computadores.
Tais características conduzem a uma certa independência entre os agentes, permitindo que sistemas muito complexos possam ser implementados através do comportamento mais simples de diversos agentes deliberativos.
O objetivo principal, em SMA, é construir mecanismos para a interação e coordenação desses agentes.
Como cada agente possui um grupo restrito e específico de capacidades e seus próprios objetivos em relação a os estados do ambiente, eles precisam interagir para atingir esses objetivos.
Assim, é possível para um projetista de sistemas computacionais criar sistemas complexos de forma naturalmente distribuída.
A criação de mecanismos genéricos que coordenem tais agentes para que a sociedade de agentes funcione de forma adequada e eficiente é um dos grandes desafios que os pesquisadores da área enfrentam.
Os SMA são os candidatos naturais à sucessão dos sistemas orientados a objetos.
Eles formam uma área de pesquisa dentro de a IAD, que se preocupa com todos os aspectos relativos à computação distribuída em sistemas de Ia, segundo Bordini, Vieira e Moreira.
Os ICAI com o passar do tempo virando sinônimos de Sistemas Tutores Inteligentes (STI).
Os STI são softwares educacionais que possuem uma arquitetura que prevê a possibilidade do sistema fazer adaptações no seu funcionamento, levando em conta o perfil do usuário que está interagindo com o programa.
Para tal, ele possui uma subdivisão de tarefas associadas aos módulos:
Tutor: Responsável por a seleção de estratégias de ensino, exercícios, etc..
Aluno: Responsável por guardar as informações do aluno.
Base de domínio:
Onde o conteúdo está modelado em função de as estratégias.
E o módulo de controle:
Que é a interface.
Maiores detalhes sobre os módulos mencionados podem ser encontrados em Giraffa e Vicari Os STIs buscam possibilitar a definição de uma estratégia que melhor se adapte ao usuário, considerando suas características individuais.
Eles são projetados de maneira a oferecer algum tipo de auxílio personalizado ao aluno considerando o processo de aprendizagem de um determinado conteúdo.
Logo, os STIs pressupõem que o sistema fará algum tipo de adaptação no seu funcionamento, levando em conta o perfil do usuário que está interagindo com o programa.
Para tal, um STI deve modelar o usuário num conjunto de aspectos para seleção das atividades e do comportamento, que o sistema irá exibir, quando de a interação com o usuário.
O modelo de usuário é formado por o conjunto de informações relativas ao aluno, resultante da sua interação com o ambiente.
Sem este conjunto de informações, não é possível se desenvolver num sistema que ofereça auxílio personalizado ao usuário.
Funcionalidade esta, muito desejável nos atuais ambientes educacionais.
Principalmente, quando se tem muitos alunos e poucos auxiliares, considerando o contexto padrão dos laboratórios das escolas.
O uso da tecnologia de agentes e a modelagem de SMAs permitem resgatar, também, sistemas consolidados/ testados que estão em uso e necessitam de uma atualização, como no caso de o ambiente descrito neste trabalho.
O processo de agentificação surge como uma alternativa interessante para se atualizar sistemas e/ ou integrar- los em outros ambientes mais complexos.
Os desafios de agentificação podem ser de grande porte.
Visando conhecer o esforço a ser desprendido para se efetuar tal processo de agentificação é que surge o projeto Matematiquinha Multiagente (Mm).
Este projeto representa um esforço no sentido de se conhecer o custo de agentificar um sistema educacional, entendendo- se custo num sentido bastante amplo.
Custo de modelagem, projeto e implementação, visando reuso de conhecimento e código.
Para que tal objetivo seja alcançado, muitas etapas devem ser observadas.
O termo agentificação é uma tradução livre do original, em inglês, &quot;wrapping».
Wrapping é um processo associado ao &quot;empacotamento «de um sistema já existente, buscando- se que o novo programa se comporte como um SMA.
Isto é, ele exiba propriedades e características que permitam inserir- lo dentro de um contexto de SMA.
Parte- se do pressuposto de que não faz sentido projetar ou construir um agente, se ele não coexistir com outros agentes.
Ou seja, ele pertença a uma sociedade de agentes onde sua interação proverá a solução de um dado problema.
De uma maneira simplificada, agentificar um programa consiste em colocar no sistema uma camada capaz de habilitar- lo a interagir com outros agentes e processos pré-existentes ou que sejam adaptados para o novo ambiente segundo Wooldridge e Jennings.
Tornando o sistema, no nível funcional e operacional, um SMA.
Quanto a o material sobre o processo de agentificação, além de pouco abundante, também possui um certo grau de complexidade para seu bom entendimento.
Logo, busca- se, também, com este trabalho facilitar o leitor na familiarização dos conceitos relacionados com a idéia de agentificação.
Maiores detalhes podem ser obtidos no Capítulo 2.
A agentificação dos sistemas permite o reuso e adaptação de sistemas já existentes e uma ampliação do seu potencial.
No caso de os sistemas educacionais isto traz vantagens significativas, pois permite a personalização das atividades, adaptação em função de as necessidades do usuário (aluno) e sua utilização fora de o escopo de uma aplicação local.
As referências relativas ao processo de agentificação, encontradas na literatura, são associadas, na sua maioria, a aplicações industriais e comerciais.
Os conceitos utilizados neste projeto baseiam- se nos trabalhos de Bellman, Carvel, Serrano e Oca, Chiang, Landauer e Bellman, Landauer Bellman e Gilliam e Vicari e Giraffa.
Estes autores exploraram a questão da agentificação aplicada a ambientes educacionais.
Conforme já mencionado, este projeto utilizou como elemento base o programa educacional (software legado) denominado Matematiquinha, desenvolvido por Ribeiro e Ribeiro.
O Matematiquinha tem a finalidade de auxiliar o professor no ensino do sistema decimal e das operações de adição e subtração para crianças das séries iniciais.
O sistema foi projetado tendo como base o jogo educacional conhecido como Material Dourado.
O Material Dourado é composto por um grande número de cubos e barras confeccionados na maioria das vezes em madeira, representando a unidade, a dezena e a centena.
É utilizado no Ensino Fundamental como recurso ao ensino de Matemática fundamental.
Possibilita ao aluno construir, de forma prática, o sistema de numeração decimal, através da manipulação de materiais concretos.
Os exercícios disponíveis no ambiente são organizados em níveis de complexidade diferenciados.
É necessário realizar- los de forma seqüencial e ordenada.
Maiores detalhes podem ser obtidos em Ribeiro e Ribeiro, Ribeiro Giraffa e Ribeiro.
O Matematiquinha foi testado com alunos em situação de sala de aula real, nas turmas da especialista que auxiliou a modelagem do sistema.
Esta experimentação mostrou uma série de limitações e potencialidades do sistema.
O projeto de agentificação do ambiente do Matematiquinha surge para atender as limitações encontradas por a professora e dos alunos, quando de a utilização do Matematiquinha em situação de sala de aula real.
Isto é, uma aula regular e não apenas um experimento com um grupo de alunos.
O professor trabalha com uma turma de trinta e cinco alunos.
Não sendo possível atender cada um dos alunos individualmente, durante todo o tempo de duração da aula.
A opção para resolver este problema foi criar um Assistente Virtual (AV) que pudesse auxiliar o aluno a resolver seus exercícios e dúvidas mais freqüentes sem o auxílio do professor.
Para desempenhar esta função, o AV precisa registrar as informações geradas durante as interações do aluno com o sistema.
Para a construção deste AV foi necessário reprojetar o sistema original.
A decisão de se construir um AV como um agente se baseia no fato de que já se identificou à necessidade de agregar outros agentes para desempenhar outras tarefas no ambiente, o que caracteriza o novo ambiente numa especificação de SMA.
O projeto da nova versão denominada Matematiquinha Multiagente (Mm) levou em conta, as funcionalidades do Matematiquinha já existentes, que foram preservadas e estendidas para trabalhar em sintonia com os novos componentes desenvolvidos para o ambiente.
O esforço para se efetuar o processo de agentificação foi considerável.
Foi necessário adicionar ao programa original uma nova camada de software para garantir a comunicação entre os diversos módulos e a compatibilidade entre as tecnologias envolvidas no projeto original e no novo.
Esta nova camada foi adicionada de maneira conceitual, portanto, ela não pode ser visualizada fisicamente, uma vez que esta camada é apenas uma abstração conceitual para representar a agentificação do sistema.
Em este momento o novo ambiente denominado de Matematiquinha Multiagente (Mm) possui especificados dois agentes que desempenham de forma coordenada às tarefas de assistência ao aluno visando atender as limitações identificadas na utilização da versão anterior.
Como o projeto do ambiente já prevê a inclusão de outros agentes, as escolhas tecnológicas, a montagem e a implementação estão sendo realizadas de maneira a poder incorporar novas funcionalidades e agentes de maneira simplificada.
O software educacional necessita ser avaliado de alguma forma.
A avaliação sob o ponto de vista de aprendizagem é muito complexa para ser realizada em curto prazo e implica na utilização de instrumentos que abordariam o aspecto qualitativo do sistema.
O que pode ser feito dentro de o escopo da dissertação, é avaliar o potencial pedagógico do protótipo via consultas à especialista, segundo Giraffa e Vicari Entende-se que a avaliação pedagógica do protótipo é a verificação do quanto o sistema pode auxiliar nas atividades de ensino e aprendizagem em situação sala de aula real.
Para se fazer isso é necessário ter o protótipo concluído e elaborar instrumentos (questionários) especialmente feitos para colher informações sobre a opinião dos professores.
Já em relação a a opinião dos alunos entendemos que não é possível efetivar- se uma avaliação baseada em questionários e que se faz necessária à elaboração, com a ajuda de um especialista, de um procedimento eficiente de avaliação para sistemas dedicados a séries iniciais e em sala de aula real.
Este trabalho de dissertação de mestrado possui naturezas interdisciplinares, envolvendo três áreas do conhecimento:
Ciência da Computação, Engenharia de Software e Ensino de Matemática.
Dentro de a Ciência da Computação utiliza- se o conhecimento oriundo das subáreas de Ia e Engenharia de Software.
O estudo de STIs modelados através de uma arquitetura multiagente é interdisciplinar, uma vez que pressupõe a modelagem cognitiva do usuário e uma seleção de estratégias de ensino para serem utilizadas de acordo com o perfil de cada usuário.
Estas estratégias objetivam prover uma ajuda personalizada ao aluno na aquisição de conhecimento dentro de o domínio proposto por o sistema.
A Figura 1.1.1 ilustra as áreas e subáreas de conhecimento que concorrem para compor o referencial teórico do trabalho.
E, representa de forma gráfica, o interrelacionamento destas áreas de conhecimento.
A partir de as limitações e potencialidades identificadas no Matematiquinha quando testados com alunos em situação de sala de aula real, tornou- se possível à identificação do seguinte problema:
Como reutilizar, adaptar e ampliar o ambiente do Matematiquinha permitindo, a personalização das atividades, a adaptação em função de as necessidades do usuário (aluno) e sua utilização fora de o escopo de uma aplicação local.
E, realizar este conjunto de mudanças considerando a abordagem de SMA.
Após identificar- se este problema, postulou- se como alternativa de solução o processo de Agentificação do Matematiquinha, de maneira a transformar- lo num STI, modelado através de uma arquitetura multiagente, buscando aplicar os conceitos de agentificação.
A questão de pesquisa motivadora deste trabalho é:
&quot;Quais características e funcionalidades deverão ser agregadas ao Matematiquinha originalmente construído para que ele se torne um STI multiagente?».
A a questão de pesquisa associamos as seguintes hipóteses:
1) É possível projetar um STI multiagente a partir de o Matematiquinha, pois as atividades a serem realizadas por o aluno estão bem definidas e atendem aos requisitos da arquitetura de um STI;
2) O conhecimento utilizado na modelagem da base de domínio está organizado na forma de exercícios agrupados por grau de dificuldade.
Fato este que permite atender um dos requisitos de STIs que é a criação de uma base de domínio.
Em esta base, o conteúdo deve ser modelado com um certo grau de independência em relação a os outros módulos do sistema;
3) O agente assistente que desempenha o papel de tutor no STI necessitará um conjunto de regras para guiar seu comportamento.
E estas regras podem ser inferidas, a partir de a resolução dos exercícios.
Isto vai criar um conjunto de estratégias e táticas que poderão ser utilizadas para a assistência pessoal do aluno.
4) Já existe integração entre o autor e a especialista.
Isto auxiliará a modelagem destas regras de comportamento para o agente assistente, fator crítico para construção de STIs.
5) A tecnologia utilizada para a construção do ambiente permite a reutilização das interfaces e sua ligação com os outros módulos a serem construídos em Java.
6) O processo de agentificação agregará complexidade ao projeto.
Porém, aumentará seu potencial de exploração sob o ponto de vista pedagógico.
Agentificar o Matematiquinha de maneira a transformar- lo em Sistema Tutor Inteligente, modelado através de uma arquitetura multiagente.·
Identificar as premissas necessárias para se aplicar um processo de agentificação;·
Reorganizar a base de domínio expressa por exercícios existentes, de acordo com o perfil do aluno, a partir de as regras especificadas por a especialista;·
Identificar qual (quais) processo (s) de agentificação poderá (ão) ser (em) utilizado (s) para a nova versão do sistema;·
Selecionar estratégias de ensino e táticas a elas associadas, com o auxílio da especialista;·
Elaborar uma proposta de modelar o aluno através da monitoração e identificação dos erros cometidos durante a resolução dos problemas propostos;·
Efetivar a migração do sistema construído utilizando- se a ferramenta Macromedia Flash 4.0 para um sistema a ser desenvolvido utilizando- se a linguagem de programação Java;·
Identificar as restrições advindas da agentificação de um tutorial;·
Identificar o quanto de generalização do processo pode ser aplicado a outros ambientes similares;·
Auxiliar na validação da metodologia utilizada desenvolvida no GIE/ FACIN para modelagem e projeto de software educacional;·
Contribuir para o grupo de pesquisa em IAED da FACIN/ PUCRS.
Este texto está dividido em 8 capítulos da seguinte forma:
O capítulo 2 apresenta os conceitos de agentificação e suas implicações correlatas, o processo de agentificação de um programa pré-existente e uma diretiva para agentificar projetos de sistema.
O capítulo 3 descreve o ambiente original do Matematiquinha.
O capítulo 4 apresenta detalhes acerca de o processo de agentificação do Matematiquinha.
Ressaltase os aspectos legados do ambiente original e as novas características obtidas com a versão multiagente.
O capítulo 5 apresenta a modelagem da base de domínio do Mm..
O capítulo 6 apresenta a modelagem das informações do usuário.
O capítulo 7 apresenta as considerações finais, as contribuições envolvendo as restrições e limitações encontradas e trabalhos futuros.
A o final deste trabalho estão as referências bibliográficas utilizadas no desenvolvimento deste volume.
Um caminho natural de incorporar um sistema pré-existente num moderno sistema distribuído de informação é agentificar- lo.
Segundo Wooldridge e Jennings &quot;agentificar «um programa já existente, consiste em colocar no sistema uma camada (interface) de agentes capaz de habilitar- lo a interagir com outros agentes.
Tornando- se esta, no nível funcional e operacional, um agente.
Entendendo- se um agente como um programa munido de propriedades e características que o permitem interagir com outros elementos do ambiente considerando o ambiente como uma sociedade onde existem outros agentes e processos.
A abordagem de agentificação pode ser aplicada em qualquer sistema que possua requisitos de heterogeneidade, a diversidade pode ser encontrada em sistemas com diferentes linguagens, diferentes processos dentro de o mesmo sistema, ou combinações de outros recursos de software para suportar análise e modelagem de sistemas complexos, de entre outras possibilidades.
Agentificações são recursos muito poderosos.
Exemplos de como agentificações podem mudar a concepção de verificação e validação de grandes sistemas pode ser obtidos em Bellman, Landauer.
Para obterem- se exemplos de arquitetura de simulação de sistemas de larga escala, sugere- se Landauer e Bellman.
Para outros modelos baseados em Engenharia de Software, consultar Landauer e Bellman, Carvel, Serrano e Oca, Chiang.
E, para exemplos de Engenharia de Sistemas com questões envolvendo sistemas computacionais complexos, consultar os trabalhos de Landauer e Bellman e Landauer, Bellman e Gilliam.
A agentificação geralmente ocorre por meio de a agregação de uma camada (ou várias camadas) à arquitetura original do sistema legado.
A idéia básica é habilitar componentes dos sistemas pré-existentes a comunicarem- se e cooperarem com outros agentes e processos.
Desta forma, segundo Wooldridge e Jennings, a funcionalidade do software pré-existente pode ser estendida para trabalhar com outros componentes do outro software recentemente desenvolvido.
Sob o ponto de vista prático, a agentificação cria um conjunto de interfaces personalizadas que permitem utilizar recursos num sistema heterogêneo.
Entretanto, agentificar não é simplesmente agregar uma interface para um recurso.
Agentificação permite a criação de uma interface para a &quot;utilização «de um determinado recurso.
Logo, o enfoque está centrado na forma por a qual o recurso é utilizado.
Ou seja, o estudo das maneiras que os recursos podem ser utilizados.
Existirão agentificações específicas e diferenciadas em virtude de o que se quer encapsular.
Combinações de recursos que freqüentemente trabalham juntos podem ter uma única agentificação.
Entretanto, podem ser necessárias várias agentificações separadas para se utilizar um único recurso.
Quando, por exemplo, houver necessidade de se representar diferentes caminhos.
Sob o ponto de vista externo, todos os elementos agora &quot;encapsulados «passam a ser vistos como agentes.
A agentificação demanda uma função de interpretação em dois sentidos:·
Trata as solicitações externas de outros agentes, mapeando- as dentro de as chamadas, no código legado;·
Trata as solicitações do código legado e as mapeia dentro de um conjunto apropriado de comandos que permitem a comunicação dos agentes.
Segundo Genereseth e Ketchpel, pode- se propor três abordagens diferentes para a agentificação de sistemas pré-existentes, são elas:
Transducer: A implementação de um programa tradutor que atua como um mediador entre um programa existente e outros agentes.
O tradutor aceita mensagens dos outros agentes, traduz as mensagens para o protocolo de comunicação do programa nativo e as passa para outro programa ou ambiente.
O tradutor, então, aceita as respostas do programa, traduz para uma linguagem de comunicação entre agentes (ACL -- Agents Communication Language) e envia as mensagens resultantes para outros agentes.
Esta abordagem tem a vantagem de não requerer conhecimento do outro programa que não seja sua interface de comunicação.
Ela é, conseqüentemente, especialmente utilizada em situações em as quais o código do programa é indisponível ou delicado para modificações.
Esta abordagem também trabalha com outro tipo de recurso, como por exemplo, arquivos e pessoas.
É fácil escrever um programa só de leitura ou modificar um arquivo existente com um formato especial e desta maneira proporcionar acesso para este arquivo via ACL.
Simultaneamente, é possível proporcionar a um usuário uma interface gráfica que permite que esta pessoa interaja com o sistema numa linguagem gráfica especial, a qual é convertida para ACL e vice-versa.
Esta abordagem não é fácil de ser implementada.
Traduzir não é uma tarefa trivial e pode implicar numa complexa rede de tomadas de decisão que pode onerar sobremaneira o projeto.
Muitas vezes para que a tradução se efetive existe a necessidade de se criar uma linguagem para comunicação, razão esta para que o ACL introduzido por a FIPA seja amplamente utilizado.
Em esta abordagem é recomendável considerar- se as recomendações da FIPA (Foundation for Intelligent Physical Agents) onde a linguagem de comunicação padrão é observada.
Muito do processo de agentificação é, na sua essência, uma viabilização da comunicação entre os agentes para permitir a sua interação.
Wrapper: Consiste na implementação de uma camada adicional para o programa existente (vide Figura 2.2), provendo- o com a capacidade de ele se comunicar através de uma linguagem ACL.
Em outras palavras, implementar uma agentificacão é injetar código dentro de um programa para permitir que ele se comunique em ACL.
A linguagem ACL trata- se de uma especificação formal da FIPA1 que é uma organização que tem por objetivo a padronização dos principais tópicos associados à área de SMA.
Esta especificação estabelece diretrizes sobre o funcionamento da ACL, cobrindo desde a estrutura das mensagens que a compõem até a descrição da base formal que cada uma necessita para traduzir o seu significado.
Como ponto de partida, tem- se a descrição do mecanismo de transporte das mensagens, que é centrado nas exigências de confiabilidade sem, contudo, restringir os desenvolvedores de bibliotecas da linguagem em aspectos particulares e relevantes tais como a escolha do protocolo de transporte.
Suas mensagens representam atos de comunicação, que nada mais são do que verbos relevantes para a manutenção de uma linha de conversação entre os agentes.
Os parâmetros das mensagens são responsáveis por informar especificamente o que cada uma de elas representa, servindo tanto para a viabilização da entrega e recebimento das mesmas como para a sua compreensão.
A especificação da FIPA descreve, ainda, exatamente o que cada ato de comunicação significa, tanto em alto nível (utilizando- se para isto de um texto explicativo simplificado) como usado nas construções de lógica de primeira ordem a fim de proporcionar o respaldo formal de que necessita para estabelecer um padrão.
A agentificação pode examinar diretamente a estrutura de dados do programa e modificar- las.
Além disso, deve ser possível injetar &quot;chamadas «fora de o programa de maneira a disponibilizar externamente informações e serviços.
Esta abordagem tem a vantagem de possuir maior eficiência que a abordagem da implementação de um programa tradutor (transducer), desde que a comunicação serial seja menor.
Ela também é adequada onde não há capacidade de comunicação de interprocessos no programa original.
Entretanto, isto requer a disponibilidade do código do programa.
Rewrite: A terceira é a mais drástica das abordagens.
Ela consiste em reescrever o programa original.
A vantagem desta abordagem é a possibilidade de aumentar sua eficiência ou capacidade além de o que seria possível em qualquer das duas abordagens anteriores.
Pode- se questionar tão drástica opção.
Porém, a agentificação neste caso aproveitaria todo o conhecimento modelado e adaptaria o código para a nova abordagem (vide Figura 2.3).
No caso de ambientes educacionais o conteúdo e as estratégias de ensino associadas ao sistema poderiam ser totalmente reutilizados, mudando a forma de acesso e coordenação das tomadas de decisão.
Landauer &amp; Bellman defendem uma nova abordagem para o desenvolvimento, integração e administração de sistemas heterogêneos baseada em duas classes de entidades de software:
Wrapping Knowledge Bases (WKBs) e Problem Managers (PMs).
Segundo Landauer, esta abordagem para a integração de software é chamada &quot;wrapping «a qual denomina- se &quot;agentificação «em língua portuguesa.
Partese da idéia de que agentificar um sistema já existente permite reutilização quase total do código, mantendo- se as funcionalidades e características deste.
Agentificar, sob o ponto de vista da IAD, é incluir um sistema ou ambiente dentro de um contexto SMA.
Para tanto, é necessário que este sistema passe a se &quot;comportar «como um agente ou pelo menos, tenha comportamentos que são peculiares de agente, como já mencionado anteriormente.
Entendendo- se &quot;comportamentos «como o conjunto de saídas observáveis do sistema.
A IAD, como uma subárea de Ia, possui no seu aporte teórico uma base psicológica para seus modelos.
Logo, ter- se como comportamento a percepção, reação e outros devem ser entendidos no contexto das metáforas utilizadas nos sistemas, ambientes para expressar o conjunto de idéias e abstrações associadas ao projeto de um programa.
A agentificação é baseada num processamento automático de informações qualitativas claras sobre todos os componentes do sistema e sua arquitetura de interconexões.
Segundo Landauer e Bellman, a teoria de agentificação tem quatro características básicas:
Support) que as permitem prover ao usuário vários tipos de ajuda, seja ele um humano ou um outro sistema computacional, são:
A agentificação abrange muito mais que &quot;como utilizar um recurso».
Também providência informações para ajudar a decidir quando o recurso é apropriado, por que é adequado ao problema e se pode ser utilizado no problema e contexto atual.
A agentificação de informações e processos forma interfaces personalizadas para utilizar recursos num sistema heterogêneo.
As características mais importantes que a agentificação traz para esta abordagem é a particularidade de tratar tudo o que faz parte do sistema como recurso.
A particularidade de tratar tudo que acontece no sistema como estudo do problema (Problem Study) permite tratar os PMs, como recursos de eles mesmos.
As flexibilidades de seleção de recursos e de problemas apresentados são as homogeneidades associadas ao processo coordenativo.
Segundo Bellman e Landauer e Bellman, cada agentificação é uma lista registros de &quot;interpretação de problemas «onde registro qual descreve um caminho em o qual os recursos podem ser utilizados para tratar um determinado problema.
Em esse ponto é possível ter alguns registros de interpretação para o mesmo problema se o recurso possui muitos caminhos diferentes de negociação.
Cada registro de interpretação de problemas possui uma lista de condições que precisam ser conduzidas para que o recurso possa ser considerado ou aplicado.
Estes conjuntos de condições são importantes em tempos diferentes.
Por exemplo, pode- se considerar um conjunto de recursos ou o planejamento de tempo na aplicação destes recursos.
Esta série de condições de tipos de dados e declarações de protocolo de interação (de como aplicar o recurso) permite o conhecimento qualitativo sobre o contexto ao qual ele é apropriado.
Esta ação é considerada como pré-condição para a aplicação deste recurso.
A pós-condição é o &quot;produto «oriundo da lista de designação de componentes do contexto.
Eles descrevem quais informações ou serviços este recurso torna disponível quando aplicado.
O primeiro passo é decidir sobre o nível de detalhe que se deseja atuar.
Em todos os níveis de detalhes o projetista determina quais flexibilidades são requeridas em cada nível, isto é, se recursos alternativos poderiam tratar os problemas daquele nível, até que não haja mais alternativas de interesse.
O segundo passo é identificar os problemas que ocorrerão no sistema, e o terceiro passo consiste em identificar os recursos que tratarão destes problemas.
Estes dois passos são entrelaçados porque cada nível de detalhe de recursos carrega um conjunto de problemas para o próximo nível.
Cada novo problema implica que existem alguns recursos que precisam ser identificados a fim de se poder tratar- los.
Este processo não tem que iniciar por o topo.
Ele pode ser iniciado em qualquer um dos passos da diretiva.
Utilizando- se todo o conhecimento inicial sobre funcionalidade ou ambiente, expandindo o contexto e refinando os problemas e recursos mais tarde.
Em estes dois passos, os mecanismos de interação com usuário serão identificados.
O terceiro passo consiste na identificação de tarefas a serem executadas como problemas.
Pelo menos, inicialmente, no nível de menor detalhe, qualquer componente conhecido ou esperado como recurso, um tipo de decomposição de outros recursos em subtarefas, devem ser considerados.
O quarto passo é definir o mapeamento de problemas para recursos.
Este passo é também em parte entrelaçado com os dois anteriores, uma vez que problemas e recursos são identificados juntos, mas isto também envolve coletar mais das condições do contexto sob as quais recursos particulares são selecionados, abstraindo a seleção apropriada de critérios e requerimentos, e considerando recursos alternativos para problemas dados.
O quinto passo é como escrever as agentificações propriamente ditas.
Isto é, tornar o mapeamento acima em dados de máquina interpretáveis sobre cada uso de cada recurso, incluindo o contexto apropriado, o serviço e requerimento de dados e produtos e serviços proporcionados.
Este passo está entrelaçado com o sexto passo, que é escrever o Gerenciador de Problema e outros recursos de infra-estrutura que interpretarão a agentificação para vários problemas.
É importante lembrar aqui que o formato das entradas WKB é variável, assim qualquer mecanismo que seja apropriado pode ser utilizado.
Para exemplos mais simples, uma chave direta e método de par de valores é suficiente, e leitores para aquele formato são simples de escrever.
Desenvolvedores tem a escolha de fazer um critério de seleção (e outras entradas para WKB) mais complexo, usando uma linguagem de maior capacidade de representação de conhecimento.
A chave aqui é que as agentificações não deveriam conter muitos detalhes que são necessários para a aplicação em si, pressupondo- se que detalhes extras do caminho evolucionário do sistema sejam conhecidos, e eles quase sempre não são conhecidos o suficiente, a menos que um seja popularmente diminuído a ponto que ele se torne completamente conhecido.
O sétimo passo é determinar se recursos de infra-estrutura são ou não são mais necessários, tais como planejadores, roteiros, interpretadores de arquitetura, ou outros recursos que tratam com problemas ou recursos fora de a usual coleção de Problem Managers.
Estes recursos devem ser escritos, junto com suas agentificações e os processos que os lêem.
Se o formato da WKB para esta agentificação é o mesmo que o originalmente proporcionado nos passos cinco e seis, então os leitores já estão disponíveis.
Mas estes novos recursos podem já ter outros métodos de seleção, então o formato da WKB pode ser diferente.
Estes passos são então repetidos, para todas as partes do sistema que se deseja agentificar, até que projeto seja completo.
O qual ocorre quando há código para todos dos recursos (isto é, a construção bottom-up de programas individuais como recursos encontra a identificação top-down dos requerimentos como recursos).
A história da Matemática mostra que esta ciência foi construída por o homem através dos tempos e a gênese desse saber é, também, um poderoso instrumento didático para possibilitar que as crianças raciocinem e desenvolvam operações mentais criativas.
O software denominado Matematiquinha, desenvolvido por Ribeiro e Ribeiro, tem a finalidade de auxiliar o professor no ensino do sistema decimal e das operações de adição e subtração para crianças das séries iniciais, tendo como base um jogo educacional utilizado por professores no ensino da Matemática, conhecido como Material Dourado.
O Material Dourado é composto por um grande número de cubos e barras confeccionados na maioria das vezes em madeira, representando a unidade, a dezena e a centena.
É utilizado no Ensino Fundamental como recurso ao ensino de Matemática em séries iniciais.
Possibilita à criança construir, na prática, o sistema de numeração decimal, através da manipulação de materiais concretos, sendo considerada uma ferramenta adequada a crianças de séries iniciais.
O Material Dourado foi estruturado com o objetivo de mostrar às crianças os significados de unidade, dezena e centena, possibilitando à elas a oportunidade de construir tais conceitos.
Cada caixa de Material Dourado é composta por um total de seiscentas e onze peças confeccionadas em madeira, de entre elas:
Quinhentos cubos pequenos que representam as unidades;
Cem barras que representam as dezenas;
Dez quadrados que representam as centenas e um cubo grande que representa o milhar.
Baseado nesta metodologia desenvolveu- se um sistema que fosse semelhante a esse jogo computadorizado.
Segundo Aberkane e Berdonneau, para a criança esta iniciação pode ser muito complexa, pois ela traz na bagagem apenas uma noção de quantidade a qual é difícil relacionar com o sistema decimal.
Por este motivo, optou- se por o desenvolvimento multidisciplinar de um software educacional envolvendo profissionais das áreas de Informática, Matemática e Pedagogia.
O software tem a finalidade auxiliar o professor no aprendizado das crianças do sistema decimal e das operações de adição e subtração.
O desenvolvimento do Matematiquinha buscou diversificar o ensino de Matemática, porém utilizando- se de uma base consolidada que é o Material Dourado.
Desta forma, procurou- se desenvolver um sistema semelhante ao Material Dourado através de uma alternativa atrativa de ensino utilizando- se dos computadores, ferramenta esta que tanto fascina grande parte das crianças.
O trabalho não pretende substituir a utilização do Material Dourado, pois se tem ciência de que os alunos, nesta fase inicial de aprendizagem, têm a necessidade de manipular o Material Dourado na sua forma concreta.
A intenção é oferecer uma nova alternativa de auxílio ao ensino capaz de auxiliar professores e crianças, tendo como referência os trabalhos de Augustine, Lollini e Tarja.
Segundo Aberkane e Berdonneau, através da utilização do Matematiquinha, as crianças aprendem brincando no computador as primeiras noções e operações matemáticas, desenvolvendo atividades lógicas que envolvem:
Em o processo de criação desse software, através de orientação qualificada, agrega- se ao Matematiquinha alguns requisitos pedagógicos fundamentados por uma teoria de aprendizagem que busca atender às diferentes concepções didáticopedagógicas das escolas de séries iniciais e observa os requisitos necessários à boa assimilação do conteúdo por parte de o aluno.
De entre estes vários requisitos didáticopedagógicos, destacam- se:·
A utilização de formas criativas e dinâmicas de apresentação dos conteúdos de iniciação à matemática oferecendo uma diversidade de problemas que vão desde a abordagem tradicional até aqueles que estão ligados ao cotidiano do aluno;·
Análise de diferentes concepções do processo de ensino/ aprendizagem, bem como as metodologias e as técnicas necessárias à produção do Matematiquinha para tornar- lo apto a ser utilizado como recurso didático no ensino da matemática em séries iniciais.
Com base nestes requisitos, o Matematiquinha foi projetado utilizando a técnica de exercício-e-prática, sendo organizado em diferentes seções que objetivam:
A ferramenta utilizada no desenvolvimento da versão tutorial foi o Flash 4.0, da Macromedia2.
A interface do Matematiquinha utiliza muitos ícones com o objetivo de facilitar a interação com o usuário, possibilitando uma melhor compreensão na visualização.
O software é destinado a crianças que já saibam ler e escrever, pois existe uma descrição textual da ação dos ícones apresentados, que é ativada quando o mouse é passado sobre o ícone desejado.
As diversas telas apresentadas no Matematiquinha apresentam sempre os seguintes ícones padrão:·
Ícone de ajuda (A):
Este ícone tem por finalidade esclarecer algumas dúvidas que, por ventura, o professor possa ter sobre a realização do exercício em questão, para auxiliar o aluno nas ações a serem feitas, ao realizar a tarefa proposta no exercício.·
Ícone botões de troca (B):
Estes ícones são compostos de três botões, cada qual com uma ação diferente:
A) botão troca dez unidades por uma dezena;
B) botão troca dez dezenas por uma centena;
C) botão troca uma dezena por dez unidades.
Em esta versão o botão troca uma centena por dez dezenas não se justifica, porque não existe uma fase de divisão e a subtração é feita apenas com dezenas e unidades.·
Ícone caixa de perguntas (C):
Em esta área, é apresentada ao aluno a ação a ser realizada por o mesmo.
Ex: Some:
Quatro dezenas e três unidades+ seis unidades.·
Ícone personagem (D):
Este ícone representa o personagem utilizado no Matematiquinha e que acompanhará a criança por entre os módulos tentando estimular- la a prosseguir.
Ele busca mostrar à criança o resultado de suas ações, tanto em termos de acertos quanto de erros, neste último caso convidando- à fazer novamente.
O personagem criado foi baseado na afinidade que as crianças têm por animais de estimação, representado no trabalho por um &quot;cachorrinho».·
Ícones de grandezas (E):
Os ícones de grandezas são os principais responsáveis por as ações nos exercícios realizados, durante a aprendizagem nos módulos.
Eles dividem- se em três grandezas:
Unidade, constituído por um cubo;
Dezena, representada por uma barra, composta por dez cubos e Centena, um quadrado, constituído por dez barras.·
Ícone próximo (F):
Este ícone em forma de seta oferece ao aluno a opção de seguir para a próxima seqüência de exercícios, indicando que ele passou de nível.
Esta opção só será habilitada por o programa quando o aluno acertar quatro exercícios num mesmo nível, porém, ele não fica obrigado a mudar de nível.·
Ícone sortear e confirmar (G):
Estes ícones são em forma de botão e suas funções são o` botão sortear', que mostrará na tela a ordem do exercício, informando ao aluno o que deve ser respondido e o` botão confirmar', o qual, ao ser pressionado, informará ao aluno se ele respondeu corretamente ou não.·
Ícone lixeira (H):
Utilizado para remover qualquer uma das grandezas que o usuário tenha colocado a mais na área de trabalho, bastando para isto arrastar aquela que deseja remover para cima da lixeira, quando, então, a ação de exclusão é realizada, com um som característico, que a confirma.
É importante salientar que o som poderá ser retirado, tanto por o aluno, quanto por o professor.
Em caso de erro, durante a execução de qualquer um dos exercícios propostos por o software, o personagem movimenta horizontalmente a cabeça emitindo um som de negação que pode ser desativado, se o usuário desejar.
Paralelamente, aparece no rodapé da tela uma mensagem.
Esta mensagem diz ao aluno para revisar sua resposta e tentar novamente.
Em os exercícios mais complexos, onde vários erros podem ser cometidos numa mesma resposta, a mensagem de rodapé também dá ao aluno pistas de quais erros foram cometidos.
No caso de mais de três erros cometidos no mesmo nível, a mensagem de rodapé comunica ao aluno que ele deve chamar seu professor.
O aluno recebe então as explicações necessárias para o bom desempenho naquele módulo, o número de erros é zerado e a criança pode prosseguir.
Desta forma, o Matematiquinha procura expressarse sem inibir ou constranger os alunos.
Em caso de acerto, o personagem movimenta verticalmente a cabeça, emitindo um som de afirmação e incentivo.
Paralelamente, a mensagem de rodapé parabeniza o aluno.
No caso de mais de três acertos num mesmo nível, a mensagem de rodapé comunica ao aluno que ele está apto a passar para o próximo nível.
Desta forma, o Matematiquinha consegue expressar- se, buscando incentivar os alunos.
O professor deve trabalhar os conceitos de informática básica necessários para utilização do sistema e gerenciar a migração, do concreto (atividade de sala de aula) para o ambiente.
Além disso, o professor avalia o desempenho de cada aluno auxiliando- os quando necessário.
Este é um dos pontos críticos observados na utilização do ambiente em laboratório.
Um único professor para atender a um grupo de alunos.
Este contexto dificulta o atendimento dos alunos por parte de o professor.
Um dos fortes motivos de migrar- se para uma arquitetura baseada em STI.
De esta arquitetura busca- se a idéia do atendimento personalizado e da assistência no momento que o aluno tem a dúvida ou a dificuldade.
Além de o mais, existe a possibilidade do registro das interações para posterior análise, como já desenvolvido no grupo em trabalhos anteriores, como o caso do ambiente quero-Quero de Comunello.
O software procura introduzir o sistema decimal a partir de o conceito de trocas, ou seja, há um campo específico, onde o aluno insere as unidades e, após dez de elas, permite- se à troca por parte de o sistema.
É importante ressaltar que esta é uma das fases mais importantes para que o aluno possa construir o conhecimento.
Para efetuar a troca, o aluno faz uso de procedimentos, que o induzam a concluir que troca não é uma simples substituição de objetos, mas sim de grandezas.
O objetivo é ilustrar a possibilidade de trocar dez objetos de um campo de menor grandeza por um único objeto pertencente ao campo de maior grandeza, bem como, um único objeto de um campo de maior grandeza por dez objetos pertencentes ao campo imediatamente de menor grandeza, sem que o valor quantitativo seja alterado.
A seqüência utilizada no sistema para que o aluno possa efetuar trocas consiste dos seguintes procedimentos:·
Quando o aluno tiver inserido mais de dez modelos de uma única grandeza, o software sugere a necessidade de troca por um modelo de maior grandeza, ressaltando o botão de troca correspondente, contornando com uma linha vermelha os dez modelos que devem ser trocados e aparecendo uma mensagem de rodapé afirmando, por exemplo, que uma dezena é igual a dez unidades;·
O aluno deverá então optar por apertar o botão de troca ressaltado;·
O sistema então fará a troca de dez modelos de grandeza menor por um modelo de grandeza maior, colocando- o já em seu campo correspondente e subtraindo de dez o rótulo abaixo de o campo de menor grandeza e adicionando de um o rótulo do campo de maior grandeza.
Com esta metodologia, pretende-se que o aluno compreenda a mecânica e o significado das trocas e conseqüentemente entenda o conceito, ou seja, a razão por a qual as trocas são efetuadas.
A mecânica definida no parágrafo anterior aplica- se igualmente aos campos das dezenas e das centenas.
Durante todo o processo de planejamento e implementação do Matematiquinha tentou- se respeitar tanto a independência como a autonomia intelectual da criança.
Para o aprendizado da criança ser completo e ela poder construir seu conhecimento sem que o programa a induza a resposta correta, é necessário fazer diversos exercícios, cada qual com um objetivo distinto, para a criança poder adquirir conceitos básicos sobre a matemática.
A estes exercícios chamou- se de níveis de conhecimento, sendo necessário realizar- los de uma forma seqüencial e ordenada.
Este nível é dividido em dois subníveis de igual interface e funcionalidade.
Em o subnível A do Nível 1 não será necessário realizar trocas, pois sendo ele o primeiro subnível tem por objetivo ambientar a criança com a interface, fazendo- a responder aos exercícios.
Em o Subnível B, após a criança praticar a distribuição dos modelos de grandezas, realizadas no Subnível A, ela começa a realizar trocas de unidades por dezena e dezenas por centena, utilizando os botões de troca.
Em a lateral esquerda desta interface, haverá modelos de unidade, dezena e centena, que podem ser visualizados na Figura 1 (letra E) e que funcionam como &quot;abastecedores «de cada modelo, ou seja, o aluno clica com o mouse num dos modelos e ele aparecerá no campo correspondente.
Com esta metodologia, o Matematiquinha pretende introduzir a percepção de quando e como efetuar as trocas, alcançando desta maneira o objetivo de reforçar os conceitos de centena, dezena e unidade, proporcionando ao aluno a compreensão de ordens e classes do sistema de numeração decimal.
A função deste módulo é trabalhar com as unidades, dezenas e centenas, tendo como objetivo reforçar a relação de valor dos algarismos, conforme a posição em que eles aparecem num número fornecido por o sistema.
Os exercícios propostos neste módulo apresentam ao aluno um valor, na forma numérica que deverá ser representada por ele com o material dourado, desmembrando cada algarismo e colocando o número de modelos em cada campo, correspondente à sua posição.
Proporciona ao aluno exercícios que o conduzam a escrever o número correspondente, por extenso, relacionando cada palavra escrita com o valor posicional que cada algarismo está assumindo naquele momento.
Esta interface é representada em forma de tabela, onde na região imediatamente acima de as três linhas (Número, Valor e Nome) estão as grandezas distribuídas, na primeira linha o aluno responde com o número correspondente à grandeza distribuída acima, na segunda, preenche- se com o valor do número da primeira linha e na terceira, é necessário que o aluno escreva por extenso o valor das grandezas juntas representadas.
Sua interface assemelha- se à idéia de dois conjuntos, sendo comparados lado a lado por os sinais de igual, maior e menor.
O módulo possui uma seqüência determinada de exercícios e tem como missão levar a criança a fazer comparações quantitativas dos conjuntos apresentados nos exercícios, construindo o conhecimento necessário para responder corretamente se a quantidade do valor numérico associado no primeiro conjunto é igual ($ ), maior(\&gt;) ou menor (do que no segundo.
A adição é a primeira operação básica que o sistema auxilia no ensino, sendo para melhor compreensão dividida em dois subníveis de dificuldade:
O Subnível A, que propõe exercícios simples de soma de adição de dezenas e unidades a unidades e o Subnível B, o qual propõe exercícios mais complexos, utilizando- se de dezenas e unidades somados a dezenas e unidades.
A interface deste módulo traz uma representação de uma operação de adição, usando- se os modelos do material dourado.
A o começar o exercício, o aluno visualiza os modelos de grandezas distribuídas nos seus campos correspondentes e seu valor ao lado.
Ao lado de a tabela maior, temos uma conta de adição montada.
Para poder responder, o aluno tem que fazer uso dos abastecedores que se encontram à esquerda da tabela e digitar o resultado no campo correspondente.
Em este módulo, tem- se um número a ser subtraído do número inicial.
Para que esta operação possa ser realizada e visualizada por o aluno, dois valores são representados numericamente, sendo que apenas o primeiro valor (minuendo) é representado por barras e cubos.
O aluno deve marcar no minuendo, com o mouse, o número de grandezas a serem subtraídas.
Cada grandeza clicada fica marcada por um &quot;X «e, simultaneamente, aparece no segundo campo (subtraendo) uma cópia de ela, indicando que foi retirada do minuendo.
Para completar a resposta, o aluno deverá inserir no resto, clicando nos abastecedores os números correspondentes às grandezas, que sobraram no minuendo.
O Matematiquinha foi testado com alunos em situação de sala de aula, nas turmas da especialista que auxiliou a modelagem do sistema.
A professora teve o papel de especialista no domínio e na metodologia interferindo diretamente nas decisões e soluções adotadas no projeto original.
A idéia de construir uma versão com um assistente, para auxiliar cada usuário, tomou forma e se concretizou devido a as dificuldades encontradas por a professora que observou a dificuldade em acompanhar os alunos nas atividades de laboratório onde não é possível o professor se fazer presente para todos os alunos, durante todo o tempo.
Logo, utilizar um assistente virtual que registre as informações geradas durante as interações do aluno com o sistema, e que seja capaz de auxiliar o aluno em situações de erro e/ ou dúvida, surgiu como uma opção bastante promissora.
A fim de contemplar estas novas características optou- se por o uso da abordagem de agentes para resolver o novo problema proposto por a professora.
O assistente virtual foi imediatamente associado à idéia implícita nos STI.
Utiliza- se por base o trabalho de Schuck e Giraffa onde ele descreve as funcionalidades de um assistente que seleciona exercícios, dicas e ajuda para um aluno levando em consideração os resultados de sua interação com o sistema.
O Matematiquinha contou com a supervisão pedagógica de uma especialista em Matemática que atua, também, nas áreas de Geometria, Metodologia do Ensino da Matemática e prática de Ensino Fundamental e Médio.
Esta especialista continuou seu trabalho de consultoria neste novo projeto desenvolvido ao longo de esta dissertação de mestrado.
Esta continuidade foi um dos fatores-chave para obtenção do êxito do cronograma e atividades alcançadas.
Considera- se que um dos fatores de risco num projeto de software educacional é justamente a integração e participação do especialista no domínio da aplicação.
Este é um fator crítico que leva ao atraso do cronograma ou a baixa qualidade pedagógica do sistema.
Uma vez que as decisões desde a escolha dos exercícios, elementos da interface, mensagens e outros itens dependem diretamente de sua colaboração e &quot;expertise».
O Matematiquinha foi desenvolvido utilizando- se a ferramenta Macromedia Flash 4.0.
Suas características proporcionaram facilidades em termos de recursos de programação básica, tais como:
Criação de arquivos executáveis de tamanho reduzido, criação de animações, visualização das animações via Internet, etc..
No entanto, a ferramenta não contempla facilidades de implementação para paradigma orientado a objeto utilizado para a construção do Mm. Em função de as novas funcionalidades e características incorporadas na nova versão foram necessárias várias escolhas tecnológicas.
Optou- se por utilizar- se a linguagem de programação Java.
A natureza orientada a objetos de Java facilita o desenvolvimento de componentes reutilizáveis e o aproveitamento de componentes de outros desenvolvedores.
Como Java possui conectividade com uma ampla gama de servidores de banco de dados e como o Mm necessita de um banco de dados que armazene todas as informações referentes ao aluno de maneira remota, novamente a linguagem escolhida facilitou o trabalho de desenvolvimento.
O processo de construção do Matematiquinha Multiagentes (Mm) se iniciou a partir de o estudo das funcionalidades do antigo sistema (Matematiquinha).
O sistema antigo apresentava diversas figuras, sendo que muitas de elas podiam ser deslocadas para pontos diferentes da tela.
Logo, o primeiro passo foi colocar um objeto no Panel (já inserido no Frame), e após «&quot;aplicar&quot;·· uma imagem, do tipo».
Gif «neste objeto.
Assim, as figuras estáticas da tela já poderiam ser visualizadas.
Porém, para as figuras às quais era permitido o deslocamento, foi necessário adicionar um evento no Panel já disponível por a linguagem Java -- painelMousePressed (MouseEvent evt).
Em este evento foi preciso detectar se no local do Panel, onde ocorreu o clique, existia uma figura e, se a ela era permitido o deslocamento.
Uma vez feita esta verificação, foi necessário calcular a diferença de posição entre o mouse e a figura, para que, a cada movimento do mouse, a figura fosse reposicionada de acordo com a posição desejada, sempre respeitando a diferença calculada.
Após concluir o deslocamento da figura, constatamos que no momento do deslocamento passava &quot;por baixo «de algumas figuras na tela.
Após muitas observações, concluímos que a figura arrastada passava &quot;por baixo», apenas, daquelas que haviam sido inseridas anteriormente, a ela, no Panel.
Desta forma, foi preciso, que no momento do clique, a figura».
Fosse removida e novamente adicionada como a primeira no Panel.
Assim, a figura arrastada pode passar por cima de as demais.
Cabe lembrar que adicionar uma figura por primeiro no Panel significa apenas mudar a sua prioridade perante os outros componentes préexistentes, não significando de forma alguma que esta figura ira aparecer antes das outras.
Desta forma, a infra-estrutura para montar o primeiro exercício já estava pronta.
A Figura 4.1.1 apresenta o algoritmo/ implementação do processo descrito.
Em alguns exercícios há necessidade de realizar trocas de dez grandezas menores por uma maior ou vice-versa.
Criou- se, então, um painel de troca, para onde as figuras são arrastadas a fim de realizar a troca e converter- las para a (s) nova (s) grandeza (s).
Entretanto, ao soltar a figura no painel de troca, poderia ocorrer sobreposição dos objetos, desta forma foi necessário criar um algoritmo, vide implementação na Figura 4.1.2, para que quando este problema ocorresse, o objeto que se sobrepôs fosse reposicionado num local &quot;livre «do painel de troca.
Para certificarmos se os objetos arrastados eram colocados no painel de troca, utilizamos comparações de posição destes objetos com o intervalo de área do JLabel (painel de troca).
Todos os exercícios, com exceção do Seleção de Círculos, do Comparação Quantitativa e do Identificação e Escrita, contam com uma rotina que verifica se o número de modelos abastecidos por o usuário corresponde com o número sorteado.
Em esta rotina, nos exercícios de Adição, Subtração, Multiplicação e Divisão, foi adicionada a verificação dos campos de respostas digitadas, justamente por o fato de haver a necessidade de realizar as operações correspondentes ao exercício.
Esta rotina é executada de maneira imperceptível ao usuário.
A implementação desta rotina no exercício da adição como apresentado na Figura 4.1.3.
Em o exercício de Seleção de Círculos, identificamos o círculo (objeto) onde ocorreu o evento (clique), bem como, se o objeto que recebeu o clique estava &quot;marcado «ou não.
Esta verificação foi feita através da variável &quot;ocupado «já citada anteriormente.
De acordo com o valor desta variável o circulo troca de cor, e o contador da grandeza clicada era incrementado ou decrementado.
Foi necessário incluir objetos JTextField para que o aluno pudesse digitar caracteres.
Isto ocorreu em diversos exercícios como:
Identificação e Escrita, Comparação Quantitativa, Adição, Subtração, Multiplicação e Divisão.
Em o exercício de Identificação e Escrita, foi necessário criar uma frase correspondente ao número sorteado com suas eventuais conjunções, para posteriormente comparar- la com o &quot;nome (por extenso) «digitado por o usuário.
Este mesmo processo de comparação é realizado nos exercícios citados anteriormente, porém no que se refere ao valor numérico.
Em o exercício de Subtração a tela é dividida em duas sub-regiões.
Em este caso, somente a sub-região superior receberá as grandezas provenientes dos abastecedores.
O exercício de Multiplicação por sua vez, divide a região da tela que recebe as grandezas provenientes do abastecedor, em cinco sub-regiões.
Pois um dos produtos da multiplicação terá o valor máximo correspondendo ao número cinco.
As cinco subregiões poderão ser abastecidas, porém uma rotina ficará responsável por detectar de forma imperceptível ao usuário, se o número de sub-regiões abastecidas é igual ao menor produto sorteado.
A implementação desta rotina consta na Figura 4.1.7.
O exercício de Multiplicação possui duas rotinas, estas possuem funcionalidades semelhantes às citadas anteriormente, porém, ao invés de realizar operações de soma ou subtração dos fatores e das grandezas, fazem a multiplicação dos mesmos.
Vide implementação muito semelhante destas duas rotinas na Figura 4.1.5.
O Agente Assistente está presente em todos os exercícios do Mm..
Ele atua com diversos sensores para detectar possíveis erros cometidos por o aluno.
Desta forma, a cada novo exercício o agente assistente verifica o perfil do usuário para saber quantos erros ele cometeu no exercício.
No caso de o aluno nunca ter jogado o exercício selecionado por o Tutor esta verificação não tem grande utilidade já que a quantidade de erros, de todas as categorias daquele exercício, estará zerada.
Entretanto, se o aluno havia começado a jogar um exercício e decidiu sair do sistema salvando a sua interação esta consulta ao perfil do aluno torna- se de fundamental importância, pois na sua interação anterior o aluno pode ter cometido algum tipo de erro.
No decorrer de a interação do aluno com o exercício, o Agente Assistente tem o papel de monitorar a mesma, para que no momento em que o aluno cometer erros, ele possa informar ao Agente Tutor qual a Categoria, bem como qual a quantidade de erros já cometidos em ela.
A rotina que implementa este processo consta na Figura 4.1.9.
Por o fato do agente Assistente estar presente em todas as fases ele é declarado como &quot;static».
Ou seja, o Agente Assistente é uma variável de classe, assim todas as referencias feitas a esta serão sempre ao mesmo objeto.
Este fato facilita consideravelmente a implementação, uma vez que todos os exercícios, e também os exemplos em que há necessidade de interação com o aluno, irão fazer referência ao mesmo objeto da classe Assistente.
O Agente Assistente tem uma série de rotinas que acessam o Banco de Dados, a rotina que verifica o perfil do usuário, por exemplo, é executada a cada novo exercício selecionando por o Agente Tutor.
É também responsabilidade do Agente Assistente atualizar os erros cometidos por o aluno ao final de cada exercício, bem como guardar, no banco de dados, a informação dos exercícios que já foram completados.
Desta forma, a responsabilidade de atualizar o perfil do aluno é do Agente Assistente.
A implementação das rotinas, que conectam o Agente Assistente ao Banco de Dados, consta na Figura 4.1.10.
O Mm utiliza um banco de dados que armazena todas as informações referentes ao aluno de maneira remota.
Ele contém informações tais como:
Dados do aluno:
Código do aluno, nome do aluno, palavra secreta (senha), idade e sexo, e código da turma.
Todas estas informações são armazenadas na tabela Aluno;
Dados da turma:
Código da turma, nome da turma, série e código do professor.
Estas informações são armazenadas na tabela Turma;
Dados do professor:
Código do professor, nome do professor, senha do professor.
Estas informações são armazenadas na tabela Professor;
Dados do exercício:
Código do exercício e nome do exercício.
Estas informações são armazenadas na tabela Exercícios.
Esta tabela possui com finalidade o armazenamento dos exercícios concluídos por o usuário;
Dados do Grupo:
Código do grupo, nome do grupo e código da categoria.
Estas informações são armazenadas na tabela Grupo;
Dados da categoria:
Código da categoria e código do grupo.
Estas informações são armazenadas na tabela Categoria;
Dados relativos ao perfil do aluno:
Código do aluno, quantidade de erros, código do exercício e código da categoria.
Estas informações são armazenadas na tabela Perfil;
O banco de dados possui dois relacionamentos:
O relacionamento Joga, que utiliza as informações código do aluno e código do exercício e o relacionamento Possui, que utiliza as informações código do exercício e código do grupo.
A decisão de manter o banco de dados fisicamente localizado no servidor da escola justifica- se por a facilidade nas atualizações uma vez que elas seriam feitas num único local.
Entretanto, o banco de dados centralizado no servidor pode ocasionar congestionamentos quando muitas consultas forem efetuadas simultaneamente, o que poderia ocorrer quando houvesse a necessidade do sistema freqüentemente consultar o banco de dados buscando informações referentes a todos os usuários que estiverem interagindo com o sistema.
De forma a contornar este possível problema, a interação do banco de dados com o Mm ocorrerá da seguinte forma:
Em o momento em que o aluno efetuar o login no sistema, as informações referentes a este usuário serão copiadas para a máquina local.
Elas ficarão armazenadas em memória na máquina do usuário.
O sistema, então, gerência localmente as informações de acordo com as interações do usuário com o sistema e a cada exercício concluído, uma conexão ao banco de dados permite a atualização das informações.
Caso o aluno, acidentalmente, desligue a máquina, somente serão perdidos os dados referentes ao exercício ainda não concluído.
Os dados referentes à solução dos exercícios anteriormente resolvidos são salvos automaticamente, após sua conclusão.
Caso o aluno decida sair do sistema sem completar um determinado exercício, ele terá a opção de salvar as informações provenientes da interação com o exercício em questão.
Se for esta a opção do aluno, as informações serão salvas no banco de dados, possibilitando o retorno ao exercício mencionado no próximo login.
Caso ele opte por sair sem salvar, as informações referentes ao exercício serão perdidas.
Em este caso, não haverá conexão com o banco de dados.
A cada conclusão de exercício as informações são salvas de maneira automática.
A forma como os dados e as informações deveriam ser armazenados foi, inicialmente, fonte de grandes preocupações no âmbito do grupo.
Em esta fase fez- se o processo de escolha do banco de dados a ser utilizado e descrito a seguir.
Basicamente um banco de dados envolve cinco tarefas:
Organização, inserção, recuperação, eliminação e atualização de dados.
Os Sistemas de Gerenciamento de Banco de Dados (SGBDs) apresentaram uma grande evolução nos últimos anos.
Esta evolução permitiu que os SGBDs se tornassem o componente principal de modernos ambientes de computação.
Atualmente as ferramentas de banco de dados comerciais, tais como, Oracle, SYBASE e SQL Server, possuem um custo demasiado alto para atuar junto a um sistema de pretensões puramente acadêmicas como o Mm..
Em função deste contexto o processo de escolha recaiu dentro de o âmbito dos SGBDs baseados em software livre.
O que difere nestes sistemas é a forma com que eles são distribuídos.
Em alguns de eles tem- se a permissão de copiar- los e até mesmo estudar suas estruturas.
Pois, os códigos fonte são disponíveis sem custo.
Existem vários SGBDS baseados em software livre que implementam desde modelos relacionais (miniSQL MySQL), passando por o objeto-relacional (PostgreSQL), orientados a objetos (Ozone-DB) e temporais (Tiger).
De entre eles, selecionou- se dois finalistas:
O MySQL e o PostgreSQL.
Eles foram selecionados por terem grande popularidade dentro de o movimento software livre e são os que estão sendo mais utilizados comercialmente.
Além de darem suporte as operações necessárias, tais como criação, atualização e remoção de tabelas e dados nas mesmas.
Devido a o fato do nosso processo de seleção ficar restrito a apenas dois SGBDs apresentará- se- uma breve descrição de cada um de eles bem como suas principais características, fundamentando, desta maneira a decisão final no processo de escolha.
A descrição e as características doravante apresentadas são baseadas em Lacerda.
O MySQL é um dos bancos de dados mais utilizados para a Internet, principalmente por servidores LINUX.
Uma de suas vantagens é ser &quot;leve «e funcionar sob vários sistemas operacionais, sendo de fácil instalação e administração.
Foi desenvolvido para administrar banco de dados gigantescos, de forma mais rápida que qualquer banco de dados possa oferecer num hardware não muito caro.
É compatível com as diversas linguagens para Internet ­ PHP, JAVA, Perl, CGI, entre outras.
Algumas características principais do MySQL são:
É gratuito;
Possui alta performance, sendo esta sua característica principal;
Possui suporte a grande massa de dados;
Multiplataforma, possuindo versões para Linux, UNIX, Windows, etc;
É multiusuário e multi-thread, facilitando o uso por várias CPUs, compartilhando subprocessos;
Possui conectividade de acesso aos dados através de JDBC/ ODBC.
Entretanto o MySQL carece de funcionalidades tais como:
Transações ­ Não oferece suporte ao controle de transações, o que o torna mais rápido que outros banco de dados relacionais, porém menos seguro;
Views ­ não suporta a criação de views.
As principais aplicações direcionadas à utilização do MySQL são aplicações locais ou direcionadas para a Web com a necessidade de interagir com banco de dados gigantescos, sendo a performance um fator determinante.
Procedures armazenadas e triggers ­ Para manter a principal característica apresentada, a velocidade, o MySQL não suporta no momento procedures armazenadas e triggers.
Sub-select ­ O MySQL não executa cláusulas select com outras cláusulas exists não funcionam.
PostgreSQL é o servidor de banco de dados mais avançado de código aberto.
As principais aplicações direcionadas ao seu uso são aplicações locais ou Web, com a necessidade de interagir com um banco de dados que necessite de controle de transações.
Suas principais características são:
É gratuito;
Multiplataforma, possuindo versões para Linux, UNIX, Windows, etc;
Possui conectividade de acesso aos dados através de JDBC/ ODBC;
Trabalha com vários dados além de os convencionais, possuindo tipos de dados para armazenamento de informações temporais, geométricas e Recurso de utilização de functions, usando linguagens como SQL e C. Possui recursos de views, sub-selects, triggers e controle de transações.
Porém, o PostgreSQL não possui algumas funcionalidades como capacidade de replicação de dados, recuperações de falhas e otimizações avançadas.
Levando em conta a descrição e as características das duas ferramentas descritas acima existiu uma forte tendência em se optar por o servidor de banco de dados denominado PostgreSQL, mas acabou- se optando por o MySQL por também ser bastante adequado às necessidades do sistema e já se encontrar disponível no servidor do laboratório MASP, local de desenvolvimento do protótipo do Mm. Além de isto, também por se ter integrantes do grupo que este projeto está vinculado (GIE/ FACIM) que dominam a utilização deste SGBD, facilitando a construção do banco de dados do Mm e sua programação junto ao código em Java (chamadas e consultas a tabelas).
De o código original do Matematiquinha tutorial nada foi aproveitado.
Fez- se a tradução de código Flash para código Java.
Logo, houve a necessidade de se estudar o código original e reescrever- lo na nova linguagem.
Necessitando que a equipe de implementação possuísse conhecimento das duas linguagens.
Através da execução do Matematiquinha tutorial observaram- se, em separado, as funcionalidades de cada uma das fases do sistema.
Com base nesta observação e na interação com a especialista, obtiveram- se subsídios para decidir qual funcionalidade deveria ser mantida, qual deveria ser descartada e que novas funcionalidades deveriam ser agregadas ao exercício do Mm correspondente à fase do Matematiquinha que estava sendo analisada.
De posse dessas informações o grupo de trabalho envolvido neste projeto deu início ao processo de modelagem e posterior implementação de um dos exercícios da base de exercícios do Mm..
Todas as fases do Matematiquinha tutorial têm um exercício correspondente no Mm, ou seja, toda a base de domínio e funcionalidade existente foi preservada e estendida de maneira a trabalhar em sintonia com os novos componentes desenvolvidos especialmente para o Mm. no Mm as novas interfaces do sistema utilizam- se do servidor de banco de dados.
Informações provenientes da interação do usuário são armazenadas por o SGBD com a finalidade de obter- se um perfil do usuário.
O SGBD recebe inicialmente informações provenientes da tela inicial do sistema (tela de cadastro), de maneira a formar o perfil inicial do aluno baseado nas informações fornecidas por o professor quando de o cadastro do aluno.
A interface de cadastro pode ser visualizada na Figura 4.3.1.
Uma vez cadastrado, o sistema conduz o usuário à tela inicial do sistema.
Esta tela recebe o login e a senha de usuário.
O sistema verifica através de consultas ao banco de dados se o nome de usuário é válido e se a senha está correta.
Em caso afirmativo, o usuário obtém permissão para iniciar o jogo.
No caso contrário o sistema informa ao usuário a razão por a qual o acesso ao jogo ainda não foi permitido.
Pode- se dividir esta opção em três casos distintos:
Em este caso o sistema deve sugerir, através de uma mensagem, que o nome do usuário não foi digitado corretamente.
A Figura 4.3.2 possibilita a visualização da interface de verificação de nome e senha.
Estas interfaces trazem novidades que buscam melhorar a qualidade de visualização do procedimento de troca por parte de o usuário.
A interface de verificação de nome e senha é a primeira tela a ser visualizada por o usuário.
No caso de o usuário ser um professor ele deve clicar no botão &quot;Professores «situado na parte inferior da tela.
Este botão conduz o professor a uma tela concebida exclusivamente para professores (vide Figura 4.3.3).
Por ser o professor o único com acesso ao cadastro de alunos, de professores e de turmas ele precisa da validação de seu nome e senha para que qualquer dos botões inferiores o conduza a tela de cadastro correspondente.
Caso a validação não aconteça os botões não efetuam nenhuma ação.
Para cadastrar o primeiro professor de uma determinada escola pode- se utilizar um login e uma senha de administrador que acompanham as instruções de instalação.
De maneira diferenciada da interface do Matematiquinha, desenvolvida por Ribeiro e Ribeiro, a interface do Mm mantém as devidas proporções em relação a o tamanho de cada peça virtual representando centena, dezena e unidade, ou seja, a representação gráfica de uma dezena se dará por uma barra contendo dez representações gráficas de unidades (cubos) agrupadas de maneira a representar uma barra (dezena).
A representação gráfica de uma centena se dará por um quadro resultante do agrupamento de dez barras (dezenas) e conseqüentemente por cem cubos (unidades).
Esta proporcionalidade na representação gráfica das grandezas tem a intenção de permitir que se implemente as funções de troca através da utilização de um lugar específico para este tipo de procedimento denominado &quot;campo de troca».
O usuário deve arrastar para o campo de troca o (s) elemento (s) a ser (em) trocado (s) e efetuar a troca através de um botão com o rótulo &quot;Troca «situado na parte inferior do campo de troca.
Este procedimento permite ao aluno observar que o produto obtido com o procedimento de troca sempre representa a união ou separação de o (s) elemento (s) a ser (em) trocado (s), por exemplo, colocando- se dez unidades no campo de troca e ativando- se o botão Troca o sistema substitui as dez unidades por uma barra que representa a dezena.
Esta barra possui a medida exata de dez unidades reunidas verticalmente.
Para que estas novas funcionalidades fossem implementadas houve mudanças também quando a disposição das grandezas em seus campos correspondentes.
O Mm traz uma disposição das centenas em duas colunas e cinco linhas, enquanto que, no Matematiquinha esta disposição se dava em três colunas e três linhas.
Em o Matematiquinha Tutorial existem apenas três botões de troca (unidades por dezena, dezenas por centena e dezena por unidades) que estão presentes em todas as fases, mesmo naquelas que não se faz necessário nenhum procedimento de troca.
Eles não aparecem na seqüência correta quanto a sua utilização na maioria dos casos.
Estes botões aparecem, normalmente, com uma aparência opaca.
Quando o aluno tiver, por exemplo, inserido mais de dez modelos de uma única grandeza, o Matematiquinha sugere a necessidade de efetuar- se a troca ressaltando o botão de troca correspondente (passando de uma aparência opaca para uma aparência brilhante), contorna os dez modelos superiores com uma linha vermelha, indicando quais modelos serão trocados e simultaneamente envia uma mensagem ao aluno, que pode ser visualizada em fonte vermelha na parte inferior central da tela, afirmando, para este exemplo, que uma dezena é igual a dez unidades.&amp;&amp;&amp;
Em o Matematiquinha original, se considerarmos o exemplo acima, ao clicar num botão de troca o mesmo efetua a troca fazendo desaparecer os modelos contornados por a linha vermelha e aparecer ao lado de o abastecedor o modelo resultante da troca.
Em o Mm os botões de troca são quatro.
Os três botões existentes no Matematiquinha foram preservados.
Houve a agregação de mais um botão de troca (centena por dezena).
Esta agregação se justifica por a necessidade de utilização nos novos exercícios de subtração, que tiveram uma ampliação de sua capacidade, e no exercício de divisão, inexistente na versão tutorial.
Os botões de troca do Mm não estão presentes em todos os exercícios.
Cada exercício apresenta exclusivamente os botões que podem ser utilizados durante sua execução.
Conseqüentemente, exercícios que não requerem ao usuário que ele utilize procedimentos de troca não terão botões de troca em suas interfaces.
Ao contrário de a versão tutorial, onde as trocas podem ser efetuadas em qualquer ordem, a nova versão foi concebida de maneira a permitir os procedimentos de troca obedecendo- se a uma ordem pré-determinada:
Em os exercícios de distribuição com troca, adição e multiplicação é necessário que se efetue as trocas de unidades por dezenas antes das trocas de dezenas por centenas.
Em os exercícios de subtração e divisão as trocas de centenas por dezenas devem ser efetuadas antes das trocas de dezenas por unidades.
Por esta razão os botões de troca estão dispostos na ordem que devem ser utilizados.
Em o Mm os botões de troca têm sempre a mesma aparência, enquanto que no Matematiquinha os botões passíveis de utilização num determinado momento possuem aparência cintilante e os não passíveis de utilização naquele momento, possuem aparência opaca.
Em a versão tutorial uma linha vermelha aparece ao redor de os dez modelos que serão trocados e, simultaneamente, uma mensagem é disponibilizada ao usuário.
Esta mensagem reforça a relação de igualdade entre o que está sendo trocado e o produto da troca.
Estes procedimentos não serão utilizados na versão multiagente porque se identificou que eles induziam parcialmente o usuário a atingir a resposta correta.
Para o Mm adotou- se uma nova metodologia para o procedimento de troca:
Cada vez que o usuário utiliza um dos botões de troca o sistema disponibiliza a visualização do &quot;campo de troca».
O campo de troca é o único lugar onde as trocas podem ser efetuadas.
Ele possui na sua parte inferior dois botões:
O botão Troca e o botão Cancelar.
Para efetuar uma troca o usuário necessita arrastar o (s) elemento (s) a ser (em) trocado (s) até o interior do campo de trocas.
Os elementos utilizados neste procedimento trocam de cor (adotam a cor azul) e assim permanecem até que o usuário finalize esta seção.
De esta maneira é possível identificar- se quais os elementos presentes no exercício foram obtidos através de um procedimento de troca.
Para efetuar uma troca, o aluno deve preencher corretamente o campo de troca e utilizar o botão Troca.
Caso o procedimento tenha sido efetuado corretamente até este momento, o sistema substitui automaticamente o (s) elemento (s) selecionado (s) para troca por o elemento resultante efetuando, desta maneira, o procedimento de troca.
Vale salientar que o (s) elemento (s) resultante (s) deste procedimento troca permanece (m) no interior do campo de troca.
Cabe ao usuário a tarefa de organizálo (s) em seu campo correspondente.
Em o momento que o aluno retirar o último elemento do interior do campo de troca o sistema torna a visualização do campo de troca indisponível ao usuário, ou seja, o campo de troca desaparece.
Caso o usuário desista de efetuar um procedimento de troca em andamento, ele pode fazer- lo através da utilização do botão Cancelar.
O botão Cancelar fará com que todos os objetos no interior do campo de troca voltem as suas posições anteriores tornando indisponível a visualização do campo de troca.
Este botão só permanece habilitado antes da utilização do botão Troca.
De esta maneira as funções de troca agregam dois sentidos:
Trocas de dez elementos por o elemento de maior grandeza:
Onde o aluno deve clicar no botão de troca correspondente, visualizar o campo de troca e arrastar dez elementos para o seu interior simplesmente colocando- os em posições aleatórias.
O sistema auxiliará o aluno deslocando elementos colocados numa posição previamente ocupada de maneira a não confundir o usuário em relação a a quantidade de elementos presentes.
Em esta fase os elementos ainda podem ser removidos separadamente do campo de trocas.
Quando dez elementos estiverem posicionados no campo de troca o aluno utilizará o botão Troca.
Após este procedimento a troca foi efetuada.
Portanto, só será possível movimentar todos os elementos agrupados, ou seja, o elemento de maior grandeza.
Troca de um elemento por dez elementos de menor grandeza:
Onde o aluno deve clicar no botão de troca correspondente, visualizar o campo de troca e arrastar um elemento para o seu interior.
Em esta fase, o elemento ainda pode ser removido do campo de trocas.
Quando o elemento está no campo de trocas, o aluno utiliza o botão Troca.
Após este procedimento, a troca foi efetuada.
Portanto, só será possível movimentar todos os elementos separadamente, ou seja, os dez elementos de menor grandeza.
Salienta- se que a metodologia do Material Dourado é justamente baseada nesta composição/ junção de blocos que representam as grandezas a serem operadas.
Por este motivo, descreve- se a solução implementada para não se perder as potencialidades intrínsecas da metodologia quando transpõem o material concreto para sua representação digital (virtual).
Com esta nova metodologia para efetuar as trocas o aluno necessita contar (selecionar) dez elementos tanto no primeiro caso, aproximar dez elementos, como no segundo caso, colocar os novos dez elementos no campo correspondente tornando o processo de troca mais elucidativo ao aluno.
Em o Matematiquinha se o mouse estiver sobre qualquer um dos botões de troca uma caixa de diálogo pode ser visualizada.
Esta caixa de diálogo elucida ao usuário quanto a o tipo de troca que o botão efetua.
Por exemplo, se o mouse parar sobre o botão que efetua trocas de dezena por unidades a caixa de diálogo contém o seguinte texto:
&quot;troca dezenas por unidades».
As caixas de diálogo dos botões de troca não estão presentes na versão multiagente porque nesta versão os botões de troca não executam a troca.
Eles abrem o campo de troca para que o usuário possa efetuar a troca.
Em a versão tutorial, caso o usuário utilize um botão de troca não correspondente à troca que deve ser efetuada naquele momento o sistema permanece inalterado em relação a o evento, ou seja, nenhuma ação é efetuada por o sistema no caso de esta ocorrência de erro.
Já na versão multiagente, neste caso, um erro é detectado e relatado ao agente assistente.
Houve alterações no comportamento dos botões sortear e confirmar.
Em o Matematiquinha a cor da fonte e a cor de fundo são alteradas cada vez que o mouse encontra- se sobreposto a um destes botões.
Em o Mm quando usuário está na fase inicial do exercício, antes de sortear as variáveis do exercício, o botão Sortear aparece com a cor de fundo cinza escura e com a cor da fonte vermelha e o botão Confirmar aparece com cor de fundo cinza clara e cor de fonte preta.
Depois do sorteio das variáveis do exercício o botão Confirmar passa a ter aparência ressaltada, ou seja, fundo cinza escuro e fonte vermelha, e o botão Sortear passa a ter aparência normal, ou seja, fundo cinza claro e fonte preta.
Esta aparência ressaltada no botão a ser utilizado a seguir pretende sugerir ao usuário as próximas ações a serem executadas.
O Mm traz a inovação de não permitir que o usuário utilize a funcionalidade de abastecer modelos antes que as variáveis tenham sido instanciadas através da utilização do botão Sortear.
A versão tutorial permite que o usuário abasteça modelos mesmo antes que as variáveis tenham sido sorteadas.
Para que estas novas funcionalidades fossem implementadas houve mudanças, também, na disposição das grandezas em seus respectivos campos.
O Mm traz nas suas interfaces a disposição das centenas em duas colunas e cinco linhas, a das dezenas em cinco colunas e quatro linhas e as unidades em duas colunas e dez linhas, enquanto que, no Matematiquinha esta disposição estava representado em três colunas e três linhas.
Esta nova disposição traz vantagens em relação a a altura dos campos.
Com os campos mais altos torna- se possível, no campo das dezenas, dispor- se de dez dezenas para trocar por uma centena, utilizando- se duas linhas com cinco dezenas cada uma e agrupando- as numa centena.
De esta maneira, elimina- se a lacuna que se fazia presente na troca de dez dezenas por uma centena na interface do Matematiquinha.
Com as colunas mais estreitas houve um ganho de espaço horizontal nas novas interfaces.
Este espaço foi aproveitado para disponibilizar o &quot;campo de troca «existente exclusivamente no Mm..
Estas modificações podem ser visualizadas através das duas interfaces que compõem a Figura 4.3.8.
Espaço vazio que fica quando de a troca.
Em as novas interfaces do Mm o usuário possui opções de personalização das telas do sistema.
Ele pode configurar a sua própria área de trabalho escolhendo um ou nenhum entre vários personagens para acompanhar- lo durante o jogo.
Também é facultado ao usuário reorganizar qualquer dos três campos principais (campo das centenas, dezenas e unidades).
A função &quot;reorganizar «ajusta as posições de todos os elementos para as posições superiores vazias do campo.
De esta maneira, as lacunas existentes no campo são eliminadas.
Esta função pode ser acessada com um clique no botão direito do mouse sobre o campo que se quer organizar.
Ela pode ser utilizada depois de colocar modelos na lixeira e depois de procedimentos de troca.
Em esta nova versão o ícone de ajuda desaparece.
O personagem (agente assistente) assume sua função.
Além de as funcionalidades do agente assistente, descritas anteriormente, quando o usuário clicar sobre a figura do personagem, o agente assistente disponibilizará ao usuário funções de ajuda similares às existentes em outros sistemas computacionais.
Em o Matematiquinha somente o mouse posicionado sobre a lixeira faz com que ela desempenhe a ação de abrir e emitir o som correspondente a um modelo caindo no fundo da lata.
Esta ação acontece mesmo que nenhum modelo tenha sido levado até sobre a lixeira.
Em o Mm, para que a lixeira desempenha esta ação, é necessário que algum modelo (centena, dezena ou unidade) esteja posicionado sobre a lixeira para que esta ação aconteça.
Ou seja, somente quando o usuário realmente for &quot;colocar no lixo «algum dos modelos que esta sendo utilizado na resolução do exercício.
Esta mudança decorre da observação por parte de o grupo que alguns usuários passavam a &quot;brincar «de abrir e fechar a lixeira perdendo, desta maneira, o foco e a concentração necessários ao bom desempenho durante a interação com o jogo.
A disposição dos modelos no abastecedor também foi alterada.
Em o Matematiquinha o modelo mais acima é o de abastecimento das unidades, seguido das dezenas e por fim das centenas.
Em o Mm esta ordem foi invertida com base na leitura do número proposto.
Primeiro lê- se as centenas, depois as dezenas e depois as unidades e, portanto o novo abastecedor segue esta ordem.
O modelo mais acima é o de abastecimento das centenas, seguido das dezenas e por fim das unidades.
Em o Matematiquinha um modelo qualquer pode ser transferido para outro campo se o usuário arrastar- lo com o mouse.
Desfazendo, desta maneira a organização proposta por o sistema quando de a utilização do abastecedor.
Em o Mm se o usuário arrastar um modelo para outro campo ele automaticamente volta a sua posição original.
Em esta versão um modelo só pode ser levado para a lixeira sem que ele volte a sua posição original.
Em as novas interfaces do Mm o usuário tem opções de personalização da interface do sistema.
Ele poderá configurar a sua própria área de trabalho escolhendo um ou nenhum entre vários personagens para acompanhar- lo durante o jogo.
Além disso, ele tem a opção de jogar com as cores default do sistema ou trocar as cores da tela conforme sua preferência.
As alterações descritas até o presente momento são de âmbito geral.
Ou seja, estão presentes em todos os exercícios da versão multiagente ou, pelo menos, num grupo significativo de eles.
As alterações residentes em apenas um dos exercícios do Mm podem ser visualizadas no capítulo 5 seção 1 o qual descreve os exercícios da base de domínio da versão multiagente.
Durante o desenvolvimento do projeto o grupo enfrentou varias dificuldades referentes à programação das novas funcionalidades.
A seguir descrevem- se os problemas mais relevantes que ocorreram durante o desenvolvimento do protótipo.
Uma das primeiras dificuldades deu- se em relação a a linguagem de programação Java.
Por não ser de domínio do grupo houve um grande esforço inicial para que o grupo passasse a dominar as técnicas de programação desta linguagem.
O nível de dificuldade desta atividade, embora tenha tomado uma parte significativa do tempo do grupo, foi considerado médio.
Em a parte inicial da construção das interfaces do Mm a dificuldade encontrada era arrastar uma figura com o mouse.
Para vencer esta dificuldade foi necessário um grande empenho por parte de o grupo no sentido de pesquisar a maneira mais adequada de resolver o problema.
O grau de dificuldade desta atividade foi considerado alto por os componentes do grupo.
Logo após a resolução do problema descrito no parágrafo anterior o grupo deparou- se com a seguinte situação:
A figura (modelo) quando arrastada por a tela com a presença de outros componentes não chegava até a lixeira.
Ela, durante o percurso, escondia- se atrás de os outros componentes.
Foi necessário investir uma boa parcela do tempo disponível para encontrar a solução deste problema.
Uma vez encontrada a solução, sua implementação foi realizada sem maiores dificuldades.
Durante a implementação do protótipo surgiu à necessidade de colocação de figuras como fundo de um &quot;panel».
Isto se tornou um problema devido a o desconhecimento de como fazer- lo.
Após perder algum tempo na busca da solução do problema o grupo adquiriu conhecimento suficiente para efetuar a tarefa.
O nível de dificuldade atribuído para este problema foi médio.
Sua implementação também demandou algumas horas.
O processo de modelagem e implementação dos agentes teve seu maior custo no planejamento e modelagem das funcionalidades que cada agente deveria agregar.
Embora o grau de dificuldade tenha sido considerado médio-alto sua implementação não causou grandes dificuldades ao grupo.
As maiores dificuldades foram encontradas na fase de planejamento onde as decisões de projeto tinham que ser obtidas através da interação do grupo com a especialista e na elaboração das regras de inferência que determinam o comportamento de cada agente.
Houve, também, um esforço e um investimento de tempo no sentido de construir o algoritmo que posiciona os elementos à medida que eles vão sendo abastecidos.
O grau de dificuldade desta atividade foi considerado médio.
A nova metodologia utilizada nos procedimentos de troca, com a utilização de um campo específico para este tipo de procedimento, levou o grupo a reunir esforços para viabilizar sua implementação.
O grau de dificuldade desta atividade foi considerado alto, uma vez o algoritmo reconhece a quantidade de modelos presentes no campo de troca, informação necessária para que o algoritmo decida se o usuário pode ou não efetuar a troca.
Levando- se em consideração que os modelos são &quot;arrastados «para o interior do campo de troca por o usuário e que este não possui posições pré-determinadas para cada elemento, deve- se considerar a possibilidade do usuário &quot;soltar «dois ou mais elementos sobrepostos.
Esta situação, caso ocorra, impede que a contagem da quantidade de elementos ocorra de maneira correta.
Para tanto, foi necessário agregar ao algoritmo a capacidade de detectar eventuais sobreposições corrigindo- as determinando, desta forma, uma nova posição ao modelo sobreposto.
Logo após o desenvolvimento do algoritmo responsável por o posicionamento dos elementos em seus campos correspondentes identificou- se a necessidade de implementação de um algoritmo para reorganizar os elementos após o uso da lixeira ou do procedimento de troca.
Este algoritmo foi considerado médio em relação a o grau de dificuldade apresentado.
Ele tomou bastante tempo de projeto por a necessidade de detectar se cada posição esta ocupada ou vazia.
No caso de detecção de uma ou mais posições vazias o algoritmo realoca todos os modelos de maneira a concentrar- los nas posições iniciais.
A verificação do número de campos utilizados por o usuário nas fases de multiplicação e divisão exigiu muito esforço por parte de o grupo.
Sua implementação necessitou rotinas que verificam quais dos campos estão sendo utilizados por o usuário.
As rotinas também têm que comparar se a quantidade de campos utilizados está de acordo com a quantidade por a qual o número inicial deve ser dividido.
O nível de complexidade desta tarefa foi considerado médio.
Os exercícios que demandaram maior esforço por parte de o grupo foram os exercícios de multiplicação e divisão.
Estes exercícios foram planejados desde sua concepção inicial exclusivamente para a versão Mm..
Eles exigiram muita interação com a especialista para decidir quais funcionalidades eles deveriam conter, qual a abordagem mais adequada para cada conteúdo e quais os procedimentos mais adequados para possibilitar ao usuário a construção do conhecimento.
Os exercícios de multiplicação e divisão foram, também, implementados com base na metodologia utilizada por a especialista em sala de aula regular.
O algoritmo para verificar se a operação de divisão, em sua forma abstrata, foi montada de forma correta vai além de a simples verificação se a resposta corresponde.
Ele é capaz de verificar cada uma das operações parciais que o aluno efetua no procedimento.
Ele também é capaz de verificar se algum algarismo resultante de uma operação parcial foi colocado na posição correta.
Este algoritmo exigiu do grupo uma grande parcela de tempo.
Seu grau de dificuldade foi considerado muito alto.
Ele exigiu bastante tempo de dedicação tanto na fase de planejamento quanto na fase de execução sendo considerado o algoritmo com maior grau de dificuldade do projeto até o momento.
Um outro problema enfrentado por o grupo foi o tempo de carregamento das imagens a cada troca de exercício.
Este tempo era grande o suficiente para que o usuário percebesse a dificuldade do sistema em mostrar a interface do novo exercício.
Uma grande parcela de tempo foi destina a solução deste problema.
Uma vez encontrada a solução foi implementada com relativa facilidade.
O grau de dificuldade desta tarefa foi considerado alto por o grupo.
Em o Apêndice B do presente trabalho pode- se visualizar o código fonte relativo a alguns exemplos de algoritmos implementados no Mm..
A interface com o Usuário é uma das partes fundamentais no desenvolvimento de um sistema.
Ela é a forma do usuário interagir com o sistema.
E, no caso de as crianças, desempenha uma atividade fundamental no processo de mediação pedagógica.
Segundo Foley.,
e através da interface que o usuário se comunica com o sistema para realizar suas tarefas.
Se for projetada adequadamente, a interface pode se tornar uma fonte de motivação e até, dependendo de suas características, uma grande ferramenta para o usuário.
Caso contrário, pode se tornar o fator decisivo para a rejeição de um sistema.
Pesquisas como a de Kammersgaard na área Interação HomemComputador orientam os programadores da necessidade de projetar a interface levando em consideração uma comunicação interativa.
Isto é, os usuários não só enviam mensagens para os programas de aplicação, mas também recebem e interpretam mensagens provenientes da aplicação, ou através de ela.
Sob o ponto de vista da comunicação, os sistemas educacionais concebidos como ambientes de aprendizagem inteligentes, possuem comunicação em dois sentidos:
Eles são remetentes e receptores de mensagens.
Os próprios sistemas compõem mensagens remetidas dos projetistas para os usuários através do meio, como pode ser observado em Souza.
Essa comunicação pode ser feita de diversas formas:
Com textos, imagens, sons, combinações de cores entre outras.
Mas independente da forma, deve ser garantido que a informação transmitida não seja incompleta, ambígua ou ilegível.
Segundo Foley.,
qualquer que seja a forma de comunicação é importante que tenhamos um feedback.
Em uma sala de aula, os alunos proporcionam o feedback ao professor através de gestos, expressões faciais, corporais e outros.
De a mesma forma, a interação com o computador requer um feedback, só que neste caso, ele deve ser planejado e programado.
Segundo Ferreira.
O feedback pode ser dado basicamente em três níveis:
Exemplo: Objetos ou comandos selecionados devem aparecer &quot;realçados».
Também, segundo Ferreira.,
ainda na área de feedback, existem dois conceitos importantes:
Exemplo: Uma barra de rolamento indica qual parte do documento está sendo examinada.
Exemplo: O estilo de linha num software de desenho pode aparecer com a marca &quot;x «indicando o estilo correntemente escolhido por o usuário.
O objetivo das interfaces é fornecer uma interação entre o usuário e o computador da maneira mais &quot;amigável «possível.
Isto significa que a interface deve ser considerada, por o usuário, fácil de ser utilizada.
Para tal, necessita fornecer seqüências simples e consistentes de interação, mostrando claramente as alternativas disponíveis a cada passo sem confundir nem deixar o usuário inseguro.
O ambiente precisa estar bem definido de maneira que o usuário seja capaz de se fixar somente no problema que deseja resolver.
A facilidade ou dificuldade que se tem para utilizar e comandar uma interface é o que define sua usabilidade, ou seja, quanto mais simples e intuitivo for à utilização da interface, maior a usabilidade.
Para se planejar uma boa interface deve- se considerar acima de tudo o fator humano.
Entender o usuário, seu comportamento, seus gostos e desaprovações, é um passo importante para que a interface seja de boa qualidade.
Considerar o nível de habilidade do usuário é um dos fatores que afetarão na melhor assimilação da Interface.
Deve- se considerar que o ser humano percebe o mundo por um sistema sensorial razoavelmente bem compreendido.
Quando uma interface homem-máquina é considerada, predominam os sentidos visual, tátil e auditivo.
A maior parte da interface homem-máquina é realizada por um meio visual, segundo Ferreira.
Com o desenvolvimento da tecnologia associada aos recursos de hardware e com o aumento do conhecimento em relação a os impactos dos fatores humanos no projeto de sistemas, as interfaces passam a utilizar o recurso de apresentar a informação na forma de janelas.
Essas interfaces são chamadas de Interfaces Gráficas e tem como característica a facilidade de utilização.
Esta tendência tem o seu impacto no projeto (design), produção e manutenção das interfaces.
Quanto mais detalhadas elas forem, mais ricas serão de layout de tela e técnicas de interação.
Portanto, mais complexas de serem modeladas e atualizadas.
De essa forma, o desenvolvimento de interfaces tem- se tornado uma das tarefas mais complexas e dispendiosas dentro de o O processo de produção de um software tem seu início quando se define o seu objetivo, público alvo e a escolha tecnológica.
Ou seja, quando se estabelece o que se quer produzir.
Em essa fase, deve haver uma avaliação que determine se o programa requer uma interface complexa;
Muitas vezes, dependendo do que se deseja do sistema, uma interface simples pode se revelar tão comunicativa e amistosa quanto uma mais sofisticada.
É fundamental, portanto, que se determine os requisitos da interface e de todo o sistema.
Segundo Leite, o programa tem que se apoiar em princípios de Engenharia de Software, com atenção aos aspectos de custo e qualidade.
A não consideração de fatores tais como:
Desempenho, integridade, confiabilidade, segurança, projeto de interfaces, uso de cores, entre outros, constitui uma das principais razões de uma eventual insatisfação do usuário com relação a um sistema.
À medida que o projeto de interface com o usuário se desenvolve quatro questões comuns de projeto vêm à tona e devem ser consideradas, são elas:
Tempo de resposta do sistema, facilidades de ajuda ao usuário, manuseio de informações de erro e rotulação de comandos (teclas de atalho, mouse).
A cor, segundo Marcus, é elemento fundamental em qualquer processo de comunicação visual.
Merecendo assim, uma atenção especial.
É um componente com grande influência no dia de uma pessoa, interferindo nos sentidos, emoções e intelecto.
Especialmente no que concerne ao público infantil.
Pode, portanto, ser usada deliberadamente para se atingir objetivos específicos.
Um projetista de interface, segundo Chung, Nixon e Yu YEH84], deve lançar mão desse poder das cores de modo a utilizar- las adequadamente de modo a tornar as interfaces mais poderosas.
Segundo Farina, a cor, componente de profundo impacto em qualquer processo de comunicação, merece um estudo especial.
Ela exerce uma ação tríplice:
A de impressionar, a de expressar e a de construir.
A cor é vista:
Impressiona a retina.
É sentida:
Provoca uma emoção.
É construtiva, pois tendo um significado próprio, possui valor de símbolo, podendo assim, construir uma linguagem que comunique uma idéia.
Por se tratar de um ambiente dirigido para crianças, buscou- se interagir com uma especialista na área de Comunicação Digital.
Entrevistou- se a Profa..
Dra. Maria Beatriz Furtado Rahde (Famecos/ PUCRS), a fim de obter subsídios para a questão da utilização da cor e diagramação dos elementos da interface.
A especialista sugeriu que se fizesse uma pequena revisão literária sobre esta questão, a fim de obter subsídios básicos para a definição do esquema de cores.
A experiência da especialista aponta para o uso de cores primárias e com tonalidade forte nos locais onde se necessita chamar a atenção do usuário.
Optou- se, então, por a criação de uma interface padrão, com tons mais suaves, utilizando- se tonalidades fortes em apenas alguns setores, e possibilitar ao aluno mudar as cores conforme sua preferência.
Segundo Keister, Murch e Taylor, a utilização não apropriada das cores pode aumentar muito o tempo de resposta de um usuário.
Porém, seu estudo não leva em conta apenas aspectos psicológicos;
Devem ser consideradas também as características físicas das ondas eletromagnéticas e aspectos fisiológicos do olho humano.
Segundo Smith e Farrell, o fato de se fornecer um padrão recomendado não significa que o usuário não possa alterar a combinação de cores.
Uma boa interface deve atender as expectativas de seus usuários;
Esses, por sua vez, podem querer customizar- las.
Isto é, colocar- las com a aparência que desejem.
Isso implica que uma interface bem projetada deve permitir que uma pessoa tenha liberdade de escolher seus aspectos visuais, entre eles, suas diversas cores.
As interfaces onde seleções de cores são viáveis baseiam- se num modelo de cores.
O uso de cores em interfaces segundo Jackson, MacDonald e Freeman e Marcus, permite:
Mostrar as coisas conforme são vistas na natureza;
Representar associações simbólicas;
Chamar e direcionar a atenção;
Enfatizar alguns aspectos da interface;
Determinar um estado de espírito;
Auxiliar na identificação de estruturas e processos;
Diminuir a ocorrência de erros;
Tornar uma interface mais fácil de ser memorizada.
Por se tratar de um recurso tão poderoso, o uso de cor deve ser feito com cautela.
A o se preparar um padrão, deve- se tomar os seguintes cuidados segundo Jackson, MacDonald e Freeman e Marcus:
Uma escolha não adequada de cores pode interferir na legibilidade da interface;
As cores podem apresentar características distintas em condições diferentes;
As cores devem ser selecionadas de modo a não causarem fadiga nos olhos do usuário e nem deixar- lo confuso;
Grupo de usuários do futuro sistema deve ser analisado;
As mesmas cores podem ser associadas a situações distintas por diferentes comunidades;
Alguns elementos da tela são agrupados com as mesmas cores;
Deve- se tomar um cuidado para não se agrupar elementos que não possuem nenhuma relação entre si de modo a não induzir o usuário a conclusões erradas.
A o se escolher um conjunto de cores, deve- se ter em mente que uma cor específica é afetada por o ambiente que a circunda;
As diversas cores numa interface interagem umas com as outras:
Cores de frente são afetadas por as de fundo e assim por diante.
Isso significa que o critério para selecionar as cores não pode basear- se apenas em conceitos estéticos;
Deve considerar também como elas irão interagir entre si, segundo Marcus.
A o se projetar interfaces, é importante que os sistemas tenham um padrão default de cores para suas telas, escolhido de forma a dar ao usuário o melhor desempenho e conforto diante de o sistema.
As cores adotadas no default devem, portanto, ser cuidadosamente selecionadas de modo a não provocarem reações indesejáveis.
Naturalmente as pessoas associam cores a diversas situações de suas vidas.
Com base nessa propriedade, faz- se uso de cores para indicar condições diversas:
Segundo Jackson, MacDonald e Freeman, no que diz respeito aos fatores geográficos, essas associações preferenciais podem facilmente ser identificadas na preferência por certas cores.
De um modo geral, as pessoas de lugares tropicais gostam mais de cores saturadas e com brilho;
Já os moradores de regiões mais temperadas possuem uma tendência para cores sombrias.
Isso se deve ao fato de ser essa a cor que elas estão mais acostumadas a ver no seu habitat natural.
Um exemplo de associação dependente de aspectos culturais é a cor branca:
Em o ocidente ela é associada com pureza e alegria, sendo muito usada por noivas no dia de seu casamento.
Em o oriente, é a cor da morte e dor, sendo o vermelho a cor convencional para o vestido de noiva.
As crianças pequenas em geral são atraídas por cores vivas e a indústria as utiliza nos seus brinquedos.
Os adolescentes muitas vezes rejeitam o uso de cores e optam por preto, provavelmente como uma forma de chocar.
À medida que envelhecem, muitas pessoas vão passando a preferir cores mais neutras.
Aqui o fator cultural provavelmente também seja responsável por essa mudança;
Convencionou- se que idosos ficam melhor em cores neutras.
Segundo Jackson, MacDonald e Freeman, o design de interfaces pode tirar benefício dessas associações com as cores.
Se um sistema destina- se a um grupo de uma região ou de uma idade particular, a escolha da cor das telas deve levar em considerações tais aspectos, pois pode ser um fator importante na aceitação do sistema.
Por exemplo, softwares desenvolvidos especialmente para crianças, se forem feitos com cores vivas, terão mais chances de serem bem aceitos do que se forem usadas cores pastéis.
Segundo Ferreira, independente do tipo de informação (números, palavras, tons musicais, cores e outros) a maioria das pessoas só consegue se lembrar de listas com no máximo, mais ou menos, sete itens.
Segundo este autor, nas interfaces onde se usam cores para identificar categorias distintas de informações, não se deve usar mais do sete cores ao mesmo tempo.
A memória humana para cores específicas é pobre:
Não se consegue dizer se duas cores são iguais a não ser que colocadas lado a lado.
Se separadas por uma distância, deve- se levar em consideração as diferentes condições de visualização e os diferentes contornos e, se separados por o tempo, é possível apenas se adivinhar se trata de duas cores iguais.
Segundo Jackson, MacDonald e Freeman, as cores, de um modo geral, são recordadas mais &quot;coloridas «do que de fato são:
As cores claras são lembradas como sendo mais claras e as escuras como mais escuras do que as originais.
Este processo de projeto de interfaces pretende ser interativo, ou seja, o protótipo criado será examinado por os usuários e modificado, baseado em seus comentários.
Ele será avaliado para determinar se satisfaz a necessidade do usuário.
Para tal, inicialmente, escolheu- se um conjunto de cores default de cores com parte da interface utilizando cores pastéis, com o objetivo de não tornar a interface cansativa ao usuário no decorrer de o tempo de utilização, e alguns setores utilizando cores vivas, com o objetivo de atrair a atenção do usuário para estes setores.
Outro aspecto a ser incorporado na interface é a questão da animação do agente assistente.
A fim de auxiliar a motivar a criança, o aluno será convidado a jogar e cuidar do seu mascote.
O mascote monitora o trabalho do aluno e reage conforme as ações por ele executadas.
Se o aluno demora muito para resolver um problema, além de o tempo estimado por o professor (considerando o nível em que o aluno se encontra) o mascote dorme.
Como é o caso comum dos laboratórios onde os alunos fazem sucessivos acessos à Internet enquanto fazem atividades vinculadas ao trabalho escolar.
Ou mesmo decidem jogar jogos convencionais, conversar com o colega e outras atitudes que o retiram do foco do trabalho.
Pretende-se auxiliar a evitar que o aluno se disperse e faça outras atividades em paralelo.
Se o aluno fica muito tempo usando o sistema o mascote fica parado e começa a demonstrar sinais de cansaço.
Desta forma pode- se sinalizar ao aluno que ele está tempo demais no computador e deve fazer uma pausa.
Quando ao aluno está errando muito, o mascote se movimenta e sugere que ele peça ajuda.
Cada vez que o aluno consegue realizar uma atividade o seu mascote ganha energia.
Ou seja, o aluno é convidado a realizar uma atividade envolvendo a Matemática e ao mesmo tempo cuidar do seu mascote.
O cuidado com o seu mascote passa por o estudo do conteúdo.
Para manter o seu mascote satisfeito, com boa aparência e feliz o aluno deve ter compromisso com as atividades.
Busca- se assim, uma alternativa de envolvimento do aluno com o ambiente de forma que a questão da atividade pedagógica fique associada a uma outra questão motivacional envolvendo compromisso e afetividade.
Devido a a limitação temporal imposta por uma dissertação de mestrado as funcionalidades descritas acima em relação a o comportamento do mascote nas mais diversas situações não poderão ser visualizadas no protótipo desenvolvido.
Estas funcionalidades serão implementadas no decorrer de o projeto que possui previsão de término para o mês de dezembro de 2004.
Para modelar os requisitos do Mm, que envolvem as funcionalidades já oferecidas por o Matematiquinha e também outras, definidas no contexto deste trabalho, utilizou- se o diagrama de Casos de Uso3 da UML (Unified Modeling Language).
No geral, fez- se uma engenharia reversa em relação a a versão do Matematiquinha existente e acrescentaram- se as novas funcionalidades e aspectos relacionados aos agentes.
O resultado desta modelagem é apresentado na Figura 4.5.1, que ilustra os atores e funcionalidades que estes estão envolvidos, bem como os agentes definidos (identificados por o estereótipo Maiores detalhes sobre os Casos de Uso definidos podem ser encontrados no Apêndice &quot;C».
Em específico, os diagramas de Caso de Uso possuem como objetivo descrever os diferentes cenários de uso de um sistema sob o ponto de vista de um determinado usuário.
Estes cenários são organizados por objetivos, o que permite a elaboração de mais um diagrama de Caso de Uso para o mesmo sistema, segundo Fowler e Scott.
Esta modelagem se fez necessária uma vez que, ao migrar para a linguagem Java, era preciso conhecer as funcionalidades do Matematiquinha para se poder desenvolver a nova versão na linguagem mencionada.
Além de isto, teve- se a oportunidade de documentar, brevemente, sob o ponto de vista da Engenharia de Software, as funcionalidades do Mm, facilitando a evolução do mesmo por futuros integrantes no grupo de pesquisa vigente.
A base de domínio do sistema legado foi totalmente aproveitada no novo sistema.
Ou seja, todos os exercícios da base de domínio do Matematiquinha estão presentes no Mm..
Houve um esforço considerável de implementação, uma vez que, optou- se por reescrever todo o código original na linguagem de programação Java.
Algumas modificações foram necessárias quanto a a disposição dos elementos da interface de maneira a melhor organizar os modelos e abrir espaço para o &quot;campo de troca», elemento que não existia na versão anterior.
Foram agregados à nova versão dois novos módulos de exercícios:
O módulo de multiplicação e divisão.
Estes módulos tiveram que ser totalmente modelados e implementados durante a elaboração do presente trabalho.
O novo sistema denominado Matematiquinha Multiagente (Mm) é baseado na arquitetura de um STI.
Existe uma base de domínio expressa por um conjunto de exercícios, organizada em função de as atividades e objetivos do professor que atua em sala de aula presencial.
Utilizou- se o trabalho de Schuck e Giraffa para identificar as funcionalidades necessárias para a construção deste assistente no que diz respeito a modelagem do tutor no que tange ao processo de seleção de estratégias de ensino e adoção de táticas associadas.
Em o Mm existe um assistente virtual composto de dois agentes:
O tutor e o assistente.
O tutor engloba as funções do tradicional módulo de estratégias de ensino previsto em arquiteturas de STI segundo Giraffa e Vicari.
Ele é o responsável por a elaboração do plano de trabalho que cada aluno irá executar durante sua sessão de trabalho.
Para tal, ele utiliza as informações armazenadas no banco de informações do aluno (modelo do aluno).
Esta base contém as informações relativas ao perfil de cada aluno, considerando os seguintes aspectos:
Quantidade de vezes que uma tarefa foi refeita até encontrar a resposta correta, uso do sistema de ajuda, tipo de ajuda selecionada e complexidade dos exercícios selecionados.
Estes itens foram os escolhidos por a especialista de Educação (professora das séries iniciais) que trabalha com a equipe do projeto.
O agente assistente é o responsável por a operacionalização do plano do tutor para um determinado aluno.
O Agente Assistente (representado na interface por um mascote) apresenta os exercícios, controla as informações disponibilizadas na interface, faz as mudanças necessárias associadas a cada execução dos exercícios e as envia para o tutor.
A partir de um banco de personagens, o aluno poderá configurar a aparência do mascote.
O mascote poderá ficar visível na interface, dependo ou não da escolha do aluno.
Sob o ponto de vista do aluno, o mascote é um companheiro que pode auxiliar- lo quando ele precisa.
Sob o ponto de vista do sistema, o mascote (visível ou não) trabalha em parceria com o agente tutor.
Uma vez conectado ao ambiente, o aluno passa a interagir com a interface que contém no seu interior o agente assistente.
De posse do plano de trabalho elaborado por o tutor, o agente assistente pode passar ao aluno as informações necessárias ao início das suas atividades.
O agente assistente possui a função de monitorar as informações do usuário associadas ao modelo do aluno.
O tutor tem o conjunto de informações referentes ao usuário disponível na base de perfis de alunos.
Esta base é atualizada por o agente assistente, ao final de cada sessão de trabalho.
Desta forma, o tutor pode atualizar seu plano de ação para o aluno.
Considera- se uma sessão de trabalho aquela onde o aluno executa o plano criado por o tutor que normalmente consiste de uma seqüência de três exercícios.
A o final de cada sessão, o aluno é informado quanto a o seu desempenho e questionado quanto a o seu desejo de continuar ou não a interagir com o sistema (jogar).
Caso o usuário decida continuar jogando, o sistema disponibiliza a próxima seção de exercícios.
Caso contrário, as informações são armazenadas de maneira a permitir que a próxima sessão seja proposta ao usuário quando ele voltar a acessar o sistema.
A coreografia que se estabelece durante as interações de cada aluno vai gerar um conjunto de informações a serem enviadas para o tutor.
O tutor possui internamente uma base de estratégias, conforme ilustra a Figura 5.1.
O professor faz a manutenção da base de exercícios.
Também, é responsabilidade do professor organizar a base de ajudas, a elaboração de elementos de ajuda correspondentes com o padrão de exercícios selecionados.
O ambiente possui um módulo de aquisição de conhecimento para que se modifique a base de estratégias.
O comportamento do tutor é modelado através de regras que foram estabelecidas por a especialista e, poderão ser modificadas por o professor.
Em esta versão esta atividade fica dependente do programador, uma vez que não se possui um módulo de aquisição de conhecimento para esta finalidade.
Este é um ponto crítico do ambiente.
O professor especifica as regras e estas deverão ser codificadas por um programador para serem compiladas e o sistema atualizado.
Devido esta dependência, tem- se como trabalho futuro desenvolvimento de um módulo de aquisição de conhecimento que permita, em alto nível, a modificação destas informações por parte de o professor sem a dependência da equipe de desenvolvimento.
Este problema não é exclusivo deste projeto e torna- se uma questão em aberto para ser tratada em trabalho futuro.
O professor é o único usuário com acesso ao módulo de manutenção.
Podendo inserir, retirar e atualizar componentes, na base de alunos e de exercícios.
Em a base de exercícios encontra- se o tipo de ajuda necessária para que o agente assistente auxilie o aluno.
O aluno, ao acessar o ambiente, tem seu nome de usuário e senha verificados.
Ocorre, então, a ativação do agente assistente que detém agora, o plano de trabalho criado por o tutor.
Este agente trabalha com o aluno armazenando as informações do aluno e repassando- as para o tutor que as atualiza a cada sessão.
Quando o aluno encerra sua sessão de trabalho, o agente assistente faz a transferência dos arquivos de dados referentes às informações de cada aluno do computador que o aluno está utilizando para o servidor da escola.
O professor possui autorização para fazer alterações nas bases de exercícios e ajudas.
Ele pode, também, obter um relatório da base de alunos.
As novas interfaces do sistema utilizam- se do servidor de banco de dados.
As informações provenientes da interação do usuário com estas interfaces devem ser armazenadas por o SGBD com a finalidade de obter- se o seu perfil.
O SGBD recebe inicialmente o conjunto de informações provenientes da tela inicial do sistema (tela do cadastro), de maneira a formar o perfil inicial do aluno baseado nas informações fornecidas por o professor, quando de o cadastro do aluno.
A base de domínio, atualmente, é composta por dez exercícios principais.
Cada um de eles proporciona ao usuário um grupo de atividades relacionadas a um mesmo tema.
A seguir detalha- se cada um dos exercícios.
Este exercício solicita ao usuário que ele distribua nos campos correspondentes a quantidade de modelos (unidades, dezenas e centenas) sorteada por o sistema.
Em este exercício não será necessária a realização de trocas por parte de o usuário.
Em este exercício, os botões de troca não estão visíveis e a função reorganizar pode ser utilizada apenas depois de se colocar modelos na lixeira porque não é solicitado ao usuário que ele efetue procedimentos de troca.
A Distribuição sem Troca é a versão Mm do Subnível A do Nível 1 do Matematiquinha com as novas características de interface do Mm descritas anteriormente.
A Figura 5.1.1.1 (a) demonstra a Interface de Distribuição sem Troca e a Figura 5.1.1.1 (b) demonstra a interface do Subnível A do Nível 1.
Este exercício tem comportamento similar ao da distribuição sem troca com a agregação da solicitação ao usuário da utilização de procedimentos de troca, além de a distribuição nos campos correspondentes da quantidade de modelos (unidades, dezenas e centenas) sorteada por o sistema.
Em este exercício, os botões de troca estão visíveis e a disposição do usuário.
A função reorganizar pode ser utilizada após a utilização da lixeira ou após um procedimento de troca.
A distribuição com troca é a versão Mm do Subnível B do Nível 1 do Matematiquinha com as novas características de interface do Mm descritas anteriormente.
A Figura 5.1.2.1 (a) demonstra a Interface de Distribuição com Troca e a Figura 5.1.2.1 (b) demonstra a interface do Subnível B do Nível 1.
Este exercício tem comportamento similar ao da distribuição sem troca com o diferencial que é solicitado ao usuário que ele distribua modelos a partir de um número na forma abstrata.
Em este exercício, é facultado ao aluno identificar qual algarismo corresponde a unidades, dezenas ou centenas por a posição que ele aparece na formação do número sorteado por o sistema.
Em este exercício os botões de troca não estão visíveis e a função reorganizar pode ser utilizada apenas depois de se colocar modelos na lixeira porque não é solicitado ao usuário que ele efetue procedimentos de troca.
A Distribuição de Número Abstrato é a versão Mm do Nível 2 do Matematiquinha com as novas características de interface do Mm descritas anteriormente.
A Figura 5.1.3.1 (a) demonstra a Interface de Distribuição de Número Abstrato e a Figura 5.1.3.1 (b) demonstra a interface do Nível 2.
Este exercício solicita ao usuário que ele selecione nos campos das unidades, centenas e dezenas a quantidade de círculos correspondente aos algarismos nas posições das centenas, dezenas e unidades do número abstrato sorteado por o sistema.
Em este exercício, é facultado ao aluno identificar qual algarismo corresponde a unidades, dezenas ou centenas por a posição que ele aparece na formação do número sorteado por o sistema.
O usuário deve selecionar com o mouse, em cada um dos campos, uma quantidade de círculos que represente, através da soma dos números dispostos no seu interior, o valor que cada algarismo representa em unidades.
Os botões de troca não estão visíveis e a função reorganizar não pode ser utilizada porque os círculos não podem ir para a lixeira nem podem ser trocados por outra grandeza.
A Seleção de Número Abstrato não tem correspondente no Matematiquinha e pode ser utilizada por o Mm como um novo exercício ou como um exemplo para alunos que tem problemas na identificação do valor posicional dos algarismos.
Este exercício é diferenciado dos descritos até o momento.
Sua interface é representada em forma de tabela onde na região imediatamente acima de as três linhas (Número, Valor e Nome) estão as grandezas distribuídas, na primeira linha o usuário é convidado a preencher os campos em branco com a quantidade sorteada para cada modelo.
Em a segunda linha o aluno deve preencher os campos em branco com o valor que a quantidade preenchida na primeira linha representa em unidades.
Em a terceira e última linha é solicitado ao usuário que ele escreva por extenso o valor que a união destas grandezas representam.
Em este exercício os botões de troca não estão visíveis e a função reorganizar não pode ser utilizada uma vez que os modelos sorteados são fixos, não sendo passíveis de serem deslocados para a lixeira ou para o campo de troca.
Esta interface foi baseada na interface do Nível 3 da versão tutorial e remodelada de maneira a permitir que os modelos, agora proporcionais, possam ser dispostos na tela considerando- se um número máximo de nove modelos em cada campo.
A versão tutorial possui um enunciado longo para este exercício:
&quot;Observe os quadros abaixo e preencha os campos com o que se pede:».
O número sorteado é perceptível apenas por a quantidade de modelos que preenchem os campos.
Nenhum número, em sua forma abstrata, é mostrado ao usuário.
Em a versão multiagente, o enunciado do exercício foi modificado para apenas &quot;Indique:»
aparecendo, logo após o enunciado a representação abstrata do número referente a a quantidade de modelos sorteada por o sistema, por exemplo:
&quot;Indique_ 243».
Esta alteração permite a relação da quantidade de modelos com sua representação numérica correspondente.
A Identificação e Escrita é a versão Mm do Nível 3 do Matematiquinha.
A Figura 5.1.5.1 (a) demonstra a Interface da Identificação e Escrita e a Figura 5.1.5.1 (b) demonstra a interface do Nível 3.
Este exercício é a versão Mm do Nível 4 do Matematiquinha e é diferenciado dos descritos até o momento.
Sua interface é representada de maneira a se assemelhar a dois conjuntos, sendo comparados lado a lado similarmente ao Matematiquinha tutorial.
Em a versão tutorial os balões eram comparados por botões representando os sinais de igual, maior e menor.
O sistema sorteava números aleatórios menores que 100 para cada um dos balões.
Em a versão multiagente o botão que representa o sinal de igual foi retirado, a palavra igual também não está mais presente no enunciado e o sistema sorteia somente duas variáveis:
X e Y. Em o balão A aparecem modelos correspondentes ao número formado por a concatenação XY e no balão B aparecem modelos correspondentes ao número formado por a concatenação YX.
De esta maneira sempre teremos um número representado no balão A e seu inverso representado no balão B. O algoritmo foi adaptado de maneira a não permitir que o sistema sorteie o mesmo número para os dois balões.
Permaneceram as funções onde usuário é convidado a preencher os campos em branco situados logo abaixo de os balões com o número que cada balão representa.
A diferença é que no Mm o usuário é solicitado a preencher o valor em unidades que o algarismo X representa no balão A e no balão B. Em este exercício os botões de troca não estão visíveis e a função reorganizar não pode ser utilizada uma vez que os modelos sorteados são fixos, não sendo passíveis de serem deslocados para a lixeira ou para o campo de troca.
A Figura 5.1.6.1 (a) demonstra a Interface da Comparação Quantitativa e a Figura 5.1.6.1 (b) demonstra a interface do Nível 4.
Em o Matematiquinha a adição é realizada com fatores de no máximo dois dígitos, portanto o abastecedor era composto de apenas dois modelos (dezena e unidade).
O Mm comporta adições com números de três dígitos e, portanto, o abastecedor possui todos os modelos (centena, dezena e unidade).
A versão tutorial é composta de três campos:
Os primeiros dois campos são abastecidos por o sistema em decorrência do sorteio dos fatores a serem somados, ou seja, o usuário não necessita preencher estes campos com modelos, pois o sistema o faz automaticamente.
O terceiro campo (destinado à resposta) é preenchido por o aluno através do abastecedor.
O Mm possui apenas dois campos.
Ele sorteia apenas números em sua forma abstrata, ou seja, o sistema não preenche os campos com os modelos correspondentes aos fatores.
Ele solicita ao usuário que abasteça de forma concreta os dois fatores sorteados por o sistema de maneira abstrata.
Em o Mm antes do início do preenchimento dos fatores pode ser visualizada a seguinte mensagem sobre os locais correspondentes a cada um destes fatores:
&quot;Clique aqui para inserir a primeira parcela».
De esta maneira o aluno pode alternar de um setor para outro apenas com um clique de mouse.
O usuário então é convidado a efetuar a adição na forma concreta efetuando todas as trocas que se façam necessárias e preenchendo a quantidade de cada modelo obtida através da união dos dois fatores.
O local destinado a receber estes valores está localizado na parte inferior do campo destinado ao segundo fator e na mesma linha que aparece a palavra &quot;total».
Logo após o aluno deve fazer a adição na sua forma abstrata efetuando- a através de uma conta de adição montada ao lado de a tabela que contém os dois fatores.
Em o Matematiquinha as representações abstratas dos fatores aparecem automaticamente em pequenas regiões coladas à direita de seus campos.
O usuário, após preencher o campo de resultados com os modelos correspondentes, pode decidir preencher com o valor numérico correspondente a resposta abstrata numa pequena região ao lado de o campo das respostas ou na conta de adição montada ao lado de a tabela.
Independente da escolha sempre que o usuário digitar o resultado na conta de adição automaticamente uma cópia do que foi digitado aparece na pequena região situada ao lado de o campo de respostas e vice-versa.
Em o Mm as pequenas regiões coladas à direita dos campos dos fatores e do campo de respostas foram retiradas.
Como, nesta versão, o usuário deve preencher cada um dos fatores com modelos do material concreto, os valores dos fatores da conta vão sendo atualizados parcialmente, conforme vai acontecendo o abastecimento nos campos.
Em o Matematiquinha o resultado da conta deve ser preenchido na ordem por a qual se lê ou se escreve, ou seja, da direita para a esquerda.
Em o Mm os resultados da conta devem ser preenchidos na ordem que se preenche a resposta ao se efetuar uma conta de adição, ou seja, da direita para a esquerda.
Em este exercício os botões de troca estão visíveis e a disposição do usuário.
A função reorganizar pode ser utilizada após a utilização da lixeira ou após um procedimento de troca.
A Adição é a versão Mm do Nível 5 do Matematiquinha com as novas características de interface do Mm descritas anteriormente.
Sua interface foi remodelada de maneira a permitir a disposição na tela dos novos modelos, que nesta versão possuem tamanhos proporcionais.
A Figura 5.1.7.1 (a) demonstra a Interface da Adição e a Figura 5.1.7.1 (b) demonstra a interface do Nível 5.
Em o Matematiquinha a subtração é realizada com fatores de no máximo dois dígitos, portanto o abastecedor é composto de apenas dois modelos (dezena e unidade).
O Mm comporta subtrações com números de três dígitos e, portanto, o abastecedor possui todos os modelos (centena, dezena e unidade).
A versão tutorial é composta de três campos:
Os primeiros dois campos são abastecidos por o sistema em decorrência do sorteio dos fatores a serem somados, ou seja, o usuário não necessita preencher estes campos com modelos, pois o sistema o faz automaticamente.
O terceiro campo (destinado à resposta) é preenchido por o aluno através do abastecedor.
O Mm possui apenas dois campos.
Um setor para os modelos referentes a um número inicial (minuendo) e um setor para abrigar os módulos referente a a parcela a ser retirada do número inicial (subtraendo).
Ao contrário de a versão tutorial, o sistema não preenche com modelos nenhum desses setores.
Ele solicita ao usuário que abasteça de forma concreta o setor referente a o minuendo e retire deste setor à parcela referente a o subtraendo.
A versão multiagente, portanto, solicita ao usuário que ele abasteça de forma concreta o número inicial sorteado por o sistema (minuendo) e apresentado na forma abstrata.
Existe um segundo setor para o qual o usuário deve arrastar para o seu interior a quantidade de modelos correspondente ao segundo número sorteado (subtraendo).
Os modelos arrastados até este setor mudam para a cor amarela de maneira a diferenciar- los dos modelos abastecidos (cor marrom) e dos modelos que são produtos de troca (cor azul).
Em o Mm, antes de iniciar o abastecimento, pode ser visualizada no setor relativo ao minuendo a seguinte mensagem:
&quot;Clique aqui para inserir a quantidade inicial».
De a mesma maneira, no setor relativo ao minuendo pode ser visualizada a mensagem:
&quot;Traga para cá a quantidade a ser retirada».
O usuário então é convidado a efetuar a subtração na forma concreta arrastando a quantidade necessária de modelos para o setor relativo ao subtraendo, efetuando todas as trocas que se façam necessárias e preenchendo a quantidade restante no setor relativo ao minuendo na linha que aparece na parte inferior do setor referente a o subtraendo.
Logo após, o aluno deve fazer a subtração na sua forma abstrata efetuando- a através de uma conta de subtração montada ao lado de a tabela que contém os dois fatores.
Em o Matematiquinha as representações abstratas dos fatores aparecem automaticamente em pequenas regiões coladas à direita de seus campos.
O usuário, após preencher o campo de resultados com os modelos correspondentes, pode decidir preencher com o valor numérico correspondente a resposta abstrata numa pequena região ao lado de o campo das respostas ou na conta de adição montada ao lado de a tabela.
Independente da escolha sempre que o usuário digitar o resultado na conta de adição automaticamente uma cópia do que foi digitado aparece na pequena região situada ao lado de o campo de respostas e vice-versa.
Em o Mm as pequenas regiões coladas à direita dos campos dos fatores e do campo de respostas foram retiradas.
Como, nesta versão, o usuário deve preencher cada um dos fatores com modelos do material concreto, os valores dos fatores da conta vão sendo atualizados parcialmente, conforme vai acontecendo o abastecimento nos campos.
Em o Matematiquinha o resultado da conta deve ser preenchido na ordem por a qual se lê ou se escreve, ou seja, da esquerda para a direita.
Em o Mm os resultados da conta devem ser preenchidos na ordem que se preenche a resposta ao se efetuar uma conta de adição, ou seja, da direita para a esquerda.
Em este exercício os botões de troca estão visíveis e a disposição do usuário.
A função reorganizar pode ser utilizada após a utilização da lixeira ou após um procedimento de troca.
A Subtração é a versão Mm do Nível 6 do Matematiquinha com as novas características de interface do Mm descritas anteriormente.
Sua interface foi remodelada de maneira a permitir a disposição na tela dos novos modelos, que nesta versão possuem tamanhos proporcionais.
A Figura 5.1.8.1 (a) demonstra a Interface da Subtração e a Figura 5.1.8.1 (b) demonstra a interface do Nível 6.
Este exercício solicita ao usuário que ele abasteça de forma concreta o número relativo ao fator multiplicativo de maior valor em tantos setores quanto representa o fator multiplicativo de menor valor, ou seja, será abastecido com a quantidade de modelos correspondente ao fator de maior valor:
2, 3, 4 ou 5 setores, dependendo da quantidade de vezes que o segundo fator será multiplicado.
Em este exercício, o máximo de vezes que um número pode ser multiplicado é cinco vezes.
Antes do primeiro clique num desses setores pode ser visualizada a seguinte mensagem sobre qualquer um dos setores:
&quot;Clique aqui para adicionar neste campo».
De esta maneira, o aluno pode alternar de um setor para outro apenas com um clique de mouse.
O usuário então é convidado a efetuar a multiplicação na sua forma concreta efetuando todas as trocas que se façam necessárias e preenchendo a quantidade final de cada uma das grandezas na linha que aparece na parte inferior do segundo setor.
Logo após, o aluno deve fazer a multiplicação na sua forma abstrata efetuandoa através de uma conta de multiplicação montada ao lado de a tabela que contém os fatores.
A Multiplicação não tem correspondente no Matematiquinha.
Ela foi modelada e implementada exclusivamente para o Mm..
Em este exercício, os botões de troca estão visíveis e a disposição do usuário e um botão de troca pode ser utilizado repetidas vezes.
A função reorganizar pode ser utilizada após a utilização da lixeira ou após um procedimento de troca.
Este exercício solicita ao usuário que ele abasteça de forma concreta o número inicial a ser dividido, sorteado por o sistema, e apresentado na forma abstrata.
Para receber os modelos correspondentes a quantidade inicial (dividendo) a ser dividida, a interface possui um setor específico situado à direita do abastecedor.
Após o preenchimento dos modelos referentes ao fator a ser dividido, o usuário deve efetuar a divisão na forma concreta distribuindo igualmente os modelos numa quantidade de setores correspondente ao fator de divisão (divisor).
Para possibilitar esta distribuição existe, na interface à direita do setor que abriga os modelos referentes ao dividendo, um conjunto de cinco setores separados por linhas.
Para que a distribuição dos modelos referentes ao divisor num número determinado de setores possa ocorrer de forma eqüitativa, talvez se faça necessária à utilização de procedimentos de troca.
O usuário deve efetuar todas as trocas antes de confirmar sua resposta.
Logo após, o aluno deve fazer a divisão na sua forma abstrata efetuando- a através de uma conta de divisão montada ao lado de os setores relativos ao divisor.
A Divisão não tem correspondente no Matematiquinha.
Ela foi modelada e implementada exclusivamente para o Mm..
Em este exercício, os botões de troca estão visíveis e a disposição do usuário e um botão de troca pode ser utilizado repetidas vezes.
A função reorganizar pode ser utilizada após a utilização da lixeira ou após um procedimento de troca.
A modelagem do perfil cognitivo do usuário utiliza como base os erros cometidos por o aluno quando de a resolução dos exercícios propostos por o sistema Mm..
Foram implementadas rotinas capazes de executar, passo a passo, a correta resolução de cada um dos exercícios.
Estas rotinas são executadas logo que o exercício é apresentado na tela e de maneira imperceptível ao usuário.
Ou seja, são executadas para que o agente assistente tenha subsídios para a sua tomada de decisão, quando o aluno executa um exercício proposto.
Os resultados obtidos através da execução destas rotinas são, então, comparados aos resultados obtidos por o aluno.
Através destas comparações o sistema pode detectar possíveis erros cometidos por o aluno.
Estas rotinas são capazes de fazer comparações em resultados parciais.
Ou seja, elas podem identificar em que parte da resolução do exercício o erro foi cometido identificando, especificamente, qual tipo de erro foi cometido, considerando o conjunto de erros possíveis modelados no sistema, com a orientação da especialista.
Com base nos dados cadastrais do aluno, o sistema propõe uma primeira seção de trabalho composta por três exercícios.
O grau de complexidade destes exercícios é estipulado por o professor, quando de o cadastro do aluno.
Parte- se do pressuposto que o professor possui uma hipótese acerca de o estado cognitivo corrente do seu aluno.
Ressaltando, que os estilos cognitivos são suposições que se faz sobre o aprendiz.
Existem discussões entre os psicólogos cognitivistas se isto é uma boa forma de se fazer suposições sobre &quot;como as pessoas aprendem».
Entretanto, esta é uma prática corrente entre os pesquisadores de IAED.
Logo, ela foi adotada neste trabalho.
A o final de cada um dos exercícios propostos, os erros cometidos por o usuário são reportados ao agente assistente, que os classifica em categorias.
Esta categorização de erros leva em conta o tipo de tratamento que cada erro terá por parte de o sistema.
Cada categoria busca identificar a falta de conhecimento do usuário em relação a uma parcela específica do conteúdo apresentado.
Após a classificação e categorização dos erros por o agente assistente, ele envia ao agente tutor estas informações.
O tutor do Mm adota estratégia de ação não invasiva.
Ou seja, ele atua como um companheiro que assiste o aluno e fornece orientações para que ele resolva seu exercício.
O tutor se comporta como um assistente/ facilitador e não como um guia propriamente dito.
Aquele que resolve passo- a- passo o exercício para o aluno.
Para colocar em prática esta estratégia, o tutor utiliza as seguintes táticas:
Dica: Através da exibição de uma mensagem no rodapé do exercício que está sendo executado, o tutor fornece dicas de onde está o erro, proporcionando ao aluno uma segunda chance de resolver o exercício.
Esta tática é adotada quando o tutor percebe a ocorrência de uma categoria de erro pela primeira vez.
Exemplo 1: Através da exibição de uma nova tela composta de textos explicativos e/ ou animações, o tutor busca elucidar o usuário quanto a a forma correta de resolver o exercício.
Logo após a exibição da tática EXEMPLO 1, o aluno tem uma terceira oportunidade de resolver o exercício.
Esta tática só será adotada caso o tutor receba erros desta categoria após a utilização da tática Dica para aquela categoria.
Exemplo 2: Também é obtido através da exibição de uma nova tela composta de textos explicativos e/ ou animações onde o tutor busca elucidar o usuário quanto a a forma correta de resolver o exercício.
A diferença em relação a o exemplo 1 está na necessidade do usuário interagir com o exemplo.
Durante a execução deste exemplo o usuário deverá responder algumas questões apresentadas por o sistema.
Para responder tais questões o aluno necessita refletir sobre o tipo de erro que está sendo cometido.
Caso a respostas obtidas durante a execução do exemplo 2 estejam corretas o aluno tem uma terceira oportunidade de resolver o exercício.
Esta tática só será adotada caso o tutor receber erros desta categoria após a utilização da tática EXEMPLO 1 para aquela categoria.
Registro: Esta é uma tática de abandono, onde o tutor simplesmente solicita ao banco de dados que registre a categoria de erros recebida e siga em frente.
Esta tática é adotada em dois casos:
O primeiro caso quando as respostas obtidas durante a execução do exemplo 2 estiverem incorretas.
O segundo caso quando as respostas obtidas durante a execução do exemplo 2 estiverem corretas e o aluno incorrer em erro similar durante a terceira oportunidade de resolver o exercício, ou seja, após a execução do exemplo 2.
Os registros de categorias de erros no banco de dados serão considerados para a seleção da próxima seção de trabalho que também será composta de três exercícios.
Até a presente versão do sistema, não houve necessidade de se fazer alterações na base do domínio do sistema original.
Ou seja, tanto o conteúdo abordado quanto a totalidade dos exercícios propostos no Matematiquinha foram integralmente reaproveitados no Mm..
Em o entanto, verificou- se a necessidade da criação de novos exercícios de maneira a expandir o conteúdo apresentado.
Também se fez necessária à criação de novas mensagens e exemplos que têm a finalidade de auxiliar o aluno a perceber e corrigir os erros cometidos.
Os esforços de análise, modelagem e projeto, neste sentido, foram bastante significativos.
Uma vez que, se fez necessária a classificação dos erros conforme a relação que eles possuem com um determinado conceito ou conteúdo.
Esta classificação pode vista em maiores detalhes na seção 6.1.1 do presente capítulo.
São estes tipos de erros que nos permitem inferir o estado cognitivo corrente do usuário com relação a o conceito especificado.
Fez- se necessária uma ampla discussão com a especialista no sentido de se identificar qual o procedimento mais adequado para auxiliar o usuário a compreender o conceito em questão, prevendo- se que o aluno possa necessitar de vários exercícios e/ ou dicas e exemplos até que ele possa construir o conhecimento necessário à compreensão de um determinado conceito.
Este tipo de análise e modelagem não foi necessária na versão tutorial.
Esta é uma diferença considerável quando se parte de um tutorial para se construir um sistema com arquitetura de STI.
A modelagem do aluno possui muitas implicações.
Uma vez que necessita um planejamento coordenado de ações envolvendo o usuário, o tutor artificial e os demais componentes do sistema.
O funcionamento do Matematiquinha é feito de forma seqüencial.
Ou seja, todos os alunos obrigatoriamente iniciam o jogo através do mesmo exercício.
A partir de aí, os usuários são submetidos à mesma seqüência de exercícios, até alcançarem o exercício final.
Não existe o tratamento de erro.
Em o Mm, o primeiro exercício é selecionado na base de exercícios conforme as informações correspondentes ao usuário em questão.
O desempenho relativo aos acessos anteriores do usuário é considerado para eleger o exercício inicial mais adequado ao usuário nesta nova sessão de trabalho.
Caso o usuário esteja jogando pela primeira vez, serão considerados apenas os dados cadastrais do usuário tais como:
Idade, série e o perfil definido por a professora, quando de o seu cadastramento, conforme explicado anteriormente.
De esta maneira, pretende-se fornecer um atendimento personalizado ao usuário levando- se em conta a categoria do erro cometido, a quantidade de vezes que o aluno cometeu erros de uma determinada categoria e o registro do seu desempenho em seções de trabalho anteriores.
Cabe salientar que o ambiente foi projetado para ser utilizado como recurso da aula prática.
Pressupondo- se que a parte conceitual foi trabalhada previamente em sala de aula.
E, que o aluno irá utilizar o sistema por mais de uma vez.
O grupo de pesquisa onde este projeto foi desenvolvido possui como crença que um software educacional deve ser contextualizado, via metodologia de trabalho do professor, dentro de as atividades de sala de aula.
Isto é, deve existir um objetivo específico quando de a utilização de um programa educacional.
O sistema pode ser utilizado para introduzir conceitos ou fixar- los.
No caso de os ambientes baseados em STI, estes exploram a questão da fixação de conteúdos, uma vez que trabalham com uma base de domínio composta por exercícios/ problemas organizados, intencionalmente, por níveis de dificuldade e com tratamento da sua resolução acompanhado por o módulo tutor.
Módulo este que na abordagem de STI multiagentes pode ser desempenhado por um ou mais agentes.
No caso de o Mm, esta atividade de tutoria é compartilhada por o agente tutor.
A agentificação de um tutorial passa a ser necessária quando se deseja construir um novo ambiente que seja mais adaptativo.
Isto é, que leve em consideração o trabalho e o estilo de cada aluno.
Este processo de se utilizar o conhecimento da equipe de trabalho a partir de o desenvolvimento de um tutorial para um novo ambiente baseado numa arquitetura de STI possui uma série de premissas:
Documentação detalhada do projeto inicial no que tange a organização dos exercícios e seu objetivo;
Explicitação por parte de a especialista com relação a os objetivos educacionais do sistema;
Domínio de conteúdo e experiência profissional da especialista;
Clareza, por parte de a especialista, no tipo de atitude que o sistema deve tomar quando de a ocorrência de um erro ou acerto.
Isto é, ela deve fornecer as regras para serem utilizadas por o sistema para acompanhar e &quot;classificar «o aluno dentro de os níveis que ela estabeleceu.
As implicações disto se expressam diretamente na organização, planejamento e coordenação do novo projeto.
Porém, serão tratadas no capítulo das considerações finais.
Este esforço de coordenar uma equipe interdisciplinar exige habilidade, uma vez que se espera, das partes, um diálogo com uma ciência que não é aquela da sua origem (no caso, a Ciência da Computação).
As categorias de erros foram criadas com o auxílio da especialista, e agrupadas de acordo com o à parte do conteúdo sobre a qual elas nos permitem inferir o estado cognitivo do usuário.
Estas categorias estão descritas a seguir:
Grupo A:
Erros na identificação da quantidade de modelos em cada ordem.
São erros que podem ocorrer nos exercícios de distribuição sem troca, distribuição com troca, distribuição de número abstrato, seleção de círculos e identificação e escrita.
Tem relação com a identificação da quantidade de centenas, dezenas e unidades proposta por o sistema.
Em os exercícios de distribuição sem troca e distribuição com troca o enunciado explicita quantas unidades, dezenas e centenas serão necessárias para a correta resolução do exercício.
Em os exercícios de distribuição de número abstrato e seleção de círculos o aluno deve perceber quantas unidades, dezenas e centenas serão necessárias para a resolução do exercício, identificando- as por a posição que cada algarismo aparece no número sorteado.
Em o exercício de identificação e escrita o sistema proporciona o abastecimento dos modelos em cada campo, responsabilidade do usuário nos exercícios anteriores, cabendo ao usuário o preenchimento dos algarismos referentes à quantidade de material abastecido por o sistema em cada campo.
Em este grupo identificaram- se as seguintes categorias de erros:
Campo das unidades com uma quantidade diferente da proposta por o exercício, no exercício de seleção de círculos quando o aluno habilita, no campo das unidades, uma quantidade de círculos diferente da proposta por o exercício ou, no caso de o exercício de identificação e escrita, digita um número não correspondente à quantidade de modelos de unidades presentes no campo.
As três categorias terão como dica uma mensagem padrão.
Para a Categoria 1 a dica será a seguinte:
&quot;Revise a quantidade de unidades e tente novamente».
Para a Categoria 2 troca- se apenas a palavra unidades por dezenas e para a Categoria 3 trocase apenas a palavra unidades por centenas.
Grupo B: Erros relativos a não execução do procedimento de troca.
Erros que podem ocorrer nos exercícios de distribuição com troca, adição, subtração, multiplicação e divisão e que estão relacionados com a não utilização de uma das regras básicas do jogo:
O usuário deve efetuar todas as trocas necessárias antes da conclusão do exercício.
Em o exercício de distribuição com troca, a troca é necessária quando o sistema sorteia um número de modelos maior que nove para um determinado campo, como, por exemplo, o sistema sorteou quinze unidades.
É facultado ao usuário decidir se ele preenche dez unidades, troca por uma dezena e posteriormente preenche as cinco unidades restantes ou se ele preenche as quinze unidades e depois troca dez de elas por uma dezena.
O erro será detectado quando o botão Confirma do exercício for utilizado (conclusão do exercício) sem que a troca tenha sido efetuada, ou seja, as quinze unidades ainda permanecerem no campo das unidades.
Existe uma regra do jogo que implica em só se concluir um exercício quando em nenhum dos campos existir mais de nove modelos.
Em os exercícios de adição e multiplicação a troca será necessária quando o resultado da soma ou multiplicação dos elementos de um dos campos resultar maior que nove.
Por exemplo, se somar cinco unidades do primeiro fator com sete unidades do segundo fator o resultado será doze unidades.
Como não é possível se representar doze unidades no campo das unidades, o aluno deve efetuar a troca de dez de elas por uma dezena.
Procedimento análogo ao &quot;vai um «na representação abstrata dessa adição.
O &quot;um «que &quot;vai «são dez unidades trocadas por uma dezena, portanto deve- se contar com uma dezena a mais no campo das dezenas, o que se reflete em somar mais um na posição das dezenas quando de o &quot;vai um «em representação abstrata.
Em os exercícios de subtração e divisão a troca será necessária quando não for possível retirar da quantidade inicial a quantia solicitada.
Por exemplo, ao efetuar- se a subtração 30 ­ 27 não é possível retirar 7 unidades das 0 unidades sorteadas no total.
Em este caso, o usuário deve trocar uma das três dezenas por dez unidades e então retirar sete unidades das dez trocadas restando duas dezenas e três unidades.
Este procedimento é análogo ao &quot;pedir emprestado «na representação abstrata de uma subtração.
Em este grupo, identificaram- se as seguintes categorias de erros:
De unidades por dezena para efetuar e confirma os resultados do exercício sem ter efetuado nenhuma troca deste tipo.
Todas as categorias deste grupo podem ter uma única dica:
&quot;Efetue as trocas e tente novamente».
Grupo C: Erros relativos à ordem das trocas.
Erros que pode ocorrer nos exercícios de distribuição com troca, adição, subtração, multiplicação e divisão e que estão relacionados com a ordem obrigatória em a qual as trocas devem ser efetuadas.
Em os exercícios de distribuição com troca, adição e multiplicação só é possível efetuar- se trocas no sentido:
Dez elementos por o elemento de maior grandeza, ou seja, do tipo unidades por dezena e/ ou dezenas por centena e devem ser efetuadas obrigatoriamente nesta ordem.
Em os exercícios de subtração e divisão só é possível efetuar- se trocas no sentido:
Troca de um elemento por dez elementos de menor grandeza.
Ou seja, trocas do tipo centena por dezenas e/ ou dezena por unidades.
Em a subtração deve- se trocar em primeiro lugar dezena por unidades.
Em a divisão deve- se trocar em primeiro lugar centena por dezenas.
Em este grupo, identificaram- se as seguintes categorias de erros:
Ocorre quando o aluno tinha troca (s) de unidades por dezena e de dezenas por centena para efetuar e tenta efetuar em primeiro lugar trocas de dezenas por centenas.
Ocorre quando o aluno tinha troca (s) de centena por dezenas e de dezenas por unidades para efetuar e tenta efetuar em primeiro lugar trocas de dezena por unidades.
Todas as categorias deste grupo podem ter uma única dica:
&quot;Revise a ordem das trocas e tente novamente».
Grupo D: Erros relativos à quantidade de elementos necessários para efetuarse corretamente uma troca.
Erros que podem ocorrer nos exercícios de distribuição com troca, adição, subtração, multiplicação e divisão e que estão relacionados com o conceito de trocas propriamente dito.
Ou seja, quantos modelos necessitam- se para se efetuar uma troca.
Ocorrência deste grupo de erros indica que o usuário ainda não atingiu o nível de conhecimento necessário ao correto procedimento de troca.
Podem ocorrer em dois sentidos:
Troca de um elemento de maior grandeza por dez elementos de menor grandeza, que ocorre nos exercícios de subtração e divisão;
Troca de dez elementos de menor grandeza por um elemento de maior grandeza, que ocorre nos exercícios de distribuição com troca, adição e multiplicação.
Em este grupo, identificaram- se as seguintes categorias de erros:
Quando o sentido da troca é trocar dez elementos de menor grandeza por um elemento de maior grandeza e o aluno abastece o campo de troca com uma quantidade diferente de dez elementos e tenta efetuar a troca.
Todas as categorias deste grupo podem ter uma única dica:
&quot;Revise as quantidades de elementos disponíveis para trocar e tente novamente».
Grupo E:
Erros relacionados ao valor posicional do algarismo.
Podem ocorrer nos exercícios de identificação e escrita e comparação quantitativa nos campos destinados ao preenchimento do valor na posição ocupada (exercício de identificação e escrita) e nos campos destinados a preencher qual o valor do algarismo X no balão A e qual o valor do algarismo X no balão B. Tem relação com o valor posicional de cada algarismo que compõe o número.
Ou seja, o valor em unidades que cada modelo ou conjunto de modelos representa dependendo da posição ou campo que estão inseridos.
Esta classe de erros indica que o usuário ainda não alcançou o nível de compreensão necessário para inferir quanto vale em unidades cada algarismo indicado dependendo da posição em a qual ele aparece no número sorteado.
Em este grupo, identificaram- se as seguintes categorias de erros:
Exercício de identificação e escrita, quando o usuário digita um valor em unidades que não corresponde à quantidade de unidades representadas por a quantidade de elementos presente no campo das unidades.
Cada categoria deste grupo terá sua própria dica.
Categoria 12: &quot;Revise o valor das unidades e tente novamente».
Categoria 13: &quot;Revise o valor das dezenas e tente novamente».
Categoria 14: &quot;Revise o valor das centenas e tente novamente».
Categoria 15: &quot;Revise o valor do algarismo no balão A e tente novamente».
Categoria 16: &quot;Revise o valor do algarismo no balão B e tente novamente».
Grupo F: Erros ao digitar o nome do número por extenso.
Podem ocorrer unicamente no exercício de identificação e escrita no campo destinado ao preenchimento do nome do número por extenso.
A ocorrência deste grupo de erros indica que o usuário ainda não atingiu o nível de conhecimento necessário para digitar corretamente o nome do número por extenso.
Em este grupo, identificou- se uma única categoria de erro:
Usuário digita o nome do número por extenso de maneira incorreta.
A dica para esta categoria é a seguinte:
&quot;Revise o nome do número por extenso e tente novamente».
Grupo G: Erros relacionados a comparações quantitativas.
Esta classe de erros possui uma única categoria.
A única possibilidade de ocorrência da categoria de erros referente a este grupo reside no exercício de comparação quantitativa.
Sua ocorrência indica que o usuário ainda não construiu conhecimento suficiente para discernir corretamente comparações quantitativas.
Em este grupo, a única categoria de erro identificada foi:
Botões &quot;maior «ou &quot;menor «do exercício de comparação quantitativa de maneira incorreta.
A dica para esta categoria é:
&quot;Revise qual é o maior balão e tente novamente».
Grupo H: Erros no mapeamento do concreto para o abstrato ou do abstrato para o concreto.
Este grupo de erros indica que o usuário ainda não desenvolveu habilidades para relacionar a quantidade de material com a representação algorítmica correspondente.
Em os exercícios de adição, subtração, multiplicação e divisão o usuário necessita representar, através do preenchimento dos modelos do material concreto, números sorteados por o sistema na forma abstrata.
Em o exercício de comparação quantitativa são necessários os preenchimentos dos campos referentes à representação abstrata dos modelos fornecidos na forma concreta no interior de cada um dos balões.
Em o exercício de adição, o aluno necessita representar da forma concreta cada fator sorteado na forma abstrata para depois adicionar- los.
Em o exercício de subtração o sistema fornece um número total representado na forma abstrata e convida o usuário a representar- lo na forma concreta e depois retirar os modelos do material concreto correspondente ao valor abstrato a ser retirado do total.
Em a multiplicação, são necessários os preenchimentos com modelos concretos de cada um dos fatores de multiplicação fornecidos na forma abstrata.
Em a divisão, o usuário necessita preencher com a representação concreta cada um dos campos que recebem modelos retirados da quantidade inicial.
Em este grupo, identificaram- se as seguintes categorias de erros:
Usuário utiliza o abastecedor para preencher os modelos que representam de forma concreta um valor representado na forma abstrata.
São os erros de preenchimento dos fatores de adição, multiplicação e das quantidades iniciais totais referentes à subtração e divisão.
Cada categoria deste grupo terá sua própria dica.
Categoria 19: &quot;Revise a quantidade de modelos utilizados e tente novamente».
Categoria 20: &quot;Revise o número digitado e tente novamente».
Grupo I: Erros no número de campos utilizado.
Podem ocorrer nos exercícios de multiplicação e divisão e são relacionados com a identificação do fator de divisão ou de multiplicação.
Esta classe de erros indica que o usuário ainda não adquiriu conhecimento suficiente para discernir que o número de campos a ser utilizado deve ser correspondente ao fator de multiplicação ou de divisão Em este grupo, identificaram- se as seguintes categorias de erros:
Todas as categorias deste grupo podem ter uma única dica:
&quot;Revise o número de campos utilizados na troca e tente novamente».
Grupo J: Erros na quantidade de trocas necessárias.
Este grupo de erros indica que o usuário não adquiriu conhecimento necessário para identificar quantas trocas são necessárias à conclusão da operação de maneira correta.
Podem ocorrer nos exercícios de multiplicação e divisão e são relacionados com a necessidade do usuário identificar quantas trocas são necessárias para que a operação seja concluída com sucesso.
Para que este erro não seja categorizado como erro de esquecimento de troca ele só será considerado quando o usuário tiver efetuado no mínimo uma troca.
Em este grupo, identificaram- se as seguintes categorias de erros:
Usuário não efetua a quantidade de trocas necessárias de unidades por dezenas.
Todas as categorias deste grupo podem ter uma única dica:
&quot;Você deve terminar de efetuar as trocas antes de confirmar».
Grupo L: Erros na resposta da representação abstrata da operação de adição.
Este grupo de erros indica que o usuário não adquiriu conhecimento necessário para efetuar de maneira correta a operação de adição em representação abstrata.
Podem ocorrer unicamente no exercício de adição no campo destinado as contas de adição montada no lado esquerdo superior da interface de adição.
Em este grupo, identificou- se uma única categoria de erro:
Algarismos de forma correta.
Este erro ocorre no exercício de adição.
A dica para esta categoria é a seguinte:
&quot;Revise sua adição e tente novamente».
Grupo M: Erros na resposta da representação abstrata da operação de subtração.
Este grupo de erros indica que o usuário não adquiriu conhecimento necessário para efetuar de maneira correta a operação de subtração em representação abstrata.
Podem ocorrer unicamente no exercício de subtração no campo destinado as contas de subtração montadas no lado esquerdo superior da interface de subtração.
Em este grupo, identificou- se uma única categoria de erro:
Entre dois algarismos de maneira correta.
Este erro ocorre no exercício de subtração.
A dica para esta categoria é:
&quot;Revise sua subtração e tente novamente».
Grupo N: Erros na resposta da representação abstrata da operação de multiplicação.
Este grupo de erros indica que o usuário não adquiriu conhecimento necessário para efetuar de maneira correta a operação de multiplicação em representação abstrata.
Podem ocorrer unicamente no exercício de multiplicação no campo destinado as contas de multiplicação montadas no lado esquerdo superior da interface de multiplicação.
Em este grupo, identificou- se uma única categoria de erro:
Multiplicação entre dois algarismos de maneira correta.
Este erro ocorre no exercício de multiplicação.
A dica para esta categoria é a seguinte:
&quot;Revise sua multiplicação e tente novamente».
Grupo O:
Erros na resposta da representação abstrata da operação de divisão.
Este grupo de erros indica que o usuário não adquiriu conhecimento necessário para efetuar de maneira correta a operação de divisão em representação abstrata.
Podem ocorrer unicamente no exercício de divisão no campo destinado as contas de divisão montada no lado direito superior da interface de divisão.
Em este grupo, identificou- se uma única categoria de erro:
Dois algarismos de maneira correta.
Este erro ocorre no exercício de divisão.
A dica para esta categoria é:
&quot;Revise sua divisão e tente novamente».
Grupo P: Erros no posicionamento dos fatores referentes à resposta em representação abstrata.
Este grupo de erros indica que o usuário não adquiriu conhecimento necessário para posicionar de maneira correta os fatores referentes às respostas nas representações abstratas (continhas).
Podem ocorrer nos exercícios de divisão e estão relacionados com a habilidade de posicionar corretamente os fatores ao formar a conta.
Em este grupo, identificou- se uma única categoria de erro:
Correspondente às unidades na coluna das unidades ou correspondente às dezenas na coluna das dezenas ou ainda o correspondente às centenas na coluna das centenas.
Pode ocorrer nos exercícios de divisão.
A dica para esta categoria é a seguinte:
&quot;Revise a posição dos fatores de sua continha e tente novamente».
Estes tipos de erros são utilizados por os agentes tutor e mascote para suas tomadas de decisão no que se refere ao &quot;comportamento «do sistema quando de a interação do aluno.
Cabe ressaltar que existem dois níveis sendo trabalhados quando a coreografia se estabelece no ciclo tutorial, conforme mencionado por Giraffa e Vicari e Goulart e Giraffa.
Em o nível interno do sistema, não observável por o usuário, estão acontecendo às tomadas de decisão baseadas nas regras e diretivas modeladas, a partir de as informações fornecidas por a especialista.
E, também, armazenamento nas estruturas de dados, execução de métodos, etc..
De as informações geradas.
Em o nível observável (interface) o usuário vai perceber algumas modificações na tela quando elas tiverem sido previstas com saídas para o usuário.
Nem toda a ação que ocorre internamente no sistema possui como reação imediata uma mudança na interface.
Este trabalho teve como motivação inicial o conjunto de restrições observadas na versão tutorial do Matematiquinha quando de sua aplicação em situação real de sala de aula.
Observou- se também, a carência de softwares de auxílio à educação, a necessidade de documentar o projeto original a fim de se poder continuar trabalhando com uma equipe nova e com um número maior de elementos.
Aliado a estes aspectos acrescenta- se ainda, o fato de que os professores usuários do sistema original desejavam uma versão capaz de levar em consideração o perfil cognitivo de cada usuário adaptando- se a este de maneira a proporcionar um atendimento personalizado a cada aluno.
A identificação do problema tornou possível definir como objetivo deste trabalho a agentificação do Matematiquinha de maneira a transformar- lo num STI, modelado através de uma arquitetura multiagente.
Tornando- o, assim, capaz de proporcionar um atendimento que se adapte as necessidades de cada usuário.
Esta nova versão permite modelar o estado cognitivo do usuário através de sua interação com o sistema.
Para tanto, a nova versão conta com um agente assistente e um agente tutor.
O agente assistente possui sensores capazes de identificar cada erro cometido por o usuário e categorizar- los conforme regras definidas por a especialista.
Este trabalho foi desenvolvido com a colaboração de dois bolsistas de iniciação científica, responsáveis por a parte de implementação do protótipo, uma especialista na área de Matemática e de Ensino Fundamental, responsável por o suporte pedagógico do sistema, um mestrando na área de IE (o autor), responsável por a coordenação dos bolsistas e por a interação com o grupo visando suporte à tomada de decisão no que tange ao planejamento, desenvolvimento e implementação do projeto e de sua orientadora de mestrado, responsável não só por a orientação do mestrando, bem como, também, por a coordenação geral do projeto.&amp;&amp;&amp;
O grande aumento de complexidade para a elaboração do Mm em relação a o Matematiquinha original exigiu do grupo esforços redobrados no que tange ao planejamento, modelagem e implementação em virtude de o grau de complexidade intrínseca a um projeto envolvendo STIs.
Este aumento de recursos humanos trouxe ao projeto a necessidade de uma coordenação mais abrangente com a definição dos papéis que cada componente deve realizar.
O processo de agentificação não pode ser pensado como um processo simples e rápido.
A identificação dos componentes passíveis de serem reutilizados e a compatibilização das tecnologias envolvidas demandam muito tempo e estudo.
Para iniciar- se um processo de agentificação é de fundamental importância a existência de uma boa documentação do sistema original.
No caso de o Matematiquinha, a documentação não era suficiente para que ele pudesse ser agentificado.
A agentificação só foi possível por o fato de um dos autores do Mm ter sido também autor do Matematiquinha.
Como o objetivo desta pesquisa era justamente verificar a questão do volume demandado de trabalho para se efetuar um processo de agentificação de software educacional, a escolha de um ambiente conhecido foi fundamental.
Para agentificar um ambiente educacional é fundamental que ele possua documentação formal e organizada de forma a permitir sua reprodução, ampliação e reutilização dos resultados atingidos.
Essa documentação permite, também, uma melhor compreensão dos objetivos do sistema e sua modelagem.
Espera- se, com os resultados deste trabalho, contribuir para diminuir a carência de sistemas de auxílio ao ensino da matemática fundamental, colaborar no sentido de tornar mais elucidativa e atraente a apresentação do material dourado em sala de aula.
Além de isto, disponibilizar a outros integrantes de grupos de pesquisa da área de IE às particularidades do processo de agentificação de sistemas tutoriais, esperando- se, com isso, reduzir esforços na busca do conhecimento referente a este tema.
Uma das contribuições desta pesquisa diz respeito à definição e identificação do volume de trabalho, problemas, restrições e limitações inerentes ao processo de agentificação de um sistema educacional, modalidade tutorial.
A partir de esta definição foi possível determinar uma série de informações que podem auxiliar a comunidade científica de IE a utilizar este trabalho para outros processos de agentificação aplicada a software educacional.
O processo de agentificação demonstrou ser eficiente no aumento das possibilidades pedagógicas do ambiente.
Isto é, foi possível a personalização das atividades e sua adaptação em função de as necessidades de cada usuário.
Não se discute aqui se a ajuda e o sistema conseguem ou não produzir resultados na aprendizagem do aluno.
Isto será feito em outra situação fora de a dissertação.
Os integrantes de grupos de pesquisa que tenham relação com o tema poderão se beneficiar da consulta dos documentos, gerados a partir de a interação com a especialista, disponíveis no Apêndice A. Podendo, assim, compreender as decisões tomadas e suas justificativas, o que se considera fundamental para o entendimento da agregação de determinadas características e funcionalidades do sistema.
Além disso, o projeto contribui para auxiliar na redução do esforço investido por o professor nas atividades de ensino de matemática fundamental disponibilizando um ambiente gratuito e com documentação acessível.
Com a utilização deste ambiente as escolas podem reduzir o custo de aquisição e manutenção do Material Dourado.
Uma vez que as professoras poderão utilizar os &quot;kits «concretos para demonstração em sala de aula e os alunos farão experimentos no laboratório de informática da escola.
Em função de a restrição de tempo, inerente a qualquer projeto de pesquisa do porte de mestrado, reduziu- se o escopo de desenvolvimento pretendido quando de a definição projeto.
Com esta alteração, especificou- se que seriam desenvolvidas no protótipo apenas as dicas e os exemplos referentes às categorias de erro encontradas no exercício de adição.
Com o agente assistente e o agente tutor já em funcionamento, estas dicas e exemplos são necessários para a demonstração do processo de agentificação neste exercício do Mm..
O Mm possui limitações no que se refere à possibilidade do professor fazer a manutenção da base de exercícios, organizar a base de ajudas, modificar a base de estratégias e substituir as regras que determinam o comportamento do tutor.
Em esta versão esta atividade fica dependente do programador.
Este é um ponto crítico do ambiente.
O professor especifica as regras e estas deverão ser codificadas por um programador para serem compiladas e o sistema atualizado.
No que diz respeito ao Mm, no contexto deste protótipo, este tem seus relatórios retratando informações bastante restritas, uma vez que somente disponibiliza para fins de relatório os erros cometidos por mais de três vezes, pois no momento são os únicos que ficam armazenados no banco de dados.
Devido a a situação de dependência do professor em relação a os programadores para fazer a manutenção da base de exercícios, organizar a base de ajudas, modificar a base de estratégias e substituir as regras que determinam o comportamento do tutor, tem- se como trabalho futuro o desenvolvimento de um módulo de aquisição de conhecimento que permita, em alto nível, a modificação destas informações por parte de o professor sem a dependência da equipe de desenvolvimento.
Este problema não é exclusivo deste projeto e torna- se uma questão em aberto para ser tratada em trabalho futuro.
Um outro trabalho proposto é disponibilizar o Mm e o Matematiquinha aos alunos e analisar suas considerações, para tal, devem ser preparados instrumentos de avaliação adequados a esta faixa etária.
Além de a comparação de resultados frente a os dois sistemas, tem- se uma série de aspectos que podem ser investigados para melhorar e complementar a nova versão do sistema.
Durante a apresentação do seminário de andamento foram consideradas as seguintes possibilidades de se ampliar o trabalho:·
Redimensionar o papel do agente mascote no que tange a animação e colocação de uma barra de energia.
Esta barra ficaria associada ao conjunto de atividades realizadas por o aluno, através de regras que alterariam a quantidade de energia do mascote.
Ficando a cargo de o aluno cuidar do mascote.
A idéia busca agregar componentes afetivos às tarefas, procurando suavizar o processo de resolução dos exercícios.
Quando consultada, a especialista preferiu tratar deste tipo de funcionalidade em outra versão.
Pois não houve consenso de que esta tarefa seria relevante ao longo de o processo de agentificação.
Embora tenha sido considerada muito original e interessante;·
Implementar a funcionalidade que permitirá ao usuário mudar as cores de fundo da interface conforme sua preferência.
Pretende-se também implementar todos os exemplos simples e os exemplos interativos correspondentes a todas as categorias de erro modeladas para o sistema, proporcionar ao usuário animações do mascote escolhido tanto em caso de erro como de acerto, proporcionar acompanhamento sonoro em algumas atividades realizadas por o sistema investigando- se quais as atividades mais adequadas para tal incremento.
Apesar de os esforços realizados, muitas questões permanecem em aberto.
Estas questões nos desafiarão por muito tempo no que concerne ao projeto de ambientes educacionais.
Como por exemplo, os componentes afetivos que devem ser considerados no processo de ensino-aprendizagem, a origem da motivação e, muitas outras possibilidades que não se esgotam numa pequena lista.
Porém, se acredita que elas também poderão ser contempladas com uso da tecnologia de agentes.
O custo estimado de tempo para modelagem do ambiente e construção do protótipo do Mm foi de aproximadamente 18 meses.
Logo, isto explica a pouca oferta de ambientes com estas características.
Estima- se que após a fase de testes do protótipo, o sistema em versão completa, consumirá mais 12 meses para sua efetiva utilização.
Também em trabalhos futuros investigará- se- a questão da atualização do plano do tutor numa mesma sessão de trabalho do aluno.
Isto é, como modificar o plano gerado para o aluno, atualizando e adaptando o plano à medida que o aluno realiza as etapas iniciais do plano.
Ou seja, tornar o sistema capaz de modificar um plano de ação composto de três exercícios baseado no resultado da interação do aluno com o primeiro exercício.
Além de isto, prevê- se a inclusão de outros agentes para auxiliar na utilização do ambiente e na automação das atividades de manutenção das bases de informação.
Estas tarefas são de porte considerável e devem gerar novos projetos de pesquisa.
Finaliza- se este volume reforçando a idéia da necessidade de planejar e documentar o projeto a fim de permitir o trabalho cooperativo e sincronizado da equipe multidisciplinar.
O esforço de agentificar o sistema educacional permitiu ao grupo dimensionar aspectos envolvendo pré-requisitos e restrições a serem consideradas para quem deseja reproduzir estes resultados.
Sumarizando tem- se como premissas:
Necessidade de se compor uma equipe interdisciplinar, tendo o especialista tempo disponível para reuniões e organização do material, bem como, interesse e domínio do conteúdo para guiar a equipe nos problemas que surgem em função de a tecnologia.
A especialista deve, também, conhecer e ser usuária do software educacional.
Sem este conhecimento fica difícil a interação e o esclarecimento das atividades e tarefas que lhe são inerentes no projeto;
Os programadores devem dominar as escolhas tecnológicas e estarem habituados a documentar projetos e programas de forma cooperativa, organizando e padronizando o código fonte;
O ambiente a ser agentificado deve ter sido avaliado e testado em situação de sala de aula e, possuir resultados positivos e promissores que justifiquem o futuro investimento;
A base de domínio deve ser organizada na forma de exercícios categorizados por grau de complexidade.
E, a eles associadas às regras de comportamento do tutor/ assistente.
Estas regras e exercícios são definidos por a especialista.
Observou- se como implicações:
Aumento do grau de complexidade do projeto no que tange a modelagem e implementação e, por conseqüência, A necessidade de aumentar a quantidade de membros da equipe, pois o volume de trabalho e o tempo gasto no projeto são consideravelmente maiores.
Isto tudo implica em custos aumentados (tempo e dinheiro).
A expectativa é de dez vezes mais o tempo de modelagem e de implementação (horas trabalhadas) do que o tempo utilizado para o desenvolvimento do Matematiquinha;
Aumento do potencial pedagógico do sistema uma vez que o professor passa a ter um ambiente que registra as escolhas e interações do aluno ao longo de as sessões.
Este registro permite ao professor ampliar a avaliação de cada aluno, permitindo refazer suas estratégias e táticas na sala de aula.
Ele pode ter uma idéia do desempenho e dificuldades dos alunos.
Permite um feedback do estado cognitivo dos alunos no que tange aos exercícios propostos, associados desta forma, com o seu domínio do conteúdo trabalhado em sala de aula.
Este projeto permitiu ao autor e aos demais participantes solidificar conceitos e aprendizagens no que concerne à importância e complexidade inerentes a um projeto deste porte e natureza.
Uma visão equivocada de quem observa um software educacional é se atender a aplicação em si, no conteúdo.
O que se buscou enfatizar é que o projeto de um software educacional utiliza princípios, métodos e conhecimentos oriundos da Ciência da Computação como qualquer outra aplicação (software).
Desta forma, este trabalho foi realizado dentro de o contexto de um programa de pósgraduação em Ciência da Computação, pois as habilidades e expertises para sua concepção foram altamente dependentes do perfil de um profissional desta área.
