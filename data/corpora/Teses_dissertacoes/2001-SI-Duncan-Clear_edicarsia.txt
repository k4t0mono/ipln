Este trabalho visa apresentar uma técnica capaz de permitir o acompanhamento de processos num sistema de informação implementado em Web via formulários Html e CGI, com o uso de transações padronizadas, considerando os conceitos, terminologias e funcionalidades de um sistema de Workflow.
Essa técnica preocupa- se em interferir o mínimo possível sobre os sistemas de informação existentes.
O acompanhamento dos processos de um sistema significa facilitar, ao gestor de processos, o acompanhamento do andamento do trabalho, informando o responsável por cada atividade em execução, quanto tempo a mesma está em andamento e quais podem ser as atividades seguintes, entre outras opções.
A vantagem ao uso dessa técnica é o fato de não ser necessário reconstruir o sistema existente, para permitir esse acompanhamento, levando em consideração que a mesma o torne com características semelhantes ao de um sistema de Workflow.
Title: The Monitoring of the Transactions of Www Information Systems conforming the Workflow Technology.
Em poucos anos a Web tem se tornado uma fonte rica e heterogênea de informação, fazendo deste meio um dos mais usados para a difusão e distribuição de dados.
Com a criação de técnicas e ferramentas que facilitam o acesso a bancos de dados através de páginas Html, assim como a implementação e distribuição de aplicações na Web, esta se apresenta como uma alternativa bem interessante para o desenvolvimento de sistemas de informação.
As implementações típicas de sistemas de informação, para aplicações convencionais, são constituídas de telas em ambientes gráficos, onde cada tela corresponde normalmente a uma transação no banco de dados do sistema de informação.
Esse tipo de solução está presente em implementações cliente-servidor, via páginas As interdependências entre as telas são, eventualmente, modeladas conceitualmente, como em Diagramas de Atividades da UML, mas não são explicitamente implementadas nos programas resultantes.
Por outro lado, é possível constatar, em vários tipos de aplicações, que essas interdependências existem e que pode ser interessante visualizar as mesmas como representações de processos administrativos dentro de a organização.
Acompanhar tais processos pode permitir, aos gestores, medir o desempenho de seus subordinados e informar em quais estados intermediários os mesmos se encontram.
Em ciência da computação, a tecnologia de Workflow se preocupa justamente em desenvolver modelos e ferramentas próprias a esse acompanhamento.
Pensando nisso, levantamos duas possibilidades de incluirmos o conceito e funcionalidades de Workflow nestes sistemas, permitindo o acompanhamento do processo na Web.
A primeira opção levantada, é a de iniciar a criação de um novo processo, fazendo com que esse siga as características e terminologias de um sistema de Workflow, tendo, para isso, que iniciar um novo sistema, abandonando o que está funcionando.
E, a segunda opção, capaz de transformar o sistema de informação existente num sistema com características de um sistema de Workflow, sem a necessidade de criar um novo sistema, seria com base no sistema existente, modelar- lo segundo a WFMC.
Em esta segunda opção é necessário identificar os processos de negócios mais relevantes, assim como as suas atividades (que podem ser representadas por as telas do sistema) e as suas xi transições, considerando que a intervenção ao sistema de informação existente é a menor possível, o que parece ser a solução de mais fácil realização por a possibilidade de mantermos a implementação existente.
Com o tempo, caso seja interessante, pode- se fazer então a migração da aplicação para um ambiente específico de implementação de Workflows.
Em esse trabalho adotamos a segunda opção citada, que representa uma técnica capaz de acompanhar um sistema de informação implementado em Web, via formulários Html e CGI, com transações padronizadas e considerando os conceitos, terminologias e funcionalidades de um sistema de Workflow.
Em este contexto, focamos nosso estudo em sistemas de informação desenvolvidos através de formulários Html, a fim de verificar a possibilidade de identificar- lo como um sistema que contém processos de Workflow, com o objetivo de acompanhar as atividades desse processo no sistema desenvolvido na Web.
O acompanhamento do sistema significa facilitar, ao gestor do processo, o andamento do trabalho, informando o responsável por a atividade em execução, quanto tempo a mesma está em andamento e quais as atividades seguintes, entre outras opções.
Para realizar esta integração, é importante a descrição dos conceitos, das terminologias, das funcionalidades e a representação e identificação das diferentes distribuições de atividades, possibilitando as características de Workflow, capazes de apontar as atividades em andamento e as condições para uma próxima etapa, ou seja, quando uma determinada tarefa precisa ser executada para uma outra entrar no processo, entre outras condições.
Além disso, é importante a discussão sobre a plataforma cliente/ servidor que é a responsável por o processamento entre a máquina cliente e a servidor, que funciona como um sistema de requisição e resposta.
Essa plataforma funciona a partir de o protocolo de comunicação, chamado Http, que mantém a comunicação entre o cliente e servidor através da transferência de dados entre eles.
Este trabalho está organizado da seguinte forma:
Em o capítulo 2 são apresentadas as terminologias de um sistema de Workflow, assim como o seu conceito e funcionalidades, além de a definição das distribuições de tarefas.
Em o capítulo 3 é apresentado o ambiente cliente/ servidor, definição do protocolo Http, assim como os conceitos e exemplificação xii de formulário Html e transações CGI.
E, finalizando, é apresentado um estudo de caso real que representa tudo o que foi discutido no capítulo.
A discussão da opção adotada para solucionar a questão do acompanhamento de um sistema de informação na Web é apresentado no capítulo 4 e, em seguida, no capítulo 5 o protótipo desenvolvido no trabalho de mestrado, a fim de demonstrar a validade do método proposto.
Por fim, concluímos o trabalho e apresentamos planos para pesquisas futuras.
A disseminação de ferramentas para a automatização de processos de negócios nas diversas áreas motivou a formação da WFMC (Workflow Management Coalition) que é um grupo formado com o intuito de propor padrões que permitam a interoperabilidade de Sistemas de Workflow O objetivo da WFMC é resguardar os investimentos feitos por as empresas na automação de seus processos administrativos, feitos através de ferramentas de Workflow.
Um Workflow pode ser visto como o acompanhamento e controle de um processo administrativo completo, num sistema de informação, que atende a uma determinada solicitação ou procedimento da organização.
Um sistema de gerenciamento de Workflow é, por a:
&quot;um Sistema que define, cria e gerência a execução GH Workflows, através do uso de softwares capazes de interpretar a definição dos processos, interagir com os participantes do Workflow e, quando necessário, invocar o uso de ferramentas e aplicações», sendo que Workflow é definido como &quot;a automatização de um processo de negócio, por completo ou em partes, onde documentos, informações ou atividades são passados de um participante para outro, de acordo com um conjunto de regras».
É um conjunto de uma ou mais atividades ou procedimentos, interligados para a realização de um objetivo.
Ou seja, ele pode ser considerado qualquer rotina de trabalho, como, por exemplo, um pedido de empréstimo ou uma solicitação de material dentro de uma empresa.
Além de as definições acima, para um sistema de Workflow, várias outras fazem parte da terminologia adotada por a WFMC, como:
Um componente de programa que gerência a interação entre o participante (ou grupo de participantes) e a lista de trabalho mantida por o sistema de gerenciamento de Workflow.
Habilita os itens de trabalho e gera notificações de término ou outras condições do trabalho entre os participantes e o sistema de gerenciamento de Workflow.
A Figura 1 apresenta o esquema dos conceitos propostos por a WFMC:
Os sistemas de Workflow possuem um conjunto relativamente comum de funcionalidades.
As principais são, apresentadas nas próximas subseções:
Um dos conceitos fundamentais em sistemas de gerência de Workflow é a possibilidade de predefinir a seqüência em que as atividades serão executadas.
Tipicamente, o participante do Workflow recebe um item de trabalho e, quando termina o processamento deste, a atividade seguinte pode ser iniciada.
Se as atividades trabalharem com um mesmo conjunto de documentos ou formulários, por exemplo, estes podem ser igualmente transferidos automática e eletronicamente para a próxima atividade.
A transição de uma atividade para outra pode conter uma decisão.
Isto significa que um determinado teste ou regra será aplicado para determinar qual (ou quais) das atividades subseqüentes na definição do processo será executada.
Pode- se identificar duas classes de roteamento de trabalho.
A primeira, denominada &quot;roteamento baseado em resposta», roteia o trabalho baseado na seleção, por o usuário, de uma determinada ação A segunda classe é o &quot;roteamento baseado em regras».
Em este caso, a decisão de roteamento depende de uma condição avaliável a partir de os objetos manipulados documentos e formulários -- após o processamento da atividade corrente.
As regras utilizadas podem ser estendidas para níveis de complexidade maiores, e podem envolver diversas variáveis do Workflow, como os campos de um formulário manipulado por a atividade, além de atributos como o tempo.
Além disso, diversos produtos permitem que as regras possam considerar condições sobre dados de um banco de dados externo.
Tipicamente, o participante do Workflow utiliza algum aplicativo para realizar as atividades de as quais está incumbido.
Uma vez que o participante do Workflow tenha recebido, através do gerenciador da lista de trabalho, a atividade que deverá realizar, o aplicativo adequado que pode ser invocado automaticamente, através do sistema de gerência de Workflow.
A maioria dos sistemas atuais permite especificar o aplicativo utilizado para cada atividade do Workflow.
A definição do processo, como já explicado anteriormente, em geral não define um participante específico para a execução das atividades, mas sim um papel, que pode ser assumido por diversos usuários dentro de a organização.
Logo, faz- se necessário que, no momento da instanciação da atividade, seja determinado o participante que irá executar- la.
Essa escolha pode ser feita, automaticamente, por o próprio WFMS (Workflow Management System), ou então, manualmente, por um usuário com os privilégios necessários.
No caso de a decisão ficar a cargo de o WFMS, pode ser utilizado algum algoritmo para a escolha.
A capacidade de priorizar trabalho é uma função chave dos WFMS.
Já na primeira geração de sistemas de Workflow, percebeu- se que uma política de execução de trabalho baseado no modelo FIFO (ILUVWLQILUVWRXW), isto é, o trabalho é entregue aos participantes na ordem exata de sua introdução no WFMS, pode não ser sempre o melhor mecanismo de prioridade, uma vez que determinadas instâncias de Workflow devem possuir uma prioridade superior às demais.
A maioria dos sistemas de Workflow permite que a prioridade de uma instância seja alterada, em geral por um usuário` administrador'.
Outros sistemas mais avançados permitem que a prioridade seja determinada automaticamente, através de uma função, usando, como parâmetros, dados da instância e variáveis do ambiente, como o tempo.
A capacidade de acompanhar uma determinada instância de Workflow e descobrir imediatamente seu VWDWXV atual de processamento, sob a responsabilidade de quem está no momento, e quanto tempo ela está esperando na atividade atual, é uma outra característica fundamental, que deve estar presente em todos sistemas de Workflow.
Podese ainda, especificar, na definição do processo, uma data para o término de uma determinada atividade -- a data pode ser tanto absoluta quanto relativa ao início da execução da instância ou de alguma atividade específica -- e o WFMS gerará uma mensagem de aviso caso o prazo estipulado esteja próximo de vencer ou já esteja vencido.
Isto ajuda a prevenir que determinados itens de trabalho fiquem parados em filas indefinidamente.
A utilização de sistemas de Workflow para o gerenciamento do trabalho na organização pode, a médio e longo prazo, reverter em benefícios estratégicos para ela.
Através do armazenamento de certos atributos de cada instância de Workflow executada, pode- se criar uma base de dados que reflete a eficiência e a eficácia dos processos atualmente desempenhados por a organização.
Com esses dados pode- se analisar profundamente o desempenho do processo atual, identificando gargalos e inconsistências, e, posteriormente, fazer melhorias e correções sobre ele.
Algumas classificações para sistemas de Workflow foram propostas:
Por o nível de estruturação dos processos de negócio, e por o grau de envolvimento dos participantes.
Muitos autores, como, classificam sistemas de Workflow em três categorias diferentes:
Workflow Administrativo, Workflow ad-hoc e Workflow de Produção Envolve processos repetitivos, previsíveis, com regras simples de coordenação de tarefas, como um relatório de despesas ou a requisição de viagem, controlada por um processo de autorização.
Envolve a coordenação, colaboração e co-decisão humana, e freqüentemente aparece em processos de escritório tais como documentações ou pedidos de vendas onde não há um padrão pré-determinado de movimentação de informação entre pessoas.
Caracteriza- se por a habilidade de gerenciar processos complexos que possuem uma estrutura fixa e um conjunto de regras de roteamento entre as atividades.
Envolve processos de negócios previsíveis e repetitivos, tais como a aplicações de empréstimos e reivindicações de seguro.
Sistemas de Workflow de produção automatizam processos de negócios complexos que variam pouco de caso para caso, similar a uma linha de montagem.
Eles suportam volumes de transações elevados, documentos compartilhados, repositórios e documentos sofisticados, bem como o acompanhamento de atividades.
Muitas das aplicações de Workflow de produção descendem de produtos baseados no gerenciamento de textos e recuperação de produtos.
Workflow pode ainda ser caracterizado dentro de dois aspectos:
Orientado a Pessoas e Orientado a Sistemas, onde:
Workflow Orientado a Pessoas envolve pessoas na execução e coordenação de tarefas;
Workflow Orientado a Sistemas:
Envolve sistemas que executam operações computacionais intensivas e softwares especializados em realizar tarefas.
Com os conceitos acima, podemos identificar um sistema de Workflow analisando algumas questões, como:
Para um Workflow Orientado a Pessoas, os itens a serem analisados são:
Interação homem-máquina;
Combinação das habilidades humanas com requisitos das tarefas;
Necessidade de modificação à cultura dos escritórios (como as pessoas preferem ou necessitam trabalhar).
E para Workflow Orientado a Sistemas:
Combinação das necessidades dos processos de negócios com funcionalidades e dados providos por os sistemas de informação existentes;
Interoperabilidade entre sistemas de Workflow ad-hoc;
Procura por softwares adequados para executar tarefas de Workflow;
Possibilidade de determinar novos softwares necessários para a automação dos processos de negócios;
Possibilidade de assegurar a execução correta e segura dos sistemas.
Os benefícios que um sistema de Workflow inclui, são:
Aumento na eficiência do processo:
Processos são feitos mais eficientemente, podendo ser alcançada reduções de tempo para conclusão e, algumas vezes, redução de custos pois, pode consequentemente necessitar de um menor número de pessoas para a sua realização;
Padronização do processo:
A automação do processo tende a aumentar a qualidade do serviço, estabelecendo- se um padrão típico para o atendimento de cada cliente e com redução do tempo de execução:
Pode- se fornecer do processo, por exemplo, uma resposta para o cliente sobre a posição atual de uma solicitação de um empréstimo.
Aumento da disponibilidade de informação:
Permite direcionar uma entrega eletrônica de uma informação do processo ao desktop de um usuário antes de arquivar ou enviar para uma outra pessoa.
Atribuição automática de tarefas:
Tarefas são atribuídas para serem distribuídas automaticamente entre os usuários de um sistema de Workflow.
Processo de monitoramento automatizado:
Possível através dos recursos de monitoração presentes nas ferramentas e tabelas e quadros métricos que mostram o desempenho da equipe que está utilizando o processo automatizado.
Consideramos um Sistema como sendo de Workflow quando o mesmo respeita os padrões definidos por a WFMC e descritos a seguir:
Possuir as características de um sistema do tipo Workflow administrativo, Workflow ad-hoc e/ ou Workflow de produção;
Envolver pessoas e/ ou sistemas que executam operações computacionais intensivas, caracterizando- o por ser do tipo Orientado a Pessoas e/ ou a Sistemas;
Tratar os conceitos do sistema conforme a terminologia definida por a WFMC;
Possibilitar o roteamento de mensagens predefinindo a seqüência em que as atividades serão executadas;
Invocar os aplicativos automaticamente conforme as tarefas a serem realizadas no decorrer de o processo;
Permitir a distribuição dinâmica de trabalho entre os usuários do processo;
Priorizar o trabalho permitindo a entrega do mesmo aos usuários, na ordem exata no decorrer de o processo;
Permitir o acompanhamento do trabalho, verificando com quem e a quanto tempo está a responsabilidade do processo, podendo estabelecer prazo máximo de espera para cada usuário;
Permitir a geração de dados estratégicos onde o usuário pode analisar o desempenho do processo de Workflow' LVWULEXLomR GH WLYLGDGHV A distribuição de atividades entre os participantes de um sistema de Workflow pode basear- se nos seguintes conceitos:
Distribuição condicional:
Verifica- se uma condição para realização da atividade seguinte.
Como exemplo podemos seguir a Figura 4 onde a atividade 1 segue para uma única atividade, ou a atividade 2 ou a atividade 3, ou seja, uma das duas atividades não vai ser executada neste processo.
Ponto em que, para que a atividade seguinte seja ativada, basta que uma das atividades anteriores tenha terminado.
Esse exemplo, ao contrario do, conforme a Figura 4, executa a atividade 4 no momento em que qualquer uma das anteriores (atividade 2 ou atividade3) tenha sido concluída.
Em o intuito de representar as distribuições de tarefas e as atividades referentes ao processo, a WFMC em criou um formalismo diagramático que serve como base para desenhar o Sistema de Workflow capaz de acompanhar a rotina e identificar as pré e pós-condições existentes para a realização de uma determinada tarefa.
A notação consiste de quatro tipos de elementos:
Retângulos para atividades, linhas para transações que conectam as atividades, triângulos para inicio e fim do processo e, um ponto preto na linha conectora para condições de transição.
Existem dois conjuntos equivalentes de símbolos nesta metodologia, um de eles para a notação horizontal (da direita para a esquerda) e outro para a notação vertical (de cima para baixo) conforme encontrado em.
Em este trabalho, apresentaremos a notação horizontal.
O símbolo que caracteriza a atividade, conforme a Figura 7, é dividido em duas partes:
Em o espaço maior, à esquerda, é definido o nome da atividade, e no menor, a direita, é caracterizado por uma letra que indica se é uma atividade ou um route.
Route: É um tipo especial de atividade que permite a expressão de condições de transição em cascata.
Alguns fornecedores podem implementar estas condições diretamente com uma duplicação de atividade para um route.
Entretanto, possíveis fornecedores e desenvolvedores de processos estruturam cada condição de cascata como um Xor Split para uma atividade de saída.
Certas combinações de transições não podem ser expressas com uma simples lista de transições de saída para uma atividade ou uma simples lista de entrada para uma atividade.
Estes casos requerem o uso de um ou mais tipos de atividade, como por exemplo:
Combinação de condições Xor e And Split nas transições de saída de uma atividade, conforme exemplo apresentado na Figura 11;
Combinação de condições Xor e And Join nas transições de entrada de uma atividade;
E, Transições envolvendo a condicional And Join de um subconjunto de ramificações, com a continuação de ramificações individuais.
Em o exemplo apresentado na Figura 11 abaixo mostramos uma combinação de Xor e And Split, onde duas atividades estão ocorrendo em paralelo e, assim que concluída, parte para uma terceira, está, no entanto, depende da condição aceita.
Se condizer com a primeira condição, então a atividade a ser executada será atividade 3.
Caso contrário, se a condição aceita for a segunda, a atividade a ser realizada será a 4 e, será atividade 5 quando a condição satisfatória for a terceira.
Um modelo utilizando a metodologia proposta pode ser visualizado no capítulo 3 onde a modelagem é aplicada no estudo de um caso real.
O serviço de ordenar o Workflow deixa diferentes processos em movimento.
Dependendo da solução do Workflow escolhido, a ordem do serviço pode ser implementada como stand- alone (isolado) ou run-time (processando) o processo de Workflow.
Para a WFMC, as principais funções do serviço de ordenação do Workflow, são:
Iniciar, executar e agendar o controle de Workflow de acordo com a definição do processo atual;
Controlar o usuário como estando em movimento ou fora de o sistema;
Autenticar usuários;
Adicionar, alterar e deletar itens de trabalho do usuário;
Invocar aplicações externas;
Recuperar aplicações de arquivos;
Facilitar o controle, a administração e a audit do Workflow;
Definir processos ativos, Workflows relevantes, controle do Workflow e, aplicações de dados de Workflow.
Para o serviço de ordenação é o principal controle de tráfico de aplicações de Workflow.
Ele define um estado de processo como sendo:
Iniciado -- A instância do processo em execução foi criada, baseada numa definição do processo pré-definida, mas o processo não efetuou as condições necessárias para iniciar a sua execução.
Executado -- A instância do processo iniciou a sua execução mas ainda não realizou as condições necessárias para entrar na primeira atividade e criar um item de trabalho.
Ativo -- A instância do processo está em execução, uma ou mais atividades do processo foram iniciadas, e um item de trabalho foi criado.
Suspenso -- A instância do processo está em execução e as atividades foram iniciadas, mas atualmente estão inativas e pendentes a espera de um comando.
Terminado -- A instância do processo foi parada e deletada antes de estar completa Completado -- A instância do processo efetuou todas as condições por completo.
Um exemplo dessas transições de estados pode ser visualizado na Figura 14, a seguir:
As atividades de um processo podem ser do tipo não interrompíveis, ou seja, um mecanismo de Workflow inicia uma atividade em particular com uma instância de processo e pode não ser possível suspender ou terminar está atividade.
Isto significa que as funções de suspender /restaurar/terminar podem não ser completas até que todas as atividades em execução tenham sido completadas e a instância do processo retornada para o estado de execução.
Uma ilustração dos estados e transições básicas para uma instância de atividade, conforme apresentado em, pode ser vista na Figura 15: Os estados básicos de uma instância de atividade, são:
Inativo -- A atividade de uma instância do processo foi criada mas ainda não foi ativada (porque as condições exigidas para a execução da atividade ainda não foram encontradas) e não tem um item de trabalho para processamento Ativo -- Um item de trabalho foi criado e designado a processar uma instância de atividade Suspenso -- A instância de atividade é suspensa e um item de trabalho não é alocado até que estado inativo seja retomado Completo -- a execução da instância de atividades foi completada.
Assim, concluímos este capítulo ressaltando a importância da discussão adotada, que serviu para relatar as principais definições existentes num Sistema de Workflow e seus fundamentos, além de compreender melhor as funcionalidades oferecidas num processo típico de Workflow.
Este processo envolve a distribuição de tarefas, também relatada neste capítulo, obedecendo as condições adotadas para a execução das atividades.
A conceitualização da distribuição das tarefas apresentada neste capítulo é de suma importância para a criação da técnica desenvolvida, pois com ela percebemos a necessidade de ter definida a próxima atividade e a condicional para uma atividade ser realizada.
Além disso, as definições de termos utilizados por o Workflow, auxiliaram bastante, como por exemplo, na definição do termo Evento, que existe pelo menos uma vez em cada atividade e pode nos indicar quando uma atividade foi concluída ou está em execução, levando em consideração os estados existentes num sistema de Workflow, também apresentado neste capítulo.
Por fim, a discussão das funcionalidades do Workflow levantou a importância do roteamento e, principalmente, do acompanhamento de tarefas num sistema desse tipo, pois é através de ele que verificamos o estado de um processo e de suas atividades.
Com isso, é possível interpretar características de um sistema de Workflow e comparar- las a um Sistema de Informação existente, permitindo melhorar- lo através das vantagens e facilidades da tecnologia de Workflow citadas neste capítulo.
Cliente/ Servidor é um termo que normalmente é utilizado para caracterizar um sistema de computação que utiliza três componentes básicos para o compartilhamento de recursos:
Um computador -- cliente, um computador -- servidor e uma rede para conectar- los.
Os Clientes são todos aqueles computadores que executam programas utilizando recursos de um ou mais servidores.
Uma das grandes vantagens da abordagem cliente/ servidor é a do computador Cliente poder se dedicar ao uso de sua capacidade multimídia nos mecanismos de apresentação, como cores, gráficos, imagens e vídeos.
Conceitua- se servidor todo aquele computador que tem a capacidade de compartilhar seus recursos (discos, processador, impressoras e outros periféricos) com outros computadores.
O processo servidor geralmente é executado o tempo todo, oferecendo serviços a muitos clientes e, geralmente inclui:
Acessar, armazenar e organizar os dados compartilhados, atualizar dados previamente armazenados e gerenciar recursos compartilhados.
Os clientes solicitam um determinado serviço através do envio de uma mensagem ao servidor.
Por sua vez, os servidores oferecem serviços a processos usuários, ou seja, executam a tarefa solicitada e enviam uma resposta ao cliente que normalmente se traduz nos dados solicitados.
Enquanto o processo servidor está trabalhando a solicitação, o cliente está livre para realizar outras tarefas.
Gerenciando esta interação, o cliente esconde do usuário o servidor e a rede, caso houver, o que passa a impressão de que a aplicação está sendo executada localmente.
Em o ambiente cliente/ servidor típico, todo o processamento da aplicação é realizado por o servidor enquanto do lado cliente fica os processamentos das aplicações visuais para acesso ao servidor.
É comum encontrarmos ambientes em que o banco de dados se localiza no servidor, podendo ser um Windows SQL server, Oracle, DB2 da IBM, etc..
De o lado do cliente encontramos aplicações desenvolvidas em Visual Basic, PowerBilder, Delphi, entre outras.
Estes programas deixam para o servidor todo o gerenciamento de dados, como controle de concorrência, manutenção de índices, etc..
Normalmente, a aplicação cliente/ servidor apresenta uma relação de um para muitos, ou seja, um servidor e muitos clientes.
O Http (Hypertext Transfer Protocol) é o protocolo de comunicação entre cliente e servidor na Www.
Toda informação transmitida entre cliente e servidor possui comandos (métodos) que indicam as ações a serem tomadas por o servidor ou por o cliente.
Este protocolo é a camada de aplicação que possui os recursos e desempenhos necessários para distribuir colaborativamente sistemas de informação hipermídia.
A sua principal característica é ser um protocolo aberto e especializado na transmissão de documentos Web sob a Internet.
De uma forma geral, o Http realiza uma comunicação em quatro etapas:
Estabelecimento da comunicação, requisição do cliente, resposta do servidor e encerramento da comunicação, conforme pode ser visualizado na Figura 17.
A situação mais comum de utilização do Www é o cliente solicitar &quot;páginas de informação «a um servidor e, a partir de links existentes nessas páginas, recuperar outras páginas.
Estas páginas de informação são codificadas em Html (Hypertext Markup Language).
Elas residem no servidor e são transferidas para o cliente a seu pedido, através do Http.
Uma vez no cliente, os comandos desta linguagem são interpretados e seu resultado apresentado ao usuário.
Em este cenário, ao solicitar uma página a um servidor, o cliente envia um método GET indicando a página a ser recuperada.
O servidor responde indicando o tipo da informação (por exemplo, um arquivo Html) e a página em si.
Em outras situações, outros métodos são usados.
Por exemplo, ao enviar um formulário do cliente para o servidor, o método normalmente utilizado é o POST.
O Netscape Navigator e o Internet Explorer, entre outros EURZVHUV, permitem a manipulação de FRRNLHV, que são informações armazenadas por o servidor, no cliente.
É possível armazenar qualquer informação no cliente, como a última página visitada e a data desta visita.
O método mais antigo e simples para prover informações dinâmicas na Www é o uso do mecanismo de programas CGI, que nada mais é do que um padrão que permite a chamada a programas externos de dentro de um aplicativo Html.
Se a linguagem Html não permite que se faça algo, então é possível escrever um programa CGI para isso Esta tecnologia permite a construção sob demanda de páginas Html com conteúdo variável.
Uma página Html é a visualização gráfica do código Html num browser Web e pode ser estática ou dinâmica.
Segundo, as páginas estáticas são aquelas que apresentam informações com o formato Html padrão, ou seja, páginas que não modificam o resultado de sua apresentação no cliente, a menos que seja alterado o seu código, enquanto as páginas dinâmicas são aquelas que interagem com o usuário.
De essa maneira, dependendo dos dados de entrada de um formulário submetido de uma máquina cliente ao servidor, o resultado retornado ao cliente pode ser diferente.
Isto é conseguido com a utilização de tags especiais, que são uma extensão da linguagem Html e por a utilização de programas externos.
O CGI é um método por o qual o servidor interage com scripts ou programas externos.
Com o método CGI é possível acessar banco de dados, armazenar informações e executar programas externos.
Sem o CGI só seria possível a disponibilização de páginas para a leitura.
Os detalhes de implementação dos programas CGI são dependentes do sistema operacional em que reside o servidor Web.
Para servidores UNIX, por exemplo, os programas CGI são executados como processos separados, os dados são enviados por o servidor Web para a entrada padrão e, os resultados são retornados ao servidor Web através da saída padrão.
Para servidores Windows, o programa externo é executado como É possível a criação de programa CGI com o auxílio de linguagens de programação C/ C+, Perl, Visual Basic, Java, JavaScript, Php, Asp, de entre outras.
Os programas CGI´ s podem utilizar informações fornecidas por o servidor Web, como o Apache, por exemplo, conhecidas como variáveis de ambiente que armazenam informações quando um programa externo é chamado ou executado.
Algumas das variáveis de ambientes padrão são citadas as seguir, na Tabela 1, conforme:
A transação entre o servidor e o programa CGI transporta dados.
Estes dados podem ser adquiridos através dessas variáveis de ambientes ou, na maioria dos casos, dos campos preenchidos com informações nos formulários de páginas Web.
Retorna o nome e a versão do servidor que está respondendo a requisição e executando o programa CGI.
Ex.. Apache 1.0 Server_ Name.
retorna o nome do host ou IP da máquina que hospeda o servidor.
Server_ Protocol retorna o nome e a versão do protocolo utilizado para transportar a requisição atual.
A maioria do tags são usados em pares para inicializar e terminar o recurso de formatação num bloco de texto.
O tag final se diferência do inicial por uma barra(/) na frente de o identificador.
Um exemplo das tags descritas até o momento é apresentado a seguir:
Com o exemplo descrito na folha anterior, obteremos uma página na Web, conforme Figura 18, da seguinte maneira:
Os formulários Html são o único método por o qual o usuário interage com o servidor utilizando scripts CGI.
Os atributos Html que definem os formulários são descritos a seguir:
Action: Indica ao servidor qual script CGI deve processar o formulário.
O valor atributo fica entre aspas.
EX: Method:
Especifica o método usado na comunicação com o servidor e com o script.
Os métodos usados são o POST e o GET.
O método default, ou seja, aquele utilizado quando nenhum método é atribuído é o método GET.· --
É usado para especificar um elemento de entrada de dados simples dentro de o FORM.
Dentro de o Input temos o atributo que tem uma variedade de valores, o que representa flexibilidade ao Input.
Os principais atributos TYPE usados são:
Text: Insere uma caixa em formato de uma linha que permite que os usuários digitem algo.
O valor retornado é o texto inserido.
Ex: Digite o seu nome:
O campo criado é exibido na Figura 19: Pode ser escolhida mais de uma alternativa.
Ex: Radio:
Semelhante ao checkbox, no entanto, o input radio permite que o usuário selecione somente um item da lista de várias opções.
Ex: Em esse exemplo, o usuário pode selecionar feminino ou masculino, estando o botão feminino selecionado por GHIDXOW, conforme Figura 21.
Submit: Quando o botão submit for pressionado, indica que as informações digitadas e/ ou selecionadas por o usuário podem ser enviadas ao servidor.
Que por sua vez encaminha ao script CGI.
Esse botão pode ser visualizado na Figura 22 juntamente com o botão Reset Ex:
Reset: A o pressionar este botão todo o conteúdo informado por o usuários é apagado.
Esse input permite que o usuário redefina totalmente o formulário.
Ex: Select:
Apresenta uma lista de valores possíveis para o campo, na forma de itens.
Option: Apresenta as opções em forma de itens definidos, normalmente exibidos como um menu suspenso.
Multiplie: Semelhante ao Option mas, no entanto, permite que o usuário selecione mais de um item do menu.
Com a construção dos formulários que seguem as características acima descritas é possível capturar as informações introduzidas por os usuários nos campos dos formulários e enviar- las ao programa CGI.
Esse envio é realizado em pares nome/ valor.
Como podemos ver até então, cada campo do formulário recebe um nome de identificação, e os valores informados por o usuário são associados a este nome.
Quando o formulário é submetido ao programa CGI, os nomes e valores são passados como pares, nome $= valor, e com um E comercial(&amp;) entre eles.
Usando como exemplo os campos no formulário apresentado na Figura 23, a passagem de valores no formato de um CGI ficaria da seguinte maneira:
Antes que os pares de nome e valor sejam passadas para o programa CGI, eles são modificados para ser protegidos contra alterações ou ser compreendidos erroneamente ao cruzarem a rede.
Para garantir esta proteção, os espaços são substituídos por um&quot;+ «por o browser Web, para garantir que eles cheguem intactos.
Os principais caracteres especiais encontrados em programas CGI e uma breve descrição é apresentada na Tabela 3 abaixo conforme:
Usado para separar o nome do campo do valor do campo? (
sinal de interrogação) Usado para marcar o início dos dados de formulário nas linhas de comando ( sublinhado) (sinal Usado para substituir caracter hífen de Usado para codificar caracter ASCII reservados, porcentagem) seguidos por dois dígitos hexadecimais&amp; (e comercial) Usado como limite entre pares nome/ valor para cada campo no formulário Html&amp; (sinal de número) Usado em para indicar uma seção dentro de um documento Html, equivalente a um bookmark.
Isso não está restritamente relacionado com CGI.
Com base na discussão existente no capítulo sobre o ambiente cliente/ servidor e os formulários Html, estudou- se um caso real apresentado a seguir.
Atualmente podemos encontrar Sistemas de informação implementados para a Web, através de formulários Html e com programas CGI.
Para algumas dessas transações (telas) é interessante acompanhar as instâncias de execução.
Com base no modelo apresentado na Figura 23, criamos um novo modelo que descreve a rotina do sistema de Workflow, utilizando o formalismo diagramático da WFMC, descrito detalhadamente no capítulo 2.
Através do endereço eletrônico indicado por o departamento, o professor responsável por a avaliação do processo recebe uma mensagem eletrônica informando- o do seu dever em avaliar a solicitação e, do endereço do formulário que deve analisar e emitir um parecer.
O professor avaliador deverá, então, acessar o endereço informado e selecionar uma das opções disponíveis (Há equivalência ou não há equivalência) e em seguida enviar o formulário, conforme Figura 27.
Com esses dados, o sistema faz a verificação seguinte:
Se a opção selecionada for &quot;Há equivalência «então o resultado do processo será a aceitação da solicitação deste aluno o que conclui que o mesmo não precisa cursar a disciplina, caso contrário, a solicitação não foi satisfatória e o aluno deverá cursar a disciplina.
O processo descrito pode ser resumido na Figura 28, onde percebemos que as páginas Html (ou seja, os formulários do sistema) são acessadas via browser do cliente que estão armazenados no Web Server, e os dados são repassados do cliente ao servidor durante a execução do sistema.
A discussão levantada neste capítulo auxiliou- nos quanto a a importância do envio e da recepção de dados entre o cliente e o servidor, através de formulários Html.
Essa transação de dados nos auxiliará para acompanharmos o sistema, pois é a partir de ela que podemos capturar dados, utilizando, por exemplo, os programas CGI.
Os programas CGI, por sua vez, também foram citados neste capítulo, onde demonstramos como os dados são convertidos ao serem repassados de uma máquina a outra, o que facilitou- nos** quanto a a percepção da possibilidade da captura de dados nesta transação.
A construção de sistemas de informação em formulários Html, utilizando campos texto ou, em algumas vezes, campos KLGGHQ também foram abordadas neste capítulo.
Por fim, analisando a descrição do Sistema de Aproveitamento de disciplina, descrito no estudo de caso real, é possível perceber a necessidade que um gestor tem de acompanhar um sistema de informação, em cada uma das atividades e, detecta o tempo gasto em cada uma de elas.
Em o estudo de caso real, apresentado no capítulo 3, vimos um sistema de informação criado a partir de formulário Html e executado na Web.
Sistemas de informação implementados para a plataforma cliente/ Servidor são capazes de atender a rotina administrativa de uma determinada empresa, no entanto, não são consideradas ferramentas de Workflow por não permitirem o controle e o acompanhamento do sistema, ou seja, não existe a possibilidade de obter informações sobre a atividade em execução, como por exemplo, o responsável por a atividade e há quanto tempo ela está sendo executada.
Em esse capítulo, é apresentada a técnica criada a fim de solucionar este problema, através da interação de sistemas de informação com as funcionalidades de um sistema de Workflow Essa técnica restringe- se a Sistemas de Informações já desenvolvidos e existentes na Web, cuja a distribuição de atividades é realizada de maneira seqüencial.
É importante também a existência de uma modelagem capaz de demonstrar planejamento do sistema.
A primeira possibilidade de interação é ignorar o sistema de informação já existente com o objetivo de iniciar a construção de um novo sistema, que além de ser capaz de cumprir a rotina administrativa da empresa, seja apto a acompanhar todas as atividades do sistema de informação.
A reconstrução deste novo sistema tem início na modelagem, onde são adotadas as terminologias, conceitos e características de um sistema de Workflow.
Uma outra possibilidade é a de monitorar o sistema de informação sem a necessidade de reconstruir- lo, aproveitando ao máximo os formulários já implementados, com a menor intervenção possível, o que torna necessário a captura dos dados que estão sendo transmitidos na plataforma cliente/ servidor.
Em este contexto, acompanhamos um sistema existente, desde a sua criação até a sua execução na Web.
No entanto, é importante salientar que consideramos, para este estudo, que o ambiente cliente/ servidor em acompanhamento, trata de um único servidor para um ou mais clientes.
Não é o escopo da nossa contribuição o estudo do acompanhamento de um sistema de informação implementado numa plataforma de dois a mais servidores a vários clientes, sendo este um trabalho proposto para pesquisas futuras.
Outra consideração importante a ser destacada é o caso de considerarmos o início do acompanhamento do sistema após o reenvio do cliente ao servidor.
Ou seja, a transição inicia no momento em que o usuário solicita uma página ou um endereço na Web, esse endereço é encontrado e o servidor acessado retorna o formulário referente a a página solicitada, o acompanhamento diz respeito a partir de o próximo passo, que é o momento em que o usuário preenche os campos do formulário recebido e retorna- o ao servidor.
Assim sendo, verificamos no arquivo de log a existência de um envio do cliente ao servidor em branco (solicitação da página), um segundo envio do servidor ao cliente (envio do formulário solicitado) e, por fim, a submissão dos dados informados no formulário ao servidor.
Então, essas transições registradas no arquivo de log, o processo de acompanhamento pode ser executado.
Com o acompanhamento do sistema desde a sua criação a fim de identificar os campos necessários para a realização da nossa contribuição, adotamos um modelo de especificação proposto por a WFMC que nos auxiliou, num primeiro momento, a identificar os dados por eles propostos para um acompanhamento completo de um sistema de informação com características de Workflow.
Esse modelo é descrito a seguir.
A WFMC propõe um modelo que descreve as informações necessárias para a captura e registro dos dados durante a ocorrência de vários eventos em sistema de Workflow O modelo proposto identifica um conjunto de entidades e atributos usados na transferência das definições do processo.
As principais entidades são as seguintes:
Definição do processo de Workflow:
Essa entidade descreve o próprio processo, ou seja, o identificador e a descrição textual, além de fornecer outras opções de informação associadas com a administração do processo (dados da criação, autor, etc.) ou para ser usado durante a execução do processo (prioridade de execução, tempo limite, pessoal a ser notificado, atributos de simulação, iniciação dos parâmetros usados, etc.) A definição da entidade do processo de Workflow fornece então essas informações e em seguida relaciona todas as outras entidades deste processo.
Atividades do processo de Workflow:
A definição da atividade de Workflow é usada para definir cada atividade elementar existente num processo de Workflow.
Atributos podem ser definidos para especificar o controle das informações das atividades, implementações alternativas, melhora da performance, informações relevantes como a prioridade no tempo de processamento.
Além disso, restrições no acesso de dados e para evoluir na transição (split e join) podem ser descritos.
Informações das transições:
Atividades são enviadas a outras através de uma condição de controle de fluxo (informações das transições).
Cada condição individual tem três propriedades elementares:
A atividade_ de (anterior), a atividade_ para (próxima) e a condição para que a transição seja realizada.
Transições de uma atividade para a outra podem ser condicionais (envolvendo expressões que são avaliadas para permitir ou inibir a transição) ou incondicionais.
As transições num processo podem resultar numa operação seqüencial ou paralela de atividades individuais.
Declaração dos participantes do Workflow A declaração do participante do Workflow não se refere necessariamente a uma simples pessoa, mas também pode ser um conjunto de pessoas com uma determinada habilidade ou responsabilidade atribuída, ou a automatização ao invés de humanos.
Declaração das aplicações de Workflow As aplicações podem ser invocadas por o mecanismo do Workflow.
Cada aplicação pode ser uma ferramenta industrial genérica, especificamente departamental ou de serviço da empresa, ou a implementação de serviços localizados como o framework dos sistemas de gerenciamento de Workflow.
A definição da aplicação do Workflow reflete a interface entre o mecanismo do Workflow e a aplicação, incluindo qualquer parâmetro a ser passado.
Tipos relevantes de Workflow A definição dos dados é a criação e o uso destes em cada instância de processos durante a sua execução.
Os dados podem estar disponíveis para atividades ou executar aplicações durante o Workflow e pode ser usado para passar informações persistentes ou resultados intermediários entre atividades.
Inline Block Representa uma parte de uma definição do Workflow que é conectada e conecta o resto da definição de um mesmo bloco.
O que possibilita o uso de subflow, em que um bloco de atividades deve ser declarado como uma definição de processo separado.
Essas entidades são transformadas em tabelas, compostas dos campos propostos por a WFMC, que armazenam os dados necessários para um acompanhamento completo.
Um exemplo das tabelas criadas na ferramenta Access e relacionadas entre si, podem ser vistas na Figura 29, logo abaixo.
Com o estudo e criação das tabelas, conforme o modelo de especificação da WFMC, encontramos a necessidade de capturar os dados informados no formulário e enviados ao servidor.
Então, criamos o modelo de execução, que tem o objetivo de gerar um arquivo que armazenará todas as informações existentes no processo de transação da máquina cliente ao servidor.
Esse modelo é descrito na próxima seção.
Com base no estudo de caso real, vimos a transmissão dos dados do browser de uma máquina cliente a uma máquina servidor.
Essa transição é executada a partir de scripts CGI, que convertem os dados informados num campo de formulário, a fim de executar a passagem de parâmetros.
Sabemos que nessa passagem encontram- se todos os dados referentes ao formulário do sistema, que pode ser identificado como a atividade, além de as variáveis de ambiente existentes no processo.
Toda a transação efetuada entre a máquina cliente e a máquina servidor, pode ser registrada num arquivo de log do próprio servidor.
Isso existe em qualquer conexão.
Esse arquivo pode ser visualizado e a partir de ele é possível encontrar os dados e campos que estão sendo repassados nesta transição.
Um arquivo de log gerado numa transição cliente/ servidor pode ser visto a seguir, onde está sendo registrada a solicitação de um formulário do sistema e, em seguida, retornados os dados preenchidos neste formulário.
São eles:
Identificação da máquina solicitante, data e hora da transição, nome do formulário solicitado e as informações atribuídas por o usuário aos campos do formulário.
Uma nota prática deve ser destacada aqui.
Para que o arquivo de log seja gerado contendo os campos dos formulários, os mesmos devem ter o método GET, e a configuração do log, deve ter o argumento responsável por a transição da TXHU\ VWULQJ.
Em o servidor Apache, esse argumento é representado por a variável% q, caso contrário, o arquivo de log disponibilizará suas informações padrões, ou seja, as informações repassadas de uma máquina a outra referente a os dados informados no formulário não estarão visíveis a partir de o log.
A primeira solicitação será a que acessa o sistema de informação, onde o arquivo de log registrará:
As aspas vazias significam que o formulário enviado não contém nenhuma informação.
Com essas informações transitando, podemos ver a seguir o script do formulário que acabou de ser solicitado conforme o arquivo de log.
Referente a este script, temos o formulário a seguir, que foi o solicitado por a máquina cliente, conforme a Figura 30 a seguir, utilizando para esses exemplos o estudo de caso real descrito no capítulo 3.
Em o momento em que o usuário preenche os campos do formulário e o submete, um novo registro no arquivo de log é efetuado e, dessa vez, ele carrega as informações do campo com eles, conforme o exemplo a seguir:
É nesse momento que a captura dos dados passa a ser importante à nossa técnica, pois é com esses dados que teremos a possibilidade de acompanhar o sistema.
Para isso, então, geramos um arquivo capaz de armazenar as informações transitadas no sistema.
A captura efetuada a partir deste processo não interfere na transição dos dados cliente/ servidor.
Ele pode ser visto como um espelho que armazena os dados num novo arquivo.
A cada transição efetuada, esse arquivo é atualizado, criando um novo registro ou armazenando informações referentes a um registro já existente, como é o caso de um processo onde a resposta total do arquivo é preenchida por diversas atividades, ou telas.
Para gerar esse arquivo, é necessário um algoritmo que identifique o processo em andamento e em seguida jogue os dados para uma base de dados.
Como a primeira transação será a responsável por a criação da tabela referente a o processo, sugerimos a inclusão do algoritmo na ação de submeter os dados, sendo que dessa maneira uma nova tabela contendo um identificador do processo seja criado, conforme o exemplo a seguir:
Datafinal, responsavel, curso, atividade) values'ano','proxima','Datafinal','responsavel','curso','atividade')&quot;);
Em o exemplo acima, podemos identificar uma conexão ODBC com uma base de dados chamada Workflow, nessa base, inserimos os campos na tabela &quot;aproveitamento», que nesse momento irá gerar um novo processo com um novo identificador.
A cada transição efetuada no sistema e a cada captura dos dados, pode- se gerar os objetos referentes ao Workflow, que auxiliarão no acompanhamento do sistema, podendo assim, com esses dados, identificar o processo em andamento e o seu status.
Sabendo que o arquivo gerado com base no log, armazena todos os dados existentes no processo, e com base no modelo de especificação já descrito, podemos perceber que alguns dados não são necessários para o acompanhamento do sistema.
De essa maneira, dando continuidade no modelo de execução, indicamos os campos essenciais ao acompanhamento de um sistema, que contenha informações suficientes para que o gestor identifique qual a atividade do processo que está em execução e há quanto tempo, ou ainda, quanto tempo uma atividade ficou em execução, além de identificar o responsável por a mesma.
Para isso seleciona- se os dados que serão aproveitados no modelo de especificação, fazendo com que o processo passa a ter a característica conforme apresentado na Figura 32: Consideramos os dados capturados do processo e comparamos com os dados necessários para o acompanhamento de acordo com o modelo de especificação da WFMC e, geramos então, uma lista dos campos necessários para o mais simples acompanhamento de um sistema de informação na Web, segundo um sistema de Workflow.
Os dados necessários são:
Identificador do processo -- Esse campo é utilizado como chave primária e serve para diferenciar os processos.
Identificador da atividade -- Responsável por identificar em que fase anda o processo, destacando a atividade em andamento.
Nome da atividade -- Significa a identificação da atividade em andamento.
Data da criação -- Registra a data e a hora em que a atividade teve início, com o objetivo de demonstrar o tempo que uma atividade demorou para ser executada, ou há quanto tempo está atividade está em execução.
Em qualquer sistema ele representa a hora e data em que inicia a execução da atividade.
Data final -- Armazena a data e a hora da conclusão da atividade User -- Este campo é importante pois vai ser através de ele que o gestor do Workflow vai identificar o usuário que executou ou está executando determinada atividade.
Duração da atividade -- Em este campo, tendo a data final da atividade, podemos calcular quanto tempo esta demorou a ser executada.
Este campo será gerado.
Próxima atividade -- Em ela, podemos armazenar a próxima atividade a ser executada assim que a atual seja concluída, facilitando ao gestor saber como está o processo.
Com o levantamento dos dados necessários ao processo de acompanhamento de um sistema de informação, geramos as tabelas a seguir, na Figura 33, que demonstra o modelo dos dados necessários ao acompanhamento de um sistema de informação:
Eventualmente, desenvolvidos para encontramos mesmo sistemas apresentam de todos informação os dados cujos formulários necessários ao acompanhamento.
Em este caso, não é necessária nenhuma intervenção ao sistema existente, ou seja, nenhum novo campo precisa ser incluído sendo que os dados disponíveis satisfazem o que nos interessa.
Alguns sistemas, no entanto, não contêm todos os dados necessários a um acompanhamento nos seus formulários, nesse caso é utilizado campo KLGGHQ, sendo que esse campo não é visível no formulário e assim o sistema não sofre nenhuma alteração aos olhos de o usuário, essa é a maneira de interferirmos no sistema sem alterarmos a sua execução.
Um exemplo disso pode ser visto no script a seguir, onde foi necessário criar um campo do tipo KLGGHQ para armazenar informações como o nome da atividade em execução e a próxima atividade a ser executada.
Com as informações descritas a respeito de as tabelas necessárias para um acompanhamento satisfatório num sistema de informação existente na Web, e considerando a criação de uma tabela chamada aproveitamento na base de dados Workflow, torna- se necessário um maior controle na execução do algoritmo para os próximos formulários.
Em estes algoritmos, devemos levar em consideração que o processo já existe, e há a possibilidade de outros estarem em andamento.
Partindo do pressuposto que o algoritmo em desenvolvimento é trivial, destacamos a necessidade de assegurar- se de que o processo existe, a partir de um variável que seja global e armazene o identificador do processo (com um comando condicional do tipo Li), e a atividade em andamento, sendo que, caso a atividade em andamento no momento da execução do algoritmo seja igual a atividade armazenada e os campos que indicam a data/ hora final e a duração da atividade, encontram- se sem informações e deveram ser preenchidas a seguir.
Em o exemplo a seguir, destacamos uma consulta em SQL capaz de retornar dados armazenados na tabela referente a as atividades, possibilitando ao gestor do sistema consultar o processo em andamento a fim de obter a informação referente a o estado do mesmo.
Seguindo o exemplo acima, e considerando o estudo de caso apresentado no capítulo 3 e a seqüência da técnica descrita, as informações que o gestor de Workflow obteria, é demonstrada na Figura 34 a seguir:
Conforme pode ser estudado na Figura 35, a primeira atividade foi executada e a segunda atividade está em execução, considerando que os campos que indicam o término da mesma estão sem informação.
Acompanhando o sistema em execução, demonstramos na Figura 36 o término da segunda atividade e a execução da terceira atividade do processo que tem como identificador a chave 98190038412345.
E, por fim, a tabela que demonstra o término do processo, onde todas as atividades foram concluídas, pode ser visto na Figura 37 a seguir:
Em esse capítulo, descrevemos uma técnica cujo objetivo é incluir funcionalidades de um sistema de Workflow num Sistema de Informação já existente na Web.
A maior preocupação desta técnica é permitir o acompanhamento do sistema com a menor intervenção possível ao sistema já existente e em execução na Web.
Para levantarmos os dados necessários para o acompanhamento de um sistema padrão na Web, analisamos desde a sua criação até a sua execução na Web, um sistema desenvolvido no Laboratório Campus Global da PUCRS, de onde pudemos criar várias situações durante o seu desenvolvimento.
Levamos em consideração que esta técnica será utilizada por a equipe responsável por a manutenção do sistema já existente e que tenha conhecimento do mesmo.
Sendo assim, consideramos que já serão conhecidos os dados destacados como identificadores do processo, e que poderá se identificar os dados eventualmente não existentes no sistema e que irão implicar na criação de campos escondidos do tipo KLGGHQ.
Consideramos ainda que o responsável por a inclusão das funcionalidades de Workflow já tem o conhecimento em programação, o que possibilita a criação de algoritmos necessários para o acompanhamento do processo, destacando a possibilidade do mesmo ser escrito na linguagem usada como preferência do nosso usuário.
Em o capítulo 4 foram apresentados os modelos criados a fim de auxiliar a interação de um sistema de Workflow já existente na Web com a tecnologia de Workflow, tendo como objetivo permitir o acompanhamento do sistema com a facilidade de interferir o mínimo possível nos formulários do sistema.
Consideramos a intervenção mínima como sendo a inclusão num formulário, de um campo capaz de armazenar informação importante ao acompanhamento do sistema e, sendo que este campo deve ser invisível ao usuário, ou seja, para isso deve- se interferir no script do sistema incluindo um campo escondido ao mesmo.
O protótipo desenvolvido a fim de validar a técnica proposta, foi realizado baseado no Sistema de Aproveitamento de Disciplinas, descrito no capítulo 3.
Para validar a técnica proposta, partimos da etapa em que o sistema de aproveitamento de disciplinas encontrava- se sem as facilidades de um sistema de Worklfow, permitindo aplicar, então, a técnica e permitindo acompanhar o sistema de informação em execução.
O primeiro passo adotado, segundo o modelo de execução, é a geração de um arquivo que armazene todas as informações do processo.
Esse arquivo foi gerado numa base de dados do Access e, para tanto, necessita de uma conexão via ODBC, conforme exemplo a seguir A tabela criada recebeu o nome de Workflow, e os dados enviados, a partir de uma conexão, foram os considerados essenciais ao processo.
As informações localizadas e que preenchem o requisito dos dados destacados como necessários a um acompanhamento de um sistema, são os seguintes:
Identificador do processo -- O número da matrícula e o código do aluno.
Assim, garantimos que o identificador do processo não permita que o aluno com uma determinada matrícula, solicite o aproveitamento da mesma disciplina quando está já encontra- se em execução.
O código da atividade -- Em esse caso, não encontramos nenhum campo do tipo número, capaz de diferenciar a atividade, então foi gerado um campo do tipo KLGGHQ que armazena a opção de identificador da atividade, ou seja, uma vez o processo estando na atividade avaliação, o código da mesma será 30, identificando assim aonde se encontra o processo O nome da atividade -- campos do tipo KLGGHQ capazes de armazenar o nome do formulário, considerado no estudo de caso, como a atividade em execução.
Em a maioria dos casos podemos considerar a atividade como o formulário solicitado, mas, no caso deste sistema, podemos ainda descrever a atividade com base no código da mesma, ou seja, se código $= 10 então atividade $= cadastro, e assim por diante.
A data hora inicial e final é gerada a partir de um comando no próprio script do cgi que armazenará no primeiro momento a hora inicial e quando sair da atividade, a hora final.
O comando utilizado é no seguinte formato:
O user, no estudo de caso real, é o campo responsável, que armazena o login ou o ip do usuário que acessou o documento.
O dado referente a a próxima atividade é armazenado num campo KLGGHQ, que armazena o nome da próxima atividade ou o fim do processo, quando a atividade em execução é a última.
O protótipo desenvolvido gerou uma tabela com os principais dados, capazes de acompanhar o sistema.
Em o inicio de cada processo é criada uma tupla que armazena informações sobre a atividade em execução, a cada término de atividade e início da próxima, essa tupla é alterada encerrando a atividade em questão.
A visualização da tabela com informações dos processos em andamentos é demonstrada a seguir na Figura 38:
Com a criação da tabela acima, e seguindo a técnica proposta, é possível ao gestor do sistema executar diversas consultas como:
Atividades em execução, que ainda não foram concluídas:
Essas são algumas consultas realizadas que permitem acompanhar o sistema e identificar a atividade em questão.
Essas consultas foram geradas a partir de a execução da técnica proposta no trabalho desenvolvido.
A validação do protótipo desenvolvido neste trabalho serviu para mostrar que a técnica proposta cumpriu o seu objetivo, pois foi possível acompanhar a execução de instância de processos.
A intervenção sobre o Sistema de Informação existente foi mínima, consistindo somente nas eventuais inclusões de campos, nos formulários Html, necessários para o Workflow.
A realização deste trabalho envolveu o estudo das características de Workflow, enfatizando principalmente os seus conceitos, terminologias e funcionalidades, assim como o processo de roteamento das tarefas e o tratamento das transições de estados num sistema de Workflow.
Este estudo teve como objetivo identificar a possibilidade de acompanhar os processos de sistemas de informação desenvolvidos na Web, de acordo com as principais funcionalidades esperadas em produtos para gerenciamento de Workflow.
Sabendo que um Sistema de Informação ordinariamente não permite tal facilidade, consideramos necessário incluir as funcionalidades do Workflow, para que o acompanhamento então possa ser realizado.
Para tanto, a fim de solucionar este problema, foi necessário um estudo mais aprofundado da plataforma cliente/ servidor, de onde destacamos o protocolo Http, o desenvolvimento de programas CGI e formulários Html.
Em esse capítulo 3, demonstramos como os dados de um formulário são transmitidos da máquina cliente para à máquina servidor e vice-versa, o que possibilitou a criação da técnica.
Essa técnica foi criada baseada no estudo de caso real, também descrito neste trabalho, de onde acompanhamos desde a sua criação até a execução do sistema na Web.
Com ele, foi possível destacar os dados essenciais a qualquer sistema de informação na Web, com as características destacadas.
Essas características dizem respeito à execução de um sistema numa plataforma com vários clientes e um servidor.
Além disso, destacamos a importância da geração de um arquivo de log, com conteúdo adequado, para registrarmos os eventos ocorridos na execução das atividades dos processos.
A grande vantagem do uso desta técnica proposta é a possibilidade de acompanharmos um sistema de informação que já esteja em execução na Web que, no entanto, não disponibiliza funcionalidades de Workflow, interferindo o mínimo possível na sua implementação.
A criação da técnica proposta adotou um modelo de especificação, descrito no capítulo 4, que auxiliou- nos a destacar a importância de alguns dados essenciais ao sistema.
Esses dados são identificados na transação dos formulários e, caso não sejam encontrados nos mesmos (considerando que algumas vezes todos os dados podem ser identificados no processo) podem ser incluídos aos formulários através dos campos KLGGHQ, o que possibilita a interferência no sistema sem nenhuma alteração notável por o usuário.
A técnica criada atingiu o objetivo:
Permitir o acompanhamento, considerando as funcionalidades de um sistema de Workflow num sistema de informação já existente, com a menor intervenção possível aos formulários Html, sendo que o mesmo foi aplicado no protótipo descrito e, com ele, foi possível acompanhar o processo em execução, permitindo ao gestor do sistema identificar o processo em diferentes situações.
O trabalho desenvolvido gerou artigos que representaram estudos importantes e objetivos concluídos.
Em descrevemos o estudo realizado no desenvolvimento do Sistema de Aproveitamento de Disciplinas, utilizando a gerência de Workflow.
Já em, apresentamos a construção de um Sistema de Informação de um Acervo Digital na Web, utilizando do modelo desenvolvido até então.
Com os resultados obtidos no desenvolvimento do modelo, podemos destacar os principais trabalhos a dar continuidade ao estudo realizado, que são:
Estender a técnica desenvolvida a sistemas de informação na Web que sejam executados numa plataforma de dois ou mais servidores permitindo o seu acompanhamento;
Integrar a técnica com ferramentas de Workflow através dos padrões definidos;
Desenvolver uma ferramenta de projeto para a implementação de técnicas em Sistemas de Informação existentes na Web.
