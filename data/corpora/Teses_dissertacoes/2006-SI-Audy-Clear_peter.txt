O acelerado crescimento e a competição por o mercado têm levado empresas a buscarem formas de continuamente aumentar a qualidade e produtividade nos seus processos de desenvolvimento de software.
Uma forma para se otimizar o processo de desenvolvimento de software é a adoção de técnicas de reuso de software como Desenvolvimento Baseado em Componentes (DBC) que abrange preocupações como o aumento da produtividade e a redução dos custos com qualidade.
Mas será o desenvolvimento baseado em componentes, por si só, garantia de beneficio econômico, ou seja, os custos de compra/ integração de componentes reutilizáveis serão sempre menores do que o custo de desenvolvimento das mesmas funcionalidades para uma dada aplicação?
E o desenvolvimento de um componente reutilizável será garantia de recuperação do investimento realizado para criação do mesmo?
Em este contexto, o presente trabalho apresenta uma proposta de modelo de análise de viabilidade para a criação de componentes, que com base em uma série de entradas qualitativas e quantitativas, provê projeções de retorno sobre o investimento na criação de componentes.
Tal modelo tem como propósito servir como ferramenta de auxílio à tomada de decisão para os engenheiros de software envolvidos em programas de desenvolvimento de componentes reutilizáveis.
Palavras-chave: Desenvolvimento Baseado em Componentes.
Métricas. Armazenamento.
Retorno de investimento.
Criação de componentes.
O acelerado crescimento e a competição por o mercado têm levado empresas a buscarem formas de continuamente aumentar a qualidade e produtividade nos seus processos de desenvolvimento de software.
Uma forma para otimizar o processo de desenvolvimento de software é a adoção de técnicas de reuso de software como Desenvolvimento Baseado em Componentes (DBC) que abrange preocupações como o aumento da produtividade e a redução dos custos com qualidade.
Conforme e, o desenvolvimento baseado em componentes apresenta duas perspectivas, o desenvolvimento com componentes e o desenvolvimento de componentes.
O desenvolvimento com componentes foca no desenvolvimento de aplicações a partir de a composição de artefatos reutilizáveis, partindo do princípio que existam componentes disponíveis e que supram, mesmo que parcialmente, os requisitos da aplicação.
O desenvolvimento de componentes envolve preocupações de como gerar artefatos reutilizáveis.
Desta forma, o reuso de componentes pode ser visto como um modelo econômico de oferta e demanda, respectivamente representados por produtores e consumidores de componentes.
Mas será o desenvolvimento baseado em componentes, por si só, garantia de benefício econômico, ou seja, os custos de compra/ integração de componentes reutilizáveis serão sempre menores do que o custo de desenvolvimento das mesmas funcionalidades para uma dada aplicação?
E o desenvolvimento de um componente reutilizável será garantia de recuperação do investimento realizado para criação do mesmo?
A literatura aponta que a resposta para estas perguntas é &quot;não»,.
Diversos fatores podem afetar o benefício econômico relacionado ao DBC, sucintamente podemos citar:·
altos custos na integração do componente devido a necessidade da realização de adaptações para o seu reuso podem elevar o custo de reutilização;··
falta de documentação adequada pode impossibilitar o reuso do componente;
O componente pode se tornar obsoleto antes de retornar o investimento realizado na sua criação.
Para responder a essas perguntas é necessária a criação de modelos de análise de retorno de investimento para DBC que possam auxiliar o engenheiro de software na tomada de decisão de reuso ou criação de componentes.
Um estudo sobre métricas para DBC, realizado dentro de o âmbito da pesquisa, apontou uma carência de propostas para análise de retorno de investimento.
Em um âmbito financeiro, a criação de componentes pode ser vista como um investimento, e como todo investimento, é esperado que o mesmo seja financeiramente rentável.
Componentes retornam o investimento referente a sua criação através do seu reuso em múltiplos projetos.
Rentabilidade com componentes é obtida por a redução do esforço no desenvolvimento do software em função de a integração do componente, frente a a implementação de todas as funcionalidades (encapsuladas no componente) para cada projeto.
Engenheiros de software precisam estar aptos para traduzir os benefícios de reuso em benefícios contábeis para que o investimento em reuso possa ser comparado a outras alternativas de investimento corporativas.
Em esse contexto, o presente trabalho apresenta uma proposta de modelo de análise de viabilidade para a criação de componentes que, com base em uma série de entradas qualitativas e quantitativas, provê projeções de retorno sobre o investimento na criação de componentes.
Tal modelo tem como propósito servir como ferramenta de auxílio à tomada de decisão para os engenheiros de software envolvidos em programas de desenvolvimento de componentes reutilizáveis.
A pesquisa que levou a construção do modelo foi financiada através de dois convênios com fins de incentivo à pesquisa.
Inicialmente no Centro de Desenvolvimento e Pesquisa em e-Bussiness (CDPe), do convênio Dell ­ PUCRS e posteriormente na empresa Compasso, que também se tornou possível através de um convênio desta empresa com a PUCRS.
O trabalho apresentado neste documento foi realizado através de etapas, as quais estão representadas na Figura 1.
As etapas estão representadas através de um diagrama de atividades UML (Unified Modeling Language).
Primeiramente foi realizado o levantamento bibliográfico e estudos iniciais sobre o tema.
Esses estudos permitiram identificar as carências relativas à área, as quais serviram de motivação para este trabalho.
Para criação do modelo de análise de viabilidade foram identificadas quais as principais fontes de custos referentes ao DBC e quais as métricas que contabilizavam os custos das atividades do processo de desenvolvimento de componentes.
De essa forma foi estabelecida a parte dita quantitativa do modelo.
Para construir um modelo que permitisse uma análise de retorno de investimento mais precisa foi integrada ao mesmo uma série de fatores qualitativos.
Esses fatores permitem ao modelo a possibilidade de contabilizar as reduções de lucro, referentes ao decrescimento da reusabilidade do componente, propiciadas por a obsolescência do artefato no decorrer de o tempo.
Para auxiliar a aplicação do modelo foi desenvolvida uma ferramenta cujo objetivo é de facilitar a aplicação do mesmo, propiciando formas de análise visual do retorno sobre investimento e a comparação de múltiplos cenários para desenvolvimento de componentes.
Partindo do modelo de análise de viabilidade proposto, foi realizada uma análise de campo para observar a aplicabilidade do modelo na tomada de decisão sob o ponto de vista de profissionais de duas organizações de desenvolvimento de software.
Com base no retorno desses profissionais o modelo pôde ser avaliado e evoluído, para a presente forma.
Para a criação deste modelo, inicialmente foi conduzido um estudo acerca de as atividades envolvidas no processo de desenvolvimento e reuso de componentes.
Com base neste estudo (relatado na Seção 2.2), foi possível identificar as principais atividades envolvidas no processo de DBC.
Essas atividades auxiliaram num segundo estudo, relatado no Capítulo 3, que tinha por objetivo a identificação de métricas que contabilizassem o esforço envolvido na criação e no reuso de componentes.
A partir de as atividades e métricas estudadas foi proposto o modelo de análise de viabilidade para desenvolvimento de componentes, objeto desta dissertação.
O Capítulo apresenta uma breve análise sobre os principais métodos de análise de retorno de investimento.
O Capítulo 5 apresenta propostas de modelos para análise retorno de investimento para desenvolvimento baseado em componentes.
O Capítulo 6 apresenta o modelo de análise de componentização de software proposto.
A análise de campo aplicada para avaliação do modelo proposto é relatada no Capítulo 7.
Para finalizar, o Capítulo 8, apresenta as considerações finais sobre o presente trabalho.
O conceito de componente forma a base para a correta compreensão do que vem a ser o desenvolvimento baseado em componentes.
Embora o conceito de componente não seja novo, ainda existe muita confusão acerca de o que vem a ser um componente devido a o excesso de definições existentes.
Um número considerável de definições de componentes pode ser encontrado na literatura, abaixo são apresentadas algumas das principais, para que com base em elas possa- se ter uma idéia precisa do que vem a ser um componente.
Para, «um componente de software é uma unidade de composição com interfaces contratualmente especificadas que somente podem possuir dependências explícitas de contexto.
Um componente de software pode ser usado independentemente e ser composto por outras partes».
Define um componente como &quot;uma implementação não conhecida de funcionalidades, que pode ser composto por outras partes em conformidade com um modelo de componentes».
Para, um componente é &quot;uma unidade de composição, que deve ser especificada de tal maneira que ela possa ser composta com outros componentes e integrada dentro de os sistemas de maneira previsível».
Analisando as similaridades das definições de, e, observa- se que componentes são uma unidade de composição com funcionalidades encapsuladas em interfaces, as quais permitem que componentes comuniquem- se com seu ambiente, podendo também serem compostos por outros componentes.
Essas definições nos levam a crer que a natureza dos componentes é a de sempre serem criados para compor algo maior.
Para o presente trabalho será adotada a definição de componente de.
De essa forma, o modelo de análise de viabilidade para componentização de software proposto irá compreender componentes que sigam as características definidas no trabalho deste autor.
Durante a &quot;crise do software», na Conferência de Engenharia de Software da OTAN, McIlroy defendeu a tese de que o desenvolvimento de software deveria seguir os mesmos princípios utilizados por as outras áreas de engenharia, ou seja, o software deveria ser desenvolvido por intermédio da montagem (conexão) de componentes (rotinas) que não exigissem adaptação para necessidades específicas, e que fossem reutilizados em vários sistemas de software, adquiridos por terceiros ou desenvolvidos por a própria empresa, conforme a necessidade.&amp;&amp;&amp;
Segundo, o desenvolvimento da maioria dos produtos de software disponíveis no mercado é baseado numa abordagem de desenvolvimento em blocos monolíticos, formado por um grande número de partes inter-relacionadas, onde esses relacionamentos estão na maioria das vezes implícitos.
O desenvolvimento baseado em componentes surgiu como uma nova perspectiva para o desenvolvimento de software, cujo objetivo é a &quot;quebra «de blocos monolíticos em componentes interoperáveis, reduzindo desta forma a complexidade no desenvolvimento, assim como os custos, através da utilização de componentes que, a principio, seriam adequados para serem utilizados em outras aplicações.
Para que o desenvolvimento baseado em componentes possa ser largamente utilizado, é necessário que pessoas estejam engajadas na construção de componentes genéricos que atendam as necessidades de múltiplas aplicações que serão desenvolvidas através da incorporação desses componentes.
Como pode- se observar, existe a necessidade do desenvolvimento de componentes reusáveis para promover o desenvolvimento com componentes.
Devido essa diferença pode- se dividir o desenvolvimento baseado em componentes em dois processos (cada um visando atender as necessidades de uma área do DBC):·
Desenvolvimento com componentes:
Processo responsável por mapear as atividades necessárias para a construção de sistemas a partir de componentes reutilizáveis.
Desenvolvimento de componentes:
Processo que tem por objetivo o desenvolvimento de componentes genéricos que serão incorporados por múltiplos sistemas.
Para compreender a natureza desses processos foi conduzido um estudo na literatura visando estabelecer os conjuntos de atividades que os formam.
O estudo de processos e atividades para DBC ocorreu em duas etapas.
A primeira etapa do estudo focou- se na análise das atividades dos processos de desenvolvimento baseado em componentes encontrados na literatura e avalia como cada um trata as atividades consideradas elementares ao DBC.
Esses processos servem como um referencial teórico para identificação das atividades base para o DBC.
Em uma segunda etapa foram estudados métodos para desenvolvimento baseado em componentes.
Esses métodos foram concebidos para serem aplicados no desenvolvimento de sistemas baseados em componentes, propondo além de atividades, artefatos para a modelagem e criação do sistema.
Os resultados do estudo sobre os métodos de DBC não será apresentado neste trabalho, pois nenhum dos métodos estudados comporta o desenvolvimento de componentes isoladamente do desenvolvimento de sistemas.
Em as próximas subseções serão apresentados os modelos de processos estudados.
Serão abordadas somente as atividades que se focam exclusivamente no desenvolvimento de componentes, por ser o desenvolvimento de componentes o foco do presente trabalho.
Os processos apresentados nesta subseção fornecem um importante referencial para a construção do modelo de análise de viabilidade, pois apresentam o referencial inicial sobre quais atividades devem ser consideradas no levantamento de custos inerentes a criação de componentes.
Como o presente trabalho considera que o desenvolvimento de componentes pode ocorrer independente do contexto de desenvolvimento de um sistema, ou seja, um componente pode ser identificado e construído sem estar atrelado a um projeto de sistema, foram abstraídas todas as atividades, exceto as focadas no desenvolvimento de componentes.
Abaixo segue uma breve descrição sobre os processos para desenvolvimento de componentes presentes em cada uma das propostas estudadas.
Em, é colocado que a Engenharia de Software apresenta grande similaridade com o desenvolvimento baseado em componentes.
A grande diferença é que o DBC está especialmente focado nas questões relacionadas a componentes e desta forma distingue o desenvolvimento de componentes do desenvolvimento de sistemas com componentes.
São propostas três atividades para que o processo de desenvolvimento de componentes lide com as dificuldades da geração de artefatos reutilizáveis:·
Definição e Análise de requisitos do componente:
Os problemas de analisar requisitos se tornam evidentes quando se está analisando os requisitos de um componente.
Os principais fatores que tornam a análise de requisitos um processo complexo é o fato dos requisitos geralmente não estarem claros ou até mesmo não estarem completamente definidos.·
Projeto do Componente: Essa atividade tende a ser muito complexa no desenvolvimento de componentes.
O projeto de um componente deve se dar da forma mais genérica possível, primando por a adaptabilidade do componente para facilitar seu reuso.
Ao mesmo tempo em que a complexidade de se projetar componentes aumenta, os componentes devem se manter simples para atenderem a requisitos específicos de uma forma eficiente.
Segundo, o desenvolvimento de um componente que visa ser reutilizado consome de três a quatro vezes mais recursos do que o desenvolvimento de um componente que serve a propósitos específicos.
Para se diminuir o impacto desse risco, uma análise de mercado deve ser feita para saber se o investimento terá retorno.·
Documentação do Componente: Como o objetivo de se criar componentes é o reuso, esses devem possuir uma documentação clara (preferencialmente geradas de uma forma padronizada).
Isso é especialmente importante para componentes que sejam distribuídos na forma de código executável que podem ser mais difíceis de serem reutilizados.
Segundo, o ciclo de vida tradicional do desenvolvimento de software não suporta atividades relacionadas ao reuso de componentes.
O autor cita e que definiram o refinamento do ciclo de vida do desenvolvimento de software através da inclusão das seguintes atividades:·
Compreensão: Compreender o problema e identificação de uma estruturasolução baseada em componentes existentes.·
Reconfiguração: Próxima fase.
Recuperação: Adquirir, avaliar e instanciar componentes existentes.
Adaptação: Modificar e adaptar componentes.
Integração: Integrar componentes a produtos.
Avaliação: Avaliar a reusabilidade de componentes criados ou gerados a partir de a modificação de componentes existentes para possível incorporação ao grupo de componentes reutilizáveis existentes.
Reconfigurar a estrutura-solução para aumentar a possibilidade do uso de componentes existentes que estarão disponíveis na As cinco primeiras atividades estão ligadas ao desenvolvimento com reuso, e a ultima com o desenvolvimento para reuso.
Baseado nessas atividades, propõe um processo de DBC baseado no modelo espiral de Boehm.
O terceiro trabalho analisado foi o apresentado em, onde é proposto um processo orientado a componentes.
O modelo proposto por o autor visa dar suporte para o desenvolvimento de sistemas baseados em componentes e dos componentes que podem estar contidos neste sistema.
Abaixo seguem as atividades relacionadas com o desenvolvimento de componentes:·
Projeto de Negócios:
Essa atividade avalia os possíveis pontos de componentização de um ponto de vista de negócios.·
Projeto Técnico: Essa atividade avalia os possíveis pontos de componentização de um ponto de vista de técnico.
Especificação: Essa atividade tem como papel principal a geração de uma completa e consistente especificação arquitetural e especificação de componentes baseada nos resultados do Projeto Técnico e do Projeto de Negócios.
Como dito acima, as atividades de Projeto de Negócios e de Projeto Técnico avaliam componentes do ponto de vista técnico e de negócios, resultando numa pré-seleção de potenciais componentes para o sistema.
A tarefa de Teste de Componente contém os resultados e os logs de testes desses componentes frente a os requisitos do sistema e a arquitetura de sistema escolhida.
A tarefa Atribuição de Componentes tem como objetivo a definição de quais componentes devem ser desenvolvidos no projeto e quais componentes existentes podem ser reutilizados.
Implementação: Essa atividade tem dois resultados:
O código do sistema gerado por a tarefa de codificação e a validação do sistema através da tarefa de teste do sistema.
Através do estudo realizado sobre processos de desenvolvimento baseado em componentes pode- se analisar como a literatura aborda o processo de desenvolvimento de componentes e as suas principais atividades.
Foi possível obter um conjunto de atividades, citadas por todos os autores, como as principais para o desenvolvimento baseado em componentes.
Podem- se citar as atividades de Projeto e Implementação de Componente como as enfatizadas por todos os autores.
Apesar de existirem atividades de mesmo nome no desenvolvimento tradicional de software, as de DBC apresentam maior complexidade e um maior número de tarefas inerentes.
Esta maior complexidade pode ser justificada, pois componentes devem atender a questões de reusabilidade, generalidade e adaptabilidade.
A compreensão do processo de desenvolvimento baseado em componentes, estabelecido por esse estudo, permitiu a identificação de onde as métricas, relacionadas ao DBC (apresentadas nos próximos capítulos do presente trabalho), se encaixam dentro de o contexto de Desenvolvimento Baseado em Componentes.
O modelo de análise viabilidade para desenvolvimento de componentes proposto neste trabalho possui dois diferentes grupos de entradas que o alimentam.
Existe um grupo de variáveis ditas quantitativas.
O objetivo deste grupo de variáveis é incorporar ao modelo a parte referente a a contabilização de custos referentes à componentização de software.
Em complemento existe outro grupo de variáveis ditas qualitativas.
As variáveis qualitativas estão relacionadas ao conceito de mapeamento de riscos no desenvolvimento de componentes.
O modelo irá considerar os riscos relacionados à obsolescência do componente, ou seja, riscos inerentes ao ciclo de vida do componente que possam implicar no não reuso do artefato.
Em o decorrer deste capítulo serão apresentadas as métricas, que refletem a parte quantitativa do modelo, e os riscos, referentes à parte qualitativa, para o desenvolvimento baseado em componentes.
Reuso de componentes nem sempre implica na redução de custos de um projeto de software, da mesma forma que a criação de um componente nem sempre terá seus custos pagos.
Uma série de fatores pode influenciar o retorno do investimento.
No caso de componentes, a obsolescência das funcionalidades e tecnologias utilizadas num componente podem, por exemplo, levar ao não reuso dos mesmos.
Se o uso de DBC nem sempre implica em redução de custos, a questão é definir quando DBC está ligado a custo inferior.
Para responder essa questão, existem propostas de métricas.
De entre as propostas estudadas serão apresentadas aquelas cujas métricas propostas se encaixavam com o contexto do trabalho, ou seja, métricas para DBC que considerem o desenvolvimento de componentes e o reuso de componentes como processos separados.
As métricas têm um papel fundamental dentro de o contexto de desenvolvimento baseado em componentes, servindo como um indicador para a tomada de decisão num projeto.
As métricas para DBC estão divididas em dois grupos:
Métricas de Processo:
Métricas de processo medem as características do processo de desenvolvimento.
As medidas destas características devem revelar quando é adequada a utilização do desenvolvimento baseado em componentes (desenvolvimento com componentes e desenvolvimento de componentes).
Métricas de Produto:
As métricas de produto são aplicadas sobre os artefatos de um projeto de software.
Essa abordagem enfoca somente sobre o produto final, não sendo considerado o seu processo de desenvolvimento.
Assim sendo, essas métricas referem- se às características dos componentes.
As métricas de produto podem ser largamente utilizadas, durante o processo de DBC, para se avaliar as características de componentes que se deseja integrar ao sistema.
Como o presente trabalho trabalha exclusivamente com métricas de processo, mais especificamente para o processo de decisão de quando criar componentes, não serão abordadas métricas de produto.
Em as demais subseções deste capítulo serão apresentadas as métricas de processo estudadas.
Em é apresentado um conjunto de métricas desenvolvido e utilizado por a ABB (empresa multinacional do ramo de tecnologias de automação e produção energia).
Esse conjunto de métricas tem por objetivos estabelecer quando há redução de custos e de esforço na reutilização de componentes no desenvolvimento de sistemas.
Gerentes de projeto podem usar este conjunto de métricas para avaliar diferentes cenários de custos e esforço no desenvolvimento de um sistema usando a abordagem de DBC.
O conjunto de métricas foi baseado na abordagem Goal-Question-Metrics (Objetivos-Perguntas-Métricas).
Essa abordagem estabelece um método top-down, em o qual a partir de um grupo de objetivos se deriva um conjunto de questões que são respondidas por um conjunto de métricas cujos resultados podem determinar se os objetivos foram alcançados.
Abaixo são listados os principais passos dessa abordagem:
1. Listar os principais objetivos;
2. Derivar questões necessárias para se responder se os objetivos foram alcançados.
Possivelmente as questões podem ser quebradas em sub-questões até se atingir a granularidade desejada;
E Objetivo 1: Avaliar quando existe redução nos custos de um projeto ao se utilizar DBC.
O Questão 1: Qual a diferença de custo entre o DBC e o desenvolvimento tradicional do software?
O Questão 1.1: Qual o custo de mão de obra por hora para produzir uma Um de código (&quot;/ UM)?
Métrica 1: Determinar a diferença do custo de mão de obra por hora entre as diferentes organizações (que desenvolvem e reusam o componente) (&quot;/ hora).
Métrica 2: Determinar a taxa de produtividade de software da organização alvo (Um/ hora).
O custo de mão de obra por hora e a taxa de produtividade variam entre as organizações.
O custo de mão de obra por unidade de medida pode ser calculado se dividindo a métrica 1 por a métrica 2.
O custo de mão de obra por unidade de medida depende dos custos por hora e da taxa de produtividade por hora.
O Questão 1.2 (ou objetivo 2):
Qual é a diferença de esforço entre o DBC e o desenvolvimento tradicional na criação de um software?
O Questão 1.2.1: Qual é o esforço requerido no DBC? (
Um) o Questão 1.2.1.1: Qual é o esforço requerido para se desenvolver uma fração da aplicação se usando a abordagem tradicional?
Métrica 3: Tamanho do esforço requerido para se desenvolver uma fração de código de uma forma tradicional requerido por a abordagem de DBC.
Esse pedaço de código em unidades de medida é o mesmo valor do tamanho da fração de código em unidades de medida.
Por exemplo, se o novo código tem um tamanho de 100 Um, então o esforço estimado é de 100 Um.
Deve ser determinado o esforço para se reutilizar componentes oriundos de um repositório de componentes ou criados por terceiros.
O esforço em se reutilizar componentes com modificações varia conforme o grau das modificações.
Em, o grau de modificações é dividido em dois níveis, um com modificações menores ou iguais a 25% das funcionalidades do componente e outro de modificações superiores a 25%.
Por exemplo, se há um componente de 600 Um e 140 Um devem ser modificadas antes do seu reuso, o nível de modificação é inferior a 25%.
O Questão 1.2.1.2.1.1: Qual é o esforço requerido para se reutilizar componentes que requerem modificações menores ou iguais a 25% das funcionalidades do componente? (
Um) Métrica 4: O tamanho acumulado de todos os componentes reutilizados com modificações menores ou iguais a 25% das funcionalidades do componente. (
Um) Métrica 5: Definir o fator ERLM de todos os componentes reutilizados com modificações menores ou iguais a 25% das funcionalidades do componente. (
%) O fator ERLM representa o fator de esforço de reuso de componentes com modificações menores ou iguais a 25% (LM vem do inglês, less modification).
Esse fator inclui o esforço requerido para se selecionar, compreender, integrar, testar e modificar o componente.
Cita para estimar que o esforço requerido para se reutilizar um componente que requer modificações menores ou iguais a 25% é de 40% do esforço requerido para se escrever o mesmo componente utilizando uma abordagem tradicional.
Esse valor serve somente como referência, os gerentes de projeto podem modificar- lo baseado em projetos passados da organização.
A Equação 1 apresenta a função para o cálculo do esforço de reutilizar componentes com modificações menores ou iguais a 25% das funcionalidades do componente.
Onde: Er (m\ $= 25%):
Esforço total para se reutilizar um componente com modificações menores ou iguais a 25%.
Tc: Soma dos tamanhos dos componentes que sofreram alterações inferiores ou iguais a 25% das funcionalidades do componente.
ERLM: Fator de esforço de reuso de componentes com modificações menores ou iguais a 25%.
Onde: Er (m\&gt; 25%):
Esforço total para se reutilizar um componente com modificações superiores a 25%.
Tc: Soma dos tamanhos dos componentes que sofreram alterações superiores a 25% das funcionalidades do componente.
ERMM: Fator de esforço de reuso de componentes com modificações superiores a 25%.
Para se calcular o esforço total de reutilização de componentes com modificações é realizada a soma dos esforços de reutilização de componentes com modificações superiores e inferiores a vinte e cinco por cento, apresentada na Equação 3.
ETRM $= Er (m\ $= 25%)+ Er (m\&gt; 25%) Onde:
ETRM: Esforço total para se reutilizar componentes com modificações.
Er (m\ $= 25%):
Esforço total para se reutilizar um componente com modificações menores ou iguais a 25%.
Er (m\&gt; 25%):
Esforço total para se reutilizar um componente com modificações superiores a 25%.
Onde: Etrsm:
Esforço total para se reutilizar componentes sem modificações.
Tc: Tamanho acumulado de todos os componentes reutilizados sem modificações.
ERNM: Fator de esforço de reuso de componentes sem modificações.
Baseado nas métricas anteriormente apresentadas é estabelecido que o esforço total de reuso de componentes é a soma do esforço total para se reutilizar componentes sem modificações com o esforço total para se reutilizar componentes com modificações, apresentado na Equação 5.
Onde: ETR:
Esforço total de reuso de todos os componentes.
ETRM: Esforço total para se reutilizar componentes com modificações.
Etrsm: Esforço total para se reutilizar componentes sem modificações.
O Questão 1.2.1.3: Qual é o esforço requerido para se escrever componentes reutilizáveis? (
Um) Métrica 10: Tamanho do componente escrito para ser reutilizado (Um).
Esta métrica corresponde ao tamanho das funcionalidades do novo componente.
Métrica 11: O fator ERE(%).
Fator ERE:
O esforço requerido para se escrever um componente reutilizável é consideravelmente maior do que o de se desenvolver exatamente as mesmas funcionalidades numa abordagem tradicional.
O esforço adicional vem da necessidade de se conduzir uma análise de domínio, suportar requisitos de forma mais genérica, testes adicionais, empacotamento, manutenção, certificação, documentação e gerenciamento do repositório.
Todos estes fatores estão incorporados no fator ERE.
Novamente cita diversos estudos sobre o desenvolvimento de componentes e sugere um fator de 1.55, ou seja, o esforço para se desenvolver um componente reutilizável é 55% a mais de o que o de se desenvolver tradicionalmente.
A função de cálculo do esforço para desenvolvimento de componentes reutilizáveis é apresentada na Equação 6.
Onde: ETER:
Esforço total para se escrever um componente reutilizável.
Tc: Tamanho das funcionalidades a serem componentizadas.
ERE: Esforço extra requerido para se escrever um componente reutilizável Partindo das métricas anteriormente apresentadas, estabelece que o esforço total para desenvolver um projeto usando DBC é representado por a soma do esforço total para se desenvolver frações de código usando a abordagem tradicional, esforço total de se reutilizar componentes e esforço total para escrever componentes reutilizáveis, como apresentado na Equação 7.
Onde: Etdbc:
Esforço total para desenvolver um projeto usando DBC.
TECN: Esforço total para se desenvolver frações de código usando a abordagem tradicional.
ETR: Esforço total de se reutilizar componentes ETER:
Esforço total para escrever componentes reutilizáveis.
A diferença de esforços entre a abordagem tradicional e a baseada em componentes pode ser obtida se calculando o ETsalvo, apresentado na Equação 9.
ETsalvo $= ETT -- ETDBC onde:
ETsalvo: Esforço poupado por o reuso de componentes.
ETT: Esforço necessário para se desenvolver o sistema utilizando a abordagem ETDBC:
Esforço total para desenvolver um projeto usando DBC.
A variável ETsalvo será o indicador de beneficio ou perna de esforço no uso do desenvolvimento baseado em componentes no desenvolvimento do sistema.
Caso o ETsalvo seja maior que zero, então o uso de DBC irá requerer menor esforço do corpo técnico da empresa.
Caso ETsalvo seja menor que zero, então a abordagem de desenvolvimento do sistema é a tradicional irá requerer menor esforço.
De o conjunto de métricas proposto em, as utilizadas no modelo de análise de viabilidade são:
Custo de Desenvolvimento do Componente;
Custo de Reuso do Componente, e Custo de Não Reutilizar o Componente -- Custo de Desenvolvimento.
Em, é apresentado um conjunto de métricas utilizadas por a IBM para se estimar o esforço salvo através do reuso.
As métricas apresentadas neste trabalho seguem a perspectiva de negócios, sempre lidando com custos e benefícios referentes ao reuso.
Apesar de apresentar um conjunto extenso de métricas, serão apresentadas somente as métricas relacionadas ao escopo de métricas de processo.
Em, é proposta uma métrica que indica quando é adequado reutilizar componentes e outra de quando é adequado se criar componentes reutilizáveis.
Essas métricas são apresentadas nas seções abaixo.
O custo poupado por o reuso (CPPR) é a métrica responsável por calcular o decrescimento do custo do produto em virtude de o reuso.
Essa métrica possui um papel fundamental por ser ela o indicador do retorno do investimento em reuso.
Os benefícios potenciais e os custos que podem ser poupados através do reuso variam conforme o projeto e o seu percentual de reuso.
Mesmo organizações que somente consomem componentes devem realizar investimentos em mudanças de processos, ferramentas e treinamentos.
Por exemplo, desenvolvedores e gerentes irão necessitar receber treinamento sobre reuso de software, esse treinamento irá despender uma certa quantidade de recursos.
Sem esse treinamento os consumidores de componentes não iriam conseguir usufruir todos os benefícios oferecidos por o reuso.
Para se estimar o CPPR é proposto o seguinte somatório:
Onde: Os custos e benefícios de se adotar o reuso variam conforme o projeto e a organização.
Os benefícios de se reutilizar software geralmente superam os seus custos, pois são evitados gastos com projeto de parte do software, desenvolvimento, documentação, teste, manutenção e gerenciamento do desenvolvimento do artefato reutilizável.
Benefícios também podem incluir a redução de custos na aquisição de ferramentas ou equipamentos que seriam necessários caso o software tivesse de ser inteiramente desenvolvido na organização.
Outros benefícios que vem agregados com a adoção de DBC são o aumento de lucros por a diminuição de tempo de produção do produto e/ ou aumento da satisfação dos clientes.
Os custos referentes ao reuso incluem gastos como o dinheiro gasto para educar a organização a reutilizar software e na necessidade de se adquirir ferramentas que disponibilizem informações sobre os componentes reutilizáveis da empresa.
A organização pode também incorrer custos por a análise de sistema e de domínio e tempo gasto na identificação de partes do sistema que podem ser componentizadas.
Outro gasto necessário é o tempo gasto por os desenvolvedores para se selecionar os componentes candidatos a reuso.
Se a organização tiver adquirido componentes, pode haver gastos com o pagamento de taxas de licença ou a compra do componente.
Estima que o benefício financeiro atribuído ao reuso durante a fase de desenvolvimento é de 80% do custo de se desenvolver o código integralmente.
Essa porcentagem deriva de estudos que demonstraram que o custo de se integrar um componente é em torno de 20% do custo de se desenvolver um módulo de software novo.
Esse mesmo estudo também demonstra que os gastos na fase de manutenção do sistema serão menores, pois componentes estão sujeitos a possuírem menos erros.
O custo poupado por o reuso é calculado por a soma dos custos evitados nas fases de desenvolvimento e de manutenção.
Onde: CPD:
Custo poupado no desenvolvimento.
Cr: Código reutilizado.
CNN: Custo do código novo.
Onde: CPM:
Custo poupado na manutenção.
Cr: Código reutilizado.
Te: Taxa de erros por unidade de medida de software.
CMC: Custo de manutenção do código.
Onde: CPPR:
Custo poupado por o reuso.
CPD: Custo poupado no desenvolvimento.
CPM: Custo poupado na manutenção.
Algumas das variáveis apresentadas nas fórmulas acima variam conforme a organização, e devem ser obtidos a partir de seus dados históricos.
A seguir é apresentado um exemplo que ilustra a aplicação das métricas de avaliação do custo poupado por o reuso.
Como exemplo da aplicação dessas métricas, digamos que uma organização tem o custo de desenvolvimento histórico de 4 por linha de código, taxa de erro de 1.25 erros a cada mil linhas de código e 100 de média para arrumar um erro.
O custo poupado por o reuso para se integrar um componente de 20 KLOC nesse cenário seria de:
CPPR $ + $= 64 mil+ 2.5 mil $= 66.5 mil Os custos relacionados a se desenvolver um componente reutilizável claramente são superiores ao de se desenvolver de uma forma tradicional.
Muito esforço deve ser despendido para que um componente se torne facilmente reutilizável em diversos domínios de aplicação.
A métrica de custo adicional de desenvolvimento (CAD) visa quantificar esse esforço, como apresentado na Equação 14.
Para determinar o CAD deve- se inicialmente identificar e quantificar os custos e os benefícios associados com a produção de componentes reutilizáveis.
Onde: O grau do investimento na construção de componentes reutilizáveis varia conforme as prioridades e necessidades da organização.
Abaixo segue uma lista com os principais custos relacionados ao desenvolvimento de componentes reutilizáveis.
Análise do domínio é requerida para se conduzir um estudo completo do problema que pode revelar oportunidades de artefatos a serem componentizados.
Treinamento requerido para que os desenvolvedores de software aprendam os conceitos e as práticas de se construir software reutilizável.
O treinamento em reuso de software deve incluir conceitos como encapsulamento, ocultamento de atributos, construção de interfaces bem definidas, o uso de funcionalidades específicas de cada linguagem e programação com independência de ambiente.
Necessidade de se possuir um repositório de componentes que armazene os diversos componentes reutilizáveis produzidos por a empresa.
Também podem ser contabilizados gastos com a manutenção desse repositório.
Desenvolvimento e certificação dos componentes reutilizáveis para assegurarse de que os artefatos tenham sido projetados, executados, e testados para serem reutilizados em outros ambientes.
A organização deve também dar ênfase extra na documentação do usuário para que o reutilizador do componente possa compreender suas funcionalidades e interfaces.
Para os componentes de alta qualidade, reusáveis, nós requeremos a certificação por um grupo independente do teste assegurar a qualidade e a função do software.
Esses são somente alguns dos principais custos relacionados ao desenvolvimento de componentes reutilizáveis.
Felizmente, muitos desses custos representam um investimento inicial que deve ser feito, não sendo necessário refazer- los novamente.
Assim como na definição do CPPR, os autores acharam difícil quantificar todos os benefícios e custos relacionados ao reuso, portanto, foi estabelecido um valor padrão, baseado em experiências passadas, para definir o esforço relativo a se escrever componentes reutilizáveis.
Esse valor estabelece que o esforço para se desenvolver um componente reutilizável é de 150% do esforço de se escrever as mesmas funcionalidades sem focar no reuso.
De essa forma, a fórmula para se calcular o custo adicional de desenvolvimento de um componente reutilizável é apresentada na Equação 15.
Onde: CAD:
Custo adicional de desenvolvimento de um componente reutilizável.
Crer: Custo relativo de se escrever para o reuso.
QCC: Quantidade de código do componente.
CDCN: Custo de se desenvolver código novo.
Para se ilustrar a aplicação da métrica apresentada acima considere o seguinte exemplo.
Digamos que uma empresa vai desenvolver um componente que terá em torno de 10 KLOC, tem o custo de desenvolvimento histórico de 4 por linha de código e o custo relativo a se escrever para o reuso é de 1.5.
De essa forma, o custo adicional de se escrever esse componente para ser reutilizado é:
CAD $= × 10 KLOC × 4 por linha de código $= 20 mil De o conjunto de métricas proposto em, as utilizadas no modelo de análise de viabilidade são:
Custo de Desenvolvimento do Componente;
Custo de Não Reutilizar o Componente -- Custo de Manutenção.
O Capitulo 3 abordou de forma sucinta duas propostas de grupos de métricas para análise de reuso de componentes.
Essas duas propostas servem de base para o modelo de análise de viabilidade proposto.
Através da composição de diversas das métricas citadas, em adição a fatores qualitativos, o modelo de análise de viabilidade foi criado.
As métricas apresentadas nesta seção e que foram utilizadas para criação do modelo estão apresentadas na Tabela 1.
Durante o capítulo 6, em o qual o modelo proposto será explicado, serão referenciadas as métricas apresentadas na presente seção.
Segundo, componentes seguem um ciclo de vida que vai da sua concepção, reutilização até o momento que as funcionalidades providas por o artefato começam a ficar desatualizadas até se tornarem obsoletos, conseqüentemente são descontinuados e não mais reutilizados.
Esta seção visa estabelecer algumas das características que podem influenciar sobre o tempo de vida do componente, ou seja, até quando um componente poderá suprir as necessidades das aplicações que o reusam.
O mapeamento destes riscos permite ao engenheiro de software validar quando os riscos inerentes a obsolescência do componente podem reduzir a sua probabilidade de se manter reutilizável.
Considerar os riscos torna- se especialmente importante nos casos em que o custo do desenvolvimento de um componente é amortizado em projetos realizados com grandes janelas de tempo, por exemplo, projetos com diferença de inicio de mais de doze meses.
Para a definição de quais riscos seriam incorporados ao modelo foi conduzida uma pesquisa na literatura acerca de riscos no desenvolvimento de componentes.
Abaixo são apresentadas breves descrições sobre os trabalhos estudados.
Classificou a falha no reuso de software (que pode- se considerar a manifestação de um risco) em sete grupos de falhas distintas e, como a parte de uma pesquisa conduzida, que o grupo de falha a mais importante, ou a mais presente, era que ninguém implementava para reuso.
Em 2001, entretanto, reagrupou os grupos de falhas em três categorias mais genéricas:
Candidato a reuso não procurados;
O candidato a reuso não pode ser reutilizado (grupos 2 a 4 de);
E candidato a reuso não encontrado (grupos de falha 5 a 7 de).
Baseado nestes três agrupamentos, uma conclusão diferente pode ser alcançada, isto é, os grupos de riscos mais importantes ou mais presentes são:
Que os candidatos a reuso não podem ser usados e os candidatos reusar não podem ser encontrados.
Como o modelo considera somente os riscos relevantes à obsolescência do componente, serão considerados os riscos do grupo &quot;os candidatos a reuso não podem ser reutilizados».
O Software Productivity Consortium (SPC) desenvolveu e publicou uma estratégia de adoção de reuso, como uma ferramenta para auxílio de implantação de processos de reuso de software.
Em este trabalho é apresentado um modelo de processo para criação de artefatos reutilizáveis destacando os riscos a serem considerados para cada atividade.
Em é apresentado um número de pontos que devem ser considerados antes da tomada de decisão a respeito de a implantação de um processo de reuso de software.
Estes pontos devem ser avaliados no contexto de atividades de gerência de risco.
Para, antes de criar um componente reutilizável, necessita- se compreender que o desenvolvimento de um artefato reutilizável representa um investimento.
Conseqüentemente, deve ser conduzido um processo de tomada de decisão para minimizar os riscos.
Para tal, é proposto um grupo de fatores a serem considerados no processo de tomada de decisão.
Em é apresentado um extenso trabalho sobre reuso de software.
Assim como os demais trabalhos citados, destaca uma série de riscos ligados ao desenvolvimento de artefatos reutilizáveis.
De o grupo de riscos, propostos por os autores, foram extraídos fatores ligados ao ciclo de vida do componente, e que consequentemente podem levar a não reutilização.
A seguir são apresentados os grupos de riscos ligados à obsolescência dos componentes levantados.
Manutenção: Risco relacionado à falta de manutenção no componente após a sua criação.
Desta forma, dificultando a correção de bugs e evolução do mesmo.
Documentação: Como componentes são artefatos caixa-preta, a documentação sobre o componente e suas interfaces é extremamente importante para facilitar o reuso do mesmo.
Mas existe o risco da documentação estar incompleta ou possivelmente não existir, desta forma dificultando o processo de reuso.
Performance: Componentes, assim como hardware, tendem a se tornarem menos performáticos com o passar do tempo.
Este risco está diretamente ligado à possibilidade do componente não ser reutilizado, pois a sua performance não atende mais as necessidades das aplicações que poderiam o reutilizar.
Obsolescência Funcional: O risco da obsolescência funcional está diretamente ligado aos serviços providos por um componente.
Por exemplo, se compararmos um componente para validação de número de cartão de crédito a um componente para cálculo de imposto de renda.
O componente de cálculo de imposto tende a se tornar obsoleto mais rapidamente, pois cobranças de impostos mudam mais frequentemente do que um algoritmo de validação de cartão de crédito.
Obsolescência Técnica: A obsolescência técnica visa abranger os riscos relacionados às tecnologias necessárias para reutilizar o componente, ou seja, tecnologias que de alguma forma provêm suporte ou ambiente para reuso e execução componente.
De entre essas tecnologias podemos citar sistema operacional, linguagem de programação, banco de dados, de entre outras.
De posse de um grupo fechado de riscos relacionados à obsolescência do componente, os mesmos foram validados frente a as propostas estudas.
A Tabela 2 apresenta o relacionamento dos riscos propostos por cada autor.
Com base nesse grupo de riscos, o modelo proposto poderá integrar fatores qualitativos as suas entradas.
De essa forma, podendo gerar resultados refinados quanto a a análise de retorno de investimento.
Existe um número considerável de métodos que são utilizados para avaliar projetos de investimento, variando desde a pura intuição do empresário aos mais sofisticados modelos matemáticos.
Todavia, nem todas essas técnicas são fundamentadas em bases conceitualmente corretas, e, naturalmente, as orientações decorrentes da abordagem de um dado problema através da aplicação de algumas de elas podem confundir o responsável por a decisão, induzindo- o ao erro.
A análise de investimento em reuso, no domínio da análise financeira corporativa, é uma área cujas preocupações não são atendidas diretamente por a engenharia de software.
Um ponto importante a ser levantado é que, no contexto de análise financeira corporativa, o investimento em reuso é somente uma alternativa para a empresa.
Em um contexto corporativo, a análise de investimento somente se refere à melhor forma de alocar os capitais e recursos humanos da empresa.
Partindo desse contexto, sempre existe uma alternativa à implantação de um programa de reuso, como por exemplo, investir capital equivalente no mercado financeiro, que provê uma taxa de retorno anual esperada.
Como investimentos no mercado financeiro são analisados em relação a períodos de tempo (e.
g o retorno esperado de um fundo de investimento em sete meses), investimentos em reuso devem ser analisados da mesma forma, para poder ser estabelecido um comparativo entre ambos.
O presente capítulo apresenta algumas técnicas de análise financeira.
Essas técnicas servirão como base para a criação do modelo de análise de viabilidade para desenvolvimento de componentes.
O método Payback determina o tempo necessário para recuperar os recursos investidos num projeto, como por exemplo, a criação de um componente reutilizável.
Quanto mais amplo for o horizonte de tempo considerado, maior será o grau de incerteza nas previsões.
De esse modo, propostas de investimento com menor prazo de retorno apresentam maior liquidez e, conseqüentemente, menor risco.
O cálculo do Payback é realizado da seguinte forma:
Se as entradas líquidas de caixa forem uniformes, bastará dividir o investimento inicial por as entradas anuais de caixa;
Quando as entradas anuais forem desiguais, estas deverão ser acumuladas até atingir o valor do investimento, apurando- se o prazo de retorno.
Em o contexto de desenvolvimento de componentes Payback pode ser visto como o número de reusos necessários para se recuperar investimento na criação do componente.
Em e, o Payback na criação de componentes é definido por:
Onde: N0:
Número de vezes que um componente deve ser reutilizado para ter seu custo pago;
E: Custo de se desenvolver um componente reutilizável;
E B:
Custo de se integrar um componente.
A idéia de Payback, ou recuperação de custos é naturalmente muito apelativa, mas para análises de investimento essa abordagem apresenta diversos problemas, como por exemplo:
A definição da data de retorno de investimento é em geral arbitrária e subjetiva;
Não são reconhecidas as entradas de caixa previstas para ocorrerem após a recuperação do investimento;
E O método não avalia adequadamente o valor do dinheiro no tempo.
O método Payback é valioso para comunicação da noção de valor agregado de um projeto.
Sua facilidade e natureza intuitiva facilitam a propagação dos benefícios do reuso para gerentes não acostumados as estimativas de custo.
Ou seja, Payback é indicado para demonstração dos resultados de investimentos feitos, mas não é adequado para a própria análise de investimento.
O método do Valor presente Líquido (VPL), também conhecido por a terminologia Método do Valor Atual Líquido, caracteriza- se, essencialmente, por a transferência para o instante presente de todas as variações de caixa esperadas, descontada a taxa mínima de atratividade (apresentada na Seção 4.2.1).
Em outras palavras, seria o transporte para a data zero de um diagrama de fluxos de caixa, de todos os recebimentos e desembolsos esperados, descontada a taxa de juros considerada.
Abaixo segue a equação para o cálculo do VPL.
FC t VPL $= t $= 1 Onde:
FCt ­ valor presente das entradas de caixa;
T ­ período de ocorrência de fluxo de caixa;
N ­ total de períodos;
K ­ taxa mínima de atratividade;
E II ­ Investimento Inicial.
Um valor presente líquido positivo significa que o valor de todos os fluxos de caixa positivos é o maior que o correspondente às variações negativas de caixa.
De essa forma, um projeto cujo valor presente líquido seja positivo, será economicamente interessante para a taxa de atratividade considerada, tornando- se tanto mais atrativo quanto maior for o seu valor presente líquido.
Essa afirmação leva a conclusão de que quando se compara alternativas, aquela de maior valor presente líquido deve ser a preferida sob o ponto de vista econômico.
Um valor presente líquido nulo significa que o projeto, embora a taxa de desconto considerada, não é desinteressante de um ponto de vista econômico;
Produz um retorno de valor apenas igual ao custo do capital, deixando de ser compensadora a sua implementação.
Valor presente líquido negativo indica que o projeto deve ser rejeitado, por o fato de que os benefícios financeiros prospectivos não serem suficientes para assegurar sequer a recuperação do investimento realizado.
A principal característica do método de Valor Presente Líquido é o reconhecimento da variação do dinheiro no tempo (taxa mínima de atratividade).
A questão de definir qual taxa a ser empregada pode ser respondida por meio de o seguinte exemplo (adaptado de):
Suponha- se que uma pessoa se encontre diante de uma oportunidade de investimento, para cuja concretização seja necessário tomar dinheiro emprestado de certo banco.
Os juros pagos por o empréstimo representarão, sob o ponto de vista do investidor, um ônus, o que deve ser entendido como o custo da utilização deste capital.
Naturalmente, a pessoa somente estará disposta a investir se a expectativa de ganhos, já deduzido o valor do investimento, for superior ao custo do capital.
Em o caso em pauta, se o montante de juros pagos corresponderem a uma taxa de 40% ao ano, o custo do capital será expresso por este valor, e o investimento só será interessante se a taxa de rendimentos produzidos for superior a esse.
Tal fato identifica o custo do capital como sendo a rentabilidade mínima aceitável para qualquer aplicação, caracterizando então, uma base para aceitação ou rejeição de propostas de investimento.
Essa taxa de juros é usualmente denominada como taxa mínima de atratividade.
Em é apresentado um comparativo entre abordagens para análise de investimento em reuso, de entre elas VPL e Payback.
Através da análise das características de cada método de análise de investimento é estabelecido que, para avaliação de investimento em reuso, o método VPL apresenta características mais adequadas e maior precisão na análise de retorno de investimento.
Partindo das conclusões de, foi estabelecido que o modelo de análise de viabilidade de componentização de software deveria seguir as características dos métodos de VPL, considerando os fluxos de caixa em todo o ciclo de vida do componente.
A incorporação de VPL ao modelo proposto é esclarecida na Seção 6.2.
A presente seção visa apresentar propostas encontradas na literatura de modelos de análise de retorno de investimento para criação de componentes.
Após a apresentação do modelo proposto, retornaremos a esses trabalhos para ser estabelecida uma comparação entre essas propostas e o modelo proposto neste trabalho, dessa forma, destacando as contribuições acrescentadas por o mesmo.
Em a Seção 3.1.2 foram apresentadas as métricas do trabalho de para avaliação dos custos de desenvolvimento e reutilização de componentes.
Em esta seção, voltamos a este trabalho, agora para apresentar as métricas propostas por o autor para análise de retorno de investimento em projetos com desenvolvimento baseado em componentes.
Em, investimentos em DBC podem ser vistos de duas formas:
Reuso ao Nível de Projeto:
O reuso ao nível de projeto é caracterizado por a incorporação de preocupações relativas ao custo de desenvolvimento de componentes reutilizáveis, e como esse investimento será retornado com base em seus futuros reusos.
De essa forma, o reuso a nível de projeto abrange o mesmo universo referente a o modelo proposto neste trabalho.
Reuso ao Nível Corporativo:
O reuso a nível corporativo além de incorporar os custos/ benefícios de reusos ao nível de projeto, também é composto por os investimentos que uma organização deve realizar inicialmente para implantar um programa de reuso.
De entre esses custos podemos citar:
Custo de aquisição de um repositório de componentes, custo de promover o reuso dentro de a empresa, custo de mudança dos seus atuais processos, de entre outros.
Como somente o Reuso ao Nível de Projeto apresenta o mesmo objetivo do modelo proposto, serão apresentadas exclusivamente as métricas relativas a este.
Inicialmente, apresenta o cálculo de retorno de investimento como apresentado na Equação 18.
Onde: Roi:
Retorno de investimento CPR:
Custo poupado por o reuso no primeiro projeto CPRD:
Custo poupado por o reuso nos demais reusos CDC:
Custo de desenvolvimento do componente Custo poupado por o reuso já foi previamente definido na Equação 10.
O custo poupado por o reuso nos demais reusos também é baseado na Equação 10.
O custo de desenvolvimento do componente deve ser realizado como previamente definido na Equação 11.
Em é apresentado um modelo para análise de custos e benefícios referentes ao reuso de componentes de software.
Esse trabalho destaca- se por propor como traduzir a natureza qualitativa dos riscos para uma forma quantitativa, desta forma, integrando o risco no desenvolvimento do componente as métricas.
A função de cálculo de retorno de investimento proposta em é apresentada na Equação 19.
N i $= 1 (CNRi -- CRCi) × PRi] CDC+ CER Onde:
Roi: Retorno de investimento CPR:
Custo de não reutilização o componente na aplicação i CPRD:
Custo de reutilização o componente na aplicação i CDC:
Custo de desenvolvimento do componente CER:
Custos extras para reuso.
Esta variável compreende os custos adicionais que a organização terá para implantar um programa de reuso PR:
Probabilidade de reuso do componente na aplicação i Apesar de propor uma forma de incorporar questões referentes a risco à análise de investimento, fica faltante na proposta a definição de um conjunto de possíveis riscos a serem considerados.
Embora o reuso de componentes possa apresentar inúmeras vantagens, são necessários componentes à disposição para poder se compor uma aplicação DBC.
É consenso na literatura que o desenvolvimento de componentes reutilizáveis é mais custoso que o desenvolvimento de software sem enfocar em reuso.
Esse custo extra enfatiza a importância de saber quando um componente irá retornar o investimento feito no seu desenvolvimento.
O presente trabalho apresenta uma proposta de modelo de análise de viabilidade que avalia quando é indicado o desenvolvimento de componentes reutilizáveis.
Este modelo irá servir como ferramenta no auxílio da tomada de decisão de quando é financeiramente interessante para uma empresa a criação de um componente reutilizável.
O modelo de análise de viabilidade apresentado neste capítulo é baseado em grande parte na base teórica anteriormente apresentada.
Partindo deste referencial teórico o modelo foi construído de forma incremental até a presente versão.
A seguir são descritas as etapas percorridas na construção do mesmo.
Inicialmente, para a criação do modelo de análise de viabilidade, foram identificados os custos envolvidos no desenvolvimento de componentes e os fluxos de caixa dos projetos que reutilizam e não reutilizam componentes.
Por fim, foi analisado como esses custos poderiam ser combinados de forma que fosse possível uma análise quantitativa do retorno sobre o investimento.
O modelo de análise de viabilidade mapeia três fontes de custos envolvidas no processo de desenvolvimento e reuso de um componente.
Essas fontes são combinadas de forma a poder refletir o beneficio (redução de custos), em termos monetários, do reuso de componentes.
As fontes de custo citadas são:
Custo de desenvolver um componente reutilizável;
Custo do reuso deste componente:
Dada uma aplicação qualquer, qual o custo de se reutilizar este componente nesta aplicação;
E Custo de não reutilizar este componente:
Dada uma aplicação qualquer, qual o custo de desenvolvimento das mesmas funcionalidades contidas no componente de uma forma tradicional, ou seja, sem reuso.
A Figura 6 ilustra dois cenários hipotéticos de desenvolvimento de software, um tradicional (sem reuso de componentes) e outro com reuso de um componente a ser desenvolvido.
Pode ser observado que o desenvolvimento com componentes inicia com um custo extremamente elevado, pois para o primeiro reuso estão somados os custos de desenvolvimento e da primeira reutilização do componente.
Conforme o número de reusos aumenta, o desenvolvimento com componentes começa a ser viável, pois somente é necessário integrar o componente previamente desenvolvido.
Em contrapartida, o custo de desenvolver sem componentes apresenta um crescimento linear, rentável até a segunda aplicação, após isto, o desenvolvimento com componentes se torna uma opção economicamente mais atrativa.
A identificação do momento em que a reutilização de componentes se torna rentável é vital para a tomada de decisão de quando componentizar.
Esse retorno de investimento é visto na Figura 6 no cruzamento das linhas de reuso de componentes e sem reuso.
Após a intersecção dessas linhas, a opção de reutilização de componentes começa a se tornar rentável.
Com base nesta combinação de custos, o modelo de análise de viabilidade foi criado.
Inicialmente o modelo apresentava uma estrutura de Payback, posteriormente foi evoluído para VPL (baseado na técnica apresentada na seção 4.2) e ao final foram incorporadas características qualitativas visando permitir uma avaliação mais apurada dos cenários de reuso.
Abaixo será apresentada a evolução do modelo e suas respectivas métricas.
Com base na análise de investimento Payback, abordada na seção 4.1, uma primeira versão do modelo de análise de viabilidade foi elaborada.
O relacionamento dos três custos anteriormente citados forma a base da análise de Payback.
Esse relacionamento é expresso através da Equação 20.
Ela cruza os custos de desenvolvimento com componentes, sem componentes e produção do artefato reutilizável.
O número de aplicações (NRA) foi incluído à equação para que fosse possível a avaliação progressiva do retorno de investimento, conforme o número de projetos que reutilizam o componente.
NRA CPR $= (CNR -- CRC) -- CDC i $= 1 Onde:
CPR: Custo Poupado por o reuso CNR:
Custo de não reutilizar o componente NRA:
Número de aplicações CDC:
Custo de desenvolvimento do componente CRC:
Custo de reuso do componente O valor de CPR equivale ao prejuízo ou lucro em unidades monetárias do reuso.
Para o cálculo das variáveis CNR, CRC e CDC foram utilizadas métricas baseadas nas apresentadas nos trabalhos citados na Seção 3.1.
Algumas métricas requerem o uso de alguma técnica de medição de tamanho de software, como por exemplo, Use Case Points ou Function Points.
O modelo proposto não apresenta nenhuma limitação referente a a qual medida de software será utilizada, tornando assim esta opção de livre escolha do usuário do modelo.
Em a seqüência seguem as definições das métricas utilizadas para o cálculo de cada uma destas variáveis.
O esforço requerido para se escrever um componente reutilizável é consideravelmente maior do que o de se desenvolver exatamente as mesmas funcionalidades numa abordagem tradicional.
O esforço adicional vem da necessidade de se desenvolver um componente com funcionalidades &quot;genéricas», que possam atender as necessidades de diversas aplicações, e demais esforços requeridos por o modelo de componentes utilizado.
A o final desta fase o componente estará implementado e encapsulado.
O custo de desenvolvimento de componentes visa contabilizar todos os gastos referentes à criação do componente.
Para o cálculo desta variável de custo, foi definida uma função adaptada da proposta de.
A adaptação realizada foi a tradução do resultado da equação de esforço para financeiro.
Em a Equação 21, é utilizada variável EE, que reflete o esforço extra despendido para o desenvolvimento de um componente reutilizável.
Em é proposto o valor de 1.5 e em 1.55.
O ideal é refinar o valor desta variável através do histórico de desenvolvimento de componentes na empresa.
Caso a empresa não possua este dado histórico é aconselhado o uso do valor 1.55, por ter sido levantado a partir de projetos mais recentes.
Onde: CDC:
Custo de desenvolvimento do componente TF:
Tamanho (em alguma unidade de medida de software) das funcionalidades do componente EE:
Esforço extra.
Esta variável representa o esforço excedente de se criar componentes reutilizáveis.
Seu valor pode ser definido com dados históricos da empresa.
CD: Custo de desenvolvimento de uma unidade de medida de software.
Este dado deve ser obtido através do histórico da empresa.
O desenvolvimento de software com componentes apresenta um conjunto de atividades relacionadas que levam à criação de uma aplicação através da composição de componentes pré-existentes.
Toma- se como base que o componente já foi selecionado para ser integrado à aplicação alvo, por isso, as atividades são consideradas a partir de a sua integração.
A Equação 22 representa a composição dos custos destas atividades.
Onde: CRC:
Custo de reuso do componente TF:
Tamanho (em alguma unidade de medida de software) das funcionalidades do componente TAC:
Taxa de modificações do componente CD:
Custo de desenvolvimento de uma unidade de medida de software.
Este dado deve ser obtido através do histórico da empresa.
A Equação 22 foi adaptada a partir de as equações 2, 3 e 4, apresentadas em.
A adaptação realizada foi a unificação das três equações numa, dessa forma adequando à natureza do modelo proposto que considera somente um componente por análise.
Assim como apresentado anteriormente, o custo de reuso do componente irá variar conforme a quantidade de adaptações necessárias para reutilizar o componente (variável TAC da Equação 22).
De forma sucinta pode- se citar que os três possíveis cenários são:
Componentes que não necessitem ser adaptados para serem reutilizados irão possuir TAC igual a 0.2.
Componentes que necessitem ser adaptados em 25% ou menos das suas funcionalidades apresentam TAC igual a 0.4.
Componentes que necessitem ser adaptados em mais de 25% das suas funcionalidades apresentam TAC igual a 0.9.
A Equação 22 tem como resultado o custo de se reutilizar o componente numa dada aplicação.
O valor do TAC pode ser variado para se obter diversos cenários de reuso do componente.
A variável CNR visa mapear os custos referentes ao desenvolvimento das mesmas funcionalidades do componente, só que seguindo uma abordagem tradicional, ou seja, sem reuso de componentes.
Sua função (Equação 23) foi baseada no processo de desenvolvimento de software a partir de a fase de implementação e reflete os mesmos princípios da Equação 13.
Onde: CNR:
Custo de não reutilizar o componente CD:
Custo de Desenvolvimento Cm:
Custo de Manutenção A função de cálculo de custos referentes ao desenvolvimento é consideravelmente simples.
É utilizado o tamanho das funcionalidades a serem implementadas e o custo de mão de obra.
Essa função foi adaptada de, apresentada neste trabalho na Equação 8.
A Equação 24 apresenta esta função.
A adaptação realizada foi a tradução do resultado da equação de esforço para financeiro.
Onde: CD:
Custo de desenvolvimento.
TF: Tamanho das funcionalidades a serem implementadas.
CD: Custo de desenvolvimento de uma unidade de medida de software.
Este dado deve ser obtido através do histórico da empresa O custo de manutenção de uma aplicação que reutiliza componentes é mais baixo do que o de uma aplicação tradicional.
Isso é explicado por o fato de que componentes são artefatos de software de maior maturidade, logo possuindo menos erros.
Para o modelo de análise de viabilidade proposto usamos a métrica apresentada em para avaliar a redução do custo de manutenção.
O custo de manutenção da aplicação é calculado basicamente através do uso de dados históricos da empresa.
A Equação 25 reflete o custo referente a a manutenção da porção da aplicação em que o componente se aplicaria.
Onde: Cm:
Custo de manutenção TF:
Tamanho (em alguma unidade de medida de software) das funcionalidades.
Te: Taxa de erros por unidade de medida de software.
Este dado deve ser obtido através do histórico da empresa.
CMC: Custo de manutenção de código, ou seja, custo médio de conserto de um bug.
Este dado deve ser obtido através do histórico da empresa Para ilustrar de forma mais clara a aplicação das métricas será apresentado um exemplo de análise de retorno de investimento utilizando o modelo como apresentado até então.
Esse mesmo exemplo também será utilizado em seções posteriores do presente trabalho conforme refinamentos no modelo forem apresentados.
Consideremos que uma empresa deseja aumentar o seu repositório de componentes.
Para tal foi conduzido um processo de engenharia de domínio que resultou na identificação de três possíveis componentes reutilizáveis.
Não estando certo do retorno de investimento relacionado a esses componentes o engenheiro de software da empresa decide executar uma análise de retorno de investimento.
O primeiro passo tomado por o engenheiro é o de obter uma estimativa do tamanho dos componentes identificados.
De posse dos artefatos gerados durante a engenharia de domínio e dos seus conhecimentos em Use Case Points o engenheiro levanta o tamanho dos componentes.
O tamanho estimado para cada componente é apresentado na Tabela 3.
De posse do modelo de análise de viabilidade de componentização de software o engenheiro começa a levantar as demais entradas do modelo.
Baseado em parte nos dados do histórico de projetos da empresa, parte nas sugestões de índices do modelo o engenheiro de software alimenta o modelo.
A Tabela 4 apresenta as demais entradas do modelo.
O gerente ao aplicar as métricas definiu que seria realizado um reuso por ano, durante três anos.
As taxas de adaptação do Componente A seriam 10% no primeiro ano e 40% nos demais anos;
O Componente B nunca precisaria ser adaptado;
E o Componente C teria taxa de adaptação de 0% no primeiro ano, 20% no segundo ano e no terceiro 50%.
A Tabela 5 apresenta os passos conduzidos por o engenheiro de software para o cálculo do payback do componente.
A Tabela 6 apresenta um quadro geral dos paybacks obtidos para os três componentes propostos.
Tabela 6.
Análise de retorno de investimento com Payback Investimento inicial Ano 1 2 3 Payback Componente A R$ 4650 Rendimento por reuso R$ 2250 R$ 750 Não retornado em 3 anos Componente B R$ 1550 Rendimento por reuso R$ 950 R$ 950 2 Anos Componente C R$ 3875 Rendimento por reuso R$ 2375 R$ 1875 R$ 625 2 Anos Baseado na análise Payback provida por o modelo o engenheiro de software chega a conclusão que os componentes B e C são recomendados a serem de fatos componentizados, uma vez que ambos pagam o custo do seu desenvolvimento em dois anos.&amp;&amp;&amp;
Como a idéia de Payback está mais ligada a uma data de Roi e não propriamente a valores monetários, ela não fornece uma base firme para que o engenheiro de software possa escolher somente um dos componentes para ser desenvolvido.
Quando as instâncias de reuso do componente ocorrem em janelas de tempo diferentes, os fluxos de caixa referentes devem ser tratados financeiramente de forma diferenciada.
Essa característica é incorporada ao modelo através do uso da técnica de Valor Presente Líquido (VPL), abordagem apresentada na seção 4.2.
Para os custos anteriormente apresentados o VPL se aplica a duas variáveis:
O CNR (custo de não reutilizar o componente) e o CRC (custo de reuso do componente).
O VPL é aplicado a estas variáveis, pois os fluxos de caixa referentes a elas se dão em diferentes momentos do tempo, logo sendo afetadas por a desvalorização monetária implícita.
A aplicação do VPL ao modelo é apresentada na Equação 26.
NRA CNR -- CRC -- CDC CPR $= ano i $= 1 Onde:
CPR: Custo Poupado por o reuso CNR:
Custo de não reutilizar o componente NRA:
Número de aplicações CDC:
Custo de desenvolvimento do componente CRC:
Custo de reuso do componente TMA:
Taxa mínima de atratividade ano:
Ano de reuso do componente.
Partindo do pressuposto que o ano de criação do componente é o ano zero.
A variável TMA deve seguir as mesmas definições apresentadas na Seção 4.2 para taxas mínimas de atratividade.
A variável ano reflete o ano em que um dado projeto reutiliza o componente que está sendo avaliado, sendo que os anos devem começar a ser contados a partir de 1, ou seja, uma aplicação que reutiliza um componente no mesmo ano em que ele foi gerado tem a variável ano igual a 1.
Em a presente versão do modelo de análise de viabilidade o engenheiro de software já pode conduzir uma análise quantitativa do retorno de investimento, diferentemente da versão Payback do modelo, desta forma podendo diferenciar, por exemplo, retornos de investimento de componentes com o mesmo Payback.
Outra melhoria incorporada ao modelo é a análise utilizando valores adaptados a uma janela de tempo presente, desta forma trazendo mais precisão aos resultados fornecidos por o modelo, aumentado à confiabilidade do mesmo para a tomada de decisão.
O exemplo apresentado na Seção 6.1.4 será novamente utilizado, desta vez para demonstrar a utilização do modelo integrando a técnica de VPL.
Para aplicar a nova versão do modelo de análise de viabilidade de componentização de software o engenheiro de software deve estabelecer a taxa mínima de atratividade.
Para o contexto do nosso exemplo será utilizada uma taxa de 10% ao ano, todos os demais dados de entrada do modelo serão utilizados como apresentados na Seção 6.1.4.
Partindo dos cálculos apresentados da Tabela 5, o engenheiro de software aplica a técnica de valor presente líquido.
De essa forma, somente será recalculado o custo poupado por o reuso (CPR) como apresentado abaixo.
Fazendo uso da nova versão do modelo o retorno de investimento pode ser viso como fluxos de entrada e saída de caixa.
Os fluxos de caixa para desenvolvimento de componentes iniciam com um fluxo de saída, que é o investimento inicial para criação do componente.
Gradualmente, a cada reuso, ocorrem fluxos de entrada, que são decorrentes do custo poupado por a integração do componente.
Se compararmos os rendimentos por reuso apresentados na Tabela 6, pode- se notar o decréscimo nos rendimento dos reusos, acarretados por a aplicação da taxa mínima de atratividade.
Esse decréscimo refina os valores para comparação de análise de investimento.
Para avaliar as alternativas de reuso nesta versão do modelo, devemos avaliar o fluxo de caixa final.
No caso de o exemplo proposto, deve- se analisar o fluxo de caixa do ano três.
Novamente os componentes B e C conseguem retornar o investimento realizado nas suas criações.
Em a versão VPL do modelo podemos diferenciar os benefícios de criação do componente B e C em termos financeiros.
Como o componente B apresenta maior fluxo de caixa final, caso a empresa somente pudesse criar um componente nesse momento, o mais indicado seria o B por gerar maiores lucros.
Em a Seção 3.2 foi apresentado um grupo de riscos encontrados na literatura referentes à obsolescência do componente de software.
O modelo proposto incorporou a sua estrutura todos os riscos levantados nessa seção, para, desta forma, prover uma maior liberdade ao engenheiro de software na criação de cenários que melhor se encaixem a sua realidade.
Assim como na proposta de, o modelo vai integrar os riscos como uma série de perguntas que o engenheiro deve responder no momento da tomada de decisão sobre a criação de um componente.
Abaixo são apresentadas as perguntas a serem respondidas para cada um dos riscos levantados:
Manutenção: Qual a probabilidade de ainda ser provida manutenção ao componente na aplicação X?
Documentação: Qual a probabilidade da documentação do componente suprir as necessidades de reuso na aplicação X?
Performance: Qual a probabilidade do componente ainda suprir as necessidades de performance das aplicações na aplicação X?
Obsolescência Funcional: Qual a probabilidade das funcionalidades providas no componente ainda serem adequadas na aplicação X?
Obsolescência Técnica: Qual a probabilidade da arquitetura de a qual o componente depende ainda será utilizada na aplicação X?
A próxima sessão apresentada como os riscos identificados foram incorporados de forma quantitativa ao conjunto de métricas do modelo.
Em é levantada a importância de se incorporar os riscos de um componente não vir a ser reutilizado em futuras aplicações devido a incertezas decorrentes da passagem do tempo.
Em esse mesmo trabalho é apresentado um conjunto de métricas para se determinar o retorno de investimento de criação de componentes.
As diferenças desse trabalho frente a o aqui apresentado são que nas métricas de é necessário saber se antemão os dados de todas as aplicações que irão reutilizar o componente;
Também não são definidos quais os riscos inerentes ao desenvolvimento de componentes.
Apesar se não apresentar quais são os riscos, sugere como incorporar- los às métricas.
Essa sugestão foi incorporada ao conjunto de métricas apresentado neste trabalho, e é representada por a variável PR na Equação 27.
NRA CNR -- CRC CPR $= ano × PRi -- CDC i $= 1 Onde:
CPR: Custo Poupado por o reuso CNR:
Custo de não reutilizar o componente NRA:
Número de aplicações CDC:
Custo de desenvolvimento do componente CRC:
Custo de reuso do componente TMA:
Taxa mínima de atratividade ano:
Ano de reuso do componente.
Partindo do pressuposto que o ano de criação do componente é o ano zero.
PR: Probabilidade de reutilização do componente na aplicação i.
De posse das probabilidades de reuso do componente A, o engenheiro de software calcula o retorno de investimento como definido na Equação 27.
Abaixo é apresentado o cálculo realizado por o engenheiro.
A seguir o engenheiro de software realiza os mesmos cálculos para os demais componentes.
A o aplicar o modelo com as variáveis qualitativas o engenheiro de software obtém um resultado diferente das análises previamente realizadas.
Em essa nova análise, o único componente que foi capaz de retornar o investimento realizado na sua criação foi o componente B. O excesso de riscos e incertezas relacionados ao componente C fez o seu retorno de investimento decair a um patamar negativo, dessa forma, se tornando um investimento que acarretaria prejuízos a empresa.
Os dados obtidos através da nova aplicação do modelo são apresentados na Tabela 13.
Para auxiliar a aplicação do modelo, bem como para facilitar a criação e comparação de diversos cenários, foi desenvolvida uma ferramenta aderente as métricas propostas no modelo.
Engenheiros de software que fizerem uso da ferramenta poderão criar e comparar diversos cenários de desenvolvimento de componentes.
A geração de cenários é especialmente utilizada para comparação de instâncias de reuso complexas, onde existe alto grau de incerteza nas entradas fornecidas ao modelo.
Para utilizar a ferramenta o engenheiro de software deve inicialmente alimentar o software com as entradas do modelo.
As entradas estão divididas na forma de abas na ferramenta, desta forma, facilitando o agrupamento de dados relacionados.
Abaixo são apresentados os grupos de entradas requeridas por a aplicação.
Dados do Componente:
Esta aba agrupa os dados necessários sobre o componente a ser desenvolvido.
Como o modelo tem como objetivo ser utilizado na prospecção de possíveis artefatos reutilizáveis, poucos são os dados disponíveis sobre o componente.
A Figura 8 apresenta esse grupo de dados na ferramenta.
O Tamanho das funcionalidades:
A única informação do componente requerida por o modelo é o tamanho de suas funcionalidades.
Esse tamanho pode ser fornecido em qualquer unidade de medida de software.
Dados das Aplicações:
A aba de Dados das Aplicações é onde devem ser informados os possíveis reusos de um dado componente, apresentada na Figura 9.
Essa é a aba onde o engenheiro de software poderá estabelecer diversos cenários de reuso do componente utilizando principalmente os fatores qualitativos anteriormente estabelecidos.
O Ano de Reuso:
Campo que contém o ano de reuso do componente.
Caso o componente seja reutilizado no mesmo ano de sua criação deve ser colocado Ano de Reuso com valor 1, sendo incrementado numa unidade a cada ano decorrente.
O Taxa de Adaptação:
A variável Taxa de Adaptação deve ser estabelecida conforme o percentual das funcionalidades do componente que tiveram de ser adaptadas para reutilizar o mesmo.
Manutenção. O Performance:
A variável Performance se refere à probabilidade da performance das funcionalidade providas por o componente ainda atenderem as necessidades da aplicação que o reutiliza num dado ano.
Manutenção. O Obsolescência Funcional:
A variável Obsolescência Funcional se refere probabilidade do componente ainda prover serviços que funcionalmente atendam as necessidades da aplicação.
Peso da Manutenção.
O Obsolescência Técnica:
A variável Obsolescência Técnica se refere à probabilidade do componente ainda possuir suporte por as plataformas e tecnologias de o qual o mesmo depende.
Dados Gerais: A aba de dados gerais agrupa os dados referentes à organização que faz uso do modelo, parte dos dados necessários devem ser extraídos do histórico de projetos passados da empresa.
A aba de Dados Gerais é apresentada na Figura 10.
O Custo de Desenvolvimento de uma Unidade de Medida:
Como o próprio nome já diz, essa variável deve ser alimentada com o custo de desenvolvimento de uma unidade de medida, por exemplo, uma dada empresa tem o custo de desenvolvimento de 100 reais por ponto de função.
Partindo do modelo descrito anteriormente, foi realizada uma avaliação de campo para observar a importância e validade da dada proposta num ambiente real de desenvolvimento de software.
A avaliação de campo procurou observar a percepção dos especialistas das empresas, quanto a a adequação do modelo de análise de viabilidade de componentização de software às reais necessidades da empresa.
O instrumento de coleta de dados utilizado foi um questionário com questões fechadas que dependendo da resposta poderiam ser justificadas (Anexo I).
O cenário ideal de avaliação do modelo seria aplicar- lo repetidamente em diversos projetos e componentes, mas devido a limitações de tempo, optou- se por coletar a opinião de profissionais em diferentes empresas.
Sendo assim, foi possível capturar o sentimento dos mesmos quanto a a validade do uso do modelo na prospecção de componentes.
A avaliação de campo foi desenvolvida nas unidades de desenvolvimento de software de duas organizações, uma de grande e outra de médio porte.
A de médio porte se caracteriza por desenvolver sistemas encomendados por terceiros, enquanto a de grande porte faz parte de uma holding multinacional, cujo objetivo é desenvolver os sistemas requeridos por as demais empresas do grupo.
Ambas as empresas estão em fase de implantação de programas de reuso de componentes de software, assim sendo, sujeitas a tomada de decisão de criação de componentes de software.
Inicialmente foram realizados contatos com as empresas visando obter permissão para realização da pesquisa de campo.
A seguir, foi elaborado o instrumento de coleta de dados e decidido quem seriam os respondentes.
O questionário foi submetido a uma validação de face e conteúdo.
Essa foi realizada por dois professores da PUCRS (Pontifícia Universidade Católica do Rio Grande do Sul), ambos doutores em Ciência da Computação, os quais fizeram críticas e sugestões ao questionário possibilitando seu refinamento.
A seguir, o questionário foi submetido a um préteste por dois respondentes, os quais não fizeram parte da análise dos dados, visando descobrir erros, eliminar dúvidas e ambigüidades nas questões do questionário.
Assim, o questionário foi aplicado a profissionais ligados ao programa de reuso juntamente com um formulário de avaliação.
Os resultados do pré-teste permitiram optar por formulações mais apropriadas das questões para o objetivo do estudo.
Após ajustado o questionário com os resultados do pré-teste, este foi aplicado aos respondentes definidos.
Para que os entrevistados tomassem conhecimento do modelo proposto e pudessem responder ao questionário, foi apresentada a eles a ferramenta desenvolvida para aplicação do modelo.
Permitindo assim, que os respondentes criassem diversos cenários de reuso e tomassem conhecimento do funcionamento do modelo proposto.
Por fim, os questionários, devidamente respondidos, foram recolhidos para análise e obtenção dos resultados.
Como o objetivo da aplicação do questionário era o de capturar as impressões de especialistas sobre a confiança no modelo para auxílio à tomada de decisão, foram selecionados profissionais diretamente relacionados às iniciativas de reuso de componentes das empresas.
Foram selecionados dois profissionais de cada empresa para responderem o questionário, de entre eles dois gerentes (um com titulação de Especialista e outro Doutor) e dois projetistas (ambos com titulação de Mestre).
Para avaliação do modelo de análise de viabilidade de desenvolvimento de componentes proposto foi aplicado a um grupo de profissionais, da iniciativa privada, ligados a programas de reuso, o questionário apresentado no Apêndice I. Para cada uma das questões presentes no questionário serão apresentadas as respostas e observações levantadas por os respondentes, seguidas de ponderações sobre as colocações apresentadas.
Quando perguntado aos respondentes &quot;O modelo de análise de viabilidade de componentes auxilia na decisão de componentização de software?»
as respostas obtidas foram as seguintes:
Para 25% dos respondentes o modelo proposto auxilia na decisão de componentização de software.
Para 75% dos respondentes o modelo auxilia parcialmente.
Abaixo são apresentadas as justificativas colocadas como motivo para que o modelo não tenha auxiliado integralmente no processo de tomada de decisão.
O Para um dos respondentes o modelo não se adere integralmente ao modelo de negócios da empresa, uma vez que a empresa desenvolve software para terceiros, dessa forma, dificultando a criação de cenários de reuso do componente.
Para empresas com este perfil, certamente a tarefa de previsão de reuso é dificultada.
No entanto, componentes de infraestrutura, e componentes horizontais em geral, podem ser facilmente analisados no modelo, devido a a larga aplicabilidade de suas funcionalidades, como por exemplo, um componente de pool de conexão para banco de dados.
Posteriormente foi perguntado aos respondentes &quot;Você julga que a possibilidade de geração de diferentes cenários através da parametrização das taxas de adaptabilidade ajuda na análise de viabilidade para criação de componentes?».
Abaixo é apresentado o retorno obtido.
Para 75% dos respondentes a geração de diferentes cenários através da parametrização das taxas de adaptabilidade pode ajudar na análise de viabilidade para criação de componentes.
Para 25% dos respondentes o modelo auxilia parcialmente.
O entrevistado coloca que os componentes desenvolvidos por a empresa em que trabalha são modificados a cada nova necessidade de uma aplicação que o reutiliza, ganhando uma nova versão.
Essa prática é desaconselhável para componentes de software, pois incrementar o componente a cada nova necessidade, pode incorporar ao mesmo funcionalidades não compartilhadas por outras aplicações.
De essa forma, descaracterizando a coesão do componente, possivelmente incrementando aumentando ao sua risco complexidade de e geração incompatibilidades entre o componente e outras aplicações que o tenham reutilizado previamente.
Quando perguntado &quot;Você julga que a possibilidade de geração de diferentes cenários através da distribuição de custos em diferentes projetos ajuda na análise de viabilidade para criação de componentes?»
o resultado obtido foi o seguinte:
Para 100% dos respondentes a possibilidade de geração de diferentes cenários através da distribuição de custos em diferentes projetos ajuda na análise de viabilidade para criação de componentes.
A seguir, foi perguntado aos respondentes &quot;Você julga que as variáveis de entrada do modelo são suficientes para estipular custos no desenvolvimento e reuso de componentes?»
Abaixo é apresentado o retorno obtido.
Para 25% dos respondentes as variáveis quantitativas de entrada do modelo são suficientes para estipular custos no desenvolvimento e reuso de componentes.
Para 75% dos respondentes as variáveis quantitativas de entrada do modelo atendem parcialmente a tarefa de estipular custos no desenvolvimento e reuso de componentes.
A seguir são apresentadas as justificativas colocadas por os respondentes.
Após a contabilização e análise das respostas dos questionários pode- se verificar que o modelo proposto auxiliou na avaliação de cenários de desenvolvimento de componentes propostos por os entrevistados.
O modelo não sofreu avaliações negativas quanto a sua aplicabilidade e auxílio à tomada de decisão.
As observações colocadas por os entrevistados que não estavam fora de o contexto do modelo proposto foram integradas ao mesmo.
Os resultados obtidos através da aplicação do questionário possibilitaram a avaliação e evolução do modelo proposto.
Desenvolver software com qualidade e de forma produtiva são preocupações evidentes nas organizações de desenvolvimento de software atuais.
O DBC surge como uma abordagem interessante, pois permite desenvolver sistemas de software através de componentes previamente desenvolvidos para o reuso.
De entre as vantagens oferecidas, inclui a melhoria no gerenciamento da complexidade do sistema, o aumento da produtividade, melhora na qualidade, um maior grau de consistência e um alto índice de usabilidade.
Porém para usufruir de tais vantagens é necessária uma sistemática abordagem para DBC em nível de processos e tecnologia, pois DBC ainda apresenta desafios.
De entre os desafios citados por o autor, inclui- se a necessidade de criação de componentes reutilizáveis que possam ser largamente utilizados, podendo assim trazer benefícios econômicos para a empresa.
Em esse trabalho foi realizado um levantamento bibliográfico sobre processos e métricas para desenvolvimento baseado em componentes.
Com base nesse estudo pode- se verificar a carência na literatura de modelos para análise de retorno de investimento para desenvolvimento de componentes, em particular modelos que combinassem fatores quantitativos e qualitativos.
Em esse contexto, o presente trabalho propõe um modelo de análise de viabilidade para criação de componentes reutilizáveis.
O modelo proposto une fatores quantitativos e qualitativos para possibilitar a geração de cenários riscos sobre o retorno de investimento no desenvolvimento de componentes.
Juntamente com o modelo foi desenvolvida uma ferramenta para auxiliar à aplicação do modelo.
Para facilitar a comparação do modelo proposto frente a as demais propostas, apresentadas nas seções 7.1 e 7.2, foi criada a Tabela 14, que tem como objetivo comparar um conjunto de características frente a as três abordagens.
Se compararmos o modelo proposto ao apresentado em, iremos verificar que o de não incorpora quaisquer questões referentes a riscos no seu conjunto de métricas.
Outra deficiência desse modelo é a subjetividade de algumas de suas métricas e o uso exclusivo de número de linhas de código como unidade de medida de software.
Se comparado à proposta de, o modelo proposto evolui o conceito de risco, propondo um conjunto de riscos que podem dificultar o reuso do componente.
Outro problema que dificulta o uso do modelo proposto em é incompletude da proposta, faltando um subconjunto de métricas que auxiliem o cálculo dos custos de desenvolvimento e reuso do componente.
O modelo de análise de viabilidade de componentização de software é a contribuição do presente trabalho.
O modelo proposto, justifica- se por:
Ter sua especificação elaborada com base em um levantamento bibliográfico sobre métricas para DBC e métodos de Roi;
Definir um conjunto de entradas quantitativas e qualitativas que visam estabelecer diferentes cenários de reuso;
Servir para auxiliar engenheiros de software na tomada de decisão sobre a criação de componentes de software.
Apresenta todas as métricas necessárias para sua aplicação.
A partir de o trabalho apresentado neste documento é possível apontar novos trabalhos, que servirão para dar continuidade na pesquisa:
Avaliação e refinamento do modelo proposto através da aplicação do mesmo em diversos projetos e sobre diferentes componentes num ambiente de desenvolvimento de software real;
Integrar ao modelo métricas que auxiliem também o processo de tomada de decisão sobre a incorporação de componentes a uma aplicação, cobrindo assim mais amplamente as métricas de processo;
Integrar o modelo de análise de viabilidade de componentização de software ao processo de desenvolvimento baseado em componentes.
Possibilitando identificar o momento de tomada de decisão e quais os artefatos devem ser gerados dentro de o processo para alimentar o modelo.
