A representação e execução de processos de negócio têm gerado importantes desafios na área de Ciência da Computação.

Um desses desafios é a escolha do melhor arcabouço formal para a especificação dos controles de fluxo padrões.

Algumas linguagens defendem o uso de redes de Petri ou álgebras de processos como base formal.

O uso de redes de Petri para especificar workflows clássicos é uma abordagem bastante conhecida.

Entretanto, pesquisas recentes vêm difundindo o uso de novas extensões da álgebra de processos como uma alternativa para a especificação formal de workflows.

A principal contribuição deste trabalho é a definição da Navigation Plan Definition Language (NPDL).

A NPDL foi implementada como uma extensão da linguagem SQL.

Ela é uma alternativa para a representação de workflows que utiliza a álgebra de processos como arcabouço formal.

A NPDL promove uma separação explícita entre o ambiente de especificação e o ambiente de execução de um workflow.

Esta separação propicia o reaproveitamento de passos de negócio e o uso das propriedades da álgebra de processos não só na modelagem, mas também no controle da execução dos processos.

Após a especificação de um workflow por meio da NPDL, a execução dos passos que o definem é controlada pela ferramenta NavigationPlanTool.

Essa ferramenta é a segunda contribuição deste trabalho de pesquisa.

Um processo de negócio é descrito por um ou mais procedimentos que, em conjunto, realizam um objetivo de negócio.

A execução de um processo de negócio possui condições muito bem definidas de início e término, e pode combinar procedimentos automáticos e manuais.

Um conceito bastante difundido antes mesmo do surgimento dos sistemas gerenciadores de processos de negócio é o de workflow.

Um workflow segundo a definição da WfMC (Workflow Management Coalition) é "a automação de um processo de negócio, em todo ou parte, por meio da qual documentos, informações ou tarefas são passadas de um participante ao outro por ações, de acordo com um conjunto de regras procedurais".

Também segundo a WfMC, um sistema de gerenciamento de workflow (WFMS, de Workflow Management System) é um "sistema que define, cria e gerencia a execução de workflows por meio do uso de software".

O Gerenciamento de Processos de Negócio (GPN) envolve métodos, técnicas e ferramentas para apoiar o projeto, a execução, o gerenciamento e a análise operacional dos processos de negócio.

Enquanto as definições tradicionais de workflow priorizam a execução dos processos operacionais, o GPN também apóia a fase de diagnóstico, permitindo que os processos sejam analisados, objetivando a detecção de falhas e possíveis melhorias no projeto.

Neste texto, o termo inglês workflow não é substituído pela sua tradução "fluxo de trabalho" por ser amplamente utilizado e reconhecido na comunidade científica.

GPN é a tradução de Business Process Management (BPM).

Conforme Aalst, Hofstede e Weske apontam em, atualmente existem três tendências de desenvolvimento de software que justificam a atenção que vem sendo dada ao GPN, A "montagem" de componentes de software.

O enfoque nos processos e não só nos dados.

A valorização do re-projeto e crescimento orgânico em detrimento de projetos estáticos.

Essas tendências foram confirmadas com o paradigma da computação orientada a serviços, o SOC (Service-Oriented Computing), apresentado em 2003.

A escolha de arcabouços formais para a representação de processos de negócio sempre gerou discussões na área acadêmica.

Os formalismos mais utilizados para a modelagem de processos de negócio são as lógicas temporais, as redes de Petri e as álgebras de processos, sendo que esses dois últimos serão apresentados.

Na área de composição de serviços web, existem muitas iniciativas associadas à definição de processos de negócio.

O problema da composição de serviços web é abordado por vários trabalhos recentes, como as linguagens WSFL (Web Services Flow Language) e a BPELWS (Business Process Execution Language for Web Services).

A maior parte desses trabalhos se concentra nos mecanismos para a composição em camadas abstratas, dependentes de outros padrões como o XML.

A WSFL (Web Services Flow Language) é uma linguagem XML, proposta pela IBM, para a descrição da composição de serviços web.

A WSFL trata de dois tipos de composições, o primeiro especifica o padrão de uso apropriado de uma coleção de serviços.

Neste texto, os termos "formal" e "formalismo" referem-se a "método matemático rigoroso".

A XML (eXtensible Markup Language) é uma linguagem de marcação definida pela WC.

Ela é um subtipo da linguagem padrão de marcação generalizada, a SGML (Standard Generalized Markup Language), capaz de descrever diversos tipos de dados.

O objetivo principal da XML é facilitar o compartilhamento de informações na Internet, de modo que sua composição resultante seja uma descrição de como alcançar um determinado objetivo de negócio.

O segundo especifica o padrão de interação de uma coleção de serviços web.

A XLANG (XML Language), criada pela Microsoft, pode ser considerada uma extensão da WSFL.

Por possuírem as mesmas características e objetivos, a XLANG e a WSFL foram combinadas e geraram a BPELWS.

A BPELWS (Business Process Execution Language for Web Services) é uma linguagem baseada em XML, utilizada para descrever processos de negócio.

Amparada por empresas como a Microsoft, IBM, Siebel Systems, BEA e SAP, a BPLWS vem sendo aclamada como linguagem padrão para a definição de processos de negócio baseados em serviços web.

A BPMN (Business Process Modeling Notation), definida pela BPMI (Business Process Management Initiative), é um conjunto de convenções gráficas para descrever processos de negócio.

A notação da BPMN foi especificamente projetada para coordenar seqüências de processos e a troca de mensagens existente entre processos participantes de um conjunto de atividades relacionadas.

A intenção de um modelo de processo em BPMN é capturar detalhes suficientes para permitir que ele seja utilizado como fonte de uma descrição executável de um processo.

Por esse motivo, é possível traduzir especificações em BPMN para BPELWS.

A BPMI, em 2005, anunciou sua integração ao grupo OMG (Object Mangement Group) e tem em sua ampla lista de membros empresas influentes como a IBM, a Oracle, a SAP e a Adobe Systems.

As especificações de processos de negócio desenvolvidas pela BPMI e a linguagem XLANG (precursora da BPELWS) declaram ter Calculus uma extensão da álgebra de processos como arcabouço formal, mas nenhuma delas descreve em sua especificação como esse formalismo é utilizado.

Uma das poucas linguagens que define de forma clara sua relação com um formalismo para modelagem de workflows é a YAWL (Yet Another Workflow Language).

A YAWL é uma linguagem gráfica que utiliza redes de Petri como arcabouço formal.

Ela aumenta o seu poder de expressividade na modelagem de processos de negócio por meio de mecanismos que apóiam, de forma mais direta e intuitiva, a representação de padrões de controle de fluxo, superando limitações das redes de Petri.

Além disso, a YAWL não se restringe aos serviços web, como ocorre com as linguagens apresentadas anteriormente.

Discute-se a aplicação de Calculus para descrever aspectos comportamentais de workflows.

A principal contribuição desse artigo é a utilização da semântica de execução e dos conceitos de comunicação e troca de Calculus para definir precisamente o comportamento de cada um dos padrões de controle de fluxo.

Os trabalhos para representar workflows são tradicionalmente baseados em redes de Petri.

Mais recentemente, algumas iniciativas usam extensões da álgebra de processos.

Uma importante iniciativa ilustra a deficiência associada à maioria das extensões de álgebra de processos, a dificuldade de expressar aspectos definidos em tempo de execução de processos.

A abordagem se identifica com a do artigo, por se basear em uma extensão da álgebra de processos para especificar padrões de controle de fluxo.

Entretanto, este trabalho adiciona mecanismos à álgebra de processos que remediam a deficiência descrita no parágrafo anterior.

O objetivo principal deste trabalho é criar uma linguagem para facilitar a representação das principais estruturas de controle de fluxo utilizadas na definição de processos de negócio.

A contribuição mais expressiva deste trabalho é a linguagem de definição de plano de navegação, a NPDL (Navigation Plan Definition Language).

A NPDL é uma linguagem de definição de processos de negócio baseada em álgebra de processos, desenvolvida como uma extensão da linguagem SQL.

Uma segunda contribuição é o desenvolvimento da ferramenta NavigationPlanTool, fundamentada pela NPDL.

Essa ferramenta cria e manipula as estruturas de dados que representam processos em um modelo de dados relacional.

Ela apóia as fases de projeto, instanciação e execução de processos de negócio, podendo ser aplicada na composição de serviços básicos, como os especificados pelo paradigma SOC.

São apresentados os fundamentos empregados ao longo deste trabalho, tais como, os conceitos envolvidos na Teoria de Processos, a comparação entre os formalismos redes de Petri e álgebra de processos, a definição de plano de navegação e a descrição dos padrões de controle de fluxo.

A linguagem de definição de processos NPDL, desenvolvida neste trabalho, é descrita.

É mostrado como a álgebra de processos e a NPDL são utilizadas na especificação dos padrões de controle de fluxo.

Implementação da ferramenta NavigationPlanTool, que além de ter um interpretador para a NPDL, oferece serviços de apoio à instanciação e ao controle de execução de processos.

Também são descritas as estruturas de dados em gerenciadores de dados relacionais e os algoritmos em memória utilizados pela NavigationPlanTool.

O comportamento de sistemas paralelos e distribuídos, os chamados sistemas concorrentes, é um tópico bastante abordado pela literatura da área da computação.

Uma prova disto é o crescente número de linguagens e semânticas formais para a descrição e análise de comportamento de sistemas concorrentes.

Uma linguagem formal é um conjunto de cadeias de tamanho finito, formadas a partir de um alfabeto.

Uma linguagem geralmente é gerada a partir de uma gramática, que é um conjunto de regras que determinam quais sentenças pertencem à linguagem.

Semânticas Formais é a área de Teoria da Computação que trata do estudo matemático do significado das linguagens de programação e modelos computacionais.

A semântica formal de uma linguagem é expressa por um modelo matemático que representa as possíveis operações descritas pela linguagem.

O objetivo de uma semântica formal é criar um arcabouço preciso e não-ambíguo para o raciocínio sobre sistemas.

O comportamento de sistemas concorrentes é frequentemente representado por meio das ações que o sistema pode executar e a ordenação destas ações.

Essa visão abstrata sobre o comportamento de sistemas concorrentes é denominada processo.

Sistemas geralmente são caracterizados por processos e dados.

Processos são os mecanismos de controle para a manipulação dos dados.

Enquanto os processos são dinâmicos e ativos, os dados são estáticos e passivos.

O comportamento dos sistemas tende a ser composto por vários processos que são executados concorrentemente.

Processos trocam dados entre si e desta forma influenciam o comportamento de outros processos e têm o seu próprio comportamento influenciado por outros processos.

O comportamento de sistemas concorrentes geralmente pode ser definido por meio de expressões em alguma linguagem formal.

Duas expressões descrevem o mesmo sistema se, e somente se, elas correspondem a processos equivalentes na mesma semântica, sendo que a equivalência de processos é chamada equivalência semântica.

A classificação de equivalências semânticas é alvo de várias discussões nesta área de pesquisa.

Segundo Baeten e Basten, em, duas discussões importantes são as comparações entre semânticas de tempo linear e semânticas de tempo ramificado, e entre semânticas de ordem total e semânticas de ordem parcial.

Em semânticas de tempo linear, dois processos cuja ordem das ações é igual são considerados equivalentes.

Entretanto, esses processos podem diferir em sua estrutura de ramificação.

A estrutura de ramificação de um processo é determinada pelos momentos nos quais são feitas as escolhas entre ramos alternativos de comportamento.

As ações de um processo em uma semântica de ordem total são sempre completamente ordenadas, ao passo que, nas semânticas de ordem parcial, as ações podem ocorrer simultaneamente ou com independência causal entre si.

A propriedade fundamental de semânticas de ordem total é que nelas o conceito de concorrência é equivalente a não-determinismo.

Concorrência em um conjunto de ações representa a situação em que essas ações são executadas paralelamente.

O não-determinismo em um conjunto de ações representa a escolha "não previsível" de uma entre todas as possibilidades de ordenação dessas ações.

Os dois formalismos mais utilizados para a especificação de sistemas concorrentes são as redes de Petri e as álgebras de processos.

A semântica das redes de Petri é de ordem parcial e de tempo ramificado.

A maior parte das álgebras de processos possui semântica de ordem total e de tempo ramificado.

Detalhes sobre redes de Petri e álgebra de processos são fornecidos.

A próxima seção apresenta a Teoria de Processos, com o objetivo de definir alguns termos que serão usados neste texto.

A Teoria de Processos é o estudo voltado principalmente a duas atividades relacionadas a processos, modelagem e verificação.

A modelagem consiste na representação dos processos, geralmente por meio de estruturas matemáticas ou expressões em uma linguagem descritiva de sistemas.

Verificação é a atividade de provar enunciados sobre processos, baseando-se na semântica de equivalência do formalismo empregado na especificação.

Um modo natural e direto de representar o comportamento de um processo em um sistema concorrente é a utilização de um grafo de processo.

Um grafo de processo é um grafo em um Sistema de Transições Rotuladas (STR).

Um STR é um grafo direcionado, no qual as arestas, denominadas transições, são rotuladas por nomes de um alfabeto de ações.

Os vértices do grafo são chamados de estados.

Uma ação pode ser qualquer tipo de atividade que um sistema concorrente desempenha.

O conjunto de estados em um STR é uma abstração de todos os possíveis estados de um sistema concorrente.

STRs podem ser usados para definir tanto semânticas de ordem parcial quando semânticas de ordem total.

Em uma visão de ordem total, assume-se que ações são entidades atômicas sem estrutura interna.

Um sistema pode executar uma única ação por vez.

Assim, as ações são totalmente ordenadas.

Em uma visão de ordem parcial, as ações são conjuntos de ações atômicas, permitindo que o sistema execute de forma simultânea ações atômicas e casualmente independentes.

Nesse caso, as ações atômicas não são mais totalmente ordenadas.

A noção básica do arcabouço dos STR usada nesta pesquisa é a chamada de espaço de processos.

Um espaço de processos é um STR estendido com um predicado de terminação nos estados.

Na Teoria de Processos, um processo é um STR estendido com um predicado de terminação e um estado inicial diferenciado.

O predicado de terminação define os estados nos quais o processo pode terminar com sucesso.

Denomina-se deadlock o estado a partir do qual um processo não pode executar uma ação nem terminar com sucesso.

Um espaço de processos pode ser definido pela quádrupla, sendo um conjunto de estados de processos, um conjunto de ações, uma relação de transição ternária, e um predicado de terminação.

Se o sistema de transições contém uma relação de transição (representada por uma aresta no grafo do processo), então o processo pode evoluir do estado com a execução da ação.

No grafo de processo, as seguintes relações de transição podem ser observadas, sendo que é um estado final para o processo.

Grafos de processos podem ser comparados por meio de alguma equivalência comportamental.

Uma possível equivalência pode relacionar dois grafos de processos se, e somente se, eles possam executar as mesmas seqüências de ações, essa equivalência é denominada equivalência por observação.

Outro tipo de equivalência, a mais refinada de todas, é a que requer que dois grafos de processos, além de poderem executar a mesma seqüência de ações, tenham a mesma estrutura de ramificação, preservando os momentos de escolha e os deadlocks.

Esse segundo tipo de equivalência é denominada equivalência por bissimulação.

Por os grafos dos dois processos apresentados são equivalentes comportamentalmente segundo a equivalência por observação, pois ambos os processos executam primeiro ação a ação a, seguida ou pela ação b ou pela ação c.

Entretanto, os grafos são diferentes segundo a equivalência por bissimulação, pois enquanto o primeiro grafo indica que a escolha entre as ações é feita no segundo passo da execução do processo, o segundo grafo modela um processo no qual esta escolha é feita no primeiro passo da execução.

Exemplos de grafos de processos.

A teoria das redes de Petri é um dos exemplos mais conhecidos de teoria de ordem parcial para modelagem e análise de sistemas concorrentes.

O conceito foi introduzido por Carl Adam Petri, em sua tese de doutorado em 1962, na Faculdade de Matemática e Física da Universidade de Darmstadt, Alemanha.

A popularidade das redes de Petri (rdPs) como ferramenta para estudo de sistemas se deve a sua representação gráfica de fácil compreensão e ao seu potencial matemático para a análise de processos.

Essas análises incluem verificações de propriedades inerentes aos sistemas concorrentes, como relações de precedência entre eventos, sincronização e existência ou não de deadlocks.

Redes de Petri são formadas basicamente por dois tipos de componentes, a transição, que é um componente ativo correspondente a alguma ação ou evento realizado dentro do sistema, e o lugar, que é um componente passivo e relacionado a alguma variável de estado do sistema.

Esses dois elementos são os vértices do grafo associado às rdPs.

Uma rdP clássica é um grafo bipartido e um estado inicial, chamado de marcação inicial.

O grafo de uma rdP é orientado e seus arcos possuem pesos.

Um grafo bipartido é aquele em que o conjunto de vértices pode ser dividido em dois conjuntos disjuntos, sendo que cada aresta do grafo conecta um vértice pertencente a V a um vértice pertencente a V.

Os conceitos associados a cada um dos itens de uma rdP são, Lugar (representado graficamente por um círculo), modela uma condição que deve ser satisfeita para que o disparo da ação seja realizado.

Transição representada graficamente por um retângulo ou barr, pode ser compreendida como uma ação/evento, ou um processamento de um sinal, ou ainda uma tarefa.

Arco orientado, liga um lugar a uma transição ou vice-versa, encadeando condições e eventos.

Marca ou ficha, representa um recurso disponível.

O posicionamento destas fichas nos lugares do grafo constitui a marcação da rdP.

Cada lugar pode possuir 0 ou mais fichas.

A evolução da marcação permite modelar o comportamento dinâmico do sistema.

Peso, cada arco possui um peso associado a ele.

O peso indica quantas marcas uma transição consome de um lugar de entrada ou quantas marcas uma transição acrescenta em um lugar de saída.

Quando um arco não possui um peso explicitamente indicado no grafo, considera-se que o seu peso é 1.

Uma rede de Petri em que todos os arcos possuem peso 1 é classificada como ordinária.

Para ilustrar a modelagem de processos em uma rede de Petri ordinária, será utilizado como exemplo um sistema de processamento de reclamações.

Rede de Petri do processo que representa o sistema.

A primeira ação nesse sistema é o registro de uma reclamação.

Após o registro, duas ações são executadas paralelamente, o envio de um questionário para o reclamante e a análise da reclamação.

O questionário será processado se o reclamante retorná-lo dentro de um prazo de semanas, expirado o prazo, o questionário é descartado.

Baseado no resultado da avaliação, a reclamação pode ou não ser processada.

O processamento da reclamação só acontece depois da ocorrência do processamento do questionário ou da expiração do prazo de semanas.

Após a realização do processamento da reclamação, uma verificação é feita e, caso o processamento esteja correto, a reclamação é arquivada.

Caso haja problemas, o processamento deve ser refeito.

Uma transição está associada a um ou mais lugares de entrada e a um ou mais lugares de saída.

Conjunto dos lugares de entrada da transição.

Conjunto dos lugares de saída da transição.

Um lugar de entrada de uma transição geralmente expressa uma pré-condição, um dado/sinal de entrada, um recurso de hardware/software requerido ou ainda um buffer.

Um lugar de saída pode ser compreendido como uma pós-condição, um dado/sinal de saída, um recurso liberado, uma conclusão ou um buffer.

Rede de Petri para o processamento de reclamações.

O disparo das transições (execução das ações) é controlado pelo número de marcas e pela distribuição destas nos lugares do grafo que representa a rede.

Uma transição está habilitada se para todo lugar de entrada da transição, o lugar possui um número de marcas superior ou igual ao peso do arco que liga o lugar à transição.

Esta regra habilita o disparo de uma transição, mas não o obriga.

O disparo de uma transição gera a subtração de marcas de todos os seus lugares de entrada (de acordo com o peso dos arcos que ligam os lugares de entrada à transição) e o acréscimo de marcas em todos os seus lugares de saída de acordo com o peso dos arcos que ligam a transição aos seus lugares de saíd.

A marcação de uma rede de Petri muda a cada disparo de transição, permitindo simular o comportamento dinâmico do sistema e definir o seu estado em um dado momento.

As redes de Petri foram estendidas de diversas formas e aplicadas a vários tipos de problemas.

Os primeiros trabalhos sobre o uso de rdPs para a modelagem e análise de workflows datam da década de 70.

Essas extensões são as bases formais mais utilizadas para especificação de workflows.

Os autores atribuem a popularidade das redes de Petri não somente às características decorrentes de sua representação formal, mas também à sua simplicidade gráfica.

Essa simplicidade gráfica viabiliza uma linguagem comum entre os diferentes tipos de especialistas envolvidos na especificação de um sistema.

Dois tipos de propriedades podem ser estudadas a partir de um modelo em rdP, Propriedades comportamentais, dependentes da marcação inicial da rede.

Propriedades estruturais, independentes da marcação inicial.

A propriedade fundamental para o estudo das propriedades dinâmicas de qualquer sistema descrito por uma rdP é uma propriedade comportamental conhecida por alcançabilidade.

O disparo de uma transição habilitada muda a marcação da rede de acordo com a regra de transição descrita anteriormente.

Uma seqüência de disparos resulta em uma seqüência de marcações.

Diz-se que uma marcação é alcançável se existe uma seqüência de disparos que transformam.

Problema da alcançabilidade para rdPs.

Foi provado que o problema da alcançabilidade é decidível, no entanto consome espaço e tempo exponencial para verificar o caso geral.

Os métodos de análise para redes de Petri podem ser divididos em três abordagens distintas, baseados em árvore de cobertura.

Baseados em equações matriciais e baseados em técnicas de redução e decomposição.

Os métodos do tipoe não fazem restrição ao tamanho da rdP em que serão aplicados.

Entretanto, em muitos casos eles só são aplicáveis a subclasses ou situações especiais de rdPs.

Já as abordagens baseadas em árvore de alcançabilidade envolvem essencialmente a enumeração das marcações alcançáveis.

Embora sejam aplicadas em qualquer classe de rede, elas são restritas às redes pequenas devido à explosão do número de estados.

Dada uma rdP (R, M), a partir da marcação inicial M, é possível obter uma nova marcação para cada transição habilitada.

A partir de cada nova marcação, novas marcações podem ser alcançadas.

Esse processo resulta em uma árvore de marcações, denominada árvore de cobertura.

Os nós representam marcações geradas a partir da raiz e seus sucessores, e cada arco representa o disparo de uma transição, que transforma uma marcação em outra.

Entretanto, esta árvore irá crescer infinitamente se a rede for ilimitada.

Uma rdP é dita limitada se o número de fichas em cada um de seus lugares não excede a um número finito para cada marcação alcançável.

Para uma rdP limitada, a árvore de cobertura é chamada de árvore de alcançabilidade, já que ela possui todas as possíveis marcações alcançáveis.

Algumas propriedades comportamentais podem ser extraídas de uma árvore de cobertura, mas somente uma árvore de alcançabilidade pode fornecer todas as propriedades.

É possível construir uma árvore finita de cobertura, utilizando o símbolo especial, que pode ser compreendido como "infinito".

Para qualquer inteiro, o símbolo possui propriedades.

Os passos para construção da árvore de cobertura são os descritos.

Aplicando os passos descritos na obre a rede de Petri, que representa um sistema produtor/consumidor, obtém-se a árvore.

Algoritmo para a construção da árvore de cobertura.

É possível também representar o comportamento dinâmico de redes de Petri por meio de equações matriciais.

As equações matriciais são aplicáveis às rdPs puras.

Uma rdP pura é uma rede que não contém um par de lugar e transição em que é, ao mesmo tempo, um lugar de entrada e um lugar de saída.

Rede de Petri para um sistema Produtor/Consumidor.

Árvore de cobertura da rdP do sistema Produtor/Consumidor.

A partir da matriz de incidência e das equações de estado, é possível determinar se uma marcação pode ser atingida.

Para uma rede de Petri com transições e lugares, a matriz de incidência inteiros não negativos, chamado de vetor contador de disparos.

A i-ésima entrada denota o número de vezes que a transição precisa disparar para transformar.

A partir da equação fundamental das redes de Petri é possível verificar algumas propriedades comportamentais e derivar outros métodos para a análise de propriedades estruturais da rede.

Para o propósito do raciocínio matemático, é freqüentemente conveniente representar os grafos de processos algebricamente, na forma de termos.

A álgebra de processos trata da especificação e manipulação de termos de processos por meio de uma coleção de operadores, constituindo um arcabouço para o raciocínio formal sobre processos e dados, com ênfase em processos que são executados concorrentemente.

Ela pode ser usada para detectar propriedades indesejáveis e formalmente derivar propriedades desejáveis de uma especificação de sistema.

A álgebra de processos impõe uma lógica de equivalência sobre termos de processos, de modo que dois termos de processos só podem ser igualados se os seus grafos de processos são comportamentalmente equivalentes.

Uma álgebra de processos é composta por um conjunto de símbolos de ações (ou eventos), um conjunto de operações e um conjunto de axiomas descrevendo as propriedades dos operadores.

O conjunto de axiomas (ou leis equacionais) podem também especificar quando dois processos são considerados iguais.

A maioria das álgebras de processos contém operadores básicos para a construção de processos finitos (composição seqüencial e composição alternativ, operadores de comunicação para a construção de processos concorrentes (composição paralela e sincronismo) e alguma notação de recursão para capturar comportamentos potencialmente infinitos.

Uma álgebra de processos pode ser estendida com novos operadores para aumentar o seu poder de expressividade ou facilitar a especificação do comportamento de sistemas.

As bases de álgebra de processos foram desenvolvidas independentemente.

Suas bases são parcialmente enraizadas nas redes de Petri, na teoria de autômatos e nas linguagens formais.

Álgebra de processos CCS (Calculus of Communicating Systems), CSP (Communicating Sequential Processes).

A álgebra de processos explorada por este trabalho é a ACP (Algebra of Communicating Processes), relacionada à CCS.

Uma assinatura consiste em um conjunto finito de símbolos de funções (ou operadores) em que cada símbolo de função tem uma aridade que representa seu número de argumentos.

O conjunto de termos sobre uma assinatura é definido como o conjunto mínimo que satisfaça as condições.

A assinatura de uma álgebra de processos consiste em, um conjunto finito e não vazio de ações atômicas, representando comportamentos indivisíveis.

Um operador binário, chamado de composição alternativa.

Se os termos fechados representam os processos, respectivamente, então o termo fechado representa o processo que executa.

Um operador binário, chamado de composição seqüencial.

Se os termos fechados representam os processos, respectivamente, então o termo fechado representa o processo que executa primeiro p e depois p.

Cada processo finito pode ser representado por um termo fechado construído a partir de um conjunto de ações atômicas, do operador.

Esses termos são denominados termos de processos básicos.

A coleção de todos os termos de processos básicos é chamada de álgebra de processos básica AP.

As regras de transição para a APB, que constituem a sua semântica operacional, são as descritas.

As variáveis nestas regras assumem valores da coleção de termos básicos de processos, enquanto assume valores do conjunto de ações atômicas.

A semântica operacional de uma linguagem descreve como uma sentença válida da linguagem deve ser interpretada em passos seqüenciais.

A primeira regra de transição diz que cada ação atômica pode terminar com sucesso pela execução dela própria.

As variáveis nos axiomas assumem valores da coleção de termos básicos de processos.

Neste texto, também são utilizados dois outros conceitos que não pertencem a APB, o operador binário chamado entrelaçamento, da ACP, e as expressões recursivas da ACP with guarded recursion.

O termo indica que os termos de processos serão executados em paralelo, ou seja, é possível executar uma transição inicial ou uma transição inicial.

A formalização desse comportamento é feita pelas regras de transição.

As variáveis nas regras assumem valores da coleção de termos básicos de processos, enquanto assume valores do conjunto de ações atômicas.

Além disso, também representa a possibilidade de comunicação entre duas transições iniciais.

Para isso, existe a função de comunicação definida que produz para todo par de ações atômicas, sua comunicação.

A função de comunicação é comutativa e associativa.

As regras de transição para o entrelaçamento, expressam o comportamento do operador envolvendo também a possibilidade de comunicação entre ações.

As variáveis das regras assumem valores da coleção de termos básicos de processos, enquanto assume valores do conjunto de ações atômicas.

Para que os axiomas estendida com o operador de entrelaçamento fossem válidos e completos,provaram a necessidade de outros dois operadores na extensão, o entrelaçamento à esquerda e o entrelaçamento com comunicação.

Ambos capturam parte do comportamento do entrelaçamento.

O entrelaçamento à esquerda realiza uma transição inicial do termo de processo, e depois se comporta como o operador entrelaçamento.

Deste modo, o entrelaçamento à esquerda possui o mesmo significado que o entrelaçamento, exceto pelo fato do processo da esquerda ter que executar a primeira ação.

O entrelaçamento com comunicação realiza como transição inicial a comunicação entre as transições iniciais dos termos de processos.

O entrelaçamento com comunicação, assim como o entrelaçamento, também denota a execução paralela de seus operandos, com a restrição de que eles precisam se sincronizar em sua primeira ação.

Regras de transição para os dois operadores adicionais.

As variáveis nas regras e axiomas assumem valores da coleção de termos básicos de processos.

As variáveis assumem valores do conjunto de ações atômicas.

A constante especial da ACP representa o deadlock e não apresenta nenhum comportamento.

O modo como o deadlock interfere nas expressões às quais ele pertence pode ser compreendido pelos axiomas.

A variável que aparece nos axiomas assume valores da coleção de termos de processos.

Sistemas frequentemente apresentam comportamento ilimitado, ou seja, podem conter ciclos estruturados com um único ponto de entrada e um único ponto de saíd ou arbitrários com mais de um ponto de entrada ou mais de um ponto de saíd.

As equações recursivas da ACP with guarded recursion são utilizadas para a representação destas iterações finitas ou infinitas.

Regras de transição para o entrelaçamento à esquerda e Axiomas para o entrelaçamento, o entrelaçamento à esquerda e o entrelaçamento com comunicação, axiomas para o deadlock.

Uma especificação recursiva é um conjunto de equações recursivas da forma em que os lados esquerdos são variáveis de recursão, e os lados direitos são termos de processos na ACP com possíveis ocorrências das variáveis de recursão.

Por o processo que executa sequencialmente as ações infinitas vezes pode ser representado pela especificação recursiva.

Para ilustrar como processos são modelados por uma álgebra de processos, será apresentado um exemplo de modelagem feita para o processo de Aquisição de Item de Acervo da Biblioteca.

A aquisição de item de acervo da biblioteca é realizada a partir de uma lista de itens, que representa um pedido de compra.

A primeira etapa da aquisição é a verificação dos dados do pedido.

Caso os dados do pedido estejam válidos, é necessário o recebimento de uma verba para compra, antes que os procedimentos de aquisição do pedido possam ser realmente iniciados.

Após o recebimento da verba, é necessário efetuar uma priorização dos itens do pedido, uma vez que a verba recebida nem sempre é suficiente para a aquisição de todos os itens da lista.

Depois de priorizados, os itens são cotados.

As etapas de priorização e cotação podem ser realizadas um número irrestrito de vezes.

Após uma cotação, o pedido pode ser liberado para compra ou a compra pode ser cancelada.

No caso de cancelamento da compra, o pedido pode ser reutilizado em uma nova tentativa de compra.

No caso da liberação do pedido, a compra é então efetuada.

Mas é possível que ocorra problemas com a etapa de compra por a indisponibilidade temporária de um item do pedido na editor.

Neste caso, cada problema ocorrido deve ser registrado, até que a compra seja entregue ou cancelada definitivamente.

Em qualquer ponto do processo de aquisição, é possível cancelar o pedido.

Um pedido cancelado não pode ser reaproveitado em uma nova tentativa de compra.

O conjunto de ações possíveis nesse sistema é definido como, verifica os dados do pedido.

Indica o recebimento de uma verba para compra.

Efetua a priorização (ordenação) dos itens do pedido.

Efetua cotação do pedido.

Libera o pedido para compra.

Indica a compra do pedido.

Registra um problema na compra do pedido.

Cancela o pedido de compra (encerra o processo).

Cancela a compra mas permite o uso do mesmo pedido para uma nova tentativa de compr.

O grafo de processo simplificado de aquisição é mostrado.

Grafo de processo simplificado da Aquisição de Item de Acervo.

Os vértices no grafo representam os possíveis estados do processo de Aquisição.

As arestas do grafo representam as ações que o processo pode executar.

Não há atividades que possam ser executadas de forma paralela no processo de Aquisição.

Portanto, os vértices no grafo que possuem mais de uma aresta de saída representam pontos de escolha no processo, no momento da execução do processo, somente uma ação entre as possíveis ações (representadas pelas arestas de saída do vértice) deverá ser executada, conduzindo o processo a um novo estado.

Por após a execução da ação a (verificar os dados do pedido), o processo pode executar a ação a indicar o recebimento de uma verba para compr ou a ação a cancelar o pedido de compr.

Pelo grafo do processo é possível notar que existem trechos no fluxo de Aquisição que podem ser executados repetidas vezes.

Para representar esse comportamento em álgebra de processos, o processo é dividido em subprocessos definidos por expressões recursivas.

As redes de Petri e a álgebra de processos compartilham duas características importantes, ambas são fundamentadas em descrições matemáticas precisas e são aplicadas à modelagem de sistemas concorrentes.

Entretanto, rdPs e álgebra de processos são dois formalismos completamente diferentes.

A principal diferença entre rdPs e álgebras de processos é que as rdPs são baseadas em grafos bipartidos, enquanto as álgebras são baseadas em uma descrição textual.

Em ambas as áreas é possível encontrar uma expressiva quantidade de estudos já realizados.

Neste trabalho, foi classificado de subprocesso um processo utilizado dentro da definição de outro processo.

Inclusive, muitos conceitos desenvolvidos para rdPs foram traduzidos para álgebras de processos e vice-versa.

Vantagens das álgebras de processos e das redes de Petri.

Sobre as álgebras de processos, é possível ressaltar, Possibilitam o estudo de conectivos diretamente associados às linguagens de programação reais.

São composicionais por definição, ou seja, possibilitam a composição de grandes sistemas a partir de sistemas menores de forma estruturada.

Contam com uma grande variedade de leis algébricas que podem ser utilizadas para manipular os sistemas, tanto para refiná-los quanto para provar corretude com relação a alguma especificação.

Das rdPs, destacam-se as seguintes vantagens, Distinguem precisamente estados de atividades, sendo estas últimas definidas como mudanças de estados.

Mesmo sendo formais, possuem uma representação gráfica que é fácil de ser compreendida e por isso possuem grande apelo prático.

Por serem representadas como grafos bipartidos, as redes de Petri possuem ligações com a teoria de grafos, que podem ser exploradas para a verificação de sistemas.

As rdPs possuem uma representação gráfica intuitiva, que é de fácil compreensão para "não-especialistas".

Um modelo em rdP descreve tanto os estados quanto as ações do sistema que está sendo construído.

Existem várias técnicas disponíveis para a investigação de propriedades dos estados e também do comportamento dinâmico de um modelo em rdP.

Entretanto, destaca-se como maior fraqueza das rdPs o problema da complexidade, modelos baseados em rdP tendem a ficar muito extensos para análise, mesmo para sistemas de pequeno porte.

A álgebra de processos é um formalismo puramente simbólico, particularmente apropriado para manipulação computacional.

Uma descrição de sistema em álgebra de processos enfoca o comportamento dinâmico.

As técnicas de prova na álgebra de processos geralmente têm como objetivo mostrar a igualdadede descrições comportamentais, sendo útil, portanto, para comparar descrições de sistemas.

Exemplo de processo modelado em uma rdP clássica, com oito transições representando as ações executadas pelo processo.

Exemplo de modelagem de sincronização usando redes de Petri.

Em uma primeira tentativa de transcrição para álgebra de processos, pode-se descrever o processo.

No entanto, analisando rigorosamente a expressão, é possível notar que ela não preserva a relação causal existente entre as ações representada na rdP.

No grafo fica claro que, embora a ação é habilitada para execução somente após a execução das ações, a ativação da ação depende somente da execução.

Nesta primeira expressão algébrica apresentada, a execução também ficou condicionada à execução, que não era desejado.

Para expressar a relação causal existente, que a rdP representou facilmente, será preciso expandir o termo que representa a primeira situação de paralelismo dentro do processo.

Este termo corresponde ao trecho em destaque na rede (delimitado por um retângulo com bordas tracejadas).

A expansão foi feita utilizando os axiomas para o operador de entrelaçamento, considerando que a comunicação entre as ações resulta em deadlock.

O resultado obtido é a expressão abaixo.

Sobre esta expressão resultante, introduz-se a seqüência de ações.

Finalmente, é incluída na última expressão apresentada a relação de causalidade.

Para completar a expressão, falta introduzir a ação inicial a e a final.

O exemplo mostrado foi proposto com o objetivo de ilustrar a maior limitação das álgebras de processo quando comparadas às rdPs, a dificuldade na modelagem de casos específicos de sistemas que requerem sincronismo de ações de linhas distintas de controle de fluxo.

O autor, com isso, afirma que a modelagem de sistemas complexos em álgebras de processos é uma tarefa para especialistas de negócio, enquanto que a modelagem desse tipo de sistema em redes de Petri é bastante natural.

O Plano de Navegação (PN) foi definido e estendido como um conjunto de todos os processos de negócio exigidos em uma aplicação para se atingirem os objetivos de negócio.

O Plano de Navegação mapeia todas as regras de consistência em função dos dados pertencentes às requisições dos serviços eletrônicos de todos os objetivos de negócio.

O PN é o principal conceito associado à arquitetura RiverFish.

RiverFish é uma arquitetura para a representação, o controle e a execução de processos de negócio.

Segundo esta arquitetura, processos podem ser divididos em duas categorias, atômicos ou compostos.

Processos de negócio atômicos são descritos em termos de passos de negócio, sendo que passos de negócio podem ser ações simples ou pontos de verificação.

Processos de negócio compostos são aqueles obtidos a partir da composição de outros processos de negócio.

Ações e pontos de verificação são utilizados para a manipulação dos dados.

Passos de negócio são as condições a serem satisfeitas pelos dados até que eles sejam armazenados numa base de dados.

Cada passo de negócio realizado para um determinado dado significa uma mudança de estado desse dado.

Requisições são solicitações de serviços num sistema de informação.

Uma instância do PN é aqui entendida como um vínculo entre uma requisição de um determinado usuário e os passos de negócio que responderão por ela.

Cada nova requisição de processo gera uma nova instância de seu plano de navegação.

A arquitetura RiverFish propõe o uso de instâncias do plano de navegação para controle da ordem de processamento dos passos das requisições.

A arquitetura RiverFish é composta por três módulos, o módulo de controle unificado, o módulo de execução de instâncias do plano de navegação e o módulo de armazenamento de dados.

Modelo da arquitetura RiverFish.

O controle unificado gerencia três bancos de dados, um para armazenar todas as informações de usuários, seus perfis e permissões de acesso.

Outro para armazenar todos os passos pertencentes aos formulários de requisições (os chamados planos de navegação).

O último para o armazenamento dos dados das instâncias de planos de navegação.

Neste trabalho, nosso interesse se concentra na estrutura destes dois últimos bancos de dados.

Modelo da arquitetura RiverFish.

Um plano de navegação conecta uma requisição aos seus respectivos passos de negócio.

Uma vez definido um processo de negócio por seu plano de navegação, cada nova requisição recebida implica na criação de uma nova instância de seu plano de navegação.

Essa operação de instanciação é feita no módulo de execução, que também é responsável por interpretar e executar os passos descritos pelo plano de navegação associado à instância.

Os passos executados e os resultados alcançados são armazenados no banco de dados de instâncias.

A definição formal de plano de navegação utiliza fundamentos da álgebra de processos.

Ação Simples.

Uma ação simples é um conjunto de ações atômicas compostas usando os operadores de seqüência e composição alternativa.

Ponto de verificação.

Um ponto de verificação é um conjunto de ações atômicas compostas usando regras restritivas e condicionais.

Passo de Negócio.

Um passo de negócio ou é uma ação simples ou um ponto de verificação.

Processo de Negócio.

Um processo de negócio é um conjunto de passos de negócio compostos usando operadores básicos da álgebra de processos e suas extensões.

Plano de Navegação.

Um plano de navegação é um conjunto de todos os processos de negócio exigidos em uma aplicação para atingir o objetivo de negócio.

Passos de negócio podem ser especializados em ações simples e pontos de verificação.

Cada passo especializado implementa suas ações atômicas internas sobre um dado específico.

Quando um plano de navegação é instanciado, um vínculo é criado entre os dados e os passos de negócio.

A possibilidade de reuso de um determinado passo de negócio na definição de outros processos de negócios e a manutenção dos dados de controle de execução das instâncias de planos e navegação em banco de dados relacionais são características importantes da arquitetura RiverFish.

Identificou-se e definiu-se 20 padrões de controle de fluxos em workflows.

O objetivo principal dos autores ao definir esses padrões era o de estabelecer critérios para a realização de comparações entre as diversas linguagens para especificação de workflows disponíveis tanto no ambiente acadêmico como no tecnológico.

Eles sugerem que cada linguagem seja classificada de acordo com a capacidade de expressar, por meio de sua sintaxe, os padrões de controle de fluxos.

Os padrões de controle de fluxo estão divididos em 6 categorias, Padrões básicos de controle de fluxo, referem-se a construções básicas, presentes na maioria das linguagens de modelagem de workflows.

Padrões avançados de ramificação e sincronização, representam controles de fluxo mais avançados que os cobertos pelos padrões da categoria anterior.

Padrões estruturais, em linguagens de programação é natural que uma estrutura de bloco tenha seus pontos de entrada e saída especificados de forma clara.

Entretanto, em workflows é comum blocos possuírem paralelismos e múltiplos pontos de entrada ou saída.

Os padrões estruturais representam essa flexibilidade requerida das linguagens de modelagem de workflows.

Padrões de múltiplas instâncias, os padrões desta categoria auxiliam na modelagem de casos específicos de instâncias de workflows, nos quais partes do processo precisam ser instanciadas múltiplas vezes.

Padrões baseados em estados, estendem a expressividade de linguagens de workflow por meio da representação de estados, pois sistemas de workflow típicos são completamente direcionados à modelagem das atividades e eventos.

Padrões de cancelamento, modelam o cancelamento de atividades condicionado à ocorrência de um determinado evento.

Como os padrões de controle de fluxo são referenciados e amplamente utilizados neste trabalho.

Os principais padrões são também acompanhados por exemplos didáticos e descrições gráficas.

Neste capítulo foram apresentados conceitos relacionados à teoria de processos.

A descrição dos principais aspectos das redes de Petri, álgebra de processos, plano de navegação e padrões de workflows norteiam o restante deste trabalho.

A opção pela álgebra de processos para a criação e implementação de uma extensão da linguagem SQL (Structured Query Language) será detalhada.

A SQL (Structured Query Language) é a linguagem de consulta implementada pela maioria dos sistemas gerenciadores de banco de dados relacionais.

O modelo relacional não possui estruturas apropriadas para a representação de processos, requerendo, para isso, uma estrutura de dados adicional.

Assim sendo, a linguagem definição padrão da linguagem SQL não oferece comandos para a fácil manipulação desta estrutura.

Com o objetivo de viabilizar o controle de processos de negócio para um modelo relacional de dados foi definida a Navigation Plan Definition Language (NPDL).

Essa linguagem é uma extensão da linguagem SQL e se baseia no conceito de plano de navegação da arquitetura RiverFish e em operadores de álgebra de processos.

Sistemas de workflow tradicionais são dirigidos a eventos.

Neste caso, não é desejável que todos os estados possíveis dos sistemas sejam explicitamente modelados, uma vez que o enfoque está na ordenação das ações dentro dos processos que os caracterizam.

Sob esta perspectiva, as redes de Petri não seriam o formalismo mais indicado para o tratamento do problema, o que justifica a escolha da álgebra de processos como arcabouço operacional.

Além disso, conforme discutido, a álgebra de processos é um formalismo bastante apropriado para manipulação computacional.

Assim como na álgebra de processos, processos em NPDL são definidos por expressões algébricas.

Em NDPL a expressão algébrica de um processo é construída a partir do conjunto de ações atômicas, de operadores NPDL e do conjunto de todos os processos definidos.

A NPDL contém os operadores mais comuns da álgebra de processos e também define operadores adicionais que modelam comportamentos freqüentes em processos de workflow.

A necessidade desses operadores adicionais será justificada.

Uma ação atômica NPDL é equivalente a uma transação que respeita as propriedades ACID (atomicidade, consistência, independência e durabilidade) em um banco de dados, quando executada, ela é realizada na íntegra ou é totalmente desfeita em caso de problemas na execução.

Assim como geralmente ocorre com as transações, não há nenhuma forma de comunicação direta entre as ações executadas de forma concorrente, as ações só se comunicam por meio de compartilhamento de dados.

Como os comandos NPDL seguintes especificam um processo chamado "ProcessoCalculo" (identificado por P2) que realiza a soma ou a multiplicação convencional de dois números um número indeterminado de vezes.

A NPDL inicialmente foi criada com apenas operadores de encadeamento de ações, o operador de composição seqüencial, o operador de composição alternativa e o operador de composição paralela.

Com estes operadores, é possível atender com facilidade à categoria dos padrões básicos de controle de fluxo.

Com o objetivo de atender a todas as categorias de padrões de controle de fluxo, a NPDL foi enriquecida com outras propriedades e operadores.

A NPDL contém os seguintes operadores, Composição Seqüencial, o termo de processo significa que inicialmente somente o termo está habilitado para execução.

Composição Alternativa, o termo de processo significa que inicialmente ambos termos estarão habilitados para execução.

Composição Paralela, o termo de processo significa que os termos podem ser executados paralelamente, dividindo a linha de execução em duas.

Composição Paralela Entrelaçada, o termo de processo significa que os termos podem ser executados em qualquer ordem, mas não paralelamente.

Composição Multi-Convergente, o termo de processo significa que o termo será habilitado para execução após o término da execução de cada linha de execução do termo.

Composição Discriminatória, o termo de processo significa que o termo será habilitado para execução após o primeiro término de uma linha de execução do termo.

Repetição Ilimitada (operador), o termo de processo significa que o termo pode ser executado, de forma paralela, uma ou mais vezes.

Repetição Numericamente Limitada, o termo de processo significa que o termo deve ser executado, de forma paralela, 5 vezes.

Repetição Limitada por Função (sendo uma função atômica que retorna um número inteiro positivo e não nulo), o termo de processo significa que o termo deve ser executado, de forma paralela, o número de vezes retornado pela função em tempo de execução.

Quando um sistema é composto por mais de uma linha de execução, essas linhas podem ser executadas de forma independente, como no caso de um paralelismo.

Uma linha de execução pode ser vista como um subprocesso.

Execução Condicional (uma função atômica que retorna um valor booleano, verdadeiro ou falso), o termo de processo significa que o termo será habilitado para execução se o valor de retorno da regra (avaliada em tempo de execução) for verdadeiro.

Sendo assim, uma regra na NPDL pode ser entendida como uma condição para a execução de uma atividade.

Execução Condicional Negativa (uma função atômica que retorna um valor booleano, verdadeiro ou falso), o termo de processo significa que o termo será habilitado para execução se o valor de retorno da regra (avaliada em tempo de execução) for falso.

Os comportamentos dos operadores de execução condicional não são representados em álgebra de processos.

Os operadores também não existem na extensão de álgebra de processos ACP, entretanto, seus comportamentos podem ser representados com a combinação de outros operadores de álgebra de processos.

A justificativa da criação de cada um dos novos operadores NPDL será realizada.

Descrição completa da sintaxe NPDL.

Precedências dos operadores da NPDL.

Precedências dos operadores da NPDL.

A seguir são apresentados exemplos da especificação dos padrões de controle de fluxo usando comandos NPDL.

Também são mostradas as expressões correspondentes em álgebra de processos, com o objetivo de identificar as limitações da álgebra de processos na especificação desses padrões e justificar a criação dos operadores adicionais da NPDL.

Quadro síntese dessa especificação.

Definição, Ocorre quando uma atividade em um processo de workflow é habilitada após o término de uma outra atividade no mesmo processo.

A atividade só é habilitada para execução após o término da execução.

Definição, É um ponto no processo de workflow no qual uma linha de execução única se divide em múltiplas linhas de execução que podem ser realizadas paralelamente, possibilitando que as atividades sejam executadas simultaneamente ou em qualquer ordem.

A atividade é executada, habilitando a execução em paralelo (ou seja, em qualquer ordem ou simultaneamente).

Divisão Paralela Caso a linha de execução seja dividida em mais de duas linhas, o mapeamento para álgebra de processos deve combinar mais de um operador binário.

O uso dessa expressão é garantido pelas propriedades de comutatividade e associatividade do operador em NPDL.

O operador de composição paralela da NPDL representa o operador de entrelaçamento da álgebra de processos com a ressalva de que na NPDL não há o conceito de comunicação da ACP.

A função de comunicação foi introduzida na ACP para manter válidos os axiomas da extensão após a introdução do operador de entrelaçamento.

Mas o comportamento da comunicação está embutido no significado do operador de entrelaçamento.

Além disso, não há nenhum padrão de controle de fluxo de workflow que requeira explicitamente sincronização no disparo de ações iniciais de linhas de execução paralelas.

Sendo assim, eliminou-se a possibilidade de comunicação entre ações na NPDL.

Definição, É um ponto no processo de workflow no qual múltiplas atividades paralelas convergem para uma única linha de execução.

Esse ponto tem como objetivo a sincronização das atividades.

A atividade é habilitada somente depois que tiverem sido executadas.

Sincronização Em álgebra de processos.

Caso a sincronização envolva mais de duas linhas de execução, novamente é preciso combinar mais de um operador binário para representá-la.

Definição, É um ponto no processo de workflow no qual um ramo é escolhido dentre os possíveis ramos de atividades.

Essa escolha baseia-se em uma decisão ou em um dado de controle do workflow.

As atividades são habilitadas após a execução, mas somente uma delas será escolhida implicitamente para execução.

Escolha Exclusiva em álgebra de processos.

Caso a escolha envolva mais de duas opções de linha de execução, o mapeamento para álgebra de processos deve combinar mais de um operador binário.

O uso dessa expressão é garantido pelas propriedades de comutatividade e associatividade do operador.

Como uma expressão em álgebra de processos especifica todas as possibilidades de execução de um processo, ela não provê mecanismos para a especificação de decisões tomadas em tempo de execução.

O operador binário composição alternativ da álgebra de processos indica que os dois termos compostos estão habilitados para a execução, entretanto somente um deles será realmente executado.

Neste caso, ele pode tanto representar as características do padrão escolha exclusiva, quanto as características do padrão escolha postergada.

Para representar a escolha exclusiva na NPDL, utiliza-se o operador e o operador adicional.

Uma regra em NPDL é uma função atômica cujo valor de retorno deve ser booleano, ou seja, verdadeiro ou falso.

O operador da NPDL mapeia o comportamento da escolha postergada, enquanto que habilita a atividade associada a ele quando a avaliação da regra (feita em tempo de execução do processo) retorna o valor verdadeiro.

A NPDL possui ainda o operador, que apresenta o comportamento complementar, habilitando a atividade associada a ele quando a regra retorna o valor falso.

Especificação NPDL.

Essa expressão NPDL define que a habilitação das atividades está condicionada à avaliação, em tempo de execução, da regra.

Se o valor de retorno for falso, somente a atividade será habilitada.

Junção Simples, É um ponto no processo de workflow no qual dois ou mais ramos alternativos de atividades se unem sem sincronização.

Conforme ilustra o exemplo a seguir, é preciso combinar mais de um operador binário para representar casos de junção que envolvam mais de duas linhas de execução.

Escolha Múltipla, É um ponto no processo de workflow no qual um ou mais ramos de atividades são escolhidos.

A escolha baseia-se em uma decisão ou dados de controle do workflow.

Inicialmente, uma das três opções estará habilitada.

Não existe uma especificação direta do padrão escolha múltipla em álgebra de processos.

O comportamento deste padrão pode ser representado por meio da combinação de outros padrões.

Para se obter uma expressão algébrica da escolha múltipla, os seguintes passos devem ser seguidos:

Obtenha os termos algébricos correspondentes às opções da escolha múltipla.

No caso do tem-se uma escolha múltipla com duas opções de termos, Gere todos os termos possíveis que indiquem a execução em paralelo dos termos levantados no passo 1.

No caso do os termos paralelos possíveis são, Pela comutatividade do operador, somente um destes termos precisa ser considerado nos passos seguintes.

A expressão final é obtida por meio da composição alternativa dos termos resultantes dos passos, usando o operador, Em uma escolha múltipla com mais de duas opções, o mapeamento segue as mesmas regras descritas acima.

Exemplo de mapeamento de escolha múltipla com opções.
Termos correspondentes às opções da escolha múltipla, Termos paralelos possíveis, Expressão final, Na expressão NPDL, é preciso indicar as escolhas exclusivas, sendo r e r as regras associadas às escolhas exclusivas Definição, É um ponto no processo de workflow no qual múltiplos caminhos convergem para uma única linha de execução.

Se mais de um caminho foi escolhido, então é feita a sincronização das linhas ativas de execução.

Se somente um caminho foi escolhido, então o ramo alternativo de atividades converge sem sincronismo.

Se na escolha múltipla a execução tiver sido encaminhada para a divisão paralela de B e C B || C, então a junção sincronizada aguarda a finalização das ações B e C para habilitar D.

Caso a escolha múltipla dispare somente a execução de B, então D será habilitado após a execução de B.

Caso a escolha múltipla dispare somente a execução de C, então D será habilitado após a execução de C.

Junção Sincronizada em que P' corresponde à especificação da escolha múltipla em álgebra de processos.

Caso a escolha múltipla envolva mais de duas opções de linha de execução, o termo entre parênteses é obtido por meio dos passos descritos anteriormente para a especificação da escolha múltipla.

Exemplo de junção sincronizada com escolha múltipla de opções, Junção Múltipla Definição, É um ponto no processo de workflow para o qual dois ou mais ramos de atividades convergem sem sincronismo.

Se mais de um ramo foi ativado, de forma concorrente, então a atividade posterior à junção é executada a cada vez que é encerrada uma execução de um dos ramos de entrada.

Se na escolha múltipla a execução tiver sido encaminhada para a divisão paralela de B e C B || C, então a junção múltipla executa D, a cada vez que uma linha de execução da divisão paralela é finalizada.

Neste após o término da execução de B e após o término da execução de C.

Caso a escolha múltipla dispare somente a execução de B, então D será habilitado após a execução de B.

Caso a escolha múltipla dispare somente a execução de C, então D será habilitada após a execução de C.

O termo a ser executado na junção deve ser adicionado ao final dos termos resultantes do mapeamento da escolha múltipla, seguindo os passos descritos abaixo:

Tome os termos mapeados da escolha múltipla.

A representação da escolha múltipla em álgebra de processos fica, A cada termo da expressão resultante composto por meio do operador "+ ", daremos o nome fator.

No temos fatores, B || C, B e C.

Para cada fator da expressão resultante do passo 1 que envolva o operador de paralelismo (|*) (no caso do somente o fator B || C), compor sequencialmente os operandos do (|*) e a expressão executada na junção múltipla.
Para os fatores restantes (no caso do B e C), compor sequencialmente cada fator com a expressão executada na junção múltipla.
O resultado final do mapeamento é a composição alternativa dos fatores resultantes dos passos e 3, usando o operador " + ", No caso da escolha múltipla envolver mais de duas opções de linhas de execução, a especificação da junção múltipla em álgebra de processos deve seguir os mesmos passos descritos anteriormente.

Escolha múltipla de B, C e D, convergindo para uma junção múltipla com a atividade E.

Termos mapeados da escolha múltipla.

Transformação dos fatores que envolvem (|*).

Transformação dos fatores restantes.

Resultado final.

Para facilitar o uso do padrão junção múltipla na NPDL, foi criado o operador "& ", que faz de modo automatizado os passos de mapeamento para álgebra de processos.

Sendo P o mapeamento da escolha múltipla e r e r as regras associadas às escolhas exclusivas Discriminador Definição, É um ponto no processo de workflow que espera pelo término da execução de um de seus ramos de entrada antes de habilitar a execução da atividade subseqüente.

A partir desse momento, ele espera o término da execução dos demais ramos de entrada e os "ignora".

Desta forma, diferentemente da Junção Múltipla, o número de ramos ativos de entrada do discriminador não determina o número de vezes que a atividade subseqüente será executada.

Se na escolha múltipla a execução tiver sido encaminhada para a divisão paralela de B e C B || C, então o discriminador habilita a execução de D após o término da linha de execução que for encerrada primeiro.

Se B terminar primeiro, então D será habilitada para execução.

Após C terminar, diferentemente do que ocorre na junção mútlipla, D não será habilitada novamente.

Caso a escolha múltipla dispare somente a execução de B, então D será habilitada após a execução de B.

Caso a escolha múltipla dispare somente a execução de C, então D será habilitada após a execução de C.

A atividade a ser executada no discriminador deve ser permutada nos termos resultantes do mapeamento da escolha múltipla, seguindo os passos descritos na seqüência.

Tome os termos mapeados da escolha múltipla.

A cada termo da expressão resultante composto por meio do operador "+ ", daremos o nome fator.

No temos fatores, B || C, B e C.

Para cada fator da expressão resultante do passo 1 que envolva o operador de paralelismo (|*) (no caso do somente o fator B || C), gerar todos os fatores possíveis resultantes da composição seqüencial de um dos operandos do (|*) com a expressão executada no discriminador.

Além disso, gerar também um fator que seja o resultado da composição seqüencial do próprio fator de origem com a expressão executada no discriminador.
Para os fatores restantes (no caso do B e C), compor sequencialmente cada fator com a expressão executada no discriminador.
O resultado final do mapeamento é a composição alternativa dos fatores resultantes dos passos e 3, usando o operador " + ", No caso da escolha múltipla envolver mais de duas opções de linhas de execução, a especificação do discriminador para álgebra de processos deve seguir os mesmos passos descritos anteriormente.

escolha múltipla de B, C e D, convergindo para um discriminador com a atividade E.
Termos mapeados da escolha múltipla.
Transformação dos fatores que envolvem.
Transformação dos fatores restantes,Resultado final, Para facilitar o uso do padrão discriminador na NPDL, foi criado o operador, que faz de modo automatizado a permutação descrita na especificação em álgebra de processos.

Ciclo Arbitrário Definição, É um ponto em um processo de workflow no qual uma ou mais atividades podem ser feitas repetidamente.

Ciclo Arbitrário É possível representar comportamento ilimitado com o uso de equações recursivas em álgebra de processos.

O ciclo arbitrário do exemplo pode ser representado em álgebra de processos como, Assim como na álgebra de processos, em NPDL, os processos também podem ser definidos em termos de outros processos, Terminação Implícita Definição, Um dado subprocesso pode ser encerrado quando não há nada mais a ser feito, ou seja, quando não há mais atividades ativas no workflow.

Na ACP, o estado final de um processo é representado implicitamente.

É importante considerar a diferença entre um processo que terminou com sucesso e um processo que ficou infinitamente bloqueado.

Esse último caso é denominado deadlock.

Embora não exista um termo específico para representar o estado final de um processo na ACP, existe a constante especial " " que representa o deadlock.

A NPDL, neste caso, se comporta de forma semelhante à álgebra de processos.

Não existe um termo em NPDL que indique estado final de processo.

O símbolo associado ao deadlock em NPDL é o "# ".

Um exemplo de uso do "# " é apresentado na especificação do padrão 19 Atividade Cancelável.

Múltiplas Instâncias Sem Sincronização Definição, Este padrão representa um ponto no workflow no qual múltiplas instâncias de uma atividade podem ser criadas, isto é, há uma facilidade para gerar novas linhas de execução.

Cada uma das linhas de execução gerada é independente das demais.

Além disso, não há a necessidade de sincronizar estas linhas.

Em álgebra de processos, múltiplas instâncias podem ser obtidas por meio da definição de subprocessos recursivos.

Dado o processo exemplo P = A, que permite a execução da atividade A, para definir um processo P' no qual a atividade A possa ter múltiplas instâncias (ou seja, possa ser executada diversas vezes paralelamente), é preciso definir P' como P'= P' || + A.

Para modelar um processo mais complexo, que possa executar múltiplas instâncias de A e que execute outras atividades (sem se preocupar com a sincronização destas instâncias), basta compor o P' com outras atividades usando o operador de paralelismo ||, como em P = P'|| B.

Para facilitar a representação dos padrões de múltiplas instâncias, criou-se na NPDL o operador unário.

Este operador reproduz o comportamento que define a criação de subprocessos recursivos para a representação de múltiplas instâncias.

Múltiplas Instâncias Com Conhecimento Prévio em Tempo de Projeto Definição, Ocorre quando, em uma instância de processo, uma atividade é habilitada múltiplas vezes, sendo que o número de instâncias a serem executadas da atividade em questão é conhecido em tempo de projeto.

Após o término da execução de todas as instâncias, uma outra atividade do workflow é habilitada para execução.

Dado o processo exemplo P = A, que permite a execução da atividade A, para definir um processo P' no qual a atividade A possa ter um determinado número de instâncias, por 3, poderíamos definir P' como P'= A || A || A.

Diferentemente do padrão 12, este padrão exige que todas as instâncias sejam finalizadas antes de habilitar a execução da próxima atividade do workflow.

Neste caso, para que as atividades sejam sincronizadas, basta compor a atividade "repetitiva" com a atividade seguinte por meio do operador de composição seqüencial, como foi feito na especificação do padrão sincronização.

Por para modelar um processo que execute as instâncias de A e, após o termino da execução destas instâncias, execute outras atividades, basta compor sequencialmente P' com outras atividades usando o operador (|*), como em P = P' B C.

A NPDL possui uma variação do operador que permite indicar o número de vezes que o termo deve ser instanciado e executado.

O número associado ao deve ser um número inteiro positivo e não nulo.

Por o comando NPDL define o processo P que deve ou executar a atividade C ou executar 5 instâncias da atividade A e, após finalizada a execução das instâncias, habilitar a execução de B.

Múltiplas Instâncias Com Conhecimento Prévio em Tempo de Execução Definição, Ocorre quando, em uma instância de processo, uma atividade é habilitada múltiplas vezes, sendo que o número de instâncias a serem executadas da atividade em questão é conhecido em tempo de execução.

Após o término da execução de todas as instâncias, uma outra atividade do workflow é habilitada para execução.

Como já discutido anteriormente, a álgebra de processos mapeia todas as possibilidades de execução de um processo.

Por meio dela é possível modelar um processo com comportamento repetitivo ilimitado ou com um número de repetições definidos em tempo de projeto, como é o caso dos dois padrões de múltiplas instâncias anteriores.

Entretanto, não conseguimos limitar com álgebra de processos o número de instâncias a serem criadas se esse número não for conhecido em tempo de projeto, pois esta é uma preocupação associada à instanciação e execução do processo.

A NPDL possui uma segunda variação do operador que permite a associação de uma função para determinar em tempo de execução quantas instâncias da atividade serão criadas.

A função que pode ser associada ao é uma função atômica cujo valor de retorno é um inteiro positivo e não nulo.

A função será avaliada em tempo de execução do processo.

Sendo f uma função que retorna um número inteiro e maior que zero 1Múltiplas Instâncias Sem Conhecimento Prévio em Tempo de Execução Definição, Ocorre quando, em uma instância de processo, uma atividade é habilitada múltiplas vezes.

O número de instâncias a serem executadas da atividade em questão não é conhecido nem em tempo de projeto, nem em tempo de execução, ou seja, ele não é conhecido antes do momento de criação das instâncias da atividade.

Após o término da execução de todas as instâncias criadas, uma outra atividade subseqüente do workflow é habilitada para execução.

Este padrão tem sua especificação em álgebra de processos bastante semelhante à do padrão 12.

A diferença é a necessidade de sincronização das instâncias criadas antes da habilitação da próxima atividade do workflow.

Para efetuar tal sincronização, utiliza-se o operador de composição seqüencial (|*).

Por um processo que possa executar múltiplas instâncias de A e que só execute B após a sincronização de todas as instâncias de A criadas pode ser definido como, 1Escolha Postergada Definição, É um ponto no processo de workflow no qual um entre vários ramos de atividades é escolhido.

Diferentemente da Escolha Exclusiva, na Postergada a escolha não é feita de modo explícito, ou seja, não se baseia em dados ou em uma decisão.

As diferentes alternativas são oferecidas ao ambiente, que poderá executar apenas uma delas.

Após a execução de A, B e C são habilitadas, mas somente uma delas será escolhida explicitamente para execução.

Como já discutido no mapeamento do padrão de escolha exclusiva, o operador "+ " da álgebra de processos representa o comportamento exato da escolha postergada.

Roteamento Paralelo Entrelaçado, ocorre quando um conjunto de atividades é executado em qualquer ordem arbitrária, ou seja, cada atividade do conjunto é executada uma vez, sendo que a ordem é decidida em tempo de execução e duas atividades nunca são executadas ao mesmo tempo.

A atividade A é executada, habilitando a execução de B seguida pela execução de C, ou a execução de C seguida pela execução de B.

Após o término da execução de B e C ou C e, a atividade D é habilitada para execução.

Caso as linhas de atividades possíveis se dividam em mais de duas, o mapeamento para álgebra de processos deve combinar mais de um operador binário (|*) P = A (B || (C || (D || E))) F Utilizou-se para este mapeamento o operador (|*) da álgebra de processos, assim como no padrão divisão paralela.

Na álgebra de processos, tomando duas ações atômicas a e b, se dissermos que um processo P é tal que P = a || b é equivalente dizer que P = a b + b a (considerando que (a, =).

A álgebra de processos não restringe a forma como a implementação do processo P deve ser feita (não obriga que as ações a e b sejam realmente executadas concorrentemente), ela apenas garante que ao final da execução de P, as ações a e b foram executadas.

Como esta é uma preocupação de implementação, definimos na NPDL um novo operador binário, o "| *", que implementa o comportamento do roteamento paralelo entrelaçado, enquanto o operador (|*) da NPDL representa o paralelismo real divisão paralel.

Internamente, o serviço de execução de workflows definidos em NDPL traduz a expressão para a expressão equivalente Tal quais os operadores (|*), "+ " e (|*), o operador "| *" é associativo, o que possibilita a representação de um roteamento paralelo entrelaçado entre mais de duas atividades.
A associatividade do operador "| *" tem um efeito colateral que pode ser notado quando um ou mais termos operandos do "| *" precisam ser tratados como atividades atômicas.

Por se a intenção real de uma definição de processo como é garantir que A, B e C sejam executados em qualquer ordem (mas não paralelamente) e que C nunca seja executado entre a execução de A e B ou B e, a forma correta de definir o processo em NPDL é expandindo o termo, tornando a definição desta forma, 1Marco Definição, Ocorre quando a habilitação de uma atividade é dependente de um estado específico da instância de um processo.

Ou seja, a atividade só é habilitada se um certo marco tiver sido atingido e ainda não tiver expirado.

Considere três atividades A, B e C.

A atividade A somente será habilitada depois que a atividade B tiver sido executada, mas se C não tiver sido executada ainda, ou seja, A não estará habilitada antes da execução de B e nem depois da execução de C.

A rede de Petri ilustra o padrão.

O estado entre B e C é modelado pelo lugar M.

Este lugar é o marco para A.

Note que a atividade A não remove a ficha de M, ela somente testa a presença da ficha.

No caso de marcos que envolvam atividades de uma só linha de execução, a especificação em álgebra de processos é direta, exigindo apenas a definição de um subprocesso recursivo que represente a possibilidade da execução da ação do marco repetidas vezes até que a condição do marco não tenha expirado aind.

Por o processo P ilustrado, é representado em álgebra de processos por, Quando o padrão marco envolve atividades de mais de uma linha de execução, não há uma regra bem definida para a especificação, cada caso tem que ser analisado separadamente.

Entretanto, assim como no mapeamento dos ciclos arbitrários, subprocessos e equações recursivas devem ser utilizados para a representação em álgebra de processos.

O processo é um exemplo de marco que envolve duas linhas que são executadas em paralelo.

É importante ressaltar que no processo é possível a ocorrência de um deadlock.

Se a atividade C for executada logo após a execução de B, sem possibilitar que F seja executada, a segunda linha de execução da divisão paralela nunca vai ser encerrada.

Como é necessário o sincronismo das linhas da divisão para que a atividade H possa ser habilitada, se F não for executada o processo entrará em deadlock.

Esta possibilidade do deadlock foi representada na expressão em álgebra de processos pelo termo A (B C D || EG) H.

A representação em NPDL deste padrão consiste na tradução da especificação em álgebra de processos para comandos de definição de processos, sendo que nesta definição podem ser utilizados todos os operadores NPDL definidos anteriormente.

Atividade Cancelável Definição, Ocorre quando uma atividade pode ser desabilitada durante a execução da instância do processo.

Quando a atividade é desabilitada, é necessário remover a linha que controla a execução da atividade em questão.

É possível representar o comportamento do padrão atividade cancelável em álgebra de processos por meio da substituição, na expressão do processo, da atividade que permite cancelamento por um termo envolvendo o símbolo de deadlock " ".

Esta atividade pode ser representada alternativamente composta com " ", por meio do operador "+ ".

Por se no processo P = A B (C +, B é uma atividade que pode ser cancelada, então o mapeamento correto do processo deve ser, P = A (B +) C +.

O símbolo "# " na NPDL representa o " " da álgebra de processos.

Caso Cancelável Definição, Ocorre quando a instância do workflow pode ser removida completamente.

Este padrão está inteiramente associado ao workflow em seu tempo de execução e por isso não recebe representação na álgebra de processos.

Toda instância de processo definido em NPDL pode ser cancelada em qualquer instante de sua execução, sendo esta, uma responsabilidade do serviço de execução.

Como conclusão do Capítulo 3, ilustrar-se-á uma especificação completa em NPDL, retomando o sistema de tratamento de reclamações utilizado como exemplo de modelagem em rdP.

Mostra novamente o modelo do sistema em rdP, desta vez, adicionando letras maiúsculas como rótulos para as transições.

Sistema de processamento de reclamações O primeiro passo no sistema é o registro da reclamação, e como conseqüência um questionário é enviado ao reclamante.

A reclamação é avaliada ao mesmo tempo em que o questionário é enviado.

Se o reclamante não retornar o questionário preenchido dentro de semanas o prazo de retorno é considerado expirado e o resultado do questionário será descartado.

Após a avaliação, uma reclamação pode ser processada ou não.

A reclamação somente é processada após o processamento do questionário ou após o prazo de retorno ter expirado.

Após estas atividades, a reclamação é arquivada.

Esse caso ilustra, além de um ciclo, o uso de vários padrões de controle de fluxo, divisão paralela, após a atividade A (registro), que habilita a execução paralela de B (envio do questionário) e F (avaliação).

Escolha postergada, entre as atividades C (processamento do questionário) e D (expiração do prazo).

Escolha exclusiva entre as atividades G (processamento requerido) e H (omissão) e entre L (OK processamento correto) e K (NOK processamento incorreto).

Marco para a atividade I (processamento da reclamação) e, finalmente, sincronização para a execução da atividade E (arquivamento).

Conforme discutido anteriormente, é possível especificar esses padrões em álgebra de processos e em NPDL.

Em álgebra de processos, o sistema de tratamento de reclamações é definido pelo processo P, É importante frisar que em álgebra de processos não é possível diferenciar uma escolha exclusiva de uma escolha postergada.

Como resultado, a NPDL permite a definição de um processo P que representa com mais precisão o comportamento do sistema de tratamento de reclamações, sendo r uma regra que verifica alguns atributos manipulados pela atividade J (verificação do processamento) e r uma regra que verifica alguns atributos manipulados pela atividade F (avaliação).

O objetivo deste exemplo é mostrar como a NPDL pode simplificar uma modelagem e ainda expressar aspectos do sistema que a álgebra de processos sozinha não está habilitada a representar.

Esta maior capacidade de representação se deve aos operadores adicionados à NPDL para atender todos os padrões de controle de fluxo.

Implementação da NPDL A NPDL, apresentada no capítulo 3, é uma linguagem para auxiliar a criação e manutenção da representação de processos em um banco de dados relacional, implementada como uma extensão da linguagem SQL.

O interpretador da NPDL é parte da ferramenta NavigationPlanTool.

A NavigationPlanTool foi desenvolvida para atender às características especificadas pela WfMC (Workflow Management Coalition) para um sistema de workflow.

Em um sistema de workflow é possível identificar três interfaces,projeto e definição dos processos, instanciação e controle dos processos.

Interação com usuários e aplicativos.

Embora padrões venham sendo definidos para cada uma destas interfaces, esses padrões estão mais voltados para a sintaxe que para a semântica dos mecanismos de controle de fluxo.

Os arcabouços formais para especificação de workflows, como as redes de Petri e as álgebras de processos, fazem-se necessários para eliminar a ausência de padronização semântica.

A NPDL atende à interface 1 de um sistema de workflow.

Para as demais interfaces, a NavigationPlanTool também provê mecanismos para o controle da instanciação de processos, disponibilizando serviços para a manutenção de instâncias de processos e serviços para o monitoramento da execução do plano de navegação.

Em outubro de 2005, a NavigationPlanTool foi apresentada na Sessão de Demos do XX Simpósio Brasileiro de Banco de Dados.

Características de um sistema de workflow A NavigationPlanTool foi implementada na forma de uma biblioteca de funções.

Esta biblioteca provê mecanismos para a manutenção de ações e processos em bancos de dados relacionais e para o controle de instanciação e execução desses processos.

A biblioteca disponibiliza operações como criação/remoção de instâncias e serviços para o monitoramento da execução do plano de navegação.

Esses serviços são também responsáveis pela manutenção de logs de execução de planos de navegação no banco de dados e pela recuperação de execuções que tenham sido interrompidas antes de serem finalizadas.

A linguagem de programação escolhida para o desenvolvimento da NavigationPlanTool é a Java (Java Platform Standard Edition JSE 50), por ser portável e por contar com a JDBC API Java DataBase Conectivity Application Programming Interface.

A JDBC habilita programas Java a executarem comandos em SQL e interagirem com qualquer banco de dados compatível com a definição padrão da linguagem SQL, tornando assim a NPDL uma extensão independente de sistema gerenciador de banco de dados.

Por ser desenvolvida na forma de biblioteca de funções, a NavigationPlanTool pode ser integrada de forma fácil a outras aplicações Java.

A NavigationPlanTool é composta por três serviços, o Interpretador NPDL, o Serviço de Instanciação de Processos e o Serviço Monitor de Execução de Instâncias de Processos.

Nas seções seguintes, cada um desses serviços será detalhado.

Outras informações sobre o desenvolvimento, estudos de caso ou instruções para o uso da NavigationPlanTool podem ser obtidos no documento.

A função do Interpretador NPDL é receber um comando de entrada e efetuar as análises léxica, sintática e semântica.

Caso o comando seja identificado como um comando NPDL válido, ele é executado sobre as relações criadas pelo próprio interpretador em um banco de dados relacional, para o armazenamento dos dados dos processos, ações e instâncias.

O interpretador é uma implementação da interface java sql Connection de Java, que recebeu o nome NPDLConnection.

A interface java sql Connection representa uma conexão com um banco de dados específico.

A partir de um objeto de uma classe de conexão é possível executar consultas SQL sobre o banco de dados.

Criar uma conexão NPDL com um banco de dados significa preparar este banco para ser usado no controle de processos de negócio via NavigationPlanTool.

Quando uma aplicação instancia um objeto da classe NPDLConnection, a rotina de iniciação do objeto verifica a existência das relações utilizadas pela NavigationPlanTool no banco de dados alvo da conexão.

Caso essas relações ainda não existam no banco, elas são criadas pela rotina de iniciação.

Uma conexão do tipo NPDLConnection permite que tanto comandos NPDL quanto comandos SQL sejam submetidos ao banco de dados.

Ao receber um comando, uma conexão NPDL o verifica e, caso o identifique como um comando NPDL válido, executa as rotinas que traduzem o comando NPDL para operações em SQL (padrão da linguagem).

Esses comandos SQL são então executados sobre as relações associadas à NavigationPlanTool.

Quando o comando submetido para a conexão NPDL não é reconhecido como um comando NPDL válido, ele é repassado diretamente ao banco de dados.

As estruturas de dados criadas em banco de dados relacional baseiam-se nas estruturas sugeridas pela arquitetura RiverFish, descrita na Seção 25 deste texto.

Para representar processos de negócio e controlar sua instanciação e execução por meio da abordagem proposta por esta dissertação, são necessárias as estruturas descritas no diagrama.

A notação utilizada no diagrama é a especificada em para Modelos Entidade-Relacionamento Estendidos.

Em NPDL, o plano de navegação de um processo é definido por uma expressão algébrica que pode envolver ações, operadores, regras, funções, números e outros processos.

O relacionamento REL_PLANO_NAVEGAÇÃO entre as entidades PROCESSO e PASSO representa esta definição.

A especialização da entidade PASSO é total e disjunta, ou seja, todo elemento dessa entidade obrigatoriamente possui um dos seguintes tipos, processo, ação, operador, regra que é utilizada associada aos operadores % e "%!.

Função (que é utilizada associada ao operador) e número (que é utilizado associado ao operador).

Diagrama Entidade-Relacionamento.

Antes de ser armazenada em banco de dados por meio do relacionamento REL_PLANO_NAVEGAÇÃO, a expressão algébrica de processo é convertida em uma expressão equivalente na notação prefixa.

A expressão prefixa é mais apropriada para o armazenamento em banco de dados e para manipulação nos algoritmos que avaliam a validade da expressão.

O atributo ordem_passo do relacionamento REL_PLANO_NAVEGAÇÃO é utilizado para armazenar a posição do passo dentro da expressão algébrica.

Esta informação é necessária para a posterior recuperação da expressão do processo.

A entidade INSTÂNCIA_PROCESSO e o relacionamento REL_LOG_INSTANCIA estão associados à instanciação e ao controle de execução de processos e por isso são utilizadas pelos outros serviços da NavigationPlanTool.

Um elemento da entidade INSTÂNCIA_PROCESSO está sempre associado a um elemento da entidade PROCESSO, por meio do relacionamento REL_INSTANC_PROCESSO.

Uma instância representa uma requisição a um processo, por isso possui como atributos o usuário que efetuou a requisição e a sua data.

O relacionamento REL_LOG_INSTÂNCIA representa os dados relativos ao estado da execução dos passos que compõem o plano de navegação de uma instância de processo.

Cada elemento de REL_LOG_INSTÂNCIA representa a execução de um passo em uma determinada instância de processo.

O atributo estado_execução do relacionamento REL_LOG_INSTÂNCIA pode assumir um dos valores descritos na tabela.

Os tipos de passos que são realmente "executáveis" são AÇÃO, REGRA E FUNÇÃO.

Por este motivo, somente estas três entidades da especialização de PASSO possuem o atributo chamada, que representa uma instrução para a execução do passo.

O Apêndice B deste texto traz exemplos de como os comandos NPDL são traduzidos para comandos SQL e depois aplicados sobre o modelo físico de dados que representa o diagrama.

Possíveis estados para passos.

O Serviço de Instanciação de Processos disponibiliza funções para a criação de instâncias de processos.

Uma instância representa uma requisição de um determinado processo.

Toda instância possui uma referência para o processo ao qual está associada, e pode também armazenar informações sobre o usuário que a requisitou e a sua data de criação.

Quando a criação de uma instância é solicitada à NavigationPlanTool por uma aplicação, o serviço de instanciação retorna à aplicação um identificador da instância.

Por meio desse identificador, a aplicação pode obter os demais dados da instância e interagir com o serviço que controla a execução do plano de navegação da instância.

O serviço Monitor de Execução de Instâncias de Processos é responsável por ligar uma instância de processo aos seus dados de execução (plano de navegação).

Neste serviço, estão agrupadas as funções que iniciam e monitoram a execução do plano de navegação de uma instância de processo.

Para controlar a execução do plano de navegação, são utilizados elementos do relacionamento REL_LOG_INSTÂNCIA e estruturas de dados em memória.

Quando a execução de uma instância é iniciada, o plano de navegação associado a ela é obtido no relacionamento REL_PLANO_NAVEGAÇÃO.

A partir da expressão algébrica prefixa que representa o plano de navegação, é construída uma árvore de expressão da instância.

As árvores de expressão são utilizadas pelo serviço monitor para determinar a ordem de execução dos passos de um plano de navegação.

Neste trabalho, denominou-se de árvore de navegação a árvore de expressão de uma instância de processo.

Após a criação da árvore de navegação, o monitor realiza a recuperação do estado atual da execução da instância, por meio de consultas aos dados mantidos pelo relacionamento REL_LOG_INSTÂNCIA.

Esta operação só é realizada para as instâncias que tiveram o seu processo de execução iniciado, mas ainda não finalizado.

Cada passo iniciado, finalizado ou cancelado do plano de navegação de uma instância resulta na inserção ou atualização de um registro no log.

Instâncias que não iniciaram ao menos um passo de seu plano de navegação não possuem informações gravadas no log.

A execução de instâncias distintas de um mesmo processo pode resultar em logs diferentes.

Isso ocorre porque o plano de navegação mapeia todas as possibilidades de execução de um processo, mas são os dados da instância que determinarão o comportamento final de cada nova execução desse processo.

Muitas linguagens para a modelagem de workflows e seus mecanismos de controle de execução afirmam que utilizam formalismos como rdPs ou álgebras de processos como base para o seu funcionamento.

Aalst, em, critica o fato de poucos explicitarem a forma como isso é feito.

Segundo o autor, é importante que o formalismo e sua forma de implementação sejam claramente explicitados para melhorar a qualidade e a aplicabilidade da linguagem.

Atendendo a crítica feita por Aalst, a próxima seção deste texto detalha a implementação do Serviço Monitor de Execução de Instâncias de Processos da NavigationPlanTool, com o objetivo de mostrar como as propriedades da álgebra de processos são utilizadas, neste trabalho, para facilitar o controle e execução de processos.

A "navegação" pelo plano de uma instância de um processo é quem determina a ordem de execução dos passos desse processo.

Os algoritmos do serviço monitor utilizam a semântica dos operadores da NPDL e regras de transição da álgebra de processos para percorrer uma árvore de navegação.

Um nó de uma árvore de navegação pode representar um dentre três tipos de elementos, um operador NPDL, uma ação ou um processo.

Uma árvore de navegação é uma árvore binária completa, ou seja, todo nó pertencente a ela é "folha", ou possui dois "filhos".

Os nós internos da árvore de expressão representam sempre operadores binários da NPDL, enquanto que os nós folhas representam ações ou processos.

Um processo P, cuja definição em NPDL é P, sendo a, b, c e d ações previamente definidas, tem sua árvore de navegação ilustrada.

Árvore de navegação do processo P.

Como os nós das árvores de navegação representam também os possíveis passos de execução, um outro atributo importante de um nó é o seu estado atual.

Todos os nós de uma árvore de navegação têm sempre um estado definido.

Um nó, em um dado momento, pode estar em um dos seguintes estados, Não iniciado Iniciado Finalizado Cancelado O serviço monitor de execução oferece para as aplicações que utilizam a NavigationPlanTool as seguintes funcionalidades, Obtenção dos possíveis passos para a execução esta função retorna para a aplicação os nomes dos passos que a instância pode executar, considerando o seu estado atual.

Um passo na NPDL pode ser uma ação, uma regra ou uma função que retorna um número inteiro.

Indicação do início da execução de um passo esta função recebe da aplicação o nome de um passo.

Caso ele seja um passo atual válido, então é criado um registro na relação de log indicando que o passo foi iniciado.

A cada passo iniciado está associado um identificador que permite localizar no log o registro referente a esse passo.

O identificador do passo Cabe ressaltar que todas as funcionalidades são aplicadas sobre uma determinada instância de processo.

Iniciado é retornado para a aplicação.

Os estados dos nós da árvore de navegação são atualizados para refletir o início da execução do novo passo.

Indicação do fim da execução de um passo esta função recebe da aplicação um identificador de um passo já iniciado.

Caso ele seja um identificador válido, o registro que representa o passo na relação de log é atualizado, indicando que a sua execução foi finalizada.

Os estados dos nós da árvore de navegação são atualizados para refletir o fim da execução do passo.

Indicação do cancelamento da execução de um passo esta função recebe da aplicação um identificador de um passo já iniciado.

Caso ele seja um identificador válido, o registro que representa o passo na relação de log é atualizado, indicando que a sua execução foi cancelada.

Os estados dos nós da árvore de navegação são atualizados para refletir o cancelamento da execução do passo.

É importante destacar que as ocorrências de, ou modificam o estado da instância.

Quando a funcionalidade é requerida pela aplicação, o serviço monitor percorre a árvore para obter os passos válidos.

Se a execução de instância acaba de ser iniciada, todos os nós de sua árvore de navegação possuem estado atual "Não iniciado".

Se a execução da instância já tiver sido iniciada em alguma execução anterior do serviço monitor, haverá registros relativos à instância no log e eles deverão ser "carregados" para a árvore de navegação.

Isso é feito por meio de uma atualização nos estados dos nós correspondentes aos passos registrados como iniciados, finalizados ou cancelados no log.

O percurso e a obtenção de passos válidos podem ser descritos de forma simplificada pelo algoritmo do procedimento recursivo obtenha próximo passo s, descrito na tabela.

O monitor de execução começa a percorrer a árvore de navegação a partir de seu nó raiz.

Portanto, a primeira chamada de obtenha próximo passo s recebe no parâmetro nó Atual o nó raiz e no parâmetro passos Válidos um conjunto vazio.

Ao final da execução do procedimento, o conjunto passos Válidos contém os passos atualmente habilitados para a execução da instância.

Os operadores de execução condicional, execução condicional negativa, repetição ilimitada, repetição numericamente limitada e repetição limitada por função não são tratados como nós na árvore de navegação.

Eles são tratados como atributos de um nó da árvore por influenciarem a execução de todo o ramo iniciado pelo nó ao qual estão associados.

Quando uma ação ou trecho de processo é delimitado por algum dos operadores de execução condicional, a regra que condiciona a execução é atribuída ao nó que representa a ação delimitada ou ao nó que é o início do ramo com o trecho de processo delimitado.

A linha 5 do algoritmo obtenha próximo passo s inicia o tratamento de nós cuja execução esteja associada a avaliação de uma regra.

O mesmo ocorre com as ações repetitivas ou trechos de processos repetitivos, o nó que representa a ação ou início do trecho na árvore é rotulado como repetitivo, e caso esta repetição seja limitada por um número ou uma função, este número ou função é associado ao nó.

Sempre que um nó possuir uma regra ou função associada, é necessário que esta regra ou função seja executada antes que o nó possa ser "visitado" pelo algoritmo.

A tarefa de execução da regra ou função, assim como no caso das ações atômicas, é de responsabilidade da aplicação que usa a NavigationPlanTool.

Por isso, as regras e funções também são retornadas pelo procedimento obtenha próximo passo s à aplicação como passos atuais válidos.

São considerados operadores básicos em NPDL os operadores composição seqüencial, composição alternativa e composição paralela.

Os operadores de composição paralela entrelaçada, composição multi-convergente, composição discriminatória e todos os de repetição, conforme discutido na Seção 3deste texto, são operadores que podem ter seu comportamento expresso por meio da combinação dos operadores básicos.

Por este motivo, eles não são explicitamente tratados pelo procedimento obtenha próximo passo s (linhas 21, 54, 56 e 58 do algoritmo), mas sim por procedimentos de mapeamento que os eliminam da árvore de navegação.

Esses mapeamentos são os descritos para os padrões 17 Roteamento Paralelo Entrelaçado, 8 Junção Múltipla, 9 Discriminador e todos os de Múltiplas Instâncias, na Seção 32.

O mapeamento substitui estes operadores por ramos de nós que utilizam somente os operadores básicos e que expressem o mesmo comportamento.

Processos em NPDL que envolvam em sua definição outros processos têm seu tratamento explicitado a partir da linha 6do algoritmo do procedimento obtenha próximo passo s.

A árvore de navegação para o processo referenciado é criada e "conectada" a árvore de navegação da instância, substituindo o nó que representava o processo.

Após a substituição do nó de processo pela árvore que o representa, o procedimento de obtenção dos passos válidos é aplicado sobre o nó raiz da árvore do processo referenciado.

Processos recursivos requerem um tratamento diferenciado.

Quando o algoritmo de percurso se depara com um nó que representa o próprio processo em execução, ele chama uma outra rotina (linha 61 do procedimento obtenha próximo passo s), responsável por realizar a "expansão" da recursão.

Essa rotina faz uma cópia da árvore de navegação e a "conecta" à árvore que lhe deu origem, substituindo o nó que representava a recursão.

A rotina garante ainda que ocorra apenas um nível de expansão por nó recursivo em cada chamada externa do procedimento obtenha próximo passo s.

Essa restrição é necessária para garantir que o procedimento não entre em um ciclo infinito, expandindo indefinidamente os nós recursivos.

Para que o procedimento obtenha próximo passo s funcione de maneira apropriada, toda mudança de estado de um nó folha da árvore de navegação requer uma Neste contexto, entende-se por chamada externa uma chamada que tenha sido originada por uma aplicação que utilize a NavigationPlanTool.

Atualização do estado dos seus nós ancestrais.

Para possibilitar esta operação, todo nó mantém um apontador para o seu nó "pai", além dos apontadores para os nós "filho esquerdo" e "filho direito".

O algoritmo do procedimento recursivo atualizaEstadoÁrvore, listado na tabela, descreve como a atualização dos nós da árvore de navegação é feita.

Em uma estrutura de dados de árvore, um nó A é dito ancestral de algum outro nó N, se A fizer parte do conjunto de nós pertencentes ao caminho entre a raiz da árvore e N.

O início e a finalização de regras ou funções implicam somente na atualização do estado associado à própria regra ou função, não requerendo, portanto, a atualização de outros nós da árvore.

No procedimento atualizaEstadoÁrvore somente são analisados os nós de operadores básicos.

O atualizaEstadoÁrvore é executado sempre que as funcionalidades, e do serviço monitor de execução são aplicadas sobre ações atômicas.

Mas estas funcionalidades só podem ser aplicadas sobre ações válidas, retornadas pelo procedimento obtenha próximo passo s.

Sendo assim, os nós ancestrais de um nó de ação passado como parâmetro para atualizaEstadoÁrvore sempre representarão operadores básicos, uma vez que a execução do procedimento obtenha próximo passo s já "eliminou" os nós ancestrais que representavam os demais operadores.

A lógica que define como são feitos o percurso na árvore de navegação e a atualização dos estados dos nós de operadores está fundamentada nas regras de transição para os operadores da álgebra de processos, definidas na Seção 2deste texto.

É possível que um determinado passo válido possua mais de um nó representado na árvore de navegação em um dado momento.

Ao iniciar a execução da instância representada pela árvore, apenas um passo está habilitado a ação a.

No entanto, dois nós de ramos diferentes da árvore de navegação habilitaram esta ação os nós denominados de x e y.

Quando a aplicação indicar que ação a foi iniciada e, posteriormente, finalizada, as ações b e c devem ser habilitadas para execução.

Somente após o início da execução de uma das duas ações é possível saber se a ação a, executada anteriormente, era a representada pelo nó x ou a representada pelo nó y.

Árvore de navegação do processo P.

Para tratar de forma adequada a situação descrita, o serviço monitor efetua a chamada do procedimento atualizaEstadoÁrvore para cada um dos nós válidos atuais que representam a ação alvo da mudança de estado.

Isso garante que nenhum ramo de execução possível seja desconsiderado pelo procedimento obtenha próximo passo s.

Quando os diferentes nós válidos atuais que representam a ação a ser iniciada forem descendentes de um mesmo nó de paralelismo, é necessário um tratamento diferenciado.

Mostra os estados atribuídos aos nós no início da execução de uma instância do processo P.

A sigla "N" representa o estado "Não iniciado", "I" representa "Iniciado" e "F", "Finalizado".

Inicialmente, há quatro nós ativos que na figura estão destacados por um círculo tracejado.

De acordo com a expressão do processo, a ação a pode ser executada duas vezes.

A Figura mostra como ficaria os estados dos nós da após o início e fim da execução da ação a como passo inicial (caso fosse aplicado o procedimento atualiza EstadoÁrvore sobre os dois nós válidos que a representam).

É possível verificar que a árvore não expressa o estado em que o sistema deveria se encontrar, pois não permite uma segunda execução da ação a.

Estados dos nós na árvore de navegação do processo.

O tratamento de casos de ações representadas por mais de um descendente de um mesmo nó de paralelismo exige que sejam feitas replicações do ramo de paralelismo.


Exemplo de replicação de ramo em uma árvore de navegação As replicações dos ramos são unidas por operadores de composição alternativa e conectadas à árvore de navegação em substituição ao nó de paralelismo fonte do conflito.

O procedimento atualizaEstadoÁrvore é então aplicado somente uma vez em cada ramo replicado, sendo que em cada ramo, ele é aplicado sobre um nó diferente.

Desta forma, a árvore de navegação após a execução da ação a continua representando o comportamento definido pelo processo P = a + || a +.

O serviço monitor de execução considera que a execução de uma instância foi finalizada com sucesso quando o estado do nó raiz de sua árvore de navegação estiver assinalado como "Finalizado".

Como conclusão deste capítulo, esta seção retomará o exemplo do processo de Aquisição de Item de Acervo da Biblioteca do IME USP.

O objetivo é ilustrar, por meio de uma simulação de execução, o funcionamento dos algoritmos de obtenção de passos válidos e de atualização de estado de uma árvore de navegação.

Considere que o conjunto de regras e o conjunto de ações pertencentes ao sistema de Aquisição são definidos, respectivamente, como R ={r } e A ={a,a,a,a,a}, sendo que, r verifica se os dados do pedido estão completos e se há verba disponível a prioriza itens do pedido a cota itens do pedido a libera pedido para compra a registra recebimento da compra a registra problema com a compra.
A Aquisição pode ser especificada em NPDL pelo processo P tal que, Estas expressões diferem da especificação em álgebra de processos apresentada na Seção 2pelos seguintes aspectos, O passo de verificação do pedido e a indicação de recebimento de verba são tratados como uma regra na NPDL, representando de forma melhor as características do processo de Aquisição.

A execução das atividades envolvidas na Aquisição só estará habilitada se o pedido for válido e se houver verba disponível.

Na especificação em NPDL, não foi representada a possibilidade de cancelamento do pedido em cada passo do processo de Aquisição.

Conforme descrito na especificação do padrão "Caso Cancelável", na Seção 326, esta característica está associada ao processo em seu tempo de execução.

Na NavigationPlanTool, a execução de uma instância de processo pode ser interrompida quando for desejado.

As ações de priorização e cotação de pedidos (a e a) foram compostas por meio do operador (|*), em substituição ao operador.

Esta substituição foi feita com o objetivo de exemplificar o mapeamento do operador "|*" em operadores básicos da NPDL.

Este mapeamento acontecerá durante a simulação da execução.

O termo a |* a pode ser repetido um número irrestrito de vezes antes da liberação do pedido para a compra (ação a), por isso o termo pertence ao processo recursivo P.

Após a liberação do pedido (ação a), é possível que haja a ocorrência de problemas na compra.

Esses problemas são registrados pelo processo de Aquisição por meio da ação a.

Neste caso, utilizou-se o operador de repetição associado à ação a, para representar a possibilidade de ocorrência de mais de um problema na compra.

A árvore de navegação inicial de uma instância do processo de Aquisição está representada.

À esquerda superior de cada nó há uma letra indicando um dos seguintes estados, "N" para "Não iniciado", "I" para "Iniciado" e "F" para "Finalizado".

É importante observar que, associada ao nó que representa o processo P na árvore, aparece a regra r.

Assim como os nós da árvore, a regra também possui uma indicação de seu estado.

Ligado ao nó da ação a, está o operador, indicando que a ação pode ter sua execução repetida.

Estado inicial da árvore de navegação para o processo Aquisição No início da execução, o procedimento obtenha próximo passo s é aplicado sobre o nó raiz da árvore.

Durante o percurso na árvore, o procedimento se depara com a regra r e a adiciona ao conjunto de passos atuais válidos (de acordo com a linha 6 do algoritmo de percurso).

Como a execução dos demais passos depende da execução do passo condicionado a r, nenhum outro passo pode ser executado inicialmente.

Considerando agora que a regra r seja executada e seu valor de retorno seja "Verdadeiro", uma nova aplicação do procedimento obtenha próximo passo s sobre o nó raiz da árvore parará no nó x.

O nó x representa o processo P e, de acordo com a linha 6do algoritmo de percurso, ele precisa ser substituído por sua árvore de navegação.

A continuação do percurso na árvore detecta a presença do operador "|*" em dois lugares distintos (nós x e y).

Como especifica a linha 55 do algoritmo de percurso, este operador requer um tratamento especial.

Árvore de navegação após a substituição de P.

Em NPDL, um termo da forma a|*b é equivalente a a b + b a.

Mostra a árvore de navegação após o mapeamento dos operadores "|*".

Após este mapeamento, o procedimento obtenha próximo passo s está apto a identificar os passos atuais válidos de execução.

Como mostra os nós em destaque, existem dois passos habilitados para execução na árvore, as ações a e a.

Árvore de navegação após o mapeamento dos operadores "|*" Considerando que a ação a seja executada, tem-se a aplicação do procedimento atualizaEstadoÁrvore sobre os nós x e z.

Também sobre os nós x e z, o procedimento obtenha próximo passo s é executado, identificando como único passo atual válido a ação a, representada pelos nós x e y.

Árvore de navegação após a execução da ação a.

Após a execução de a, atualizaEstadoÁrvore é aplicado sobre os nós x e y.

A execução do procedimento obtenha próximo passo s sobre estes mesmos nós se deparará com o nó y, que novamente representa o processo P.

O nó é substituído pela árvore de navegação do processo P.

Na árvore, os nós x e y representam operadores "|*", que são mapeados em operadores básicos.

Árvore de navegação após a execução da ação a.

Árvore de navegação após a substituição de P.

Na árvore, os passos habilitados são as ações a (nós w e y), a (nós x e z) e a (nó v).

Caso o passo escolhido para execução seja a ação a, a aplicação do procedimento atualizaEstadoÁrvore sobre o nó v.

Árvore de navegação após a substituição dos operadores "|*" Árvore de navegação após a execução da ação a.

O procedimento de percurso obtenha próximo passo s, ao se deparar com o nó y, aplicará o mapeamento do operador associado à ação a.

Nesta árvore, os passos atuais válidos são as ações a e a.

Executando a ação a e aplicando o procedimento atualizaEstadoÁrvore sobre 5 o nó w.

O nó raiz da árvore possui o estado "Finalizado", indicando que a execução da instância do processo de Aquisição foi finalizada com sucesso.

Árvore de navegação após o mapeamento do operador Árvore de navegação final do processo de Aquisição.

Este capítulo apresenta um resumo desta dissertação, suas contribuições e limitações, bem como a indicação de possíveis trabalhos futuros.

A abordagem tradicional para o tratamento de workflows é implementá-los como parte da aplicação computacional.

As principais desvantagens desta abordagem é que ela torna o gerenciamento do processo rígido e, muitas vezes, não possibilita o reaproveitamento de passos já definidos em outros processos.

O surgimento do paradigma SOC, apresentado em 2003, reforçou a necessidade de separação entre a construção dos processos de negócio e a implementação das atividades que os compõem.

As tecnologias de gerenciamento de processos de negócio que foram desenvolvidas para atender a este requisito impulsionaram a criação de diversas linguagens e ferramentas para definição e controle de processos, principalmente baseadas em serviços web.

Entre tantas linguagens para a definição de processos de negócio, destacou-se a ausência de um padrão formal como base de representação, capaz de expressar de forma não ambígua a semântica associada às construções existentes nestas linguagens.

Os formalismos apontados como candidatos naturais a este papel são as redes de Petri e as álgebras de processos.

Trabalhos como descrevem o uso destes formalismos na especificação de processos de negócio.

Aalst, Hofstede, Kiepuszewski e Barros, em, identificaram padrões para o controle de fluxos em workflows.

Um dos objetivos dos autores ao definir os padrões foi o de estabelecer parâmetros para a comparação entre as linguagens de definição de processos de negócio, já que esta comparação não pode ser realizada em termos de expressividade.

Esta dissertação de mestrado apresenta uma linguagem implementada como uma extensão da SQL que habilita um gerenciador de banco de dados relacional à criação e manutenção de processos de negócio.

Esta linguagem, denominada NPDL, utiliza operadores da álgebra de processos e outros operadores adicionais para representar o comportamento dos padrões de controle de fluxo.

O interpretador da NPDL é parte de uma biblioteca de funções, a NavigationPlanTool, desenvolvida para apoiar também as fases de instanciação e execução de processos de negócio.

A escolha da álgebra de processos como arcabouço formal para a NPDL, devido à sua forma algébrica e puramente textual, possibilitou a criação de uma representação de processos mais apropriada para a manipulação computacional e para o armazenamento em uma estrutura relacional de dados.

Além disso, a característica composicional da álgebra de processos, sem reduzir o seu potencial de análise, habilita a composição de grandes processos a partir de processos menores.

Isso constitui um aspecto importante para processos de negócio, nos quais é comum a ocorrência de reutilização de definições.

A maioria das extensões de álgebra de processos não apóia a modelagem de aspectos associados ao processo em seu tempo de execução.

Isso compromete o uso de álgebra de processos na especificação dos padrões de controle de fluxo Múltiplas Instâncias com Conhecimento Prévio em Tempo de Execução, Escolha Exclusiva, e consequentemente Escolha Múltipla, Junção Sincronizada, Junção Múltipla e Discriminador, conforme discutido na Seção 3deste texto.

Em NDPL é possível tratar uma escolha exclusiva por meio dos operadores % e "%!", que habilitam ou desabilitam a execução de uma atividade de acordo com uma condição, ou seja, uma função atômica booleana avaliada em tempo de execução do processo.

O padrão Múltiplas Instâncias com Conhecimento Prévio em Tempo de Execução é representado na NPDL pelo operador de repetição, sendo f uma função inteira, também avaliada em tempo de execução do processo.

Com o objetivo de facilitar a tarefa de definição de processos, foram introduzidos na NPDL os operadores de composição múltipla "&", composição discriminatória (|*), composição paralela entrelaçada "|*" e repetição que representam, respectivamente, os padrões Junção Múltipla, Discriminador, Roteamento Paralelo Entrelaçado e todos os de Múltiplas Instâncias.

Estes operadores não pertencem a ACP, extensão da álgebra de processos utilizada neste trabalho.

Entretanto, eles podem ser representados pela combinação dos operadores básicos.

A Seção 3deste texto mostrou um exemplo de especificação completa em NPDL de um sistema de pequeno porte.

Por meio desse exemplo é possível verificar que a NPDL pode ser aplicada de modo satisfatório na definição de processos de negócio, superando algumas limitações e dificuldades da álgebra de processos aplicada a este fim.

A utilização das árvores de navegação, construídas a partir das expressões algébricas que definem processos em NPDL, facilitou o controle de execução de instâncias feito pela NavigationPlanTool.

Em uma árvore de navegação, os nós folhas representam os passos que integram a definição do processo, enquanto os nós internos representam os operadores que determinam a forma de encadeamento desses passos.

As regras de transição para os operadores da ACP são utilizadas no algoritmo que percorre a árvore para definir os passos atualmente habilitados para execução e no algoritmo de atualização do estado da instância de processo após o início ou término da execução de um passo.

Processos recursivos e casos especiais de paralelismo são tratados por meio de replicações de ramos da árvore, conforme descreve a Seção 441 deste texto.

O armazenamento dos dados de definição dos processos e dos dados de execução das instâncias em um banco de dados relacional torna a NavigationPlanTool uma ferramenta escalável, pois permite a recuperação eficiente do estado de execução das instâncias.

A NavigationPlanTool está implementada na forma de uma biblioteca de funções.

Por isso, na abordagem proposta por este trabalho, não há gargalos no gerenciamento dos processos de negócio porque não há um mecanismo centralizador.

Além disso, as definições de processos podem ser compartilhadas entre diferentes aplicações que utilizam a NavigationPlanTool, por meio do acesso a um banco de dados comum a essas aplicações.

Esta característica é muito importante em ambientes cooperativos, além de possibilitar que o aspecto composicional das expressões algébricas de processos seja bastante explorado.

A NavigationPlanTool foi aceita para a Sessão de Demos do XX Simpósio Brasileiro de Banco de Dados, que ocorreu em Outubro de 2005.

Em álgebra de processos e em NPDL, os estados não são representados explicitamente.

Esta característica impossibilita a criação de uma regra genérica para a especificação do padrão Marco (Seção 325 deste texto), requerendo, para cada caso de uso, um mapeamento particular.

Embora atualmente a NPDL seja capaz de representar todos os padrões de controle de fluxo (como demonstrado na Seção 32), ela tem uma deficiência que pode comprometer o seu uso em alguns tipos de processos de negócio, a incapacidade de representar explicitamente, nas definições de processos, aspectos relacionados a dados, conforme detalha o item 541 na próxima seção deste texto.

Finalizando a conclusão deste trabalho, quatro possíveis futuros trabalhos são apresentados.

As sugestões 541 e 542, pois já estão sendo desenvolvidas pelo grupo de pesquisa em banco de dados do IME-USP.

A versão atual da NPDL não provê mecanismos para a especificação dos dados de entrada e saída dos processos definidos.

Deste modo, a troca de dados entre os processos ocorre segundo a abordagem conhecida como blackboard.

Nesta abordagem, os processos compartilham uma área de memória (que pode, inclusive, ser o próprio banco de dados utilizado pela ferramenta NavigationPlanTool).

Os processos obtêm desta memória compartilhada o valor dos seus parâmetros de entrada no início de suas execuções e nela depositam os seus valores de saída no final de suas execuções.

Essa abordagem para o tratamento de dados é bastante simplista.

Assim como ocorreu com o controle de fluxo, Russell, Hofstede, Edmond e Aalst definiram em padrões de dados para workflows.

Existe uma série de conceitos relacionados à representação e à utilização de dados em sistemas de workflows.

Esses conceitos especificam a forma como os dados podem ser empregados dentro dos processos e caracterizam a interação de elementos de dados com as outras construções presentes no workflow ou no ambiente em que ele é executado.

Uma outra possível abordagem é a utilização das propriedades da CRL (micro Commom Representation Language), que é uma extensão minimal da ACP com tipos de dados abstratos equacionais.

Esta extensão foi definida por Groote e Reniers em.

Em CRL, variáveis de processos e ações podem ser parametrizadas com dados.

Agregar à NPDL os padrões de dados ou propriedades da CRL a habilitaria.

para a representação de processos mais completa com a inclusão de dados.

Expressões típicas de processos em NPDL são bastante simples.

Entretanto, a identificação dos padrões de controle nos processos e a sua tradução para expressões em NPDL nem sempre são tarefas triviais, requerendo do projetista experiência nesse tipo de modelagem.

Aliar o uso da NPDL a uma ferramenta gráfica para a definição de processos auxiliaria a etapa de projeto, uma vez que descrições gráficas de processos são mais intuitivas que as textuais.

Estudos como mostram que é possível combinar os benefícios das redes de Petri e da álgebra de processos em um modelo unificado A subárea de análise de processos é o atual enfoque da pesquisa no Gerenciamento de Processos de Negócio.

A popularidade de termos como Process Mining (mineração de processos) e BPI Business Process Intelligence (Análise de Processos de Negócio) são resultados dessa tendência.

Enquanto o BPI prioriza a análise, predição e otimização de processos, as técnicas de mineração de processos se baseiam em logs de execução para identificar relações de dependência entre as atividades que constituem os processos.

A pesquisa de Agrawal, Gunopulos e Leymann é a principal referência para os trabalhos sobre mineração de processos.

Aalst e Weijters, em, realizaram uma comparação entre as diferentes técnicas existentes.

Os logs de execução das instâncias controladas pela NavigationPlanTool são "pedaçãos" das expressões algébricas que definem seus processos de origem.

Análises envolvendo tanto dados do log, quanto dados das definições dos processos, explorando as propriedades algébricas das expressões, podem resultar em informações que auxiliem na reestruturação do processo.

A "reconfiguração" envolve a reescrita das expressões algébricas que representam os processos, com o objetivo de simplificá-las ou de atingir representações "normalizadas", ou seja, livres de pontos inatingíveis ou redundantes na definição.

Uma abordagem inovadora para o tratamento deste problema foi proposta por Pankratius e Stucky em.

Os autores definiram uma notação baseada nos operadores da álgebra relacional para a composição de módulos de workflows.

Módulos de workflows podem ser definidos como conjuntos de atividades inter-relacionadas.

Os autores também criaram uma definição para normalização de workflows inspirada no conceito de dependências funcionais e formas normais de banco de dados.

Tipos possíveis de passos.

De acordo com a estrutura definida para as relações np_process e np_step, a tradução dos comandos NPDL.

A relação np_navigation_plan, da Tabela B5, armazena os dados do plano de navegação dos processos.

Em NPDL, o plano de navegação de um processo é definido por uma expressão algébrica que pode envolver ações, operadores, regras, funções, números e outros processos previamente definidos.

A relação np_navigation_plan mantém os relacionamentos entre processos e passos por meio das colunas process_id e component_id.

Como o plano de navegação de um processo pode ser recursivo ou envolver outros processos, a coluna component_id pode referenciar registros tanto da relação np_step quanto da relação np_process.

A coluna component_type indica qual relação o valor do campo component_id referencia.

Um registro de np_navigation_plan pode assumir em sua coluna component_type um dos valores indicados na Tabela B6.

Relação np_navigation_plan.

Tipos possíveis de componentes.

Na relação np_navigation_plan, as expressões algébricas dos processos ficam armazenadas em notação prefixa.

A tradução do comando NPDL de definição de plano de navegação do processo "ProcExemplo" resulta nos seguintes comandos SQL (considerando como dados já cadastrados os relacionados nas Tabelas B2, Be B5), A relação np_requested_process, ilustrada pela Tabela B7, representa as instâncias de processos.

Cada instância está associada ao seu processo (coluna process_i, ao usuário que a solicitou (coluna user_name) e à data da requisição (colunas request_date e request_time).

Relação np_required_process.

Relação np_instance_log.

Cada registro da relação np_instance_log, como mostra a Tabela B8, representa a execução de um passo em uma determinada instância de processo.

A coluna instance_id indica a instancia à qual a execução está associada, component_id indica o passo executado e execution_status mantém o estado da execução iniciada, finalizada ou cancelad do passo.

Além disso, um registro do log também possui informações sobre a data e hora de início e término da execução e o seu valor de retorno (utilizado no caso da execução de regras ou funções).

Um registro da relação np_instance_log pode assumir como valor para a coluna execution_status um dos valores descritos na Tabela B9.

Possíveis estados para passos.

É importante ressaltar que a estrutura relacional de dados utilizada pela NavigationPlanTool não precisa ser mantida em um banco de dados de acesso exclusivo à ferramenta.

A prática mais comum é manter esta estrutura no banco que armazena os dados da aplicação que a utiliza ou em um banco de dados acessado por várias aplicações, com o objetivo de compartilhar as definições de processos.

Síntese dos Padrões de Controle de Fluxo em NPDL.

As Figuras C1 e Csintetizam a especificação dos padrões de controle de fluxo em NPDL.

Quando possível, as figuras trazem uma representação gráfica dos padrões.

Padrões de controle de fluxo em NPDL (Parte 1).

Não há uma representação gráfica para os padrões que envolvem múltiplas instâncias.

O padrão 1Múltiplas Instâncias sem Sincronização define que "dentro do contexto de uma instância de workflow, múltiplas instâncias de uma atividade podem ser ser criadas, gerando linhas de execução independentes.

Essas linhas não precisam ser sincronizadas".

Em NPDL, o operador unário permite a criação de múltiplas instâncias de uma atividade.

Por no processo P definido como tem-se que a atividade A pode ser executada uma ou mais vezes, de forma paralela.

O padrão 1Múltiplas Instâncias com Conhecimento Prévio em Tempo de Projeto especifica que "para uma instâncias de processo, uma atividade é instanciada um número específico de vezes e este número é conhecido em tempo de projeto do processo.

Após o término da execução de todas as instâncias da atividade, alguma outra atividade precisa ser iniciada".

NPDL possui uma segunda vesão do operador que permite especificar o número de instâncias da atividade que serão criadas.

Por um processo P que deve executar instâncias da atividade A pode ser definido em NPDL como, O padrão 1Múltiplas Instâncias com Conhecimento Prévio em Tempo de Execução define que "para uma instância de processo, uma atividade é instanciada múltiplas vezes e o número de instâncias pode variar, mas é conhecido em algum estágio durante a execução do processo, antes que as instâncias da atividade tenham que ser criadas.

Após o término da execução de todas as instâncias da atividade, alguma outra atividade precisa ser iniciada".

NPDL possui uma terceira versão do operador, que permite associar a ele uma função que é avaliada em tempo de execução e que retorna um número inteiro positivo e não nulo, indicando o número de instâncias da atividade que deverão ser criadas.

Em que f é uma função que retorna um número inteiro maior que zero.

O último padrão de múltiplas instâncias é o 15 Múltiplas Instâncias sem Conhecimento Prévio em Tempo de Execução.

Este padrão é semelhante ao padrão 12, diferenciando-se do primeiro simplesmente por requerer a sincronização das instâncias antes de habilitar a execução da atividade seguinte.

Para representá-lo, utiliza-se o operador de repetição ilimitada combinado com o operador de composição seqüencial "·".

Por quando um processo deve executar múltiplas instâncias da atividade A e então ele só pode executar B depois que a execução das instâncias de A tiver sido finalizada, a expressão NPDL correspondente é, Definição, Um dado subprocesso pode ser encerrado quando não há nada mais a ser feito.

O tratamento de estado final em NPDL é similar ao da algebra de processos, ou seja, não há um símbolo NPDL que represente explicitamente o estado final de um processo.

Mas é importante considerar a diferença entre um processo que terminou com sucesso e um processo que ficou infinitamente bloqueado.

Esse último caso é denominado deadlock.

Embora não exista um termo específico para representar o estado final de um processo na ACP, existe a constante especial (|*) que representa o deadlock.

O símbolo NPDL para o deadlock é "#".

Atividade Cancelável Definição, Ocorre quando uma atividade pode ser desabilitada durante a execução da instância do processo.

O comportamento deste padrão é representado em NPDL por meio da substituição, na expressão do processo, da atividade que permite cancelamento por um termo envolvendo a atividade composta alternativamente com o símbolo de deadlock "#".

Caso Cancelável Definição, Este padrão ocorre quando a instância do workflow pode ser removida completamente.

Este padrão está inteiramente associado ao workflow em seu tempo de execução.

Toda instância de processo definido em NPDL pode ser cancelada em qualquer instante de sua execução, sendo esta, uma responsabilidade do serviço de execução.

Padrões de controle de fluxo em NPDL Parte.

